
samd21_ed013tc1__4_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006da8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000348  20000000  00006da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  20000348  000070f0  00020348  2**2
                  ALLOC
  3 .stack        00002004  2000042c  000071d4  00020348  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001ad8b  00000000  00000000  000203c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c82  00000000  00000000  0003b154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ec6f  00000000  00000000  0003cdd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005f8  00000000  00000000  0004ba45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000780  00000000  00000000  0004c03d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000050ad  00000000  00000000  0004c7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009dc9  00000000  00000000  0005186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00086778  00000000  00000000  0005b633  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001484  00000000  00000000  000e1dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     0$. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000348 	.word	0x20000348
      d4:	00000000 	.word	0x00000000
      d8:	00006da8 	.word	0x00006da8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000034c 	.word	0x2000034c
     108:	00006da8 	.word	0x00006da8
     10c:	00006da8 	.word	0x00006da8
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00006da8 	.word	0x00006da8
     1c8:	20000000 	.word	0x20000000
     1cc:	20000348 	.word	0x20000348
     1d0:	20000004 	.word	0x20000004
     1d4:	20000348 	.word	0x20000348
     1d8:	2000042c 	.word	0x2000042c
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	000046bd 	.word	0x000046bd
     1f8:	000045fd 	.word	0x000045fd

000001fc <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
     1fc:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fe:	4802      	ldr	r0, [pc, #8]	; (208 <delay_driver_init+0xc>)
     200:	4b02      	ldr	r3, [pc, #8]	; (20c <delay_driver_init+0x10>)
     202:	4798      	blx	r3
}
     204:	bd10      	pop	{r4, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	e000e010 	.word	0xe000e010
     20c:	00000369 	.word	0x00000369

00000210 <system_init>:

void system_init(void)
{
     210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     212:	46de      	mov	lr, fp
     214:	4657      	mov	r7, sl
     216:	464e      	mov	r6, r9
     218:	4645      	mov	r5, r8
     21a:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     21c:	4b40      	ldr	r3, [pc, #256]	; (320 <system_init+0x110>)
     21e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     220:	22c0      	movs	r2, #192	; 0xc0
     222:	05d2      	lsls	r2, r2, #23
     224:	2310      	movs	r3, #16
     226:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     228:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22a:	4b3e      	ldr	r3, [pc, #248]	; (324 <system_init+0x114>)
     22c:	493e      	ldr	r1, [pc, #248]	; (328 <system_init+0x118>)
     22e:	6299      	str	r1, [r3, #40]	; 0x28
     230:	24c0      	movs	r4, #192	; 0xc0
     232:	0624      	lsls	r4, r4, #24
     234:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	2544      	movs	r5, #68	; 0x44
     238:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23a:	2101      	movs	r1, #1
     23c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     240:	2020      	movs	r0, #32
     242:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     244:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     246:	4839      	ldr	r0, [pc, #228]	; (32c <system_init+0x11c>)
     248:	6298      	str	r0, [r3, #40]	; 0x28
     24a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24c:	3501      	adds	r5, #1
     24e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     250:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     252:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     254:	2040      	movs	r0, #64	; 0x40
     256:	4684      	mov	ip, r0
     258:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25c:	4834      	ldr	r0, [pc, #208]	; (330 <system_init+0x120>)
     25e:	4682      	mov	sl, r0
     260:	6298      	str	r0, [r3, #40]	; 0x28
     262:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     264:	3501      	adds	r5, #1
     266:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     268:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     26c:	2080      	movs	r0, #128	; 0x80
     26e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     270:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     272:	4830      	ldr	r0, [pc, #192]	; (334 <system_init+0x124>)
     274:	4680      	mov	r8, r0
     276:	6298      	str	r0, [r3, #40]	; 0x28
     278:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	3501      	adds	r5, #1
     27c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     280:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     282:	2580      	movs	r5, #128	; 0x80
     284:	022d      	lsls	r5, r5, #8
     286:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     288:	482b      	ldr	r0, [pc, #172]	; (338 <system_init+0x128>)
     28a:	6298      	str	r0, [r3, #40]	; 0x28
     28c:	482b      	ldr	r0, [pc, #172]	; (33c <system_init+0x12c>)
     28e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     290:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     292:	204f      	movs	r0, #79	; 0x4f
     294:	5c1e      	ldrb	r6, [r3, r0]
     296:	2704      	movs	r7, #4
     298:	433e      	orrs	r6, r7
     29a:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     29c:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a2:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2a4:	2694      	movs	r6, #148	; 0x94
     2a6:	5191      	str	r1, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a8:	3039      	adds	r0, #57	; 0x39
     2aa:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ac:	3020      	adds	r0, #32
     2ae:	4f24      	ldr	r7, [pc, #144]	; (340 <system_init+0x130>)
     2b0:	501f      	str	r7, [r3, r0]
     2b2:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b4:	27c0      	movs	r7, #192	; 0xc0
     2b6:	46bb      	mov	fp, r7
     2b8:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438f      	bics	r7, r1
     2bc:	46b9      	mov	r9, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2be:	465f      	mov	r7, fp
     2c0:	464d      	mov	r5, r9
     2c2:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c4:	4665      	mov	r5, ip
     2c6:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2c8:	3f38      	subs	r7, #56	; 0x38
     2ca:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4655      	mov	r5, sl
     2ce:	501d      	str	r5, [r3, r0]
     2d0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	25c6      	movs	r5, #198	; 0xc6
     2d4:	46a9      	mov	r9, r5
     2d6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d8:	002f      	movs	r7, r5
     2da:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	464d      	mov	r5, r9
     2de:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e0:	3d46      	subs	r5, #70	; 0x46
     2e2:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2e4:	3508      	adds	r5, #8
     2e6:	2780      	movs	r7, #128	; 0x80
     2e8:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ea:	4645      	mov	r5, r8
     2ec:	501d      	str	r5, [r3, r0]
     2ee:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f0:	3747      	adds	r7, #71	; 0x47
     2f2:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2f4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f6:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f8:	2480      	movs	r4, #128	; 0x80
     2fa:	05e4      	lsls	r4, r4, #23
     2fc:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2fe:	2588      	movs	r5, #136	; 0x88
     300:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     302:	501c      	str	r4, [r3, r0]
     304:	4a0f      	ldr	r2, [pc, #60]	; (344 <system_init+0x134>)
     306:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     308:	3036      	adds	r0, #54	; 0x36
     30a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     30c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(EINK_X_LED_0_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(EINK_X_LED_0_PIN, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
     310:	4b0d      	ldr	r3, [pc, #52]	; (348 <system_init+0x138>)
     312:	4798      	blx	r3
}
     314:	bc3c      	pop	{r2, r3, r4, r5}
     316:	4690      	mov	r8, r2
     318:	4699      	mov	r9, r3
     31a:	46a2      	mov	sl, r4
     31c:	46ab      	mov	fp, r5
     31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     320:	000003cd 	.word	0x000003cd
     324:	41004400 	.word	0x41004400
     328:	40000010 	.word	0x40000010
     32c:	40000020 	.word	0x40000020
     330:	40000040 	.word	0x40000040
     334:	40000080 	.word	0x40000080
     338:	40028000 	.word	0x40028000
     33c:	c0020000 	.word	0xc0020000
     340:	40000001 	.word	0x40000001
     344:	c0004000 	.word	0xc0004000
     348:	000001fd 	.word	0x000001fd

0000034c <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     34c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     350:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     352:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     354:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     358:	4770      	bx	lr

0000035a <atomic_leave_critical>:
     35a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     35e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     360:	f383 8810 	msr	PRIMASK, r3
}
     364:	4770      	bx	lr
	...

00000368 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     368:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     36a:	4b02      	ldr	r3, [pc, #8]	; (374 <delay_init+0xc>)
     36c:	6018      	str	r0, [r3, #0]
     36e:	4b02      	ldr	r3, [pc, #8]	; (378 <delay_init+0x10>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	20000364 	.word	0x20000364
     378:	0000050d 	.word	0x0000050d

0000037c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     37c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <delay_ms+0x14>)
     380:	681c      	ldr	r4, [r3, #0]
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x18>)
     384:	4798      	blx	r3
     386:	0001      	movs	r1, r0
     388:	0020      	movs	r0, r4
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <delay_ms+0x1c>)
     38c:	4798      	blx	r3
}
     38e:	bd10      	pop	{r4, pc}
     390:	20000364 	.word	0x20000364
     394:	000003c1 	.word	0x000003c1
     398:	00000521 	.word	0x00000521

0000039c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     39c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     39e:	4a06      	ldr	r2, [pc, #24]	; (3b8 <_sbrk+0x1c>)
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	2a00      	cmp	r2, #0
     3a4:	d004      	beq.n	3b0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3a6:	4a04      	ldr	r2, [pc, #16]	; (3b8 <_sbrk+0x1c>)
     3a8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3aa:	18c3      	adds	r3, r0, r3
     3ac:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3b0:	4902      	ldr	r1, [pc, #8]	; (3bc <_sbrk+0x20>)
     3b2:	4a01      	ldr	r2, [pc, #4]	; (3b8 <_sbrk+0x1c>)
     3b4:	6011      	str	r1, [r2, #0]
     3b6:	e7f6      	b.n	3a6 <_sbrk+0xa>
     3b8:	20000368 	.word	0x20000368
     3bc:	20002430 	.word	0x20002430

000003c0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <_get_cycles_for_ms+0x8>)
     3c2:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3c4:	4770      	bx	lr
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00005dc0 	.word	0x00005dc0

000003cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3cc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3ce:	4b07      	ldr	r3, [pc, #28]	; (3ec <_init_chip+0x20>)
     3d0:	685a      	ldr	r2, [r3, #4]
     3d2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     3d4:	4b06      	ldr	r3, [pc, #24]	; (3f0 <_init_chip+0x24>)
     3d6:	4798      	blx	r3
	_sysctrl_init_sources();
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <_init_chip+0x28>)
     3da:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     3dc:	2008      	movs	r0, #8
     3de:	4c06      	ldr	r4, [pc, #24]	; (3f8 <_init_chip+0x2c>)
     3e0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <_init_chip+0x30>)
     3e4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3e6:	20f7      	movs	r0, #247	; 0xf7
     3e8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     3ea:	bd10      	pop	{r4, pc}
     3ec:	41004000 	.word	0x41004000
     3f0:	00000441 	.word	0x00000441
     3f4:	00000461 	.word	0x00000461
     3f8:	00000401 	.word	0x00000401
     3fc:	00000495 	.word	0x00000495

00000400 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     400:	07c3      	lsls	r3, r0, #31
     402:	d509      	bpl.n	418 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <_gclk_init_generators_by_fref+0x34>)
     406:	2280      	movs	r2, #128	; 0x80
     408:	0092      	lsls	r2, r2, #2
     40a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     40c:	4a0a      	ldr	r2, [pc, #40]	; (438 <_gclk_init_generators_by_fref+0x38>)
     40e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     410:	001a      	movs	r2, r3
     412:	7853      	ldrb	r3, [r2, #1]
     414:	09db      	lsrs	r3, r3, #7
     416:	d1fc      	bne.n	412 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     418:	0703      	lsls	r3, r0, #28
     41a:	d509      	bpl.n	430 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     41c:	4b05      	ldr	r3, [pc, #20]	; (434 <_gclk_init_generators_by_fref+0x34>)
     41e:	2204      	movs	r2, #4
     420:	32ff      	adds	r2, #255	; 0xff
     422:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     424:	4a05      	ldr	r2, [pc, #20]	; (43c <_gclk_init_generators_by_fref+0x3c>)
     426:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     428:	001a      	movs	r2, r3
     42a:	7853      	ldrb	r3, [r2, #1]
     42c:	09db      	lsrs	r3, r3, #7
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	40000c00 	.word	0x40000c00
     438:	00010700 	.word	0x00010700
     43c:	00010403 	.word	0x00010403

00000440 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     440:	4b06      	ldr	r3, [pc, #24]	; (45c <_pm_init+0x1c>)
     442:	7a1a      	ldrb	r2, [r3, #8]
     444:	b2d2      	uxtb	r2, r2
     446:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     448:	7a5a      	ldrb	r2, [r3, #9]
     44a:	b2d2      	uxtb	r2, r2
     44c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     44e:	7a9a      	ldrb	r2, [r3, #10]
     450:	b2d2      	uxtb	r2, r2
     452:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     454:	7ada      	ldrb	r2, [r3, #11]
     456:	b2d2      	uxtb	r2, r2
     458:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     45a:	4770      	bx	lr
     45c:	40000400 	.word	0x40000400

00000460 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     460:	4a0b      	ldr	r2, [pc, #44]	; (490 <_sysctrl_init_sources+0x30>)
     462:	6993      	ldr	r3, [r2, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     464:	21fe      	movs	r1, #254	; 0xfe
     466:	03c9      	lsls	r1, r1, #15
     468:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     46a:	214e      	movs	r1, #78	; 0x4e
     46c:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
     46e:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     470:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     472:	392f      	subs	r1, #47	; 0x2f
     474:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     476:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     478:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     47a:	2204      	movs	r2, #4
     47c:	68cb      	ldr	r3, [r1, #12]
     47e:	421a      	tst	r2, r3
     480:	d0fc      	beq.n	47c <_sysctrl_init_sources+0x1c>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
     482:	4a03      	ldr	r2, [pc, #12]	; (490 <_sysctrl_init_sources+0x30>)
     484:	6993      	ldr	r3, [r2, #24]
     486:	2180      	movs	r1, #128	; 0x80
     488:	430b      	orrs	r3, r1
     48a:	6193      	str	r3, [r2, #24]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     48c:	4770      	bx	lr
     48e:	46c0      	nop			; (mov r8, r8)
     490:	40000800 	.word	0x40000800

00000494 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     494:	2202      	movs	r2, #2
     496:	4b19      	ldr	r3, [pc, #100]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     498:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     49a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     49c:	320e      	adds	r2, #14
     49e:	68cb      	ldr	r3, [r1, #12]
     4a0:	421a      	tst	r2, r3
     4a2:	d0fc      	beq.n	49e <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     4a4:	4a16      	ldr	r2, [pc, #88]	; (500 <_sysctrl_init_referenced_generators+0x6c>)
     4a6:	4b15      	ldr	r3, [pc, #84]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4a8:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4aa:	4b16      	ldr	r3, [pc, #88]	; (504 <_sysctrl_init_referenced_generators+0x70>)
     4ac:	681b      	ldr	r3, [r3, #0]
     4ae:	0e9b      	lsrs	r3, r3, #26
     4b0:	2b3f      	cmp	r3, #63	; 0x3f
     4b2:	d01a      	beq.n	4ea <_sysctrl_init_referenced_generators+0x56>
     4b4:	029b      	lsls	r3, r3, #10
     4b6:	2280      	movs	r2, #128	; 0x80
     4b8:	0092      	lsls	r2, r2, #2
     4ba:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     4bc:	4a0f      	ldr	r2, [pc, #60]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4be:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     4c0:	2302      	movs	r3, #2
     4c2:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     4c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     4c6:	075b      	lsls	r3, r3, #29
     4c8:	d512      	bpl.n	4f0 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ca:	0011      	movs	r1, r2
	tmp &= mask;
     4cc:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ce:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     4d0:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     4d2:	2bd0      	cmp	r3, #208	; 0xd0
     4d4:	d1fb      	bne.n	4ce <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     4d6:	4a09      	ldr	r2, [pc, #36]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4d8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     4da:	2180      	movs	r1, #128	; 0x80
     4dc:	430b      	orrs	r3, r1
     4de:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     4e0:	4a09      	ldr	r2, [pc, #36]	; (508 <_sysctrl_init_referenced_generators+0x74>)
     4e2:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     4e4:	09db      	lsrs	r3, r3, #7
     4e6:	d1fc      	bne.n	4e2 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     4e8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4ea:	23fc      	movs	r3, #252	; 0xfc
     4ec:	01db      	lsls	r3, r3, #7
     4ee:	e7e5      	b.n	4bc <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     4f0:	4902      	ldr	r1, [pc, #8]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     4f2:	2210      	movs	r2, #16
     4f4:	68cb      	ldr	r3, [r1, #12]
     4f6:	421a      	tst	r2, r3
     4f8:	d0fc      	beq.n	4f4 <_sysctrl_init_referenced_generators+0x60>
     4fa:	e7ec      	b.n	4d6 <_sysctrl_init_referenced_generators+0x42>
     4fc:	40000800 	.word	0x40000800
     500:	04010000 	.word	0x04010000
     504:	00806024 	.word	0x00806024
     508:	40000c00 	.word	0x40000c00

0000050c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     50c:	4b02      	ldr	r3, [pc, #8]	; (518 <_delay_init+0xc>)
     50e:	4a03      	ldr	r2, [pc, #12]	; (51c <_delay_init+0x10>)
     510:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     512:	2205      	movs	r2, #5
     514:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     516:	4770      	bx	lr
     518:	e000e010 	.word	0xe000e010
     51c:	00ffffff 	.word	0x00ffffff

00000520 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     520:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     522:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     524:	1e5e      	subs	r6, r3, #1
     526:	b2f6      	uxtb	r6, r6
     528:	2b00      	cmp	r3, #0
     52a:	d013      	beq.n	554 <_delay_cycles+0x34>
     52c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     52e:	4a0e      	ldr	r2, [pc, #56]	; (568 <_delay_cycles+0x48>)
     530:	4d0e      	ldr	r5, [pc, #56]	; (56c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     532:	2080      	movs	r0, #128	; 0x80
     534:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     536:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     538:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     53a:	6813      	ldr	r3, [r2, #0]
     53c:	4203      	tst	r3, r0
     53e:	d0fc      	beq.n	53a <_delay_cycles+0x1a>
	while (n--) {
     540:	3c01      	subs	r4, #1
     542:	b2e4      	uxtb	r4, r4
     544:	2cff      	cmp	r4, #255	; 0xff
     546:	d1f6      	bne.n	536 <_delay_cycles+0x16>
     548:	0633      	lsls	r3, r6, #24
     54a:	1af6      	subs	r6, r6, r3
     54c:	4b08      	ldr	r3, [pc, #32]	; (570 <_delay_cycles+0x50>)
     54e:	469c      	mov	ip, r3
     550:	4461      	add	r1, ip
     552:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     554:	4b04      	ldr	r3, [pc, #16]	; (568 <_delay_cycles+0x48>)
     556:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     558:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     55a:	0019      	movs	r1, r3
     55c:	2280      	movs	r2, #128	; 0x80
     55e:	0252      	lsls	r2, r2, #9
     560:	680b      	ldr	r3, [r1, #0]
     562:	4213      	tst	r3, r2
     564:	d0fc      	beq.n	560 <_delay_cycles+0x40>
		;
}
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	e000e010 	.word	0xe000e010
     56c:	00ffffff 	.word	0x00ffffff
     570:	ff000001 	.word	0xff000001

00000574 <eink_ite_wait_for_hrdy>:
 * to use. 
 */
/**
 * \brief Wait For Host Ready function.
 */
static void eink_ite_wait_for_hrdy(void) {
     574:	b510      	push	{r4, lr}
    ptr_eink_ite_config->wait_for_hrdy();
     576:	4b02      	ldr	r3, [pc, #8]	; (580 <eink_ite_wait_for_hrdy+0xc>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	4798      	blx	r3
}
     57e:	bd10      	pop	{r4, pc}
     580:	20000390 	.word	0x20000390

00000584 <gfx_eink_set_pixel>:
}

/**
 * \brief Set Pixel function.
 */
static void gfx_eink_set_pixel(eink_coordinate x_set, eink_coordinate y_set, enum eink_pixel_colour pixel_colour) {
     584:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel(x_set, y_set, pixel_colour);
     586:	4b02      	ldr	r3, [pc, #8]	; (590 <gfx_eink_set_pixel+0xc>)
     588:	681b      	ldr	r3, [r3, #0]
     58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     58c:	4798      	blx	r3
}
     58e:	bd10      	pop	{r4, pc}
     590:	20000424 	.word	0x20000424

00000594 <gfx_eink_set_pixel_raw>:

/**
 * \brief Set Pixel with raw value function.
 */
static void gfx_eink_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value) {
     594:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel_raw(x_set, y_set, pixel_value);
     596:	4b02      	ldr	r3, [pc, #8]	; (5a0 <gfx_eink_set_pixel_raw+0xc>)
     598:	681b      	ldr	r3, [r3, #0]
     59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     59c:	4798      	blx	r3
}
     59e:	bd10      	pop	{r4, pc}
     5a0:	20000424 	.word	0x20000424

000005a4 <eink_et011tt2_set_pixel_raw>:
 * \param pixel_colour Color to set the pixel to.
 */
void eink_et011tt2_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_set)
{
    
}
     5a4:	4770      	bx	lr
	...

000005a8 <eink_et011tt2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_et011tt2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5aa:	46de      	mov	lr, fp
     5ac:	4657      	mov	r7, sl
     5ae:	464e      	mov	r6, r9
     5b0:	4645      	mov	r5, r8
     5b2:	b5e0      	push	{r5, r6, r7, lr}
     5b4:	b08b      	sub	sp, #44	; 0x2c
     5b6:	9003      	str	r0, [sp, #12]
     5b8:	9205      	str	r2, [sp, #20]
     5ba:	0018      	movs	r0, r3
     5bc:	9307      	str	r3, [sp, #28]
     5be:	ab14      	add	r3, sp, #80	; 0x50
     5c0:	8819      	ldrh	r1, [r3, #0]
     5c2:	9108      	str	r1, [sp, #32]
     5c4:	ab15      	add	r3, sp, #84	; 0x54
     5c6:	8819      	ldrh	r1, [r3, #0]
     5c8:	9109      	str	r1, [sp, #36]	; 0x24
     5ca:	ab16      	add	r3, sp, #88	; 0x58
     5cc:	781f      	ldrb	r7, [r3, #0]
     5ce:	ab17      	add	r3, sp, #92	; 0x5c
     5d0:	7819      	ldrb	r1, [r3, #0]
     5d2:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     5d4:	428f      	cmp	r7, r1
     5d6:	d051      	beq.n	67c <eink_et011tt2_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     5d8:	2a00      	cmp	r2, #0
     5da:	d04f      	beq.n	67c <eink_et011tt2_graphics_load_mono_image+0xd4>
     5dc:	2200      	movs	r2, #0
     5de:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     5e0:	0003      	movs	r3, r0
     5e2:	3b01      	subs	r3, #1
     5e4:	b29b      	uxth	r3, r3
     5e6:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5e8:	4b28      	ldr	r3, [pc, #160]	; (68c <eink_et011tt2_graphics_load_mono_image+0xe4>)
     5ea:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     5ec:	46b8      	mov	r8, r7
     5ee:	e033      	b.n	658 <eink_et011tt2_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5f0:	464b      	mov	r3, r9
     5f2:	2b08      	cmp	r3, #8
     5f4:	d003      	beq.n	5fe <eink_et011tt2_graphics_load_mono_image+0x56>
     5f6:	464a      	mov	r2, r9
     5f8:	0021      	movs	r1, r4
     5fa:	9801      	ldr	r0, [sp, #4]
     5fc:	47d8      	blx	fp
     5fe:	3501      	adds	r5, #1
     600:	3401      	adds	r4, #1
     602:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     604:	2d08      	cmp	r5, #8
     606:	d00b      	beq.n	620 <eink_et011tt2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     608:	7833      	ldrb	r3, [r6, #0]
     60a:	412b      	asrs	r3, r5
                    if(bit_value) {
     60c:	07db      	lsls	r3, r3, #31
     60e:	d5ef      	bpl.n	5f0 <eink_et011tt2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     610:	2f08      	cmp	r7, #8
     612:	d0f4      	beq.n	5fe <eink_et011tt2_graphics_load_mono_image+0x56>
     614:	003a      	movs	r2, r7
     616:	0021      	movs	r1, r4
     618:	9801      	ldr	r0, [sp, #4]
     61a:	4b1c      	ldr	r3, [pc, #112]	; (68c <eink_et011tt2_graphics_load_mono_image+0xe4>)
     61c:	4798      	blx	r3
     61e:	e7ee      	b.n	5fe <eink_et011tt2_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     620:	4643      	mov	r3, r8
     622:	3b01      	subs	r3, #1
     624:	b29b      	uxth	r3, r3
     626:	4698      	mov	r8, r3
     628:	4653      	mov	r3, sl
     62a:	3308      	adds	r3, #8
     62c:	b29b      	uxth	r3, r3
     62e:	469a      	mov	sl, r3
     630:	4643      	mov	r3, r8
     632:	2b00      	cmp	r3, #0
     634:	d008      	beq.n	648 <eink_et011tt2_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     636:	9b02      	ldr	r3, [sp, #8]
     638:	4443      	add	r3, r8
     63a:	001e      	movs	r6, r3
     63c:	9b03      	ldr	r3, [sp, #12]
     63e:	469c      	mov	ip, r3
     640:	4466      	add	r6, ip
     642:	4654      	mov	r4, sl
     644:	2500      	movs	r5, #0
     646:	e7df      	b.n	608 <eink_et011tt2_graphics_load_mono_image+0x60>
     648:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     64a:	9b04      	ldr	r3, [sp, #16]
     64c:	3301      	adds	r3, #1
     64e:	b29b      	uxth	r3, r3
     650:	9304      	str	r3, [sp, #16]
     652:	9a05      	ldr	r2, [sp, #20]
     654:	429a      	cmp	r2, r3
     656:	d911      	bls.n	67c <eink_et011tt2_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     658:	9b06      	ldr	r3, [sp, #24]
     65a:	1e1f      	subs	r7, r3, #0
     65c:	d0f5      	beq.n	64a <eink_et011tt2_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     65e:	9b07      	ldr	r3, [sp, #28]
     660:	9a04      	ldr	r2, [sp, #16]
     662:	4353      	muls	r3, r2
     664:	9302      	str	r3, [sp, #8]
     666:	9b09      	ldr	r3, [sp, #36]	; 0x24
     668:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     66a:	9b08      	ldr	r3, [sp, #32]
     66c:	4694      	mov	ip, r2
     66e:	4463      	add	r3, ip
     670:	b29b      	uxth	r3, r3
     672:	9301      	str	r3, [sp, #4]
     674:	4643      	mov	r3, r8
     676:	46b8      	mov	r8, r7
     678:	001f      	movs	r7, r3
     67a:	e7dc      	b.n	636 <eink_et011tt2_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
     67c:	b00b      	add	sp, #44	; 0x2c
     67e:	bc3c      	pop	{r2, r3, r4, r5}
     680:	4690      	mov	r8, r2
     682:	4699      	mov	r9, r3
     684:	46a2      	mov	sl, r4
     686:	46ab      	mov	fp, r5
     688:	bdf0      	pop	{r4, r5, r6, r7, pc}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	00000585 	.word	0x00000585

00000690 <eink_ed013tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed013tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	46de      	mov	lr, fp
     694:	4657      	mov	r7, sl
     696:	464e      	mov	r6, r9
     698:	4645      	mov	r5, r8
     69a:	b5e0      	push	{r5, r6, r7, lr}
     69c:	b08b      	sub	sp, #44	; 0x2c
     69e:	9003      	str	r0, [sp, #12]
     6a0:	9205      	str	r2, [sp, #20]
     6a2:	0018      	movs	r0, r3
     6a4:	9307      	str	r3, [sp, #28]
     6a6:	ab14      	add	r3, sp, #80	; 0x50
     6a8:	8819      	ldrh	r1, [r3, #0]
     6aa:	9108      	str	r1, [sp, #32]
     6ac:	ab15      	add	r3, sp, #84	; 0x54
     6ae:	8819      	ldrh	r1, [r3, #0]
     6b0:	9109      	str	r1, [sp, #36]	; 0x24
     6b2:	ab16      	add	r3, sp, #88	; 0x58
     6b4:	781f      	ldrb	r7, [r3, #0]
     6b6:	ab17      	add	r3, sp, #92	; 0x5c
     6b8:	7819      	ldrb	r1, [r3, #0]
     6ba:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     6bc:	428f      	cmp	r7, r1
     6be:	d051      	beq.n	764 <eink_ed013tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     6c0:	2a00      	cmp	r2, #0
     6c2:	d04f      	beq.n	764 <eink_ed013tc1_graphics_load_mono_image+0xd4>
     6c4:	2200      	movs	r2, #0
     6c6:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     6c8:	0003      	movs	r3, r0
     6ca:	3b01      	subs	r3, #1
     6cc:	b29b      	uxth	r3, r3
     6ce:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6d0:	4b28      	ldr	r3, [pc, #160]	; (774 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     6d2:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6d4:	46b8      	mov	r8, r7
     6d6:	e033      	b.n	740 <eink_ed013tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6d8:	464b      	mov	r3, r9
     6da:	2b08      	cmp	r3, #8
     6dc:	d003      	beq.n	6e6 <eink_ed013tc1_graphics_load_mono_image+0x56>
     6de:	464a      	mov	r2, r9
     6e0:	0021      	movs	r1, r4
     6e2:	9801      	ldr	r0, [sp, #4]
     6e4:	47d8      	blx	fp
     6e6:	3501      	adds	r5, #1
     6e8:	3401      	adds	r4, #1
     6ea:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     6ec:	2d08      	cmp	r5, #8
     6ee:	d00b      	beq.n	708 <eink_ed013tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     6f0:	7833      	ldrb	r3, [r6, #0]
     6f2:	412b      	asrs	r3, r5
                    if(bit_value) {
     6f4:	07db      	lsls	r3, r3, #31
     6f6:	d5ef      	bpl.n	6d8 <eink_ed013tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6f8:	2f08      	cmp	r7, #8
     6fa:	d0f4      	beq.n	6e6 <eink_ed013tc1_graphics_load_mono_image+0x56>
     6fc:	003a      	movs	r2, r7
     6fe:	0021      	movs	r1, r4
     700:	9801      	ldr	r0, [sp, #4]
     702:	4b1c      	ldr	r3, [pc, #112]	; (774 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     704:	4798      	blx	r3
     706:	e7ee      	b.n	6e6 <eink_ed013tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     708:	4643      	mov	r3, r8
     70a:	3b01      	subs	r3, #1
     70c:	b29b      	uxth	r3, r3
     70e:	4698      	mov	r8, r3
     710:	4653      	mov	r3, sl
     712:	3308      	adds	r3, #8
     714:	b29b      	uxth	r3, r3
     716:	469a      	mov	sl, r3
     718:	4643      	mov	r3, r8
     71a:	2b00      	cmp	r3, #0
     71c:	d008      	beq.n	730 <eink_ed013tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     71e:	9b02      	ldr	r3, [sp, #8]
     720:	4443      	add	r3, r8
     722:	001e      	movs	r6, r3
     724:	9b03      	ldr	r3, [sp, #12]
     726:	469c      	mov	ip, r3
     728:	4466      	add	r6, ip
     72a:	4654      	mov	r4, sl
     72c:	2500      	movs	r5, #0
     72e:	e7df      	b.n	6f0 <eink_ed013tc1_graphics_load_mono_image+0x60>
     730:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     732:	9b04      	ldr	r3, [sp, #16]
     734:	3301      	adds	r3, #1
     736:	b29b      	uxth	r3, r3
     738:	9304      	str	r3, [sp, #16]
     73a:	9a05      	ldr	r2, [sp, #20]
     73c:	429a      	cmp	r2, r3
     73e:	d911      	bls.n	764 <eink_ed013tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     740:	9b06      	ldr	r3, [sp, #24]
     742:	1e1f      	subs	r7, r3, #0
     744:	d0f5      	beq.n	732 <eink_ed013tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     746:	9b07      	ldr	r3, [sp, #28]
     748:	9a04      	ldr	r2, [sp, #16]
     74a:	4353      	muls	r3, r2
     74c:	9302      	str	r3, [sp, #8]
     74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     750:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     752:	9b08      	ldr	r3, [sp, #32]
     754:	4694      	mov	ip, r2
     756:	4463      	add	r3, ip
     758:	b29b      	uxth	r3, r3
     75a:	9301      	str	r3, [sp, #4]
     75c:	4643      	mov	r3, r8
     75e:	46b8      	mov	r8, r7
     760:	001f      	movs	r7, r3
     762:	e7dc      	b.n	71e <eink_ed013tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
     764:	b00b      	add	sp, #44	; 0x2c
     766:	bc3c      	pop	{r2, r3, r4, r5}
     768:	4690      	mov	r8, r2
     76a:	4699      	mov	r9, r3
     76c:	46a2      	mov	sl, r4
     76e:	46ab      	mov	fp, r5
     770:	bdf0      	pop	{r4, r5, r6, r7, pc}
     772:	46c0      	nop			; (mov r8, r8)
     774:	00000585 	.word	0x00000585

00000778 <eink_ed029tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed029tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     778:	b5f0      	push	{r4, r5, r6, r7, lr}
     77a:	46de      	mov	lr, fp
     77c:	4657      	mov	r7, sl
     77e:	464e      	mov	r6, r9
     780:	4645      	mov	r5, r8
     782:	b5e0      	push	{r5, r6, r7, lr}
     784:	b089      	sub	sp, #36	; 0x24
     786:	0019      	movs	r1, r3
     788:	9305      	str	r3, [sp, #20]
     78a:	ab12      	add	r3, sp, #72	; 0x48
     78c:	881c      	ldrh	r4, [r3, #0]
     78e:	9400      	str	r4, [sp, #0]
     790:	ab13      	add	r3, sp, #76	; 0x4c
     792:	881d      	ldrh	r5, [r3, #0]
     794:	9506      	str	r5, [sp, #24]
     796:	ab14      	add	r3, sp, #80	; 0x50
     798:	781d      	ldrb	r5, [r3, #0]
     79a:	46a8      	mov	r8, r5
     79c:	ab15      	add	r3, sp, #84	; 0x54
     79e:	781d      	ldrb	r5, [r3, #0]
     7a0:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     7a2:	45a8      	cmp	r8, r5
     7a4:	d04e      	beq.n	844 <eink_ed029tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     7a6:	2a00      	cmp	r2, #0
     7a8:	d04c      	beq.n	844 <eink_ed029tc1_graphics_load_mono_image+0xcc>
     7aa:	000b      	movs	r3, r1
     7ac:	9103      	str	r1, [sp, #12]
     7ae:	3b01      	subs	r3, #1
     7b0:	b29b      	uxth	r3, r3
     7b2:	3902      	subs	r1, #2
     7b4:	1ac9      	subs	r1, r1, r3
     7b6:	1841      	adds	r1, r0, r1
     7b8:	9102      	str	r1, [sp, #8]
     7ba:	46a4      	mov	ip, r4
     7bc:	4462      	add	r2, ip
     7be:	b292      	uxth	r2, r2
     7c0:	9204      	str	r2, [sp, #16]
     7c2:	3301      	adds	r3, #1
     7c4:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7c6:	4b23      	ldr	r3, [pc, #140]	; (854 <eink_ed029tc1_graphics_load_mono_image+0xdc>)
     7c8:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7ca:	469a      	mov	sl, r3
     7cc:	e02f      	b.n	82e <eink_ed029tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7ce:	464b      	mov	r3, r9
     7d0:	2b08      	cmp	r3, #8
     7d2:	d003      	beq.n	7dc <eink_ed029tc1_graphics_load_mono_image+0x64>
     7d4:	464a      	mov	r2, r9
     7d6:	0021      	movs	r1, r4
     7d8:	9800      	ldr	r0, [sp, #0]
     7da:	47d8      	blx	fp
     7dc:	3501      	adds	r5, #1
     7de:	3401      	adds	r4, #1
     7e0:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     7e2:	2d08      	cmp	r5, #8
     7e4:	d00b      	beq.n	7fe <eink_ed029tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     7e6:	7833      	ldrb	r3, [r6, #0]
     7e8:	412b      	asrs	r3, r5
                    if(bit_value) {
     7ea:	421f      	tst	r7, r3
     7ec:	d0ef      	beq.n	7ce <eink_ed029tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7ee:	4643      	mov	r3, r8
     7f0:	2b08      	cmp	r3, #8
     7f2:	d0f3      	beq.n	7dc <eink_ed029tc1_graphics_load_mono_image+0x64>
     7f4:	4642      	mov	r2, r8
     7f6:	0021      	movs	r1, r4
     7f8:	9800      	ldr	r0, [sp, #0]
     7fa:	47d0      	blx	sl
     7fc:	e7ee      	b.n	7dc <eink_ed029tc1_graphics_load_mono_image+0x64>
     7fe:	9b01      	ldr	r3, [sp, #4]
     800:	3308      	adds	r3, #8
     802:	b29b      	uxth	r3, r3
     804:	9301      	str	r3, [sp, #4]
     806:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     808:	9b02      	ldr	r3, [sp, #8]
     80a:	429e      	cmp	r6, r3
     80c:	d003      	beq.n	816 <eink_ed029tc1_graphics_load_mono_image+0x9e>
{
     80e:	9c01      	ldr	r4, [sp, #4]
     810:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     812:	2701      	movs	r7, #1
     814:	e7e7      	b.n	7e6 <eink_ed029tc1_graphics_load_mono_image+0x6e>
     816:	9b02      	ldr	r3, [sp, #8]
     818:	9a03      	ldr	r2, [sp, #12]
     81a:	4694      	mov	ip, r2
     81c:	4463      	add	r3, ip
     81e:	9302      	str	r3, [sp, #8]
     820:	9b00      	ldr	r3, [sp, #0]
     822:	3301      	adds	r3, #1
     824:	b29b      	uxth	r3, r3
     826:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     828:	9a04      	ldr	r2, [sp, #16]
     82a:	4293      	cmp	r3, r2
     82c:	d00a      	beq.n	844 <eink_ed029tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     82e:	9b05      	ldr	r3, [sp, #20]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <eink_ed029tc1_graphics_load_mono_image+0x9e>
     834:	9b07      	ldr	r3, [sp, #28]
     836:	9a02      	ldr	r2, [sp, #8]
     838:	4694      	mov	ip, r2
     83a:	4463      	add	r3, ip
     83c:	001e      	movs	r6, r3
     83e:	9b06      	ldr	r3, [sp, #24]
     840:	9301      	str	r3, [sp, #4]
     842:	e7e4      	b.n	80e <eink_ed029tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     844:	b009      	add	sp, #36	; 0x24
     846:	bc3c      	pop	{r2, r3, r4, r5}
     848:	4690      	mov	r8, r2
     84a:	4699      	mov	r9, r3
     84c:	46a2      	mov	sl, r4
     84e:	46ab      	mov	fp, r5
     850:	bdf0      	pop	{r4, r5, r6, r7, pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	00000585 	.word	0x00000585

00000858 <eink_el026tr1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_el026tr1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     858:	b5f0      	push	{r4, r5, r6, r7, lr}
     85a:	b085      	sub	sp, #20
     85c:	ac0a      	add	r4, sp, #40	; 0x28
     85e:	8824      	ldrh	r4, [r4, #0]
     860:	ad0b      	add	r5, sp, #44	; 0x2c
     862:	882d      	ldrh	r5, [r5, #0]
     864:	ae0c      	add	r6, sp, #48	; 0x30
     866:	7836      	ldrb	r6, [r6, #0]
     868:	af0d      	add	r7, sp, #52	; 0x34
     86a:	783f      	ldrb	r7, [r7, #0]
    /** Calls the equivalent function but for the ED029TC1 - avoid code repetition */
    eink_ed029tc1_graphics_load_mono_image(img_array, array_size, image_width_px, image_height_bytes, x_place, y_place, foreground_colour, background_colour);
     86c:	9703      	str	r7, [sp, #12]
     86e:	9602      	str	r6, [sp, #8]
     870:	9501      	str	r5, [sp, #4]
     872:	9400      	str	r4, [sp, #0]
     874:	4c01      	ldr	r4, [pc, #4]	; (87c <eink_el026tr1_graphics_load_mono_image+0x24>)
     876:	47a0      	blx	r4
     878:	b005      	add	sp, #20
     87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     87c:	00000779 	.word	0x00000779

00000880 <eink_hink_e0154a05_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_hink_e0154a05_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     880:	b5f0      	push	{r4, r5, r6, r7, lr}
     882:	46de      	mov	lr, fp
     884:	4657      	mov	r7, sl
     886:	464e      	mov	r6, r9
     888:	4645      	mov	r5, r8
     88a:	b5e0      	push	{r5, r6, r7, lr}
     88c:	b089      	sub	sp, #36	; 0x24
     88e:	0019      	movs	r1, r3
     890:	9305      	str	r3, [sp, #20]
     892:	ab12      	add	r3, sp, #72	; 0x48
     894:	881c      	ldrh	r4, [r3, #0]
     896:	9400      	str	r4, [sp, #0]
     898:	ab13      	add	r3, sp, #76	; 0x4c
     89a:	881d      	ldrh	r5, [r3, #0]
     89c:	9506      	str	r5, [sp, #24]
     89e:	ab14      	add	r3, sp, #80	; 0x50
     8a0:	781d      	ldrb	r5, [r3, #0]
     8a2:	46a8      	mov	r8, r5
     8a4:	ab15      	add	r3, sp, #84	; 0x54
     8a6:	781d      	ldrb	r5, [r3, #0]
     8a8:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     8aa:	45a8      	cmp	r8, r5
     8ac:	d04e      	beq.n	94c <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     8ae:	2a00      	cmp	r2, #0
     8b0:	d04c      	beq.n	94c <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
     8b2:	000b      	movs	r3, r1
     8b4:	9103      	str	r1, [sp, #12]
     8b6:	3b01      	subs	r3, #1
     8b8:	b29b      	uxth	r3, r3
     8ba:	3902      	subs	r1, #2
     8bc:	1ac9      	subs	r1, r1, r3
     8be:	1841      	adds	r1, r0, r1
     8c0:	9102      	str	r1, [sp, #8]
     8c2:	46a4      	mov	ip, r4
     8c4:	4462      	add	r2, ip
     8c6:	b292      	uxth	r2, r2
     8c8:	9204      	str	r2, [sp, #16]
     8ca:	3301      	adds	r3, #1
     8cc:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                        } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8ce:	4b23      	ldr	r3, [pc, #140]	; (95c <eink_hink_e0154a05_graphics_load_mono_image+0xdc>)
     8d0:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8d2:	469a      	mov	sl, r3
     8d4:	e02f      	b.n	936 <eink_hink_e0154a05_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8d6:	464b      	mov	r3, r9
     8d8:	2b08      	cmp	r3, #8
     8da:	d003      	beq.n	8e4 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8dc:	464a      	mov	r2, r9
     8de:	0021      	movs	r1, r4
     8e0:	9800      	ldr	r0, [sp, #0]
     8e2:	47d8      	blx	fp
     8e4:	3501      	adds	r5, #1
     8e6:	3401      	adds	r4, #1
     8e8:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     8ea:	2d08      	cmp	r5, #8
     8ec:	d00b      	beq.n	906 <eink_hink_e0154a05_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     8ee:	7833      	ldrb	r3, [r6, #0]
     8f0:	412b      	asrs	r3, r5
                    if(bit_value) {
     8f2:	421f      	tst	r7, r3
     8f4:	d0ef      	beq.n	8d6 <eink_hink_e0154a05_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8f6:	4643      	mov	r3, r8
     8f8:	2b08      	cmp	r3, #8
     8fa:	d0f3      	beq.n	8e4 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8fc:	4642      	mov	r2, r8
     8fe:	0021      	movs	r1, r4
     900:	9800      	ldr	r0, [sp, #0]
     902:	47d0      	blx	sl
     904:	e7ee      	b.n	8e4 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     906:	9b01      	ldr	r3, [sp, #4]
     908:	3308      	adds	r3, #8
     90a:	b29b      	uxth	r3, r3
     90c:	9301      	str	r3, [sp, #4]
     90e:	3e01      	subs	r6, #1
            for (j = (image_height_bytes); j > 0; j--) {
     910:	9b02      	ldr	r3, [sp, #8]
     912:	429e      	cmp	r6, r3
     914:	d003      	beq.n	91e <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
{
     916:	9c01      	ldr	r4, [sp, #4]
     918:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     91a:	2701      	movs	r7, #1
     91c:	e7e7      	b.n	8ee <eink_hink_e0154a05_graphics_load_mono_image+0x6e>
     91e:	9b02      	ldr	r3, [sp, #8]
     920:	9a03      	ldr	r2, [sp, #12]
     922:	4694      	mov	ip, r2
     924:	4463      	add	r3, ip
     926:	9302      	str	r3, [sp, #8]
     928:	9b00      	ldr	r3, [sp, #0]
     92a:	3301      	adds	r3, #1
     92c:	b29b      	uxth	r3, r3
     92e:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     930:	9a04      	ldr	r2, [sp, #16]
     932:	4293      	cmp	r3, r2
     934:	d00a      	beq.n	94c <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
            for (j = (image_height_bytes); j > 0; j--) {
     936:	9b05      	ldr	r3, [sp, #20]
     938:	2b00      	cmp	r3, #0
     93a:	d0f0      	beq.n	91e <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
     93c:	9b07      	ldr	r3, [sp, #28]
     93e:	9a02      	ldr	r2, [sp, #8]
     940:	4694      	mov	ip, r2
     942:	4463      	add	r3, ip
     944:	001e      	movs	r6, r3
     946:	9b06      	ldr	r3, [sp, #24]
     948:	9301      	str	r3, [sp, #4]
     94a:	e7e4      	b.n	916 <eink_hink_e0154a05_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     94c:	b009      	add	sp, #36	; 0x24
     94e:	bc3c      	pop	{r2, r3, r4, r5}
     950:	4690      	mov	r8, r2
     952:	4699      	mov	r9, r3
     954:	46a2      	mov	sl, r4
     956:	46ab      	mov	fp, r5
     958:	bdf0      	pop	{r4, r5, r6, r7, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00000585 	.word	0x00000585

00000960 <eink_ac040tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac040tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     960:	b5f0      	push	{r4, r5, r6, r7, lr}
     962:	46de      	mov	lr, fp
     964:	4657      	mov	r7, sl
     966:	464e      	mov	r6, r9
     968:	4645      	mov	r5, r8
     96a:	b5e0      	push	{r5, r6, r7, lr}
     96c:	b089      	sub	sp, #36	; 0x24
     96e:	a912      	add	r1, sp, #72	; 0x48
     970:	8809      	ldrh	r1, [r1, #0]
     972:	9106      	str	r1, [sp, #24]
     974:	a913      	add	r1, sp, #76	; 0x4c
     976:	8809      	ldrh	r1, [r1, #0]
     978:	ac14      	add	r4, sp, #80	; 0x50
     97a:	7827      	ldrb	r7, [r4, #0]
     97c:	ac15      	add	r4, sp, #84	; 0x54
     97e:	7824      	ldrb	r4, [r4, #0]
     980:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     982:	42a7      	cmp	r7, r4
     984:	d04e      	beq.n	a24 <eink_ac040tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     986:	9205      	str	r2, [sp, #20]
     988:	2a00      	cmp	r2, #0
     98a:	d04b      	beq.n	a24 <eink_ac040tc1_graphics_load_mono_image+0xc4>
     98c:	9304      	str	r3, [sp, #16]
     98e:	9003      	str	r0, [sp, #12]
     990:	4a28      	ldr	r2, [pc, #160]	; (a34 <eink_ac040tc1_graphics_load_mono_image+0xd4>)
     992:	4694      	mov	ip, r2
     994:	4463      	add	r3, ip
     996:	00db      	lsls	r3, r3, #3
     998:	18cb      	adds	r3, r1, r3
     99a:	2200      	movs	r2, #0
     99c:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     99e:	b29b      	uxth	r3, r3
     9a0:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     9a2:	4b25      	ldr	r3, [pc, #148]	; (a38 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9a4:	469b      	mov	fp, r3
     9a6:	e02c      	b.n	a02 <eink_ac040tc1_graphics_load_mono_image+0xa2>
     9a8:	464b      	mov	r3, r9
     9aa:	2b08      	cmp	r3, #8
     9ac:	d003      	beq.n	9b6 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9ae:	464a      	mov	r2, r9
     9b0:	0021      	movs	r1, r4
     9b2:	9801      	ldr	r0, [sp, #4]
     9b4:	47d8      	blx	fp
     9b6:	3501      	adds	r5, #1
     9b8:	3401      	adds	r4, #1
     9ba:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     9bc:	2d08      	cmp	r5, #8
     9be:	d00b      	beq.n	9d8 <eink_ac040tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     9c0:	7833      	ldrb	r3, [r6, #0]
     9c2:	412b      	asrs	r3, r5
                    if(bit_value) {
     9c4:	07db      	lsls	r3, r3, #31
     9c6:	d5ef      	bpl.n	9a8 <eink_ac040tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     9c8:	2f08      	cmp	r7, #8
     9ca:	d0f4      	beq.n	9b6 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9cc:	003a      	movs	r2, r7
     9ce:	0021      	movs	r1, r4
     9d0:	9801      	ldr	r0, [sp, #4]
     9d2:	4b19      	ldr	r3, [pc, #100]	; (a38 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9d4:	4798      	blx	r3
     9d6:	e7ee      	b.n	9b6 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9d8:	4643      	mov	r3, r8
     9da:	3b08      	subs	r3, #8
     9dc:	b29b      	uxth	r3, r3
     9de:	4698      	mov	r8, r3
     9e0:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     9e2:	4556      	cmp	r6, sl
     9e4:	d002      	beq.n	9ec <eink_ac040tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     9e6:	4644      	mov	r4, r8
     9e8:	2500      	movs	r5, #0
     9ea:	e7e9      	b.n	9c0 <eink_ac040tc1_graphics_load_mono_image+0x60>
     9ec:	9b02      	ldr	r3, [sp, #8]
     9ee:	3301      	adds	r3, #1
     9f0:	9302      	str	r3, [sp, #8]
     9f2:	9a03      	ldr	r2, [sp, #12]
     9f4:	9904      	ldr	r1, [sp, #16]
     9f6:	468c      	mov	ip, r1
     9f8:	4462      	add	r2, ip
     9fa:	9203      	str	r2, [sp, #12]
     9fc:	9a05      	ldr	r2, [sp, #20]
     9fe:	4293      	cmp	r3, r2
     a00:	d210      	bcs.n	a24 <eink_ac040tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     a02:	9b04      	ldr	r3, [sp, #16]
     a04:	2b00      	cmp	r3, #0
     a06:	d0f1      	beq.n	9ec <eink_ac040tc1_graphics_load_mono_image+0x8c>
     a08:	9e03      	ldr	r6, [sp, #12]
     a0a:	0032      	movs	r2, r6
     a0c:	469c      	mov	ip, r3
     a0e:	4462      	add	r2, ip
     a10:	4692      	mov	sl, r2
     a12:	9b07      	ldr	r3, [sp, #28]
     a14:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a16:	9b06      	ldr	r3, [sp, #24]
     a18:	9a02      	ldr	r2, [sp, #8]
     a1a:	4694      	mov	ip, r2
     a1c:	4463      	add	r3, ip
     a1e:	b29b      	uxth	r3, r3
     a20:	9301      	str	r3, [sp, #4]
     a22:	e7e0      	b.n	9e6 <eink_ac040tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     a24:	b009      	add	sp, #36	; 0x24
     a26:	bc3c      	pop	{r2, r3, r4, r5}
     a28:	4690      	mov	r8, r2
     a2a:	4699      	mov	r9, r3
     a2c:	46a2      	mov	sl, r4
     a2e:	46ab      	mov	fp, r5
     a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	00001fff 	.word	0x00001fff
     a38:	00000585 	.word	0x00000585

00000a3c <eink_ac057tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac057tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a3e:	46de      	mov	lr, fp
     a40:	4657      	mov	r7, sl
     a42:	464e      	mov	r6, r9
     a44:	4645      	mov	r5, r8
     a46:	b5e0      	push	{r5, r6, r7, lr}
     a48:	b089      	sub	sp, #36	; 0x24
     a4a:	a912      	add	r1, sp, #72	; 0x48
     a4c:	8809      	ldrh	r1, [r1, #0]
     a4e:	9106      	str	r1, [sp, #24]
     a50:	a913      	add	r1, sp, #76	; 0x4c
     a52:	8809      	ldrh	r1, [r1, #0]
     a54:	ac14      	add	r4, sp, #80	; 0x50
     a56:	7827      	ldrb	r7, [r4, #0]
     a58:	ac15      	add	r4, sp, #84	; 0x54
     a5a:	7824      	ldrb	r4, [r4, #0]
     a5c:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     a5e:	42a7      	cmp	r7, r4
     a60:	d04e      	beq.n	b00 <eink_ac057tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     a62:	9205      	str	r2, [sp, #20]
     a64:	2a00      	cmp	r2, #0
     a66:	d04b      	beq.n	b00 <eink_ac057tc1_graphics_load_mono_image+0xc4>
     a68:	9304      	str	r3, [sp, #16]
     a6a:	9003      	str	r0, [sp, #12]
     a6c:	4a28      	ldr	r2, [pc, #160]	; (b10 <eink_ac057tc1_graphics_load_mono_image+0xd4>)
     a6e:	4694      	mov	ip, r2
     a70:	4463      	add	r3, ip
     a72:	00db      	lsls	r3, r3, #3
     a74:	18cb      	adds	r3, r1, r3
     a76:	2200      	movs	r2, #0
     a78:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     a7a:	b29b      	uxth	r3, r3
     a7c:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a7e:	4b25      	ldr	r3, [pc, #148]	; (b14 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     a80:	469b      	mov	fp, r3
     a82:	e02c      	b.n	ade <eink_ac057tc1_graphics_load_mono_image+0xa2>
     a84:	464b      	mov	r3, r9
     a86:	2b08      	cmp	r3, #8
     a88:	d003      	beq.n	a92 <eink_ac057tc1_graphics_load_mono_image+0x56>
     a8a:	464a      	mov	r2, r9
     a8c:	0021      	movs	r1, r4
     a8e:	9801      	ldr	r0, [sp, #4]
     a90:	47d8      	blx	fp
     a92:	3501      	adds	r5, #1
     a94:	3401      	adds	r4, #1
     a96:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     a98:	2d08      	cmp	r5, #8
     a9a:	d00b      	beq.n	ab4 <eink_ac057tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     a9c:	7833      	ldrb	r3, [r6, #0]
     a9e:	412b      	asrs	r3, r5
                    if(bit_value) {
     aa0:	07db      	lsls	r3, r3, #31
     aa2:	d5ef      	bpl.n	a84 <eink_ac057tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     aa4:	2f08      	cmp	r7, #8
     aa6:	d0f4      	beq.n	a92 <eink_ac057tc1_graphics_load_mono_image+0x56>
     aa8:	003a      	movs	r2, r7
     aaa:	0021      	movs	r1, r4
     aac:	9801      	ldr	r0, [sp, #4]
     aae:	4b19      	ldr	r3, [pc, #100]	; (b14 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     ab0:	4798      	blx	r3
     ab2:	e7ee      	b.n	a92 <eink_ac057tc1_graphics_load_mono_image+0x56>
     ab4:	4643      	mov	r3, r8
     ab6:	3b08      	subs	r3, #8
     ab8:	b29b      	uxth	r3, r3
     aba:	4698      	mov	r8, r3
     abc:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     abe:	4556      	cmp	r6, sl
     ac0:	d002      	beq.n	ac8 <eink_ac057tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     ac2:	4644      	mov	r4, r8
     ac4:	2500      	movs	r5, #0
     ac6:	e7e9      	b.n	a9c <eink_ac057tc1_graphics_load_mono_image+0x60>
     ac8:	9b02      	ldr	r3, [sp, #8]
     aca:	3301      	adds	r3, #1
     acc:	9302      	str	r3, [sp, #8]
     ace:	9a03      	ldr	r2, [sp, #12]
     ad0:	9904      	ldr	r1, [sp, #16]
     ad2:	468c      	mov	ip, r1
     ad4:	4462      	add	r2, ip
     ad6:	9203      	str	r2, [sp, #12]
     ad8:	9a05      	ldr	r2, [sp, #20]
     ada:	4293      	cmp	r3, r2
     adc:	d210      	bcs.n	b00 <eink_ac057tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     ade:	9b04      	ldr	r3, [sp, #16]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d0f1      	beq.n	ac8 <eink_ac057tc1_graphics_load_mono_image+0x8c>
     ae4:	9e03      	ldr	r6, [sp, #12]
     ae6:	0032      	movs	r2, r6
     ae8:	469c      	mov	ip, r3
     aea:	4462      	add	r2, ip
     aec:	4692      	mov	sl, r2
     aee:	9b07      	ldr	r3, [sp, #28]
     af0:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     af2:	9b06      	ldr	r3, [sp, #24]
     af4:	9a02      	ldr	r2, [sp, #8]
     af6:	4694      	mov	ip, r2
     af8:	4463      	add	r3, ip
     afa:	b29b      	uxth	r3, r3
     afc:	9301      	str	r3, [sp, #4]
     afe:	e7e0      	b.n	ac2 <eink_ac057tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     b00:	b009      	add	sp, #36	; 0x24
     b02:	bc3c      	pop	{r2, r3, r4, r5}
     b04:	4690      	mov	r8, r2
     b06:	4699      	mov	r9, r3
     b08:	46a2      	mov	sl, r4
     b0a:	46ab      	mov	fp, r5
     b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	00001fff 	.word	0x00001fff
     b14:	00000585 	.word	0x00000585

00000b18 <eink_ed057tc2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed057tc2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     b18:	b5f0      	push	{r4, r5, r6, r7, lr}
     b1a:	46de      	mov	lr, fp
     b1c:	4657      	mov	r7, sl
     b1e:	464e      	mov	r6, r9
     b20:	4645      	mov	r5, r8
     b22:	b5e0      	push	{r5, r6, r7, lr}
     b24:	b089      	sub	sp, #36	; 0x24
     b26:	a912      	add	r1, sp, #72	; 0x48
     b28:	8809      	ldrh	r1, [r1, #0]
     b2a:	9106      	str	r1, [sp, #24]
     b2c:	a913      	add	r1, sp, #76	; 0x4c
     b2e:	8809      	ldrh	r1, [r1, #0]
     b30:	ac14      	add	r4, sp, #80	; 0x50
     b32:	7827      	ldrb	r7, [r4, #0]
     b34:	ac15      	add	r4, sp, #84	; 0x54
     b36:	7824      	ldrb	r4, [r4, #0]
     b38:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     b3a:	42a7      	cmp	r7, r4
     b3c:	d04e      	beq.n	bdc <eink_ed057tc2_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     b3e:	9205      	str	r2, [sp, #20]
     b40:	2a00      	cmp	r2, #0
     b42:	d04b      	beq.n	bdc <eink_ed057tc2_graphics_load_mono_image+0xc4>
     b44:	9304      	str	r3, [sp, #16]
     b46:	9003      	str	r0, [sp, #12]
     b48:	4a28      	ldr	r2, [pc, #160]	; (bec <eink_ed057tc2_graphics_load_mono_image+0xd4>)
     b4a:	4694      	mov	ip, r2
     b4c:	4463      	add	r3, ip
     b4e:	00db      	lsls	r3, r3, #3
     b50:	18cb      	adds	r3, r1, r3
     b52:	2200      	movs	r2, #0
     b54:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     b56:	b29b      	uxth	r3, r3
     b58:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     b5a:	4b25      	ldr	r3, [pc, #148]	; (bf0 <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b5c:	469b      	mov	fp, r3
     b5e:	e02c      	b.n	bba <eink_ed057tc2_graphics_load_mono_image+0xa2>
     b60:	464b      	mov	r3, r9
     b62:	2b08      	cmp	r3, #8
     b64:	d003      	beq.n	b6e <eink_ed057tc2_graphics_load_mono_image+0x56>
     b66:	464a      	mov	r2, r9
     b68:	0021      	movs	r1, r4
     b6a:	9801      	ldr	r0, [sp, #4]
     b6c:	47d8      	blx	fp
     b6e:	3501      	adds	r5, #1
     b70:	3401      	adds	r4, #1
     b72:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     b74:	2d08      	cmp	r5, #8
     b76:	d00b      	beq.n	b90 <eink_ed057tc2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     b78:	7833      	ldrb	r3, [r6, #0]
     b7a:	412b      	asrs	r3, r5
                    if(bit_value) {
     b7c:	07db      	lsls	r3, r3, #31
     b7e:	d5ef      	bpl.n	b60 <eink_ed057tc2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     b80:	2f08      	cmp	r7, #8
     b82:	d0f4      	beq.n	b6e <eink_ed057tc2_graphics_load_mono_image+0x56>
     b84:	003a      	movs	r2, r7
     b86:	0021      	movs	r1, r4
     b88:	9801      	ldr	r0, [sp, #4]
     b8a:	4b19      	ldr	r3, [pc, #100]	; (bf0 <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b8c:	4798      	blx	r3
     b8e:	e7ee      	b.n	b6e <eink_ed057tc2_graphics_load_mono_image+0x56>
     b90:	4643      	mov	r3, r8
     b92:	3b08      	subs	r3, #8
     b94:	b29b      	uxth	r3, r3
     b96:	4698      	mov	r8, r3
     b98:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     b9a:	4556      	cmp	r6, sl
     b9c:	d002      	beq.n	ba4 <eink_ed057tc2_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     b9e:	4644      	mov	r4, r8
     ba0:	2500      	movs	r5, #0
     ba2:	e7e9      	b.n	b78 <eink_ed057tc2_graphics_load_mono_image+0x60>
     ba4:	9b02      	ldr	r3, [sp, #8]
     ba6:	3301      	adds	r3, #1
     ba8:	9302      	str	r3, [sp, #8]
     baa:	9a03      	ldr	r2, [sp, #12]
     bac:	9904      	ldr	r1, [sp, #16]
     bae:	468c      	mov	ip, r1
     bb0:	4462      	add	r2, ip
     bb2:	9203      	str	r2, [sp, #12]
     bb4:	9a05      	ldr	r2, [sp, #20]
     bb6:	4293      	cmp	r3, r2
     bb8:	d210      	bcs.n	bdc <eink_ed057tc2_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     bba:	9b04      	ldr	r3, [sp, #16]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d0f1      	beq.n	ba4 <eink_ed057tc2_graphics_load_mono_image+0x8c>
     bc0:	9e03      	ldr	r6, [sp, #12]
     bc2:	0032      	movs	r2, r6
     bc4:	469c      	mov	ip, r3
     bc6:	4462      	add	r2, ip
     bc8:	4692      	mov	sl, r2
     bca:	9b07      	ldr	r3, [sp, #28]
     bcc:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     bce:	9b06      	ldr	r3, [sp, #24]
     bd0:	9a02      	ldr	r2, [sp, #8]
     bd2:	4694      	mov	ip, r2
     bd4:	4463      	add	r3, ip
     bd6:	b29b      	uxth	r3, r3
     bd8:	9301      	str	r3, [sp, #4]
     bda:	e7e0      	b.n	b9e <eink_ed057tc2_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     bdc:	b009      	add	sp, #36	; 0x24
     bde:	bc3c      	pop	{r2, r3, r4, r5}
     be0:	4690      	mov	r8, r2
     be2:	4699      	mov	r9, r3
     be4:	46a2      	mov	sl, r4
     be6:	46ab      	mov	fp, r5
     be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	00001fff 	.word	0x00001fff
     bf0:	00000585 	.word	0x00000585

00000bf4 <eink_ed028tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed028tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf6:	46de      	mov	lr, fp
     bf8:	4657      	mov	r7, sl
     bfa:	464e      	mov	r6, r9
     bfc:	4645      	mov	r5, r8
     bfe:	b5e0      	push	{r5, r6, r7, lr}
     c00:	b08b      	sub	sp, #44	; 0x2c
     c02:	9003      	str	r0, [sp, #12]
     c04:	9205      	str	r2, [sp, #20]
     c06:	0018      	movs	r0, r3
     c08:	9307      	str	r3, [sp, #28]
     c0a:	ab14      	add	r3, sp, #80	; 0x50
     c0c:	8819      	ldrh	r1, [r3, #0]
     c0e:	9108      	str	r1, [sp, #32]
     c10:	ab15      	add	r3, sp, #84	; 0x54
     c12:	8819      	ldrh	r1, [r3, #0]
     c14:	9109      	str	r1, [sp, #36]	; 0x24
     c16:	ab16      	add	r3, sp, #88	; 0x58
     c18:	781f      	ldrb	r7, [r3, #0]
     c1a:	ab17      	add	r3, sp, #92	; 0x5c
     c1c:	7819      	ldrb	r1, [r3, #0]
     c1e:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     c20:	428f      	cmp	r7, r1
     c22:	d051      	beq.n	cc8 <eink_ed028tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     c24:	2a00      	cmp	r2, #0
     c26:	d04f      	beq.n	cc8 <eink_ed028tc1_graphics_load_mono_image+0xd4>
     c28:	2200      	movs	r2, #0
     c2a:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     c2c:	0003      	movs	r3, r0
     c2e:	3b01      	subs	r3, #1
     c30:	b29b      	uxth	r3, r3
     c32:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c34:	4b28      	ldr	r3, [pc, #160]	; (cd8 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c36:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c38:	46b8      	mov	r8, r7
     c3a:	e033      	b.n	ca4 <eink_ed028tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c3c:	464b      	mov	r3, r9
     c3e:	2b08      	cmp	r3, #8
     c40:	d003      	beq.n	c4a <eink_ed028tc1_graphics_load_mono_image+0x56>
     c42:	464a      	mov	r2, r9
     c44:	0021      	movs	r1, r4
     c46:	9801      	ldr	r0, [sp, #4]
     c48:	47d8      	blx	fp
     c4a:	3501      	adds	r5, #1
     c4c:	3401      	adds	r4, #1
     c4e:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     c50:	2d08      	cmp	r5, #8
     c52:	d00b      	beq.n	c6c <eink_ed028tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c54:	7833      	ldrb	r3, [r6, #0]
     c56:	412b      	asrs	r3, r5
                    if(bit_value) {
     c58:	07db      	lsls	r3, r3, #31
     c5a:	d5ef      	bpl.n	c3c <eink_ed028tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c5c:	2f08      	cmp	r7, #8
     c5e:	d0f4      	beq.n	c4a <eink_ed028tc1_graphics_load_mono_image+0x56>
     c60:	003a      	movs	r2, r7
     c62:	0021      	movs	r1, r4
     c64:	9801      	ldr	r0, [sp, #4]
     c66:	4b1c      	ldr	r3, [pc, #112]	; (cd8 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c68:	4798      	blx	r3
     c6a:	e7ee      	b.n	c4a <eink_ed028tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     c6c:	4643      	mov	r3, r8
     c6e:	3b01      	subs	r3, #1
     c70:	b29b      	uxth	r3, r3
     c72:	4698      	mov	r8, r3
     c74:	4653      	mov	r3, sl
     c76:	3308      	adds	r3, #8
     c78:	b29b      	uxth	r3, r3
     c7a:	469a      	mov	sl, r3
     c7c:	4643      	mov	r3, r8
     c7e:	2b00      	cmp	r3, #0
     c80:	d008      	beq.n	c94 <eink_ed028tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c82:	9b02      	ldr	r3, [sp, #8]
     c84:	4443      	add	r3, r8
     c86:	001e      	movs	r6, r3
     c88:	9b03      	ldr	r3, [sp, #12]
     c8a:	469c      	mov	ip, r3
     c8c:	4466      	add	r6, ip
     c8e:	4654      	mov	r4, sl
     c90:	2500      	movs	r5, #0
     c92:	e7df      	b.n	c54 <eink_ed028tc1_graphics_load_mono_image+0x60>
     c94:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     c96:	9b04      	ldr	r3, [sp, #16]
     c98:	3301      	adds	r3, #1
     c9a:	b29b      	uxth	r3, r3
     c9c:	9304      	str	r3, [sp, #16]
     c9e:	9a05      	ldr	r2, [sp, #20]
     ca0:	429a      	cmp	r2, r3
     ca2:	d911      	bls.n	cc8 <eink_ed028tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     ca4:	9b06      	ldr	r3, [sp, #24]
     ca6:	1e1f      	subs	r7, r3, #0
     ca8:	d0f5      	beq.n	c96 <eink_ed028tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     caa:	9b07      	ldr	r3, [sp, #28]
     cac:	9a04      	ldr	r2, [sp, #16]
     cae:	4353      	muls	r3, r2
     cb0:	9302      	str	r3, [sp, #8]
     cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cb4:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     cb6:	9b08      	ldr	r3, [sp, #32]
     cb8:	4694      	mov	ip, r2
     cba:	4463      	add	r3, ip
     cbc:	b29b      	uxth	r3, r3
     cbe:	9301      	str	r3, [sp, #4]
     cc0:	4643      	mov	r3, r8
     cc2:	46b8      	mov	r8, r7
     cc4:	001f      	movs	r7, r3
     cc6:	e7dc      	b.n	c82 <eink_ed028tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     cc8:	b00b      	add	sp, #44	; 0x2c
     cca:	bc3c      	pop	{r2, r3, r4, r5}
     ccc:	4690      	mov	r8, r2
     cce:	4699      	mov	r9, r3
     cd0:	46a2      	mov	sl, r4
     cd2:	46ab      	mov	fp, r5
     cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00000585 	.word	0x00000585

00000cdc <eink_ed037tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed037tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cde:	46de      	mov	lr, fp
     ce0:	4657      	mov	r7, sl
     ce2:	464e      	mov	r6, r9
     ce4:	4645      	mov	r5, r8
     ce6:	b5e0      	push	{r5, r6, r7, lr}
     ce8:	b089      	sub	sp, #36	; 0x24
     cea:	0019      	movs	r1, r3
     cec:	9305      	str	r3, [sp, #20]
     cee:	ab12      	add	r3, sp, #72	; 0x48
     cf0:	881c      	ldrh	r4, [r3, #0]
     cf2:	9400      	str	r4, [sp, #0]
     cf4:	ab13      	add	r3, sp, #76	; 0x4c
     cf6:	881d      	ldrh	r5, [r3, #0]
     cf8:	9506      	str	r5, [sp, #24]
     cfa:	ab14      	add	r3, sp, #80	; 0x50
     cfc:	781d      	ldrb	r5, [r3, #0]
     cfe:	46a8      	mov	r8, r5
     d00:	ab15      	add	r3, sp, #84	; 0x54
     d02:	781d      	ldrb	r5, [r3, #0]
     d04:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     d06:	45a8      	cmp	r8, r5
     d08:	d04e      	beq.n	da8 <eink_ed037tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     d0a:	2a00      	cmp	r2, #0
     d0c:	d04c      	beq.n	da8 <eink_ed037tc1_graphics_load_mono_image+0xcc>
     d0e:	000b      	movs	r3, r1
     d10:	9103      	str	r1, [sp, #12]
     d12:	3b01      	subs	r3, #1
     d14:	b29b      	uxth	r3, r3
     d16:	3902      	subs	r1, #2
     d18:	1ac9      	subs	r1, r1, r3
     d1a:	1841      	adds	r1, r0, r1
     d1c:	9102      	str	r1, [sp, #8]
     d1e:	46a4      	mov	ip, r4
     d20:	4462      	add	r2, ip
     d22:	b292      	uxth	r2, r2
     d24:	9204      	str	r2, [sp, #16]
     d26:	3301      	adds	r3, #1
     d28:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d2a:	4b23      	ldr	r3, [pc, #140]	; (db8 <eink_ed037tc1_graphics_load_mono_image+0xdc>)
     d2c:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d2e:	469a      	mov	sl, r3
     d30:	e02f      	b.n	d92 <eink_ed037tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d32:	464b      	mov	r3, r9
     d34:	2b08      	cmp	r3, #8
     d36:	d003      	beq.n	d40 <eink_ed037tc1_graphics_load_mono_image+0x64>
     d38:	464a      	mov	r2, r9
     d3a:	0021      	movs	r1, r4
     d3c:	9800      	ldr	r0, [sp, #0]
     d3e:	47d8      	blx	fp
     d40:	3501      	adds	r5, #1
     d42:	3401      	adds	r4, #1
     d44:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     d46:	2d08      	cmp	r5, #8
     d48:	d00b      	beq.n	d62 <eink_ed037tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d4a:	7833      	ldrb	r3, [r6, #0]
     d4c:	412b      	asrs	r3, r5
                    if(bit_value) {
     d4e:	421f      	tst	r7, r3
     d50:	d0ef      	beq.n	d32 <eink_ed037tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d52:	4643      	mov	r3, r8
     d54:	2b08      	cmp	r3, #8
     d56:	d0f3      	beq.n	d40 <eink_ed037tc1_graphics_load_mono_image+0x64>
     d58:	4642      	mov	r2, r8
     d5a:	0021      	movs	r1, r4
     d5c:	9800      	ldr	r0, [sp, #0]
     d5e:	47d0      	blx	sl
     d60:	e7ee      	b.n	d40 <eink_ed037tc1_graphics_load_mono_image+0x64>
     d62:	9b01      	ldr	r3, [sp, #4]
     d64:	3308      	adds	r3, #8
     d66:	b29b      	uxth	r3, r3
     d68:	9301      	str	r3, [sp, #4]
     d6a:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     d6c:	9b02      	ldr	r3, [sp, #8]
     d6e:	429e      	cmp	r6, r3
     d70:	d003      	beq.n	d7a <eink_ed037tc1_graphics_load_mono_image+0x9e>
{
     d72:	9c01      	ldr	r4, [sp, #4]
     d74:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d76:	2701      	movs	r7, #1
     d78:	e7e7      	b.n	d4a <eink_ed037tc1_graphics_load_mono_image+0x6e>
     d7a:	9b02      	ldr	r3, [sp, #8]
     d7c:	9a03      	ldr	r2, [sp, #12]
     d7e:	4694      	mov	ip, r2
     d80:	4463      	add	r3, ip
     d82:	9302      	str	r3, [sp, #8]
     d84:	9b00      	ldr	r3, [sp, #0]
     d86:	3301      	adds	r3, #1
     d88:	b29b      	uxth	r3, r3
     d8a:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     d8c:	9a04      	ldr	r2, [sp, #16]
     d8e:	4293      	cmp	r3, r2
     d90:	d00a      	beq.n	da8 <eink_ed037tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     d92:	9b05      	ldr	r3, [sp, #20]
     d94:	2b00      	cmp	r3, #0
     d96:	d0f0      	beq.n	d7a <eink_ed037tc1_graphics_load_mono_image+0x9e>
     d98:	9b07      	ldr	r3, [sp, #28]
     d9a:	9a02      	ldr	r2, [sp, #8]
     d9c:	4694      	mov	ip, r2
     d9e:	4463      	add	r3, ip
     da0:	001e      	movs	r6, r3
     da2:	9b06      	ldr	r3, [sp, #24]
     da4:	9301      	str	r3, [sp, #4]
     da6:	e7e4      	b.n	d72 <eink_ed037tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     da8:	b009      	add	sp, #36	; 0x24
     daa:	bc3c      	pop	{r2, r3, r4, r5}
     dac:	4690      	mov	r8, r2
     dae:	4699      	mov	r9, r3
     db0:	46a2      	mov	sl, r4
     db2:	46ab      	mov	fp, r5
     db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	00000585 	.word	0x00000585

00000dbc <it8951_wait_for_hrdy>:
static inline void it8951_wait_for_hrdy(void)
{
#ifdef EINK_HOST_RDY
    while(!gpio_get_pin_level(EINK_HOST_RDY));
#endif
}
     dbc:	4770      	bx	lr
	...

00000dc0 <eink_interface_init>:
 *
 * \note Initializes the display controller hardware interface, regardless
 * of driver IC, interface or display. Takes definitions from conf_eink.h.
 */
static void eink_interface_init(uint8_t f_init)
{
     dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc2:	46c6      	mov	lr, r8
     dc4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dc6:	22c0      	movs	r2, #192	; 0xc0
     dc8:	05d2      	lsls	r2, r2, #23
     dca:	2788      	movs	r7, #136	; 0x88
     dcc:	2640      	movs	r6, #64	; 0x40
     dce:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dd0:	4b2a      	ldr	r3, [pc, #168]	; (e7c <eink_interface_init+0xbc>)
     dd2:	20a8      	movs	r0, #168	; 0xa8
     dd4:	4d2a      	ldr	r5, [pc, #168]	; (e80 <eink_interface_init+0xc0>)
     dd6:	501d      	str	r5, [r3, r0]
     dd8:	24c0      	movs	r4, #192	; 0xc0
     dda:	0624      	lsls	r4, r4, #24
     ddc:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dde:	2101      	movs	r1, #1
     de0:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     de2:	4f28      	ldr	r7, [pc, #160]	; (e84 <eink_interface_init+0xc4>)
     de4:	501f      	str	r7, [r3, r0]
     de6:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     de8:	2720      	movs	r7, #32
     dea:	46b8      	mov	r8, r7
     dec:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dee:	4f26      	ldr	r7, [pc, #152]	; (e88 <eink_interface_init+0xc8>)
     df0:	629f      	str	r7, [r3, #40]	; 0x28
     df2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df4:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     df6:	629d      	str	r5, [r3, #40]	; 0x28
     df8:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dfa:	2510      	movs	r5, #16
     dfc:	46ac      	mov	ip, r5
     dfe:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e00:	4d22      	ldr	r5, [pc, #136]	; (e8c <eink_interface_init+0xcc>)
     e02:	629d      	str	r5, [r3, #40]	; 0x28
     e04:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e06:	2580      	movs	r5, #128	; 0x80
     e08:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e0a:	4f21      	ldr	r7, [pc, #132]	; (e90 <eink_interface_init+0xd0>)
     e0c:	629f      	str	r7, [r3, #40]	; 0x28
     e0e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e10:	2494      	movs	r4, #148	; 0x94
     e12:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e14:	2798      	movs	r7, #152	; 0x98
     e16:	51d1      	str	r1, [r2, r7]
     e18:	4644      	mov	r4, r8
     e1a:	6194      	str	r4, [r2, #24]
     e1c:	6196      	str	r6, [r2, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e1e:	4664      	mov	r4, ip
     e20:	6154      	str	r4, [r2, #20]
     e22:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e24:	3474      	adds	r4, #116	; 0x74
     e26:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e28:	4e1a      	ldr	r6, [pc, #104]	; (e94 <eink_interface_init+0xd4>)
     e2a:	501e      	str	r6, [r3, r0]
     e2c:	4e1a      	ldr	r6, [pc, #104]	; (e98 <eink_interface_init+0xd8>)
     e2e:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e30:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e32:	301f      	adds	r0, #31
     e34:	5c1c      	ldrb	r4, [r3, r0]
     e36:	2604      	movs	r6, #4
     e38:	4334      	orrs	r4, r6
     e3a:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e3c:	51d5      	str	r5, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e3e:	24c6      	movs	r4, #198	; 0xc6
     e40:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e42:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e44:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e46:	3c06      	subs	r4, #6
     e48:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e4a:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e4c:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e4e:	3c7b      	subs	r4, #123	; 0x7b
     e50:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e52:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e54:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e56:	3401      	adds	r4, #1
     e58:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5a:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e5c:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e5e:	3c02      	subs	r4, #2
     e60:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e62:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e64:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	3403      	adds	r4, #3
     e68:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6c:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e6e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e70:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e72:	541a      	strb	r2, [r3, r0]
#endif
    
#ifdef EINK_BUSY
    gpio_set_pin_function(EINK_BUSY, GPIO_PIN_FUNCTION_OFF);
#endif
}
     e74:	bc04      	pop	{r2}
     e76:	4690      	mov	r8, r2
     e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	41004400 	.word	0x41004400
     e80:	40000040 	.word	0x40000040
     e84:	40000001 	.word	0x40000001
     e88:	40000020 	.word	0x40000020
     e8c:	40000010 	.word	0x40000010
     e90:	40000080 	.word	0x40000080
     e94:	40020080 	.word	0x40020080
     e98:	c0020000 	.word	0xc0020000

00000e9c <eink_ed037tc1_set_pixel>:
{
     e9c:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < ssd1677_global_instance.display_width) && (y_set >= 0) && (y_set < ssd1677_global_instance.display_height) ) {
     e9e:	4b2e      	ldr	r3, [pc, #184]	; (f58 <eink_ed037tc1_set_pixel+0xbc>)
     ea0:	889b      	ldrh	r3, [r3, #4]
     ea2:	b29b      	uxth	r3, r3
     ea4:	4283      	cmp	r3, r0
     ea6:	d91c      	bls.n	ee2 <eink_ed037tc1_set_pixel+0x46>
     ea8:	4b2b      	ldr	r3, [pc, #172]	; (f58 <eink_ed037tc1_set_pixel+0xbc>)
     eaa:	88db      	ldrh	r3, [r3, #6]
     eac:	b29b      	uxth	r3, r3
     eae:	428b      	cmp	r3, r1
     eb0:	d917      	bls.n	ee2 <eink_ed037tc1_set_pixel+0x46>
        if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
     eb2:	4b29      	ldr	r3, [pc, #164]	; (f58 <eink_ed037tc1_set_pixel+0xbc>)
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	2b01      	cmp	r3, #1
     eb8:	d014      	beq.n	ee4 <eink_ed037tc1_set_pixel+0x48>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
     eba:	4b27      	ldr	r3, [pc, #156]	; (f58 <eink_ed037tc1_set_pixel+0xbc>)
     ebc:	781b      	ldrb	r3, [r3, #0]
     ebe:	2b02      	cmp	r3, #2
     ec0:	d01b      	beq.n	efa <eink_ed037tc1_set_pixel+0x5e>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
     ec2:	4b25      	ldr	r3, [pc, #148]	; (f58 <eink_ed037tc1_set_pixel+0xbc>)
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	2b03      	cmp	r3, #3
     ec8:	d025      	beq.n	f16 <eink_ed037tc1_set_pixel+0x7a>
            x1_set = (x_set - (x_set % 8)) / 8;
     eca:	10c3      	asrs	r3, r0, #3
            byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * y_set);
     ecc:	008c      	lsls	r4, r1, #2
     ece:	1861      	adds	r1, r4, r1
     ed0:	00cc      	lsls	r4, r1, #3
     ed2:	1a61      	subs	r1, r4, r1
     ed4:	185b      	adds	r3, r3, r1
            bit_set = 7 - (x_set % 8);
     ed6:	2107      	movs	r1, #7
     ed8:	4381      	bics	r1, r0
        switch(pixel_colour) {
     eda:	2a00      	cmp	r2, #0
     edc:	d027      	beq.n	f2e <eink_ed037tc1_set_pixel+0x92>
     ede:	2a01      	cmp	r2, #1
     ee0:	d030      	beq.n	f44 <eink_ed037tc1_set_pixel+0xa8>
}
     ee2:	bd10      	pop	{r4, pc}
            y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - ((y_set - (y_set % 8)) / 8);
     ee4:	10cc      	asrs	r4, r1, #3
     ee6:	3321      	adds	r3, #33	; 0x21
     ee8:	1b1b      	subs	r3, r3, r4
            byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (x_set));
     eea:	0084      	lsls	r4, r0, #2
     eec:	1820      	adds	r0, r4, r0
     eee:	00c4      	lsls	r4, r0, #3
     ef0:	1a20      	subs	r0, r4, r0
     ef2:	181b      	adds	r3, r3, r0
            bit_set = y_set % 8;
     ef4:	2007      	movs	r0, #7
     ef6:	4001      	ands	r1, r0
     ef8:	e7ef      	b.n	eda <eink_ed037tc1_set_pixel+0x3e>
            x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((x_set - (x_set % 8)) / 8);
     efa:	10c4      	asrs	r4, r0, #3
     efc:	2318      	movs	r3, #24
     efe:	33ff      	adds	r3, #255	; 0xff
     f00:	1b1b      	subs	r3, r3, r4
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (y_set * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
     f02:	2423      	movs	r4, #35	; 0x23
     f04:	4264      	negs	r4, r4
     f06:	4361      	muls	r1, r4
     f08:	4c14      	ldr	r4, [pc, #80]	; (f5c <eink_ed037tc1_set_pixel+0xc0>)
     f0a:	46a4      	mov	ip, r4
     f0c:	4461      	add	r1, ip
     f0e:	185b      	adds	r3, r3, r1
            bit_set = x_set % 8;
     f10:	2107      	movs	r1, #7
     f12:	4001      	ands	r1, r0
     f14:	e7e1      	b.n	eda <eink_ed037tc1_set_pixel+0x3e>
            y1_set = (y_set - (y_set % 8)) / 8;
     f16:	10cc      	asrs	r4, r1, #3
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (x_set * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
     f18:	4b10      	ldr	r3, [pc, #64]	; (f5c <eink_ed037tc1_set_pixel+0xc0>)
     f1a:	469c      	mov	ip, r3
     f1c:	4464      	add	r4, ip
     f1e:	2323      	movs	r3, #35	; 0x23
     f20:	425b      	negs	r3, r3
     f22:	4343      	muls	r3, r0
     f24:	18e3      	adds	r3, r4, r3
            bit_set = 7 - (y_set % 8);
     f26:	2007      	movs	r0, #7
     f28:	4388      	bics	r0, r1
     f2a:	0001      	movs	r1, r0
     f2c:	e7d5      	b.n	eda <eink_ed037tc1_set_pixel+0x3e>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 0);
     f2e:	4a0c      	ldr	r2, [pc, #48]	; (f60 <eink_ed037tc1_set_pixel+0xc4>)
     f30:	6812      	ldr	r2, [r2, #0]
     f32:	6910      	ldr	r0, [r2, #16]
     f34:	18c3      	adds	r3, r0, r3
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
     f36:	2201      	movs	r2, #1
     f38:	408a      	lsls	r2, r1
     f3a:	0011      	movs	r1, r2
     f3c:	781a      	ldrb	r2, [r3, #0]
     f3e:	438a      	bics	r2, r1
     f40:	701a      	strb	r2, [r3, #0]
     f42:	e7ce      	b.n	ee2 <eink_ed037tc1_set_pixel+0x46>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 1);
     f44:	4a06      	ldr	r2, [pc, #24]	; (f60 <eink_ed037tc1_set_pixel+0xc4>)
     f46:	6812      	ldr	r2, [r2, #0]
     f48:	6910      	ldr	r0, [r2, #16]
     f4a:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
     f4c:	2201      	movs	r2, #1
     f4e:	408a      	lsls	r2, r1
     f50:	7819      	ldrb	r1, [r3, #0]
     f52:	430a      	orrs	r2, r1
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	e7c4      	b.n	ee2 <eink_ed037tc1_set_pixel+0x46>
     f58:	20000408 	.word	0x20000408
     f5c:	0000417d 	.word	0x0000417d
     f60:	20000424 	.word	0x20000424

00000f64 <eink_ed028tc1_set_pixel_raw>:
{    
     f64:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8177_global_instance.display_width) && (y_set >= 0) && (y_set < uc8177_global_instance.display_height) ) {
     f66:	4b4e      	ldr	r3, [pc, #312]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x13c>)
     f68:	885b      	ldrh	r3, [r3, #2]
     f6a:	b29b      	uxth	r3, r3
     f6c:	4283      	cmp	r3, r0
     f6e:	d944      	bls.n	ffa <eink_ed028tc1_set_pixel_raw+0x96>
     f70:	4b4b      	ldr	r3, [pc, #300]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x13c>)
     f72:	889c      	ldrh	r4, [r3, #4]
     f74:	b2a4      	uxth	r4, r4
     f76:	428c      	cmp	r4, r1
     f78:	d93f      	bls.n	ffa <eink_ed028tc1_set_pixel_raw+0x96>
        if ( (uc8177_global_instance.display_config.display_rotation == ROTATE_0) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180) ) {
     f7a:	781b      	ldrb	r3, [r3, #0]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d00b      	beq.n	f98 <eink_ed028tc1_set_pixel_raw+0x34>
     f80:	4b47      	ldr	r3, [pc, #284]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x13c>)
     f82:	781b      	ldrb	r3, [r3, #0]
     f84:	2b02      	cmp	r3, #2
     f86:	d007      	beq.n	f98 <eink_ed028tc1_set_pixel_raw+0x34>
            byte_set = x1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * y_set);
     f88:	1044      	asrs	r4, r0, #1
     f8a:	2396      	movs	r3, #150	; 0x96
     f8c:	005b      	lsls	r3, r3, #1
     f8e:	434b      	muls	r3, r1
     f90:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
     f92:	2101      	movs	r1, #1
     f94:	4001      	ands	r1, r0
     f96:	e006      	b.n	fa6 <eink_ed028tc1_set_pixel_raw+0x42>
           byte_set = y1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * x_set);
     f98:	104c      	asrs	r4, r1, #1
     f9a:	2396      	movs	r3, #150	; 0x96
     f9c:	005b      	lsls	r3, r3, #1
     f9e:	4343      	muls	r3, r0
     fa0:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
     fa2:	2001      	movs	r0, #1
     fa4:	4001      	ands	r1, r0
        if (odd_even_bit) {
     fa6:	2900      	cmp	r1, #0
     fa8:	d128      	bne.n	ffc <eink_ed028tc1_set_pixel_raw+0x98>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_set >> 3) & 0x1));
     faa:	493e      	ldr	r1, [pc, #248]	; (10a4 <eink_ed028tc1_set_pixel_raw+0x140>)
     fac:	6809      	ldr	r1, [r1, #0]
     fae:	6909      	ldr	r1, [r1, #16]
     fb0:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fb2:	0710      	lsls	r0, r2, #28
     fb4:	d45f      	bmi.n	1076 <eink_ed028tc1_set_pixel_raw+0x112>
        *byte &= ~(1 << bit_number);
     fb6:	780c      	ldrb	r4, [r1, #0]
     fb8:	207f      	movs	r0, #127	; 0x7f
     fba:	4020      	ands	r0, r4
     fbc:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_set >> 2) & 0x1));
     fbe:	4939      	ldr	r1, [pc, #228]	; (10a4 <eink_ed028tc1_set_pixel_raw+0x140>)
     fc0:	6809      	ldr	r1, [r1, #0]
     fc2:	6909      	ldr	r1, [r1, #16]
     fc4:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fc6:	0750      	lsls	r0, r2, #29
     fc8:	d45b      	bmi.n	1082 <eink_ed028tc1_set_pixel_raw+0x11e>
        *byte &= ~(1 << bit_number);
     fca:	7808      	ldrb	r0, [r1, #0]
     fcc:	2440      	movs	r4, #64	; 0x40
     fce:	43a0      	bics	r0, r4
     fd0:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_set >> 1) & 0x1));
     fd2:	4934      	ldr	r1, [pc, #208]	; (10a4 <eink_ed028tc1_set_pixel_raw+0x140>)
     fd4:	6809      	ldr	r1, [r1, #0]
     fd6:	6909      	ldr	r1, [r1, #16]
     fd8:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fda:	0790      	lsls	r0, r2, #30
     fdc:	d456      	bmi.n	108c <eink_ed028tc1_set_pixel_raw+0x128>
        *byte &= ~(1 << bit_number);
     fde:	7808      	ldrb	r0, [r1, #0]
     fe0:	2420      	movs	r4, #32
     fe2:	43a0      	bics	r0, r4
     fe4:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_set & 0x1));
     fe6:	492f      	ldr	r1, [pc, #188]	; (10a4 <eink_ed028tc1_set_pixel_raw+0x140>)
     fe8:	6809      	ldr	r1, [r1, #0]
     fea:	6909      	ldr	r1, [r1, #16]
     fec:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
     fee:	07d2      	lsls	r2, r2, #31
     ff0:	d451      	bmi.n	1096 <eink_ed028tc1_set_pixel_raw+0x132>
        *byte &= ~(1 << bit_number);
     ff2:	781a      	ldrb	r2, [r3, #0]
     ff4:	2110      	movs	r1, #16
     ff6:	438a      	bics	r2, r1
     ff8:	701a      	strb	r2, [r3, #0]
}
     ffa:	bd10      	pop	{r4, pc}
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_set >> 3) & 0x1));
     ffc:	4929      	ldr	r1, [pc, #164]	; (10a4 <eink_ed028tc1_set_pixel_raw+0x140>)
     ffe:	6809      	ldr	r1, [r1, #0]
    1000:	6909      	ldr	r1, [r1, #16]
    1002:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1004:	0710      	lsls	r0, r2, #28
    1006:	d422      	bmi.n	104e <eink_ed028tc1_set_pixel_raw+0xea>
        *byte &= ~(1 << bit_number);
    1008:	7808      	ldrb	r0, [r1, #0]
    100a:	2408      	movs	r4, #8
    100c:	43a0      	bics	r0, r4
    100e:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_set >> 2) & 0x1));
    1010:	4924      	ldr	r1, [pc, #144]	; (10a4 <eink_ed028tc1_set_pixel_raw+0x140>)
    1012:	6809      	ldr	r1, [r1, #0]
    1014:	6909      	ldr	r1, [r1, #16]
    1016:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1018:	0750      	lsls	r0, r2, #29
    101a:	d41d      	bmi.n	1058 <eink_ed028tc1_set_pixel_raw+0xf4>
        *byte &= ~(1 << bit_number);
    101c:	7808      	ldrb	r0, [r1, #0]
    101e:	2404      	movs	r4, #4
    1020:	43a0      	bics	r0, r4
    1022:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_set >> 1) & 0x1));
    1024:	491f      	ldr	r1, [pc, #124]	; (10a4 <eink_ed028tc1_set_pixel_raw+0x140>)
    1026:	6809      	ldr	r1, [r1, #0]
    1028:	6909      	ldr	r1, [r1, #16]
    102a:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    102c:	0790      	lsls	r0, r2, #30
    102e:	d418      	bmi.n	1062 <eink_ed028tc1_set_pixel_raw+0xfe>
        *byte &= ~(1 << bit_number);
    1030:	7808      	ldrb	r0, [r1, #0]
    1032:	2402      	movs	r4, #2
    1034:	43a0      	bics	r0, r4
    1036:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_set & 0x1));
    1038:	491a      	ldr	r1, [pc, #104]	; (10a4 <eink_ed028tc1_set_pixel_raw+0x140>)
    103a:	6809      	ldr	r1, [r1, #0]
    103c:	6909      	ldr	r1, [r1, #16]
    103e:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
    1040:	07d2      	lsls	r2, r2, #31
    1042:	d413      	bmi.n	106c <eink_ed028tc1_set_pixel_raw+0x108>
        *byte &= ~(1 << bit_number);
    1044:	781a      	ldrb	r2, [r3, #0]
    1046:	2101      	movs	r1, #1
    1048:	438a      	bics	r2, r1
    104a:	701a      	strb	r2, [r3, #0]
    104c:	e7d5      	b.n	ffa <eink_ed028tc1_set_pixel_raw+0x96>
        *byte |= 1 << bit_number;
    104e:	7808      	ldrb	r0, [r1, #0]
    1050:	2408      	movs	r4, #8
    1052:	4320      	orrs	r0, r4
    1054:	7008      	strb	r0, [r1, #0]
    1056:	e7db      	b.n	1010 <eink_ed028tc1_set_pixel_raw+0xac>
    1058:	7808      	ldrb	r0, [r1, #0]
    105a:	2404      	movs	r4, #4
    105c:	4320      	orrs	r0, r4
    105e:	7008      	strb	r0, [r1, #0]
    1060:	e7e0      	b.n	1024 <eink_ed028tc1_set_pixel_raw+0xc0>
    1062:	7808      	ldrb	r0, [r1, #0]
    1064:	2402      	movs	r4, #2
    1066:	4320      	orrs	r0, r4
    1068:	7008      	strb	r0, [r1, #0]
    106a:	e7e5      	b.n	1038 <eink_ed028tc1_set_pixel_raw+0xd4>
    106c:	781a      	ldrb	r2, [r3, #0]
    106e:	2101      	movs	r1, #1
    1070:	430a      	orrs	r2, r1
    1072:	701a      	strb	r2, [r3, #0]
    1074:	e7c1      	b.n	ffa <eink_ed028tc1_set_pixel_raw+0x96>
    1076:	780c      	ldrb	r4, [r1, #0]
    1078:	2080      	movs	r0, #128	; 0x80
    107a:	4240      	negs	r0, r0
    107c:	4320      	orrs	r0, r4
    107e:	7008      	strb	r0, [r1, #0]
    1080:	e79d      	b.n	fbe <eink_ed028tc1_set_pixel_raw+0x5a>
    1082:	7808      	ldrb	r0, [r1, #0]
    1084:	2440      	movs	r4, #64	; 0x40
    1086:	4320      	orrs	r0, r4
    1088:	7008      	strb	r0, [r1, #0]
    108a:	e7a2      	b.n	fd2 <eink_ed028tc1_set_pixel_raw+0x6e>
    108c:	7808      	ldrb	r0, [r1, #0]
    108e:	2420      	movs	r4, #32
    1090:	4320      	orrs	r0, r4
    1092:	7008      	strb	r0, [r1, #0]
    1094:	e7a7      	b.n	fe6 <eink_ed028tc1_set_pixel_raw+0x82>
    1096:	781a      	ldrb	r2, [r3, #0]
    1098:	2110      	movs	r1, #16
    109a:	430a      	orrs	r2, r1
    109c:	701a      	strb	r2, [r3, #0]
    109e:	e7ac      	b.n	ffa <eink_ed028tc1_set_pixel_raw+0x96>
    10a0:	200003a4 	.word	0x200003a4
    10a4:	20000424 	.word	0x20000424

000010a8 <eink_ed028tc1_set_pixel>:
{    
    10a8:	b510      	push	{r4, lr}
    switch(pixel_colour) {
    10aa:	2a00      	cmp	r2, #0
    10ac:	d003      	beq.n	10b6 <eink_ed028tc1_set_pixel+0xe>
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0xF);
    10ae:	220f      	movs	r2, #15
    10b0:	4b02      	ldr	r3, [pc, #8]	; (10bc <eink_ed028tc1_set_pixel+0x14>)
    10b2:	4798      	blx	r3
}
    10b4:	bd10      	pop	{r4, pc}
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0x0);
    10b6:	4b01      	ldr	r3, [pc, #4]	; (10bc <eink_ed028tc1_set_pixel+0x14>)
    10b8:	4798      	blx	r3
            break;
    10ba:	e7fb      	b.n	10b4 <eink_ed028tc1_set_pixel+0xc>
    10bc:	00000f65 	.word	0x00000f65

000010c0 <eink_ed028tc1_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_ed028tc1_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	46de      	mov	lr, fp
    10c4:	4657      	mov	r7, sl
    10c6:	464e      	mov	r6, r9
    10c8:	4645      	mov	r5, r8
    10ca:	b5e0      	push	{r5, r6, r7, lr}
    10cc:	b087      	sub	sp, #28
    10ce:	9002      	str	r0, [sp, #8]
    10d0:	4693      	mov	fp, r2
    10d2:	0019      	movs	r1, r3
    10d4:	9303      	str	r3, [sp, #12]
    10d6:	ab10      	add	r3, sp, #64	; 0x40
    10d8:	881a      	ldrh	r2, [r3, #0]
    10da:	4690      	mov	r8, r2
    10dc:	ab11      	add	r3, sp, #68	; 0x44
    10de:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value_1, bit_value_2;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    10e0:	465a      	mov	r2, fp
    10e2:	2a00      	cmp	r2, #0
    10e4:	d034      	beq.n	1150 <eink_ed028tc1_graphics_load_4bgrey_image+0x90>
    10e6:	2200      	movs	r2, #0
    10e8:	4692      	mov	sl, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
    10ea:	000a      	movs	r2, r1
    10ec:	3a01      	subs	r2, #1
    10ee:	b292      	uxth	r2, r2
    10f0:	4691      	mov	r9, r2
            /* Process each pixel in byte  */
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    10f2:	9304      	str	r3, [sp, #16]
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
            /* Set the pixel in the display buffer */
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    10f4:	4f1a      	ldr	r7, [pc, #104]	; (1160 <eink_ed028tc1_graphics_load_4bgrey_image+0xa0>)
    10f6:	4643      	mov	r3, r8
    10f8:	9305      	str	r3, [sp, #20]
        for (j = (image_height_bytes-1); j > 0; j--) {
    10fa:	464b      	mov	r3, r9
    10fc:	464d      	mov	r5, r9
    10fe:	2b00      	cmp	r3, #0
    1100:	d020      	beq.n	1144 <eink_ed028tc1_graphics_load_4bgrey_image+0x84>
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    1102:	9e04      	ldr	r6, [sp, #16]
    1104:	9b03      	ldr	r3, [sp, #12]
    1106:	4652      	mov	r2, sl
    1108:	4353      	muls	r3, r2
    110a:	9a02      	ldr	r2, [sp, #8]
    110c:	4690      	mov	r8, r2
    110e:	4498      	add	r8, r3
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    1110:	9b05      	ldr	r3, [sp, #20]
    1112:	4453      	add	r3, sl
    1114:	b29b      	uxth	r3, r3
    1116:	9301      	str	r3, [sp, #4]
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    1118:	4643      	mov	r3, r8
    111a:	5d5c      	ldrb	r4, [r3, r5]
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    111c:	220f      	movs	r2, #15
    111e:	4022      	ands	r2, r4
    1120:	43d2      	mvns	r2, r2
    1122:	b2d2      	uxtb	r2, r2
    1124:	0031      	movs	r1, r6
    1126:	9801      	ldr	r0, [sp, #4]
    1128:	47b8      	blx	r7
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    112a:	0924      	lsrs	r4, r4, #4
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value_2));
    112c:	43e2      	mvns	r2, r4
    112e:	b2d2      	uxtb	r2, r2
    1130:	1c71      	adds	r1, r6, #1
    1132:	b289      	uxth	r1, r1
    1134:	9801      	ldr	r0, [sp, #4]
    1136:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    1138:	3d01      	subs	r5, #1
    113a:	b2ad      	uxth	r5, r5
    113c:	3602      	adds	r6, #2
    113e:	b2b6      	uxth	r6, r6
    1140:	2d00      	cmp	r5, #0
    1142:	d1e9      	bne.n	1118 <eink_ed028tc1_graphics_load_4bgrey_image+0x58>
    for (i = 0; i < image_width_px; i++) {
    1144:	4653      	mov	r3, sl
    1146:	3301      	adds	r3, #1
    1148:	b29b      	uxth	r3, r3
    114a:	469a      	mov	sl, r3
    114c:	459b      	cmp	fp, r3
    114e:	d8d4      	bhi.n	10fa <eink_ed028tc1_graphics_load_4bgrey_image+0x3a>
            m += 2;
        }
    }
    return;
    1150:	b007      	add	sp, #28
    1152:	bc3c      	pop	{r2, r3, r4, r5}
    1154:	4690      	mov	r8, r2
    1156:	4699      	mov	r9, r3
    1158:	46a2      	mov	sl, r4
    115a:	46ab      	mov	fp, r5
    115c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	00000f65 	.word	0x00000f65

00001164 <eink_ed057tc2_set_pixel>:
{
    1164:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1166:	4b36      	ldr	r3, [pc, #216]	; (1240 <eink_ed057tc2_set_pixel+0xdc>)
    1168:	889b      	ldrh	r3, [r3, #4]
    116a:	b29b      	uxth	r3, r3
    116c:	4283      	cmp	r3, r0
    116e:	d919      	bls.n	11a4 <eink_ed057tc2_set_pixel+0x40>
    1170:	4b33      	ldr	r3, [pc, #204]	; (1240 <eink_ed057tc2_set_pixel+0xdc>)
    1172:	88db      	ldrh	r3, [r3, #6]
    1174:	b29b      	uxth	r3, r3
    1176:	428b      	cmp	r3, r1
    1178:	d914      	bls.n	11a4 <eink_ed057tc2_set_pixel+0x40>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    117a:	4b31      	ldr	r3, [pc, #196]	; (1240 <eink_ed057tc2_set_pixel+0xdc>)
    117c:	785b      	ldrb	r3, [r3, #1]
    117e:	2b01      	cmp	r3, #1
    1180:	d011      	beq.n	11a6 <eink_ed057tc2_set_pixel+0x42>
    1182:	4b2f      	ldr	r3, [pc, #188]	; (1240 <eink_ed057tc2_set_pixel+0xdc>)
    1184:	785b      	ldrb	r3, [r3, #1]
    1186:	2b03      	cmp	r3, #3
    1188:	d00d      	beq.n	11a6 <eink_ed057tc2_set_pixel+0x42>
            byte_set = x1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * y_set);
    118a:	1044      	asrs	r4, r0, #1
    118c:	2396      	movs	r3, #150	; 0x96
    118e:	005b      	lsls	r3, r3, #1
    1190:	434b      	muls	r3, r1
    1192:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    1194:	2101      	movs	r1, #1
    1196:	4008      	ands	r0, r1
        if (odd_even_bit) {
    1198:	2800      	cmp	r0, #0
    119a:	d02c      	beq.n	11f6 <eink_ed057tc2_set_pixel+0x92>
            switch(pixel_colour) {
    119c:	2a00      	cmp	r2, #0
    119e:	d00a      	beq.n	11b6 <eink_ed057tc2_set_pixel+0x52>
    11a0:	2a01      	cmp	r2, #1
    11a2:	d018      	beq.n	11d6 <eink_ed057tc2_set_pixel+0x72>
}
    11a4:	bd10      	pop	{r4, pc}
           byte_set = y1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * x_set);
    11a6:	104c      	asrs	r4, r1, #1
    11a8:	2396      	movs	r3, #150	; 0x96
    11aa:	005b      	lsls	r3, r3, #1
    11ac:	4343      	muls	r3, r0
    11ae:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    11b0:	2001      	movs	r0, #1
    11b2:	4008      	ands	r0, r1
    11b4:	e7f0      	b.n	1198 <eink_ed057tc2_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    11b6:	4823      	ldr	r0, [pc, #140]	; (1244 <eink_ed057tc2_set_pixel+0xe0>)
    11b8:	6802      	ldr	r2, [r0, #0]
    11ba:	6912      	ldr	r2, [r2, #16]
    11bc:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    11be:	7811      	ldrb	r1, [r2, #0]
    11c0:	2402      	movs	r4, #2
    11c2:	43a1      	bics	r1, r4
    11c4:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    11c6:	6802      	ldr	r2, [r0, #0]
    11c8:	6911      	ldr	r1, [r2, #16]
    11ca:	18cb      	adds	r3, r1, r3
    11cc:	781a      	ldrb	r2, [r3, #0]
    11ce:	2101      	movs	r1, #1
    11d0:	438a      	bics	r2, r1
    11d2:	701a      	strb	r2, [r3, #0]
    11d4:	e7e6      	b.n	11a4 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    11d6:	481b      	ldr	r0, [pc, #108]	; (1244 <eink_ed057tc2_set_pixel+0xe0>)
    11d8:	6802      	ldr	r2, [r0, #0]
    11da:	6912      	ldr	r2, [r2, #16]
    11dc:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    11de:	7811      	ldrb	r1, [r2, #0]
    11e0:	2402      	movs	r4, #2
    11e2:	4321      	orrs	r1, r4
    11e4:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    11e6:	6802      	ldr	r2, [r0, #0]
    11e8:	6911      	ldr	r1, [r2, #16]
    11ea:	18cb      	adds	r3, r1, r3
    11ec:	781a      	ldrb	r2, [r3, #0]
    11ee:	2101      	movs	r1, #1
    11f0:	430a      	orrs	r2, r1
    11f2:	701a      	strb	r2, [r3, #0]
    11f4:	e7d6      	b.n	11a4 <eink_ed057tc2_set_pixel+0x40>
            switch(pixel_colour) {
    11f6:	2a00      	cmp	r2, #0
    11f8:	d011      	beq.n	121e <eink_ed057tc2_set_pixel+0xba>
    11fa:	2a01      	cmp	r2, #1
    11fc:	d1d2      	bne.n	11a4 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    11fe:	4811      	ldr	r0, [pc, #68]	; (1244 <eink_ed057tc2_set_pixel+0xe0>)
    1200:	6802      	ldr	r2, [r0, #0]
    1202:	6912      	ldr	r2, [r2, #16]
    1204:	18d2      	adds	r2, r2, r3
    1206:	7811      	ldrb	r1, [r2, #0]
    1208:	2420      	movs	r4, #32
    120a:	4321      	orrs	r1, r4
    120c:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    120e:	6802      	ldr	r2, [r0, #0]
    1210:	6911      	ldr	r1, [r2, #16]
    1212:	18cb      	adds	r3, r1, r3
    1214:	781a      	ldrb	r2, [r3, #0]
    1216:	2110      	movs	r1, #16
    1218:	430a      	orrs	r2, r1
    121a:	701a      	strb	r2, [r3, #0]
}
    121c:	e7c2      	b.n	11a4 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    121e:	4809      	ldr	r0, [pc, #36]	; (1244 <eink_ed057tc2_set_pixel+0xe0>)
    1220:	6802      	ldr	r2, [r0, #0]
    1222:	6912      	ldr	r2, [r2, #16]
    1224:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1226:	7811      	ldrb	r1, [r2, #0]
    1228:	2420      	movs	r4, #32
    122a:	43a1      	bics	r1, r4
    122c:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    122e:	6802      	ldr	r2, [r0, #0]
    1230:	6911      	ldr	r1, [r2, #16]
    1232:	18cb      	adds	r3, r1, r3
    1234:	781a      	ldrb	r2, [r3, #0]
    1236:	2110      	movs	r1, #16
    1238:	438a      	bics	r2, r1
    123a:	701a      	strb	r2, [r3, #0]
    123c:	e7b2      	b.n	11a4 <eink_ed057tc2_set_pixel+0x40>
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	200003fc 	.word	0x200003fc
    1244:	20000424 	.word	0x20000424

00001248 <eink_ac057tc1_set_pixel>:
{
    1248:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    124a:	4bd0      	ldr	r3, [pc, #832]	; (158c <eink_ac057tc1_set_pixel+0x344>)
    124c:	889b      	ldrh	r3, [r3, #4]
    124e:	b29b      	uxth	r3, r3
    1250:	4283      	cmp	r3, r0
    1252:	d93a      	bls.n	12ca <eink_ac057tc1_set_pixel+0x82>
    1254:	4bcd      	ldr	r3, [pc, #820]	; (158c <eink_ac057tc1_set_pixel+0x344>)
    1256:	88db      	ldrh	r3, [r3, #6]
    1258:	b29b      	uxth	r3, r3
    125a:	428b      	cmp	r3, r1
    125c:	d935      	bls.n	12ca <eink_ac057tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    125e:	4bcb      	ldr	r3, [pc, #812]	; (158c <eink_ac057tc1_set_pixel+0x344>)
    1260:	785b      	ldrb	r3, [r3, #1]
    1262:	2b01      	cmp	r3, #1
    1264:	d013      	beq.n	128e <eink_ac057tc1_set_pixel+0x46>
    1266:	4bc9      	ldr	r3, [pc, #804]	; (158c <eink_ac057tc1_set_pixel+0x344>)
    1268:	785b      	ldrb	r3, [r3, #1]
    126a:	2b03      	cmp	r3, #3
    126c:	d00f      	beq.n	128e <eink_ac057tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * y_set);
    126e:	1044      	asrs	r4, r0, #1
    1270:	2396      	movs	r3, #150	; 0x96
    1272:	005b      	lsls	r3, r3, #1
    1274:	434b      	muls	r3, r1
    1276:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    1278:	2101      	movs	r1, #1
    127a:	4008      	ands	r0, r1
        if (odd_even_bit) {
    127c:	2800      	cmp	r0, #0
    127e:	d100      	bne.n	1282 <eink_ac057tc1_set_pixel+0x3a>
    1280:	e0c5      	b.n	140e <eink_ac057tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    1282:	2a07      	cmp	r2, #7
    1284:	d821      	bhi.n	12ca <eink_ac057tc1_set_pixel+0x82>
    1286:	0092      	lsls	r2, r2, #2
    1288:	49c1      	ldr	r1, [pc, #772]	; (1590 <eink_ac057tc1_set_pixel+0x348>)
    128a:	588a      	ldr	r2, [r1, r2]
    128c:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * x_set);
    128e:	104c      	asrs	r4, r1, #1
    1290:	2396      	movs	r3, #150	; 0x96
    1292:	005b      	lsls	r3, r3, #1
    1294:	4343      	muls	r3, r0
    1296:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    1298:	2001      	movs	r0, #1
    129a:	4008      	ands	r0, r1
    129c:	e7ee      	b.n	127c <eink_ac057tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    129e:	49bd      	ldr	r1, [pc, #756]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    12a0:	680a      	ldr	r2, [r1, #0]
    12a2:	6912      	ldr	r2, [r2, #16]
    12a4:	18d2      	adds	r2, r2, r3
    12a6:	7810      	ldrb	r0, [r2, #0]
    12a8:	2404      	movs	r4, #4
    12aa:	43a0      	bics	r0, r4
    12ac:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    12ae:	680a      	ldr	r2, [r1, #0]
    12b0:	6912      	ldr	r2, [r2, #16]
    12b2:	18d2      	adds	r2, r2, r3
    12b4:	7810      	ldrb	r0, [r2, #0]
    12b6:	3c02      	subs	r4, #2
    12b8:	43a0      	bics	r0, r4
    12ba:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    12bc:	680a      	ldr	r2, [r1, #0]
    12be:	6911      	ldr	r1, [r2, #16]
    12c0:	18cb      	adds	r3, r1, r3
    12c2:	781a      	ldrb	r2, [r3, #0]
    12c4:	2101      	movs	r1, #1
    12c6:	438a      	bics	r2, r1
    12c8:	701a      	strb	r2, [r3, #0]
}
    12ca:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    12cc:	49b1      	ldr	r1, [pc, #708]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    12ce:	680a      	ldr	r2, [r1, #0]
    12d0:	6912      	ldr	r2, [r2, #16]
    12d2:	18d2      	adds	r2, r2, r3
    12d4:	7810      	ldrb	r0, [r2, #0]
    12d6:	2404      	movs	r4, #4
    12d8:	43a0      	bics	r0, r4
    12da:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    12dc:	680a      	ldr	r2, [r1, #0]
    12de:	6912      	ldr	r2, [r2, #16]
    12e0:	18d2      	adds	r2, r2, r3
    12e2:	7810      	ldrb	r0, [r2, #0]
    12e4:	3c02      	subs	r4, #2
    12e6:	43a0      	bics	r0, r4
    12e8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    12ea:	680a      	ldr	r2, [r1, #0]
    12ec:	6911      	ldr	r1, [r2, #16]
    12ee:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    12f0:	781a      	ldrb	r2, [r3, #0]
    12f2:	2101      	movs	r1, #1
    12f4:	430a      	orrs	r2, r1
    12f6:	701a      	strb	r2, [r3, #0]
    12f8:	e7e7      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    12fa:	49a6      	ldr	r1, [pc, #664]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    12fc:	680a      	ldr	r2, [r1, #0]
    12fe:	6912      	ldr	r2, [r2, #16]
    1300:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1302:	7810      	ldrb	r0, [r2, #0]
    1304:	2404      	movs	r4, #4
    1306:	43a0      	bics	r0, r4
    1308:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    130a:	680a      	ldr	r2, [r1, #0]
    130c:	6912      	ldr	r2, [r2, #16]
    130e:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1310:	7810      	ldrb	r0, [r2, #0]
    1312:	2402      	movs	r4, #2
    1314:	4320      	orrs	r0, r4
    1316:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1318:	680a      	ldr	r2, [r1, #0]
    131a:	6911      	ldr	r1, [r2, #16]
    131c:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    131e:	781a      	ldrb	r2, [r3, #0]
    1320:	2101      	movs	r1, #1
    1322:	438a      	bics	r2, r1
    1324:	701a      	strb	r2, [r3, #0]
    1326:	e7d0      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1328:	499a      	ldr	r1, [pc, #616]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    132a:	680a      	ldr	r2, [r1, #0]
    132c:	6912      	ldr	r2, [r2, #16]
    132e:	18d2      	adds	r2, r2, r3
    1330:	7810      	ldrb	r0, [r2, #0]
    1332:	2404      	movs	r4, #4
    1334:	43a0      	bics	r0, r4
    1336:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1338:	680a      	ldr	r2, [r1, #0]
    133a:	6912      	ldr	r2, [r2, #16]
    133c:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    133e:	7810      	ldrb	r0, [r2, #0]
    1340:	2402      	movs	r4, #2
    1342:	4320      	orrs	r0, r4
    1344:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1346:	680a      	ldr	r2, [r1, #0]
    1348:	6911      	ldr	r1, [r2, #16]
    134a:	18cb      	adds	r3, r1, r3
    134c:	781a      	ldrb	r2, [r3, #0]
    134e:	2101      	movs	r1, #1
    1350:	430a      	orrs	r2, r1
    1352:	701a      	strb	r2, [r3, #0]
    1354:	e7b9      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1356:	498f      	ldr	r1, [pc, #572]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    1358:	680a      	ldr	r2, [r1, #0]
    135a:	6912      	ldr	r2, [r2, #16]
    135c:	18d2      	adds	r2, r2, r3
    135e:	7810      	ldrb	r0, [r2, #0]
    1360:	2404      	movs	r4, #4
    1362:	4320      	orrs	r0, r4
    1364:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1366:	680a      	ldr	r2, [r1, #0]
    1368:	6912      	ldr	r2, [r2, #16]
    136a:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    136c:	7810      	ldrb	r0, [r2, #0]
    136e:	2402      	movs	r4, #2
    1370:	43a0      	bics	r0, r4
    1372:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1374:	680a      	ldr	r2, [r1, #0]
    1376:	6911      	ldr	r1, [r2, #16]
    1378:	18cb      	adds	r3, r1, r3
    137a:	781a      	ldrb	r2, [r3, #0]
    137c:	2101      	movs	r1, #1
    137e:	438a      	bics	r2, r1
    1380:	701a      	strb	r2, [r3, #0]
    1382:	e7a2      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1384:	4983      	ldr	r1, [pc, #524]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    1386:	680a      	ldr	r2, [r1, #0]
    1388:	6912      	ldr	r2, [r2, #16]
    138a:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    138c:	7810      	ldrb	r0, [r2, #0]
    138e:	2404      	movs	r4, #4
    1390:	4320      	orrs	r0, r4
    1392:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1394:	680a      	ldr	r2, [r1, #0]
    1396:	6912      	ldr	r2, [r2, #16]
    1398:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    139a:	7810      	ldrb	r0, [r2, #0]
    139c:	2402      	movs	r4, #2
    139e:	43a0      	bics	r0, r4
    13a0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    13a2:	680a      	ldr	r2, [r1, #0]
    13a4:	6911      	ldr	r1, [r2, #16]
    13a6:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    13a8:	781a      	ldrb	r2, [r3, #0]
    13aa:	2101      	movs	r1, #1
    13ac:	430a      	orrs	r2, r1
    13ae:	701a      	strb	r2, [r3, #0]
    13b0:	e78b      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    13b2:	4978      	ldr	r1, [pc, #480]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    13b4:	680a      	ldr	r2, [r1, #0]
    13b6:	6912      	ldr	r2, [r2, #16]
    13b8:	18d2      	adds	r2, r2, r3
    13ba:	7810      	ldrb	r0, [r2, #0]
    13bc:	2404      	movs	r4, #4
    13be:	4320      	orrs	r0, r4
    13c0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    13c2:	680a      	ldr	r2, [r1, #0]
    13c4:	6912      	ldr	r2, [r2, #16]
    13c6:	18d2      	adds	r2, r2, r3
    13c8:	7810      	ldrb	r0, [r2, #0]
    13ca:	2402      	movs	r4, #2
    13cc:	4320      	orrs	r0, r4
    13ce:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    13d0:	680a      	ldr	r2, [r1, #0]
    13d2:	6911      	ldr	r1, [r2, #16]
    13d4:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    13d6:	781a      	ldrb	r2, [r3, #0]
    13d8:	2101      	movs	r1, #1
    13da:	438a      	bics	r2, r1
    13dc:	701a      	strb	r2, [r3, #0]
    13de:	e774      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    13e0:	496c      	ldr	r1, [pc, #432]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    13e2:	680a      	ldr	r2, [r1, #0]
    13e4:	6912      	ldr	r2, [r2, #16]
    13e6:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    13e8:	7810      	ldrb	r0, [r2, #0]
    13ea:	2404      	movs	r4, #4
    13ec:	4320      	orrs	r0, r4
    13ee:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    13f0:	680a      	ldr	r2, [r1, #0]
    13f2:	6912      	ldr	r2, [r2, #16]
    13f4:	18d2      	adds	r2, r2, r3
    13f6:	7810      	ldrb	r0, [r2, #0]
    13f8:	2402      	movs	r4, #2
    13fa:	4320      	orrs	r0, r4
    13fc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    13fe:	680a      	ldr	r2, [r1, #0]
    1400:	6911      	ldr	r1, [r2, #16]
    1402:	18cb      	adds	r3, r1, r3
    1404:	781a      	ldrb	r2, [r3, #0]
    1406:	2101      	movs	r1, #1
    1408:	430a      	orrs	r2, r1
    140a:	701a      	strb	r2, [r3, #0]
    140c:	e75d      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
            switch(pixel_colour) {
    140e:	2a07      	cmp	r2, #7
    1410:	d900      	bls.n	1414 <eink_ac057tc1_set_pixel+0x1cc>
    1412:	e75a      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
    1414:	0092      	lsls	r2, r2, #2
    1416:	4960      	ldr	r1, [pc, #384]	; (1598 <eink_ac057tc1_set_pixel+0x350>)
    1418:	588a      	ldr	r2, [r1, r2]
    141a:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    141c:	495d      	ldr	r1, [pc, #372]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    141e:	680a      	ldr	r2, [r1, #0]
    1420:	6912      	ldr	r2, [r2, #16]
    1422:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1424:	7810      	ldrb	r0, [r2, #0]
    1426:	2440      	movs	r4, #64	; 0x40
    1428:	43a0      	bics	r0, r4
    142a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    142c:	680a      	ldr	r2, [r1, #0]
    142e:	6912      	ldr	r2, [r2, #16]
    1430:	18d2      	adds	r2, r2, r3
    1432:	7810      	ldrb	r0, [r2, #0]
    1434:	3c20      	subs	r4, #32
    1436:	43a0      	bics	r0, r4
    1438:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    143a:	680a      	ldr	r2, [r1, #0]
    143c:	6911      	ldr	r1, [r2, #16]
    143e:	18cb      	adds	r3, r1, r3
    1440:	781a      	ldrb	r2, [r3, #0]
    1442:	2110      	movs	r1, #16
    1444:	438a      	bics	r2, r1
    1446:	701a      	strb	r2, [r3, #0]
    1448:	e73f      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    144a:	4952      	ldr	r1, [pc, #328]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    144c:	680a      	ldr	r2, [r1, #0]
    144e:	6912      	ldr	r2, [r2, #16]
    1450:	18d2      	adds	r2, r2, r3
    1452:	7810      	ldrb	r0, [r2, #0]
    1454:	2440      	movs	r4, #64	; 0x40
    1456:	43a0      	bics	r0, r4
    1458:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    145a:	680a      	ldr	r2, [r1, #0]
    145c:	6912      	ldr	r2, [r2, #16]
    145e:	18d2      	adds	r2, r2, r3
    1460:	7810      	ldrb	r0, [r2, #0]
    1462:	3c20      	subs	r4, #32
    1464:	43a0      	bics	r0, r4
    1466:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1468:	680a      	ldr	r2, [r1, #0]
    146a:	6911      	ldr	r1, [r2, #16]
    146c:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    146e:	781a      	ldrb	r2, [r3, #0]
    1470:	2110      	movs	r1, #16
    1472:	430a      	orrs	r2, r1
    1474:	701a      	strb	r2, [r3, #0]
    1476:	e728      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1478:	4946      	ldr	r1, [pc, #280]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    147a:	680a      	ldr	r2, [r1, #0]
    147c:	6912      	ldr	r2, [r2, #16]
    147e:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1480:	7810      	ldrb	r0, [r2, #0]
    1482:	2440      	movs	r4, #64	; 0x40
    1484:	43a0      	bics	r0, r4
    1486:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1488:	680a      	ldr	r2, [r1, #0]
    148a:	6912      	ldr	r2, [r2, #16]
    148c:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    148e:	7810      	ldrb	r0, [r2, #0]
    1490:	2420      	movs	r4, #32
    1492:	4320      	orrs	r0, r4
    1494:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1496:	680a      	ldr	r2, [r1, #0]
    1498:	6911      	ldr	r1, [r2, #16]
    149a:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    149c:	781a      	ldrb	r2, [r3, #0]
    149e:	2110      	movs	r1, #16
    14a0:	438a      	bics	r2, r1
    14a2:	701a      	strb	r2, [r3, #0]
    14a4:	e711      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    14a6:	493b      	ldr	r1, [pc, #236]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    14a8:	680a      	ldr	r2, [r1, #0]
    14aa:	6912      	ldr	r2, [r2, #16]
    14ac:	18d2      	adds	r2, r2, r3
    14ae:	7810      	ldrb	r0, [r2, #0]
    14b0:	2440      	movs	r4, #64	; 0x40
    14b2:	43a0      	bics	r0, r4
    14b4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    14b6:	680a      	ldr	r2, [r1, #0]
    14b8:	6912      	ldr	r2, [r2, #16]
    14ba:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    14bc:	7810      	ldrb	r0, [r2, #0]
    14be:	2420      	movs	r4, #32
    14c0:	4320      	orrs	r0, r4
    14c2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    14c4:	680a      	ldr	r2, [r1, #0]
    14c6:	6911      	ldr	r1, [r2, #16]
    14c8:	18cb      	adds	r3, r1, r3
    14ca:	781a      	ldrb	r2, [r3, #0]
    14cc:	2110      	movs	r1, #16
    14ce:	430a      	orrs	r2, r1
    14d0:	701a      	strb	r2, [r3, #0]
    14d2:	e6fa      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    14d4:	492f      	ldr	r1, [pc, #188]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    14d6:	680a      	ldr	r2, [r1, #0]
    14d8:	6912      	ldr	r2, [r2, #16]
    14da:	18d2      	adds	r2, r2, r3
    14dc:	7810      	ldrb	r0, [r2, #0]
    14de:	2440      	movs	r4, #64	; 0x40
    14e0:	4320      	orrs	r0, r4
    14e2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    14e4:	680a      	ldr	r2, [r1, #0]
    14e6:	6912      	ldr	r2, [r2, #16]
    14e8:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    14ea:	7810      	ldrb	r0, [r2, #0]
    14ec:	2420      	movs	r4, #32
    14ee:	43a0      	bics	r0, r4
    14f0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    14f2:	680a      	ldr	r2, [r1, #0]
    14f4:	6911      	ldr	r1, [r2, #16]
    14f6:	18cb      	adds	r3, r1, r3
    14f8:	781a      	ldrb	r2, [r3, #0]
    14fa:	2110      	movs	r1, #16
    14fc:	438a      	bics	r2, r1
    14fe:	701a      	strb	r2, [r3, #0]
    1500:	e6e3      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1502:	4924      	ldr	r1, [pc, #144]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    1504:	680a      	ldr	r2, [r1, #0]
    1506:	6912      	ldr	r2, [r2, #16]
    1508:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    150a:	7810      	ldrb	r0, [r2, #0]
    150c:	2440      	movs	r4, #64	; 0x40
    150e:	4320      	orrs	r0, r4
    1510:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1512:	680a      	ldr	r2, [r1, #0]
    1514:	6912      	ldr	r2, [r2, #16]
    1516:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1518:	7810      	ldrb	r0, [r2, #0]
    151a:	2420      	movs	r4, #32
    151c:	43a0      	bics	r0, r4
    151e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1520:	680a      	ldr	r2, [r1, #0]
    1522:	6911      	ldr	r1, [r2, #16]
    1524:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1526:	781a      	ldrb	r2, [r3, #0]
    1528:	2110      	movs	r1, #16
    152a:	430a      	orrs	r2, r1
    152c:	701a      	strb	r2, [r3, #0]
    152e:	e6cc      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1530:	4918      	ldr	r1, [pc, #96]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    1532:	680a      	ldr	r2, [r1, #0]
    1534:	6912      	ldr	r2, [r2, #16]
    1536:	18d2      	adds	r2, r2, r3
    1538:	7810      	ldrb	r0, [r2, #0]
    153a:	2440      	movs	r4, #64	; 0x40
    153c:	4320      	orrs	r0, r4
    153e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1540:	680a      	ldr	r2, [r1, #0]
    1542:	6912      	ldr	r2, [r2, #16]
    1544:	18d2      	adds	r2, r2, r3
    1546:	7810      	ldrb	r0, [r2, #0]
    1548:	2420      	movs	r4, #32
    154a:	4320      	orrs	r0, r4
    154c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    154e:	680a      	ldr	r2, [r1, #0]
    1550:	6911      	ldr	r1, [r2, #16]
    1552:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1554:	781a      	ldrb	r2, [r3, #0]
    1556:	2110      	movs	r1, #16
    1558:	438a      	bics	r2, r1
    155a:	701a      	strb	r2, [r3, #0]
    155c:	e6b5      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    155e:	490d      	ldr	r1, [pc, #52]	; (1594 <eink_ac057tc1_set_pixel+0x34c>)
    1560:	680a      	ldr	r2, [r1, #0]
    1562:	6912      	ldr	r2, [r2, #16]
    1564:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1566:	7810      	ldrb	r0, [r2, #0]
    1568:	2440      	movs	r4, #64	; 0x40
    156a:	4320      	orrs	r0, r4
    156c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    156e:	680a      	ldr	r2, [r1, #0]
    1570:	6912      	ldr	r2, [r2, #16]
    1572:	18d2      	adds	r2, r2, r3
    1574:	7810      	ldrb	r0, [r2, #0]
    1576:	2420      	movs	r4, #32
    1578:	4320      	orrs	r0, r4
    157a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    157c:	680a      	ldr	r2, [r1, #0]
    157e:	6911      	ldr	r1, [r2, #16]
    1580:	18cb      	adds	r3, r1, r3
    1582:	781a      	ldrb	r2, [r3, #0]
    1584:	2110      	movs	r1, #16
    1586:	430a      	orrs	r2, r1
    1588:	701a      	strb	r2, [r3, #0]
}
    158a:	e69e      	b.n	12ca <eink_ac057tc1_set_pixel+0x82>
    158c:	200003fc 	.word	0x200003fc
    1590:	00004810 	.word	0x00004810
    1594:	20000424 	.word	0x20000424
    1598:	00004830 	.word	0x00004830

0000159c <eink_ac040tc1_set_pixel>:
{
    159c:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    159e:	4bd0      	ldr	r3, [pc, #832]	; (18e0 <eink_ac040tc1_set_pixel+0x344>)
    15a0:	889b      	ldrh	r3, [r3, #4]
    15a2:	b29b      	uxth	r3, r3
    15a4:	4283      	cmp	r3, r0
    15a6:	d93a      	bls.n	161e <eink_ac040tc1_set_pixel+0x82>
    15a8:	4bcd      	ldr	r3, [pc, #820]	; (18e0 <eink_ac040tc1_set_pixel+0x344>)
    15aa:	88db      	ldrh	r3, [r3, #6]
    15ac:	b29b      	uxth	r3, r3
    15ae:	428b      	cmp	r3, r1
    15b0:	d935      	bls.n	161e <eink_ac040tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    15b2:	4bcb      	ldr	r3, [pc, #812]	; (18e0 <eink_ac040tc1_set_pixel+0x344>)
    15b4:	785b      	ldrb	r3, [r3, #1]
    15b6:	2b01      	cmp	r3, #1
    15b8:	d013      	beq.n	15e2 <eink_ac040tc1_set_pixel+0x46>
    15ba:	4bc9      	ldr	r3, [pc, #804]	; (18e0 <eink_ac040tc1_set_pixel+0x344>)
    15bc:	785b      	ldrb	r3, [r3, #1]
    15be:	2b03      	cmp	r3, #3
    15c0:	d00f      	beq.n	15e2 <eink_ac040tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * y_set);
    15c2:	1043      	asrs	r3, r0, #1
    15c4:	008c      	lsls	r4, r1, #2
    15c6:	1861      	adds	r1, r4, r1
    15c8:	0189      	lsls	r1, r1, #6
    15ca:	185b      	adds	r3, r3, r1
            odd_even_bit = x_set % 2;
    15cc:	2101      	movs	r1, #1
    15ce:	4008      	ands	r0, r1
        if (odd_even_bit) {
    15d0:	2800      	cmp	r0, #0
    15d2:	d100      	bne.n	15d6 <eink_ac040tc1_set_pixel+0x3a>
    15d4:	e0c5      	b.n	1762 <eink_ac040tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    15d6:	2a07      	cmp	r2, #7
    15d8:	d821      	bhi.n	161e <eink_ac040tc1_set_pixel+0x82>
    15da:	0092      	lsls	r2, r2, #2
    15dc:	49c1      	ldr	r1, [pc, #772]	; (18e4 <eink_ac040tc1_set_pixel+0x348>)
    15de:	588a      	ldr	r2, [r1, r2]
    15e0:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * x_set);
    15e2:	104b      	asrs	r3, r1, #1
    15e4:	0084      	lsls	r4, r0, #2
    15e6:	1820      	adds	r0, r4, r0
    15e8:	0180      	lsls	r0, r0, #6
    15ea:	181b      	adds	r3, r3, r0
           odd_even_bit = y_set % 2;
    15ec:	2001      	movs	r0, #1
    15ee:	4008      	ands	r0, r1
    15f0:	e7ee      	b.n	15d0 <eink_ac040tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    15f2:	49bd      	ldr	r1, [pc, #756]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    15f4:	680a      	ldr	r2, [r1, #0]
    15f6:	6912      	ldr	r2, [r2, #16]
    15f8:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    15fa:	7810      	ldrb	r0, [r2, #0]
    15fc:	2404      	movs	r4, #4
    15fe:	43a0      	bics	r0, r4
    1600:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1602:	680a      	ldr	r2, [r1, #0]
    1604:	6912      	ldr	r2, [r2, #16]
    1606:	18d2      	adds	r2, r2, r3
    1608:	7810      	ldrb	r0, [r2, #0]
    160a:	3c02      	subs	r4, #2
    160c:	43a0      	bics	r0, r4
    160e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1610:	680a      	ldr	r2, [r1, #0]
    1612:	6911      	ldr	r1, [r2, #16]
    1614:	18cb      	adds	r3, r1, r3
    1616:	781a      	ldrb	r2, [r3, #0]
    1618:	2101      	movs	r1, #1
    161a:	438a      	bics	r2, r1
    161c:	701a      	strb	r2, [r3, #0]
}
    161e:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1620:	49b1      	ldr	r1, [pc, #708]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    1622:	680a      	ldr	r2, [r1, #0]
    1624:	6912      	ldr	r2, [r2, #16]
    1626:	18d2      	adds	r2, r2, r3
    1628:	7810      	ldrb	r0, [r2, #0]
    162a:	2404      	movs	r4, #4
    162c:	43a0      	bics	r0, r4
    162e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1630:	680a      	ldr	r2, [r1, #0]
    1632:	6912      	ldr	r2, [r2, #16]
    1634:	18d2      	adds	r2, r2, r3
    1636:	7810      	ldrb	r0, [r2, #0]
    1638:	3c02      	subs	r4, #2
    163a:	43a0      	bics	r0, r4
    163c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    163e:	680a      	ldr	r2, [r1, #0]
    1640:	6911      	ldr	r1, [r2, #16]
    1642:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1644:	781a      	ldrb	r2, [r3, #0]
    1646:	2101      	movs	r1, #1
    1648:	430a      	orrs	r2, r1
    164a:	701a      	strb	r2, [r3, #0]
    164c:	e7e7      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    164e:	49a6      	ldr	r1, [pc, #664]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    1650:	680a      	ldr	r2, [r1, #0]
    1652:	6912      	ldr	r2, [r2, #16]
    1654:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1656:	7810      	ldrb	r0, [r2, #0]
    1658:	2404      	movs	r4, #4
    165a:	43a0      	bics	r0, r4
    165c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    165e:	680a      	ldr	r2, [r1, #0]
    1660:	6912      	ldr	r2, [r2, #16]
    1662:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1664:	7810      	ldrb	r0, [r2, #0]
    1666:	2402      	movs	r4, #2
    1668:	4320      	orrs	r0, r4
    166a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    166c:	680a      	ldr	r2, [r1, #0]
    166e:	6911      	ldr	r1, [r2, #16]
    1670:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1672:	781a      	ldrb	r2, [r3, #0]
    1674:	2101      	movs	r1, #1
    1676:	438a      	bics	r2, r1
    1678:	701a      	strb	r2, [r3, #0]
    167a:	e7d0      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    167c:	499a      	ldr	r1, [pc, #616]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    167e:	680a      	ldr	r2, [r1, #0]
    1680:	6912      	ldr	r2, [r2, #16]
    1682:	18d2      	adds	r2, r2, r3
    1684:	7810      	ldrb	r0, [r2, #0]
    1686:	2404      	movs	r4, #4
    1688:	43a0      	bics	r0, r4
    168a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    168c:	680a      	ldr	r2, [r1, #0]
    168e:	6912      	ldr	r2, [r2, #16]
    1690:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1692:	7810      	ldrb	r0, [r2, #0]
    1694:	2402      	movs	r4, #2
    1696:	4320      	orrs	r0, r4
    1698:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    169a:	680a      	ldr	r2, [r1, #0]
    169c:	6911      	ldr	r1, [r2, #16]
    169e:	18cb      	adds	r3, r1, r3
    16a0:	781a      	ldrb	r2, [r3, #0]
    16a2:	2101      	movs	r1, #1
    16a4:	430a      	orrs	r2, r1
    16a6:	701a      	strb	r2, [r3, #0]
    16a8:	e7b9      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    16aa:	498f      	ldr	r1, [pc, #572]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    16ac:	680a      	ldr	r2, [r1, #0]
    16ae:	6912      	ldr	r2, [r2, #16]
    16b0:	18d2      	adds	r2, r2, r3
    16b2:	7810      	ldrb	r0, [r2, #0]
    16b4:	2404      	movs	r4, #4
    16b6:	4320      	orrs	r0, r4
    16b8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    16ba:	680a      	ldr	r2, [r1, #0]
    16bc:	6912      	ldr	r2, [r2, #16]
    16be:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    16c0:	7810      	ldrb	r0, [r2, #0]
    16c2:	2402      	movs	r4, #2
    16c4:	43a0      	bics	r0, r4
    16c6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    16c8:	680a      	ldr	r2, [r1, #0]
    16ca:	6911      	ldr	r1, [r2, #16]
    16cc:	18cb      	adds	r3, r1, r3
    16ce:	781a      	ldrb	r2, [r3, #0]
    16d0:	2101      	movs	r1, #1
    16d2:	438a      	bics	r2, r1
    16d4:	701a      	strb	r2, [r3, #0]
    16d6:	e7a2      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    16d8:	4983      	ldr	r1, [pc, #524]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    16da:	680a      	ldr	r2, [r1, #0]
    16dc:	6912      	ldr	r2, [r2, #16]
    16de:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    16e0:	7810      	ldrb	r0, [r2, #0]
    16e2:	2404      	movs	r4, #4
    16e4:	4320      	orrs	r0, r4
    16e6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    16e8:	680a      	ldr	r2, [r1, #0]
    16ea:	6912      	ldr	r2, [r2, #16]
    16ec:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    16ee:	7810      	ldrb	r0, [r2, #0]
    16f0:	2402      	movs	r4, #2
    16f2:	43a0      	bics	r0, r4
    16f4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    16f6:	680a      	ldr	r2, [r1, #0]
    16f8:	6911      	ldr	r1, [r2, #16]
    16fa:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    16fc:	781a      	ldrb	r2, [r3, #0]
    16fe:	2101      	movs	r1, #1
    1700:	430a      	orrs	r2, r1
    1702:	701a      	strb	r2, [r3, #0]
    1704:	e78b      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1706:	4978      	ldr	r1, [pc, #480]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    1708:	680a      	ldr	r2, [r1, #0]
    170a:	6912      	ldr	r2, [r2, #16]
    170c:	18d2      	adds	r2, r2, r3
    170e:	7810      	ldrb	r0, [r2, #0]
    1710:	2404      	movs	r4, #4
    1712:	4320      	orrs	r0, r4
    1714:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1716:	680a      	ldr	r2, [r1, #0]
    1718:	6912      	ldr	r2, [r2, #16]
    171a:	18d2      	adds	r2, r2, r3
    171c:	7810      	ldrb	r0, [r2, #0]
    171e:	2402      	movs	r4, #2
    1720:	4320      	orrs	r0, r4
    1722:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1724:	680a      	ldr	r2, [r1, #0]
    1726:	6911      	ldr	r1, [r2, #16]
    1728:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    172a:	781a      	ldrb	r2, [r3, #0]
    172c:	2101      	movs	r1, #1
    172e:	438a      	bics	r2, r1
    1730:	701a      	strb	r2, [r3, #0]
    1732:	e774      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1734:	496c      	ldr	r1, [pc, #432]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    1736:	680a      	ldr	r2, [r1, #0]
    1738:	6912      	ldr	r2, [r2, #16]
    173a:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    173c:	7810      	ldrb	r0, [r2, #0]
    173e:	2404      	movs	r4, #4
    1740:	4320      	orrs	r0, r4
    1742:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1744:	680a      	ldr	r2, [r1, #0]
    1746:	6912      	ldr	r2, [r2, #16]
    1748:	18d2      	adds	r2, r2, r3
    174a:	7810      	ldrb	r0, [r2, #0]
    174c:	2402      	movs	r4, #2
    174e:	4320      	orrs	r0, r4
    1750:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1752:	680a      	ldr	r2, [r1, #0]
    1754:	6911      	ldr	r1, [r2, #16]
    1756:	18cb      	adds	r3, r1, r3
    1758:	781a      	ldrb	r2, [r3, #0]
    175a:	2101      	movs	r1, #1
    175c:	430a      	orrs	r2, r1
    175e:	701a      	strb	r2, [r3, #0]
    1760:	e75d      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
            switch(pixel_colour) {
    1762:	2a07      	cmp	r2, #7
    1764:	d900      	bls.n	1768 <eink_ac040tc1_set_pixel+0x1cc>
    1766:	e75a      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
    1768:	0092      	lsls	r2, r2, #2
    176a:	4960      	ldr	r1, [pc, #384]	; (18ec <eink_ac040tc1_set_pixel+0x350>)
    176c:	588a      	ldr	r2, [r1, r2]
    176e:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1770:	495d      	ldr	r1, [pc, #372]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    1772:	680a      	ldr	r2, [r1, #0]
    1774:	6912      	ldr	r2, [r2, #16]
    1776:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1778:	7810      	ldrb	r0, [r2, #0]
    177a:	2440      	movs	r4, #64	; 0x40
    177c:	43a0      	bics	r0, r4
    177e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1780:	680a      	ldr	r2, [r1, #0]
    1782:	6912      	ldr	r2, [r2, #16]
    1784:	18d2      	adds	r2, r2, r3
    1786:	7810      	ldrb	r0, [r2, #0]
    1788:	3c20      	subs	r4, #32
    178a:	43a0      	bics	r0, r4
    178c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    178e:	680a      	ldr	r2, [r1, #0]
    1790:	6911      	ldr	r1, [r2, #16]
    1792:	18cb      	adds	r3, r1, r3
    1794:	781a      	ldrb	r2, [r3, #0]
    1796:	2110      	movs	r1, #16
    1798:	438a      	bics	r2, r1
    179a:	701a      	strb	r2, [r3, #0]
    179c:	e73f      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    179e:	4952      	ldr	r1, [pc, #328]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    17a0:	680a      	ldr	r2, [r1, #0]
    17a2:	6912      	ldr	r2, [r2, #16]
    17a4:	18d2      	adds	r2, r2, r3
    17a6:	7810      	ldrb	r0, [r2, #0]
    17a8:	2440      	movs	r4, #64	; 0x40
    17aa:	43a0      	bics	r0, r4
    17ac:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    17ae:	680a      	ldr	r2, [r1, #0]
    17b0:	6912      	ldr	r2, [r2, #16]
    17b2:	18d2      	adds	r2, r2, r3
    17b4:	7810      	ldrb	r0, [r2, #0]
    17b6:	3c20      	subs	r4, #32
    17b8:	43a0      	bics	r0, r4
    17ba:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    17bc:	680a      	ldr	r2, [r1, #0]
    17be:	6911      	ldr	r1, [r2, #16]
    17c0:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    17c2:	781a      	ldrb	r2, [r3, #0]
    17c4:	2110      	movs	r1, #16
    17c6:	430a      	orrs	r2, r1
    17c8:	701a      	strb	r2, [r3, #0]
    17ca:	e728      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    17cc:	4946      	ldr	r1, [pc, #280]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    17ce:	680a      	ldr	r2, [r1, #0]
    17d0:	6912      	ldr	r2, [r2, #16]
    17d2:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    17d4:	7810      	ldrb	r0, [r2, #0]
    17d6:	2440      	movs	r4, #64	; 0x40
    17d8:	43a0      	bics	r0, r4
    17da:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    17dc:	680a      	ldr	r2, [r1, #0]
    17de:	6912      	ldr	r2, [r2, #16]
    17e0:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    17e2:	7810      	ldrb	r0, [r2, #0]
    17e4:	2420      	movs	r4, #32
    17e6:	4320      	orrs	r0, r4
    17e8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    17ea:	680a      	ldr	r2, [r1, #0]
    17ec:	6911      	ldr	r1, [r2, #16]
    17ee:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    17f0:	781a      	ldrb	r2, [r3, #0]
    17f2:	2110      	movs	r1, #16
    17f4:	438a      	bics	r2, r1
    17f6:	701a      	strb	r2, [r3, #0]
    17f8:	e711      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    17fa:	493b      	ldr	r1, [pc, #236]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    17fc:	680a      	ldr	r2, [r1, #0]
    17fe:	6912      	ldr	r2, [r2, #16]
    1800:	18d2      	adds	r2, r2, r3
    1802:	7810      	ldrb	r0, [r2, #0]
    1804:	2440      	movs	r4, #64	; 0x40
    1806:	43a0      	bics	r0, r4
    1808:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    180a:	680a      	ldr	r2, [r1, #0]
    180c:	6912      	ldr	r2, [r2, #16]
    180e:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1810:	7810      	ldrb	r0, [r2, #0]
    1812:	2420      	movs	r4, #32
    1814:	4320      	orrs	r0, r4
    1816:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1818:	680a      	ldr	r2, [r1, #0]
    181a:	6911      	ldr	r1, [r2, #16]
    181c:	18cb      	adds	r3, r1, r3
    181e:	781a      	ldrb	r2, [r3, #0]
    1820:	2110      	movs	r1, #16
    1822:	430a      	orrs	r2, r1
    1824:	701a      	strb	r2, [r3, #0]
    1826:	e6fa      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1828:	492f      	ldr	r1, [pc, #188]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    182a:	680a      	ldr	r2, [r1, #0]
    182c:	6912      	ldr	r2, [r2, #16]
    182e:	18d2      	adds	r2, r2, r3
    1830:	7810      	ldrb	r0, [r2, #0]
    1832:	2440      	movs	r4, #64	; 0x40
    1834:	4320      	orrs	r0, r4
    1836:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1838:	680a      	ldr	r2, [r1, #0]
    183a:	6912      	ldr	r2, [r2, #16]
    183c:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    183e:	7810      	ldrb	r0, [r2, #0]
    1840:	2420      	movs	r4, #32
    1842:	43a0      	bics	r0, r4
    1844:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1846:	680a      	ldr	r2, [r1, #0]
    1848:	6911      	ldr	r1, [r2, #16]
    184a:	18cb      	adds	r3, r1, r3
    184c:	781a      	ldrb	r2, [r3, #0]
    184e:	2110      	movs	r1, #16
    1850:	438a      	bics	r2, r1
    1852:	701a      	strb	r2, [r3, #0]
    1854:	e6e3      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1856:	4924      	ldr	r1, [pc, #144]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    1858:	680a      	ldr	r2, [r1, #0]
    185a:	6912      	ldr	r2, [r2, #16]
    185c:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    185e:	7810      	ldrb	r0, [r2, #0]
    1860:	2440      	movs	r4, #64	; 0x40
    1862:	4320      	orrs	r0, r4
    1864:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1866:	680a      	ldr	r2, [r1, #0]
    1868:	6912      	ldr	r2, [r2, #16]
    186a:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    186c:	7810      	ldrb	r0, [r2, #0]
    186e:	2420      	movs	r4, #32
    1870:	43a0      	bics	r0, r4
    1872:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1874:	680a      	ldr	r2, [r1, #0]
    1876:	6911      	ldr	r1, [r2, #16]
    1878:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    187a:	781a      	ldrb	r2, [r3, #0]
    187c:	2110      	movs	r1, #16
    187e:	430a      	orrs	r2, r1
    1880:	701a      	strb	r2, [r3, #0]
    1882:	e6cc      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1884:	4918      	ldr	r1, [pc, #96]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    1886:	680a      	ldr	r2, [r1, #0]
    1888:	6912      	ldr	r2, [r2, #16]
    188a:	18d2      	adds	r2, r2, r3
    188c:	7810      	ldrb	r0, [r2, #0]
    188e:	2440      	movs	r4, #64	; 0x40
    1890:	4320      	orrs	r0, r4
    1892:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1894:	680a      	ldr	r2, [r1, #0]
    1896:	6912      	ldr	r2, [r2, #16]
    1898:	18d2      	adds	r2, r2, r3
    189a:	7810      	ldrb	r0, [r2, #0]
    189c:	2420      	movs	r4, #32
    189e:	4320      	orrs	r0, r4
    18a0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    18a2:	680a      	ldr	r2, [r1, #0]
    18a4:	6911      	ldr	r1, [r2, #16]
    18a6:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    18a8:	781a      	ldrb	r2, [r3, #0]
    18aa:	2110      	movs	r1, #16
    18ac:	438a      	bics	r2, r1
    18ae:	701a      	strb	r2, [r3, #0]
    18b0:	e6b5      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    18b2:	490d      	ldr	r1, [pc, #52]	; (18e8 <eink_ac040tc1_set_pixel+0x34c>)
    18b4:	680a      	ldr	r2, [r1, #0]
    18b6:	6912      	ldr	r2, [r2, #16]
    18b8:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    18ba:	7810      	ldrb	r0, [r2, #0]
    18bc:	2440      	movs	r4, #64	; 0x40
    18be:	4320      	orrs	r0, r4
    18c0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    18c2:	680a      	ldr	r2, [r1, #0]
    18c4:	6912      	ldr	r2, [r2, #16]
    18c6:	18d2      	adds	r2, r2, r3
    18c8:	7810      	ldrb	r0, [r2, #0]
    18ca:	2420      	movs	r4, #32
    18cc:	4320      	orrs	r0, r4
    18ce:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    18d0:	680a      	ldr	r2, [r1, #0]
    18d2:	6911      	ldr	r1, [r2, #16]
    18d4:	18cb      	adds	r3, r1, r3
    18d6:	781a      	ldrb	r2, [r3, #0]
    18d8:	2110      	movs	r1, #16
    18da:	430a      	orrs	r2, r1
    18dc:	701a      	strb	r2, [r3, #0]
}
    18de:	e69e      	b.n	161e <eink_ac040tc1_set_pixel+0x82>
    18e0:	200003fc 	.word	0x200003fc
    18e4:	00004850 	.word	0x00004850
    18e8:	20000424 	.word	0x20000424
    18ec:	00004870 	.word	0x00004870

000018f0 <eink_hink_e0154a05_set_pixel>:
{    
    18f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch(ssd1608_global_instance.display_config.display_rotation)
    18f2:	4c2a      	ldr	r4, [pc, #168]	; (199c <eink_hink_e0154a05_set_pixel+0xac>)
    18f4:	7824      	ldrb	r4, [r4, #0]
    18f6:	b2e4      	uxtb	r4, r4
    18f8:	2c01      	cmp	r4, #1
    18fa:	d014      	beq.n	1926 <eink_hink_e0154a05_set_pixel+0x36>
    18fc:	2c00      	cmp	r4, #0
    18fe:	d008      	beq.n	1912 <eink_hink_e0154a05_set_pixel+0x22>
    1900:	2c02      	cmp	r4, #2
    1902:	d01c      	beq.n	193e <eink_hink_e0154a05_set_pixel+0x4e>
    1904:	2c03      	cmp	r4, #3
    1906:	d024      	beq.n	1952 <eink_hink_e0154a05_set_pixel+0x62>
    if ( (x_set >= 0) && (x_set < max_x) && (y_set >= 0) && (y_set < max_y) ) {
    1908:	42b3      	cmp	r3, r6
    190a:	d201      	bcs.n	1910 <eink_hink_e0154a05_set_pixel+0x20>
    190c:	42bd      	cmp	r5, r7
    190e:	d328      	bcc.n	1962 <eink_hink_e0154a05_set_pixel+0x72>
}
    1910:	bdf0      	pop	{r4, r5, r6, r7, pc}
            x_set = ssd1608_global_instance.display_height - y;
    1912:	4c22      	ldr	r4, [pc, #136]	; (199c <eink_hink_e0154a05_set_pixel+0xac>)
    1914:	88e3      	ldrh	r3, [r4, #6]
    1916:	1a5b      	subs	r3, r3, r1
    1918:	b29b      	uxth	r3, r3
            max_x = ssd1608_global_instance.display_height;
    191a:	88e6      	ldrh	r6, [r4, #6]
    191c:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    191e:	88a7      	ldrh	r7, [r4, #4]
    1920:	b2bf      	uxth	r7, r7
            y_set = x;
    1922:	0005      	movs	r5, r0
            break;
    1924:	e7f0      	b.n	1908 <eink_hink_e0154a05_set_pixel+0x18>
            x_set = ssd1608_global_instance.display_width - x;
    1926:	4c1d      	ldr	r4, [pc, #116]	; (199c <eink_hink_e0154a05_set_pixel+0xac>)
    1928:	88a3      	ldrh	r3, [r4, #4]
    192a:	1a1b      	subs	r3, r3, r0
    192c:	b29b      	uxth	r3, r3
            y_set = ssd1608_global_instance.display_height - y;
    192e:	88e5      	ldrh	r5, [r4, #6]
    1930:	1a6d      	subs	r5, r5, r1
    1932:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_width;
    1934:	88a6      	ldrh	r6, [r4, #4]
    1936:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1938:	88e7      	ldrh	r7, [r4, #6]
    193a:	b2bf      	uxth	r7, r7
            break;
    193c:	e7e4      	b.n	1908 <eink_hink_e0154a05_set_pixel+0x18>
            y_set = ssd1608_global_instance.display_width - x;
    193e:	4c17      	ldr	r4, [pc, #92]	; (199c <eink_hink_e0154a05_set_pixel+0xac>)
    1940:	88a5      	ldrh	r5, [r4, #4]
    1942:	1a2d      	subs	r5, r5, r0
    1944:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_height;
    1946:	88e6      	ldrh	r6, [r4, #6]
    1948:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    194a:	88a7      	ldrh	r7, [r4, #4]
    194c:	b2bf      	uxth	r7, r7
            x_set = y;
    194e:	000b      	movs	r3, r1
            break;
    1950:	e7da      	b.n	1908 <eink_hink_e0154a05_set_pixel+0x18>
            max_x = ssd1608_global_instance.display_width;
    1952:	4b12      	ldr	r3, [pc, #72]	; (199c <eink_hink_e0154a05_set_pixel+0xac>)
    1954:	889e      	ldrh	r6, [r3, #4]
    1956:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1958:	88df      	ldrh	r7, [r3, #6]
    195a:	b2bf      	uxth	r7, r7
            y_set = y;
    195c:	000d      	movs	r5, r1
            x_set = x;
    195e:	0003      	movs	r3, r0
            break;
    1960:	e7d2      	b.n	1908 <eink_hink_e0154a05_set_pixel+0x18>
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    1962:	490f      	ldr	r1, [pc, #60]	; (19a0 <eink_hink_e0154a05_set_pixel+0xb0>)
    1964:	6809      	ldr	r1, [r1, #0]
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    1966:	3301      	adds	r3, #1
    1968:	0098      	lsls	r0, r3, #2
    196a:	181b      	adds	r3, r3, r0
    196c:	0098      	lsls	r0, r3, #2
    196e:	181b      	adds	r3, r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1970:	10e8      	asrs	r0, r5, #3
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    1972:	1a1b      	subs	r3, r3, r0
    1974:	3b01      	subs	r3, #1
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    1976:	b29b      	uxth	r3, r3
    1978:	6909      	ldr	r1, [r1, #16]
    197a:	18cb      	adds	r3, r1, r3
    197c:	2107      	movs	r1, #7
    197e:	400d      	ands	r5, r1
    if (bit_value == 1) {
    1980:	2a00      	cmp	r2, #0
    1982:	d105      	bne.n	1990 <eink_hink_e0154a05_set_pixel+0xa0>
        *byte &= ~(1 << bit_number);
    1984:	2101      	movs	r1, #1
    1986:	40a9      	lsls	r1, r5
    1988:	781a      	ldrb	r2, [r3, #0]
    198a:	438a      	bics	r2, r1
    198c:	701a      	strb	r2, [r3, #0]
}
    198e:	e7bf      	b.n	1910 <eink_hink_e0154a05_set_pixel+0x20>
        *byte |= 1 << bit_number;
    1990:	3906      	subs	r1, #6
    1992:	40a9      	lsls	r1, r5
    1994:	781a      	ldrb	r2, [r3, #0]
    1996:	430a      	orrs	r2, r1
    1998:	701a      	strb	r2, [r3, #0]
    199a:	e7b9      	b.n	1910 <eink_hink_e0154a05_set_pixel+0x20>
    199c:	200003ac 	.word	0x200003ac
    19a0:	20000424 	.word	0x20000424

000019a4 <eink_ed029tc1_set_pixel>:
{    
    19a4:	b570      	push	{r4, r5, r6, lr}
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    19a6:	4c37      	ldr	r4, [pc, #220]	; (1a84 <eink_ed029tc1_set_pixel+0xe0>)
    19a8:	8923      	ldrh	r3, [r4, #8]
    19aa:	b29b      	uxth	r3, r3
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    19ac:	88e5      	ldrh	r5, [r4, #6]
    19ae:	b2ad      	uxth	r5, r5
    if ( (x_set >= 0) && (x_set < uc8151_global_instance.display_width) && (y_set >= 0) && (y_set < uc8151_global_instance.display_height) ) {
    19b0:	88e4      	ldrh	r4, [r4, #6]
    19b2:	b2a4      	uxth	r4, r4
    19b4:	4284      	cmp	r4, r0
    19b6:	d925      	bls.n	1a04 <eink_ed029tc1_set_pixel+0x60>
    19b8:	4c32      	ldr	r4, [pc, #200]	; (1a84 <eink_ed029tc1_set_pixel+0xe0>)
    19ba:	8924      	ldrh	r4, [r4, #8]
    19bc:	b2a4      	uxth	r4, r4
    19be:	428c      	cmp	r4, r1
    19c0:	d920      	bls.n	1a04 <eink_ed029tc1_set_pixel+0x60>
        if ( (uc8151_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8151_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    19c2:	4c30      	ldr	r4, [pc, #192]	; (1a84 <eink_ed029tc1_set_pixel+0xe0>)
    19c4:	78e4      	ldrb	r4, [r4, #3]
    19c6:	2c01      	cmp	r4, #1
    19c8:	d01d      	beq.n	1a06 <eink_ed029tc1_set_pixel+0x62>
    19ca:	4c2e      	ldr	r4, [pc, #184]	; (1a84 <eink_ed029tc1_set_pixel+0xe0>)
    19cc:	78e4      	ldrb	r4, [r4, #3]
    19ce:	2c03      	cmp	r4, #3
    19d0:	d019      	beq.n	1a06 <eink_ed029tc1_set_pixel+0x62>
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19d2:	3001      	adds	r0, #1
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    19d4:	08db      	lsrs	r3, r3, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19d6:	b2db      	uxtb	r3, r3
    19d8:	4358      	muls	r0, r3
            y1_set = ((y_set - (y_set % 8)) / 8);
    19da:	10cb      	asrs	r3, r1, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19dc:	43db      	mvns	r3, r3
    19de:	18c3      	adds	r3, r0, r3
            bit_set = (y_set % 8);
    19e0:	2007      	movs	r0, #7
    19e2:	4001      	ands	r1, r0
        if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    19e4:	4827      	ldr	r0, [pc, #156]	; (1a84 <eink_ed029tc1_set_pixel+0xe0>)
    19e6:	7880      	ldrb	r0, [r0, #2]
    19e8:	2800      	cmp	r0, #0
    19ea:	d11b      	bne.n	1a24 <eink_ed029tc1_set_pixel+0x80>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);
    19ec:	4826      	ldr	r0, [pc, #152]	; (1a88 <eink_ed029tc1_set_pixel+0xe4>)
    19ee:	6800      	ldr	r0, [r0, #0]
    19f0:	6940      	ldr	r0, [r0, #20]
    19f2:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    19f4:	2a00      	cmp	r2, #0
    19f6:	d10e      	bne.n	1a16 <eink_ed029tc1_set_pixel+0x72>
        *byte &= ~(1 << bit_number);
    19f8:	2201      	movs	r2, #1
    19fa:	408a      	lsls	r2, r1
    19fc:	0011      	movs	r1, r2
    19fe:	781a      	ldrb	r2, [r3, #0]
    1a00:	438a      	bics	r2, r1
    1a02:	701a      	strb	r2, [r3, #0]
}
    1a04:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    1a06:	08ed      	lsrs	r5, r5, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - (width_bytes - 16) - x1_set);
    1a08:	b2eb      	uxtb	r3, r5
    1a0a:	4359      	muls	r1, r3
            x1_set = 15 - ((x_set - (x_set % 8)) / 8);
    1a0c:	10c3      	asrs	r3, r0, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - (width_bytes - 16) - x1_set);
    1a0e:	18cb      	adds	r3, r1, r3
            bit_set = 7 - (x_set % 8);
    1a10:	2107      	movs	r1, #7
    1a12:	4381      	bics	r1, r0
    1a14:	e7e6      	b.n	19e4 <eink_ed029tc1_set_pixel+0x40>
        *byte |= 1 << bit_number;
    1a16:	2201      	movs	r2, #1
    1a18:	408a      	lsls	r2, r1
    1a1a:	0011      	movs	r1, r2
    1a1c:	781a      	ldrb	r2, [r3, #0]
    1a1e:	430a      	orrs	r2, r1
    1a20:	701a      	strb	r2, [r3, #0]
    1a22:	e7ef      	b.n	1a04 <eink_ed029tc1_set_pixel+0x60>
            if (pixel_colour == PIXEL_BLACK) {
    1a24:	2a00      	cmp	r2, #0
    1a26:	d017      	beq.n	1a58 <eink_ed029tc1_set_pixel+0xb4>
            } else if(pixel_colour == PIXEL_WHITE) {
    1a28:	3a02      	subs	r2, #2
    1a2a:	2a01      	cmp	r2, #1
    1a2c:	d801      	bhi.n	1a32 <eink_ed029tc1_set_pixel+0x8e>
                pixel_set_2 = 0;    
    1a2e:	2600      	movs	r6, #0
    1a30:	e013      	b.n	1a5a <eink_ed029tc1_set_pixel+0xb6>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1a32:	4d15      	ldr	r5, [pc, #84]	; (1a88 <eink_ed029tc1_set_pixel+0xe4>)
    1a34:	682a      	ldr	r2, [r5, #0]
    1a36:	6912      	ldr	r2, [r2, #16]
    1a38:	18d2      	adds	r2, r2, r3
    1a3a:	2401      	movs	r4, #1
    1a3c:	408c      	lsls	r4, r1
    1a3e:	7810      	ldrb	r0, [r2, #0]
    1a40:	4320      	orrs	r0, r4
    1a42:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1a44:	682a      	ldr	r2, [r5, #0]
    1a46:	6950      	ldr	r0, [r2, #20]
    1a48:	18c3      	adds	r3, r0, r3
    1a4a:	2201      	movs	r2, #1
    1a4c:	408a      	lsls	r2, r1
    1a4e:	0011      	movs	r1, r2
    1a50:	781a      	ldrb	r2, [r3, #0]
    1a52:	430a      	orrs	r2, r1
    1a54:	701a      	strb	r2, [r3, #0]
    1a56:	e7d5      	b.n	1a04 <eink_ed029tc1_set_pixel+0x60>
                pixel_set_2 = 1;
    1a58:	2601      	movs	r6, #1
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1a5a:	4d0b      	ldr	r5, [pc, #44]	; (1a88 <eink_ed029tc1_set_pixel+0xe4>)
    1a5c:	682a      	ldr	r2, [r5, #0]
    1a5e:	6912      	ldr	r2, [r2, #16]
    1a60:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1a62:	2401      	movs	r4, #1
    1a64:	408c      	lsls	r4, r1
    1a66:	7810      	ldrb	r0, [r2, #0]
    1a68:	43a0      	bics	r0, r4
    1a6a:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1a6c:	682a      	ldr	r2, [r5, #0]
    1a6e:	6950      	ldr	r0, [r2, #20]
    1a70:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    1a72:	2e00      	cmp	r6, #0
    1a74:	d1e9      	bne.n	1a4a <eink_ed029tc1_set_pixel+0xa6>
        *byte &= ~(1 << bit_number);
    1a76:	2201      	movs	r2, #1
    1a78:	408a      	lsls	r2, r1
    1a7a:	0011      	movs	r1, r2
    1a7c:	781a      	ldrb	r2, [r3, #0]
    1a7e:	438a      	bics	r2, r1
    1a80:	701a      	strb	r2, [r3, #0]
}
    1a82:	e7bf      	b.n	1a04 <eink_ed029tc1_set_pixel+0x60>
    1a84:	200003ec 	.word	0x200003ec
    1a88:	20000424 	.word	0x20000424

00001a8c <eink_el026tr1_set_pixel>:
{    
    1a8c:	b510      	push	{r4, lr}
    eink_ed029tc1_set_pixel(x_set, y_set, pixel_colour);
    1a8e:	4b01      	ldr	r3, [pc, #4]	; (1a94 <eink_el026tr1_set_pixel+0x8>)
    1a90:	4798      	blx	r3
}
    1a92:	bd10      	pop	{r4, pc}
    1a94:	000019a5 	.word	0x000019a5

00001a98 <eink_ed013tc1_set_pixel>:
{    
    1a98:	b510      	push	{r4, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1a9a:	4c16      	ldr	r4, [pc, #88]	; (1af4 <eink_ed013tc1_set_pixel+0x5c>)
    1a9c:	88a3      	ldrh	r3, [r4, #4]
    1a9e:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1aa0:	8864      	ldrh	r4, [r4, #2]
    1aa2:	b2a4      	uxth	r4, r4
    1aa4:	4284      	cmp	r4, r0
    1aa6:	d918      	bls.n	1ada <eink_ed013tc1_set_pixel+0x42>
    1aa8:	4c12      	ldr	r4, [pc, #72]	; (1af4 <eink_ed013tc1_set_pixel+0x5c>)
    1aaa:	88a4      	ldrh	r4, [r4, #4]
    1aac:	b2a4      	uxth	r4, r4
    1aae:	428c      	cmp	r4, r1
    1ab0:	d913      	bls.n	1ada <eink_ed013tc1_set_pixel+0x42>
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1ab2:	08db      	lsrs	r3, r3, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1ab4:	b2db      	uxtb	r3, r3
    1ab6:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1ab8:	10c8      	asrs	r0, r1, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1aba:	1a1b      	subs	r3, r3, r0
    1abc:	3b01      	subs	r3, #1
        bit_set = (y_set % 8);
    1abe:	2007      	movs	r0, #7
    1ac0:	4001      	ands	r1, r0
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1ac2:	2a00      	cmp	r2, #0
    1ac4:	d00a      	beq.n	1adc <eink_ed013tc1_set_pixel+0x44>
		else eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 1);
    1ac6:	4a0c      	ldr	r2, [pc, #48]	; (1af8 <eink_ed013tc1_set_pixel+0x60>)
    1ac8:	6812      	ldr	r2, [r2, #0]
    1aca:	6950      	ldr	r0, [r2, #20]
    1acc:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
    1ace:	2201      	movs	r2, #1
    1ad0:	408a      	lsls	r2, r1
    1ad2:	0011      	movs	r1, r2
    1ad4:	781a      	ldrb	r2, [r3, #0]
    1ad6:	430a      	orrs	r2, r1
    1ad8:	701a      	strb	r2, [r3, #0]
}
    1ada:	bd10      	pop	{r4, pc}
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1adc:	4a06      	ldr	r2, [pc, #24]	; (1af8 <eink_ed013tc1_set_pixel+0x60>)
    1ade:	6812      	ldr	r2, [r2, #0]
    1ae0:	6950      	ldr	r0, [r2, #20]
    1ae2:	18c3      	adds	r3, r0, r3
        *byte &= ~(1 << bit_number);
    1ae4:	2201      	movs	r2, #1
    1ae6:	408a      	lsls	r2, r1
    1ae8:	0011      	movs	r1, r2
    1aea:	781a      	ldrb	r2, [r3, #0]
    1aec:	438a      	bics	r2, r1
    1aee:	701a      	strb	r2, [r3, #0]
    1af0:	e7f3      	b.n	1ada <eink_ed013tc1_set_pixel+0x42>
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	20000380 	.word	0x20000380
    1af8:	20000424 	.word	0x20000424

00001afc <eink_et011tt2_set_pixel>:
{    
    1afc:	b510      	push	{r4, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1afe:	4c16      	ldr	r4, [pc, #88]	; (1b58 <eink_et011tt2_set_pixel+0x5c>)
    1b00:	88a3      	ldrh	r3, [r4, #4]
    1b02:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1b04:	8864      	ldrh	r4, [r4, #2]
    1b06:	b2a4      	uxth	r4, r4
    1b08:	4284      	cmp	r4, r0
    1b0a:	d918      	bls.n	1b3e <eink_et011tt2_set_pixel+0x42>
    1b0c:	4c12      	ldr	r4, [pc, #72]	; (1b58 <eink_et011tt2_set_pixel+0x5c>)
    1b0e:	88a4      	ldrh	r4, [r4, #4]
    1b10:	b2a4      	uxth	r4, r4
    1b12:	428c      	cmp	r4, r1
    1b14:	d913      	bls.n	1b3e <eink_et011tt2_set_pixel+0x42>
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1b16:	08db      	lsrs	r3, r3, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1b18:	b2db      	uxtb	r3, r3
    1b1a:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1b1c:	10c8      	asrs	r0, r1, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1b1e:	1a1b      	subs	r3, r3, r0
    1b20:	3b01      	subs	r3, #1
        bit_set = (y_set % 8);
    1b22:	2007      	movs	r0, #7
    1b24:	4001      	ands	r1, r0
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1b26:	2a00      	cmp	r2, #0
    1b28:	d00a      	beq.n	1b40 <eink_et011tt2_set_pixel+0x44>
		else eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 1);
    1b2a:	4a0c      	ldr	r2, [pc, #48]	; (1b5c <eink_et011tt2_set_pixel+0x60>)
    1b2c:	6812      	ldr	r2, [r2, #0]
    1b2e:	6950      	ldr	r0, [r2, #20]
    1b30:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
    1b32:	2201      	movs	r2, #1
    1b34:	408a      	lsls	r2, r1
    1b36:	0011      	movs	r1, r2
    1b38:	781a      	ldrb	r2, [r3, #0]
    1b3a:	430a      	orrs	r2, r1
    1b3c:	701a      	strb	r2, [r3, #0]
}
    1b3e:	bd10      	pop	{r4, pc}
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1b40:	4a06      	ldr	r2, [pc, #24]	; (1b5c <eink_et011tt2_set_pixel+0x60>)
    1b42:	6812      	ldr	r2, [r2, #0]
    1b44:	6950      	ldr	r0, [r2, #20]
    1b46:	18c3      	adds	r3, r0, r3
        *byte &= ~(1 << bit_number);
    1b48:	2201      	movs	r2, #1
    1b4a:	408a      	lsls	r2, r1
    1b4c:	0011      	movs	r1, r2
    1b4e:	781a      	ldrb	r2, [r3, #0]
    1b50:	438a      	bics	r2, r1
    1b52:	701a      	strb	r2, [r3, #0]
    1b54:	e7f3      	b.n	1b3e <eink_et011tt2_set_pixel+0x42>
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	20000380 	.word	0x20000380
    1b5c:	20000424 	.word	0x20000424

00001b60 <eink_send_raw_byte>:
{    
    1b60:	b570      	push	{r4, r5, r6, lr}
    if(!f_send)
    1b62:	2900      	cmp	r1, #0
    1b64:	d103      	bne.n	1b6e <eink_send_raw_byte+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b66:	2220      	movs	r2, #32
    1b68:	23c0      	movs	r3, #192	; 0xc0
    1b6a:	05db      	lsls	r3, r3, #23
    1b6c:	615a      	str	r2, [r3, #20]
{    
    1b6e:	2308      	movs	r3, #8
    1b70:	22c0      	movs	r2, #192	; 0xc0
    1b72:	05d2      	lsls	r2, r2, #23
    1b74:	2610      	movs	r6, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b76:	2480      	movs	r4, #128	; 0x80
    1b78:	e008      	b.n	1b8c <eink_send_raw_byte+0x2c>
    1b7a:	6196      	str	r6, [r2, #24]
    1b7c:	6194      	str	r4, [r2, #24]
        send_byte=send_byte << 1;
    1b7e:	0040      	lsls	r0, r0, #1
    1b80:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b82:	6154      	str	r4, [r2, #20]
    1b84:	3b01      	subs	r3, #1
    1b86:	b2db      	uxtb	r3, r3
    for (i=0;i<8;i++) {
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d004      	beq.n	1b96 <eink_send_raw_byte+0x36>
        if (send_byte & 0x80) {
    1b8c:	b245      	sxtb	r5, r0
    1b8e:	2d00      	cmp	r5, #0
    1b90:	dbf3      	blt.n	1b7a <eink_send_raw_byte+0x1a>
    1b92:	6156      	str	r6, [r2, #20]
    1b94:	e7f2      	b.n	1b7c <eink_send_raw_byte+0x1c>
    if(!f_send)
    1b96:	2900      	cmp	r1, #0
    1b98:	d103      	bne.n	1ba2 <eink_send_raw_byte+0x42>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b9a:	2220      	movs	r2, #32
    1b9c:	23c0      	movs	r3, #192	; 0xc0
    1b9e:	05db      	lsls	r3, r3, #23
    1ba0:	619a      	str	r2, [r3, #24]
}
    1ba2:	bd70      	pop	{r4, r5, r6, pc}

00001ba4 <eink_write_data>:
{    
    1ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ba6:	000c      	movs	r4, r1
    1ba8:	0015      	movs	r5, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1baa:	26c0      	movs	r6, #192	; 0xc0
    1bac:	05f6      	lsls	r6, r6, #23
    1bae:	2701      	movs	r7, #1
    1bb0:	2394      	movs	r3, #148	; 0x94
    1bb2:	50f7      	str	r7, [r6, r3]
    1bb4:	3b74      	subs	r3, #116	; 0x74
    1bb6:	6173      	str	r3, [r6, #20]
    eink_send_raw_byte(command, f_send);
    1bb8:	2100      	movs	r1, #0
    1bba:	4b07      	ldr	r3, [pc, #28]	; (1bd8 <eink_write_data+0x34>)
    1bbc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bbe:	2398      	movs	r3, #152	; 0x98
    1bc0:	50f7      	str	r7, [r6, r3]
    if (data_bytes != 0) {
    1bc2:	2d00      	cmp	r5, #0
    1bc4:	d007      	beq.n	1bd6 <eink_write_data+0x32>
    1bc6:	1965      	adds	r5, r4, r5
            eink_send_raw_byte(*data, f_send);
    1bc8:	4e03      	ldr	r6, [pc, #12]	; (1bd8 <eink_write_data+0x34>)
    1bca:	7820      	ldrb	r0, [r4, #0]
    1bcc:	2100      	movs	r1, #0
    1bce:	47b0      	blx	r6
            data++;
    1bd0:	3401      	adds	r4, #1
        for (i=0;i<data_bytes;i++) {
    1bd2:	42a5      	cmp	r5, r4
    1bd4:	d1f9      	bne.n	1bca <eink_write_data+0x26>
}
    1bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bd8:	00001b61 	.word	0x00001b61

00001bdc <eink_ed013tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed013tc1_refresh_display_buffer(void)
{
    1bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bde:	b087      	sub	sp, #28
    uint8_t eink_data[7];
    
    /* Enable power to the display */   
    eink_write_data(UC8173_PON, 0, 0);
    1be0:	2200      	movs	r2, #0
    1be2:	2100      	movs	r1, #0
    1be4:	2004      	movs	r0, #4
    1be6:	4b31      	ldr	r3, [pc, #196]	; (1cac <eink_ed013tc1_refresh_display_buffer+0xd0>)
    1be8:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1bea:	4f31      	ldr	r7, [pc, #196]	; (1cb0 <eink_ed013tc1_refresh_display_buffer+0xd4>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    1bec:	4e31      	ldr	r6, [pc, #196]	; (1cb4 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    1bee:	a801      	add	r0, sp, #4
    1bf0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1bf2:	23c0      	movs	r3, #192	; 0xc0
    1bf4:	05db      	lsls	r3, r3, #23
    1bf6:	2580      	movs	r5, #128	; 0x80
    1bf8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1bfa:	22a0      	movs	r2, #160	; 0xa0
    1bfc:	492e      	ldr	r1, [pc, #184]	; (1cb8 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    1bfe:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c00:	2190      	movs	r1, #144	; 0x90
    1c02:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c04:	4053      	eors	r3, r2
    1c06:	401c      	ands	r4, r3
    1c08:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c0a:	a801      	add	r0, sp, #4
    1c0c:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8173_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1c0e:	4225      	tst	r5, r4
    1c10:	d0ed      	beq.n	1bee <eink_ed013tc1_refresh_display_buffer+0x12>
    //eink_read_data(UC8173_TSC, LUT_idx, 2);
    //uc8173_wait_for_busy_low();

    //volatile uint16_t LUT_temperature = (LUT_idx[0] << 8) | LUT_idx[1];

	eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    1c12:	2220      	movs	r2, #32
    1c14:	2155      	movs	r1, #85	; 0x55
    1c16:	2020      	movs	r0, #32
    1c18:	4c24      	ldr	r4, [pc, #144]	; (1cac <eink_ed013tc1_refresh_display_buffer+0xd0>)
    1c1a:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    1c1c:	2280      	movs	r2, #128	; 0x80
    1c1e:	0092      	lsls	r2, r2, #2
    1c20:	2181      	movs	r1, #129	; 0x81
    1c22:	2022      	movs	r0, #34	; 0x22
    1c24:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);
    1c26:	2280      	movs	r2, #128	; 0x80
    1c28:	2100      	movs	r1, #0
    1c2a:	2026      	movs	r0, #38	; 0x26
    1c2c:	47a0      	blx	r4
    uc8173_wait_for_busy_low();
    
    uc8173_send_gu2_lut();
	
    /* Display Refresh */
    eink_data[0] = 0x01; /* GU2 Update Mode */
    1c2e:	a904      	add	r1, sp, #16
    1c30:	2301      	movs	r3, #1
    1c32:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1c34:	2300      	movs	r3, #0
    1c36:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1c38:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1c3a:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    1c3c:	227f      	movs	r2, #127	; 0x7f
    1c3e:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1c40:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    1c42:	33ff      	adds	r3, #255	; 0xff
    1c44:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1c46:	3a78      	subs	r2, #120	; 0x78
    1c48:	2012      	movs	r0, #18
    1c4a:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1c4c:	4f18      	ldr	r7, [pc, #96]	; (1cb0 <eink_ed013tc1_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    1c4e:	4e19      	ldr	r6, [pc, #100]	; (1cb4 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    1c50:	a802      	add	r0, sp, #8
    1c52:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c54:	23c0      	movs	r3, #192	; 0xc0
    1c56:	05db      	lsls	r3, r3, #23
    1c58:	2580      	movs	r5, #128	; 0x80
    1c5a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c5c:	22a0      	movs	r2, #160	; 0xa0
    1c5e:	4916      	ldr	r1, [pc, #88]	; (1cb8 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    1c60:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c62:	2190      	movs	r1, #144	; 0x90
    1c64:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c66:	4053      	eors	r3, r2
    1c68:	401c      	ands	r4, r3
    1c6a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c6c:	a802      	add	r0, sp, #8
    1c6e:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1c70:	4225      	tst	r5, r4
    1c72:	d0ed      	beq.n	1c50 <eink_ed013tc1_refresh_display_buffer+0x74>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    eink_write_data(UC8173_POF, 0, 0);
    1c74:	2200      	movs	r2, #0
    1c76:	2100      	movs	r1, #0
    1c78:	2002      	movs	r0, #2
    1c7a:	4b0c      	ldr	r3, [pc, #48]	; (1cac <eink_ed013tc1_refresh_display_buffer+0xd0>)
    1c7c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1c7e:	4f0c      	ldr	r7, [pc, #48]	; (1cb0 <eink_ed013tc1_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    1c80:	4e0c      	ldr	r6, [pc, #48]	; (1cb4 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    1c82:	a803      	add	r0, sp, #12
    1c84:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c86:	23c0      	movs	r3, #192	; 0xc0
    1c88:	05db      	lsls	r3, r3, #23
    1c8a:	2580      	movs	r5, #128	; 0x80
    1c8c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c8e:	22a0      	movs	r2, #160	; 0xa0
    1c90:	4909      	ldr	r1, [pc, #36]	; (1cb8 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    1c92:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c94:	2190      	movs	r1, #144	; 0x90
    1c96:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c98:	4053      	eors	r3, r2
    1c9a:	401c      	ands	r4, r3
    1c9c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c9e:	a803      	add	r0, sp, #12
    1ca0:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    1ca2:	4225      	tst	r5, r4
    1ca4:	d1ed      	bne.n	1c82 <eink_ed013tc1_refresh_display_buffer+0xa6>
    uc8173_wait_for_busy_high();
}
    1ca6:	b007      	add	sp, #28
    1ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	00001ba5 	.word	0x00001ba5
    1cb0:	0000034d 	.word	0x0000034d
    1cb4:	0000035b 	.word	0x0000035b
    1cb8:	41004400 	.word	0x41004400

00001cbc <eink_ed029tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed029tc1_refresh_display_buffer(void)
{
    1cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cbe:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1cc0:	2200      	movs	r2, #0
    1cc2:	2100      	movs	r1, #0
    1cc4:	2004      	movs	r0, #4
    1cc6:	4c1a      	ldr	r4, [pc, #104]	; (1d30 <eink_ed029tc1_refresh_display_buffer+0x74>)
    1cc8:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    1cca:	2200      	movs	r2, #0
    1ccc:	2100      	movs	r1, #0
    1cce:	2012      	movs	r0, #18
    1cd0:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1cd2:	4f18      	ldr	r7, [pc, #96]	; (1d34 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1cd4:	4e18      	ldr	r6, [pc, #96]	; (1d38 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1cd6:	4668      	mov	r0, sp
    1cd8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1cda:	23c0      	movs	r3, #192	; 0xc0
    1cdc:	05db      	lsls	r3, r3, #23
    1cde:	2580      	movs	r5, #128	; 0x80
    1ce0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1ce2:	22a0      	movs	r2, #160	; 0xa0
    1ce4:	4915      	ldr	r1, [pc, #84]	; (1d3c <eink_ed029tc1_refresh_display_buffer+0x80>)
    1ce6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ce8:	2190      	movs	r1, #144	; 0x90
    1cea:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1cec:	4053      	eors	r3, r2
    1cee:	401c      	ands	r4, r3
    1cf0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1cf2:	4668      	mov	r0, sp
    1cf4:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8151_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1cf6:	4225      	tst	r5, r4
    1cf8:	d0ed      	beq.n	1cd6 <eink_ed029tc1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    1cfa:	2200      	movs	r2, #0
    1cfc:	2100      	movs	r1, #0
    1cfe:	2002      	movs	r0, #2
    1d00:	4b0b      	ldr	r3, [pc, #44]	; (1d30 <eink_ed029tc1_refresh_display_buffer+0x74>)
    1d02:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1d04:	4f0b      	ldr	r7, [pc, #44]	; (1d34 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1d06:	4e0c      	ldr	r6, [pc, #48]	; (1d38 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1d08:	a801      	add	r0, sp, #4
    1d0a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d0c:	23c0      	movs	r3, #192	; 0xc0
    1d0e:	05db      	lsls	r3, r3, #23
    1d10:	2580      	movs	r5, #128	; 0x80
    1d12:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d14:	22a0      	movs	r2, #160	; 0xa0
    1d16:	4909      	ldr	r1, [pc, #36]	; (1d3c <eink_ed029tc1_refresh_display_buffer+0x80>)
    1d18:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d1a:	2190      	movs	r1, #144	; 0x90
    1d1c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d1e:	4053      	eors	r3, r2
    1d20:	401c      	ands	r4, r3
    1d22:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d24:	a801      	add	r0, sp, #4
    1d26:	47b0      	blx	r6
    1d28:	4225      	tst	r5, r4
    1d2a:	d0ed      	beq.n	1d08 <eink_ed029tc1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    1d2c:	b003      	add	sp, #12
    1d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d30:	00001ba5 	.word	0x00001ba5
    1d34:	0000034d 	.word	0x0000034d
    1d38:	0000035b 	.word	0x0000035b
    1d3c:	41004400 	.word	0x41004400

00001d40 <eink_ed029tc1_put_display_buffer>:
{
    1d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d42:	46c6      	mov	lr, r8
    1d44:	b500      	push	{lr}
    1d46:	b084      	sub	sp, #16
    1d48:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    1d4a:	2200      	movs	r2, #0
    1d4c:	2100      	movs	r1, #0
    1d4e:	2004      	movs	r0, #4
    1d50:	4c44      	ldr	r4, [pc, #272]	; (1e64 <eink_ed029tc1_put_display_buffer+0x124>)
    1d52:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1d54:	4b44      	ldr	r3, [pc, #272]	; (1e68 <eink_ed029tc1_put_display_buffer+0x128>)
    1d56:	681b      	ldr	r3, [r3, #0]
    1d58:	6919      	ldr	r1, [r3, #16]
    1d5a:	2294      	movs	r2, #148	; 0x94
    1d5c:	0152      	lsls	r2, r2, #5
    1d5e:	2010      	movs	r0, #16
    1d60:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1d62:	2200      	movs	r2, #0
    1d64:	2100      	movs	r1, #0
    1d66:	2011      	movs	r0, #17
    1d68:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1d6a:	4d40      	ldr	r5, [pc, #256]	; (1e6c <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1d6c:	4f40      	ldr	r7, [pc, #256]	; (1e70 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1d6e:	4668      	mov	r0, sp
    1d70:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d72:	23c0      	movs	r3, #192	; 0xc0
    1d74:	05db      	lsls	r3, r3, #23
    1d76:	2680      	movs	r6, #128	; 0x80
    1d78:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d7a:	22a0      	movs	r2, #160	; 0xa0
    1d7c:	493d      	ldr	r1, [pc, #244]	; (1e74 <eink_ed029tc1_put_display_buffer+0x134>)
    1d7e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d80:	2190      	movs	r1, #144	; 0x90
    1d82:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d84:	4053      	eors	r3, r2
    1d86:	401c      	ands	r4, r3
    1d88:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d8a:	4668      	mov	r0, sp
    1d8c:	47b8      	blx	r7
    1d8e:	4226      	tst	r6, r4
    1d90:	d0ed      	beq.n	1d6e <eink_ed029tc1_put_display_buffer+0x2e>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1d92:	4b35      	ldr	r3, [pc, #212]	; (1e68 <eink_ed029tc1_put_display_buffer+0x128>)
    1d94:	681b      	ldr	r3, [r3, #0]
    1d96:	6959      	ldr	r1, [r3, #20]
    1d98:	2294      	movs	r2, #148	; 0x94
    1d9a:	0152      	lsls	r2, r2, #5
    1d9c:	2013      	movs	r0, #19
    1d9e:	4c31      	ldr	r4, [pc, #196]	; (1e64 <eink_ed029tc1_put_display_buffer+0x124>)
    1da0:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1da2:	2200      	movs	r2, #0
    1da4:	2100      	movs	r1, #0
    1da6:	2011      	movs	r0, #17
    1da8:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1daa:	4d30      	ldr	r5, [pc, #192]	; (1e6c <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1dac:	4f30      	ldr	r7, [pc, #192]	; (1e70 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1dae:	a801      	add	r0, sp, #4
    1db0:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1db2:	23c0      	movs	r3, #192	; 0xc0
    1db4:	05db      	lsls	r3, r3, #23
    1db6:	2680      	movs	r6, #128	; 0x80
    1db8:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1dba:	22a0      	movs	r2, #160	; 0xa0
    1dbc:	492d      	ldr	r1, [pc, #180]	; (1e74 <eink_ed029tc1_put_display_buffer+0x134>)
    1dbe:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1dc0:	2190      	movs	r1, #144	; 0x90
    1dc2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1dc4:	4053      	eors	r3, r2
    1dc6:	401c      	ands	r4, r3
    1dc8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1dca:	a801      	add	r0, sp, #4
    1dcc:	47b8      	blx	r7
    1dce:	4226      	tst	r6, r4
    1dd0:	d0ed      	beq.n	1dae <eink_ed029tc1_put_display_buffer+0x6e>
    if(refresh_display) {
    1dd2:	4643      	mov	r3, r8
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d12b      	bne.n	1e30 <eink_ed029tc1_put_display_buffer+0xf0>
    eink_write_data(UC8151_POF, 0, 0);
    1dd8:	2200      	movs	r2, #0
    1dda:	2100      	movs	r1, #0
    1ddc:	2002      	movs	r0, #2
    1dde:	4b21      	ldr	r3, [pc, #132]	; (1e64 <eink_ed029tc1_put_display_buffer+0x124>)
    1de0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1de2:	4f22      	ldr	r7, [pc, #136]	; (1e6c <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1de4:	4e22      	ldr	r6, [pc, #136]	; (1e70 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1de6:	a803      	add	r0, sp, #12
    1de8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1dea:	23c0      	movs	r3, #192	; 0xc0
    1dec:	05db      	lsls	r3, r3, #23
    1dee:	2580      	movs	r5, #128	; 0x80
    1df0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1df2:	22a0      	movs	r2, #160	; 0xa0
    1df4:	491f      	ldr	r1, [pc, #124]	; (1e74 <eink_ed029tc1_put_display_buffer+0x134>)
    1df6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1df8:	2190      	movs	r1, #144	; 0x90
    1dfa:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1dfc:	4053      	eors	r3, r2
    1dfe:	401c      	ands	r4, r3
    1e00:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e02:	a803      	add	r0, sp, #12
    1e04:	47b0      	blx	r6
    1e06:	4225      	tst	r5, r4
    1e08:	d0ed      	beq.n	1de6 <eink_ed029tc1_put_display_buffer+0xa6>
    if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    1e0a:	4b1b      	ldr	r3, [pc, #108]	; (1e78 <eink_ed029tc1_put_display_buffer+0x138>)
    1e0c:	789b      	ldrb	r3, [r3, #2]
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d10a      	bne.n	1e28 <eink_ed029tc1_put_display_buffer+0xe8>
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1e12:	4c15      	ldr	r4, [pc, #84]	; (1e68 <eink_ed029tc1_put_display_buffer+0x128>)
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1e14:	2094      	movs	r0, #148	; 0x94
    1e16:	0140      	lsls	r0, r0, #5
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1e18:	6822      	ldr	r2, [r4, #0]
    1e1a:	6951      	ldr	r1, [r2, #20]
    1e1c:	5cc9      	ldrb	r1, [r1, r3]
    1e1e:	6912      	ldr	r2, [r2, #16]
    1e20:	54d1      	strb	r1, [r2, r3]
    1e22:	3301      	adds	r3, #1
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1e24:	4283      	cmp	r3, r0
    1e26:	d1f7      	bne.n	1e18 <eink_ed029tc1_put_display_buffer+0xd8>
}
    1e28:	b004      	add	sp, #16
    1e2a:	bc04      	pop	{r2}
    1e2c:	4690      	mov	r8, r2
    1e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    1e30:	2200      	movs	r2, #0
    1e32:	2100      	movs	r1, #0
    1e34:	2012      	movs	r0, #18
    1e36:	4b0b      	ldr	r3, [pc, #44]	; (1e64 <eink_ed029tc1_put_display_buffer+0x124>)
    1e38:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1e3a:	4f0c      	ldr	r7, [pc, #48]	; (1e6c <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1e3c:	4e0c      	ldr	r6, [pc, #48]	; (1e70 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1e3e:	a802      	add	r0, sp, #8
    1e40:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e42:	23c0      	movs	r3, #192	; 0xc0
    1e44:	05db      	lsls	r3, r3, #23
    1e46:	2580      	movs	r5, #128	; 0x80
    1e48:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e4a:	22a0      	movs	r2, #160	; 0xa0
    1e4c:	4909      	ldr	r1, [pc, #36]	; (1e74 <eink_ed029tc1_put_display_buffer+0x134>)
    1e4e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e50:	2190      	movs	r1, #144	; 0x90
    1e52:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e54:	4053      	eors	r3, r2
    1e56:	401c      	ands	r4, r3
    1e58:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e5a:	a802      	add	r0, sp, #8
    1e5c:	47b0      	blx	r6
    1e5e:	4225      	tst	r5, r4
    1e60:	d0ed      	beq.n	1e3e <eink_ed029tc1_put_display_buffer+0xfe>
    1e62:	e7b9      	b.n	1dd8 <eink_ed029tc1_put_display_buffer+0x98>
    1e64:	00001ba5 	.word	0x00001ba5
    1e68:	20000424 	.word	0x20000424
    1e6c:	0000034d 	.word	0x0000034d
    1e70:	0000035b 	.word	0x0000035b
    1e74:	41004400 	.word	0x41004400
    1e78:	200003ec 	.word	0x200003ec

00001e7c <eink_el026tr1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_el026tr1_refresh_display_buffer(void)
{
    1e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e7e:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1e80:	2200      	movs	r2, #0
    1e82:	2100      	movs	r1, #0
    1e84:	2004      	movs	r0, #4
    1e86:	4c1a      	ldr	r4, [pc, #104]	; (1ef0 <eink_el026tr1_refresh_display_buffer+0x74>)
    1e88:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    1e8a:	2200      	movs	r2, #0
    1e8c:	2100      	movs	r1, #0
    1e8e:	2012      	movs	r0, #18
    1e90:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1e92:	4f18      	ldr	r7, [pc, #96]	; (1ef4 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1e94:	4e18      	ldr	r6, [pc, #96]	; (1ef8 <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1e96:	4668      	mov	r0, sp
    1e98:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e9a:	23c0      	movs	r3, #192	; 0xc0
    1e9c:	05db      	lsls	r3, r3, #23
    1e9e:	2580      	movs	r5, #128	; 0x80
    1ea0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1ea2:	22a0      	movs	r2, #160	; 0xa0
    1ea4:	4915      	ldr	r1, [pc, #84]	; (1efc <eink_el026tr1_refresh_display_buffer+0x80>)
    1ea6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ea8:	2190      	movs	r1, #144	; 0x90
    1eaa:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1eac:	4053      	eors	r3, r2
    1eae:	401c      	ands	r4, r3
    1eb0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1eb2:	4668      	mov	r0, sp
    1eb4:	47b0      	blx	r6
    1eb6:	4225      	tst	r5, r4
    1eb8:	d0ed      	beq.n	1e96 <eink_el026tr1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    1eba:	2200      	movs	r2, #0
    1ebc:	2100      	movs	r1, #0
    1ebe:	2002      	movs	r0, #2
    1ec0:	4b0b      	ldr	r3, [pc, #44]	; (1ef0 <eink_el026tr1_refresh_display_buffer+0x74>)
    1ec2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1ec4:	4f0b      	ldr	r7, [pc, #44]	; (1ef4 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1ec6:	4e0c      	ldr	r6, [pc, #48]	; (1ef8 <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1ec8:	a801      	add	r0, sp, #4
    1eca:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1ecc:	23c0      	movs	r3, #192	; 0xc0
    1ece:	05db      	lsls	r3, r3, #23
    1ed0:	2580      	movs	r5, #128	; 0x80
    1ed2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1ed4:	22a0      	movs	r2, #160	; 0xa0
    1ed6:	4909      	ldr	r1, [pc, #36]	; (1efc <eink_el026tr1_refresh_display_buffer+0x80>)
    1ed8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1eda:	2190      	movs	r1, #144	; 0x90
    1edc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ede:	4053      	eors	r3, r2
    1ee0:	401c      	ands	r4, r3
    1ee2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ee4:	a801      	add	r0, sp, #4
    1ee6:	47b0      	blx	r6
    1ee8:	4225      	tst	r5, r4
    1eea:	d0ed      	beq.n	1ec8 <eink_el026tr1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    1eec:	b003      	add	sp, #12
    1eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ef0:	00001ba5 	.word	0x00001ba5
    1ef4:	0000034d 	.word	0x0000034d
    1ef8:	0000035b 	.word	0x0000035b
    1efc:	41004400 	.word	0x41004400

00001f00 <eink_el026tr1_put_display_buffer>:
{
    1f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f02:	46c6      	mov	lr, r8
    1f04:	b500      	push	{lr}
    1f06:	b084      	sub	sp, #16
    1f08:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    1f0a:	2200      	movs	r2, #0
    1f0c:	2100      	movs	r1, #0
    1f0e:	2004      	movs	r0, #4
    1f10:	4c3c      	ldr	r4, [pc, #240]	; (2004 <STACK_SIZE+0x4>)
    1f12:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    1f14:	4b3c      	ldr	r3, [pc, #240]	; (2008 <STACK_SIZE+0x8>)
    1f16:	681b      	ldr	r3, [r3, #0]
    1f18:	6919      	ldr	r1, [r3, #16]
    1f1a:	4a3c      	ldr	r2, [pc, #240]	; (200c <STACK_SIZE+0xc>)
    1f1c:	2010      	movs	r0, #16
    1f1e:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1f20:	2200      	movs	r2, #0
    1f22:	2100      	movs	r1, #0
    1f24:	2011      	movs	r0, #17
    1f26:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1f28:	4d39      	ldr	r5, [pc, #228]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_LEAVE();
    1f2a:	4f3a      	ldr	r7, [pc, #232]	; (2014 <STACK_SIZE+0x14>)
	CRITICAL_SECTION_ENTER();
    1f2c:	4668      	mov	r0, sp
    1f2e:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f30:	23c0      	movs	r3, #192	; 0xc0
    1f32:	05db      	lsls	r3, r3, #23
    1f34:	2680      	movs	r6, #128	; 0x80
    1f36:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f38:	22a0      	movs	r2, #160	; 0xa0
    1f3a:	4937      	ldr	r1, [pc, #220]	; (2018 <STACK_SIZE+0x18>)
    1f3c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f3e:	2190      	movs	r1, #144	; 0x90
    1f40:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f42:	4053      	eors	r3, r2
    1f44:	401c      	ands	r4, r3
    1f46:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f48:	4668      	mov	r0, sp
    1f4a:	47b8      	blx	r7
    1f4c:	4226      	tst	r6, r4
    1f4e:	d0ed      	beq.n	1f2c <eink_el026tr1_put_display_buffer+0x2c>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    1f50:	4b2d      	ldr	r3, [pc, #180]	; (2008 <STACK_SIZE+0x8>)
    1f52:	681b      	ldr	r3, [r3, #0]
    1f54:	6959      	ldr	r1, [r3, #20]
    1f56:	4a2d      	ldr	r2, [pc, #180]	; (200c <STACK_SIZE+0xc>)
    1f58:	2013      	movs	r0, #19
    1f5a:	4c2a      	ldr	r4, [pc, #168]	; (2004 <STACK_SIZE+0x4>)
    1f5c:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1f5e:	2200      	movs	r2, #0
    1f60:	2100      	movs	r1, #0
    1f62:	2011      	movs	r0, #17
    1f64:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1f66:	4d2a      	ldr	r5, [pc, #168]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_LEAVE();
    1f68:	4f2a      	ldr	r7, [pc, #168]	; (2014 <STACK_SIZE+0x14>)
	CRITICAL_SECTION_ENTER();
    1f6a:	a801      	add	r0, sp, #4
    1f6c:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f6e:	23c0      	movs	r3, #192	; 0xc0
    1f70:	05db      	lsls	r3, r3, #23
    1f72:	2680      	movs	r6, #128	; 0x80
    1f74:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f76:	22a0      	movs	r2, #160	; 0xa0
    1f78:	4927      	ldr	r1, [pc, #156]	; (2018 <STACK_SIZE+0x18>)
    1f7a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f7c:	2190      	movs	r1, #144	; 0x90
    1f7e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f80:	4053      	eors	r3, r2
    1f82:	401c      	ands	r4, r3
    1f84:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f86:	a801      	add	r0, sp, #4
    1f88:	47b8      	blx	r7
    1f8a:	4226      	tst	r6, r4
    1f8c:	d0ed      	beq.n	1f6a <eink_el026tr1_put_display_buffer+0x6a>
    if(refresh_display) {
    1f8e:	4643      	mov	r3, r8
    1f90:	2b00      	cmp	r3, #0
    1f92:	d11c      	bne.n	1fce <eink_el026tr1_put_display_buffer+0xce>
    eink_write_data(UC8151_POF, 0, 0);
    1f94:	2200      	movs	r2, #0
    1f96:	2100      	movs	r1, #0
    1f98:	2002      	movs	r0, #2
    1f9a:	4b1a      	ldr	r3, [pc, #104]	; (2004 <STACK_SIZE+0x4>)
    1f9c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1f9e:	4f1c      	ldr	r7, [pc, #112]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_LEAVE();
    1fa0:	4e1c      	ldr	r6, [pc, #112]	; (2014 <STACK_SIZE+0x14>)
	CRITICAL_SECTION_ENTER();
    1fa2:	a803      	add	r0, sp, #12
    1fa4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1fa6:	23c0      	movs	r3, #192	; 0xc0
    1fa8:	05db      	lsls	r3, r3, #23
    1faa:	2580      	movs	r5, #128	; 0x80
    1fac:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fae:	22a0      	movs	r2, #160	; 0xa0
    1fb0:	4919      	ldr	r1, [pc, #100]	; (2018 <STACK_SIZE+0x18>)
    1fb2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fb4:	2190      	movs	r1, #144	; 0x90
    1fb6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fb8:	4053      	eors	r3, r2
    1fba:	401c      	ands	r4, r3
    1fbc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1fbe:	a803      	add	r0, sp, #12
    1fc0:	47b0      	blx	r6
    1fc2:	4225      	tst	r5, r4
    1fc4:	d0ed      	beq.n	1fa2 <eink_el026tr1_put_display_buffer+0xa2>
}
    1fc6:	b004      	add	sp, #16
    1fc8:	bc04      	pop	{r2}
    1fca:	4690      	mov	r8, r2
    1fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    1fce:	2200      	movs	r2, #0
    1fd0:	2100      	movs	r1, #0
    1fd2:	2012      	movs	r0, #18
    1fd4:	4b0b      	ldr	r3, [pc, #44]	; (2004 <STACK_SIZE+0x4>)
    1fd6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1fd8:	4f0d      	ldr	r7, [pc, #52]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_LEAVE();
    1fda:	4e0e      	ldr	r6, [pc, #56]	; (2014 <STACK_SIZE+0x14>)
	CRITICAL_SECTION_ENTER();
    1fdc:	a802      	add	r0, sp, #8
    1fde:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1fe0:	23c0      	movs	r3, #192	; 0xc0
    1fe2:	05db      	lsls	r3, r3, #23
    1fe4:	2580      	movs	r5, #128	; 0x80
    1fe6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fe8:	22a0      	movs	r2, #160	; 0xa0
    1fea:	490b      	ldr	r1, [pc, #44]	; (2018 <STACK_SIZE+0x18>)
    1fec:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fee:	2190      	movs	r1, #144	; 0x90
    1ff0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ff2:	4053      	eors	r3, r2
    1ff4:	401c      	ands	r4, r3
    1ff6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ff8:	a802      	add	r0, sp, #8
    1ffa:	47b0      	blx	r6
    1ffc:	4225      	tst	r5, r4
    1ffe:	d0ed      	beq.n	1fdc <eink_el026tr1_put_display_buffer+0xdc>
    2000:	e7c8      	b.n	1f94 <eink_el026tr1_put_display_buffer+0x94>
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	00001ba5 	.word	0x00001ba5
    2008:	20000424 	.word	0x20000424
    200c:	000015f8 	.word	0x000015f8
    2010:	0000034d 	.word	0x0000034d
    2014:	0000035b 	.word	0x0000035b
    2018:	41004400 	.word	0x41004400

0000201c <eink_hink_e0154a05_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_hink_e0154a05_refresh_display_buffer(void)
{
    201c:	b5f0      	push	{r4, r5, r6, r7, lr}
    201e:	b085      	sub	sp, #20
    uint8_t eink_data[1];
    uint8_t temperature_value = 20;
    
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    2020:	4b23      	ldr	r3, [pc, #140]	; (20b0 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    2022:	785b      	ldrb	r3, [r3, #1]
    2024:	2b01      	cmp	r3, #1
    2026:	d036      	beq.n	2096 <eink_hink_e0154a05_refresh_display_buffer+0x7a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
        else
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
        
    } else {
        eink_data[0] = 0xF7; /* Slow Update */
    2028:	22f7      	movs	r2, #247	; 0xf7
    202a:	ab03      	add	r3, sp, #12
    202c:	701a      	strb	r2, [r3, #0]
    }

    /* Display Update Control 2 */
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    202e:	2201      	movs	r2, #1
    2030:	a903      	add	r1, sp, #12
    2032:	2022      	movs	r0, #34	; 0x22
    2034:	4b1f      	ldr	r3, [pc, #124]	; (20b4 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    2036:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2038:	4f1f      	ldr	r7, [pc, #124]	; (20b8 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    203a:	4e20      	ldr	r6, [pc, #128]	; (20bc <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    203c:	a801      	add	r0, sp, #4
    203e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2040:	23c0      	movs	r3, #192	; 0xc0
    2042:	05db      	lsls	r3, r3, #23
    2044:	2580      	movs	r5, #128	; 0x80
    2046:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2048:	22a0      	movs	r2, #160	; 0xa0
    204a:	491d      	ldr	r1, [pc, #116]	; (20c0 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    204c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    204e:	2190      	movs	r1, #144	; 0x90
    2050:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2052:	4053      	eors	r3, r2
    2054:	401c      	ands	r4, r3
    2056:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2058:	a801      	add	r0, sp, #4
    205a:	47b0      	blx	r6
 * hold the MCU until it returns LOW again.
 */
static inline void ssd1608_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(gpio_get_pin_level(EINK_BUSY));
    205c:	4225      	tst	r5, r4
    205e:	d1ed      	bne.n	203c <eink_hink_e0154a05_refresh_display_buffer+0x20>
    ssd1608_wait_for_busy();
    
    /* Master Activation */
    eink_write_data(SSD1608_MA, 0, 0);
    2060:	2200      	movs	r2, #0
    2062:	2100      	movs	r1, #0
    2064:	2020      	movs	r0, #32
    2066:	4b13      	ldr	r3, [pc, #76]	; (20b4 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    2068:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    206a:	4f13      	ldr	r7, [pc, #76]	; (20b8 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    206c:	4e13      	ldr	r6, [pc, #76]	; (20bc <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    206e:	a802      	add	r0, sp, #8
    2070:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2072:	23c0      	movs	r3, #192	; 0xc0
    2074:	05db      	lsls	r3, r3, #23
    2076:	2580      	movs	r5, #128	; 0x80
    2078:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    207a:	22a0      	movs	r2, #160	; 0xa0
    207c:	4910      	ldr	r1, [pc, #64]	; (20c0 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    207e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2080:	2190      	movs	r1, #144	; 0x90
    2082:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2084:	4053      	eors	r3, r2
    2086:	401c      	ands	r4, r3
    2088:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    208a:	a802      	add	r0, sp, #8
    208c:	47b0      	blx	r6
    208e:	4225      	tst	r5, r4
    2090:	d1ed      	bne.n	206e <eink_hink_e0154a05_refresh_display_buffer+0x52>
    ssd1608_wait_for_busy();
}
    2092:	b005      	add	sp, #20
    2094:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2096:	4b06      	ldr	r3, [pc, #24]	; (20b0 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    2098:	789b      	ldrb	r3, [r3, #2]
    209a:	2b00      	cmp	r3, #0
    209c:	d103      	bne.n	20a6 <eink_hink_e0154a05_refresh_display_buffer+0x8a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    209e:	22c7      	movs	r2, #199	; 0xc7
    20a0:	ab03      	add	r3, sp, #12
    20a2:	701a      	strb	r2, [r3, #0]
    20a4:	e7c3      	b.n	202e <eink_hink_e0154a05_refresh_display_buffer+0x12>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    20a6:	22ff      	movs	r2, #255	; 0xff
    20a8:	ab03      	add	r3, sp, #12
    20aa:	701a      	strb	r2, [r3, #0]
    20ac:	e7bf      	b.n	202e <eink_hink_e0154a05_refresh_display_buffer+0x12>
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	200003ac 	.word	0x200003ac
    20b4:	00001ba5 	.word	0x00001ba5
    20b8:	0000034d 	.word	0x0000034d
    20bc:	0000035b 	.word	0x0000035b
    20c0:	41004400 	.word	0x41004400

000020c4 <eink_ac040tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac040tc1_refresh_display_buffer(void)
{
    20c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20c6:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    20c8:	2200      	movs	r2, #0
    20ca:	2100      	movs	r1, #0
    20cc:	2004      	movs	r0, #4
    20ce:	4b25      	ldr	r3, [pc, #148]	; (2164 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    20d0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    20d2:	4f25      	ldr	r7, [pc, #148]	; (2168 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    20d4:	4e25      	ldr	r6, [pc, #148]	; (216c <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    20d6:	a801      	add	r0, sp, #4
    20d8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20da:	23c0      	movs	r3, #192	; 0xc0
    20dc:	05db      	lsls	r3, r3, #23
    20de:	2580      	movs	r5, #128	; 0x80
    20e0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20e2:	22a0      	movs	r2, #160	; 0xa0
    20e4:	4922      	ldr	r1, [pc, #136]	; (2170 <eink_ac040tc1_refresh_display_buffer+0xac>)
    20e6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20e8:	2190      	movs	r1, #144	; 0x90
    20ea:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    20ec:	4053      	eors	r3, r2
    20ee:	401c      	ands	r4, r3
    20f0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    20f2:	a801      	add	r0, sp, #4
    20f4:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8159_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    20f6:	4225      	tst	r5, r4
    20f8:	d0ed      	beq.n	20d6 <eink_ac040tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    20fa:	2200      	movs	r2, #0
    20fc:	2100      	movs	r1, #0
    20fe:	2012      	movs	r0, #18
    2100:	4b18      	ldr	r3, [pc, #96]	; (2164 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    2102:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2104:	4f18      	ldr	r7, [pc, #96]	; (2168 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2106:	4e19      	ldr	r6, [pc, #100]	; (216c <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2108:	a802      	add	r0, sp, #8
    210a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    210c:	23c0      	movs	r3, #192	; 0xc0
    210e:	05db      	lsls	r3, r3, #23
    2110:	2580      	movs	r5, #128	; 0x80
    2112:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2114:	22a0      	movs	r2, #160	; 0xa0
    2116:	4916      	ldr	r1, [pc, #88]	; (2170 <eink_ac040tc1_refresh_display_buffer+0xac>)
    2118:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    211a:	2190      	movs	r1, #144	; 0x90
    211c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    211e:	4053      	eors	r3, r2
    2120:	401c      	ands	r4, r3
    2122:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2124:	a802      	add	r0, sp, #8
    2126:	47b0      	blx	r6
    2128:	4225      	tst	r5, r4
    212a:	d0ed      	beq.n	2108 <eink_ac040tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    212c:	2200      	movs	r2, #0
    212e:	2100      	movs	r1, #0
    2130:	2002      	movs	r0, #2
    2132:	4b0c      	ldr	r3, [pc, #48]	; (2164 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    2134:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2136:	4f0c      	ldr	r7, [pc, #48]	; (2168 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2138:	4e0c      	ldr	r6, [pc, #48]	; (216c <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    213a:	a803      	add	r0, sp, #12
    213c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    213e:	23c0      	movs	r3, #192	; 0xc0
    2140:	05db      	lsls	r3, r3, #23
    2142:	2580      	movs	r5, #128	; 0x80
    2144:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2146:	22a0      	movs	r2, #160	; 0xa0
    2148:	4909      	ldr	r1, [pc, #36]	; (2170 <eink_ac040tc1_refresh_display_buffer+0xac>)
    214a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    214c:	2190      	movs	r1, #144	; 0x90
    214e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2150:	4053      	eors	r3, r2
    2152:	401c      	ands	r4, r3
    2154:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2156:	a803      	add	r0, sp, #12
    2158:	47b0      	blx	r6
    215a:	4225      	tst	r5, r4
    215c:	d0ed      	beq.n	213a <eink_ac040tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    215e:	b005      	add	sp, #20
    2160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	00001ba5 	.word	0x00001ba5
    2168:	0000034d 	.word	0x0000034d
    216c:	0000035b 	.word	0x0000035b
    2170:	41004400 	.word	0x41004400

00002174 <eink_ac040tc1_put_display_buffer>:
{
    2174:	b5f0      	push	{r4, r5, r6, r7, lr}
    2176:	46c6      	mov	lr, r8
    2178:	b500      	push	{lr}
    217a:	b084      	sub	sp, #16
    217c:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC040TC1_DISPLAY_BUFFER_SIZE);
    217e:	4b37      	ldr	r3, [pc, #220]	; (225c <eink_ac040tc1_put_display_buffer+0xe8>)
    2180:	681b      	ldr	r3, [r3, #0]
    2182:	6919      	ldr	r1, [r3, #16]
    2184:	228c      	movs	r2, #140	; 0x8c
    2186:	0292      	lsls	r2, r2, #10
    2188:	2010      	movs	r0, #16
    218a:	4b35      	ldr	r3, [pc, #212]	; (2260 <eink_ac040tc1_put_display_buffer+0xec>)
    218c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    218e:	4f35      	ldr	r7, [pc, #212]	; (2264 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2190:	4e35      	ldr	r6, [pc, #212]	; (2268 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2192:	4668      	mov	r0, sp
    2194:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2196:	23c0      	movs	r3, #192	; 0xc0
    2198:	05db      	lsls	r3, r3, #23
    219a:	2580      	movs	r5, #128	; 0x80
    219c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    219e:	22a0      	movs	r2, #160	; 0xa0
    21a0:	4932      	ldr	r1, [pc, #200]	; (226c <eink_ac040tc1_put_display_buffer+0xf8>)
    21a2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21a4:	2190      	movs	r1, #144	; 0x90
    21a6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21a8:	4053      	eors	r3, r2
    21aa:	401c      	ands	r4, r3
    21ac:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    21ae:	4668      	mov	r0, sp
    21b0:	47b0      	blx	r6
    21b2:	4225      	tst	r5, r4
    21b4:	d0ed      	beq.n	2192 <eink_ac040tc1_put_display_buffer+0x1e>
    if(refresh_display) {
    21b6:	4643      	mov	r3, r8
    21b8:	2b00      	cmp	r3, #0
    21ba:	d103      	bne.n	21c4 <eink_ac040tc1_put_display_buffer+0x50>
}
    21bc:	b004      	add	sp, #16
    21be:	bc04      	pop	{r2}
    21c0:	4690      	mov	r8, r2
    21c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    21c4:	2200      	movs	r2, #0
    21c6:	2100      	movs	r1, #0
    21c8:	2004      	movs	r0, #4
    21ca:	4b25      	ldr	r3, [pc, #148]	; (2260 <eink_ac040tc1_put_display_buffer+0xec>)
    21cc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    21ce:	4f25      	ldr	r7, [pc, #148]	; (2264 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    21d0:	4e25      	ldr	r6, [pc, #148]	; (2268 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    21d2:	a801      	add	r0, sp, #4
    21d4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    21d6:	23c0      	movs	r3, #192	; 0xc0
    21d8:	05db      	lsls	r3, r3, #23
    21da:	2580      	movs	r5, #128	; 0x80
    21dc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    21de:	22a0      	movs	r2, #160	; 0xa0
    21e0:	4922      	ldr	r1, [pc, #136]	; (226c <eink_ac040tc1_put_display_buffer+0xf8>)
    21e2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21e4:	2190      	movs	r1, #144	; 0x90
    21e6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21e8:	4053      	eors	r3, r2
    21ea:	401c      	ands	r4, r3
    21ec:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    21ee:	a801      	add	r0, sp, #4
    21f0:	47b0      	blx	r6
    21f2:	4225      	tst	r5, r4
    21f4:	d0ed      	beq.n	21d2 <eink_ac040tc1_put_display_buffer+0x5e>
        eink_write_data(UC8159_DRF, 0, 0);
    21f6:	2200      	movs	r2, #0
    21f8:	2100      	movs	r1, #0
    21fa:	2012      	movs	r0, #18
    21fc:	4b18      	ldr	r3, [pc, #96]	; (2260 <eink_ac040tc1_put_display_buffer+0xec>)
    21fe:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2200:	4f18      	ldr	r7, [pc, #96]	; (2264 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2202:	4e19      	ldr	r6, [pc, #100]	; (2268 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2204:	a802      	add	r0, sp, #8
    2206:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2208:	23c0      	movs	r3, #192	; 0xc0
    220a:	05db      	lsls	r3, r3, #23
    220c:	2580      	movs	r5, #128	; 0x80
    220e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2210:	22a0      	movs	r2, #160	; 0xa0
    2212:	4916      	ldr	r1, [pc, #88]	; (226c <eink_ac040tc1_put_display_buffer+0xf8>)
    2214:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2216:	2190      	movs	r1, #144	; 0x90
    2218:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    221a:	4053      	eors	r3, r2
    221c:	401c      	ands	r4, r3
    221e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2220:	a802      	add	r0, sp, #8
    2222:	47b0      	blx	r6
    2224:	4225      	tst	r5, r4
    2226:	d0ed      	beq.n	2204 <eink_ac040tc1_put_display_buffer+0x90>
        eink_write_data(UC8159_POF, 0, 0);
    2228:	2200      	movs	r2, #0
    222a:	2100      	movs	r1, #0
    222c:	2002      	movs	r0, #2
    222e:	4b0c      	ldr	r3, [pc, #48]	; (2260 <eink_ac040tc1_put_display_buffer+0xec>)
    2230:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2232:	4f0c      	ldr	r7, [pc, #48]	; (2264 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2234:	4e0c      	ldr	r6, [pc, #48]	; (2268 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2236:	a803      	add	r0, sp, #12
    2238:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    223a:	23c0      	movs	r3, #192	; 0xc0
    223c:	05db      	lsls	r3, r3, #23
    223e:	2580      	movs	r5, #128	; 0x80
    2240:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2242:	22a0      	movs	r2, #160	; 0xa0
    2244:	4909      	ldr	r1, [pc, #36]	; (226c <eink_ac040tc1_put_display_buffer+0xf8>)
    2246:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2248:	2190      	movs	r1, #144	; 0x90
    224a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    224c:	4053      	eors	r3, r2
    224e:	401c      	ands	r4, r3
    2250:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2252:	a803      	add	r0, sp, #12
    2254:	47b0      	blx	r6
    2256:	4225      	tst	r5, r4
    2258:	d0ed      	beq.n	2236 <eink_ac040tc1_put_display_buffer+0xc2>
    225a:	e7af      	b.n	21bc <eink_ac040tc1_put_display_buffer+0x48>
    225c:	20000424 	.word	0x20000424
    2260:	00001ba5 	.word	0x00001ba5
    2264:	0000034d 	.word	0x0000034d
    2268:	0000035b 	.word	0x0000035b
    226c:	41004400 	.word	0x41004400

00002270 <eink_ac057tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac057tc1_refresh_display_buffer(void)
{
    2270:	b5f0      	push	{r4, r5, r6, r7, lr}
    2272:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2274:	2200      	movs	r2, #0
    2276:	2100      	movs	r1, #0
    2278:	2004      	movs	r0, #4
    227a:	4b25      	ldr	r3, [pc, #148]	; (2310 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    227c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    227e:	4f25      	ldr	r7, [pc, #148]	; (2314 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2280:	4e25      	ldr	r6, [pc, #148]	; (2318 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2282:	a801      	add	r0, sp, #4
    2284:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2286:	23c0      	movs	r3, #192	; 0xc0
    2288:	05db      	lsls	r3, r3, #23
    228a:	2580      	movs	r5, #128	; 0x80
    228c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    228e:	22a0      	movs	r2, #160	; 0xa0
    2290:	4922      	ldr	r1, [pc, #136]	; (231c <eink_ac057tc1_refresh_display_buffer+0xac>)
    2292:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2294:	2190      	movs	r1, #144	; 0x90
    2296:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2298:	4053      	eors	r3, r2
    229a:	401c      	ands	r4, r3
    229c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    229e:	a801      	add	r0, sp, #4
    22a0:	47b0      	blx	r6
    22a2:	4225      	tst	r5, r4
    22a4:	d0ed      	beq.n	2282 <eink_ac057tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    22a6:	2200      	movs	r2, #0
    22a8:	2100      	movs	r1, #0
    22aa:	2012      	movs	r0, #18
    22ac:	4b18      	ldr	r3, [pc, #96]	; (2310 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    22ae:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    22b0:	4f18      	ldr	r7, [pc, #96]	; (2314 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    22b2:	4e19      	ldr	r6, [pc, #100]	; (2318 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    22b4:	a802      	add	r0, sp, #8
    22b6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22b8:	23c0      	movs	r3, #192	; 0xc0
    22ba:	05db      	lsls	r3, r3, #23
    22bc:	2580      	movs	r5, #128	; 0x80
    22be:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22c0:	22a0      	movs	r2, #160	; 0xa0
    22c2:	4916      	ldr	r1, [pc, #88]	; (231c <eink_ac057tc1_refresh_display_buffer+0xac>)
    22c4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22c6:	2190      	movs	r1, #144	; 0x90
    22c8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22ca:	4053      	eors	r3, r2
    22cc:	401c      	ands	r4, r3
    22ce:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22d0:	a802      	add	r0, sp, #8
    22d2:	47b0      	blx	r6
    22d4:	4225      	tst	r5, r4
    22d6:	d0ed      	beq.n	22b4 <eink_ac057tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    22d8:	2200      	movs	r2, #0
    22da:	2100      	movs	r1, #0
    22dc:	2002      	movs	r0, #2
    22de:	4b0c      	ldr	r3, [pc, #48]	; (2310 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    22e0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    22e2:	4f0c      	ldr	r7, [pc, #48]	; (2314 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    22e4:	4e0c      	ldr	r6, [pc, #48]	; (2318 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    22e6:	a803      	add	r0, sp, #12
    22e8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22ea:	23c0      	movs	r3, #192	; 0xc0
    22ec:	05db      	lsls	r3, r3, #23
    22ee:	2580      	movs	r5, #128	; 0x80
    22f0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22f2:	22a0      	movs	r2, #160	; 0xa0
    22f4:	4909      	ldr	r1, [pc, #36]	; (231c <eink_ac057tc1_refresh_display_buffer+0xac>)
    22f6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22f8:	2190      	movs	r1, #144	; 0x90
    22fa:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22fc:	4053      	eors	r3, r2
    22fe:	401c      	ands	r4, r3
    2300:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2302:	a803      	add	r0, sp, #12
    2304:	47b0      	blx	r6
    2306:	4225      	tst	r5, r4
    2308:	d0ed      	beq.n	22e6 <eink_ac057tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    230a:	b005      	add	sp, #20
    230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	00001ba5 	.word	0x00001ba5
    2314:	0000034d 	.word	0x0000034d
    2318:	0000035b 	.word	0x0000035b
    231c:	41004400 	.word	0x41004400

00002320 <eink_ac057tc1_put_display_buffer>:
{
    2320:	b5f0      	push	{r4, r5, r6, r7, lr}
    2322:	46c6      	mov	lr, r8
    2324:	b500      	push	{lr}
    2326:	b084      	sub	sp, #16
    2328:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC057TC1_DISPLAY_BUFFER_SIZE);
    232a:	4b37      	ldr	r3, [pc, #220]	; (2408 <eink_ac057tc1_put_display_buffer+0xe8>)
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	6919      	ldr	r1, [r3, #16]
    2330:	4a36      	ldr	r2, [pc, #216]	; (240c <eink_ac057tc1_put_display_buffer+0xec>)
    2332:	2010      	movs	r0, #16
    2334:	4b36      	ldr	r3, [pc, #216]	; (2410 <eink_ac057tc1_put_display_buffer+0xf0>)
    2336:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2338:	4f36      	ldr	r7, [pc, #216]	; (2414 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    233a:	4e37      	ldr	r6, [pc, #220]	; (2418 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    233c:	4668      	mov	r0, sp
    233e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2340:	23c0      	movs	r3, #192	; 0xc0
    2342:	05db      	lsls	r3, r3, #23
    2344:	2580      	movs	r5, #128	; 0x80
    2346:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2348:	22a0      	movs	r2, #160	; 0xa0
    234a:	4934      	ldr	r1, [pc, #208]	; (241c <eink_ac057tc1_put_display_buffer+0xfc>)
    234c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    234e:	2190      	movs	r1, #144	; 0x90
    2350:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2352:	4053      	eors	r3, r2
    2354:	401c      	ands	r4, r3
    2356:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2358:	4668      	mov	r0, sp
    235a:	47b0      	blx	r6
    235c:	4225      	tst	r5, r4
    235e:	d0ed      	beq.n	233c <eink_ac057tc1_put_display_buffer+0x1c>
    if(refresh_display) {
    2360:	4643      	mov	r3, r8
    2362:	2b00      	cmp	r3, #0
    2364:	d103      	bne.n	236e <eink_ac057tc1_put_display_buffer+0x4e>
}
    2366:	b004      	add	sp, #16
    2368:	bc04      	pop	{r2}
    236a:	4690      	mov	r8, r2
    236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    236e:	2200      	movs	r2, #0
    2370:	2100      	movs	r1, #0
    2372:	2004      	movs	r0, #4
    2374:	4b26      	ldr	r3, [pc, #152]	; (2410 <eink_ac057tc1_put_display_buffer+0xf0>)
    2376:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2378:	4f26      	ldr	r7, [pc, #152]	; (2414 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    237a:	4e27      	ldr	r6, [pc, #156]	; (2418 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    237c:	a801      	add	r0, sp, #4
    237e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2380:	23c0      	movs	r3, #192	; 0xc0
    2382:	05db      	lsls	r3, r3, #23
    2384:	2580      	movs	r5, #128	; 0x80
    2386:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2388:	22a0      	movs	r2, #160	; 0xa0
    238a:	4924      	ldr	r1, [pc, #144]	; (241c <eink_ac057tc1_put_display_buffer+0xfc>)
    238c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    238e:	2190      	movs	r1, #144	; 0x90
    2390:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2392:	4053      	eors	r3, r2
    2394:	401c      	ands	r4, r3
    2396:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2398:	a801      	add	r0, sp, #4
    239a:	47b0      	blx	r6
    239c:	4225      	tst	r5, r4
    239e:	d0ed      	beq.n	237c <eink_ac057tc1_put_display_buffer+0x5c>
        eink_write_data(UC8159_DRF, 0, 0);
    23a0:	2200      	movs	r2, #0
    23a2:	2100      	movs	r1, #0
    23a4:	2012      	movs	r0, #18
    23a6:	4b1a      	ldr	r3, [pc, #104]	; (2410 <eink_ac057tc1_put_display_buffer+0xf0>)
    23a8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23aa:	4f1a      	ldr	r7, [pc, #104]	; (2414 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    23ac:	4e1a      	ldr	r6, [pc, #104]	; (2418 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    23ae:	a802      	add	r0, sp, #8
    23b0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23b2:	23c0      	movs	r3, #192	; 0xc0
    23b4:	05db      	lsls	r3, r3, #23
    23b6:	2580      	movs	r5, #128	; 0x80
    23b8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23ba:	22a0      	movs	r2, #160	; 0xa0
    23bc:	4917      	ldr	r1, [pc, #92]	; (241c <eink_ac057tc1_put_display_buffer+0xfc>)
    23be:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23c0:	2190      	movs	r1, #144	; 0x90
    23c2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23c4:	4053      	eors	r3, r2
    23c6:	401c      	ands	r4, r3
    23c8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23ca:	a802      	add	r0, sp, #8
    23cc:	47b0      	blx	r6
    23ce:	4225      	tst	r5, r4
    23d0:	d0ed      	beq.n	23ae <eink_ac057tc1_put_display_buffer+0x8e>
        eink_write_data(UC8159_POF, 0, 0);
    23d2:	2200      	movs	r2, #0
    23d4:	2100      	movs	r1, #0
    23d6:	2002      	movs	r0, #2
    23d8:	4b0d      	ldr	r3, [pc, #52]	; (2410 <eink_ac057tc1_put_display_buffer+0xf0>)
    23da:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23dc:	4f0d      	ldr	r7, [pc, #52]	; (2414 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    23de:	4e0e      	ldr	r6, [pc, #56]	; (2418 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    23e0:	a803      	add	r0, sp, #12
    23e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23e4:	23c0      	movs	r3, #192	; 0xc0
    23e6:	05db      	lsls	r3, r3, #23
    23e8:	2580      	movs	r5, #128	; 0x80
    23ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23ec:	22a0      	movs	r2, #160	; 0xa0
    23ee:	490b      	ldr	r1, [pc, #44]	; (241c <eink_ac057tc1_put_display_buffer+0xfc>)
    23f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23f2:	2190      	movs	r1, #144	; 0x90
    23f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23f6:	4053      	eors	r3, r2
    23f8:	401c      	ands	r4, r3
    23fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23fc:	a803      	add	r0, sp, #12
    23fe:	47b0      	blx	r6
    2400:	4225      	tst	r5, r4
    2402:	d0ed      	beq.n	23e0 <eink_ac057tc1_put_display_buffer+0xc0>
    2404:	e7af      	b.n	2366 <eink_ac057tc1_put_display_buffer+0x46>
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	20000424 	.word	0x20000424
    240c:	00020d00 	.word	0x00020d00
    2410:	00001ba5 	.word	0x00001ba5
    2414:	0000034d 	.word	0x0000034d
    2418:	0000035b 	.word	0x0000035b
    241c:	41004400 	.word	0x41004400

00002420 <eink_ed057tc2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed057tc2_refresh_display_buffer(void)
{
    2420:	b5f0      	push	{r4, r5, r6, r7, lr}
    2422:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2424:	2200      	movs	r2, #0
    2426:	2100      	movs	r1, #0
    2428:	2004      	movs	r0, #4
    242a:	4c1a      	ldr	r4, [pc, #104]	; (2494 <eink_ed057tc2_refresh_display_buffer+0x74>)
    242c:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    242e:	2200      	movs	r2, #0
    2430:	2100      	movs	r1, #0
    2432:	2012      	movs	r0, #18
    2434:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2436:	4f18      	ldr	r7, [pc, #96]	; (2498 <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2438:	4e18      	ldr	r6, [pc, #96]	; (249c <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    243a:	4668      	mov	r0, sp
    243c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    243e:	23c0      	movs	r3, #192	; 0xc0
    2440:	05db      	lsls	r3, r3, #23
    2442:	2580      	movs	r5, #128	; 0x80
    2444:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2446:	22a0      	movs	r2, #160	; 0xa0
    2448:	4915      	ldr	r1, [pc, #84]	; (24a0 <eink_ed057tc2_refresh_display_buffer+0x80>)
    244a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    244c:	2190      	movs	r1, #144	; 0x90
    244e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2450:	4053      	eors	r3, r2
    2452:	401c      	ands	r4, r3
    2454:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2456:	4668      	mov	r0, sp
    2458:	47b0      	blx	r6
    245a:	4225      	tst	r5, r4
    245c:	d0ed      	beq.n	243a <eink_ed057tc2_refresh_display_buffer+0x1a>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    245e:	2200      	movs	r2, #0
    2460:	2100      	movs	r1, #0
    2462:	2002      	movs	r0, #2
    2464:	4b0b      	ldr	r3, [pc, #44]	; (2494 <eink_ed057tc2_refresh_display_buffer+0x74>)
    2466:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2468:	4f0b      	ldr	r7, [pc, #44]	; (2498 <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    246a:	4e0c      	ldr	r6, [pc, #48]	; (249c <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    246c:	a801      	add	r0, sp, #4
    246e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2470:	23c0      	movs	r3, #192	; 0xc0
    2472:	05db      	lsls	r3, r3, #23
    2474:	2580      	movs	r5, #128	; 0x80
    2476:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2478:	22a0      	movs	r2, #160	; 0xa0
    247a:	4909      	ldr	r1, [pc, #36]	; (24a0 <eink_ed057tc2_refresh_display_buffer+0x80>)
    247c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    247e:	2190      	movs	r1, #144	; 0x90
    2480:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2482:	4053      	eors	r3, r2
    2484:	401c      	ands	r4, r3
    2486:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2488:	a801      	add	r0, sp, #4
    248a:	47b0      	blx	r6
    248c:	4225      	tst	r5, r4
    248e:	d0ed      	beq.n	246c <eink_ed057tc2_refresh_display_buffer+0x4c>
    uc8159_wait_for_busy();
}
    2490:	b003      	add	sp, #12
    2492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2494:	00001ba5 	.word	0x00001ba5
    2498:	0000034d 	.word	0x0000034d
    249c:	0000035b 	.word	0x0000035b
    24a0:	41004400 	.word	0x41004400

000024a4 <eink_ed057tc2_put_display_buffer>:
{
    24a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24a6:	46c6      	mov	lr, r8
    24a8:	b500      	push	{lr}
    24aa:	b084      	sub	sp, #16
    24ac:	4680      	mov	r8, r0
    eink_write_data(UC8159_PON, 0, 0);
    24ae:	2200      	movs	r2, #0
    24b0:	2100      	movs	r1, #0
    24b2:	2004      	movs	r0, #4
    24b4:	4c2c      	ldr	r4, [pc, #176]	; (2568 <eink_ed057tc2_put_display_buffer+0xc4>)
    24b6:	47a0      	blx	r4
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED057TC2_DISPLAY_BUFFER_SIZE);
    24b8:	4b2c      	ldr	r3, [pc, #176]	; (256c <eink_ed057tc2_put_display_buffer+0xc8>)
    24ba:	681b      	ldr	r3, [r3, #0]
    24bc:	6919      	ldr	r1, [r3, #16]
    24be:	4a2c      	ldr	r2, [pc, #176]	; (2570 <eink_ed057tc2_put_display_buffer+0xcc>)
    24c0:	2010      	movs	r0, #16
    24c2:	47a0      	blx	r4
    eink_write_data(UC8159_DSP, 0, 0);
    24c4:	2200      	movs	r2, #0
    24c6:	2100      	movs	r1, #0
    24c8:	2011      	movs	r0, #17
    24ca:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    24cc:	4f29      	ldr	r7, [pc, #164]	; (2574 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    24ce:	4e2a      	ldr	r6, [pc, #168]	; (2578 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    24d0:	a801      	add	r0, sp, #4
    24d2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    24d4:	23c0      	movs	r3, #192	; 0xc0
    24d6:	05db      	lsls	r3, r3, #23
    24d8:	2580      	movs	r5, #128	; 0x80
    24da:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    24dc:	22a0      	movs	r2, #160	; 0xa0
    24de:	4927      	ldr	r1, [pc, #156]	; (257c <eink_ed057tc2_put_display_buffer+0xd8>)
    24e0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    24e2:	2190      	movs	r1, #144	; 0x90
    24e4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    24e6:	4053      	eors	r3, r2
    24e8:	401c      	ands	r4, r3
    24ea:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    24ec:	a801      	add	r0, sp, #4
    24ee:	47b0      	blx	r6
    24f0:	4225      	tst	r5, r4
    24f2:	d0ed      	beq.n	24d0 <eink_ed057tc2_put_display_buffer+0x2c>
    if(refresh_display) {
    24f4:	4643      	mov	r3, r8
    24f6:	2b00      	cmp	r3, #0
    24f8:	d11c      	bne.n	2534 <eink_ed057tc2_put_display_buffer+0x90>
    eink_write_data(UC8159_POF, 0, 0);
    24fa:	2200      	movs	r2, #0
    24fc:	2100      	movs	r1, #0
    24fe:	2002      	movs	r0, #2
    2500:	4b19      	ldr	r3, [pc, #100]	; (2568 <eink_ed057tc2_put_display_buffer+0xc4>)
    2502:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2504:	4f1b      	ldr	r7, [pc, #108]	; (2574 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    2506:	4e1c      	ldr	r6, [pc, #112]	; (2578 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2508:	a803      	add	r0, sp, #12
    250a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    250c:	23c0      	movs	r3, #192	; 0xc0
    250e:	05db      	lsls	r3, r3, #23
    2510:	2580      	movs	r5, #128	; 0x80
    2512:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2514:	22a0      	movs	r2, #160	; 0xa0
    2516:	4919      	ldr	r1, [pc, #100]	; (257c <eink_ed057tc2_put_display_buffer+0xd8>)
    2518:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    251a:	2190      	movs	r1, #144	; 0x90
    251c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    251e:	4053      	eors	r3, r2
    2520:	401c      	ands	r4, r3
    2522:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2524:	a803      	add	r0, sp, #12
    2526:	47b0      	blx	r6
    2528:	4225      	tst	r5, r4
    252a:	d0ed      	beq.n	2508 <eink_ed057tc2_put_display_buffer+0x64>
}
    252c:	b004      	add	sp, #16
    252e:	bc04      	pop	{r2}
    2530:	4690      	mov	r8, r2
    2532:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_DRF, 0, 0);
    2534:	2200      	movs	r2, #0
    2536:	2100      	movs	r1, #0
    2538:	2012      	movs	r0, #18
    253a:	4b0b      	ldr	r3, [pc, #44]	; (2568 <eink_ed057tc2_put_display_buffer+0xc4>)
    253c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    253e:	4f0d      	ldr	r7, [pc, #52]	; (2574 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    2540:	4e0d      	ldr	r6, [pc, #52]	; (2578 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2542:	a802      	add	r0, sp, #8
    2544:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2546:	23c0      	movs	r3, #192	; 0xc0
    2548:	05db      	lsls	r3, r3, #23
    254a:	2580      	movs	r5, #128	; 0x80
    254c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    254e:	22a0      	movs	r2, #160	; 0xa0
    2550:	490a      	ldr	r1, [pc, #40]	; (257c <eink_ed057tc2_put_display_buffer+0xd8>)
    2552:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2554:	2190      	movs	r1, #144	; 0x90
    2556:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2558:	4053      	eors	r3, r2
    255a:	401c      	ands	r4, r3
    255c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    255e:	a802      	add	r0, sp, #8
    2560:	47b0      	blx	r6
    2562:	4225      	tst	r5, r4
    2564:	d0ed      	beq.n	2542 <eink_ed057tc2_put_display_buffer+0x9e>
    2566:	e7c8      	b.n	24fa <eink_ed057tc2_put_display_buffer+0x56>
    2568:	00001ba5 	.word	0x00001ba5
    256c:	20000424 	.word	0x20000424
    2570:	00020d00 	.word	0x00020d00
    2574:	0000034d 	.word	0x0000034d
    2578:	0000035b 	.word	0x0000035b
    257c:	41004400 	.word	0x41004400

00002580 <eink_ed028tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed028tc1_refresh_display_buffer(void)
{
    2580:	b5f0      	push	{r4, r5, r6, r7, lr}
    2582:	b087      	sub	sp, #28
    uint8_t eink_data[9];
    
    /* Enable power to the display */
    eink_write_data(UC8177_PON, 0, 0);
    2584:	2200      	movs	r2, #0
    2586:	2100      	movs	r1, #0
    2588:	2004      	movs	r0, #4
    258a:	4b22      	ldr	r3, [pc, #136]	; (2614 <eink_ed028tc1_refresh_display_buffer+0x94>)
    258c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    258e:	4f22      	ldr	r7, [pc, #136]	; (2618 <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    2590:	4e22      	ldr	r6, [pc, #136]	; (261c <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    2592:	a801      	add	r0, sp, #4
    2594:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2596:	23c0      	movs	r3, #192	; 0xc0
    2598:	05db      	lsls	r3, r3, #23
    259a:	2580      	movs	r5, #128	; 0x80
    259c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    259e:	22a0      	movs	r2, #160	; 0xa0
    25a0:	491f      	ldr	r1, [pc, #124]	; (2620 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    25a2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25a4:	2190      	movs	r1, #144	; 0x90
    25a6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    25a8:	4053      	eors	r3, r2
    25aa:	401c      	ands	r4, r3
    25ac:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    25ae:	a801      	add	r0, sp, #4
    25b0:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8177_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    25b2:	4225      	tst	r5, r4
    25b4:	d0ed      	beq.n	2592 <eink_ed028tc1_refresh_display_buffer+0x12>
    
    uc8177_wait_for_busy_low();
    
    /* Display Refresh */
    eink_data[0] = 0x18; /* Update Mode 1 */
    25b6:	a903      	add	r1, sp, #12
    25b8:	2318      	movs	r3, #24
    25ba:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    25bc:	2300      	movs	r3, #0
    25be:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    25c0:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    25c2:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    25c4:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    25c6:	3302      	adds	r3, #2
    25c8:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    25ca:	3356      	adds	r3, #86	; 0x56
    25cc:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    25ce:	3b57      	subs	r3, #87	; 0x57
    25d0:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    25d2:	33df      	adds	r3, #223	; 0xdf
    25d4:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    25d6:	2209      	movs	r2, #9
    25d8:	2012      	movs	r0, #18
    25da:	4c0e      	ldr	r4, [pc, #56]	; (2614 <eink_ed028tc1_refresh_display_buffer+0x94>)
    25dc:	47a0      	blx	r4
    
    /* Disable power to the display */
    eink_write_data(UC8177_POF, 0, 0);
    25de:	2200      	movs	r2, #0
    25e0:	2100      	movs	r1, #0
    25e2:	2002      	movs	r0, #2
    25e4:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    25e6:	4f0c      	ldr	r7, [pc, #48]	; (2618 <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    25e8:	4e0c      	ldr	r6, [pc, #48]	; (261c <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    25ea:	a802      	add	r0, sp, #8
    25ec:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25ee:	23c0      	movs	r3, #192	; 0xc0
    25f0:	05db      	lsls	r3, r3, #23
    25f2:	2580      	movs	r5, #128	; 0x80
    25f4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25f6:	22a0      	movs	r2, #160	; 0xa0
    25f8:	4909      	ldr	r1, [pc, #36]	; (2620 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    25fa:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25fc:	2190      	movs	r1, #144	; 0x90
    25fe:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2600:	4053      	eors	r3, r2
    2602:	401c      	ands	r4, r3
    2604:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2606:	a802      	add	r0, sp, #8
    2608:	47b0      	blx	r6
    260a:	4225      	tst	r5, r4
    260c:	d0ed      	beq.n	25ea <eink_ed028tc1_refresh_display_buffer+0x6a>
    uc8177_wait_for_busy_low();
}
    260e:	b007      	add	sp, #28
    2610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	00001ba5 	.word	0x00001ba5
    2618:	0000034d 	.word	0x0000034d
    261c:	0000035b 	.word	0x0000035b
    2620:	41004400 	.word	0x41004400

00002624 <eink_ed037tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed037tc1_refresh_display_buffer(void)
{
    2624:	b5f0      	push	{r4, r5, r6, r7, lr}
    2626:	b083      	sub	sp, #12
    /* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
    if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    2628:	4b15      	ldr	r3, [pc, #84]	; (2680 <eink_ed037tc1_refresh_display_buffer+0x5c>)
    262a:	78db      	ldrb	r3, [r3, #3]
    262c:	2b00      	cmp	r3, #0
    262e:	d11f      	bne.n	2670 <eink_ed037tc1_refresh_display_buffer+0x4c>
    {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    2630:	2269      	movs	r2, #105	; 0x69
    2632:	4914      	ldr	r1, [pc, #80]	; (2684 <eink_ed037tc1_refresh_display_buffer+0x60>)
    2634:	2032      	movs	r0, #50	; 0x32
    2636:	4b14      	ldr	r3, [pc, #80]	; (2688 <eink_ed037tc1_refresh_display_buffer+0x64>)
    2638:	4798      	blx	r3
    } else {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    }
    /* Display Update */
    eink_write_data(SSD1677_DSP_ACT, 0, 0);
    263a:	2200      	movs	r2, #0
    263c:	2100      	movs	r1, #0
    263e:	2020      	movs	r0, #32
    2640:	4b11      	ldr	r3, [pc, #68]	; (2688 <eink_ed037tc1_refresh_display_buffer+0x64>)
    2642:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2644:	4f11      	ldr	r7, [pc, #68]	; (268c <eink_ed037tc1_refresh_display_buffer+0x68>)
	CRITICAL_SECTION_LEAVE();
    2646:	4e12      	ldr	r6, [pc, #72]	; (2690 <eink_ed037tc1_refresh_display_buffer+0x6c>)
	CRITICAL_SECTION_ENTER();
    2648:	a801      	add	r0, sp, #4
    264a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    264c:	23c0      	movs	r3, #192	; 0xc0
    264e:	05db      	lsls	r3, r3, #23
    2650:	2580      	movs	r5, #128	; 0x80
    2652:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2654:	22a0      	movs	r2, #160	; 0xa0
    2656:	490f      	ldr	r1, [pc, #60]	; (2694 <eink_ed037tc1_refresh_display_buffer+0x70>)
    2658:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    265a:	2190      	movs	r1, #144	; 0x90
    265c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    265e:	4053      	eors	r3, r2
    2660:	401c      	ands	r4, r3
    2662:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2664:	a801      	add	r0, sp, #4
    2666:	47b0      	blx	r6
#ifdef EINK_BUSY    
    while(gpio_get_pin_level(EINK_BUSY));
    2668:	4225      	tst	r5, r4
    266a:	d1ed      	bne.n	2648 <eink_ed037tc1_refresh_display_buffer+0x24>
#endif
}
    266c:	b003      	add	sp, #12
    266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    2670:	2269      	movs	r2, #105	; 0x69
    2672:	4904      	ldr	r1, [pc, #16]	; (2684 <eink_ed037tc1_refresh_display_buffer+0x60>)
    2674:	316c      	adds	r1, #108	; 0x6c
    2676:	2032      	movs	r0, #50	; 0x32
    2678:	4b03      	ldr	r3, [pc, #12]	; (2688 <eink_ed037tc1_refresh_display_buffer+0x64>)
    267a:	4798      	blx	r3
    267c:	e7dd      	b.n	263a <eink_ed037tc1_refresh_display_buffer+0x16>
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	20000408 	.word	0x20000408
    2684:	00004b50 	.word	0x00004b50
    2688:	00001ba5 	.word	0x00001ba5
    268c:	0000034d 	.word	0x0000034d
    2690:	0000035b 	.word	0x0000035b
    2694:	41004400 	.word	0x41004400

00002698 <eink_ed037tc1_put_display_buffer>:
{
    2698:	b5f0      	push	{r4, r5, r6, r7, lr}
    269a:	b083      	sub	sp, #12
    269c:	0007      	movs	r7, r0
    eink_data[0] = 0x00;
    269e:	ac01      	add	r4, sp, #4
    26a0:	2500      	movs	r5, #0
    26a2:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    26a4:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    26a6:	2202      	movs	r2, #2
    26a8:	0021      	movs	r1, r4
    26aa:	204e      	movs	r0, #78	; 0x4e
    26ac:	4e1d      	ldr	r6, [pc, #116]	; (2724 <eink_ed037tc1_put_display_buffer+0x8c>)
    26ae:	47b0      	blx	r6
    eink_data[0] = 0x00;
    26b0:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    26b2:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    26b4:	2202      	movs	r2, #2
    26b6:	0021      	movs	r1, r4
    26b8:	204f      	movs	r0, #79	; 0x4f
    26ba:	47b0      	blx	r6
    eink_write_data(SSD1677_RAM_BW, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED037TC1_DISPLAY_BUFFER_SIZE);
    26bc:	4b1a      	ldr	r3, [pc, #104]	; (2728 <eink_ed037tc1_put_display_buffer+0x90>)
    26be:	681b      	ldr	r3, [r3, #0]
    26c0:	6919      	ldr	r1, [r3, #16]
    26c2:	4a1a      	ldr	r2, [pc, #104]	; (272c <eink_ed037tc1_put_display_buffer+0x94>)
    26c4:	2024      	movs	r0, #36	; 0x24
    26c6:	47b0      	blx	r6
    if(refresh_display) {
    26c8:	2f00      	cmp	r7, #0
    26ca:	d021      	beq.n	2710 <eink_ed037tc1_put_display_buffer+0x78>
        if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    26cc:	4b18      	ldr	r3, [pc, #96]	; (2730 <eink_ed037tc1_put_display_buffer+0x98>)
    26ce:	78db      	ldrb	r3, [r3, #3]
    26d0:	2b00      	cmp	r3, #0
    26d2:	d11f      	bne.n	2714 <eink_ed037tc1_put_display_buffer+0x7c>
            eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    26d4:	2269      	movs	r2, #105	; 0x69
    26d6:	4917      	ldr	r1, [pc, #92]	; (2734 <eink_ed037tc1_put_display_buffer+0x9c>)
    26d8:	2032      	movs	r0, #50	; 0x32
    26da:	4b12      	ldr	r3, [pc, #72]	; (2724 <eink_ed037tc1_put_display_buffer+0x8c>)
    26dc:	4798      	blx	r3
        eink_write_data(SSD1677_DSP_ACT, 0, 0);
    26de:	2200      	movs	r2, #0
    26e0:	2100      	movs	r1, #0
    26e2:	2020      	movs	r0, #32
    26e4:	4b0f      	ldr	r3, [pc, #60]	; (2724 <eink_ed037tc1_put_display_buffer+0x8c>)
    26e6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    26e8:	4f13      	ldr	r7, [pc, #76]	; (2738 <eink_ed037tc1_put_display_buffer+0xa0>)
	CRITICAL_SECTION_LEAVE();
    26ea:	4e14      	ldr	r6, [pc, #80]	; (273c <eink_ed037tc1_put_display_buffer+0xa4>)
	CRITICAL_SECTION_ENTER();
    26ec:	4668      	mov	r0, sp
    26ee:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26f0:	23c0      	movs	r3, #192	; 0xc0
    26f2:	05db      	lsls	r3, r3, #23
    26f4:	2580      	movs	r5, #128	; 0x80
    26f6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26f8:	22a0      	movs	r2, #160	; 0xa0
    26fa:	4911      	ldr	r1, [pc, #68]	; (2740 <eink_ed037tc1_put_display_buffer+0xa8>)
    26fc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26fe:	2190      	movs	r1, #144	; 0x90
    2700:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2702:	4053      	eors	r3, r2
    2704:	401c      	ands	r4, r3
    2706:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2708:	4668      	mov	r0, sp
    270a:	47b0      	blx	r6
        while(gpio_get_pin_level(EINK_BUSY));
    270c:	4225      	tst	r5, r4
    270e:	d1ed      	bne.n	26ec <eink_ed037tc1_put_display_buffer+0x54>
}
    2710:	b003      	add	sp, #12
    2712:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    2714:	2269      	movs	r2, #105	; 0x69
    2716:	4907      	ldr	r1, [pc, #28]	; (2734 <eink_ed037tc1_put_display_buffer+0x9c>)
    2718:	316c      	adds	r1, #108	; 0x6c
    271a:	2032      	movs	r0, #50	; 0x32
    271c:	4b01      	ldr	r3, [pc, #4]	; (2724 <eink_ed037tc1_put_display_buffer+0x8c>)
    271e:	4798      	blx	r3
    2720:	e7dd      	b.n	26de <eink_ed037tc1_put_display_buffer+0x46>
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	00001ba5 	.word	0x00001ba5
    2728:	20000424 	.word	0x20000424
    272c:	000041a0 	.word	0x000041a0
    2730:	20000408 	.word	0x20000408
    2734:	00004b50 	.word	0x00004b50
    2738:	0000034d 	.word	0x0000034d
    273c:	0000035b 	.word	0x0000035b
    2740:	41004400 	.word	0x41004400

00002744 <eink_ed037tc1_put_partial_display_buffer>:
{
    2744:	b5f0      	push	{r4, r5, r6, r7, lr}
    2746:	46de      	mov	lr, fp
    2748:	4657      	mov	r7, sl
    274a:	464e      	mov	r6, r9
    274c:	4645      	mov	r5, r8
    274e:	b5e0      	push	{r5, r6, r7, lr}
    2750:	b085      	sub	sp, #20
    2752:	4681      	mov	r9, r0
    2754:	000c      	movs	r4, r1
	if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
    2756:	4940      	ldr	r1, [pc, #256]	; (2858 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2758:	7809      	ldrb	r1, [r1, #0]
    275a:	2901      	cmp	r1, #1
    275c:	d050      	beq.n	2800 <eink_ed037tc1_put_partial_display_buffer+0xbc>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
    275e:	493e      	ldr	r1, [pc, #248]	; (2858 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2760:	7809      	ldrb	r1, [r1, #0]
    2762:	2902      	cmp	r1, #2
    2764:	d068      	beq.n	2838 <eink_ed037tc1_put_partial_display_buffer+0xf4>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
    2766:	493c      	ldr	r1, [pc, #240]	; (2858 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2768:	7809      	ldrb	r1, [r1, #0]
    276a:	2903      	cmp	r1, #3
    276c:	d06c      	beq.n	2848 <eink_ed037tc1_put_partial_display_buffer+0x104>
        x1_set = (start_x - (start_x % 8)) / 8;
    276e:	10c6      	asrs	r6, r0, #3
        byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * start_y);
    2770:	00a1      	lsls	r1, r4, #2
    2772:	1909      	adds	r1, r1, r4
    2774:	00c8      	lsls	r0, r1, #3
    2776:	1a41      	subs	r1, r0, r1
    2778:	1876      	adds	r6, r6, r1
        mod_calc_x = (start_x - (start_x % 8));
    277a:	2107      	movs	r1, #7
    277c:	4648      	mov	r0, r9
    277e:	4388      	bics	r0, r1
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    2780:	b2c0      	uxtb	r0, r0
    2782:	1880      	adds	r0, r0, r2
        mod_calc_w = 8 - (window_w % 8);
    2784:	2507      	movs	r5, #7
    2786:	402a      	ands	r2, r5
    2788:	2508      	movs	r5, #8
    278a:	1aaa      	subs	r2, r5, r2
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    278c:	b2d2      	uxtb	r2, r2
    278e:	1882      	adds	r2, r0, r2
    2790:	17d0      	asrs	r0, r2, #31
    2792:	4001      	ands	r1, r0
    2794:	1889      	adds	r1, r1, r2
    2796:	10c9      	asrs	r1, r1, #3
    2798:	b28a      	uxth	r2, r1
    279a:	9201      	str	r2, [sp, #4]
    display_buffer = (uint8_t*) ptr_eink_gfx_config->display_buffer_1_ptr;
    279c:	4a2f      	ldr	r2, [pc, #188]	; (285c <eink_ed037tc1_put_partial_display_buffer+0x118>)
    279e:	6812      	ldr	r2, [r2, #0]
    27a0:	6912      	ldr	r2, [r2, #16]
    display_buffer += byte_set;
    27a2:	1996      	adds	r6, r2, r6
    for(i=0; i<window_set_h; i++)
    27a4:	2b00      	cmp	r3, #0
    27a6:	d024      	beq.n	27f2 <eink_ed037tc1_put_partial_display_buffer+0xae>
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    27a8:	464a      	mov	r2, r9
    27aa:	0592      	lsls	r2, r2, #22
    27ac:	0f92      	lsrs	r2, r2, #30
    27ae:	4692      	mov	sl, r2
    27b0:	18e3      	adds	r3, r4, r3
    27b2:	b29b      	uxth	r3, r3
    27b4:	4698      	mov	r8, r3
	    eink_data[0] = (window_set_x & 0xFF);
    27b6:	ad03      	add	r5, sp, #12
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    27b8:	4f29      	ldr	r7, [pc, #164]	; (2860 <eink_ed037tc1_put_partial_display_buffer+0x11c>)
	    eink_data[1] = (temp_y >> 8) & 0x3;
    27ba:	2303      	movs	r3, #3
    27bc:	469b      	mov	fp, r3
	    eink_data[0] = (window_set_x & 0xFF);
    27be:	464b      	mov	r3, r9
    27c0:	702b      	strb	r3, [r5, #0]
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    27c2:	4653      	mov	r3, sl
    27c4:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    27c6:	2202      	movs	r2, #2
    27c8:	0029      	movs	r1, r5
    27ca:	204e      	movs	r0, #78	; 0x4e
    27cc:	47b8      	blx	r7
	    eink_data[0] = (temp_y & 0xFF);
    27ce:	702c      	strb	r4, [r5, #0]
	    eink_data[1] = (temp_y >> 8) & 0x3;
    27d0:	0a23      	lsrs	r3, r4, #8
    27d2:	465a      	mov	r2, fp
    27d4:	4013      	ands	r3, r2
    27d6:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    27d8:	2202      	movs	r2, #2
    27da:	0029      	movs	r1, r5
    27dc:	204f      	movs	r0, #79	; 0x4f
    27de:	47b8      	blx	r7
	    display_buffer += (GFX_ED037TC1_MAX_WIDTH / 8);
    27e0:	3623      	adds	r6, #35	; 0x23
	    eink_write_data(SSD1677_RAM_BW, display_buffer, window_set_w);
    27e2:	9a01      	ldr	r2, [sp, #4]
    27e4:	0031      	movs	r1, r6
    27e6:	2024      	movs	r0, #36	; 0x24
    27e8:	47b8      	blx	r7
    27ea:	3401      	adds	r4, #1
    27ec:	b2a4      	uxth	r4, r4
    for(i=0; i<window_set_h; i++)
    27ee:	4544      	cmp	r4, r8
    27f0:	d1e5      	bne.n	27be <eink_ed037tc1_put_partial_display_buffer+0x7a>
}
    27f2:	b005      	add	sp, #20
    27f4:	bc3c      	pop	{r2, r3, r4, r5}
    27f6:	4690      	mov	r8, r2
    27f8:	4699      	mov	r9, r3
    27fa:	46a2      	mov	sl, r4
    27fc:	46ab      	mov	fp, r5
    27fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - (((start_y + window_h) - ((start_y + window_h) % 8)) / 8);
    2800:	18e6      	adds	r6, r4, r3
    2802:	3106      	adds	r1, #6
    2804:	438e      	bics	r6, r1
    2806:	0031      	movs	r1, r6
    2808:	17f0      	asrs	r0, r6, #31
    280a:	2607      	movs	r6, #7
    280c:	4006      	ands	r6, r0
    280e:	1876      	adds	r6, r6, r1
    2810:	10f6      	asrs	r6, r6, #3
    2812:	4276      	negs	r6, r6
    2814:	3622      	adds	r6, #34	; 0x22
		byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (start_x));
    2816:	4649      	mov	r1, r9
    2818:	0089      	lsls	r1, r1, #2
    281a:	4449      	add	r1, r9
    281c:	00c8      	lsls	r0, r1, #3
    281e:	1a41      	subs	r1, r0, r1
    2820:	1876      	adds	r6, r6, r1
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    2822:	218c      	movs	r1, #140	; 0x8c
    2824:	0049      	lsls	r1, r1, #1
    2826:	1ac9      	subs	r1, r1, r3
    2828:	1b09      	subs	r1, r1, r4
		window_set_w = window_h / 8;
    282a:	08db      	lsrs	r3, r3, #3
    282c:	9301      	str	r3, [sp, #4]
		window_set_h = window_w;
    282e:	0013      	movs	r3, r2
		window_set_y = start_x;
    2830:	464c      	mov	r4, r9
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    2832:	b28a      	uxth	r2, r1
    2834:	4691      	mov	r9, r2
    2836:	e7b1      	b.n	279c <eink_ed037tc1_put_partial_display_buffer+0x58>
        x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((start_x - (start_x % 8)) / 8);
    2838:	10c6      	asrs	r6, r0, #3
    283a:	490a      	ldr	r1, [pc, #40]	; (2864 <eink_ed037tc1_put_partial_display_buffer+0x120>)
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
    283c:	1b89      	subs	r1, r1, r6
    283e:	2623      	movs	r6, #35	; 0x23
    2840:	4276      	negs	r6, r6
    2842:	4366      	muls	r6, r4
    2844:	198e      	adds	r6, r1, r6
    2846:	e7a9      	b.n	279c <eink_ed037tc1_put_partial_display_buffer+0x58>
        y1_set = (start_y - (start_y % 8)) / 8;
    2848:	10e2      	asrs	r2, r4, #3
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
    284a:	3926      	subs	r1, #38	; 0x26
    284c:	4361      	muls	r1, r4
    284e:	1856      	adds	r6, r2, r1
    2850:	4a05      	ldr	r2, [pc, #20]	; (2868 <eink_ed037tc1_put_partial_display_buffer+0x124>)
    2852:	4694      	mov	ip, r2
    2854:	4466      	add	r6, ip
    2856:	e7a1      	b.n	279c <eink_ed037tc1_put_partial_display_buffer+0x58>
    2858:	20000408 	.word	0x20000408
    285c:	20000424 	.word	0x20000424
    2860:	00001ba5 	.word	0x00001ba5
    2864:	00004294 	.word	0x00004294
    2868:	0000417d 	.word	0x0000417d

0000286c <eink_et011tt2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_et011tt2_refresh_display_buffer(void)
{
    286c:	b5f0      	push	{r4, r5, r6, r7, lr}
    286e:	b087      	sub	sp, #28
    uint8_t eink_data[7];
    
    /* Enable power to the display */   
    eink_write_data(UC8173_PON, 0, 0);
    2870:	2200      	movs	r2, #0
    2872:	2100      	movs	r1, #0
    2874:	2004      	movs	r0, #4
    2876:	4b31      	ldr	r3, [pc, #196]	; (293c <eink_et011tt2_refresh_display_buffer+0xd0>)
    2878:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    287a:	4f31      	ldr	r7, [pc, #196]	; (2940 <eink_et011tt2_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    287c:	4e31      	ldr	r6, [pc, #196]	; (2944 <eink_et011tt2_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    287e:	a801      	add	r0, sp, #4
    2880:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2882:	23c0      	movs	r3, #192	; 0xc0
    2884:	05db      	lsls	r3, r3, #23
    2886:	2580      	movs	r5, #128	; 0x80
    2888:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    288a:	22a0      	movs	r2, #160	; 0xa0
    288c:	492e      	ldr	r1, [pc, #184]	; (2948 <eink_et011tt2_refresh_display_buffer+0xdc>)
    288e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2890:	2190      	movs	r1, #144	; 0x90
    2892:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2894:	4053      	eors	r3, r2
    2896:	401c      	ands	r4, r3
    2898:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    289a:	a801      	add	r0, sp, #4
    289c:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    289e:	4225      	tst	r5, r4
    28a0:	d0ed      	beq.n	287e <eink_et011tt2_refresh_display_buffer+0x12>
	eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    28a2:	2220      	movs	r2, #32
    28a4:	2155      	movs	r1, #85	; 0x55
    28a6:	2020      	movs	r0, #32
    28a8:	4c24      	ldr	r4, [pc, #144]	; (293c <eink_et011tt2_refresh_display_buffer+0xd0>)
    28aa:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    28ac:	2280      	movs	r2, #128	; 0x80
    28ae:	0092      	lsls	r2, r2, #2
    28b0:	2181      	movs	r1, #129	; 0x81
    28b2:	2022      	movs	r0, #34	; 0x22
    28b4:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);
    28b6:	2280      	movs	r2, #128	; 0x80
    28b8:	2100      	movs	r1, #0
    28ba:	2026      	movs	r0, #38	; 0x26
    28bc:	47a0      	blx	r4
    uc8173_wait_for_busy_low();
    
    uc8173_send_gu2_lut();
	
    /* Display Refresh */
    eink_data[0] = 0x01; /* GU2 Update Mode */
    28be:	a904      	add	r1, sp, #16
    28c0:	2301      	movs	r3, #1
    28c2:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    28c4:	2300      	movs	r3, #0
    28c6:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    28c8:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    28ca:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    28cc:	227f      	movs	r2, #127	; 0x7f
    28ce:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    28d0:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    28d2:	33ff      	adds	r3, #255	; 0xff
    28d4:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    28d6:	3a78      	subs	r2, #120	; 0x78
    28d8:	2012      	movs	r0, #18
    28da:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    28dc:	4f18      	ldr	r7, [pc, #96]	; (2940 <eink_et011tt2_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    28de:	4e19      	ldr	r6, [pc, #100]	; (2944 <eink_et011tt2_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    28e0:	a802      	add	r0, sp, #8
    28e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    28e4:	23c0      	movs	r3, #192	; 0xc0
    28e6:	05db      	lsls	r3, r3, #23
    28e8:	2580      	movs	r5, #128	; 0x80
    28ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    28ec:	22a0      	movs	r2, #160	; 0xa0
    28ee:	4916      	ldr	r1, [pc, #88]	; (2948 <eink_et011tt2_refresh_display_buffer+0xdc>)
    28f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    28f2:	2190      	movs	r1, #144	; 0x90
    28f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    28f6:	4053      	eors	r3, r2
    28f8:	401c      	ands	r4, r3
    28fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    28fc:	a802      	add	r0, sp, #8
    28fe:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2900:	4225      	tst	r5, r4
    2902:	d0ed      	beq.n	28e0 <eink_et011tt2_refresh_display_buffer+0x74>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    eink_write_data(UC8173_POF, 0, 0);
    2904:	2200      	movs	r2, #0
    2906:	2100      	movs	r1, #0
    2908:	2002      	movs	r0, #2
    290a:	4b0c      	ldr	r3, [pc, #48]	; (293c <eink_et011tt2_refresh_display_buffer+0xd0>)
    290c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    290e:	4f0c      	ldr	r7, [pc, #48]	; (2940 <eink_et011tt2_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    2910:	4e0c      	ldr	r6, [pc, #48]	; (2944 <eink_et011tt2_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    2912:	a803      	add	r0, sp, #12
    2914:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2916:	23c0      	movs	r3, #192	; 0xc0
    2918:	05db      	lsls	r3, r3, #23
    291a:	2580      	movs	r5, #128	; 0x80
    291c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    291e:	22a0      	movs	r2, #160	; 0xa0
    2920:	4909      	ldr	r1, [pc, #36]	; (2948 <eink_et011tt2_refresh_display_buffer+0xdc>)
    2922:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2924:	2190      	movs	r1, #144	; 0x90
    2926:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2928:	4053      	eors	r3, r2
    292a:	401c      	ands	r4, r3
    292c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    292e:	a803      	add	r0, sp, #12
    2930:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    2932:	4225      	tst	r5, r4
    2934:	d1ed      	bne.n	2912 <eink_et011tt2_refresh_display_buffer+0xa6>
    uc8173_wait_for_busy_high();
}
    2936:	b007      	add	sp, #28
    2938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	00001ba5 	.word	0x00001ba5
    2940:	0000034d 	.word	0x0000034d
    2944:	0000035b 	.word	0x0000035b
    2948:	41004400 	.word	0x41004400

0000294c <eink_hink_e0154a05_put_display_buffer>:
{
    294c:	b5f0      	push	{r4, r5, r6, r7, lr}
    294e:	46c6      	mov	lr, r8
    2950:	b500      	push	{lr}
    2952:	b086      	sub	sp, #24
    2954:	4680      	mov	r8, r0
    eink_data[0] = 0x7D;
    2956:	ac05      	add	r4, sp, #20
    2958:	237d      	movs	r3, #125	; 0x7d
    295a:	7023      	strb	r3, [r4, #0]
    eink_write_data(SSD1608_WVCOM, eink_data, 1);
    295c:	2201      	movs	r2, #1
    295e:	0021      	movs	r1, r4
    2960:	202c      	movs	r0, #44	; 0x2c
    2962:	4d3e      	ldr	r5, [pc, #248]	; (2a5c <eink_hink_e0154a05_put_display_buffer+0x110>)
    2964:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2966:	2718      	movs	r7, #24
    2968:	7027      	strb	r7, [r4, #0]
    eink_data[1] = 0x00;
    296a:	2600      	movs	r6, #0
    296c:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RXAS, eink_data, 2);
    296e:	2202      	movs	r2, #2
    2970:	0021      	movs	r1, r4
    2972:	2044      	movs	r0, #68	; 0x44
    2974:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2976:	7027      	strb	r7, [r4, #0]
    eink_write_data(SSD1608_RXC, eink_data, 1);
    2978:	2201      	movs	r2, #1
    297a:	0021      	movs	r1, r4
    297c:	204e      	movs	r0, #78	; 0x4e
    297e:	47a8      	blx	r5
    eink_data[0] = 0xC7;
    2980:	23c7      	movs	r3, #199	; 0xc7
    2982:	7023      	strb	r3, [r4, #0]
    eink_data[1] = 0x00;
    2984:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RYC, eink_data, 2);
    2986:	2202      	movs	r2, #2
    2988:	0021      	movs	r1, r4
    298a:	204f      	movs	r0, #79	; 0x4f
    298c:	47a8      	blx	r5
    eink_write_data(SSD1608_WR, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_HINK_E0154A05_DISPLAY_BUFFER_SIZE);
    298e:	4b34      	ldr	r3, [pc, #208]	; (2a60 <eink_hink_e0154a05_put_display_buffer+0x114>)
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	6919      	ldr	r1, [r3, #16]
    2994:	4a33      	ldr	r2, [pc, #204]	; (2a64 <eink_hink_e0154a05_put_display_buffer+0x118>)
    2996:	2024      	movs	r0, #36	; 0x24
    2998:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    299a:	4f33      	ldr	r7, [pc, #204]	; (2a68 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    299c:	4e33      	ldr	r6, [pc, #204]	; (2a6c <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    299e:	a802      	add	r0, sp, #8
    29a0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    29a2:	23c0      	movs	r3, #192	; 0xc0
    29a4:	05db      	lsls	r3, r3, #23
    29a6:	2580      	movs	r5, #128	; 0x80
    29a8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    29aa:	22a0      	movs	r2, #160	; 0xa0
    29ac:	4930      	ldr	r1, [pc, #192]	; (2a70 <eink_hink_e0154a05_put_display_buffer+0x124>)
    29ae:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    29b0:	2190      	movs	r1, #144	; 0x90
    29b2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    29b4:	4053      	eors	r3, r2
    29b6:	401c      	ands	r4, r3
    29b8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    29ba:	a802      	add	r0, sp, #8
    29bc:	47b0      	blx	r6
    29be:	4225      	tst	r5, r4
    29c0:	d1ed      	bne.n	299e <eink_hink_e0154a05_put_display_buffer+0x52>
    if(refresh_display) {
    29c2:	4643      	mov	r3, r8
    29c4:	2b00      	cmp	r3, #0
    29c6:	d103      	bne.n	29d0 <eink_hink_e0154a05_put_display_buffer+0x84>
}
    29c8:	b006      	add	sp, #24
    29ca:	bc04      	pop	{r2}
    29cc:	4690      	mov	r8, r2
    29ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    29d0:	4b28      	ldr	r3, [pc, #160]	; (2a74 <eink_hink_e0154a05_put_display_buffer+0x128>)
    29d2:	785b      	ldrb	r3, [r3, #1]
    29d4:	2b01      	cmp	r3, #1
    29d6:	d035      	beq.n	2a44 <eink_hink_e0154a05_put_display_buffer+0xf8>
        eink_data[0] = 0xF7; /* Slow Update */
    29d8:	22f7      	movs	r2, #247	; 0xf7
    29da:	ab01      	add	r3, sp, #4
    29dc:	701a      	strb	r2, [r3, #0]
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    29de:	2201      	movs	r2, #1
    29e0:	a901      	add	r1, sp, #4
    29e2:	2022      	movs	r0, #34	; 0x22
    29e4:	4b1d      	ldr	r3, [pc, #116]	; (2a5c <eink_hink_e0154a05_put_display_buffer+0x110>)
    29e6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    29e8:	4f1f      	ldr	r7, [pc, #124]	; (2a68 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    29ea:	4e20      	ldr	r6, [pc, #128]	; (2a6c <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    29ec:	a803      	add	r0, sp, #12
    29ee:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    29f0:	23c0      	movs	r3, #192	; 0xc0
    29f2:	05db      	lsls	r3, r3, #23
    29f4:	2580      	movs	r5, #128	; 0x80
    29f6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    29f8:	22a0      	movs	r2, #160	; 0xa0
    29fa:	491d      	ldr	r1, [pc, #116]	; (2a70 <eink_hink_e0154a05_put_display_buffer+0x124>)
    29fc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    29fe:	2190      	movs	r1, #144	; 0x90
    2a00:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2a02:	4053      	eors	r3, r2
    2a04:	401c      	ands	r4, r3
    2a06:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2a08:	a803      	add	r0, sp, #12
    2a0a:	47b0      	blx	r6
    2a0c:	4225      	tst	r5, r4
    2a0e:	d1ed      	bne.n	29ec <eink_hink_e0154a05_put_display_buffer+0xa0>
    eink_write_data(SSD1608_MA, 0, 0);
    2a10:	2200      	movs	r2, #0
    2a12:	2100      	movs	r1, #0
    2a14:	2020      	movs	r0, #32
    2a16:	4b11      	ldr	r3, [pc, #68]	; (2a5c <eink_hink_e0154a05_put_display_buffer+0x110>)
    2a18:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2a1a:	4f13      	ldr	r7, [pc, #76]	; (2a68 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2a1c:	4e13      	ldr	r6, [pc, #76]	; (2a6c <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2a1e:	a804      	add	r0, sp, #16
    2a20:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2a22:	23c0      	movs	r3, #192	; 0xc0
    2a24:	05db      	lsls	r3, r3, #23
    2a26:	2580      	movs	r5, #128	; 0x80
    2a28:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2a2a:	22a0      	movs	r2, #160	; 0xa0
    2a2c:	4910      	ldr	r1, [pc, #64]	; (2a70 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2a2e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2a30:	2190      	movs	r1, #144	; 0x90
    2a32:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2a34:	4053      	eors	r3, r2
    2a36:	401c      	ands	r4, r3
    2a38:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2a3a:	a804      	add	r0, sp, #16
    2a3c:	47b0      	blx	r6
    2a3e:	4225      	tst	r5, r4
    2a40:	d1ed      	bne.n	2a1e <eink_hink_e0154a05_put_display_buffer+0xd2>
    2a42:	e7c1      	b.n	29c8 <eink_hink_e0154a05_put_display_buffer+0x7c>
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2a44:	4b0b      	ldr	r3, [pc, #44]	; (2a74 <eink_hink_e0154a05_put_display_buffer+0x128>)
    2a46:	789b      	ldrb	r3, [r3, #2]
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d103      	bne.n	2a54 <eink_hink_e0154a05_put_display_buffer+0x108>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    2a4c:	22c7      	movs	r2, #199	; 0xc7
    2a4e:	ab01      	add	r3, sp, #4
    2a50:	701a      	strb	r2, [r3, #0]
    2a52:	e7c4      	b.n	29de <eink_hink_e0154a05_put_display_buffer+0x92>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    2a54:	22ff      	movs	r2, #255	; 0xff
    2a56:	ab01      	add	r3, sp, #4
    2a58:	701a      	strb	r2, [r3, #0]
    2a5a:	e7c0      	b.n	29de <eink_hink_e0154a05_put_display_buffer+0x92>
    2a5c:	00001ba5 	.word	0x00001ba5
    2a60:	20000424 	.word	0x20000424
    2a64:	00001388 	.word	0x00001388
    2a68:	0000034d 	.word	0x0000034d
    2a6c:	0000035b 	.word	0x0000035b
    2a70:	41004400 	.word	0x41004400
    2a74:	200003ac 	.word	0x200003ac

00002a78 <eink_ed028tc1_put_display_buffer>:
{
    2a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7a:	b089      	sub	sp, #36	; 0x24
    2a7c:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2a7e:	a906      	add	r1, sp, #24
    2a80:	2300      	movs	r3, #0
    2a82:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2a84:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2a86:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00;
    2a88:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x02; /* W = 600 */
    2a8a:	3302      	adds	r3, #2
    2a8c:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x58;
    2a8e:	3356      	adds	r3, #86	; 0x56
    2a90:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x01; /* H = 480 */
    2a92:	3b57      	subs	r3, #87	; 0x57
    2a94:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0xE0;
    2a96:	33df      	adds	r3, #223	; 0xdf
    2a98:	71cb      	strb	r3, [r1, #7]
    eink_write_data(UC8177_DTMW, eink_data, 8);
    2a9a:	2208      	movs	r2, #8
    2a9c:	2083      	movs	r0, #131	; 0x83
    2a9e:	4c33      	ldr	r4, [pc, #204]	; (2b6c <eink_ed028tc1_put_display_buffer+0xf4>)
    2aa0:	47a0      	blx	r4
    eink_write_data(UC8177_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED028TC1_DISPLAY_BUFFER_SIZE);
    2aa2:	4b33      	ldr	r3, [pc, #204]	; (2b70 <eink_ed028tc1_put_display_buffer+0xf8>)
    2aa4:	681b      	ldr	r3, [r3, #0]
    2aa6:	6919      	ldr	r1, [r3, #16]
    2aa8:	4a32      	ldr	r2, [pc, #200]	; (2b74 <eink_ed028tc1_put_display_buffer+0xfc>)
    2aaa:	2010      	movs	r0, #16
    2aac:	47a0      	blx	r4
    if((uc8177_global_instance.display_config.display_rotation == ROTATE_90) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180)) {
    2aae:	4b32      	ldr	r3, [pc, #200]	; (2b78 <eink_ed028tc1_put_display_buffer+0x100>)
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	2b01      	cmp	r3, #1
    2ab4:	d00f      	beq.n	2ad6 <eink_ed028tc1_put_display_buffer+0x5e>
    2ab6:	4b30      	ldr	r3, [pc, #192]	; (2b78 <eink_ed028tc1_put_display_buffer+0x100>)
    2ab8:	781b      	ldrb	r3, [r3, #0]
    2aba:	2b02      	cmp	r3, #2
    2abc:	d00b      	beq.n	2ad6 <eink_ed028tc1_put_display_buffer+0x5e>
        eink_data[0] = 0x02;
    2abe:	2202      	movs	r2, #2
    2ac0:	ab06      	add	r3, sp, #24
    2ac2:	701a      	strb	r2, [r3, #0]
    eink_write_data(UC8177_GDOS, eink_data, 1);
    2ac4:	2201      	movs	r2, #1
    2ac6:	a906      	add	r1, sp, #24
    2ac8:	20e0      	movs	r0, #224	; 0xe0
    2aca:	4b28      	ldr	r3, [pc, #160]	; (2b6c <eink_ed028tc1_put_display_buffer+0xf4>)
    2acc:	4798      	blx	r3
    if(refresh_display) {
    2ace:	2d00      	cmp	r5, #0
    2ad0:	d105      	bne.n	2ade <eink_ed028tc1_put_display_buffer+0x66>
}
    2ad2:	b009      	add	sp, #36	; 0x24
    2ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_data[0] = 0x03;
    2ad6:	2203      	movs	r2, #3
    2ad8:	ab06      	add	r3, sp, #24
    2ada:	701a      	strb	r2, [r3, #0]
    2adc:	e7f2      	b.n	2ac4 <eink_ed028tc1_put_display_buffer+0x4c>
    eink_write_data(UC8177_PON, 0, 0);
    2ade:	2200      	movs	r2, #0
    2ae0:	2100      	movs	r1, #0
    2ae2:	2004      	movs	r0, #4
    2ae4:	4b21      	ldr	r3, [pc, #132]	; (2b6c <eink_ed028tc1_put_display_buffer+0xf4>)
    2ae6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2ae8:	4f24      	ldr	r7, [pc, #144]	; (2b7c <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2aea:	4e25      	ldr	r6, [pc, #148]	; (2b80 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2aec:	a801      	add	r0, sp, #4
    2aee:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2af0:	23c0      	movs	r3, #192	; 0xc0
    2af2:	05db      	lsls	r3, r3, #23
    2af4:	2580      	movs	r5, #128	; 0x80
    2af6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2af8:	22a0      	movs	r2, #160	; 0xa0
    2afa:	4922      	ldr	r1, [pc, #136]	; (2b84 <eink_ed028tc1_put_display_buffer+0x10c>)
    2afc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2afe:	2190      	movs	r1, #144	; 0x90
    2b00:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2b02:	4053      	eors	r3, r2
    2b04:	401c      	ands	r4, r3
    2b06:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b08:	a801      	add	r0, sp, #4
    2b0a:	47b0      	blx	r6
    2b0c:	4225      	tst	r5, r4
    2b0e:	d0ed      	beq.n	2aec <eink_ed028tc1_put_display_buffer+0x74>
    eink_data[0] = 0x18; /* Update Mode 1 */
    2b10:	a903      	add	r1, sp, #12
    2b12:	2318      	movs	r3, #24
    2b14:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2b16:	2300      	movs	r3, #0
    2b18:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2b1a:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2b1c:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    2b1e:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    2b20:	3302      	adds	r3, #2
    2b22:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    2b24:	3356      	adds	r3, #86	; 0x56
    2b26:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    2b28:	3b57      	subs	r3, #87	; 0x57
    2b2a:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    2b2c:	33df      	adds	r3, #223	; 0xdf
    2b2e:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    2b30:	2209      	movs	r2, #9
    2b32:	2012      	movs	r0, #18
    2b34:	4c0d      	ldr	r4, [pc, #52]	; (2b6c <eink_ed028tc1_put_display_buffer+0xf4>)
    2b36:	47a0      	blx	r4
    eink_write_data(UC8177_POF, 0, 0);
    2b38:	2200      	movs	r2, #0
    2b3a:	2100      	movs	r1, #0
    2b3c:	2002      	movs	r0, #2
    2b3e:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2b40:	4f0e      	ldr	r7, [pc, #56]	; (2b7c <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2b42:	4e0f      	ldr	r6, [pc, #60]	; (2b80 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2b44:	a802      	add	r0, sp, #8
    2b46:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2b48:	23c0      	movs	r3, #192	; 0xc0
    2b4a:	05db      	lsls	r3, r3, #23
    2b4c:	2580      	movs	r5, #128	; 0x80
    2b4e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2b50:	22a0      	movs	r2, #160	; 0xa0
    2b52:	490c      	ldr	r1, [pc, #48]	; (2b84 <eink_ed028tc1_put_display_buffer+0x10c>)
    2b54:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b56:	2190      	movs	r1, #144	; 0x90
    2b58:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2b5a:	4053      	eors	r3, r2
    2b5c:	401c      	ands	r4, r3
    2b5e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b60:	a802      	add	r0, sp, #8
    2b62:	47b0      	blx	r6
    2b64:	4225      	tst	r5, r4
    2b66:	d0ed      	beq.n	2b44 <eink_ed028tc1_put_display_buffer+0xcc>
    2b68:	e7b3      	b.n	2ad2 <eink_ed028tc1_put_display_buffer+0x5a>
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	00001ba5 	.word	0x00001ba5
    2b70:	20000424 	.word	0x20000424
    2b74:	00023280 	.word	0x00023280
    2b78:	200003a4 	.word	0x200003a4
    2b7c:	0000034d 	.word	0x0000034d
    2b80:	0000035b 	.word	0x0000035b
    2b84:	41004400 	.word	0x41004400

00002b88 <eink_et011tt2_put_display_buffer>:
{
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	b089      	sub	sp, #36	; 0x24
    2b8c:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2b8e:	a906      	add	r1, sp, #24
    2b90:	2300      	movs	r3, #0
    2b92:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2b94:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2b96:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0xEF; /* W = 239 */
    2b98:	22ef      	movs	r2, #239	; 0xef
    2b9a:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2b9c:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xEF; /* H = 239 */
    2b9e:	714a      	strb	r2, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2ba0:	3ae9      	subs	r2, #233	; 0xe9
    2ba2:	2014      	movs	r0, #20
    2ba4:	4c3e      	ldr	r4, [pc, #248]	; (2ca0 <eink_et011tt2_put_display_buffer+0x118>)
    2ba6:	47a0      	blx	r4
    eink_write_data(UC8173_DTM1, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    2ba8:	4b3e      	ldr	r3, [pc, #248]	; (2ca4 <eink_et011tt2_put_display_buffer+0x11c>)
    2baa:	681b      	ldr	r3, [r3, #0]
    2bac:	6959      	ldr	r1, [r3, #20]
    2bae:	22e1      	movs	r2, #225	; 0xe1
    2bb0:	0192      	lsls	r2, r2, #6
    2bb2:	2010      	movs	r0, #16
    2bb4:	47a0      	blx	r4
    if(refresh_display) {
    2bb6:	2d00      	cmp	r5, #0
    2bb8:	d10d      	bne.n	2bd6 <eink_et011tt2_put_display_buffer+0x4e>
{
    2bba:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2bbc:	4c39      	ldr	r4, [pc, #228]	; (2ca4 <eink_et011tt2_put_display_buffer+0x11c>)
    for (i=0;i<GFX_ET011TT2_DISPLAY_BUFFER_SIZE;i++) {
    2bbe:	20e1      	movs	r0, #225	; 0xe1
    2bc0:	0180      	lsls	r0, r0, #6
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2bc2:	6822      	ldr	r2, [r4, #0]
    2bc4:	6951      	ldr	r1, [r2, #20]
    2bc6:	5cc9      	ldrb	r1, [r1, r3]
    2bc8:	6912      	ldr	r2, [r2, #16]
    2bca:	54d1      	strb	r1, [r2, r3]
    2bcc:	3301      	adds	r3, #1
    for (i=0;i<GFX_ET011TT2_DISPLAY_BUFFER_SIZE;i++) {
    2bce:	4283      	cmp	r3, r0
    2bd0:	d1f7      	bne.n	2bc2 <eink_et011tt2_put_display_buffer+0x3a>
}
    2bd2:	b009      	add	sp, #36	; 0x24
    2bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_write_data(UC8173_PON, 0, 0);
    2bd6:	2200      	movs	r2, #0
    2bd8:	2100      	movs	r1, #0
    2bda:	2004      	movs	r0, #4
    2bdc:	4b30      	ldr	r3, [pc, #192]	; (2ca0 <eink_et011tt2_put_display_buffer+0x118>)
    2bde:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2be0:	4f31      	ldr	r7, [pc, #196]	; (2ca8 <eink_et011tt2_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2be2:	4e32      	ldr	r6, [pc, #200]	; (2cac <eink_et011tt2_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2be4:	a801      	add	r0, sp, #4
    2be6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2be8:	23c0      	movs	r3, #192	; 0xc0
    2bea:	05db      	lsls	r3, r3, #23
    2bec:	2580      	movs	r5, #128	; 0x80
    2bee:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2bf0:	22a0      	movs	r2, #160	; 0xa0
    2bf2:	492f      	ldr	r1, [pc, #188]	; (2cb0 <eink_et011tt2_put_display_buffer+0x128>)
    2bf4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2bf6:	2190      	movs	r1, #144	; 0x90
    2bf8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2bfa:	4053      	eors	r3, r2
    2bfc:	401c      	ands	r4, r3
    2bfe:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c00:	a801      	add	r0, sp, #4
    2c02:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2c04:	4225      	tst	r5, r4
    2c06:	d0ed      	beq.n	2be4 <eink_et011tt2_put_display_buffer+0x5c>
	eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    2c08:	2220      	movs	r2, #32
    2c0a:	2155      	movs	r1, #85	; 0x55
    2c0c:	2020      	movs	r0, #32
    2c0e:	4c24      	ldr	r4, [pc, #144]	; (2ca0 <eink_et011tt2_put_display_buffer+0x118>)
    2c10:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    2c12:	2280      	movs	r2, #128	; 0x80
    2c14:	0092      	lsls	r2, r2, #2
    2c16:	2181      	movs	r1, #129	; 0x81
    2c18:	2022      	movs	r0, #34	; 0x22
    2c1a:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);
    2c1c:	2280      	movs	r2, #128	; 0x80
    2c1e:	2100      	movs	r1, #0
    2c20:	2026      	movs	r0, #38	; 0x26
    2c22:	47a0      	blx	r4
    eink_data[0] = 0x01; /* GU2 Update Mode */
    2c24:	a904      	add	r1, sp, #16
    2c26:	2301      	movs	r3, #1
    2c28:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2c2a:	2300      	movs	r3, #0
    2c2c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2c2e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2c30:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    2c32:	227f      	movs	r2, #127	; 0x7f
    2c34:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2c36:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    2c38:	33ff      	adds	r3, #255	; 0xff
    2c3a:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2c3c:	3a78      	subs	r2, #120	; 0x78
    2c3e:	2012      	movs	r0, #18
    2c40:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2c42:	4f19      	ldr	r7, [pc, #100]	; (2ca8 <eink_et011tt2_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2c44:	4e19      	ldr	r6, [pc, #100]	; (2cac <eink_et011tt2_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2c46:	a802      	add	r0, sp, #8
    2c48:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c4a:	23c0      	movs	r3, #192	; 0xc0
    2c4c:	05db      	lsls	r3, r3, #23
    2c4e:	2580      	movs	r5, #128	; 0x80
    2c50:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c52:	22a0      	movs	r2, #160	; 0xa0
    2c54:	4916      	ldr	r1, [pc, #88]	; (2cb0 <eink_et011tt2_put_display_buffer+0x128>)
    2c56:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c58:	2190      	movs	r1, #144	; 0x90
    2c5a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2c5c:	4053      	eors	r3, r2
    2c5e:	401c      	ands	r4, r3
    2c60:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c62:	a802      	add	r0, sp, #8
    2c64:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2c66:	4225      	tst	r5, r4
    2c68:	d0ed      	beq.n	2c46 <eink_et011tt2_put_display_buffer+0xbe>
    eink_write_data(UC8173_POF, 0, 0);
    2c6a:	2200      	movs	r2, #0
    2c6c:	2100      	movs	r1, #0
    2c6e:	2002      	movs	r0, #2
    2c70:	4b0b      	ldr	r3, [pc, #44]	; (2ca0 <eink_et011tt2_put_display_buffer+0x118>)
    2c72:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2c74:	4f0c      	ldr	r7, [pc, #48]	; (2ca8 <eink_et011tt2_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2c76:	4e0d      	ldr	r6, [pc, #52]	; (2cac <eink_et011tt2_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2c78:	a803      	add	r0, sp, #12
    2c7a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c7c:	23c0      	movs	r3, #192	; 0xc0
    2c7e:	05db      	lsls	r3, r3, #23
    2c80:	2580      	movs	r5, #128	; 0x80
    2c82:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c84:	22a0      	movs	r2, #160	; 0xa0
    2c86:	490a      	ldr	r1, [pc, #40]	; (2cb0 <eink_et011tt2_put_display_buffer+0x128>)
    2c88:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c8a:	2190      	movs	r1, #144	; 0x90
    2c8c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2c8e:	4053      	eors	r3, r2
    2c90:	401c      	ands	r4, r3
    2c92:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c94:	a803      	add	r0, sp, #12
    2c96:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    2c98:	4225      	tst	r5, r4
    2c9a:	d1ed      	bne.n	2c78 <eink_et011tt2_put_display_buffer+0xf0>
    2c9c:	e78d      	b.n	2bba <eink_et011tt2_put_display_buffer+0x32>
    2c9e:	46c0      	nop			; (mov r8, r8)
    2ca0:	00001ba5 	.word	0x00001ba5
    2ca4:	20000424 	.word	0x20000424
    2ca8:	0000034d 	.word	0x0000034d
    2cac:	0000035b 	.word	0x0000035b
    2cb0:	41004400 	.word	0x41004400

00002cb4 <eink_ed013tc1_put_display_buffer>:
{
    2cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb6:	b089      	sub	sp, #36	; 0x24
    2cb8:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2cba:	a906      	add	r1, sp, #24
    2cbc:	2300      	movs	r3, #0
    2cbe:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2cc0:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2cc2:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x7F; /* W = 127 */
    2cc4:	227f      	movs	r2, #127	; 0x7f
    2cc6:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2cc8:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xFF; /* H = 255 */
    2cca:	33ff      	adds	r3, #255	; 0xff
    2ccc:	714b      	strb	r3, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2cce:	3a79      	subs	r2, #121	; 0x79
    2cd0:	2014      	movs	r0, #20
    2cd2:	4c3e      	ldr	r4, [pc, #248]	; (2dcc <eink_ed013tc1_put_display_buffer+0x118>)
    2cd4:	47a0      	blx	r4
    eink_write_data(UC8173_DTM4, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    2cd6:	4b3e      	ldr	r3, [pc, #248]	; (2dd0 <eink_ed013tc1_put_display_buffer+0x11c>)
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	6959      	ldr	r1, [r3, #20]
    2cdc:	2280      	movs	r2, #128	; 0x80
    2cde:	0152      	lsls	r2, r2, #5
    2ce0:	2016      	movs	r0, #22
    2ce2:	47a0      	blx	r4
    if(refresh_display) {
    2ce4:	2d00      	cmp	r5, #0
    2ce6:	d10d      	bne.n	2d04 <eink_ed013tc1_put_display_buffer+0x50>
{
    2ce8:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2cea:	4c39      	ldr	r4, [pc, #228]	; (2dd0 <eink_ed013tc1_put_display_buffer+0x11c>)
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2cec:	2080      	movs	r0, #128	; 0x80
    2cee:	0140      	lsls	r0, r0, #5
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2cf0:	6822      	ldr	r2, [r4, #0]
    2cf2:	6951      	ldr	r1, [r2, #20]
    2cf4:	5cc9      	ldrb	r1, [r1, r3]
    2cf6:	6912      	ldr	r2, [r2, #16]
    2cf8:	54d1      	strb	r1, [r2, r3]
    2cfa:	3301      	adds	r3, #1
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2cfc:	4283      	cmp	r3, r0
    2cfe:	d1f7      	bne.n	2cf0 <eink_ed013tc1_put_display_buffer+0x3c>
}
    2d00:	b009      	add	sp, #36	; 0x24
    2d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_write_data(UC8173_PON, 0, 0);
    2d04:	2200      	movs	r2, #0
    2d06:	2100      	movs	r1, #0
    2d08:	2004      	movs	r0, #4
    2d0a:	4b30      	ldr	r3, [pc, #192]	; (2dcc <eink_ed013tc1_put_display_buffer+0x118>)
    2d0c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2d0e:	4f31      	ldr	r7, [pc, #196]	; (2dd4 <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2d10:	4e31      	ldr	r6, [pc, #196]	; (2dd8 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2d12:	a801      	add	r0, sp, #4
    2d14:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2d16:	23c0      	movs	r3, #192	; 0xc0
    2d18:	05db      	lsls	r3, r3, #23
    2d1a:	2580      	movs	r5, #128	; 0x80
    2d1c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d1e:	22a0      	movs	r2, #160	; 0xa0
    2d20:	492e      	ldr	r1, [pc, #184]	; (2ddc <eink_ed013tc1_put_display_buffer+0x128>)
    2d22:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d24:	2190      	movs	r1, #144	; 0x90
    2d26:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d28:	4053      	eors	r3, r2
    2d2a:	401c      	ands	r4, r3
    2d2c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2d2e:	a801      	add	r0, sp, #4
    2d30:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2d32:	4225      	tst	r5, r4
    2d34:	d0ed      	beq.n	2d12 <eink_ed013tc1_put_display_buffer+0x5e>
	eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    2d36:	2220      	movs	r2, #32
    2d38:	2155      	movs	r1, #85	; 0x55
    2d3a:	2020      	movs	r0, #32
    2d3c:	4c23      	ldr	r4, [pc, #140]	; (2dcc <eink_ed013tc1_put_display_buffer+0x118>)
    2d3e:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    2d40:	2280      	movs	r2, #128	; 0x80
    2d42:	0092      	lsls	r2, r2, #2
    2d44:	2181      	movs	r1, #129	; 0x81
    2d46:	2022      	movs	r0, #34	; 0x22
    2d48:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);
    2d4a:	2280      	movs	r2, #128	; 0x80
    2d4c:	2100      	movs	r1, #0
    2d4e:	2026      	movs	r0, #38	; 0x26
    2d50:	47a0      	blx	r4
    eink_data[0] = 0x01; /* GU2 Update Mode */
    2d52:	a904      	add	r1, sp, #16
    2d54:	2301      	movs	r3, #1
    2d56:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2d58:	2300      	movs	r3, #0
    2d5a:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2d5c:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2d5e:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    2d60:	227f      	movs	r2, #127	; 0x7f
    2d62:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2d64:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    2d66:	33ff      	adds	r3, #255	; 0xff
    2d68:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2d6a:	3a78      	subs	r2, #120	; 0x78
    2d6c:	2012      	movs	r0, #18
    2d6e:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2d70:	4f18      	ldr	r7, [pc, #96]	; (2dd4 <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2d72:	4e19      	ldr	r6, [pc, #100]	; (2dd8 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2d74:	a802      	add	r0, sp, #8
    2d76:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2d78:	23c0      	movs	r3, #192	; 0xc0
    2d7a:	05db      	lsls	r3, r3, #23
    2d7c:	2580      	movs	r5, #128	; 0x80
    2d7e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d80:	22a0      	movs	r2, #160	; 0xa0
    2d82:	4916      	ldr	r1, [pc, #88]	; (2ddc <eink_ed013tc1_put_display_buffer+0x128>)
    2d84:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d86:	2190      	movs	r1, #144	; 0x90
    2d88:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d8a:	4053      	eors	r3, r2
    2d8c:	401c      	ands	r4, r3
    2d8e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2d90:	a802      	add	r0, sp, #8
    2d92:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2d94:	4225      	tst	r5, r4
    2d96:	d0ed      	beq.n	2d74 <eink_ed013tc1_put_display_buffer+0xc0>
    eink_write_data(UC8173_POF, 0, 0);
    2d98:	2200      	movs	r2, #0
    2d9a:	2100      	movs	r1, #0
    2d9c:	2002      	movs	r0, #2
    2d9e:	4b0b      	ldr	r3, [pc, #44]	; (2dcc <eink_ed013tc1_put_display_buffer+0x118>)
    2da0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2da2:	4f0c      	ldr	r7, [pc, #48]	; (2dd4 <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2da4:	4e0c      	ldr	r6, [pc, #48]	; (2dd8 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2da6:	a803      	add	r0, sp, #12
    2da8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2daa:	23c0      	movs	r3, #192	; 0xc0
    2dac:	05db      	lsls	r3, r3, #23
    2dae:	2580      	movs	r5, #128	; 0x80
    2db0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2db2:	22a0      	movs	r2, #160	; 0xa0
    2db4:	4909      	ldr	r1, [pc, #36]	; (2ddc <eink_ed013tc1_put_display_buffer+0x128>)
    2db6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2db8:	2190      	movs	r1, #144	; 0x90
    2dba:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2dbc:	4053      	eors	r3, r2
    2dbe:	401c      	ands	r4, r3
    2dc0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2dc2:	a803      	add	r0, sp, #12
    2dc4:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    2dc6:	4225      	tst	r5, r4
    2dc8:	d1ed      	bne.n	2da6 <eink_ed013tc1_put_display_buffer+0xf2>
    2dca:	e78d      	b.n	2ce8 <eink_ed013tc1_put_display_buffer+0x34>
    2dcc:	00001ba5 	.word	0x00001ba5
    2dd0:	20000424 	.word	0x20000424
    2dd4:	0000034d 	.word	0x0000034d
    2dd8:	0000035b 	.word	0x0000035b
    2ddc:	41004400 	.word	0x41004400

00002de0 <eink_read_data>:
{    
    2de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2de2:	46de      	mov	lr, fp
    2de4:	4657      	mov	r7, sl
    2de6:	464e      	mov	r6, r9
    2de8:	4645      	mov	r5, r8
    2dea:	b5e0      	push	{r5, r6, r7, lr}
    2dec:	b083      	sub	sp, #12
    2dee:	000f      	movs	r7, r1
    2df0:	0016      	movs	r6, r2
    *data = 0;
    2df2:	2300      	movs	r3, #0
    2df4:	700b      	strb	r3, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2df6:	24c0      	movs	r4, #192	; 0xc0
    2df8:	05e4      	lsls	r4, r4, #23
    2dfa:	3301      	adds	r3, #1
    2dfc:	4698      	mov	r8, r3
    2dfe:	3393      	adds	r3, #147	; 0x93
    2e00:	4642      	mov	r2, r8
    2e02:	50e2      	str	r2, [r4, r3]
    2e04:	2520      	movs	r5, #32
    2e06:	6165      	str	r5, [r4, #20]
    eink_send_raw_byte(command, f_send);
    2e08:	2100      	movs	r1, #0
    2e0a:	4b2e      	ldr	r3, [pc, #184]	; (2ec4 <eink_read_data+0xe4>)
    2e0c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e0e:	2398      	movs	r3, #152	; 0x98
    2e10:	4642      	mov	r2, r8
    2e12:	50e2      	str	r2, [r4, r3]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2e14:	320f      	adds	r2, #15
    2e16:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e18:	4b2b      	ldr	r3, [pc, #172]	; (2ec8 <eink_read_data+0xe8>)
    2e1a:	492c      	ldr	r1, [pc, #176]	; (2ecc <eink_read_data+0xec>)
    2e1c:	6299      	str	r1, [r3, #40]	; 0x28
    2e1e:	492c      	ldr	r1, [pc, #176]	; (2ed0 <eink_read_data+0xf0>)
    2e20:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2e22:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2e24:	2144      	movs	r1, #68	; 0x44
    2e26:	4689      	mov	r9, r1
    2e28:	5c59      	ldrb	r1, [r3, r1]
    2e2a:	4688      	mov	r8, r1
    2e2c:	2104      	movs	r1, #4
    2e2e:	4640      	mov	r0, r8
    2e30:	4308      	orrs	r0, r1
    2e32:	0001      	movs	r1, r0
    2e34:	4648      	mov	r0, r9
    2e36:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e38:	61a2      	str	r2, [r4, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e3a:	6165      	str	r5, [r4, #20]
    for (j=0;j<data_bytes;j++) {
    2e3c:	2e00      	cmp	r6, #0
    2e3e:	d02e      	beq.n	2e9e <eink_read_data+0xbe>
    2e40:	46b3      	mov	fp, r6
    2e42:	44bb      	add	fp, r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e44:	2380      	movs	r3, #128	; 0x80
    2e46:	4698      	mov	r8, r3
    2e48:	469a      	mov	sl, r3
	CRITICAL_SECTION_ENTER();
    2e4a:	4b22      	ldr	r3, [pc, #136]	; (2ed4 <eink_read_data+0xf4>)
    2e4c:	4699      	mov	r9, r3
    2e4e:	e022      	b.n	2e96 <eink_read_data+0xb6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e50:	4643      	mov	r3, r8
    2e52:	6173      	str	r3, [r6, #20]
            if(i!=7) *data = *data << 1;
    2e54:	2c01      	cmp	r4, #1
    2e56:	d01b      	beq.n	2e90 <eink_read_data+0xb0>
    2e58:	783b      	ldrb	r3, [r7, #0]
    2e5a:	005b      	lsls	r3, r3, #1
    2e5c:	703b      	strb	r3, [r7, #0]
    2e5e:	3c01      	subs	r4, #1
    2e60:	b2a4      	uxth	r4, r4
        for (i=0;i<8;i++) {
    2e62:	2c00      	cmp	r4, #0
    2e64:	d014      	beq.n	2e90 <eink_read_data+0xb0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e66:	4653      	mov	r3, sl
    2e68:	61b3      	str	r3, [r6, #24]
    2e6a:	a801      	add	r0, sp, #4
    2e6c:	47c8      	blx	r9
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2e6e:	6835      	ldr	r5, [r6, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2e70:	4b15      	ldr	r3, [pc, #84]	; (2ec8 <eink_read_data+0xe8>)
    2e72:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2e74:	6933      	ldr	r3, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2e76:	4053      	eors	r3, r2
    2e78:	401d      	ands	r5, r3
    2e7a:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    2e7c:	a801      	add	r0, sp, #4
    2e7e:	4b16      	ldr	r3, [pc, #88]	; (2ed8 <eink_read_data+0xf8>)
    2e80:	4798      	blx	r3
            if (gpio_get_pin_level(EINK_SPI_SDA)) {
    2e82:	06eb      	lsls	r3, r5, #27
    2e84:	d5e4      	bpl.n	2e50 <eink_read_data+0x70>
                *data |= 1;
    2e86:	783b      	ldrb	r3, [r7, #0]
    2e88:	2201      	movs	r2, #1
    2e8a:	4313      	orrs	r3, r2
    2e8c:	703b      	strb	r3, [r7, #0]
    2e8e:	e7df      	b.n	2e50 <eink_read_data+0x70>
        data++;
    2e90:	3701      	adds	r7, #1
    for (j=0;j<data_bytes;j++) {
    2e92:	45bb      	cmp	fp, r7
    2e94:	d003      	beq.n	2e9e <eink_read_data+0xbe>
{    
    2e96:	2408      	movs	r4, #8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e98:	26c0      	movs	r6, #192	; 0xc0
    2e9a:	05f6      	lsls	r6, r6, #23
    2e9c:	e7e3      	b.n	2e66 <eink_read_data+0x86>
    2e9e:	23c0      	movs	r3, #192	; 0xc0
    2ea0:	05db      	lsls	r3, r3, #23
    2ea2:	2220      	movs	r2, #32
    2ea4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ea6:	3a10      	subs	r2, #16
    2ea8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2eaa:	4b07      	ldr	r3, [pc, #28]	; (2ec8 <eink_read_data+0xe8>)
    2eac:	4a0b      	ldr	r2, [pc, #44]	; (2edc <eink_read_data+0xfc>)
    2eae:	629a      	str	r2, [r3, #40]	; 0x28
    2eb0:	22c0      	movs	r2, #192	; 0xc0
    2eb2:	0612      	lsls	r2, r2, #24
    2eb4:	629a      	str	r2, [r3, #40]	; 0x28
}
    2eb6:	b003      	add	sp, #12
    2eb8:	bc3c      	pop	{r2, r3, r4, r5}
    2eba:	4690      	mov	r8, r2
    2ebc:	4699      	mov	r9, r3
    2ebe:	46a2      	mov	sl, r4
    2ec0:	46ab      	mov	fp, r5
    2ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ec4:	00001b61 	.word	0x00001b61
    2ec8:	41004400 	.word	0x41004400
    2ecc:	40020010 	.word	0x40020010
    2ed0:	c0020000 	.word	0xc0020000
    2ed4:	0000034d 	.word	0x0000034d
    2ed8:	0000035b 	.word	0x0000035b
    2edc:	40000010 	.word	0x40000010

00002ee0 <_eink_ite_write_data>:
void _eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes,
        uint8_t fast_write)
{   
    2ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ee2:	0004      	movs	r4, r0
    2ee4:	0015      	movs	r5, r2
    uint32_t i, j, sendWords_m, sendWords_r;
    
    eink_ite_wait_for_hrdy();
    2ee6:	4b12      	ldr	r3, [pc, #72]	; (2f30 <_eink_ite_write_data+0x50>)
    2ee8:	4798      	blx	r3
    if (command != 0) {
    2eea:	2c00      	cmp	r4, #0
    2eec:	d11d      	bne.n	2f2a <_eink_ite_write_data+0x4a>
        /* Set CSB LOW to enable communication to the display */
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
    }
    
    eink_ite_wait_for_hrdy();
    2eee:	4b10      	ldr	r3, [pc, #64]	; (2f30 <_eink_ite_write_data+0x50>)
    2ef0:	4798      	blx	r3
    if (data_bytes != 0) {
    2ef2:	2d00      	cmp	r5, #0
    2ef4:	d018      	beq.n	2f28 <_eink_ite_write_data+0x48>
        /* Data burst must be sent 1024 words at a time */
        sendWords_r = data_bytes % 2048;
    2ef6:	056e      	lsls	r6, r5, #21
    2ef8:	0d76      	lsrs	r6, r6, #21
        sendWords_m = (data_bytes - sendWords_r) / 2048;
    2efa:	1bad      	subs	r5, r5, r6
    2efc:	0aed      	lsrs	r5, r5, #11
        
        /* If we have more than 1024 words, start sending them in bursts */
        for(j=0; j<sendWords_m; j++)
    2efe:	2400      	movs	r4, #0
    2f00:	2d00      	cmp	r5, #0
    2f02:	d009      	beq.n	2f18 <_eink_ite_write_data+0x38>
            }           
            /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
            gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
            eink_ite_wait_for_hrdy();
    2f04:	4f0a      	ldr	r7, [pc, #40]	; (2f30 <_eink_ite_write_data+0x50>)
{   
    2f06:	2380      	movs	r3, #128	; 0x80
    2f08:	011b      	lsls	r3, r3, #4
    2f0a:	3b01      	subs	r3, #1
            for (i=0; i<2048; i++)
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d1fc      	bne.n	2f0a <_eink_ite_write_data+0x2a>
            eink_ite_wait_for_hrdy();
    2f10:	47b8      	blx	r7
        for(j=0; j<sendWords_m; j++)
    2f12:	3401      	adds	r4, #1
    2f14:	42a5      	cmp	r5, r4
    2f16:	d1f6      	bne.n	2f06 <_eink_ite_write_data+0x26>
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 0);
#endif
        eink_ite_send_raw_hword(0x0000);
        /* Send the remaining data (or all the data if there was less than 1024 words */
        for (i=0; i<sendWords_r; i++) {
    2f18:	2e00      	cmp	r6, #0
    2f1a:	d003      	beq.n	2f24 <_eink_ite_write_data+0x44>
    2f1c:	2300      	movs	r3, #0
    2f1e:	3301      	adds	r3, #1
    2f20:	429e      	cmp	r6, r3
    2f22:	d1fc      	bne.n	2f1e <_eink_ite_write_data+0x3e>
        }
        /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
        eink_ite_wait_for_hrdy();
    2f24:	4b02      	ldr	r3, [pc, #8]	; (2f30 <_eink_ite_write_data+0x50>)
    2f26:	4798      	blx	r3
    }
}
    2f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eink_ite_wait_for_hrdy();
    2f2a:	4b01      	ldr	r3, [pc, #4]	; (2f30 <_eink_ite_write_data+0x50>)
    2f2c:	4798      	blx	r3
    2f2e:	e7de      	b.n	2eee <_eink_ite_write_data+0xe>
    2f30:	00000575 	.word	0x00000575

00002f34 <eink_ite_write_data>:
 */
void eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    2f34:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 0);
    2f36:	2300      	movs	r3, #0
    2f38:	4c01      	ldr	r4, [pc, #4]	; (2f40 <eink_ite_write_data+0xc>)
    2f3a:	47a0      	blx	r4
}
    2f3c:	bd10      	pop	{r4, pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	00002ee1 	.word	0x00002ee1

00002f44 <eink_it8951_refresh_partial_display>:
    eink_coordinate show_x,
    eink_coordinate show_y,
    eink_coordinate show_w,
    eink_coordinate show_h,
    uint8_t update_mode)
{
    2f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f46:	b085      	sub	sp, #20
    2f48:	ac0a      	add	r4, sp, #40	; 0x28
    2f4a:	7825      	ldrb	r5, [r4, #0]
    uint16_t eink_data[5];
    switch(it8951_global_instance.display_rotation)
    2f4c:	2430      	movs	r4, #48	; 0x30
    2f4e:	4e26      	ldr	r6, [pc, #152]	; (2fe8 <eink_it8951_refresh_partial_display+0xa4>)
    2f50:	5d34      	ldrb	r4, [r6, r4]
    2f52:	b2e4      	uxtb	r4, r4
    2f54:	2c01      	cmp	r4, #1
    2f56:	d025      	beq.n	2fa4 <eink_it8951_refresh_partial_display+0x60>
    2f58:	2c00      	cmp	r4, #0
    2f5a:	d01d      	beq.n	2f98 <eink_it8951_refresh_partial_display+0x54>
    2f5c:	2c02      	cmp	r4, #2
    2f5e:	d02b      	beq.n	2fb8 <eink_it8951_refresh_partial_display+0x74>
    2f60:	2c03      	cmp	r4, #3
    2f62:	d036      	beq.n	2fd2 <eink_it8951_refresh_partial_display+0x8e>
            eink_data[1] = (uint16_t) show_y;
            eink_data[2] = (uint16_t) show_w;
            eink_data[3] = (uint16_t) show_h;
            break;
    }
    eink_data[4] = (uint16_t) update_mode;
    2f64:	a901      	add	r1, sp, #4
    2f66:	810d      	strh	r5, [r1, #8]
    /* Send I80 Display Command */
    eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2f68:	2201      	movs	r2, #1
    2f6a:	2034      	movs	r0, #52	; 0x34
    2f6c:	4c1f      	ldr	r4, [pc, #124]	; (2fec <eink_it8951_refresh_partial_display+0xa8>)
    2f6e:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[1], 1);
    2f70:	2201      	movs	r2, #1
    2f72:	466b      	mov	r3, sp
    2f74:	1d99      	adds	r1, r3, #6
    2f76:	2000      	movs	r0, #0
    2f78:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[2], 1);
    2f7a:	2201      	movs	r2, #1
    2f7c:	a902      	add	r1, sp, #8
    2f7e:	2000      	movs	r0, #0
    2f80:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[3], 1);
    2f82:	2201      	movs	r2, #1
    2f84:	210a      	movs	r1, #10
    2f86:	4469      	add	r1, sp
    2f88:	2000      	movs	r0, #0
    2f8a:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[4], 1);
    2f8c:	2201      	movs	r2, #1
    2f8e:	a903      	add	r1, sp, #12
    2f90:	2000      	movs	r0, #0
    2f92:	47a0      	blx	r4
}
    2f94:	b005      	add	sp, #20
    2f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_data[0] = (uint16_t) show_y;
    2f98:	ac01      	add	r4, sp, #4
    2f9a:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) show_x;
    2f9c:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2f9e:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2fa0:	80e2      	strh	r2, [r4, #6]
            break;
    2fa2:	e7df      	b.n	2f64 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) show_x;
    2fa4:	ac01      	add	r4, sp, #4
    2fa6:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_y-show_h;
    2fa8:	480f      	ldr	r0, [pc, #60]	; (2fe8 <eink_it8951_refresh_partial_display+0xa4>)
    2faa:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2fac:	1a41      	subs	r1, r0, r1
    2fae:	1ac9      	subs	r1, r1, r3
    2fb0:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    2fb2:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    2fb4:	80e3      	strh	r3, [r4, #6]
            break;
    2fb6:	e7d5      	b.n	2f64 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_y-show_h;
    2fb8:	4f0b      	ldr	r7, [pc, #44]	; (2fe8 <eink_it8951_refresh_partial_display+0xa4>)
    2fba:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
    2fbc:	ac01      	add	r4, sp, #4
    2fbe:	1a71      	subs	r1, r6, r1
    2fc0:	1ac9      	subs	r1, r1, r3
    2fc2:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_x-show_w;
    2fc4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
    2fc6:	1a08      	subs	r0, r1, r0
    2fc8:	1a80      	subs	r0, r0, r2
    2fca:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2fcc:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2fce:	80e2      	strh	r2, [r4, #6]
            break;
    2fd0:	e7c8      	b.n	2f64 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_x-show_w;
    2fd2:	4c05      	ldr	r4, [pc, #20]	; (2fe8 <eink_it8951_refresh_partial_display+0xa4>)
    2fd4:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
    2fd6:	ac01      	add	r4, sp, #4
    2fd8:	1a30      	subs	r0, r6, r0
    2fda:	1a80      	subs	r0, r0, r2
    2fdc:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) show_y;
    2fde:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    2fe0:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    2fe2:	80e3      	strh	r3, [r4, #6]
            break;
    2fe4:	e7be      	b.n	2f64 <eink_it8951_refresh_partial_display+0x20>
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	200003b4 	.word	0x200003b4
    2fec:	00002f35 	.word	0x00002f35

00002ff0 <eink_it8951_refresh_display_mode>:
{
    2ff0:	b510      	push	{r4, lr}
    2ff2:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    2ff4:	a901      	add	r1, sp, #4
    2ff6:	2300      	movs	r3, #0
    2ff8:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    2ffa:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    2ffc:	4b0e      	ldr	r3, [pc, #56]	; (3038 <eink_it8951_refresh_display_mode+0x48>)
    2ffe:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    3000:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    3002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3004:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    3006:	8108      	strh	r0, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    3008:	2201      	movs	r2, #1
    300a:	2034      	movs	r0, #52	; 0x34
    300c:	4c0b      	ldr	r4, [pc, #44]	; (303c <eink_it8951_refresh_display_mode+0x4c>)
    300e:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    3010:	2201      	movs	r2, #1
    3012:	466b      	mov	r3, sp
    3014:	1d99      	adds	r1, r3, #6
    3016:	2000      	movs	r0, #0
    3018:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    301a:	2201      	movs	r2, #1
    301c:	a902      	add	r1, sp, #8
    301e:	2000      	movs	r0, #0
    3020:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    3022:	2201      	movs	r2, #1
    3024:	210a      	movs	r1, #10
    3026:	4469      	add	r1, sp
    3028:	2000      	movs	r0, #0
    302a:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    302c:	2201      	movs	r2, #1
    302e:	a903      	add	r1, sp, #12
    3030:	2000      	movs	r0, #0
    3032:	47a0      	blx	r4
 }
    3034:	b004      	add	sp, #16
    3036:	bd10      	pop	{r4, pc}
    3038:	200003b4 	.word	0x200003b4
    303c:	00002f35 	.word	0x00002f35

00003040 <eink_it8951_put_partial_display_buffer>:
 * \param start_y starting Y coordinate start of the display buffer to send
 * \param window_w width of the display buffer to send
 * \param window_h height of the display buffer to send
 */
void eink_it8951_put_partial_display_buffer(eink_coordinate start_x, eink_coordinate start_y, eink_coordinate window_w, eink_coordinate window_h)
{
    3040:	b5f0      	push	{r4, r5, r6, r7, lr}
    3042:	46de      	mov	lr, fp
    3044:	4657      	mov	r7, sl
    3046:	464e      	mov	r6, r9
    3048:	4645      	mov	r5, r8
    304a:	b5e0      	push	{r5, r6, r7, lr}
    304c:	b087      	sub	sp, #28
    304e:	0004      	movs	r4, r0
    3050:	000d      	movs	r5, r1
    3052:	9201      	str	r2, [sp, #4]
    3054:	001f      	movs	r7, r3
    uint16_t eink_data[5], rotation = 0;
    uint16_t* display_buffer;
    uint32_t i, j, k;

    /* Get pointer to Display Buffer */
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    3056:	4b45      	ldr	r3, [pc, #276]	; (316c <eink_it8951_put_partial_display_buffer+0x12c>)
    3058:	681b      	ldr	r3, [r3, #0]
    305a:	4698      	mov	r8, r3
        
    /* Set Image Buffer Base address (IT8951) */
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    305c:	4e44      	ldr	r6, [pc, #272]	; (3170 <eink_it8951_put_partial_display_buffer+0x130>)
    305e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    3060:	6b72      	ldr	r2, [r6, #52]	; 0x34
    3062:	4692      	mov	sl, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    3064:	4a43      	ldr	r2, [pc, #268]	; (3174 <eink_it8951_put_partial_display_buffer+0x134>)
    3066:	a902      	add	r1, sp, #8
    3068:	800a      	strh	r2, [r1, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    306a:	0c1b      	lsrs	r3, r3, #16
    306c:	804b      	strh	r3, [r1, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    306e:	2202      	movs	r2, #2
    3070:	2011      	movs	r0, #17
    3072:	4b41      	ldr	r3, [pc, #260]	; (3178 <eink_it8951_put_partial_display_buffer+0x138>)
    3074:	469b      	mov	fp, r3
    3076:	4798      	blx	r3
    uint16_t data_send[2] = {reg_addr, reg_value};
    3078:	2382      	movs	r3, #130	; 0x82
    307a:	009b      	lsls	r3, r3, #2
    307c:	aa02      	add	r2, sp, #8
    307e:	8013      	strh	r3, [r2, #0]
    3080:	0013      	movs	r3, r2
    3082:	4652      	mov	r2, sl
    3084:	805a      	strh	r2, [r3, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    3086:	2202      	movs	r2, #2
    3088:	0019      	movs	r1, r3
    308a:	2011      	movs	r0, #17
    308c:	47d8      	blx	fp
    it8951_write_reg(LISAR + 2, usWordH);
    it8951_write_reg(LISAR, usWordL);
    
    /* Set arguments for Load Image Start */
    switch(it8951_global_instance.display_rotation)
    308e:	2330      	movs	r3, #48	; 0x30
    3090:	5cf3      	ldrb	r3, [r6, r3]
    3092:	b2db      	uxtb	r3, r3
    3094:	2b02      	cmp	r3, #2
    3096:	d022      	beq.n	30de <eink_it8951_put_partial_display_buffer+0x9e>
    3098:	2b03      	cmp	r3, #3
    309a:	d022      	beq.n	30e2 <eink_it8951_put_partial_display_buffer+0xa2>
    uint16_t eink_data[5], rotation = 0;
    309c:	3b01      	subs	r3, #1
    309e:	425a      	negs	r2, r3
    30a0:	4153      	adcs	r3, r2
        case ROTATE_0: rotation = 0; break;
        case ROTATE_90: rotation = 1; break;
        case ROTATE_180: rotation = 2; break;
        case ROTATE_270: rotation = 3; break;
    }
    eink_data[0] = (0 << 8) | (2 << 4) | (rotation);
    30a2:	a903      	add	r1, sp, #12
    30a4:	2220      	movs	r2, #32
    30a6:	4313      	orrs	r3, r2
    30a8:	800b      	strh	r3, [r1, #0]
    eink_data[1] = start_y;
    30aa:	804d      	strh	r5, [r1, #2]
    eink_data[2] = start_x;
    30ac:	808c      	strh	r4, [r1, #4]
    eink_data[3] = window_h;
    30ae:	80cf      	strh	r7, [r1, #6]
    eink_data[4] = window_w;
    30b0:	466b      	mov	r3, sp
    30b2:	889b      	ldrh	r3, [r3, #4]
    30b4:	810b      	strh	r3, [r1, #8]
    eink_ite_write_data(IT8951_I80_LD_IMG_AREA, eink_data, 5);
    30b6:	2205      	movs	r2, #5
    30b8:	2021      	movs	r0, #33	; 0x21
    30ba:	4b2f      	ldr	r3, [pc, #188]	; (3178 <eink_it8951_put_partial_display_buffer+0x138>)
    30bc:	4798      	blx	r3
    
    /* Move to start of the window within the display buffer */
    if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    30be:	2330      	movs	r3, #48	; 0x30
    30c0:	4a2b      	ldr	r2, [pc, #172]	; (3170 <eink_it8951_put_partial_display_buffer+0x130>)
    30c2:	5cd3      	ldrb	r3, [r2, r3]
    30c4:	2b00      	cmp	r3, #0
    30c6:	d00e      	beq.n	30e6 <eink_it8951_put_partial_display_buffer+0xa6>
    30c8:	2330      	movs	r3, #48	; 0x30
    30ca:	5cd3      	ldrb	r3, [r2, r3]
    30cc:	2b02      	cmp	r3, #2
    30ce:	d00a      	beq.n	30e6 <eink_it8951_put_partial_display_buffer+0xa6>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    else
        display_buffer += (it8951_global_instance.display_width / 4) * (start_x);
    30d0:	4b27      	ldr	r3, [pc, #156]	; (3170 <eink_it8951_put_partial_display_buffer+0x130>)
    30d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    30d4:	089b      	lsrs	r3, r3, #2
    30d6:	435c      	muls	r4, r3
    30d8:	0064      	lsls	r4, r4, #1
    30da:	4444      	add	r4, r8
    30dc:	e009      	b.n	30f2 <eink_it8951_put_partial_display_buffer+0xb2>
        case ROTATE_180: rotation = 2; break;
    30de:	2302      	movs	r3, #2
    30e0:	e7df      	b.n	30a2 <eink_it8951_put_partial_display_buffer+0x62>
        case ROTATE_270: rotation = 3; break;
    30e2:	2303      	movs	r3, #3
    30e4:	e7dd      	b.n	30a2 <eink_it8951_put_partial_display_buffer+0x62>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    30e6:	4b22      	ldr	r3, [pc, #136]	; (3170 <eink_it8951_put_partial_display_buffer+0x130>)
    30e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    30ea:	089b      	lsrs	r3, r3, #2
    30ec:	435c      	muls	r4, r3
    30ee:	0064      	lsls	r4, r4, #1
    30f0:	4444      	add	r4, r8
    display_buffer += (start_y / 4);
    30f2:	08ad      	lsrs	r5, r5, #2
    30f4:	006d      	lsls	r5, r5, #1
    30f6:	1964      	adds	r4, r4, r5
    
    /* Loop through window sending the display buffer */
    for(j = 0; j < window_w; j++)
    30f8:	9e01      	ldr	r6, [sp, #4]
    30fa:	2e00      	cmp	r6, #0
    30fc:	d02a      	beq.n	3154 <eink_it8951_put_partial_display_buffer+0x114>
    {
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    30fe:	08bb      	lsrs	r3, r7, #2
    3100:	9301      	str	r3, [sp, #4]
        display_buffer += (window_h / 4);
    3102:	005a      	lsls	r2, r3, #1
    3104:	4691      	mov	r9, r2
        
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
        else
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    3106:	469a      	mov	sl, r3
    3108:	2500      	movs	r5, #0
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    310a:	4b1b      	ldr	r3, [pc, #108]	; (3178 <eink_it8951_put_partial_display_buffer+0x138>)
    310c:	4698      	mov	r8, r3
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    310e:	4f18      	ldr	r7, [pc, #96]	; (3170 <eink_it8951_put_partial_display_buffer+0x130>)
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
    3110:	46bb      	mov	fp, r7
    3112:	e009      	b.n	3128 <eink_it8951_put_partial_display_buffer+0xe8>
    3114:	465b      	mov	r3, fp
    3116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    3118:	089b      	lsrs	r3, r3, #2
    311a:	4652      	mov	r2, sl
    311c:	1a9b      	subs	r3, r3, r2
    311e:	005b      	lsls	r3, r3, #1
    3120:	18e4      	adds	r4, r4, r3
    for(j = 0; j < window_w; j++)
    3122:	3501      	adds	r5, #1
    3124:	42b5      	cmp	r5, r6
    3126:	d215      	bcs.n	3154 <eink_it8951_put_partial_display_buffer+0x114>
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    3128:	9a01      	ldr	r2, [sp, #4]
    312a:	0021      	movs	r1, r4
    312c:	2000      	movs	r0, #0
    312e:	47c0      	blx	r8
        display_buffer += (window_h / 4);
    3130:	444c      	add	r4, r9
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    3132:	2330      	movs	r3, #48	; 0x30
    3134:	5cfb      	ldrb	r3, [r7, r3]
    3136:	2b00      	cmp	r3, #0
    3138:	d0ec      	beq.n	3114 <eink_it8951_put_partial_display_buffer+0xd4>
    313a:	2330      	movs	r3, #48	; 0x30
    313c:	4a0c      	ldr	r2, [pc, #48]	; (3170 <eink_it8951_put_partial_display_buffer+0x130>)
    313e:	5cd3      	ldrb	r3, [r2, r3]
    3140:	2b02      	cmp	r3, #2
    3142:	d0e7      	beq.n	3114 <eink_it8951_put_partial_display_buffer+0xd4>
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    3144:	4b0a      	ldr	r3, [pc, #40]	; (3170 <eink_it8951_put_partial_display_buffer+0x130>)
    3146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3148:	089b      	lsrs	r3, r3, #2
    314a:	4652      	mov	r2, sl
    314c:	1a9b      	subs	r3, r3, r2
    314e:	005b      	lsls	r3, r3, #1
    3150:	18e4      	adds	r4, r4, r3
    3152:	e7e6      	b.n	3122 <eink_it8951_put_partial_display_buffer+0xe2>
    }
    
    /* Send Load Img End Command */
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    3154:	2200      	movs	r2, #0
    3156:	2100      	movs	r1, #0
    3158:	2022      	movs	r0, #34	; 0x22
    315a:	4b07      	ldr	r3, [pc, #28]	; (3178 <eink_it8951_put_partial_display_buffer+0x138>)
    315c:	4798      	blx	r3
}
    315e:	b007      	add	sp, #28
    3160:	bc3c      	pop	{r2, r3, r4, r5}
    3162:	4690      	mov	r8, r2
    3164:	4699      	mov	r9, r3
    3166:	46a2      	mov	sl, r4
    3168:	46ab      	mov	fp, r5
    316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    316c:	20000398 	.word	0x20000398
    3170:	200003b4 	.word	0x200003b4
    3174:	0000020a 	.word	0x0000020a
    3178:	00002f35 	.word	0x00002f35

0000317c <eink_it8951_refresh_display>:
{
    317c:	b510      	push	{r4, lr}
    317e:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    3180:	a901      	add	r1, sp, #4
    3182:	2300      	movs	r3, #0
    3184:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    3186:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    3188:	4b0f      	ldr	r3, [pc, #60]	; (31c8 <eink_it8951_refresh_display+0x4c>)
    318a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    318c:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3190:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    3192:	2302      	movs	r3, #2
    3194:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    3196:	2201      	movs	r2, #1
    3198:	2034      	movs	r0, #52	; 0x34
    319a:	4c0c      	ldr	r4, [pc, #48]	; (31cc <eink_it8951_refresh_display+0x50>)
    319c:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    319e:	2201      	movs	r2, #1
    31a0:	466b      	mov	r3, sp
    31a2:	1d99      	adds	r1, r3, #6
    31a4:	2000      	movs	r0, #0
    31a6:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    31a8:	2201      	movs	r2, #1
    31aa:	a902      	add	r1, sp, #8
    31ac:	2000      	movs	r0, #0
    31ae:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    31b0:	2201      	movs	r2, #1
    31b2:	210a      	movs	r1, #10
    31b4:	4469      	add	r1, sp
    31b6:	2000      	movs	r0, #0
    31b8:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    31ba:	2201      	movs	r2, #1
    31bc:	a903      	add	r1, sp, #12
    31be:	2000      	movs	r0, #0
    31c0:	47a0      	blx	r4
}
    31c2:	b004      	add	sp, #16
    31c4:	bd10      	pop	{r4, pc}
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	200003b4 	.word	0x200003b4
    31cc:	00002f35 	.word	0x00002f35

000031d0 <eink_ite_write_data_fast>:
 */
void eink_ite_write_data_fast(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    31d0:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 1);
    31d2:	2301      	movs	r3, #1
    31d4:	4c01      	ldr	r4, [pc, #4]	; (31dc <eink_ite_write_data_fast+0xc>)
    31d6:	47a0      	blx	r4
}
    31d8:	bd10      	pop	{r4, pc}
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	00002ee1 	.word	0x00002ee1

000031e0 <eink_it8951_put_display_buffer>:
{
    31e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31e2:	46c6      	mov	lr, r8
    31e4:	b500      	push	{lr}
    31e6:	b084      	sub	sp, #16
    31e8:	0005      	movs	r5, r0
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    31ea:	4e31      	ldr	r6, [pc, #196]	; (32b0 <eink_it8951_put_display_buffer+0xd0>)
    31ec:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    31ee:	6b72      	ldr	r2, [r6, #52]	; 0x34
    31f0:	4690      	mov	r8, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    31f2:	ac01      	add	r4, sp, #4
    31f4:	4a2f      	ldr	r2, [pc, #188]	; (32b4 <eink_it8951_put_display_buffer+0xd4>)
    31f6:	8022      	strh	r2, [r4, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    31f8:	0c1b      	lsrs	r3, r3, #16
    31fa:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    31fc:	2202      	movs	r2, #2
    31fe:	0021      	movs	r1, r4
    3200:	2011      	movs	r0, #17
    3202:	4f2d      	ldr	r7, [pc, #180]	; (32b8 <eink_it8951_put_display_buffer+0xd8>)
    3204:	47b8      	blx	r7
    uint16_t data_send[2] = {reg_addr, reg_value};
    3206:	2382      	movs	r3, #130	; 0x82
    3208:	009b      	lsls	r3, r3, #2
    320a:	8023      	strh	r3, [r4, #0]
    320c:	4643      	mov	r3, r8
    320e:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    3210:	2202      	movs	r2, #2
    3212:	0021      	movs	r1, r4
    3214:	2011      	movs	r0, #17
    3216:	47b8      	blx	r7
    switch(it8951_global_instance.display_rotation)
    3218:	2330      	movs	r3, #48	; 0x30
    321a:	5cf3      	ldrb	r3, [r6, r3]
    321c:	b2db      	uxtb	r3, r3
    321e:	2b02      	cmp	r3, #2
    3220:	d01f      	beq.n	3262 <eink_it8951_put_display_buffer+0x82>
    3222:	2b03      	cmp	r3, #3
    3224:	d01f      	beq.n	3266 <eink_it8951_put_display_buffer+0x86>
    uint16_t eink_data, rotation = 0;
    3226:	3b01      	subs	r3, #1
    3228:	425a      	negs	r2, r3
    322a:	4153      	adcs	r3, r2
    eink_data = (0 << 8) | (2 << 4) | (rotation);
    322c:	210e      	movs	r1, #14
    322e:	4469      	add	r1, sp
    3230:	2220      	movs	r2, #32
    3232:	4313      	orrs	r3, r2
    3234:	800b      	strh	r3, [r1, #0]
    eink_ite_write_data(IT8951_I80_LD_IMG, &eink_data, 1);
    3236:	2201      	movs	r2, #1
    3238:	2020      	movs	r0, #32
    323a:	4c1f      	ldr	r4, [pc, #124]	; (32b8 <eink_it8951_put_display_buffer+0xd8>)
    323c:	47a0      	blx	r4
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    323e:	4b1c      	ldr	r3, [pc, #112]	; (32b0 <eink_it8951_put_display_buffer+0xd0>)
    3240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3242:	0852      	lsrs	r2, r2, #1
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    3244:	4b1d      	ldr	r3, [pc, #116]	; (32bc <eink_it8951_put_display_buffer+0xdc>)
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    3246:	6819      	ldr	r1, [r3, #0]
    3248:	2000      	movs	r0, #0
    324a:	4b1d      	ldr	r3, [pc, #116]	; (32c0 <eink_it8951_put_display_buffer+0xe0>)
    324c:	4798      	blx	r3
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    324e:	2200      	movs	r2, #0
    3250:	2100      	movs	r1, #0
    3252:	2022      	movs	r0, #34	; 0x22
    3254:	47a0      	blx	r4
    if(refresh_display) eink_it8951_refresh_display();
    3256:	2d00      	cmp	r5, #0
    3258:	d107      	bne.n	326a <eink_it8951_put_display_buffer+0x8a>
}
    325a:	b004      	add	sp, #16
    325c:	bc04      	pop	{r2}
    325e:	4690      	mov	r8, r2
    3260:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case ROTATE_180: rotation = 2; break;
    3262:	2302      	movs	r3, #2
    3264:	e7e2      	b.n	322c <eink_it8951_put_display_buffer+0x4c>
        case ROTATE_270: rotation = 3; break;
    3266:	2303      	movs	r3, #3
    3268:	e7e0      	b.n	322c <eink_it8951_put_display_buffer+0x4c>
     eink_data[0] = (uint16_t) 0;
    326a:	a901      	add	r1, sp, #4
    326c:	2300      	movs	r3, #0
    326e:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    3270:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    3272:	4b0f      	ldr	r3, [pc, #60]	; (32b0 <eink_it8951_put_display_buffer+0xd0>)
    3274:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    3276:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    3278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    327a:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    327c:	2302      	movs	r3, #2
    327e:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    3280:	2201      	movs	r2, #1
    3282:	2034      	movs	r0, #52	; 0x34
    3284:	4c0c      	ldr	r4, [pc, #48]	; (32b8 <eink_it8951_put_display_buffer+0xd8>)
    3286:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    3288:	2201      	movs	r2, #1
    328a:	466b      	mov	r3, sp
    328c:	1d99      	adds	r1, r3, #6
    328e:	2000      	movs	r0, #0
    3290:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    3292:	2201      	movs	r2, #1
    3294:	a902      	add	r1, sp, #8
    3296:	2000      	movs	r0, #0
    3298:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    329a:	2201      	movs	r2, #1
    329c:	210a      	movs	r1, #10
    329e:	4469      	add	r1, sp
    32a0:	2000      	movs	r0, #0
    32a2:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    32a4:	2201      	movs	r2, #1
    32a6:	a903      	add	r1, sp, #12
    32a8:	2000      	movs	r0, #0
    32aa:	47a0      	blx	r4
}
    32ac:	e7d5      	b.n	325a <eink_it8951_put_display_buffer+0x7a>
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	200003b4 	.word	0x200003b4
    32b4:	0000020a 	.word	0x0000020a
    32b8:	00002f35 	.word	0x00002f35
    32bc:	20000398 	.word	0x20000398
    32c0:	000031d1 	.word	0x000031d1

000032c4 <eink_ite_set_bit>:
 * \param bit_value Bit value.
 */
void eink_ite_set_bit(uint8_t *byte, uint8_t bit_number, bool bit_value)
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
    32c4:	2a00      	cmp	r2, #0
    32c6:	d105      	bne.n	32d4 <eink_ite_set_bit+0x10>
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
    32c8:	2201      	movs	r2, #1
    32ca:	408a      	lsls	r2, r1
    32cc:	7803      	ldrb	r3, [r0, #0]
    32ce:	4393      	bics	r3, r2
    32d0:	7003      	strb	r3, [r0, #0]
    }
    32d2:	4770      	bx	lr
        *byte |= 1 << bit_number;
    32d4:	2201      	movs	r2, #1
    32d6:	408a      	lsls	r2, r1
    32d8:	7803      	ldrb	r3, [r0, #0]
    32da:	4313      	orrs	r3, r2
    32dc:	7003      	strb	r3, [r0, #0]
    32de:	e7f8      	b.n	32d2 <eink_ite_set_bit+0xe>

000032e0 <eink_it8951_set_pixel_raw>:
 * \param x_set X coordinate of the pixel to set.
 * \param y_set Y coordinate of the pixel to set.
 * \param pixel_value Greyscale value to set the pixel to.
 */
void eink_it8951_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value)
{
    32e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32e2:	46c6      	mov	lr, r8
    32e4:	b500      	push	{lr}
    32e6:	0015      	movs	r5, r2
    eink_coordinate x1_set, y1_set, odd_even_bit;
    uint32_t byte_set;
    
    /* Ignore any pixels being set outside of the display window */
    if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    32e8:	4b34      	ldr	r3, [pc, #208]	; (33bc <eink_it8951_set_pixel_raw+0xdc>)
    32ea:	681f      	ldr	r7, [r3, #0]
    32ec:	887b      	ldrh	r3, [r7, #2]
    32ee:	4283      	cmp	r3, r0
    32f0:	d93f      	bls.n	3372 <eink_it8951_set_pixel_raw+0x92>
    32f2:	88bb      	ldrh	r3, [r7, #4]
    32f4:	428b      	cmp	r3, r1
    32f6:	d93c      	bls.n	3372 <eink_it8951_set_pixel_raw+0x92>
        
        if ( (it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180) ) {
    32f8:	2330      	movs	r3, #48	; 0x30
    32fa:	4a31      	ldr	r2, [pc, #196]	; (33c0 <eink_it8951_set_pixel_raw+0xe0>)
    32fc:	5cd3      	ldrb	r3, [r2, r3]
    32fe:	2b00      	cmp	r3, #0
    3300:	d00c      	beq.n	331c <eink_it8951_set_pixel_raw+0x3c>
    3302:	2330      	movs	r3, #48	; 0x30
    3304:	5cd3      	ldrb	r3, [r2, r3]
    3306:	2b02      	cmp	r3, #2
    3308:	d008      	beq.n	331c <eink_it8951_set_pixel_raw+0x3c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
            odd_even_bit = y_set % 2;
        } else {
            /* Calculate which byte the pixel in question is contained in */
            y1_set = (y_set - (y_set % 2)) / 2;
            byte_set = y1_set + ((it8951_global_instance.display_config.display_height / 2) * x_set);
    330a:	4b2d      	ldr	r3, [pc, #180]	; (33c0 <eink_it8951_set_pixel_raw+0xe0>)
    330c:	885c      	ldrh	r4, [r3, #2]
    330e:	0864      	lsrs	r4, r4, #1
    3310:	4360      	muls	r0, r4
    3312:	104c      	asrs	r4, r1, #1
    3314:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    3316:	2301      	movs	r3, #1
    3318:	4019      	ands	r1, r3
    331a:	e007      	b.n	332c <eink_it8951_set_pixel_raw+0x4c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
    331c:	4b28      	ldr	r3, [pc, #160]	; (33c0 <eink_it8951_set_pixel_raw+0xe0>)
    331e:	881c      	ldrh	r4, [r3, #0]
    3320:	0864      	lsrs	r4, r4, #1
    3322:	4360      	muls	r0, r4
    3324:	104c      	asrs	r4, r1, #1
    3326:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    3328:	2301      	movs	r3, #1
    332a:	4019      	ands	r1, r3
        }
        
        if (!odd_even_bit) {
    332c:	2900      	cmp	r1, #0
    332e:	d023      	beq.n	3378 <eink_it8951_set_pixel_raw+0x98>
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
        } else {
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_value >> 3) & 0x1));
    3330:	08ea      	lsrs	r2, r5, #3
    3332:	2601      	movs	r6, #1
    3334:	4032      	ands	r2, r6
    3336:	6938      	ldr	r0, [r7, #16]
    3338:	1900      	adds	r0, r0, r4
    333a:	2107      	movs	r1, #7
    333c:	4f21      	ldr	r7, [pc, #132]	; (33c4 <eink_it8951_set_pixel_raw+0xe4>)
    333e:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_value >> 2) & 0x1));
    3340:	08aa      	lsrs	r2, r5, #2
    3342:	4032      	ands	r2, r6
    3344:	4b1d      	ldr	r3, [pc, #116]	; (33bc <eink_it8951_set_pixel_raw+0xdc>)
    3346:	4698      	mov	r8, r3
    3348:	681b      	ldr	r3, [r3, #0]
    334a:	6918      	ldr	r0, [r3, #16]
    334c:	1900      	adds	r0, r0, r4
    334e:	2106      	movs	r1, #6
    3350:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_value >> 1) & 0x1));
    3352:	086a      	lsrs	r2, r5, #1
    3354:	4032      	ands	r2, r6
    3356:	4643      	mov	r3, r8
    3358:	681b      	ldr	r3, [r3, #0]
    335a:	6918      	ldr	r0, [r3, #16]
    335c:	1900      	adds	r0, r0, r4
    335e:	2105      	movs	r1, #5
    3360:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_value & 0x1));
    3362:	0032      	movs	r2, r6
    3364:	402a      	ands	r2, r5
    3366:	4643      	mov	r3, r8
    3368:	681b      	ldr	r3, [r3, #0]
    336a:	6918      	ldr	r0, [r3, #16]
    336c:	1900      	adds	r0, r0, r4
    336e:	2104      	movs	r1, #4
    3370:	47b8      	blx	r7
        }
    }
}
    3372:	bc04      	pop	{r2}
    3374:	4690      	mov	r8, r2
    3376:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
    3378:	08ea      	lsrs	r2, r5, #3
    337a:	2601      	movs	r6, #1
    337c:	4032      	ands	r2, r6
    337e:	6938      	ldr	r0, [r7, #16]
    3380:	1900      	adds	r0, r0, r4
    3382:	3103      	adds	r1, #3
    3384:	4f0f      	ldr	r7, [pc, #60]	; (33c4 <eink_it8951_set_pixel_raw+0xe4>)
    3386:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
    3388:	08aa      	lsrs	r2, r5, #2
    338a:	4032      	ands	r2, r6
    338c:	4b0b      	ldr	r3, [pc, #44]	; (33bc <eink_it8951_set_pixel_raw+0xdc>)
    338e:	4698      	mov	r8, r3
    3390:	681b      	ldr	r3, [r3, #0]
    3392:	6918      	ldr	r0, [r3, #16]
    3394:	1900      	adds	r0, r0, r4
    3396:	2102      	movs	r1, #2
    3398:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
    339a:	086a      	lsrs	r2, r5, #1
    339c:	4032      	ands	r2, r6
    339e:	4643      	mov	r3, r8
    33a0:	681b      	ldr	r3, [r3, #0]
    33a2:	6918      	ldr	r0, [r3, #16]
    33a4:	1900      	adds	r0, r0, r4
    33a6:	2101      	movs	r1, #1
    33a8:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
    33aa:	0032      	movs	r2, r6
    33ac:	402a      	ands	r2, r5
    33ae:	4643      	mov	r3, r8
    33b0:	681b      	ldr	r3, [r3, #0]
    33b2:	6918      	ldr	r0, [r3, #16]
    33b4:	1900      	adds	r0, r0, r4
    33b6:	2100      	movs	r1, #0
    33b8:	47b8      	blx	r7
    33ba:	e7da      	b.n	3372 <eink_it8951_set_pixel_raw+0x92>
    33bc:	20000424 	.word	0x20000424
    33c0:	200003b4 	.word	0x200003b4
    33c4:	000032c5 	.word	0x000032c5

000033c8 <eink_it8951_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_it8951_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    33c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ca:	46de      	mov	lr, fp
    33cc:	4657      	mov	r7, sl
    33ce:	464e      	mov	r6, r9
    33d0:	4645      	mov	r5, r8
    33d2:	b5e0      	push	{r5, r6, r7, lr}
    33d4:	b087      	sub	sp, #28
    33d6:	9000      	str	r0, [sp, #0]
    33d8:	0011      	movs	r1, r2
    33da:	9201      	str	r2, [sp, #4]
    33dc:	4699      	mov	r9, r3
    33de:	ab10      	add	r3, sp, #64	; 0x40
    33e0:	881b      	ldrh	r3, [r3, #0]
    33e2:	469a      	mov	sl, r3
    33e4:	ab11      	add	r3, sp, #68	; 0x44
    33e6:	881b      	ldrh	r3, [r3, #0]
    33e8:	469b      	mov	fp, r3
    volatile uint16_t buffer_index, i, j;
    volatile uint16_t k, l, m, bit_value_1, bit_value_2;
    eink_coordinate x_set, y_set;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    33ea:	230e      	movs	r3, #14
    33ec:	aa02      	add	r2, sp, #8
    33ee:	4694      	mov	ip, r2
    33f0:	4463      	add	r3, ip
    33f2:	2200      	movs	r2, #0
    33f4:	801a      	strh	r2, [r3, #0]
    33f6:	881b      	ldrh	r3, [r3, #0]
    33f8:	b29b      	uxth	r3, r3
    33fa:	4299      	cmp	r1, r3
    33fc:	d966      	bls.n	34cc <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    33fe:	260a      	movs	r6, #10
    3400:	4466      	add	r6, ip
        for (j = 0; j < image_height_bytes; j++) {
            x_set = x_place+i;
            y_set = y_place+m;
            
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3402:	4f36      	ldr	r7, [pc, #216]	; (34dc <eink_it8951_graphics_load_4bgrey_image+0x114>)
    3404:	464d      	mov	r5, r9
    3406:	46d1      	mov	r9, sl
    3408:	e054      	b.n	34b4 <eink_it8951_graphics_load_4bgrey_image+0xec>
                /* Set the pixel in the display buffer */
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
            }

        m += 2;
    340a:	8833      	ldrh	r3, [r6, #0]
    340c:	3302      	adds	r3, #2
    340e:	b29b      	uxth	r3, r3
    3410:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    3412:	8823      	ldrh	r3, [r4, #0]
    3414:	3301      	adds	r3, #1
    3416:	b29b      	uxth	r3, r3
    3418:	8023      	strh	r3, [r4, #0]
    341a:	8823      	ldrh	r3, [r4, #0]
    341c:	b29b      	uxth	r3, r3
    341e:	42ab      	cmp	r3, r5
    3420:	d23a      	bcs.n	3498 <eink_it8951_graphics_load_4bgrey_image+0xd0>
            x_set = x_place+i;
    3422:	230e      	movs	r3, #14
    3424:	aa02      	add	r2, sp, #8
    3426:	4694      	mov	ip, r2
    3428:	4463      	add	r3, ip
    342a:	881b      	ldrh	r3, [r3, #0]
    342c:	444b      	add	r3, r9
    342e:	b29b      	uxth	r3, r3
    3430:	4698      	mov	r8, r3
            y_set = y_place+m;
    3432:	8833      	ldrh	r3, [r6, #0]
    3434:	b29b      	uxth	r3, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3436:	683a      	ldr	r2, [r7, #0]
    3438:	8851      	ldrh	r1, [r2, #2]
    343a:	4541      	cmp	r1, r8
    343c:	d9e5      	bls.n	340a <eink_it8951_graphics_load_4bgrey_image+0x42>
            y_set = y_place+m;
    343e:	4453      	add	r3, sl
    3440:	b29b      	uxth	r3, r3
    3442:	469b      	mov	fp, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3444:	8893      	ldrh	r3, [r2, #4]
    3446:	455b      	cmp	r3, fp
    3448:	d9df      	bls.n	340a <eink_it8951_graphics_load_4bgrey_image+0x42>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    344a:	210e      	movs	r1, #14
    344c:	4461      	add	r1, ip
    344e:	880b      	ldrh	r3, [r1, #0]
    3450:	8822      	ldrh	r2, [r4, #0]
    3452:	436b      	muls	r3, r5
    3454:	9800      	ldr	r0, [sp, #0]
    3456:	4684      	mov	ip, r0
    3458:	4462      	add	r2, ip
    345a:	5cd2      	ldrb	r2, [r2, r3]
    345c:	230f      	movs	r3, #15
    345e:	4013      	ands	r3, r2
    3460:	aa04      	add	r2, sp, #16
    3462:	8013      	strh	r3, [r2, #0]
                bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    3464:	880b      	ldrh	r3, [r1, #0]
    3466:	8821      	ldrh	r1, [r4, #0]
    3468:	436b      	muls	r3, r5
    346a:	4461      	add	r1, ip
    346c:	5ccb      	ldrb	r3, [r1, r3]
    346e:	091b      	lsrs	r3, r3, #4
    3470:	a902      	add	r1, sp, #8
    3472:	80cb      	strh	r3, [r1, #6]
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
    3474:	8812      	ldrh	r2, [r2, #0]
    3476:	43d2      	mvns	r2, r2
    3478:	b2d2      	uxtb	r2, r2
    347a:	465b      	mov	r3, fp
    347c:	1c59      	adds	r1, r3, #1
    347e:	b289      	uxth	r1, r1
    3480:	4640      	mov	r0, r8
    3482:	4b17      	ldr	r3, [pc, #92]	; (34e0 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    3484:	4798      	blx	r3
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
    3486:	ab02      	add	r3, sp, #8
    3488:	88da      	ldrh	r2, [r3, #6]
    348a:	43d2      	mvns	r2, r2
    348c:	b2d2      	uxtb	r2, r2
    348e:	4659      	mov	r1, fp
    3490:	4640      	mov	r0, r8
    3492:	4b13      	ldr	r3, [pc, #76]	; (34e0 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    3494:	4798      	blx	r3
    3496:	e7b8      	b.n	340a <eink_it8951_graphics_load_4bgrey_image+0x42>
    3498:	46d3      	mov	fp, sl
    for (i = 0; i < image_width_px; i++) {
    349a:	220e      	movs	r2, #14
    349c:	ab02      	add	r3, sp, #8
    349e:	469c      	mov	ip, r3
    34a0:	4462      	add	r2, ip
    34a2:	8813      	ldrh	r3, [r2, #0]
    34a4:	3301      	adds	r3, #1
    34a6:	b29b      	uxth	r3, r3
    34a8:	8013      	strh	r3, [r2, #0]
    34aa:	8813      	ldrh	r3, [r2, #0]
    34ac:	b29b      	uxth	r3, r3
    34ae:	9a01      	ldr	r2, [sp, #4]
    34b0:	4293      	cmp	r3, r2
    34b2:	d20b      	bcs.n	34cc <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    34b4:	2300      	movs	r3, #0
    34b6:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    34b8:	ab05      	add	r3, sp, #20
    34ba:	2200      	movs	r2, #0
    34bc:	801a      	strh	r2, [r3, #0]
    34be:	881b      	ldrh	r3, [r3, #0]
    34c0:	b29b      	uxth	r3, r3
    34c2:	429d      	cmp	r5, r3
    34c4:	d9e9      	bls.n	349a <eink_it8951_graphics_load_4bgrey_image+0xd2>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    34c6:	ac05      	add	r4, sp, #20
    34c8:	46da      	mov	sl, fp
    34ca:	e7aa      	b.n	3422 <eink_it8951_graphics_load_4bgrey_image+0x5a>
        }
    }
    34cc:	b007      	add	sp, #28
    34ce:	bc3c      	pop	{r2, r3, r4, r5}
    34d0:	4690      	mov	r8, r2
    34d2:	4699      	mov	r9, r3
    34d4:	46a2      	mov	sl, r4
    34d6:	46ab      	mov	fp, r5
    34d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	20000424 	.word	0x20000424
    34e0:	000032e1 	.word	0x000032e1

000034e4 <uc8173_init>:
 *
 * Call this function to initialize the hardware interface and the UC8173 display
 * driver. When initialization is done the display is ready to receive data.
 */
void uc8173_init(void)
{
    34e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e6:	b083      	sub	sp, #12
    /* Initialize delay routine */
    delay_init(SysTick);
    34e8:	4812      	ldr	r0, [pc, #72]	; (3534 <uc8173_init+0x50>)
    34ea:	4b13      	ldr	r3, [pc, #76]	; (3538 <uc8173_init+0x54>)
    34ec:	4798      	blx	r3

    /* Initialize the interface */
    eink_interface_init(0);
    34ee:	2000      	movs	r0, #0
    34f0:	4b12      	ldr	r3, [pc, #72]	; (353c <uc8173_init+0x58>)
    34f2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34f4:	25c0      	movs	r5, #192	; 0xc0
    34f6:	05ed      	lsls	r5, r5, #23
    34f8:	2640      	movs	r6, #64	; 0x40
    34fa:	616e      	str	r6, [r5, #20]
    delay_ms(1);
    34fc:	2001      	movs	r0, #1
    34fe:	4c10      	ldr	r4, [pc, #64]	; (3540 <uc8173_init+0x5c>)
    3500:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3502:	61ae      	str	r6, [r5, #24]
    delay_ms(1);
    3504:	2001      	movs	r0, #1
    3506:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    3508:	4f0e      	ldr	r7, [pc, #56]	; (3544 <uc8173_init+0x60>)
	CRITICAL_SECTION_LEAVE();
    350a:	4e0f      	ldr	r6, [pc, #60]	; (3548 <uc8173_init+0x64>)
	CRITICAL_SECTION_ENTER();
    350c:	a801      	add	r0, sp, #4
    350e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3510:	23c0      	movs	r3, #192	; 0xc0
    3512:	05db      	lsls	r3, r3, #23
    3514:	2580      	movs	r5, #128	; 0x80
    3516:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3518:	22a0      	movs	r2, #160	; 0xa0
    351a:	490c      	ldr	r1, [pc, #48]	; (354c <uc8173_init+0x68>)
    351c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    351e:	2190      	movs	r1, #144	; 0x90
    3520:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3522:	4053      	eors	r3, r2
    3524:	401c      	ands	r4, r3
    3526:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3528:	a801      	add	r0, sp, #4
    352a:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    352c:	4225      	tst	r5, r4
    352e:	d0ed      	beq.n	350c <uc8173_init+0x28>
    /* Reset display */
    uc8173_hard_reset();
    
    /* Wait for BUSY output to return HIGH */
    uc8173_wait_for_busy_low();
}
    3530:	b003      	add	sp, #12
    3532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3534:	e000e010 	.word	0xe000e010
    3538:	00000369 	.word	0x00000369
    353c:	00000dc1 	.word	0x00000dc1
    3540:	0000037d 	.word	0x0000037d
    3544:	0000034d 	.word	0x0000034d
    3548:	0000035b 	.word	0x0000035b
    354c:	41004400 	.word	0x41004400

00003550 <uc8173_measure_vcom>:
 *
 * Measure the VCOM voltage from the UC8173's internal mechanism and sets the 
 * VDCS and VBDS setting.
 */
void uc8173_measure_vcom(void)
{
    3550:	b5f0      	push	{r4, r5, r6, r7, lr}
    3552:	b083      	sub	sp, #12
	uint8_t vcom_value = 0, eink_data[1];
    3554:	2200      	movs	r2, #0
    3556:	466b      	mov	r3, sp
    3558:	71da      	strb	r2, [r3, #7]
	
	/* Auto measure VCOM */
	eink_data[0] = 0x11;
    355a:	a901      	add	r1, sp, #4
    355c:	2311      	movs	r3, #17
    355e:	700b      	strb	r3, [r1, #0]
	eink_write_data(UC8173_AMV, eink_data, 1);
    3560:	3201      	adds	r2, #1
    3562:	2080      	movs	r0, #128	; 0x80
    3564:	4b16      	ldr	r3, [pc, #88]	; (35c0 <uc8173_measure_vcom+0x70>)
    3566:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    3568:	4f16      	ldr	r7, [pc, #88]	; (35c4 <uc8173_measure_vcom+0x74>)
	CRITICAL_SECTION_LEAVE();
    356a:	4e17      	ldr	r6, [pc, #92]	; (35c8 <uc8173_measure_vcom+0x78>)
	CRITICAL_SECTION_ENTER();
    356c:	4668      	mov	r0, sp
    356e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3570:	23c0      	movs	r3, #192	; 0xc0
    3572:	05db      	lsls	r3, r3, #23
    3574:	2580      	movs	r5, #128	; 0x80
    3576:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3578:	22a0      	movs	r2, #160	; 0xa0
    357a:	4914      	ldr	r1, [pc, #80]	; (35cc <uc8173_measure_vcom+0x7c>)
    357c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    357e:	2190      	movs	r1, #144	; 0x90
    3580:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3582:	4053      	eors	r3, r2
    3584:	401c      	ands	r4, r3
    3586:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3588:	4668      	mov	r0, sp
    358a:	47b0      	blx	r6
    358c:	4225      	tst	r5, r4
    358e:	d0ed      	beq.n	356c <uc8173_measure_vcom+0x1c>
	uc8173_wait_for_busy_low();

	/* Read the measured VCOM value using 'VV' command */
	eink_read_data(UC8173_VV, &vcom_value, 1);
    3590:	466b      	mov	r3, sp
    3592:	1ddc      	adds	r4, r3, #7
    3594:	2201      	movs	r2, #1
    3596:	0021      	movs	r1, r4
    3598:	2081      	movs	r0, #129	; 0x81
    359a:	4b0d      	ldr	r3, [pc, #52]	; (35d0 <uc8173_measure_vcom+0x80>)
    359c:	4798      	blx	r3
	vcom_value = vcom_value + 12;
    359e:	7823      	ldrb	r3, [r4, #0]
    35a0:	330c      	adds	r3, #12
    35a2:	b2db      	uxtb	r3, r3
    35a4:	7023      	strb	r3, [r4, #0]

	eink_data[0] = vcom_value;
    35a6:	ac01      	add	r4, sp, #4
    35a8:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_VDCS, eink_data, 1);
    35aa:	2201      	movs	r2, #1
    35ac:	0021      	movs	r1, r4
    35ae:	2082      	movs	r0, #130	; 0x82
    35b0:	4d03      	ldr	r5, [pc, #12]	; (35c0 <uc8173_measure_vcom+0x70>)
    35b2:	47a8      	blx	r5
	eink_write_data(UC8173_VBDS, eink_data, 1);
    35b4:	2201      	movs	r2, #1
    35b6:	0021      	movs	r1, r4
    35b8:	2084      	movs	r0, #132	; 0x84
    35ba:	47a8      	blx	r5

    35bc:	b003      	add	sp, #12
    35be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35c0:	00001ba5 	.word	0x00001ba5
    35c4:	0000034d 	.word	0x0000034d
    35c8:	0000035b 	.word	0x0000035b
    35cc:	41004400 	.word	0x41004400
    35d0:	00002de1 	.word	0x00002de1

000035d4 <uc8173_set_config>:
{
    35d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35d6:	46c6      	mov	lr, r8
    35d8:	b500      	push	{lr}
    35da:	b084      	sub	sp, #16
    35dc:	4680      	mov	r8, r0
    uc8173_global_instance.display_config = *config;
    35de:	2202      	movs	r2, #2
    35e0:	0001      	movs	r1, r0
    35e2:	4874      	ldr	r0, [pc, #464]	; (37b4 <uc8173_set_config+0x1e0>)
    35e4:	4b74      	ldr	r3, [pc, #464]	; (37b8 <uc8173_set_config+0x1e4>)
    35e6:	4798      	blx	r3
    if(config->uc8173_display == UC8173_ET011TT2) {
    35e8:	4643      	mov	r3, r8
    35ea:	785b      	ldrb	r3, [r3, #1]
    35ec:	2b01      	cmp	r3, #1
    35ee:	d00f      	beq.n	3610 <uc8173_set_config+0x3c>
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    35f0:	2b00      	cmp	r3, #0
    35f2:	d11e      	bne.n	3632 <uc8173_set_config+0x5e>
		if((config->display_rotation == ROTATE_90) || (config->display_rotation == ROTATE_270)) {
    35f4:	4643      	mov	r3, r8
    35f6:	781b      	ldrb	r3, [r3, #0]
    35f8:	2202      	movs	r2, #2
    35fa:	4393      	bics	r3, r2
    35fc:	2b01      	cmp	r3, #1
    35fe:	d100      	bne.n	3602 <uc8173_set_config+0x2e>
    3600:	e0bf      	b.n	3782 <uc8173_set_config+0x1ae>
			uc8173_global_instance.display_width   = 256;
    3602:	4b6c      	ldr	r3, [pc, #432]	; (37b4 <uc8173_set_config+0x1e0>)
    3604:	2280      	movs	r2, #128	; 0x80
    3606:	0052      	lsls	r2, r2, #1
    3608:	805a      	strh	r2, [r3, #2]
			uc8173_global_instance.display_height  = 128;
    360a:	3a80      	subs	r2, #128	; 0x80
    360c:	809a      	strh	r2, [r3, #4]
    360e:	e003      	b.n	3618 <uc8173_set_config+0x44>
    	uc8173_global_instance.display_width   = 240;
    3610:	4b68      	ldr	r3, [pc, #416]	; (37b4 <uc8173_set_config+0x1e0>)
    3612:	22f0      	movs	r2, #240	; 0xf0
    3614:	805a      	strh	r2, [r3, #2]
		uc8173_global_instance.display_height  = 240;
    3616:	809a      	strh	r2, [r3, #4]
    if(config->uc8173_display == UC8173_ET011TT2) {
    3618:	4643      	mov	r3, r8
    361a:	785b      	ldrb	r3, [r3, #1]
    361c:	2b01      	cmp	r3, #1
    361e:	d100      	bne.n	3622 <uc8173_set_config+0x4e>
    3620:	e0b5      	b.n	378e <uc8173_set_config+0x1ba>
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    3622:	2b00      	cmp	r3, #0
    3624:	d105      	bne.n	3632 <uc8173_set_config+0x5e>
	    eink_data[0] = 0x17;
    3626:	ab02      	add	r3, sp, #8
    3628:	2217      	movs	r2, #23
    362a:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x17;
    362c:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x26;
    362e:	320f      	adds	r2, #15
    3630:	709a      	strb	r2, [r3, #2]
	eink_write_data(UC8173_BTST, eink_data, 3);
    3632:	ac02      	add	r4, sp, #8
    3634:	2203      	movs	r2, #3
    3636:	0021      	movs	r1, r4
    3638:	2006      	movs	r0, #6
    363a:	4d60      	ldr	r5, [pc, #384]	; (37bc <uc8173_set_config+0x1e8>)
    363c:	47a8      	blx	r5
	eink_data[0] = 0x03;
    363e:	2303      	movs	r3, #3
    3640:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
    3642:	2300      	movs	r3, #0
    3644:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x2B;
    3646:	332b      	adds	r3, #43	; 0x2b
    3648:	70a3      	strb	r3, [r4, #2]
	eink_data[3] = 0x2B;
    364a:	70e3      	strb	r3, [r4, #3]
	eink_data[4] = 0x08;
    364c:	3b23      	subs	r3, #35	; 0x23
    364e:	7123      	strb	r3, [r4, #4]
	eink_write_data(UC8173_PWR, eink_data, 5);
    3650:	2205      	movs	r2, #5
    3652:	0021      	movs	r1, r4
    3654:	2001      	movs	r0, #1
    3656:	47a8      	blx	r5
	eink_write_data(UC8173_PON, 0, 0);
    3658:	2200      	movs	r2, #0
    365a:	2100      	movs	r1, #0
    365c:	2004      	movs	r0, #4
    365e:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    3660:	4f57      	ldr	r7, [pc, #348]	; (37c0 <uc8173_set_config+0x1ec>)
	CRITICAL_SECTION_LEAVE();
    3662:	4e58      	ldr	r6, [pc, #352]	; (37c4 <uc8173_set_config+0x1f0>)
	CRITICAL_SECTION_ENTER();
    3664:	4668      	mov	r0, sp
    3666:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3668:	23c0      	movs	r3, #192	; 0xc0
    366a:	05db      	lsls	r3, r3, #23
    366c:	2580      	movs	r5, #128	; 0x80
    366e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3670:	22a0      	movs	r2, #160	; 0xa0
    3672:	4955      	ldr	r1, [pc, #340]	; (37c8 <uc8173_set_config+0x1f4>)
    3674:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3676:	2190      	movs	r1, #144	; 0x90
    3678:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    367a:	4053      	eors	r3, r2
    367c:	401c      	ands	r4, r3
    367e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3680:	4668      	mov	r0, sp
    3682:	47b0      	blx	r6
    3684:	4225      	tst	r5, r4
    3686:	d0ed      	beq.n	3664 <uc8173_set_config+0x90>
    if(config->uc8173_display == UC8173_ET011TT2) {
    3688:	4643      	mov	r3, r8
    368a:	785b      	ldrb	r3, [r3, #1]
    368c:	2b01      	cmp	r3, #1
    368e:	d100      	bne.n	3692 <uc8173_set_config+0xbe>
    3690:	e085      	b.n	379e <uc8173_set_config+0x1ca>
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    3692:	2b00      	cmp	r3, #0
    3694:	d104      	bne.n	36a0 <uc8173_set_config+0xcc>
		eink_data[0] = 0x03;
    3696:	ab02      	add	r3, sp, #8
    3698:	2203      	movs	r2, #3
    369a:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    369c:	3283      	adds	r2, #131	; 0x83
    369e:	705a      	strb	r2, [r3, #1]
	eink_write_data(UC8173_PSR, eink_data, 2);
    36a0:	ac02      	add	r4, sp, #8
    36a2:	2202      	movs	r2, #2
    36a4:	0021      	movs	r1, r4
    36a6:	2000      	movs	r0, #0
    36a8:	4d44      	ldr	r5, [pc, #272]	; (37bc <uc8173_set_config+0x1e8>)
    36aa:	47a8      	blx	r5
	eink_data[0] = 0x00;
    36ac:	2300      	movs	r3, #0
    36ae:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_PFS, eink_data, 1);
    36b0:	2201      	movs	r2, #1
    36b2:	0021      	movs	r1, r4
    36b4:	2003      	movs	r0, #3
    36b6:	47a8      	blx	r5
	if(config->uc8173_display == UC8173_ET011TT2) {
    36b8:	4643      	mov	r3, r8
    36ba:	785b      	ldrb	r3, [r3, #1]
    36bc:	2b01      	cmp	r3, #1
    36be:	d100      	bne.n	36c2 <uc8173_set_config+0xee>
    36c0:	e073      	b.n	37aa <uc8173_set_config+0x1d6>
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    36c2:	2b00      	cmp	r3, #0
    36c4:	d102      	bne.n	36cc <uc8173_set_config+0xf8>
		eink_data[0] = 0x48;
    36c6:	2248      	movs	r2, #72	; 0x48
    36c8:	ab02      	add	r3, sp, #8
    36ca:	701a      	strb	r2, [r3, #0]
	eink_write_data(UC8173_LPRD, eink_data, 1);
    36cc:	ac02      	add	r4, sp, #8
    36ce:	2201      	movs	r2, #1
    36d0:	0021      	movs	r1, r4
    36d2:	2030      	movs	r0, #48	; 0x30
    36d4:	4d39      	ldr	r5, [pc, #228]	; (37bc <uc8173_set_config+0x1e8>)
    36d6:	47a8      	blx	r5
	eink_data[0] = 0x00; /* Internal Sensor Enabled */
    36d8:	2600      	movs	r6, #0
    36da:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_TSE, eink_data, 1);
    36dc:	2201      	movs	r2, #1
    36de:	0021      	movs	r1, r4
    36e0:	2041      	movs	r0, #65	; 0x41
    36e2:	47a8      	blx	r5
	eink_data[0] = 0xE1;
    36e4:	23e1      	movs	r3, #225	; 0xe1
    36e6:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x20;
    36e8:	3bc1      	subs	r3, #193	; 0xc1
    36ea:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x10;
    36ec:	3b10      	subs	r3, #16
    36ee:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_CDI, eink_data, 3);
    36f0:	2203      	movs	r2, #3
    36f2:	0021      	movs	r1, r4
    36f4:	2050      	movs	r0, #80	; 0x50
    36f6:	47a8      	blx	r5
	eink_data[0] = 0x7F; /* H = 127 */
    36f8:	237f      	movs	r3, #127	; 0x7f
    36fa:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
    36fc:	7066      	strb	r6, [r4, #1]
	eink_data[2] = 0xFF; /* W = 255 */
    36fe:	3380      	adds	r3, #128	; 0x80
    3700:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_TRES, eink_data, 3);
    3702:	2203      	movs	r2, #3
    3704:	0021      	movs	r1, r4
    3706:	2061      	movs	r0, #97	; 0x61
    3708:	47a8      	blx	r5
	eink_data[0] = 0xCF;
    370a:	23cf      	movs	r3, #207	; 0xcf
    370c:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0xAF;
    370e:	3b20      	subs	r3, #32
    3710:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x00;
    3712:	70a6      	strb	r6, [r4, #2]
	eink_data[3] = 0x00;
    3714:	70e6      	strb	r6, [r4, #3]
	eink_data[4] = 0x03;
    3716:	3bac      	subs	r3, #172	; 0xac
    3718:	7123      	strb	r3, [r4, #4]
	eink_write_data(UC8173_GDS, eink_data, 5);
    371a:	2205      	movs	r2, #5
    371c:	0021      	movs	r1, r4
    371e:	2062      	movs	r0, #98	; 0x62
    3720:	47a8      	blx	r5
	uc8173_measure_vcom();
    3722:	4b2a      	ldr	r3, [pc, #168]	; (37cc <uc8173_set_config+0x1f8>)
    3724:	4798      	blx	r3
	eink_data[0] = 0x02;
    3726:	3602      	adds	r6, #2
    3728:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_LVSEL, eink_data, 1);
    372a:	2201      	movs	r2, #1
    372c:	0021      	movs	r1, r4
    372e:	20e4      	movs	r0, #228	; 0xe4
    3730:	47a8      	blx	r5
	eink_data[0] = 0x02;
    3732:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    3734:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GBS, eink_data, 2);
    3736:	2202      	movs	r2, #2
    3738:	0021      	movs	r1, r4
    373a:	2063      	movs	r0, #99	; 0x63
    373c:	47a8      	blx	r5
	eink_data[0] = 0x02;
    373e:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    3740:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GSS, eink_data, 2);
    3742:	2202      	movs	r2, #2
    3744:	0021      	movs	r1, r4
    3746:	2064      	movs	r0, #100	; 0x64
    3748:	47a8      	blx	r5
	eink_write_data(UC8173_POF, 0, 0);
    374a:	2200      	movs	r2, #0
    374c:	2100      	movs	r1, #0
    374e:	2002      	movs	r0, #2
    3750:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    3752:	4f1b      	ldr	r7, [pc, #108]	; (37c0 <uc8173_set_config+0x1ec>)
	CRITICAL_SECTION_LEAVE();
    3754:	4e1b      	ldr	r6, [pc, #108]	; (37c4 <uc8173_set_config+0x1f0>)
	CRITICAL_SECTION_ENTER();
    3756:	a801      	add	r0, sp, #4
    3758:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    375a:	23c0      	movs	r3, #192	; 0xc0
    375c:	05db      	lsls	r3, r3, #23
    375e:	2580      	movs	r5, #128	; 0x80
    3760:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3762:	22a0      	movs	r2, #160	; 0xa0
    3764:	4918      	ldr	r1, [pc, #96]	; (37c8 <uc8173_set_config+0x1f4>)
    3766:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3768:	2190      	movs	r1, #144	; 0x90
    376a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    376c:	4053      	eors	r3, r2
    376e:	401c      	ands	r4, r3
    3770:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3772:	a801      	add	r0, sp, #4
    3774:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    3776:	4225      	tst	r5, r4
    3778:	d1ed      	bne.n	3756 <uc8173_set_config+0x182>
}
    377a:	b004      	add	sp, #16
    377c:	bc04      	pop	{r2}
    377e:	4690      	mov	r8, r2
    3780:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uc8173_global_instance.display_width   = 128;
    3782:	4b0c      	ldr	r3, [pc, #48]	; (37b4 <uc8173_set_config+0x1e0>)
    3784:	327e      	adds	r2, #126	; 0x7e
    3786:	805a      	strh	r2, [r3, #2]
			uc8173_global_instance.display_height  = 256;
    3788:	3280      	adds	r2, #128	; 0x80
    378a:	809a      	strh	r2, [r3, #4]
    378c:	e744      	b.n	3618 <uc8173_set_config+0x44>
    	eink_data[0] = 0x17;
    378e:	ab02      	add	r3, sp, #8
    3790:	2217      	movs	r2, #23
    3792:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x97;
    3794:	3280      	adds	r2, #128	; 0x80
    3796:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x20;
    3798:	3a77      	subs	r2, #119	; 0x77
    379a:	709a      	strb	r2, [r3, #2]
    379c:	e749      	b.n	3632 <uc8173_set_config+0x5e>
    	eink_data[0] = 0x0B;
    379e:	ab02      	add	r3, sp, #8
    37a0:	220b      	movs	r2, #11
    37a2:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    37a4:	327b      	adds	r2, #123	; 0x7b
    37a6:	705a      	strb	r2, [r3, #1]
    37a8:	e77a      	b.n	36a0 <uc8173_set_config+0xcc>
		eink_data[0] = 0x25;
    37aa:	2225      	movs	r2, #37	; 0x25
    37ac:	ab02      	add	r3, sp, #8
    37ae:	701a      	strb	r2, [r3, #0]
    37b0:	e78c      	b.n	36cc <uc8173_set_config+0xf8>
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	20000380 	.word	0x20000380
    37b8:	00004719 	.word	0x00004719
    37bc:	00001ba5 	.word	0x00001ba5
    37c0:	0000034d 	.word	0x0000034d
    37c4:	0000035b 	.word	0x0000035b
    37c8:	41004400 	.word	0x41004400
    37cc:	00003551 	.word	0x00003551

000037d0 <eink_ed013tc1_init>:
{    
    37d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37d2:	0006      	movs	r6, r0
    37d4:	000c      	movs	r4, r1
    ed013tc1_dtm1_display_buffer = (uint8_t*) malloc (malloc_size);
    37d6:	2080      	movs	r0, #128	; 0x80
    37d8:	0140      	lsls	r0, r0, #5
    37da:	4d1e      	ldr	r5, [pc, #120]	; (3854 <eink_ed013tc1_init+0x84>)
    37dc:	47a8      	blx	r5
    37de:	0007      	movs	r7, r0
    37e0:	4b1d      	ldr	r3, [pc, #116]	; (3858 <eink_ed013tc1_init+0x88>)
    37e2:	6018      	str	r0, [r3, #0]
    ed013tc1_dtm2_display_buffer = (uint8_t*) malloc (malloc_size);
    37e4:	2080      	movs	r0, #128	; 0x80
    37e6:	0140      	lsls	r0, r0, #5
    37e8:	47a8      	blx	r5
    37ea:	4b1c      	ldr	r3, [pc, #112]	; (385c <eink_ed013tc1_init+0x8c>)
    37ec:	6018      	str	r0, [r3, #0]
    eink_gfx_ed013tc1_config.display_buffer_1_ptr = ed013tc1_dtm1_display_buffer;
    37ee:	4d1c      	ldr	r5, [pc, #112]	; (3860 <eink_ed013tc1_init+0x90>)
    37f0:	64ef      	str	r7, [r5, #76]	; 0x4c
    eink_gfx_ed013tc1_config.display_buffer_2_ptr = ed013tc1_dtm2_display_buffer;
    37f2:	6528      	str	r0, [r5, #80]	; 0x50
    uc8173_init();
    37f4:	4b1b      	ldr	r3, [pc, #108]	; (3864 <eink_ed013tc1_init+0x94>)
    37f6:	4798      	blx	r3
    config->uc8173_display = UC8173_ED013TC1;
    37f8:	2300      	movs	r3, #0
    37fa:	7073      	strb	r3, [r6, #1]
    uc8173_set_config(config);
    37fc:	0030      	movs	r0, r6
    37fe:	4b1a      	ldr	r3, [pc, #104]	; (3868 <eink_ed013tc1_init+0x98>)
    3800:	4798      	blx	r3
    eink_gfx_ed013tc1_config.display_rotation = config->display_rotation;
    3802:	7833      	ldrb	r3, [r6, #0]
    3804:	353c      	adds	r5, #60	; 0x3c
    3806:	732b      	strb	r3, [r5, #12]
    ptr_eink_gfx_config = (struct eink_gfx_config*) &eink_gfx_ed013tc1_config;
    3808:	4b18      	ldr	r3, [pc, #96]	; (386c <eink_ed013tc1_init+0x9c>)
    380a:	601d      	str	r5, [r3, #0]
    for (buffer_index = 0; buffer_index < GFX_ED013TC1_DISPLAY_BUFFER_SIZE; buffer_index++) {
    380c:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM1 is previous buffer */
    380e:	4917      	ldr	r1, [pc, #92]	; (386c <eink_ed013tc1_init+0x9c>)
    3810:	22ff      	movs	r2, #255	; 0xff
    for (buffer_index = 0; buffer_index < GFX_ED013TC1_DISPLAY_BUFFER_SIZE; buffer_index++) {
    3812:	2580      	movs	r5, #128	; 0x80
    3814:	016d      	lsls	r5, r5, #5
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM1 is previous buffer */
    3816:	6808      	ldr	r0, [r1, #0]
    3818:	6900      	ldr	r0, [r0, #16]
    381a:	54c2      	strb	r2, [r0, r3]
        ptr_eink_gfx_config->display_buffer_2_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    381c:	6808      	ldr	r0, [r1, #0]
    381e:	6940      	ldr	r0, [r0, #20]
    3820:	54c2      	strb	r2, [r0, r3]
    for (buffer_index = 0; buffer_index < GFX_ED013TC1_DISPLAY_BUFFER_SIZE; buffer_index++) {
    3822:	3301      	adds	r3, #1
    3824:	42ab      	cmp	r3, r5
    3826:	d1f6      	bne.n	3816 <eink_ed013tc1_init+0x46>
	eink_write_data(UC8173_DTM3, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    3828:	2680      	movs	r6, #128	; 0x80
    382a:	0176      	lsls	r6, r6, #5
    382c:	4f0f      	ldr	r7, [pc, #60]	; (386c <eink_ed013tc1_init+0x9c>)
    382e:	683b      	ldr	r3, [r7, #0]
    3830:	6919      	ldr	r1, [r3, #16]
    3832:	0032      	movs	r2, r6
    3834:	2015      	movs	r0, #21
    3836:	4d0e      	ldr	r5, [pc, #56]	; (3870 <eink_ed013tc1_init+0xa0>)
    3838:	47a8      	blx	r5
	eink_write_data(UC8173_DTM4, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    383a:	683b      	ldr	r3, [r7, #0]
    383c:	6959      	ldr	r1, [r3, #20]
    383e:	0032      	movs	r2, r6
    3840:	2016      	movs	r0, #22
    3842:	47a8      	blx	r5
    if(clear_display) eink_ed013tc1_put_display_buffer(true);
    3844:	2c00      	cmp	r4, #0
    3846:	d100      	bne.n	384a <eink_ed013tc1_init+0x7a>
}
    3848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(clear_display) eink_ed013tc1_put_display_buffer(true);
    384a:	2001      	movs	r0, #1
    384c:	4b09      	ldr	r3, [pc, #36]	; (3874 <eink_ed013tc1_init+0xa4>)
    384e:	4798      	blx	r3
}
    3850:	e7fa      	b.n	3848 <eink_ed013tc1_init+0x78>
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	00004705 	.word	0x00004705
    3858:	20000418 	.word	0x20000418
    385c:	20000404 	.word	0x20000404
    3860:	20000000 	.word	0x20000000
    3864:	000034e5 	.word	0x000034e5
    3868:	000035d5 	.word	0x000035d5
    386c:	20000424 	.word	0x20000424
    3870:	00001ba5 	.word	0x00001ba5
    3874:	00002cb5 	.word	0x00002cb5

00003878 <uc8151_set_psr_config>:
 *
 * \param *psr_config The PSR structure to write to the PSR register.
 */
void uc8151_set_psr_config(
        const struct uc8151_panel_settings *psr_config)
{    
    3878:	b510      	push	{r4, lr}
    387a:	b082      	sub	sp, #8
    387c:	0004      	movs	r4, r0
    /* Copy configuration into UC8151 instance */
    uc8151_global_instance.panel_settings = *psr_config;
    387e:	2205      	movs	r2, #5
    3880:	0001      	movs	r1, r0
    3882:	4859      	ldr	r0, [pc, #356]	; (39e8 <uc8151_set_psr_config+0x170>)
    3884:	4b59      	ldr	r3, [pc, #356]	; (39ec <uc8151_set_psr_config+0x174>)
    3886:	4798      	blx	r3
    
    /* Save display resolution into UC8151 instance */
    switch (psr_config->display_resolution) {
    3888:	7823      	ldrb	r3, [r4, #0]
    388a:	2b01      	cmp	r3, #1
    388c:	d066      	beq.n	395c <uc8151_set_psr_config+0xe4>
    388e:	2b00      	cmp	r3, #0
    3890:	d053      	beq.n	393a <uc8151_set_psr_config+0xc2>
    3892:	2b02      	cmp	r3, #2
    3894:	d100      	bne.n	3898 <uc8151_set_psr_config+0x20>
    3896:	e072      	b.n	397e <uc8151_set_psr_config+0x106>
    3898:	2b03      	cmp	r3, #3
    389a:	d100      	bne.n	389e <uc8151_set_psr_config+0x26>
    389c:	e081      	b.n	39a2 <uc8151_set_psr_config+0x12a>
    }
    
    uint8_t eink_data[5];

    /* Translate the panel settings structure to the required bytes to be sent to the display */
    switch (psr_config->display_resolution) {
    389e:	7823      	ldrb	r3, [r4, #0]
    38a0:	2b01      	cmp	r3, #1
    38a2:	d100      	bne.n	38a6 <uc8151_set_psr_config+0x2e>
    38a4:	e093      	b.n	39ce <uc8151_set_psr_config+0x156>
    38a6:	2b00      	cmp	r3, #0
    38a8:	d100      	bne.n	38ac <uc8151_set_psr_config+0x34>
    38aa:	e08c      	b.n	39c6 <uc8151_set_psr_config+0x14e>
    38ac:	2b02      	cmp	r3, #2
    38ae:	d100      	bne.n	38b2 <uc8151_set_psr_config+0x3a>
    38b0:	e091      	b.n	39d6 <uc8151_set_psr_config+0x15e>
    38b2:	2b03      	cmp	r3, #3
    38b4:	d100      	bne.n	38b8 <uc8151_set_psr_config+0x40>
    38b6:	e092      	b.n	39de <uc8151_set_psr_config+0x166>
        case RES_96x230:                eink_data[0] = 0x00; break;
        case RES_96x252:                eink_data[0] = 0x01; break;
        case RES_128x296:               eink_data[0] = 0x02; break;
        case RES_160x296:               eink_data[0] = 0x03; break;
    }
    eink_data[0] = eink_data[0] << 1;
    38b8:	466b      	mov	r3, sp
    38ba:	781b      	ldrb	r3, [r3, #0]
    38bc:	005b      	lsls	r3, r3, #1
    38be:	b2db      	uxtb	r3, r3
    38c0:	466a      	mov	r2, sp
    38c2:	7013      	strb	r3, [r2, #0]
    switch (psr_config->lut_selection) {
    38c4:	7862      	ldrb	r2, [r4, #1]
    38c6:	2a01      	cmp	r2, #1
    38c8:	d102      	bne.n	38d0 <uc8151_set_psr_config+0x58>
        case LUT_FROM_OTP:              eink_data[0] |= 0x00; break;
        case LUT_FROM_REGISTER:         eink_data[0] |= 0x01; break;
    38ca:	4313      	orrs	r3, r2
    38cc:	466a      	mov	r2, sp
    38ce:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    38d0:	466b      	mov	r3, sp
    38d2:	781b      	ldrb	r3, [r3, #0]
    38d4:	005b      	lsls	r3, r3, #1
    38d6:	b2db      	uxtb	r3, r3
    38d8:	466a      	mov	r2, sp
    38da:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_colours) {
    38dc:	78a2      	ldrb	r2, [r4, #2]
    38de:	2a00      	cmp	r2, #0
    38e0:	d103      	bne.n	38ea <uc8151_set_psr_config+0x72>
        case B_W_R_PIXELS:              eink_data[0] |= 0x00; break;
        case B_W_PIXELS:                eink_data[0] |= 0x01; break;
    38e2:	2201      	movs	r2, #1
    38e4:	4313      	orrs	r3, r2
    38e6:	466a      	mov	r2, sp
    38e8:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 2;
    38ea:	466b      	mov	r3, sp
    38ec:	781b      	ldrb	r3, [r3, #0]
    38ee:	009b      	lsls	r3, r3, #2
    38f0:	b2db      	uxtb	r3, r3
    38f2:	466a      	mov	r2, sp
    38f4:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_rotation) {
    38f6:	78e2      	ldrb	r2, [r4, #3]
    38f8:	3a01      	subs	r2, #1
    38fa:	2a01      	cmp	r2, #1
    38fc:	d803      	bhi.n	3906 <uc8151_set_psr_config+0x8e>
        case ROTATE_0:
        case ROTATE_270:                 eink_data[0] |= 0b00; break;
        case ROTATE_180:
        case ROTATE_90:                  eink_data[0] |= 0b11; break;
    38fe:	2203      	movs	r2, #3
    3900:	4313      	orrs	r3, r2
    3902:	466a      	mov	r2, sp
    3904:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    3906:	466b      	mov	r3, sp
    3908:	781b      	ldrb	r3, [r3, #0]
    390a:	005b      	lsls	r3, r3, #1
    390c:	b2db      	uxtb	r3, r3
    390e:	466a      	mov	r2, sp
    3910:	7013      	strb	r3, [r2, #0]
    switch (psr_config->booster_switch) {
    3912:	7922      	ldrb	r2, [r4, #4]
    3914:	2a01      	cmp	r2, #1
    3916:	d102      	bne.n	391e <uc8151_set_psr_config+0xa6>
        case BOOSTER_OFF:               eink_data[0] |= 0x00; break;
        case BOOSTER_ON:                eink_data[0] |= 0x01; break;
    3918:	4313      	orrs	r3, r2
    391a:	466a      	mov	r2, sp
    391c:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    391e:	466b      	mov	r3, sp
    3920:	781b      	ldrb	r3, [r3, #0]
    3922:	005b      	lsls	r3, r3, #1
    /* Add the soft reset bit */
    eink_data[0] |= 0x01;
    3924:	2201      	movs	r2, #1
    3926:	4313      	orrs	r3, r2
    3928:	466a      	mov	r2, sp
    392a:	7013      	strb	r3, [r2, #0]
    /* Send the PSR register to the display */
    eink_write_data(UC8151_PSR, eink_data, 1);
    392c:	2201      	movs	r2, #1
    392e:	4669      	mov	r1, sp
    3930:	2000      	movs	r0, #0
    3932:	4b2f      	ldr	r3, [pc, #188]	; (39f0 <uc8151_set_psr_config+0x178>)
    3934:	4798      	blx	r3
    3936:	b002      	add	sp, #8
    3938:	bd10      	pop	{r4, pc}
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    393a:	78e3      	ldrb	r3, [r4, #3]
    393c:	2202      	movs	r2, #2
    393e:	4393      	bics	r3, r2
    3940:	2b01      	cmp	r3, #1
    3942:	d005      	beq.n	3950 <uc8151_set_psr_config+0xd8>
                uc8151_global_instance.display_width   = 230;
    3944:	4b28      	ldr	r3, [pc, #160]	; (39e8 <uc8151_set_psr_config+0x170>)
    3946:	22e6      	movs	r2, #230	; 0xe6
    3948:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    394a:	3a86      	subs	r2, #134	; 0x86
    394c:	811a      	strh	r2, [r3, #8]
    394e:	e7a6      	b.n	389e <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    3950:	4b25      	ldr	r3, [pc, #148]	; (39e8 <uc8151_set_psr_config+0x170>)
    3952:	325e      	adds	r2, #94	; 0x5e
    3954:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 230;
    3956:	3286      	adds	r2, #134	; 0x86
    3958:	811a      	strh	r2, [r3, #8]
    395a:	e7a0      	b.n	389e <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    395c:	78e3      	ldrb	r3, [r4, #3]
    395e:	2202      	movs	r2, #2
    3960:	4393      	bics	r3, r2
    3962:	2b01      	cmp	r3, #1
    3964:	d005      	beq.n	3972 <uc8151_set_psr_config+0xfa>
                uc8151_global_instance.display_width   = 252;
    3966:	4b20      	ldr	r3, [pc, #128]	; (39e8 <uc8151_set_psr_config+0x170>)
    3968:	22fc      	movs	r2, #252	; 0xfc
    396a:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    396c:	3a9c      	subs	r2, #156	; 0x9c
    396e:	811a      	strh	r2, [r3, #8]
    3970:	e795      	b.n	389e <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    3972:	4b1d      	ldr	r3, [pc, #116]	; (39e8 <uc8151_set_psr_config+0x170>)
    3974:	325e      	adds	r2, #94	; 0x5e
    3976:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 252;
    3978:	329c      	adds	r2, #156	; 0x9c
    397a:	811a      	strh	r2, [r3, #8]
    397c:	e78f      	b.n	389e <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    397e:	78e3      	ldrb	r3, [r4, #3]
    3980:	2202      	movs	r2, #2
    3982:	4393      	bics	r3, r2
    3984:	2b01      	cmp	r3, #1
    3986:	d006      	beq.n	3996 <uc8151_set_psr_config+0x11e>
                uc8151_global_instance.display_width   = 296;
    3988:	4b17      	ldr	r3, [pc, #92]	; (39e8 <uc8151_set_psr_config+0x170>)
    398a:	2294      	movs	r2, #148	; 0x94
    398c:	0052      	lsls	r2, r2, #1
    398e:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 128;
    3990:	3aa8      	subs	r2, #168	; 0xa8
    3992:	811a      	strh	r2, [r3, #8]
    3994:	e783      	b.n	389e <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 128;
    3996:	4b14      	ldr	r3, [pc, #80]	; (39e8 <uc8151_set_psr_config+0x170>)
    3998:	327e      	adds	r2, #126	; 0x7e
    399a:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    399c:	32a8      	adds	r2, #168	; 0xa8
    399e:	811a      	strh	r2, [r3, #8]
    39a0:	e77d      	b.n	389e <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    39a2:	78e3      	ldrb	r3, [r4, #3]
    39a4:	2202      	movs	r2, #2
    39a6:	4393      	bics	r3, r2
    39a8:	2b01      	cmp	r3, #1
    39aa:	d006      	beq.n	39ba <uc8151_set_psr_config+0x142>
                uc8151_global_instance.display_width   = 296;
    39ac:	4b0e      	ldr	r3, [pc, #56]	; (39e8 <uc8151_set_psr_config+0x170>)
    39ae:	2294      	movs	r2, #148	; 0x94
    39b0:	0052      	lsls	r2, r2, #1
    39b2:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 160;
    39b4:	3a88      	subs	r2, #136	; 0x88
    39b6:	811a      	strh	r2, [r3, #8]
    39b8:	e771      	b.n	389e <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 160;
    39ba:	4b0b      	ldr	r3, [pc, #44]	; (39e8 <uc8151_set_psr_config+0x170>)
    39bc:	329e      	adds	r2, #158	; 0x9e
    39be:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    39c0:	3288      	adds	r2, #136	; 0x88
    39c2:	811a      	strh	r2, [r3, #8]
    39c4:	e76b      	b.n	389e <uc8151_set_psr_config+0x26>
        case RES_96x230:                eink_data[0] = 0x00; break;
    39c6:	2300      	movs	r3, #0
    39c8:	466a      	mov	r2, sp
    39ca:	7013      	strb	r3, [r2, #0]
    39cc:	e774      	b.n	38b8 <uc8151_set_psr_config+0x40>
        case RES_96x252:                eink_data[0] = 0x01; break;
    39ce:	2301      	movs	r3, #1
    39d0:	466a      	mov	r2, sp
    39d2:	7013      	strb	r3, [r2, #0]
    39d4:	e770      	b.n	38b8 <uc8151_set_psr_config+0x40>
        case RES_128x296:               eink_data[0] = 0x02; break;
    39d6:	2302      	movs	r3, #2
    39d8:	466a      	mov	r2, sp
    39da:	7013      	strb	r3, [r2, #0]
    39dc:	e76c      	b.n	38b8 <uc8151_set_psr_config+0x40>
        case RES_160x296:               eink_data[0] = 0x03; break;
    39de:	2303      	movs	r3, #3
    39e0:	466a      	mov	r2, sp
    39e2:	7013      	strb	r3, [r2, #0]
    39e4:	e768      	b.n	38b8 <uc8151_set_psr_config+0x40>
    39e6:	46c0      	nop			; (mov r8, r8)
    39e8:	200003ec 	.word	0x200003ec
    39ec:	00004719 	.word	0x00004719
    39f0:	00001ba5 	.word	0x00001ba5

000039f4 <uc8151_set_config>:
{        
    39f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39f6:	46c6      	mov	lr, r8
    39f8:	b500      	push	{lr}
    39fa:	b086      	sub	sp, #24
    39fc:	0004      	movs	r4, r0
    switch(config->power_settings.source_power) {
    39fe:	7943      	ldrb	r3, [r0, #5]
    3a00:	2b00      	cmp	r3, #0
    3a02:	d020      	beq.n	3a46 <uc8151_set_config+0x52>
    3a04:	2b01      	cmp	r3, #1
    3a06:	d022      	beq.n	3a4e <uc8151_set_config+0x5a>
    eink_data[0] = eink_data[0] << 1;
    3a08:	aa04      	add	r2, sp, #16
    3a0a:	7813      	ldrb	r3, [r2, #0]
    3a0c:	005b      	lsls	r3, r3, #1
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.gate_power) {
    3a12:	79a2      	ldrb	r2, [r4, #6]
    3a14:	2a01      	cmp	r2, #1
    3a16:	d102      	bne.n	3a1e <uc8151_set_config+0x2a>
        case GATE_INTERNAL_DC_DC:       eink_data[0] |= 0x01; break;
    3a18:	4313      	orrs	r3, r2
    3a1a:	aa04      	add	r2, sp, #16
    3a1c:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.vcom_voltage_level) {
    3a1e:	79e3      	ldrb	r3, [r4, #7]
    3a20:	2b00      	cmp	r3, #0
    3a22:	d018      	beq.n	3a56 <uc8151_set_config+0x62>
    3a24:	2b01      	cmp	r3, #1
    3a26:	d01a      	beq.n	3a5e <uc8151_set_config+0x6a>
    eink_data[1] = eink_data[1] << 2;
    3a28:	aa04      	add	r2, sp, #16
    3a2a:	7853      	ldrb	r3, [r2, #1]
    3a2c:	009b      	lsls	r3, r3, #2
    3a2e:	b2db      	uxtb	r3, r3
    3a30:	7053      	strb	r3, [r2, #1]
    switch (config->power_settings.vg_voltage_level) {
    3a32:	7a22      	ldrb	r2, [r4, #8]
    3a34:	2a06      	cmp	r2, #6
    3a36:	d05b      	beq.n	3af0 <uc8151_set_config+0xfc>
    3a38:	2a07      	cmp	r2, #7
    3a3a:	d05e      	beq.n	3afa <uc8151_set_config+0x106>
    3a3c:	2a05      	cmp	r2, #5
    3a3e:	d012      	beq.n	3a66 <uc8151_set_config+0x72>
    if( (config->power_settings.vg_voltage_level == VGx_17V) | (config->power_settings.vg_voltage_level == VGx_18V) | (config->power_settings.vg_voltage_level == VGx_19V) | (config->power_settings.vg_voltage_level == VGx_20V) )
    3a40:	2a03      	cmp	r2, #3
    3a42:	d814      	bhi.n	3a6e <uc8151_set_config+0x7a>
    3a44:	e7fe      	b.n	3a44 <uc8151_set_config+0x50>
        case SOURCE_EXTERNAL_POWER:     eink_data[0] = 0x00; break;
    3a46:	2200      	movs	r2, #0
    3a48:	ab04      	add	r3, sp, #16
    3a4a:	701a      	strb	r2, [r3, #0]
    3a4c:	e7dc      	b.n	3a08 <uc8151_set_config+0x14>
        case SOURCE_INTERNAL_DC_DC:     eink_data[0] = 0x01; break;
    3a4e:	2201      	movs	r2, #1
    3a50:	ab04      	add	r3, sp, #16
    3a52:	701a      	strb	r2, [r3, #0]
    3a54:	e7d8      	b.n	3a08 <uc8151_set_config+0x14>
        case VCOMx_VDx_DC_VCOMD:        eink_data[1] = 0x00; break;
    3a56:	2200      	movs	r2, #0
    3a58:	ab04      	add	r3, sp, #16
    3a5a:	705a      	strb	r2, [r3, #1]
    3a5c:	e7e4      	b.n	3a28 <uc8151_set_config+0x34>
        case VCOMx_VGx:                 eink_data[1] = 0x01; break;
    3a5e:	2201      	movs	r2, #1
    3a60:	ab04      	add	r3, sp, #16
    3a62:	705a      	strb	r2, [r3, #1]
    3a64:	e7e0      	b.n	3a28 <uc8151_set_config+0x34>
        case VGx_15V:                   eink_data[1] |= 0x01; break;
    3a66:	2201      	movs	r2, #1
    3a68:	4313      	orrs	r3, r2
    3a6a:	aa04      	add	r2, sp, #16
    3a6c:	7053      	strb	r3, [r2, #1]
    eink_data[2] = config->power_settings.pwr_vdh_level;
    3a6e:	a904      	add	r1, sp, #16
    3a70:	7a63      	ldrb	r3, [r4, #9]
    3a72:	708b      	strb	r3, [r1, #2]
    eink_data[3] = config->power_settings.pwr_vdl_level;
    3a74:	7aa3      	ldrb	r3, [r4, #10]
    3a76:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = config->power_settings.pwr_vdhr_level;
    3a78:	7ae3      	ldrb	r3, [r4, #11]
    3a7a:	710b      	strb	r3, [r1, #4]
    eink_write_data(UC8151_PWR, eink_data, 5);
    3a7c:	2205      	movs	r2, #5
    3a7e:	2001      	movs	r0, #1
    3a80:	4dd8      	ldr	r5, [pc, #864]	; (3de4 <uc8151_set_config+0x3f0>)
    3a82:	47a8      	blx	r5
    psr_config = config->panel_settings;
    3a84:	2205      	movs	r2, #5
    3a86:	0021      	movs	r1, r4
    3a88:	a802      	add	r0, sp, #8
    3a8a:	4bd7      	ldr	r3, [pc, #860]	; (3de8 <uc8151_set_config+0x3f4>)
    3a8c:	4798      	blx	r3
    uc8151_set_psr_config(&psr_config);
    3a8e:	a802      	add	r0, sp, #8
    3a90:	4bd6      	ldr	r3, [pc, #856]	; (3dec <uc8151_set_config+0x3f8>)
    3a92:	4798      	blx	r3
    eink_write_data(UC8151_PON, 0, 0);
    3a94:	2200      	movs	r2, #0
    3a96:	2100      	movs	r1, #0
    3a98:	2004      	movs	r0, #4
    3a9a:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    3a9c:	4bd4      	ldr	r3, [pc, #848]	; (3df0 <uc8151_set_config+0x3fc>)
    3a9e:	4698      	mov	r8, r3
	CRITICAL_SECTION_LEAVE();
    3aa0:	4fd4      	ldr	r7, [pc, #848]	; (3df4 <uc8151_set_config+0x400>)
	CRITICAL_SECTION_ENTER();
    3aa2:	4668      	mov	r0, sp
    3aa4:	47c0      	blx	r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3aa6:	23c0      	movs	r3, #192	; 0xc0
    3aa8:	05db      	lsls	r3, r3, #23
    3aaa:	2680      	movs	r6, #128	; 0x80
    3aac:	599d      	ldr	r5, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3aae:	22a0      	movs	r2, #160	; 0xa0
    3ab0:	49d1      	ldr	r1, [pc, #836]	; (3df8 <uc8151_set_config+0x404>)
    3ab2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3ab4:	2190      	movs	r1, #144	; 0x90
    3ab6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3ab8:	4053      	eors	r3, r2
    3aba:	401d      	ands	r5, r3
    3abc:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    3abe:	4668      	mov	r0, sp
    3ac0:	47b8      	blx	r7
    3ac2:	422e      	tst	r6, r5
    3ac4:	d0ed      	beq.n	3aa2 <uc8151_set_config+0xae>
    switch (config->booster_soft_start.a_soft_start_period) {
    3ac6:	7b20      	ldrb	r0, [r4, #12]
    3ac8:	2801      	cmp	r0, #1
    3aca:	d01f      	beq.n	3b0c <uc8151_set_config+0x118>
    3acc:	2800      	cmp	r0, #0
    3ace:	d019      	beq.n	3b04 <uc8151_set_config+0x110>
    3ad0:	2802      	cmp	r0, #2
    3ad2:	d01f      	beq.n	3b14 <uc8151_set_config+0x120>
    3ad4:	2803      	cmp	r0, #3
    3ad6:	d021      	beq.n	3b1c <uc8151_set_config+0x128>
    eink_data[0] = eink_data[0] << 3;
    3ad8:	aa04      	add	r2, sp, #16
    3ada:	7813      	ldrb	r3, [r2, #0]
    3adc:	00db      	lsls	r3, r3, #3
    3ade:	b2db      	uxtb	r3, r3
    3ae0:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_drive_strength) {
    3ae2:	7b61      	ldrb	r1, [r4, #13]
    3ae4:	2907      	cmp	r1, #7
    3ae6:	d821      	bhi.n	3b2c <uc8151_set_config+0x138>
    3ae8:	008a      	lsls	r2, r1, #2
    3aea:	4dc4      	ldr	r5, [pc, #784]	; (3dfc <uc8151_set_config+0x408>)
    3aec:	58aa      	ldr	r2, [r5, r2]
    3aee:	4697      	mov	pc, r2
        case VGx_14V:                   eink_data[1] |= 0x02; break;
    3af0:	2202      	movs	r2, #2
    3af2:	4313      	orrs	r3, r2
    3af4:	aa04      	add	r2, sp, #16
    3af6:	7053      	strb	r3, [r2, #1]
    3af8:	e7b9      	b.n	3a6e <uc8151_set_config+0x7a>
        case VGx_13V:                   eink_data[1] |= 0x03; break;
    3afa:	2203      	movs	r2, #3
    3afc:	4313      	orrs	r3, r2
    3afe:	aa04      	add	r2, sp, #16
    3b00:	7053      	strb	r3, [r2, #1]
    3b02:	e7b4      	b.n	3a6e <uc8151_set_config+0x7a>
        case SS_PERIOD_10MS:            eink_data[0] = 0x00; break;
    3b04:	2200      	movs	r2, #0
    3b06:	ab04      	add	r3, sp, #16
    3b08:	701a      	strb	r2, [r3, #0]
    3b0a:	e7e5      	b.n	3ad8 <uc8151_set_config+0xe4>
        case SS_PERIOD_20MS:            eink_data[0] = 0x01; break;
    3b0c:	2201      	movs	r2, #1
    3b0e:	ab04      	add	r3, sp, #16
    3b10:	701a      	strb	r2, [r3, #0]
    3b12:	e7e1      	b.n	3ad8 <uc8151_set_config+0xe4>
        case SS_PERIOD_30MS:            eink_data[0] = 0x02; break;
    3b14:	2202      	movs	r2, #2
    3b16:	ab04      	add	r3, sp, #16
    3b18:	701a      	strb	r2, [r3, #0]
    3b1a:	e7dd      	b.n	3ad8 <uc8151_set_config+0xe4>
        case SS_PERIOD_40MS:            eink_data[0] = 0x03; break;
    3b1c:	2203      	movs	r2, #3
    3b1e:	ab04      	add	r3, sp, #16
    3b20:	701a      	strb	r2, [r3, #0]
    3b22:	e7d9      	b.n	3ad8 <uc8151_set_config+0xe4>
        case STRENGTH_2:                eink_data[0] |= 0x01; break;
    3b24:	2201      	movs	r2, #1
    3b26:	4313      	orrs	r3, r2
    3b28:	aa04      	add	r2, sp, #16
    3b2a:	7013      	strb	r3, [r2, #0]
    eink_data[0] = eink_data[0] << 3;
    3b2c:	aa04      	add	r2, sp, #16
    3b2e:	7813      	ldrb	r3, [r2, #0]
    3b30:	00db      	lsls	r3, r3, #3
    3b32:	b2db      	uxtb	r3, r3
    3b34:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_min_off_time) {
    3b36:	7ba2      	ldrb	r2, [r4, #14]
    3b38:	2a07      	cmp	r2, #7
    3b3a:	d825      	bhi.n	3b88 <uc8151_set_config+0x194>
    3b3c:	0095      	lsls	r5, r2, #2
    3b3e:	4eb0      	ldr	r6, [pc, #704]	; (3e00 <uc8151_set_config+0x40c>)
    3b40:	5975      	ldr	r5, [r6, r5]
    3b42:	46af      	mov	pc, r5
        case STRENGTH_3:                eink_data[0] |= 0x02; break;
    3b44:	2202      	movs	r2, #2
    3b46:	4313      	orrs	r3, r2
    3b48:	aa04      	add	r2, sp, #16
    3b4a:	7013      	strb	r3, [r2, #0]
    3b4c:	e7ee      	b.n	3b2c <uc8151_set_config+0x138>
        case STRENGTH_4:                eink_data[0] |= 0x03; break;
    3b4e:	2203      	movs	r2, #3
    3b50:	4313      	orrs	r3, r2
    3b52:	aa04      	add	r2, sp, #16
    3b54:	7013      	strb	r3, [r2, #0]
    3b56:	e7e9      	b.n	3b2c <uc8151_set_config+0x138>
        case STRENGTH_5:                eink_data[0] |= 0x04; break;
    3b58:	2204      	movs	r2, #4
    3b5a:	4313      	orrs	r3, r2
    3b5c:	aa04      	add	r2, sp, #16
    3b5e:	7013      	strb	r3, [r2, #0]
    3b60:	e7e4      	b.n	3b2c <uc8151_set_config+0x138>
        case STRENGTH_6:                eink_data[0] |= 0x05; break;
    3b62:	2205      	movs	r2, #5
    3b64:	4313      	orrs	r3, r2
    3b66:	aa04      	add	r2, sp, #16
    3b68:	7013      	strb	r3, [r2, #0]
    3b6a:	e7df      	b.n	3b2c <uc8151_set_config+0x138>
        case STRENGTH_7:                eink_data[0] |= 0x06; break;
    3b6c:	2206      	movs	r2, #6
    3b6e:	4313      	orrs	r3, r2
    3b70:	aa04      	add	r2, sp, #16
    3b72:	7013      	strb	r3, [r2, #0]
    3b74:	e7da      	b.n	3b2c <uc8151_set_config+0x138>
        case STRENGTH_8:                eink_data[0] |= 0x07; break;
    3b76:	2207      	movs	r2, #7
    3b78:	4313      	orrs	r3, r2
    3b7a:	aa04      	add	r2, sp, #16
    3b7c:	7013      	strb	r3, [r2, #0]
    3b7e:	e7d5      	b.n	3b2c <uc8151_set_config+0x138>
        case MIN_OFF_TIME_340_NS:       eink_data[0] |= 0x01; break;
    3b80:	2501      	movs	r5, #1
    3b82:	432b      	orrs	r3, r5
    3b84:	ad04      	add	r5, sp, #16
    3b86:	702b      	strb	r3, [r5, #0]
    switch (config->booster_soft_start.a_soft_start_period) {
    3b88:	2801      	cmp	r0, #1
    3b8a:	d030      	beq.n	3bee <uc8151_set_config+0x1fa>
    3b8c:	2800      	cmp	r0, #0
    3b8e:	d02a      	beq.n	3be6 <uc8151_set_config+0x1f2>
    3b90:	2802      	cmp	r0, #2
    3b92:	d030      	beq.n	3bf6 <uc8151_set_config+0x202>
    3b94:	2803      	cmp	r0, #3
    3b96:	d032      	beq.n	3bfe <uc8151_set_config+0x20a>
    eink_data[1] = eink_data[1] << 3;
    3b98:	ab04      	add	r3, sp, #16
    3b9a:	785b      	ldrb	r3, [r3, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3b9c:	2907      	cmp	r1, #7
    3b9e:	d900      	bls.n	3ba2 <uc8151_set_config+0x1ae>
    3ba0:	e08c      	b.n	3cbc <uc8151_set_config+0x2c8>
    3ba2:	0088      	lsls	r0, r1, #2
    3ba4:	4d97      	ldr	r5, [pc, #604]	; (3e04 <uc8151_set_config+0x410>)
    3ba6:	5828      	ldr	r0, [r5, r0]
    3ba8:	4687      	mov	pc, r0
        case MIN_OFF_TIME_400_NS:       eink_data[0] |= 0x02; break;
    3baa:	2502      	movs	r5, #2
    3bac:	432b      	orrs	r3, r5
    3bae:	ad04      	add	r5, sp, #16
    3bb0:	702b      	strb	r3, [r5, #0]
    3bb2:	e7e9      	b.n	3b88 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_540_NS:       eink_data[0] |= 0x03; break;
    3bb4:	2503      	movs	r5, #3
    3bb6:	432b      	orrs	r3, r5
    3bb8:	ad04      	add	r5, sp, #16
    3bba:	702b      	strb	r3, [r5, #0]
    3bbc:	e7e4      	b.n	3b88 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_800_NS:       eink_data[0] |= 0x04; break;
    3bbe:	2504      	movs	r5, #4
    3bc0:	432b      	orrs	r3, r5
    3bc2:	ad04      	add	r5, sp, #16
    3bc4:	702b      	strb	r3, [r5, #0]
    3bc6:	e7df      	b.n	3b88 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_1540_NS:      eink_data[0] |= 0x05; break;
    3bc8:	2505      	movs	r5, #5
    3bca:	432b      	orrs	r3, r5
    3bcc:	ad04      	add	r5, sp, #16
    3bce:	702b      	strb	r3, [r5, #0]
    3bd0:	e7da      	b.n	3b88 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_3340_NS:      eink_data[0] |= 0x06; break;
    3bd2:	2506      	movs	r5, #6
    3bd4:	432b      	orrs	r3, r5
    3bd6:	ad04      	add	r5, sp, #16
    3bd8:	702b      	strb	r3, [r5, #0]
    3bda:	e7d5      	b.n	3b88 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_6580_NS:      eink_data[0] |= 0x07; break;
    3bdc:	2507      	movs	r5, #7
    3bde:	432b      	orrs	r3, r5
    3be0:	ad04      	add	r5, sp, #16
    3be2:	702b      	strb	r3, [r5, #0]
    3be4:	e7d0      	b.n	3b88 <uc8151_set_config+0x194>
        case SS_PERIOD_10MS:            eink_data[1] = 0x00; break;
    3be6:	2000      	movs	r0, #0
    3be8:	ab04      	add	r3, sp, #16
    3bea:	7058      	strb	r0, [r3, #1]
    3bec:	e7d4      	b.n	3b98 <uc8151_set_config+0x1a4>
        case SS_PERIOD_20MS:            eink_data[1] = 0x01; break;
    3bee:	2001      	movs	r0, #1
    3bf0:	ab04      	add	r3, sp, #16
    3bf2:	7058      	strb	r0, [r3, #1]
    3bf4:	e7d0      	b.n	3b98 <uc8151_set_config+0x1a4>
        case SS_PERIOD_30MS:            eink_data[1] = 0x02; break;
    3bf6:	2002      	movs	r0, #2
    3bf8:	ab04      	add	r3, sp, #16
    3bfa:	7058      	strb	r0, [r3, #1]
    3bfc:	e7cc      	b.n	3b98 <uc8151_set_config+0x1a4>
        case SS_PERIOD_40MS:            eink_data[1] = 0x03; break;
    3bfe:	2003      	movs	r0, #3
    3c00:	ab04      	add	r3, sp, #16
    3c02:	7058      	strb	r0, [r3, #1]
    3c04:	e7c8      	b.n	3b98 <uc8151_set_config+0x1a4>
    eink_data[1] = eink_data[1] << 3;
    3c06:	019b      	lsls	r3, r3, #6
    3c08:	2008      	movs	r0, #8
    3c0a:	4303      	orrs	r3, r0
    3c0c:	b2db      	uxtb	r3, r3
    3c0e:	a804      	add	r0, sp, #16
    3c10:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c12:	2a07      	cmp	r2, #7
    3c14:	d900      	bls.n	3c18 <uc8151_set_config+0x224>
    3c16:	e0bd      	b.n	3d94 <uc8151_set_config+0x3a0>
    3c18:	0090      	lsls	r0, r2, #2
    3c1a:	4d7b      	ldr	r5, [pc, #492]	; (3e08 <uc8151_set_config+0x414>)
    3c1c:	5828      	ldr	r0, [r5, r0]
    3c1e:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c20:	019b      	lsls	r3, r3, #6
    3c22:	2010      	movs	r0, #16
    3c24:	4303      	orrs	r3, r0
    3c26:	b2db      	uxtb	r3, r3
    3c28:	a804      	add	r0, sp, #16
    3c2a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c2c:	2a07      	cmp	r2, #7
    3c2e:	d900      	bls.n	3c32 <uc8151_set_config+0x23e>
    3c30:	e0b4      	b.n	3d9c <uc8151_set_config+0x3a8>
    3c32:	0090      	lsls	r0, r2, #2
    3c34:	4d75      	ldr	r5, [pc, #468]	; (3e0c <uc8151_set_config+0x418>)
    3c36:	5828      	ldr	r0, [r5, r0]
    3c38:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c3a:	019b      	lsls	r3, r3, #6
    3c3c:	2018      	movs	r0, #24
    3c3e:	4303      	orrs	r3, r0
    3c40:	b2db      	uxtb	r3, r3
    3c42:	a804      	add	r0, sp, #16
    3c44:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c46:	2a07      	cmp	r2, #7
    3c48:	d900      	bls.n	3c4c <uc8151_set_config+0x258>
    3c4a:	e0ab      	b.n	3da4 <uc8151_set_config+0x3b0>
    3c4c:	0090      	lsls	r0, r2, #2
    3c4e:	4d70      	ldr	r5, [pc, #448]	; (3e10 <uc8151_set_config+0x41c>)
    3c50:	5828      	ldr	r0, [r5, r0]
    3c52:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c54:	019b      	lsls	r3, r3, #6
    3c56:	2020      	movs	r0, #32
    3c58:	4303      	orrs	r3, r0
    3c5a:	b2db      	uxtb	r3, r3
    3c5c:	a804      	add	r0, sp, #16
    3c5e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c60:	2a07      	cmp	r2, #7
    3c62:	d900      	bls.n	3c66 <uc8151_set_config+0x272>
    3c64:	e0a2      	b.n	3dac <uc8151_set_config+0x3b8>
    3c66:	0090      	lsls	r0, r2, #2
    3c68:	4d6a      	ldr	r5, [pc, #424]	; (3e14 <uc8151_set_config+0x420>)
    3c6a:	5828      	ldr	r0, [r5, r0]
    3c6c:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c6e:	019b      	lsls	r3, r3, #6
    3c70:	2028      	movs	r0, #40	; 0x28
    3c72:	4303      	orrs	r3, r0
    3c74:	b2db      	uxtb	r3, r3
    3c76:	a804      	add	r0, sp, #16
    3c78:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c7a:	2a07      	cmp	r2, #7
    3c7c:	d900      	bls.n	3c80 <uc8151_set_config+0x28c>
    3c7e:	e099      	b.n	3db4 <uc8151_set_config+0x3c0>
    3c80:	0090      	lsls	r0, r2, #2
    3c82:	4d65      	ldr	r5, [pc, #404]	; (3e18 <uc8151_set_config+0x424>)
    3c84:	5828      	ldr	r0, [r5, r0]
    3c86:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c88:	019b      	lsls	r3, r3, #6
    3c8a:	2030      	movs	r0, #48	; 0x30
    3c8c:	4303      	orrs	r3, r0
    3c8e:	b2db      	uxtb	r3, r3
    3c90:	a804      	add	r0, sp, #16
    3c92:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c94:	2a07      	cmp	r2, #7
    3c96:	d900      	bls.n	3c9a <uc8151_set_config+0x2a6>
    3c98:	e090      	b.n	3dbc <uc8151_set_config+0x3c8>
    3c9a:	0090      	lsls	r0, r2, #2
    3c9c:	4d5f      	ldr	r5, [pc, #380]	; (3e1c <uc8151_set_config+0x428>)
    3c9e:	5828      	ldr	r0, [r5, r0]
    3ca0:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3ca2:	019b      	lsls	r3, r3, #6
    3ca4:	2038      	movs	r0, #56	; 0x38
    3ca6:	4303      	orrs	r3, r0
    3ca8:	b2db      	uxtb	r3, r3
    3caa:	a804      	add	r0, sp, #16
    3cac:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3cae:	2a07      	cmp	r2, #7
    3cb0:	d900      	bls.n	3cb4 <uc8151_set_config+0x2c0>
    3cb2:	e087      	b.n	3dc4 <uc8151_set_config+0x3d0>
    3cb4:	0090      	lsls	r0, r2, #2
    3cb6:	4d5a      	ldr	r5, [pc, #360]	; (3e20 <uc8151_set_config+0x42c>)
    3cb8:	5828      	ldr	r0, [r5, r0]
    3cba:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3cbc:	019b      	lsls	r3, r3, #6
    3cbe:	b2db      	uxtb	r3, r3
    3cc0:	a804      	add	r0, sp, #16
    3cc2:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3cc4:	2a07      	cmp	r2, #7
    3cc6:	d850      	bhi.n	3d6a <uc8151_set_config+0x376>
    3cc8:	0090      	lsls	r0, r2, #2
    3cca:	4d56      	ldr	r5, [pc, #344]	; (3e24 <uc8151_set_config+0x430>)
    3ccc:	5828      	ldr	r0, [r5, r0]
    3cce:	4687      	mov	pc, r0
        case MIN_OFF_TIME_340_NS:       eink_data[1] |= 0x01; break;
    3cd0:	2001      	movs	r0, #1
    3cd2:	4303      	orrs	r3, r0
    3cd4:	a804      	add	r0, sp, #16
    3cd6:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3cd8:	2907      	cmp	r1, #7
    3cda:	d900      	bls.n	3cde <uc8151_set_config+0x2ea>
    3cdc:	e0d7      	b.n	3e8e <uc8151_set_config+0x49a>
    3cde:	0089      	lsls	r1, r1, #2
    3ce0:	4b51      	ldr	r3, [pc, #324]	; (3e28 <uc8151_set_config+0x434>)
    3ce2:	585b      	ldr	r3, [r3, r1]
    3ce4:	469f      	mov	pc, r3
        case MIN_OFF_TIME_400_NS:       eink_data[1] |= 0x02; break;
    3ce6:	2002      	movs	r0, #2
    3ce8:	4303      	orrs	r3, r0
    3cea:	a804      	add	r0, sp, #16
    3cec:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3cee:	2907      	cmp	r1, #7
    3cf0:	d900      	bls.n	3cf4 <uc8151_set_config+0x300>
    3cf2:	e12c      	b.n	3f4e <uc8151_set_config+0x55a>
    3cf4:	0089      	lsls	r1, r1, #2
    3cf6:	4b4d      	ldr	r3, [pc, #308]	; (3e2c <uc8151_set_config+0x438>)
    3cf8:	585b      	ldr	r3, [r3, r1]
    3cfa:	469f      	mov	pc, r3
        case MIN_OFF_TIME_540_NS:       eink_data[1] |= 0x03; break;
    3cfc:	2003      	movs	r0, #3
    3cfe:	4303      	orrs	r3, r0
    3d00:	a804      	add	r0, sp, #16
    3d02:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d04:	2907      	cmp	r1, #7
    3d06:	d900      	bls.n	3d0a <uc8151_set_config+0x316>
    3d08:	e12a      	b.n	3f60 <uc8151_set_config+0x56c>
    3d0a:	0089      	lsls	r1, r1, #2
    3d0c:	4b48      	ldr	r3, [pc, #288]	; (3e30 <uc8151_set_config+0x43c>)
    3d0e:	585b      	ldr	r3, [r3, r1]
    3d10:	469f      	mov	pc, r3
        case MIN_OFF_TIME_800_NS:       eink_data[1] |= 0x04; break;
    3d12:	2004      	movs	r0, #4
    3d14:	4303      	orrs	r3, r0
    3d16:	a804      	add	r0, sp, #16
    3d18:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d1a:	2907      	cmp	r1, #7
    3d1c:	d900      	bls.n	3d20 <uc8151_set_config+0x32c>
    3d1e:	e128      	b.n	3f72 <uc8151_set_config+0x57e>
    3d20:	0089      	lsls	r1, r1, #2
    3d22:	4b44      	ldr	r3, [pc, #272]	; (3e34 <uc8151_set_config+0x440>)
    3d24:	585b      	ldr	r3, [r3, r1]
    3d26:	469f      	mov	pc, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[1] |= 0x05; break;
    3d28:	2005      	movs	r0, #5
    3d2a:	4303      	orrs	r3, r0
    3d2c:	a804      	add	r0, sp, #16
    3d2e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d30:	2907      	cmp	r1, #7
    3d32:	d900      	bls.n	3d36 <uc8151_set_config+0x342>
    3d34:	e126      	b.n	3f84 <uc8151_set_config+0x590>
    3d36:	0089      	lsls	r1, r1, #2
    3d38:	4b3f      	ldr	r3, [pc, #252]	; (3e38 <uc8151_set_config+0x444>)
    3d3a:	585b      	ldr	r3, [r3, r1]
    3d3c:	469f      	mov	pc, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[1] |= 0x06; break;
    3d3e:	2006      	movs	r0, #6
    3d40:	4303      	orrs	r3, r0
    3d42:	a804      	add	r0, sp, #16
    3d44:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d46:	2907      	cmp	r1, #7
    3d48:	d900      	bls.n	3d4c <uc8151_set_config+0x358>
    3d4a:	e124      	b.n	3f96 <uc8151_set_config+0x5a2>
    3d4c:	0089      	lsls	r1, r1, #2
    3d4e:	4b3b      	ldr	r3, [pc, #236]	; (3e3c <uc8151_set_config+0x448>)
    3d50:	585b      	ldr	r3, [r3, r1]
    3d52:	469f      	mov	pc, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[1] |= 0x07; break;
    3d54:	2007      	movs	r0, #7
    3d56:	4303      	orrs	r3, r0
    3d58:	a804      	add	r0, sp, #16
    3d5a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d5c:	2907      	cmp	r1, #7
    3d5e:	d900      	bls.n	3d62 <uc8151_set_config+0x36e>
    3d60:	e122      	b.n	3fa8 <uc8151_set_config+0x5b4>
    3d62:	0089      	lsls	r1, r1, #2
    3d64:	4b36      	ldr	r3, [pc, #216]	; (3e40 <uc8151_set_config+0x44c>)
    3d66:	585b      	ldr	r3, [r3, r1]
    3d68:	469f      	mov	pc, r3
    3d6a:	2907      	cmp	r1, #7
    3d6c:	d806      	bhi.n	3d7c <uc8151_set_config+0x388>
    3d6e:	0089      	lsls	r1, r1, #2
    3d70:	4b34      	ldr	r3, [pc, #208]	; (3e44 <uc8151_set_config+0x450>)
    3d72:	585b      	ldr	r3, [r3, r1]
    3d74:	469f      	mov	pc, r3
        case STRENGTH_1:                eink_data[2] = 0x00; break;
    3d76:	2100      	movs	r1, #0
    3d78:	ab04      	add	r3, sp, #16
    3d7a:	7099      	strb	r1, [r3, #2]
    eink_data[2] = eink_data[2] << 3;
    3d7c:	a904      	add	r1, sp, #16
    3d7e:	788b      	ldrb	r3, [r1, #2]
    3d80:	00db      	lsls	r3, r3, #3
    3d82:	b2db      	uxtb	r3, r3
    3d84:	708b      	strb	r3, [r1, #2]
    switch (config->booster_soft_start.a_min_off_time) {
    3d86:	2a07      	cmp	r2, #7
    3d88:	d900      	bls.n	3d8c <uc8151_set_config+0x398>
    3d8a:	e088      	b.n	3e9e <uc8151_set_config+0x4aa>
    3d8c:	0092      	lsls	r2, r2, #2
    3d8e:	492e      	ldr	r1, [pc, #184]	; (3e48 <uc8151_set_config+0x454>)
    3d90:	588a      	ldr	r2, [r1, r2]
    3d92:	4697      	mov	pc, r2
        case STRENGTH_2:                eink_data[2] = 0x01; break;
    3d94:	2101      	movs	r1, #1
    3d96:	ab04      	add	r3, sp, #16
    3d98:	7099      	strb	r1, [r3, #2]
    3d9a:	e7ef      	b.n	3d7c <uc8151_set_config+0x388>
        case STRENGTH_3:                eink_data[2] = 0x02; break;
    3d9c:	2102      	movs	r1, #2
    3d9e:	ab04      	add	r3, sp, #16
    3da0:	7099      	strb	r1, [r3, #2]
    3da2:	e7eb      	b.n	3d7c <uc8151_set_config+0x388>
        case STRENGTH_4:                eink_data[2] = 0x03; break;
    3da4:	2103      	movs	r1, #3
    3da6:	ab04      	add	r3, sp, #16
    3da8:	7099      	strb	r1, [r3, #2]
    3daa:	e7e7      	b.n	3d7c <uc8151_set_config+0x388>
        case STRENGTH_5:                eink_data[2] = 0x04; break;
    3dac:	2104      	movs	r1, #4
    3dae:	ab04      	add	r3, sp, #16
    3db0:	7099      	strb	r1, [r3, #2]
    3db2:	e7e3      	b.n	3d7c <uc8151_set_config+0x388>
        case STRENGTH_6:                eink_data[2] = 0x05; break;
    3db4:	2105      	movs	r1, #5
    3db6:	ab04      	add	r3, sp, #16
    3db8:	7099      	strb	r1, [r3, #2]
    3dba:	e7df      	b.n	3d7c <uc8151_set_config+0x388>
        case STRENGTH_7:                eink_data[2] = 0x06; break;
    3dbc:	2106      	movs	r1, #6
    3dbe:	ab04      	add	r3, sp, #16
    3dc0:	7099      	strb	r1, [r3, #2]
    3dc2:	e7db      	b.n	3d7c <uc8151_set_config+0x388>
        case STRENGTH_8:                eink_data[2] = 0x07; break;
    3dc4:	2107      	movs	r1, #7
    3dc6:	ab04      	add	r3, sp, #16
    3dc8:	7099      	strb	r1, [r3, #2]
    3dca:	e7d7      	b.n	3d7c <uc8151_set_config+0x388>
        case PFS_1_FRAME:               eink_data[0] = 0x00; break;
    3dcc:	2200      	movs	r2, #0
    3dce:	ab04      	add	r3, sp, #16
    3dd0:	701a      	strb	r2, [r3, #0]
    3dd2:	e072      	b.n	3eba <uc8151_set_config+0x4c6>
        case PFS_2_FRAMES:              eink_data[0] = 0x10; break;
    3dd4:	2210      	movs	r2, #16
    3dd6:	ab04      	add	r3, sp, #16
    3dd8:	701a      	strb	r2, [r3, #0]
    3dda:	e06e      	b.n	3eba <uc8151_set_config+0x4c6>
        case PFS_3_FRAMES:              eink_data[0] = 0x20; break;
    3ddc:	2220      	movs	r2, #32
    3dde:	ab04      	add	r3, sp, #16
    3de0:	701a      	strb	r2, [r3, #0]
    3de2:	e06a      	b.n	3eba <uc8151_set_config+0x4c6>
    3de4:	00001ba5 	.word	0x00001ba5
    3de8:	00004719 	.word	0x00004719
    3dec:	00003879 	.word	0x00003879
    3df0:	0000034d 	.word	0x0000034d
    3df4:	0000035b 	.word	0x0000035b
    3df8:	41004400 	.word	0x41004400
    3dfc:	00004890 	.word	0x00004890
    3e00:	000048b0 	.word	0x000048b0
    3e04:	000048d0 	.word	0x000048d0
    3e08:	000048f0 	.word	0x000048f0
    3e0c:	00004910 	.word	0x00004910
    3e10:	00004930 	.word	0x00004930
    3e14:	00004950 	.word	0x00004950
    3e18:	00004970 	.word	0x00004970
    3e1c:	00004990 	.word	0x00004990
    3e20:	000049b0 	.word	0x000049b0
    3e24:	000049d0 	.word	0x000049d0
    3e28:	000049f0 	.word	0x000049f0
    3e2c:	00004a10 	.word	0x00004a10
    3e30:	00004a30 	.word	0x00004a30
    3e34:	00004a50 	.word	0x00004a50
    3e38:	00004a70 	.word	0x00004a70
    3e3c:	00004a90 	.word	0x00004a90
    3e40:	00004ab0 	.word	0x00004ab0
    3e44:	00004ad0 	.word	0x00004ad0
    3e48:	00004af0 	.word	0x00004af0
        case PFS_4_FRAMES:              eink_data[0] = 0x30; break;
    3e4c:	2230      	movs	r2, #48	; 0x30
    3e4e:	ab04      	add	r3, sp, #16
    3e50:	701a      	strb	r2, [r3, #0]
    3e52:	e032      	b.n	3eba <uc8151_set_config+0x4c6>
        case INTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x0; break;
    3e54:	2200      	movs	r2, #0
    3e56:	ab04      	add	r3, sp, #16
    3e58:	701a      	strb	r2, [r3, #0]
    3e5a:	e038      	b.n	3ece <uc8151_set_config+0x4da>
        case EXTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x1; break;
    3e5c:	2201      	movs	r2, #1
    3e5e:	ab04      	add	r3, sp, #16
    3e60:	701a      	strb	r2, [r3, #0]
    3e62:	e034      	b.n	3ece <uc8151_set_config+0x4da>
    } else if((config->temperature_sensor_settings.temperature_offset <= 7) && (config->temperature_sensor_settings.temperature_offset >= 0)) {
    3e64:	b2d1      	uxtb	r1, r2
    3e66:	2907      	cmp	r1, #7
    3e68:	d803      	bhi.n	3e72 <uc8151_set_config+0x47e>
        eink_data[0] |= config->temperature_sensor_settings.temperature_offset;
    3e6a:	4313      	orrs	r3, r2
    3e6c:	aa04      	add	r2, sp, #16
    3e6e:	7013      	strb	r3, [r2, #0]
    3e70:	e039      	b.n	3ee6 <uc8151_set_config+0x4f2>
    } else if(config->temperature_sensor_settings.temperature_offset < -8) {
    3e72:	0011      	movs	r1, r2
    3e74:	3108      	adds	r1, #8
    3e76:	da04      	bge.n	3e82 <uc8151_set_config+0x48e>
        eink_data[0] |= 0x8;
    3e78:	2208      	movs	r2, #8
    3e7a:	4313      	orrs	r3, r2
    3e7c:	aa04      	add	r2, sp, #16
    3e7e:	7013      	strb	r3, [r2, #0]
    3e80:	e031      	b.n	3ee6 <uc8151_set_config+0x4f2>
        eink_data[0] |= (config->temperature_sensor_settings.temperature_offset & 0x0F);
    3e82:	210f      	movs	r1, #15
    3e84:	400a      	ands	r2, r1
    3e86:	4313      	orrs	r3, r2
    3e88:	aa04      	add	r2, sp, #16
    3e8a:	7013      	strb	r3, [r2, #0]
    3e8c:	e02b      	b.n	3ee6 <uc8151_set_config+0x4f2>
    eink_data[2] = eink_data[2] << 3;
    3e8e:	ab04      	add	r3, sp, #16
    3e90:	789b      	ldrb	r3, [r3, #2]
    3e92:	00db      	lsls	r3, r3, #3
    3e94:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_340_NS:       eink_data[2] |= 0x01; break;
    3e96:	2201      	movs	r2, #1
    3e98:	4313      	orrs	r3, r2
    3e9a:	aa04      	add	r2, sp, #16
    3e9c:	7093      	strb	r3, [r2, #2]
    eink_write_data(UC8151_BTST, eink_data, 3);
    3e9e:	2203      	movs	r2, #3
    3ea0:	a904      	add	r1, sp, #16
    3ea2:	2006      	movs	r0, #6
    3ea4:	4b45      	ldr	r3, [pc, #276]	; (3fbc <uc8151_set_config+0x5c8>)
    3ea6:	4798      	blx	r3
    switch (config->power_off_sequence) {
    3ea8:	7d23      	ldrb	r3, [r4, #20]
    3eaa:	2b01      	cmp	r3, #1
    3eac:	d092      	beq.n	3dd4 <uc8151_set_config+0x3e0>
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d08c      	beq.n	3dcc <uc8151_set_config+0x3d8>
    3eb2:	2b02      	cmp	r3, #2
    3eb4:	d092      	beq.n	3ddc <uc8151_set_config+0x3e8>
    3eb6:	2b03      	cmp	r3, #3
    3eb8:	d0c8      	beq.n	3e4c <uc8151_set_config+0x458>
    eink_write_data(UC8151_PFS, eink_data, 1);
    3eba:	2201      	movs	r2, #1
    3ebc:	a904      	add	r1, sp, #16
    3ebe:	2003      	movs	r0, #3
    3ec0:	4b3e      	ldr	r3, [pc, #248]	; (3fbc <uc8151_set_config+0x5c8>)
    3ec2:	4798      	blx	r3
    switch (config->temperature_sensor_settings.sensor_select) {
    3ec4:	7d63      	ldrb	r3, [r4, #21]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d0c4      	beq.n	3e54 <uc8151_set_config+0x460>
    3eca:	2b01      	cmp	r3, #1
    3ecc:	d0c6      	beq.n	3e5c <uc8151_set_config+0x468>
    eink_data[0] = eink_data[0] << 4;
    3ece:	ab04      	add	r3, sp, #16
    3ed0:	781b      	ldrb	r3, [r3, #0]
    3ed2:	011b      	lsls	r3, r3, #4
    3ed4:	b2db      	uxtb	r3, r3
    if (config->temperature_sensor_settings.temperature_offset > 7) {
    3ed6:	2216      	movs	r2, #22
    3ed8:	56a2      	ldrsb	r2, [r4, r2]
    3eda:	2a07      	cmp	r2, #7
    3edc:	ddc2      	ble.n	3e64 <uc8151_set_config+0x470>
        eink_data[0] |= 0x7;
    3ede:	2207      	movs	r2, #7
    3ee0:	4313      	orrs	r3, r2
    3ee2:	aa04      	add	r2, sp, #16
    3ee4:	7013      	strb	r3, [r2, #0]
    eink_write_data(UC8151_TSE, eink_data, 1);
    3ee6:	ad04      	add	r5, sp, #16
    3ee8:	2201      	movs	r2, #1
    3eea:	0029      	movs	r1, r5
    3eec:	2041      	movs	r0, #65	; 0x41
    3eee:	4c33      	ldr	r4, [pc, #204]	; (3fbc <uc8151_set_config+0x5c8>)
    3ef0:	47a0      	blx	r4
    eink_data[0] = 0x77;
    3ef2:	2377      	movs	r3, #119	; 0x77
    3ef4:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3ef6:	2201      	movs	r2, #1
    3ef8:	0029      	movs	r1, r5
    3efa:	2050      	movs	r0, #80	; 0x50
    3efc:	47a0      	blx	r4
    eink_data[0] = 0x22;
    3efe:	2322      	movs	r3, #34	; 0x22
    3f00:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_TCON, eink_data, 1);
    3f02:	2201      	movs	r2, #1
    3f04:	0029      	movs	r1, r5
    3f06:	2060      	movs	r0, #96	; 0x60
    3f08:	47a0      	blx	r4
    eink_data[0] = 0x3C;
    3f0a:	233c      	movs	r3, #60	; 0x3c
    3f0c:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3f0e:	2201      	movs	r2, #1
    3f10:	0029      	movs	r1, r5
    3f12:	2050      	movs	r0, #80	; 0x50
    3f14:	47a0      	blx	r4
    eink_write_data(UC8151_POF, 0, 0);
    3f16:	2200      	movs	r2, #0
    3f18:	2100      	movs	r1, #0
    3f1a:	2002      	movs	r0, #2
    3f1c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    3f1e:	4f28      	ldr	r7, [pc, #160]	; (3fc0 <uc8151_set_config+0x5cc>)
	CRITICAL_SECTION_LEAVE();
    3f20:	4e28      	ldr	r6, [pc, #160]	; (3fc4 <uc8151_set_config+0x5d0>)
	CRITICAL_SECTION_ENTER();
    3f22:	a801      	add	r0, sp, #4
    3f24:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3f26:	23c0      	movs	r3, #192	; 0xc0
    3f28:	05db      	lsls	r3, r3, #23
    3f2a:	2580      	movs	r5, #128	; 0x80
    3f2c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3f2e:	22a0      	movs	r2, #160	; 0xa0
    3f30:	4925      	ldr	r1, [pc, #148]	; (3fc8 <uc8151_set_config+0x5d4>)
    3f32:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3f34:	2190      	movs	r1, #144	; 0x90
    3f36:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3f38:	4053      	eors	r3, r2
    3f3a:	401c      	ands	r4, r3
    3f3c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3f3e:	a801      	add	r0, sp, #4
    3f40:	47b0      	blx	r6
    3f42:	4225      	tst	r5, r4
    3f44:	d0ed      	beq.n	3f22 <uc8151_set_config+0x52e>
}
    3f46:	b006      	add	sp, #24
    3f48:	bc04      	pop	{r2}
    3f4a:	4690      	mov	r8, r2
    3f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_data[2] = eink_data[2] << 3;
    3f4e:	ab04      	add	r3, sp, #16
    3f50:	789b      	ldrb	r3, [r3, #2]
    3f52:	00db      	lsls	r3, r3, #3
    3f54:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_400_NS:       eink_data[2] |= 0x02; break;
    3f56:	2202      	movs	r2, #2
    3f58:	4313      	orrs	r3, r2
    3f5a:	aa04      	add	r2, sp, #16
    3f5c:	7093      	strb	r3, [r2, #2]
    3f5e:	e79e      	b.n	3e9e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f60:	ab04      	add	r3, sp, #16
    3f62:	789b      	ldrb	r3, [r3, #2]
    3f64:	00db      	lsls	r3, r3, #3
    3f66:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_540_NS:       eink_data[2] |= 0x03; break;
    3f68:	2203      	movs	r2, #3
    3f6a:	4313      	orrs	r3, r2
    3f6c:	aa04      	add	r2, sp, #16
    3f6e:	7093      	strb	r3, [r2, #2]
    3f70:	e795      	b.n	3e9e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f72:	ab04      	add	r3, sp, #16
    3f74:	789b      	ldrb	r3, [r3, #2]
    3f76:	00db      	lsls	r3, r3, #3
    3f78:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_800_NS:       eink_data[2] |= 0x04; break;
    3f7a:	2204      	movs	r2, #4
    3f7c:	4313      	orrs	r3, r2
    3f7e:	aa04      	add	r2, sp, #16
    3f80:	7093      	strb	r3, [r2, #2]
    3f82:	e78c      	b.n	3e9e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f84:	ab04      	add	r3, sp, #16
    3f86:	789b      	ldrb	r3, [r3, #2]
    3f88:	00db      	lsls	r3, r3, #3
    3f8a:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[2] |= 0x05; break;
    3f8c:	2205      	movs	r2, #5
    3f8e:	4313      	orrs	r3, r2
    3f90:	aa04      	add	r2, sp, #16
    3f92:	7093      	strb	r3, [r2, #2]
    3f94:	e783      	b.n	3e9e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f96:	ab04      	add	r3, sp, #16
    3f98:	789b      	ldrb	r3, [r3, #2]
    3f9a:	00db      	lsls	r3, r3, #3
    3f9c:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[2] |= 0x06; break;
    3f9e:	2206      	movs	r2, #6
    3fa0:	4313      	orrs	r3, r2
    3fa2:	aa04      	add	r2, sp, #16
    3fa4:	7093      	strb	r3, [r2, #2]
    3fa6:	e77a      	b.n	3e9e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3fa8:	ab04      	add	r3, sp, #16
    3faa:	789b      	ldrb	r3, [r3, #2]
    3fac:	00db      	lsls	r3, r3, #3
    3fae:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[2] |= 0x07; break;
    3fb0:	2207      	movs	r2, #7
    3fb2:	4313      	orrs	r3, r2
    3fb4:	aa04      	add	r2, sp, #16
    3fb6:	7093      	strb	r3, [r2, #2]
    3fb8:	e771      	b.n	3e9e <uc8151_set_config+0x4aa>
    3fba:	46c0      	nop			; (mov r8, r8)
    3fbc:	00001ba5 	.word	0x00001ba5
    3fc0:	0000034d 	.word	0x0000034d
    3fc4:	0000035b 	.word	0x0000035b
    3fc8:	41004400 	.word	0x41004400

00003fcc <gfx_eink_graphics_fill_screen>:
 * \param fill_type Selects the color to fill the display buffer with.
 * 
 * \note Selecting FILL_NONE as the color will be ignored.
 */
void gfx_eink_graphics_fill_screen(enum eink_fill_colour fill_color)
{
    3fcc:	b530      	push	{r4, r5, lr}
    3fce:	b083      	sub	sp, #12
    3fd0:	0004      	movs	r4, r0
    volatile eink_coordinate dx, width_fill;
    volatile eink_coordinate dy, height_fill;
    
    width_fill = ptr_eink_gfx_config->display_width;
    3fd2:	4b5c      	ldr	r3, [pc, #368]	; (4144 <gfx_eink_graphics_fill_screen+0x178>)
    3fd4:	681b      	ldr	r3, [r3, #0]
    3fd6:	8859      	ldrh	r1, [r3, #2]
    3fd8:	aa01      	add	r2, sp, #4
    3fda:	8011      	strh	r1, [r2, #0]
    height_fill = ptr_eink_gfx_config->display_height;
    3fdc:	889b      	ldrh	r3, [r3, #4]
    3fde:	4669      	mov	r1, sp
    3fe0:	800b      	strh	r3, [r1, #0]
    
    for(dx = 0; dx < width_fill; dx++) {
    3fe2:	466b      	mov	r3, sp
    3fe4:	2100      	movs	r1, #0
    3fe6:	80d9      	strh	r1, [r3, #6]
    3fe8:	3306      	adds	r3, #6
    3fea:	881b      	ldrh	r3, [r3, #0]
    3fec:	8812      	ldrh	r2, [r2, #0]
    3fee:	b29b      	uxth	r3, r3
    3ff0:	4293      	cmp	r3, r2
    3ff2:	d300      	bcc.n	3ff6 <gfx_eink_graphics_fill_screen+0x2a>
    3ff4:	e0a4      	b.n	4140 <gfx_eink_graphics_fill_screen+0x174>
        for(dy = 0; dy < height_fill; dy++) {
            if(ptr_eink_gfx_config->gfx_display == GFX_AC057TC1)
            {
                switch (fill_color) {
    3ff6:	0085      	lsls	r5, r0, #2
    3ff8:	4b53      	ldr	r3, [pc, #332]	; (4148 <gfx_eink_graphics_fill_screen+0x17c>)
    3ffa:	469c      	mov	ip, r3
    3ffc:	4465      	add	r5, ip
    3ffe:	e094      	b.n	412a <gfx_eink_graphics_fill_screen+0x15e>
    4000:	2c07      	cmp	r4, #7
    4002:	d85a      	bhi.n	40ba <gfx_eink_graphics_fill_screen+0xee>
    4004:	682b      	ldr	r3, [r5, #0]
    4006:	469f      	mov	pc, r3
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    4008:	466b      	mov	r3, sp
    400a:	88d8      	ldrh	r0, [r3, #6]
    400c:	b280      	uxth	r0, r0
    400e:	466b      	mov	r3, sp
    4010:	8859      	ldrh	r1, [r3, #2]
    4012:	b289      	uxth	r1, r1
    4014:	2200      	movs	r2, #0
    4016:	4b4d      	ldr	r3, [pc, #308]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    4018:	4798      	blx	r3
    401a:	e04e      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    401c:	466b      	mov	r3, sp
    401e:	88d8      	ldrh	r0, [r3, #6]
    4020:	b280      	uxth	r0, r0
    4022:	466b      	mov	r3, sp
    4024:	8859      	ldrh	r1, [r3, #2]
    4026:	b289      	uxth	r1, r1
    4028:	2201      	movs	r2, #1
    402a:	4b48      	ldr	r3, [pc, #288]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    402c:	4798      	blx	r3
    402e:	e044      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_YELLOW: gfx_eink_set_pixel(dx, dy, PIXEL_YELLOW); break;
    4030:	466b      	mov	r3, sp
    4032:	88d8      	ldrh	r0, [r3, #6]
    4034:	b280      	uxth	r0, r0
    4036:	466b      	mov	r3, sp
    4038:	8859      	ldrh	r1, [r3, #2]
    403a:	b289      	uxth	r1, r1
    403c:	2203      	movs	r2, #3
    403e:	4b43      	ldr	r3, [pc, #268]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    4040:	4798      	blx	r3
    4042:	e03a      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    4044:	466b      	mov	r3, sp
    4046:	88d8      	ldrh	r0, [r3, #6]
    4048:	b280      	uxth	r0, r0
    404a:	466b      	mov	r3, sp
    404c:	8859      	ldrh	r1, [r3, #2]
    404e:	b289      	uxth	r1, r1
    4050:	2202      	movs	r2, #2
    4052:	4b3e      	ldr	r3, [pc, #248]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    4054:	4798      	blx	r3
    4056:	e030      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_GREEN:  gfx_eink_set_pixel(dx, dy, PIXEL_GREEN); break;
    4058:	466b      	mov	r3, sp
    405a:	88d8      	ldrh	r0, [r3, #6]
    405c:	b280      	uxth	r0, r0
    405e:	466b      	mov	r3, sp
    4060:	8859      	ldrh	r1, [r3, #2]
    4062:	b289      	uxth	r1, r1
    4064:	2204      	movs	r2, #4
    4066:	4b39      	ldr	r3, [pc, #228]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    4068:	4798      	blx	r3
    406a:	e026      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_BLUE:   gfx_eink_set_pixel(dx, dy, PIXEL_BLUE); break;
    406c:	466b      	mov	r3, sp
    406e:	88d8      	ldrh	r0, [r3, #6]
    4070:	b280      	uxth	r0, r0
    4072:	466b      	mov	r3, sp
    4074:	8859      	ldrh	r1, [r3, #2]
    4076:	b289      	uxth	r1, r1
    4078:	2205      	movs	r2, #5
    407a:	4b34      	ldr	r3, [pc, #208]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    407c:	4798      	blx	r3
    407e:	e01c      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_ORANGE: gfx_eink_set_pixel(dx, dy, PIXEL_ORANGE); break;
    4080:	466b      	mov	r3, sp
    4082:	88d8      	ldrh	r0, [r3, #6]
    4084:	b280      	uxth	r0, r0
    4086:	466b      	mov	r3, sp
    4088:	8859      	ldrh	r1, [r3, #2]
    408a:	b289      	uxth	r1, r1
    408c:	2206      	movs	r2, #6
    408e:	4b2f      	ldr	r3, [pc, #188]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    4090:	4798      	blx	r3
    4092:	e012      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_CLEAN:  gfx_eink_set_pixel(dx, dy, PIXEL_CLEAN); break;
    4094:	466b      	mov	r3, sp
    4096:	88d8      	ldrh	r0, [r3, #6]
    4098:	b280      	uxth	r0, r0
    409a:	466b      	mov	r3, sp
    409c:	8859      	ldrh	r1, [r3, #2]
    409e:	b289      	uxth	r1, r1
    40a0:	2207      	movs	r2, #7
    40a2:	4b2a      	ldr	r3, [pc, #168]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    40a4:	4798      	blx	r3
    40a6:	e008      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                }
            } else {
                switch (fill_color) {
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    40a8:	466b      	mov	r3, sp
    40aa:	88d8      	ldrh	r0, [r3, #6]
    40ac:	b280      	uxth	r0, r0
    40ae:	466b      	mov	r3, sp
    40b0:	8859      	ldrh	r1, [r3, #2]
    40b2:	b289      	uxth	r1, r1
    40b4:	2200      	movs	r2, #0
    40b6:	4b25      	ldr	r3, [pc, #148]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    40b8:	4798      	blx	r3
        for(dy = 0; dy < height_fill; dy++) {
    40ba:	466b      	mov	r3, sp
    40bc:	1c9a      	adds	r2, r3, #2
    40be:	885b      	ldrh	r3, [r3, #2]
    40c0:	3301      	adds	r3, #1
    40c2:	b29b      	uxth	r3, r3
    40c4:	8013      	strh	r3, [r2, #0]
    40c6:	8813      	ldrh	r3, [r2, #0]
    40c8:	466a      	mov	r2, sp
    40ca:	8812      	ldrh	r2, [r2, #0]
    40cc:	b29b      	uxth	r3, r3
    40ce:	4293      	cmp	r3, r2
    40d0:	d21f      	bcs.n	4112 <gfx_eink_graphics_fill_screen+0x146>
            if(ptr_eink_gfx_config->gfx_display == GFX_AC057TC1)
    40d2:	4b1c      	ldr	r3, [pc, #112]	; (4144 <gfx_eink_graphics_fill_screen+0x178>)
    40d4:	681b      	ldr	r3, [r3, #0]
    40d6:	781b      	ldrb	r3, [r3, #0]
    40d8:	2b07      	cmp	r3, #7
    40da:	d100      	bne.n	40de <gfx_eink_graphics_fill_screen+0x112>
    40dc:	e790      	b.n	4000 <gfx_eink_graphics_fill_screen+0x34>
                switch (fill_color) {
    40de:	2c01      	cmp	r4, #1
    40e0:	d00d      	beq.n	40fe <gfx_eink_graphics_fill_screen+0x132>
    40e2:	2c00      	cmp	r4, #0
    40e4:	d0e0      	beq.n	40a8 <gfx_eink_graphics_fill_screen+0xdc>
    40e6:	2c03      	cmp	r4, #3
    40e8:	d8e7      	bhi.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
                    case FILL_YELLOW:
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    40ea:	466b      	mov	r3, sp
    40ec:	88d8      	ldrh	r0, [r3, #6]
    40ee:	b280      	uxth	r0, r0
    40f0:	466b      	mov	r3, sp
    40f2:	8859      	ldrh	r1, [r3, #2]
    40f4:	b289      	uxth	r1, r1
    40f6:	2202      	movs	r2, #2
    40f8:	4b14      	ldr	r3, [pc, #80]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    40fa:	4798      	blx	r3
    40fc:	e7dd      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    40fe:	466b      	mov	r3, sp
    4100:	88d8      	ldrh	r0, [r3, #6]
    4102:	b280      	uxth	r0, r0
    4104:	466b      	mov	r3, sp
    4106:	8859      	ldrh	r1, [r3, #2]
    4108:	b289      	uxth	r1, r1
    410a:	2201      	movs	r2, #1
    410c:	4b0f      	ldr	r3, [pc, #60]	; (414c <gfx_eink_graphics_fill_screen+0x180>)
    410e:	4798      	blx	r3
    4110:	e7d3      	b.n	40ba <gfx_eink_graphics_fill_screen+0xee>
    for(dx = 0; dx < width_fill; dx++) {
    4112:	466b      	mov	r3, sp
    4114:	1d9a      	adds	r2, r3, #6
    4116:	88db      	ldrh	r3, [r3, #6]
    4118:	3301      	adds	r3, #1
    411a:	b29b      	uxth	r3, r3
    411c:	8013      	strh	r3, [r2, #0]
    411e:	8813      	ldrh	r3, [r2, #0]
    4120:	aa01      	add	r2, sp, #4
    4122:	8812      	ldrh	r2, [r2, #0]
    4124:	b29b      	uxth	r3, r3
    4126:	4293      	cmp	r3, r2
    4128:	d20a      	bcs.n	4140 <gfx_eink_graphics_fill_screen+0x174>
        for(dy = 0; dy < height_fill; dy++) {
    412a:	466b      	mov	r3, sp
    412c:	2200      	movs	r2, #0
    412e:	805a      	strh	r2, [r3, #2]
    4130:	3302      	adds	r3, #2
    4132:	881b      	ldrh	r3, [r3, #0]
    4134:	466a      	mov	r2, sp
    4136:	8812      	ldrh	r2, [r2, #0]
    4138:	b29b      	uxth	r3, r3
    413a:	4293      	cmp	r3, r2
    413c:	d3c9      	bcc.n	40d2 <gfx_eink_graphics_fill_screen+0x106>
    413e:	e7e8      	b.n	4112 <gfx_eink_graphics_fill_screen+0x146>
                }
            }
        }
    }
}
    4140:	b003      	add	sp, #12
    4142:	bd30      	pop	{r4, r5, pc}
    4144:	20000424 	.word	0x20000424
    4148:	00004b10 	.word	0x00004b10
    414c:	00000585 	.word	0x00000585

00004150 <gfx_eink_graphics_draw_rect>:
 * \param fill_type Color of the rectangle fill.
 *
 * \note Both the border and the fill can be set to blank should you want a border-less or empty rectangle.
 */
void gfx_eink_graphics_draw_rect(eink_coordinate x0, eink_coordinate y0, eink_coordinate width, eink_coordinate height, enum eink_pixel_colour line_colour, enum eink_fill_colour fill_colour)
{
    4150:	b5f0      	push	{r4, r5, r6, r7, lr}
    4152:	46de      	mov	lr, fp
    4154:	4657      	mov	r7, sl
    4156:	464e      	mov	r6, r9
    4158:	4645      	mov	r5, r8
    415a:	b5e0      	push	{r5, r6, r7, lr}
    415c:	b085      	sub	sp, #20
    415e:	0007      	movs	r7, r0
    4160:	9001      	str	r0, [sp, #4]
    4162:	4688      	mov	r8, r1
    4164:	9203      	str	r2, [sp, #12]
    4166:	469b      	mov	fp, r3
    4168:	ab0e      	add	r3, sp, #56	; 0x38
    416a:	781e      	ldrb	r6, [r3, #0]
    416c:	ab0f      	add	r3, sp, #60	; 0x3c
    416e:	781c      	ldrb	r4, [r3, #0]
    eink_coordinate i, j;
    
    /* Draw rectangle borders first */
    for (i = x0; i < (x0+width); i++) {
    4170:	4691      	mov	r9, r2
    4172:	4684      	mov	ip, r0
    4174:	44e1      	add	r9, ip
    4176:	4548      	cmp	r0, r9
    4178:	da1b      	bge.n	41b2 <gfx_eink_graphics_draw_rect+0x62>
        gfx_eink_set_pixel(i, y0, line_colour);
    417a:	4d5a      	ldr	r5, [pc, #360]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    417c:	465b      	mov	r3, fp
    417e:	3b01      	subs	r3, #1
    4180:	4443      	add	r3, r8
    4182:	b29b      	uxth	r3, r3
    4184:	9302      	str	r3, [sp, #8]
    4186:	9600      	str	r6, [sp, #0]
    4188:	464e      	mov	r6, r9
    418a:	0023      	movs	r3, r4
    418c:	000c      	movs	r4, r1
    418e:	4698      	mov	r8, r3
        gfx_eink_set_pixel(i, y0, line_colour);
    4190:	9a00      	ldr	r2, [sp, #0]
    4192:	0021      	movs	r1, r4
    4194:	0038      	movs	r0, r7
    4196:	47a8      	blx	r5
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    4198:	9a00      	ldr	r2, [sp, #0]
    419a:	9902      	ldr	r1, [sp, #8]
    419c:	0038      	movs	r0, r7
    419e:	47a8      	blx	r5
    for (i = x0; i < (x0+width); i++) {
    41a0:	3701      	adds	r7, #1
    41a2:	b2bf      	uxth	r7, r7
    41a4:	42b7      	cmp	r7, r6
    41a6:	dbf3      	blt.n	4190 <gfx_eink_graphics_draw_rect+0x40>
    41a8:	46b1      	mov	r9, r6
    41aa:	9e00      	ldr	r6, [sp, #0]
    41ac:	4643      	mov	r3, r8
    41ae:	46a0      	mov	r8, r4
    41b0:	001c      	movs	r4, r3
    }
    for (i = y0; i < (y0+height); i++) {
    41b2:	46da      	mov	sl, fp
    41b4:	44c2      	add	sl, r8
    41b6:	45d0      	cmp	r8, sl
    41b8:	da1a      	bge.n	41f0 <gfx_eink_graphics_draw_rect+0xa0>
    41ba:	4645      	mov	r5, r8
        gfx_eink_set_pixel(x0, i, line_colour);
    41bc:	4f49      	ldr	r7, [pc, #292]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    41be:	9b03      	ldr	r3, [sp, #12]
    41c0:	3b01      	subs	r3, #1
    41c2:	9a01      	ldr	r2, [sp, #4]
    41c4:	4694      	mov	ip, r2
    41c6:	4463      	add	r3, ip
    41c8:	b29b      	uxth	r3, r3
    41ca:	9300      	str	r3, [sp, #0]
    41cc:	0023      	movs	r3, r4
    41ce:	4654      	mov	r4, sl
    41d0:	469a      	mov	sl, r3
        gfx_eink_set_pixel(x0, i, line_colour);
    41d2:	0032      	movs	r2, r6
    41d4:	0029      	movs	r1, r5
    41d6:	9801      	ldr	r0, [sp, #4]
    41d8:	47b8      	blx	r7
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    41da:	0032      	movs	r2, r6
    41dc:	0029      	movs	r1, r5
    41de:	9800      	ldr	r0, [sp, #0]
    41e0:	47b8      	blx	r7
    for (i = y0; i < (y0+height); i++) {
    41e2:	3501      	adds	r5, #1
    41e4:	b2ad      	uxth	r5, r5
    41e6:	42a5      	cmp	r5, r4
    41e8:	dbf3      	blt.n	41d2 <gfx_eink_graphics_draw_rect+0x82>
    41ea:	4653      	mov	r3, sl
    41ec:	46a2      	mov	sl, r4
    41ee:	001c      	movs	r4, r3
    }
    
    /* Add a fill if necessary */
    if (fill_colour != FILL_NONE) {
    41f0:	2c08      	cmp	r4, #8
    41f2:	d06f      	beq.n	42d4 <gfx_eink_graphics_draw_rect+0x184>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    41f4:	9d01      	ldr	r5, [sp, #4]
    41f6:	3501      	adds	r5, #1
    41f8:	b2ad      	uxth	r5, r5
    41fa:	2301      	movs	r3, #1
    41fc:	425b      	negs	r3, r3
    41fe:	469c      	mov	ip, r3
    4200:	44e1      	add	r9, ip
    4202:	454d      	cmp	r5, r9
    4204:	da66      	bge.n	42d4 <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
                {
                    switch (fill_colour) {
    4206:	00a3      	lsls	r3, r4, #2
    4208:	4a37      	ldr	r2, [pc, #220]	; (42e8 <gfx_eink_graphics_draw_rect+0x198>)
    420a:	4693      	mov	fp, r2
    420c:	449b      	add	fp, r3
    420e:	e059      	b.n	42c4 <gfx_eink_graphics_draw_rect+0x174>
    4210:	2c07      	cmp	r4, #7
    4212:	d837      	bhi.n	4284 <gfx_eink_graphics_draw_rect+0x134>
    4214:	465b      	mov	r3, fp
    4216:	681b      	ldr	r3, [r3, #0]
    4218:	469f      	mov	pc, r3
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    421a:	2200      	movs	r2, #0
    421c:	0031      	movs	r1, r6
    421e:	0028      	movs	r0, r5
    4220:	4b30      	ldr	r3, [pc, #192]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    4222:	4798      	blx	r3
    4224:	e02e      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    4226:	2201      	movs	r2, #1
    4228:	0031      	movs	r1, r6
    422a:	0028      	movs	r0, r5
    422c:	4b2d      	ldr	r3, [pc, #180]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    422e:	4798      	blx	r3
    4230:	e028      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_YELLOW: gfx_eink_set_pixel(i, j, PIXEL_YELLOW); break;
    4232:	2203      	movs	r2, #3
    4234:	0031      	movs	r1, r6
    4236:	0028      	movs	r0, r5
    4238:	4b2a      	ldr	r3, [pc, #168]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    423a:	4798      	blx	r3
    423c:	e022      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    423e:	2202      	movs	r2, #2
    4240:	0031      	movs	r1, r6
    4242:	0028      	movs	r0, r5
    4244:	4b27      	ldr	r3, [pc, #156]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    4246:	4798      	blx	r3
    4248:	e01c      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_GREEN:  gfx_eink_set_pixel(i, j, PIXEL_GREEN); break;
    424a:	2204      	movs	r2, #4
    424c:	0031      	movs	r1, r6
    424e:	0028      	movs	r0, r5
    4250:	4b24      	ldr	r3, [pc, #144]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    4252:	4798      	blx	r3
    4254:	e016      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_BLUE:   gfx_eink_set_pixel(i, j, PIXEL_BLUE); break;
    4256:	2205      	movs	r2, #5
    4258:	0031      	movs	r1, r6
    425a:	0028      	movs	r0, r5
    425c:	4b21      	ldr	r3, [pc, #132]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    425e:	4798      	blx	r3
    4260:	e010      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_ORANGE: gfx_eink_set_pixel(i, j, PIXEL_ORANGE); break;
    4262:	2206      	movs	r2, #6
    4264:	0031      	movs	r1, r6
    4266:	0028      	movs	r0, r5
    4268:	4b1e      	ldr	r3, [pc, #120]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    426a:	4798      	blx	r3
    426c:	e00a      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_CLEAN:  gfx_eink_set_pixel(i, j, PIXEL_CLEAN); break;
    426e:	2207      	movs	r2, #7
    4270:	0031      	movs	r1, r6
    4272:	0028      	movs	r0, r5
    4274:	4b1b      	ldr	r3, [pc, #108]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    4276:	4798      	blx	r3
    4278:	e004      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                    }
                } else {
                    switch (fill_colour) {
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    427a:	2200      	movs	r2, #0
    427c:	0031      	movs	r1, r6
    427e:	0028      	movs	r0, r5
    4280:	4b18      	ldr	r3, [pc, #96]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    4282:	4798      	blx	r3
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    4284:	3601      	adds	r6, #1
    4286:	b2b6      	uxth	r6, r6
    4288:	42be      	cmp	r6, r7
    428a:	da17      	bge.n	42bc <gfx_eink_graphics_draw_rect+0x16c>
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    428c:	4b17      	ldr	r3, [pc, #92]	; (42ec <gfx_eink_graphics_draw_rect+0x19c>)
    428e:	681b      	ldr	r3, [r3, #0]
    4290:	781b      	ldrb	r3, [r3, #0]
    4292:	3b06      	subs	r3, #6
    4294:	2b01      	cmp	r3, #1
    4296:	d9bb      	bls.n	4210 <gfx_eink_graphics_draw_rect+0xc0>
                    switch (fill_colour) {
    4298:	2c01      	cmp	r4, #1
    429a:	d009      	beq.n	42b0 <gfx_eink_graphics_draw_rect+0x160>
    429c:	2c00      	cmp	r4, #0
    429e:	d0ec      	beq.n	427a <gfx_eink_graphics_draw_rect+0x12a>
    42a0:	2c03      	cmp	r4, #3
    42a2:	d8ef      	bhi.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
                        case FILL_YELLOW:
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    42a4:	2202      	movs	r2, #2
    42a6:	0031      	movs	r1, r6
    42a8:	0028      	movs	r0, r5
    42aa:	4b0e      	ldr	r3, [pc, #56]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    42ac:	4798      	blx	r3
    42ae:	e7e9      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    42b0:	2201      	movs	r2, #1
    42b2:	0031      	movs	r1, r6
    42b4:	0028      	movs	r0, r5
    42b6:	4b0b      	ldr	r3, [pc, #44]	; (42e4 <gfx_eink_graphics_draw_rect+0x194>)
    42b8:	4798      	blx	r3
    42ba:	e7e3      	b.n	4284 <gfx_eink_graphics_draw_rect+0x134>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    42bc:	3501      	adds	r5, #1
    42be:	b2ad      	uxth	r5, r5
    42c0:	454d      	cmp	r5, r9
    42c2:	da07      	bge.n	42d4 <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    42c4:	4643      	mov	r3, r8
    42c6:	1c5e      	adds	r6, r3, #1
    42c8:	b2b6      	uxth	r6, r6
    42ca:	4653      	mov	r3, sl
    42cc:	1e5f      	subs	r7, r3, #1
    42ce:	42be      	cmp	r6, r7
    42d0:	dbdc      	blt.n	428c <gfx_eink_graphics_draw_rect+0x13c>
    42d2:	e7f3      	b.n	42bc <gfx_eink_graphics_draw_rect+0x16c>
                    }
                }
            }
        }
    }
}
    42d4:	b005      	add	sp, #20
    42d6:	bc3c      	pop	{r2, r3, r4, r5}
    42d8:	4690      	mov	r8, r2
    42da:	4699      	mov	r9, r3
    42dc:	46a2      	mov	sl, r4
    42de:	46ab      	mov	fp, r5
    42e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42e2:	46c0      	nop			; (mov r8, r8)
    42e4:	00000585 	.word	0x00000585
    42e8:	00004b30 	.word	0x00004b30
    42ec:	20000424 	.word	0x20000424

000042f0 <_gfx_eink_text_write_character>:
 * \param text_colour Color of character.
 * \param text_colour_value Pixel value of character.
 * \param eink_font Font structure to use. 
 */
void _gfx_eink_text_write_character(char character, eink_coordinate start_x, eink_coordinate start_y, uint8_t colour_raw, enum eink_pixel_colour text_colour, uint8_t text_colour_value, struct gfx_eink_font eink_font)
{
    42f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42f2:	46de      	mov	lr, fp
    42f4:	4657      	mov	r7, sl
    42f6:	464e      	mov	r6, r9
    42f8:	4645      	mov	r5, r8
    42fa:	b5e0      	push	{r5, r6, r7, lr}
    42fc:	b08f      	sub	sp, #60	; 0x3c
    42fe:	4694      	mov	ip, r2
    4300:	9202      	str	r2, [sp, #8]
    4302:	4698      	mov	r8, r3
    4304:	ab18      	add	r3, sp, #96	; 0x60
    4306:	781b      	ldrb	r3, [r3, #0]
    4308:	9300      	str	r3, [sp, #0]
    430a:	ab19      	add	r3, sp, #100	; 0x64
    430c:	781b      	ldrb	r3, [r3, #0]
    430e:	9301      	str	r3, [sp, #4]
    4310:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    4312:	ab1a      	add	r3, sp, #104	; 0x68
    4314:	7b5d      	ldrb	r5, [r3, #13]
    4316:	7b9e      	ldrb	r6, [r3, #14]
    4318:	46b1      	mov	r9, r6
    431a:	7bde      	ldrb	r6, [r3, #15]
    volatile eink_coordinate current_y, send_y;
    
    uint8_t *font_character_size_map_ptr;
    uint8_t *font_array_ptr;
    
    current_x = start_x;
    431c:	af04      	add	r7, sp, #16
    431e:	80f9      	strh	r1, [r7, #6]
    current_y = start_y;
    4320:	1cba      	adds	r2, r7, #2
    4322:	4661      	mov	r1, ip
    4324:	8011      	strh	r1, [r2, #0]
    
    /* Get the index of the start of the character in the font array */
    start_font_index = 0;
    4326:	2200      	movs	r2, #0
    4328:	920a      	str	r2, [sp, #40]	; 0x28
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    current_char_index = character - eink_font.font_starting_ascii_char;
    432a:	7b1b      	ldrb	r3, [r3, #12]
    432c:	1ac0      	subs	r0, r0, r3
    432e:	900b      	str	r0, [sp, #44]	; 0x2c
    for(i = 0; i < current_char_index; i++) {
    4330:	9208      	str	r2, [sp, #32]
    4332:	9a08      	ldr	r2, [sp, #32]
    4334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4336:	429a      	cmp	r2, r3
    4338:	d237      	bcs.n	43aa <_gfx_eink_text_write_character+0xba>
    433a:	0021      	movs	r1, r4
        start_font_index += (*font_character_size_map_ptr * eink_font.font_height_bytes);
    433c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    433e:	780b      	ldrb	r3, [r1, #0]
    4340:	436b      	muls	r3, r5
    4342:	189b      	adds	r3, r3, r2
    4344:	930a      	str	r3, [sp, #40]	; 0x28
        font_character_size_map_ptr++;
    4346:	3101      	adds	r1, #1
    for(i = 0; i < current_char_index; i++) {
    4348:	9b08      	ldr	r3, [sp, #32]
    434a:	3301      	adds	r3, #1
    434c:	9308      	str	r3, [sp, #32]
    434e:	9a08      	ldr	r2, [sp, #32]
    4350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4352:	429a      	cmp	r2, r3
    4354:	d3f2      	bcc.n	433c <_gfx_eink_text_write_character+0x4c>
    }
    
    /* Ensure the chosen character is still in the font array */
    if( (start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) ) < (eink_font.font_array_size + (eink_font.font_character_size_map_ptr[current_char_index] * eink_font.font_height_bytes) )) {
    4356:	780a      	ldrb	r2, [r1, #0]
    4358:	436a      	muls	r2, r5
    435a:	990a      	ldr	r1, [sp, #40]	; 0x28
    435c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    435e:	1851      	adds	r1, r2, r1
    4360:	5ce3      	ldrb	r3, [r4, r3]
    4362:	436b      	muls	r3, r5
    4364:	981b      	ldr	r0, [sp, #108]	; 0x6c
    4366:	4684      	mov	ip, r0
    4368:	4463      	add	r3, ip
    436a:	4299      	cmp	r1, r3
    436c:	d300      	bcc.n	4370 <_gfx_eink_text_write_character+0x80>
    436e:	e0ea      	b.n	4546 <_gfx_eink_text_write_character+0x256>
        
        /* Move the pointer to the character starting byte */
        font_array_ptr = (uint8_t*) eink_font.font_array_ptr;
    4370:	9c1a      	ldr	r4, [sp, #104]	; 0x68
        if(ptr_eink_gfx_config->gfx_display == GFX_IT8951)
    4372:	4b78      	ldr	r3, [pc, #480]	; (4554 <_gfx_eink_text_write_character+0x264>)
    4374:	681b      	ldr	r3, [r3, #0]
    4376:	781b      	ldrb	r3, [r3, #0]
    4378:	2b0a      	cmp	r3, #10
    437a:	d018      	beq.n	43ae <_gfx_eink_text_write_character+0xbe>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
        else
            font_array_ptr += start_font_index;
    437c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    437e:	18e4      	adds	r4, r4, r3
    
       /**
        * Loop horizontally through the columns of the font first,
        * then loop vertically through each row of the font (bit by bit)
        */
        j = 0;
    4380:	2300      	movs	r3, #0
    4382:	9307      	str	r3, [sp, #28]
        end_font_index = start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) - 1;
    4384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4386:	3b01      	subs	r3, #1
    4388:	189a      	adds	r2, r3, r2
    438a:	9209      	str	r2, [sp, #36]	; 0x24
        for (i = start_font_index; i <= end_font_index; i++) {
    438c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    438e:	9308      	str	r3, [sp, #32]
    4390:	9a08      	ldr	r2, [sp, #32]
    4392:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4394:	429a      	cmp	r2, r3
    4396:	d900      	bls.n	439a <_gfx_eink_text_write_character+0xaa>
    4398:	e0d5      	b.n	4546 <_gfx_eink_text_write_character+0x256>
            j++;
            current_y += 8;
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
            else font_array_ptr += sizeof(uint8_t);
            
            if(j == eink_font.font_height_bytes) {
    439a:	46aa      	mov	sl, r5
                j = 0;
                current_y = start_y;
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    439c:	006b      	lsls	r3, r5, #1
    439e:	9303      	str	r3, [sp, #12]
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    43a0:	4b6d      	ldr	r3, [pc, #436]	; (4558 <_gfx_eink_text_write_character+0x268>)
    43a2:	469b      	mov	fp, r3
                    send_y = (current_y + (m));
    43a4:	ab04      	add	r3, sp, #16
    43a6:	1c9d      	adds	r5, r3, #2
    43a8:	e0a3      	b.n	44f2 <_gfx_eink_text_write_character+0x202>
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    43aa:	0021      	movs	r1, r4
    43ac:	e7d3      	b.n	4356 <_gfx_eink_text_write_character+0x66>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
    43ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    43b0:	3b01      	subs	r3, #1
    43b2:	195b      	adds	r3, r3, r5
    43b4:	18e4      	adds	r4, r4, r3
    43b6:	e7e3      	b.n	4380 <_gfx_eink_text_write_character+0x90>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    43b8:	464b      	mov	r3, r9
    43ba:	2b01      	cmp	r3, #1
    43bc:	d009      	beq.n	43d2 <_gfx_eink_text_write_character+0xe2>
                m = 0;
    43be:	2300      	movs	r3, #0
    43c0:	9306      	str	r3, [sp, #24]
                for (k = 8; k > 0; k--) {
    43c2:	3308      	adds	r3, #8
    43c4:	930d      	str	r3, [sp, #52]	; 0x34
    43c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    43c8:	2b00      	cmp	r3, #0
    43ca:	d100      	bne.n	43ce <_gfx_eink_text_write_character+0xde>
    43cc:	e07a      	b.n	44c4 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    43ce:	2701      	movs	r7, #1
    43d0:	e051      	b.n	4476 <_gfx_eink_text_write_character+0x186>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    43d2:	4b60      	ldr	r3, [pc, #384]	; (4554 <_gfx_eink_text_write_character+0x264>)
    43d4:	681b      	ldr	r3, [r3, #0]
    43d6:	781b      	ldrb	r3, [r3, #0]
    43d8:	2b0a      	cmp	r3, #10
    43da:	d1f0      	bne.n	43be <_gfx_eink_text_write_character+0xce>
    43dc:	e093      	b.n	4506 <_gfx_eink_text_write_character+0x216>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    43de:	2e00      	cmp	r6, #0
    43e0:	d125      	bne.n	442e <_gfx_eink_text_write_character+0x13e>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    43e2:	4643      	mov	r3, r8
    43e4:	2b00      	cmp	r3, #0
    43e6:	d128      	bne.n	443a <_gfx_eink_text_write_character+0x14a>
    43e8:	ab05      	add	r3, sp, #20
    43ea:	8818      	ldrh	r0, [r3, #0]
    43ec:	b280      	uxth	r0, r0
    43ee:	ab04      	add	r3, sp, #16
    43f0:	8819      	ldrh	r1, [r3, #0]
    43f2:	b289      	uxth	r1, r1
    43f4:	9a00      	ldr	r2, [sp, #0]
    43f6:	4b59      	ldr	r3, [pc, #356]	; (455c <_gfx_eink_text_write_character+0x26c>)
    43f8:	4798      	blx	r3
                for (k = 0; k < 8; k++) {
    43fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    43fc:	3301      	adds	r3, #1
    43fe:	930d      	str	r3, [sp, #52]	; 0x34
    4400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4402:	2b07      	cmp	r3, #7
    4404:	d85e      	bhi.n	44c4 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    4406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4408:	7823      	ldrb	r3, [r4, #0]
    440a:	4113      	asrs	r3, r2
    440c:	403b      	ands	r3, r7
    440e:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    4410:	ab04      	add	r3, sp, #16
    4412:	3306      	adds	r3, #6
    4414:	881b      	ldrh	r3, [r3, #0]
    4416:	b29b      	uxth	r3, r3
    4418:	aa05      	add	r2, sp, #20
    441a:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + k);
    441c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    441e:	882b      	ldrh	r3, [r5, #0]
    4420:	189b      	adds	r3, r3, r2
    4422:	b29b      	uxth	r3, r3
    4424:	aa04      	add	r2, sp, #16
    4426:	8013      	strh	r3, [r2, #0]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    4428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    442a:	2b01      	cmp	r3, #1
    442c:	d0d7      	beq.n	43de <_gfx_eink_text_write_character+0xee>
    442e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4430:	2b00      	cmp	r3, #0
    4432:	d1e2      	bne.n	43fa <_gfx_eink_text_write_character+0x10a>
    4434:	2e01      	cmp	r6, #1
    4436:	d1e0      	bne.n	43fa <_gfx_eink_text_write_character+0x10a>
    4438:	e7d3      	b.n	43e2 <_gfx_eink_text_write_character+0xf2>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    443a:	ab05      	add	r3, sp, #20
    443c:	8818      	ldrh	r0, [r3, #0]
    443e:	b280      	uxth	r0, r0
    4440:	ab04      	add	r3, sp, #16
    4442:	8819      	ldrh	r1, [r3, #0]
    4444:	b289      	uxth	r1, r1
    4446:	9a01      	ldr	r2, [sp, #4]
    4448:	4b43      	ldr	r3, [pc, #268]	; (4558 <_gfx_eink_text_write_character+0x268>)
    444a:	4798      	blx	r3
    444c:	e7d5      	b.n	43fa <_gfx_eink_text_write_character+0x10a>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    444e:	2e00      	cmp	r6, #0
    4450:	d129      	bne.n	44a6 <_gfx_eink_text_write_character+0x1b6>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    4452:	4643      	mov	r3, r8
    4454:	2b00      	cmp	r3, #0
    4456:	d12c      	bne.n	44b2 <_gfx_eink_text_write_character+0x1c2>
    4458:	ab05      	add	r3, sp, #20
    445a:	8818      	ldrh	r0, [r3, #0]
    445c:	b280      	uxth	r0, r0
    445e:	ab04      	add	r3, sp, #16
    4460:	8819      	ldrh	r1, [r3, #0]
    4462:	b289      	uxth	r1, r1
    4464:	9a00      	ldr	r2, [sp, #0]
    4466:	4b3d      	ldr	r3, [pc, #244]	; (455c <_gfx_eink_text_write_character+0x26c>)
    4468:	4798      	blx	r3
                for (k = 8; k > 0; k--) {
    446a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    446c:	3b01      	subs	r3, #1
    446e:	930d      	str	r3, [sp, #52]	; 0x34
    4470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4472:	2b00      	cmp	r3, #0
    4474:	d026      	beq.n	44c4 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    4476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4478:	7823      	ldrb	r3, [r4, #0]
    447a:	3a01      	subs	r2, #1
    447c:	4113      	asrs	r3, r2
    447e:	403b      	ands	r3, r7
    4480:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    4482:	ab04      	add	r3, sp, #16
    4484:	3306      	adds	r3, #6
    4486:	881b      	ldrh	r3, [r3, #0]
    4488:	b29b      	uxth	r3, r3
    448a:	aa05      	add	r2, sp, #20
    448c:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + (m));
    448e:	9a06      	ldr	r2, [sp, #24]
    4490:	882b      	ldrh	r3, [r5, #0]
    4492:	189b      	adds	r3, r3, r2
    4494:	b29b      	uxth	r3, r3
    4496:	aa04      	add	r2, sp, #16
    4498:	8013      	strh	r3, [r2, #0]
                    m++;
    449a:	9b06      	ldr	r3, [sp, #24]
    449c:	3301      	adds	r3, #1
    449e:	9306      	str	r3, [sp, #24]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    44a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    44a2:	2b01      	cmp	r3, #1
    44a4:	d0d3      	beq.n	444e <_gfx_eink_text_write_character+0x15e>
    44a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    44a8:	2b00      	cmp	r3, #0
    44aa:	d1de      	bne.n	446a <_gfx_eink_text_write_character+0x17a>
    44ac:	2e01      	cmp	r6, #1
    44ae:	d1dc      	bne.n	446a <_gfx_eink_text_write_character+0x17a>
    44b0:	e7cf      	b.n	4452 <_gfx_eink_text_write_character+0x162>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    44b2:	ab05      	add	r3, sp, #20
    44b4:	8818      	ldrh	r0, [r3, #0]
    44b6:	b280      	uxth	r0, r0
    44b8:	ab04      	add	r3, sp, #16
    44ba:	8819      	ldrh	r1, [r3, #0]
    44bc:	b289      	uxth	r1, r1
    44be:	9a01      	ldr	r2, [sp, #4]
    44c0:	47d8      	blx	fp
    44c2:	e7d2      	b.n	446a <_gfx_eink_text_write_character+0x17a>
            j++;
    44c4:	9b07      	ldr	r3, [sp, #28]
    44c6:	3301      	adds	r3, #1
    44c8:	9307      	str	r3, [sp, #28]
            current_y += 8;
    44ca:	882b      	ldrh	r3, [r5, #0]
    44cc:	3308      	adds	r3, #8
    44ce:	b29b      	uxth	r3, r3
    44d0:	802b      	strh	r3, [r5, #0]
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    44d2:	4b20      	ldr	r3, [pc, #128]	; (4554 <_gfx_eink_text_write_character+0x264>)
    44d4:	681b      	ldr	r3, [r3, #0]
    44d6:	781b      	ldrb	r3, [r3, #0]
    44d8:	2b0a      	cmp	r3, #10
    44da:	d01b      	beq.n	4514 <_gfx_eink_text_write_character+0x224>
            else font_array_ptr += sizeof(uint8_t);
    44dc:	3401      	adds	r4, #1
            if(j == eink_font.font_height_bytes) {
    44de:	9b07      	ldr	r3, [sp, #28]
    44e0:	459a      	cmp	sl, r3
    44e2:	d024      	beq.n	452e <_gfx_eink_text_write_character+0x23e>
        for (i = start_font_index; i <= end_font_index; i++) {
    44e4:	9b08      	ldr	r3, [sp, #32]
    44e6:	3301      	adds	r3, #1
    44e8:	9308      	str	r3, [sp, #32]
    44ea:	9a08      	ldr	r2, [sp, #32]
    44ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    44ee:	429a      	cmp	r2, r3
    44f0:	d829      	bhi.n	4546 <_gfx_eink_text_write_character+0x256>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    44f2:	464b      	mov	r3, r9
    44f4:	2b00      	cmp	r3, #0
    44f6:	d000      	beq.n	44fa <_gfx_eink_text_write_character+0x20a>
    44f8:	e75e      	b.n	43b8 <_gfx_eink_text_write_character+0xc8>
    44fa:	4b16      	ldr	r3, [pc, #88]	; (4554 <_gfx_eink_text_write_character+0x264>)
    44fc:	681b      	ldr	r3, [r3, #0]
    44fe:	781b      	ldrb	r3, [r3, #0]
    4500:	2b0a      	cmp	r3, #10
    4502:	d100      	bne.n	4506 <_gfx_eink_text_write_character+0x216>
    4504:	e75b      	b.n	43be <_gfx_eink_text_write_character+0xce>
                for (k = 0; k < 8; k++) {
    4506:	2300      	movs	r3, #0
    4508:	930d      	str	r3, [sp, #52]	; 0x34
    450a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    450c:	2b07      	cmp	r3, #7
    450e:	d8d9      	bhi.n	44c4 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    4510:	2701      	movs	r7, #1
    4512:	e778      	b.n	4406 <_gfx_eink_text_write_character+0x116>
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    4514:	3c01      	subs	r4, #1
            if(j == eink_font.font_height_bytes) {
    4516:	9b07      	ldr	r3, [sp, #28]
    4518:	459a      	cmp	sl, r3
    451a:	d1e3      	bne.n	44e4 <_gfx_eink_text_write_character+0x1f4>
                j = 0;
    451c:	2300      	movs	r3, #0
    451e:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    4520:	466b      	mov	r3, sp
    4522:	891b      	ldrh	r3, [r3, #8]
    4524:	802b      	strh	r3, [r5, #0]
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    4526:	9b03      	ldr	r3, [sp, #12]
    4528:	469c      	mov	ip, r3
    452a:	4464      	add	r4, ip
    452c:	e004      	b.n	4538 <_gfx_eink_text_write_character+0x248>
                j = 0;
    452e:	2300      	movs	r3, #0
    4530:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    4532:	466b      	mov	r3, sp
    4534:	891b      	ldrh	r3, [r3, #8]
    4536:	802b      	strh	r3, [r5, #0]
                
                current_x++;
    4538:	ab04      	add	r3, sp, #16
    453a:	1d9a      	adds	r2, r3, #6
    453c:	88db      	ldrh	r3, [r3, #6]
    453e:	3301      	adds	r3, #1
    4540:	b29b      	uxth	r3, r3
    4542:	8013      	strh	r3, [r2, #0]
    4544:	e7ce      	b.n	44e4 <_gfx_eink_text_write_character+0x1f4>
            }
        }
    }
}
    4546:	b00f      	add	sp, #60	; 0x3c
    4548:	bc3c      	pop	{r2, r3, r4, r5}
    454a:	4690      	mov	r8, r2
    454c:	4699      	mov	r9, r3
    454e:	46a2      	mov	sl, r4
    4550:	46ab      	mov	fp, r5
    4552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4554:	20000424 	.word	0x20000424
    4558:	00000595 	.word	0x00000595
    455c:	00000585 	.word	0x00000585

00004560 <gfx_eink_text_write_string>:
 * \param start_y Y coordinate to start writing.
 * \param text_colour Color of character.
 * \param eink_font Font structure to use.
 */
void gfx_eink_text_write_string(char *char_array, eink_coordinate start_x, eink_coordinate start_y, enum eink_pixel_colour text_colour, struct gfx_eink_font eink_font)
{
    4560:	b5f0      	push	{r4, r5, r6, r7, lr}
    4562:	46de      	mov	lr, fp
    4564:	4657      	mov	r7, sl
    4566:	464e      	mov	r6, r9
    4568:	4645      	mov	r5, r8
    456a:	b5e0      	push	{r5, r6, r7, lr}
    456c:	b089      	sub	sp, #36	; 0x24
    456e:	4681      	mov	r9, r0
    4570:	000c      	movs	r4, r1
    4572:	9206      	str	r2, [sp, #24]
    4574:	469a      	mov	sl, r3
    uint8_t i = 0;
    eink_coordinate x_send = start_x;
    
    while(char_array[i] != '\0')
    4576:	7800      	ldrb	r0, [r0, #0]
    4578:	2800      	cmp	r0, #0
    457a:	d027      	beq.n	45cc <gfx_eink_text_write_string+0x6c>
    457c:	464f      	mov	r7, r9
    457e:	2500      	movs	r5, #0
    {
        _gfx_eink_text_write_character(char_array[i], x_send, start_y, 0, text_colour, 0, eink_font);
    4580:	ae02      	add	r6, sp, #8
    4582:	2300      	movs	r3, #0
    4584:	4698      	mov	r8, r3
    4586:	4b15      	ldr	r3, [pc, #84]	; (45dc <gfx_eink_text_write_string+0x7c>)
    4588:	469b      	mov	fp, r3
    458a:	4684      	mov	ip, r0
    458c:	9607      	str	r6, [sp, #28]
    458e:	9b07      	ldr	r3, [sp, #28]
    4590:	aa12      	add	r2, sp, #72	; 0x48
    4592:	ca43      	ldmia	r2!, {r0, r1, r6}
    4594:	c343      	stmia	r3!, {r0, r1, r6}
    4596:	6812      	ldr	r2, [r2, #0]
    4598:	601a      	str	r2, [r3, #0]
    459a:	4643      	mov	r3, r8
    459c:	9301      	str	r3, [sp, #4]
    459e:	4653      	mov	r3, sl
    45a0:	9300      	str	r3, [sp, #0]
    45a2:	4643      	mov	r3, r8
    45a4:	9a06      	ldr	r2, [sp, #24]
    45a6:	0021      	movs	r1, r4
    45a8:	4660      	mov	r0, ip
    45aa:	47d8      	blx	fp
            
        x_send += eink_font.font_character_size_map_ptr[char_array[i]-eink_font.font_starting_ascii_char];
    45ac:	783b      	ldrb	r3, [r7, #0]
    45ae:	aa12      	add	r2, sp, #72	; 0x48
    45b0:	7b12      	ldrb	r2, [r2, #12]
    45b2:	1a9b      	subs	r3, r3, r2
    45b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    45b6:	5cd3      	ldrb	r3, [r2, r3]
    45b8:	18e4      	adds	r4, r4, r3
    45ba:	b2a4      	uxth	r4, r4
        i++;        
    45bc:	3501      	adds	r5, #1
    45be:	b2ed      	uxtb	r5, r5
    while(char_array[i] != '\0')
    45c0:	464b      	mov	r3, r9
    45c2:	195f      	adds	r7, r3, r5
    45c4:	783b      	ldrb	r3, [r7, #0]
    45c6:	469c      	mov	ip, r3
    45c8:	2b00      	cmp	r3, #0
    45ca:	d1e0      	bne.n	458e <gfx_eink_text_write_string+0x2e>
    }
}
    45cc:	b009      	add	sp, #36	; 0x24
    45ce:	bc3c      	pop	{r2, r3, r4, r5}
    45d0:	4690      	mov	r8, r2
    45d2:	4699      	mov	r9, r3
    45d4:	46a2      	mov	sl, r4
    45d6:	46ab      	mov	fp, r5
    45d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	000042f1 	.word	0x000042f1

000045e0 <eink_init_display>:
	
	while(1);
}

void eink_init_display(void)
{
    45e0:	b500      	push	{lr}
    45e2:	b083      	sub	sp, #12
    config->display_rotation = ROTATE_0;
    45e4:	a801      	add	r0, sp, #4
    45e6:	2300      	movs	r3, #0
    45e8:	7003      	strb	r3, [r0, #0]
    config->uc8173_display = UC8173_ED013TC1;
    45ea:	7043      	strb	r3, [r0, #1]
	struct uc8173_config eink_conf;
	
	uc8173_get_config_defaults(&eink_conf);
	eink_conf.display_rotation = ROTATE_0;
	eink_ed013tc1_init(&eink_conf, false);
    45ec:	2100      	movs	r1, #0
    45ee:	4b02      	ldr	r3, [pc, #8]	; (45f8 <eink_init_display+0x18>)
    45f0:	4798      	blx	r3
}
    45f2:	b003      	add	sp, #12
    45f4:	bd00      	pop	{pc}
    45f6:	46c0      	nop			; (mov r8, r8)
    45f8:	000037d1 	.word	0x000037d1

000045fc <main>:
{
    45fc:	b570      	push	{r4, r5, r6, lr}
    45fe:	b086      	sub	sp, #24
	system_init();
    4600:	4b24      	ldr	r3, [pc, #144]	; (4694 <main+0x98>)
    4602:	4798      	blx	r3
	eink_init_display();
    4604:	4b24      	ldr	r3, [pc, #144]	; (4698 <main+0x9c>)
    4606:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4608:	2180      	movs	r1, #128	; 0x80
    460a:	05c9      	lsls	r1, r1, #23
    460c:	2398      	movs	r3, #152	; 0x98
    460e:	22c0      	movs	r2, #192	; 0xc0
    4610:	05d2      	lsls	r2, r2, #23
    4612:	50d1      	str	r1, [r2, r3]
	CRITICAL_SECTION_ENTER();
    4614:	4e21      	ldr	r6, [pc, #132]	; (469c <main+0xa0>)
	CRITICAL_SECTION_LEAVE();
    4616:	4d22      	ldr	r5, [pc, #136]	; (46a0 <main+0xa4>)
	CRITICAL_SECTION_ENTER();
    4618:	a804      	add	r0, sp, #16
    461a:	47b0      	blx	r6
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    461c:	23c0      	movs	r3, #192	; 0xc0
    461e:	05db      	lsls	r3, r3, #23
    4620:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4622:	4a20      	ldr	r2, [pc, #128]	; (46a4 <main+0xa8>)
    4624:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4626:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    4628:	4053      	eors	r3, r2
    462a:	401c      	ands	r4, r3
    462c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    462e:	a804      	add	r0, sp, #16
    4630:	47a8      	blx	r5
		if(!gpio_get_pin_level(USER_SW))
    4632:	0423      	lsls	r3, r4, #16
    4634:	d4f0      	bmi.n	4618 <main+0x1c>
	CRITICAL_SECTION_ENTER();
    4636:	4e19      	ldr	r6, [pc, #100]	; (469c <main+0xa0>)
	CRITICAL_SECTION_LEAVE();
    4638:	4d19      	ldr	r5, [pc, #100]	; (46a0 <main+0xa4>)
	CRITICAL_SECTION_ENTER();
    463a:	a805      	add	r0, sp, #20
    463c:	47b0      	blx	r6
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    463e:	23c0      	movs	r3, #192	; 0xc0
    4640:	05db      	lsls	r3, r3, #23
    4642:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4644:	4a17      	ldr	r2, [pc, #92]	; (46a4 <main+0xa8>)
    4646:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4648:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    464a:	4053      	eors	r3, r2
    464c:	401c      	ands	r4, r3
    464e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    4650:	a805      	add	r0, sp, #20
    4652:	47a8      	blx	r5
			while(!gpio_get_pin_level(USER_SW));
    4654:	0423      	lsls	r3, r4, #16
    4656:	d5f0      	bpl.n	463a <main+0x3e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4658:	24c0      	movs	r4, #192	; 0xc0
    465a:	05e4      	lsls	r4, r4, #23
    465c:	2580      	movs	r5, #128	; 0x80
    465e:	05ed      	lsls	r5, r5, #23
    4660:	2394      	movs	r3, #148	; 0x94
    4662:	50e5      	str	r5, [r4, r3]
	gfx_eink_graphics_fill_screen(FILL_BLACK);
    4664:	2000      	movs	r0, #0
    4666:	4b10      	ldr	r3, [pc, #64]	; (46a8 <main+0xac>)
    4668:	4798      	blx	r3
	gfx_eink_text_write_string("Arduino Uno", 7, 48, PIXEL_WHITE, ArvoBold_18pt);
    466a:	4b10      	ldr	r3, [pc, #64]	; (46ac <main+0xb0>)
    466c:	3354      	adds	r3, #84	; 0x54
    466e:	466a      	mov	r2, sp
    4670:	cb43      	ldmia	r3!, {r0, r1, r6}
    4672:	c243      	stmia	r2!, {r0, r1, r6}
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	6013      	str	r3, [r2, #0]
    4678:	2301      	movs	r3, #1
    467a:	2230      	movs	r2, #48	; 0x30
    467c:	2107      	movs	r1, #7
    467e:	480c      	ldr	r0, [pc, #48]	; (46b0 <main+0xb4>)
    4680:	4e0c      	ldr	r6, [pc, #48]	; (46b4 <main+0xb8>)
    4682:	47b0      	blx	r6
    ptr_eink_gfx_config->put_display_buffer(refresh_display);
    4684:	4b0c      	ldr	r3, [pc, #48]	; (46b8 <main+0xbc>)
    4686:	681b      	ldr	r3, [r3, #0]
    4688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    468a:	2001      	movs	r0, #1
    468c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    468e:	2398      	movs	r3, #152	; 0x98
    4690:	50e5      	str	r5, [r4, r3]
    4692:	e7fe      	b.n	4692 <main+0x96>
    4694:	00000211 	.word	0x00000211
    4698:	000045e1 	.word	0x000045e1
    469c:	0000034d 	.word	0x0000034d
    46a0:	0000035b 	.word	0x0000035b
    46a4:	41004400 	.word	0x41004400
    46a8:	00003fcd 	.word	0x00003fcd
    46ac:	20000280 	.word	0x20000280
    46b0:	00006d1c 	.word	0x00006d1c
    46b4:	00004561 	.word	0x00004561
    46b8:	20000424 	.word	0x20000424

000046bc <__libc_init_array>:
    46bc:	b570      	push	{r4, r5, r6, lr}
    46be:	2600      	movs	r6, #0
    46c0:	4d0c      	ldr	r5, [pc, #48]	; (46f4 <__libc_init_array+0x38>)
    46c2:	4c0d      	ldr	r4, [pc, #52]	; (46f8 <__libc_init_array+0x3c>)
    46c4:	1b64      	subs	r4, r4, r5
    46c6:	10a4      	asrs	r4, r4, #2
    46c8:	42a6      	cmp	r6, r4
    46ca:	d109      	bne.n	46e0 <__libc_init_array+0x24>
    46cc:	2600      	movs	r6, #0
    46ce:	f002 fb5b 	bl	6d88 <_init>
    46d2:	4d0a      	ldr	r5, [pc, #40]	; (46fc <__libc_init_array+0x40>)
    46d4:	4c0a      	ldr	r4, [pc, #40]	; (4700 <__libc_init_array+0x44>)
    46d6:	1b64      	subs	r4, r4, r5
    46d8:	10a4      	asrs	r4, r4, #2
    46da:	42a6      	cmp	r6, r4
    46dc:	d105      	bne.n	46ea <__libc_init_array+0x2e>
    46de:	bd70      	pop	{r4, r5, r6, pc}
    46e0:	00b3      	lsls	r3, r6, #2
    46e2:	58eb      	ldr	r3, [r5, r3]
    46e4:	4798      	blx	r3
    46e6:	3601      	adds	r6, #1
    46e8:	e7ee      	b.n	46c8 <__libc_init_array+0xc>
    46ea:	00b3      	lsls	r3, r6, #2
    46ec:	58eb      	ldr	r3, [r5, r3]
    46ee:	4798      	blx	r3
    46f0:	3601      	adds	r6, #1
    46f2:	e7f2      	b.n	46da <__libc_init_array+0x1e>
    46f4:	00006d94 	.word	0x00006d94
    46f8:	00006d94 	.word	0x00006d94
    46fc:	00006d94 	.word	0x00006d94
    4700:	00006d98 	.word	0x00006d98

00004704 <malloc>:
    4704:	b510      	push	{r4, lr}
    4706:	4b03      	ldr	r3, [pc, #12]	; (4714 <malloc+0x10>)
    4708:	0001      	movs	r1, r0
    470a:	6818      	ldr	r0, [r3, #0]
    470c:	f000 f80e 	bl	472c <_malloc_r>
    4710:	bd10      	pop	{r4, pc}
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	200002e4 	.word	0x200002e4

00004718 <memcpy>:
    4718:	2300      	movs	r3, #0
    471a:	b510      	push	{r4, lr}
    471c:	429a      	cmp	r2, r3
    471e:	d100      	bne.n	4722 <memcpy+0xa>
    4720:	bd10      	pop	{r4, pc}
    4722:	5ccc      	ldrb	r4, [r1, r3]
    4724:	54c4      	strb	r4, [r0, r3]
    4726:	3301      	adds	r3, #1
    4728:	e7f8      	b.n	471c <memcpy+0x4>
	...

0000472c <_malloc_r>:
    472c:	2303      	movs	r3, #3
    472e:	b570      	push	{r4, r5, r6, lr}
    4730:	1ccd      	adds	r5, r1, #3
    4732:	439d      	bics	r5, r3
    4734:	3508      	adds	r5, #8
    4736:	0006      	movs	r6, r0
    4738:	2d0c      	cmp	r5, #12
    473a:	d21e      	bcs.n	477a <_malloc_r+0x4e>
    473c:	250c      	movs	r5, #12
    473e:	42a9      	cmp	r1, r5
    4740:	d81d      	bhi.n	477e <_malloc_r+0x52>
    4742:	0030      	movs	r0, r6
    4744:	f000 f862 	bl	480c <__malloc_lock>
    4748:	4a25      	ldr	r2, [pc, #148]	; (47e0 <_malloc_r+0xb4>)
    474a:	6814      	ldr	r4, [r2, #0]
    474c:	0021      	movs	r1, r4
    474e:	2900      	cmp	r1, #0
    4750:	d119      	bne.n	4786 <_malloc_r+0x5a>
    4752:	4c24      	ldr	r4, [pc, #144]	; (47e4 <_malloc_r+0xb8>)
    4754:	6823      	ldr	r3, [r4, #0]
    4756:	2b00      	cmp	r3, #0
    4758:	d103      	bne.n	4762 <_malloc_r+0x36>
    475a:	0030      	movs	r0, r6
    475c:	f000 f844 	bl	47e8 <_sbrk_r>
    4760:	6020      	str	r0, [r4, #0]
    4762:	0029      	movs	r1, r5
    4764:	0030      	movs	r0, r6
    4766:	f000 f83f 	bl	47e8 <_sbrk_r>
    476a:	1c43      	adds	r3, r0, #1
    476c:	d12c      	bne.n	47c8 <_malloc_r+0x9c>
    476e:	230c      	movs	r3, #12
    4770:	0030      	movs	r0, r6
    4772:	6033      	str	r3, [r6, #0]
    4774:	f000 f84b 	bl	480e <__malloc_unlock>
    4778:	e003      	b.n	4782 <_malloc_r+0x56>
    477a:	2d00      	cmp	r5, #0
    477c:	dadf      	bge.n	473e <_malloc_r+0x12>
    477e:	230c      	movs	r3, #12
    4780:	6033      	str	r3, [r6, #0]
    4782:	2000      	movs	r0, #0
    4784:	bd70      	pop	{r4, r5, r6, pc}
    4786:	680b      	ldr	r3, [r1, #0]
    4788:	1b5b      	subs	r3, r3, r5
    478a:	d41a      	bmi.n	47c2 <_malloc_r+0x96>
    478c:	2b0b      	cmp	r3, #11
    478e:	d903      	bls.n	4798 <_malloc_r+0x6c>
    4790:	600b      	str	r3, [r1, #0]
    4792:	18cc      	adds	r4, r1, r3
    4794:	6025      	str	r5, [r4, #0]
    4796:	e003      	b.n	47a0 <_malloc_r+0x74>
    4798:	428c      	cmp	r4, r1
    479a:	d10e      	bne.n	47ba <_malloc_r+0x8e>
    479c:	6863      	ldr	r3, [r4, #4]
    479e:	6013      	str	r3, [r2, #0]
    47a0:	0030      	movs	r0, r6
    47a2:	f000 f834 	bl	480e <__malloc_unlock>
    47a6:	0020      	movs	r0, r4
    47a8:	2207      	movs	r2, #7
    47aa:	300b      	adds	r0, #11
    47ac:	1d23      	adds	r3, r4, #4
    47ae:	4390      	bics	r0, r2
    47b0:	1ac3      	subs	r3, r0, r3
    47b2:	d0e7      	beq.n	4784 <_malloc_r+0x58>
    47b4:	425a      	negs	r2, r3
    47b6:	50e2      	str	r2, [r4, r3]
    47b8:	e7e4      	b.n	4784 <_malloc_r+0x58>
    47ba:	684b      	ldr	r3, [r1, #4]
    47bc:	6063      	str	r3, [r4, #4]
    47be:	000c      	movs	r4, r1
    47c0:	e7ee      	b.n	47a0 <_malloc_r+0x74>
    47c2:	000c      	movs	r4, r1
    47c4:	6849      	ldr	r1, [r1, #4]
    47c6:	e7c2      	b.n	474e <_malloc_r+0x22>
    47c8:	2303      	movs	r3, #3
    47ca:	1cc4      	adds	r4, r0, #3
    47cc:	439c      	bics	r4, r3
    47ce:	42a0      	cmp	r0, r4
    47d0:	d0e0      	beq.n	4794 <_malloc_r+0x68>
    47d2:	1a21      	subs	r1, r4, r0
    47d4:	0030      	movs	r0, r6
    47d6:	f000 f807 	bl	47e8 <_sbrk_r>
    47da:	1c43      	adds	r3, r0, #1
    47dc:	d1da      	bne.n	4794 <_malloc_r+0x68>
    47de:	e7c6      	b.n	476e <_malloc_r+0x42>
    47e0:	2000036c 	.word	0x2000036c
    47e4:	20000370 	.word	0x20000370

000047e8 <_sbrk_r>:
    47e8:	2300      	movs	r3, #0
    47ea:	b570      	push	{r4, r5, r6, lr}
    47ec:	4c06      	ldr	r4, [pc, #24]	; (4808 <_sbrk_r+0x20>)
    47ee:	0005      	movs	r5, r0
    47f0:	0008      	movs	r0, r1
    47f2:	6023      	str	r3, [r4, #0]
    47f4:	f7fb fdd2 	bl	39c <_sbrk>
    47f8:	1c43      	adds	r3, r0, #1
    47fa:	d103      	bne.n	4804 <_sbrk_r+0x1c>
    47fc:	6823      	ldr	r3, [r4, #0]
    47fe:	2b00      	cmp	r3, #0
    4800:	d000      	beq.n	4804 <_sbrk_r+0x1c>
    4802:	602b      	str	r3, [r5, #0]
    4804:	bd70      	pop	{r4, r5, r6, pc}
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	20000428 	.word	0x20000428

0000480c <__malloc_lock>:
    480c:	4770      	bx	lr

0000480e <__malloc_unlock>:
    480e:	4770      	bx	lr
    4810:	0000129e 	.word	0x0000129e
    4814:	000012cc 	.word	0x000012cc
    4818:	00001356 	.word	0x00001356
    481c:	00001384 	.word	0x00001384
    4820:	000012fa 	.word	0x000012fa
    4824:	00001328 	.word	0x00001328
    4828:	000013b2 	.word	0x000013b2
    482c:	000013e0 	.word	0x000013e0
    4830:	0000141c 	.word	0x0000141c
    4834:	0000144a 	.word	0x0000144a
    4838:	000014d4 	.word	0x000014d4
    483c:	00001502 	.word	0x00001502
    4840:	00001478 	.word	0x00001478
    4844:	000014a6 	.word	0x000014a6
    4848:	00001530 	.word	0x00001530
    484c:	0000155e 	.word	0x0000155e
    4850:	000015f2 	.word	0x000015f2
    4854:	00001620 	.word	0x00001620
    4858:	000016aa 	.word	0x000016aa
    485c:	000016d8 	.word	0x000016d8
    4860:	0000164e 	.word	0x0000164e
    4864:	0000167c 	.word	0x0000167c
    4868:	00001706 	.word	0x00001706
    486c:	00001734 	.word	0x00001734
    4870:	00001770 	.word	0x00001770
    4874:	0000179e 	.word	0x0000179e
    4878:	00001828 	.word	0x00001828
    487c:	00001856 	.word	0x00001856
    4880:	000017cc 	.word	0x000017cc
    4884:	000017fa 	.word	0x000017fa
    4888:	00001884 	.word	0x00001884
    488c:	000018b2 	.word	0x000018b2
    4890:	00003b2c 	.word	0x00003b2c
    4894:	00003b24 	.word	0x00003b24
    4898:	00003b44 	.word	0x00003b44
    489c:	00003b4e 	.word	0x00003b4e
    48a0:	00003b58 	.word	0x00003b58
    48a4:	00003b62 	.word	0x00003b62
    48a8:	00003b6c 	.word	0x00003b6c
    48ac:	00003b76 	.word	0x00003b76
    48b0:	00003b88 	.word	0x00003b88
    48b4:	00003b80 	.word	0x00003b80
    48b8:	00003baa 	.word	0x00003baa
    48bc:	00003bb4 	.word	0x00003bb4
    48c0:	00003bbe 	.word	0x00003bbe
    48c4:	00003bc8 	.word	0x00003bc8
    48c8:	00003bd2 	.word	0x00003bd2
    48cc:	00003bdc 	.word	0x00003bdc
    48d0:	00003cbc 	.word	0x00003cbc
    48d4:	00003c06 	.word	0x00003c06
    48d8:	00003c20 	.word	0x00003c20
    48dc:	00003c3a 	.word	0x00003c3a
    48e0:	00003c54 	.word	0x00003c54
    48e4:	00003c6e 	.word	0x00003c6e
    48e8:	00003c88 	.word	0x00003c88
    48ec:	00003ca2 	.word	0x00003ca2
    48f0:	00003d94 	.word	0x00003d94
    48f4:	00003cd0 	.word	0x00003cd0
    48f8:	00003ce6 	.word	0x00003ce6
    48fc:	00003cfc 	.word	0x00003cfc
    4900:	00003d12 	.word	0x00003d12
    4904:	00003d28 	.word	0x00003d28
    4908:	00003d3e 	.word	0x00003d3e
    490c:	00003d54 	.word	0x00003d54
    4910:	00003d9c 	.word	0x00003d9c
    4914:	00003cd0 	.word	0x00003cd0
    4918:	00003ce6 	.word	0x00003ce6
    491c:	00003cfc 	.word	0x00003cfc
    4920:	00003d12 	.word	0x00003d12
    4924:	00003d28 	.word	0x00003d28
    4928:	00003d3e 	.word	0x00003d3e
    492c:	00003d54 	.word	0x00003d54
    4930:	00003da4 	.word	0x00003da4
    4934:	00003cd0 	.word	0x00003cd0
    4938:	00003ce6 	.word	0x00003ce6
    493c:	00003cfc 	.word	0x00003cfc
    4940:	00003d12 	.word	0x00003d12
    4944:	00003d28 	.word	0x00003d28
    4948:	00003d3e 	.word	0x00003d3e
    494c:	00003d54 	.word	0x00003d54
    4950:	00003dac 	.word	0x00003dac
    4954:	00003cd0 	.word	0x00003cd0
    4958:	00003ce6 	.word	0x00003ce6
    495c:	00003cfc 	.word	0x00003cfc
    4960:	00003d12 	.word	0x00003d12
    4964:	00003d28 	.word	0x00003d28
    4968:	00003d3e 	.word	0x00003d3e
    496c:	00003d54 	.word	0x00003d54
    4970:	00003db4 	.word	0x00003db4
    4974:	00003cd0 	.word	0x00003cd0
    4978:	00003ce6 	.word	0x00003ce6
    497c:	00003cfc 	.word	0x00003cfc
    4980:	00003d12 	.word	0x00003d12
    4984:	00003d28 	.word	0x00003d28
    4988:	00003d3e 	.word	0x00003d3e
    498c:	00003d54 	.word	0x00003d54
    4990:	00003dbc 	.word	0x00003dbc
    4994:	00003cd0 	.word	0x00003cd0
    4998:	00003ce6 	.word	0x00003ce6
    499c:	00003cfc 	.word	0x00003cfc
    49a0:	00003d12 	.word	0x00003d12
    49a4:	00003d28 	.word	0x00003d28
    49a8:	00003d3e 	.word	0x00003d3e
    49ac:	00003d54 	.word	0x00003d54
    49b0:	00003dc4 	.word	0x00003dc4
    49b4:	00003cd0 	.word	0x00003cd0
    49b8:	00003ce6 	.word	0x00003ce6
    49bc:	00003cfc 	.word	0x00003cfc
    49c0:	00003d12 	.word	0x00003d12
    49c4:	00003d28 	.word	0x00003d28
    49c8:	00003d3e 	.word	0x00003d3e
    49cc:	00003d54 	.word	0x00003d54
    49d0:	00003d6a 	.word	0x00003d6a
    49d4:	00003cd0 	.word	0x00003cd0
    49d8:	00003ce6 	.word	0x00003ce6
    49dc:	00003cfc 	.word	0x00003cfc
    49e0:	00003d12 	.word	0x00003d12
    49e4:	00003d28 	.word	0x00003d28
    49e8:	00003d3e 	.word	0x00003d3e
    49ec:	00003d54 	.word	0x00003d54
    49f0:	00003d76 	.word	0x00003d76
    49f4:	00003d94 	.word	0x00003d94
    49f8:	00003d9c 	.word	0x00003d9c
    49fc:	00003da4 	.word	0x00003da4
    4a00:	00003dac 	.word	0x00003dac
    4a04:	00003db4 	.word	0x00003db4
    4a08:	00003dbc 	.word	0x00003dbc
    4a0c:	00003dc4 	.word	0x00003dc4
    4a10:	00003d76 	.word	0x00003d76
    4a14:	00003d94 	.word	0x00003d94
    4a18:	00003d9c 	.word	0x00003d9c
    4a1c:	00003da4 	.word	0x00003da4
    4a20:	00003dac 	.word	0x00003dac
    4a24:	00003db4 	.word	0x00003db4
    4a28:	00003dbc 	.word	0x00003dbc
    4a2c:	00003dc4 	.word	0x00003dc4
    4a30:	00003d76 	.word	0x00003d76
    4a34:	00003d94 	.word	0x00003d94
    4a38:	00003d9c 	.word	0x00003d9c
    4a3c:	00003da4 	.word	0x00003da4
    4a40:	00003dac 	.word	0x00003dac
    4a44:	00003db4 	.word	0x00003db4
    4a48:	00003dbc 	.word	0x00003dbc
    4a4c:	00003dc4 	.word	0x00003dc4
    4a50:	00003d76 	.word	0x00003d76
    4a54:	00003d94 	.word	0x00003d94
    4a58:	00003d9c 	.word	0x00003d9c
    4a5c:	00003da4 	.word	0x00003da4
    4a60:	00003dac 	.word	0x00003dac
    4a64:	00003db4 	.word	0x00003db4
    4a68:	00003dbc 	.word	0x00003dbc
    4a6c:	00003dc4 	.word	0x00003dc4
    4a70:	00003d76 	.word	0x00003d76
    4a74:	00003d94 	.word	0x00003d94
    4a78:	00003d9c 	.word	0x00003d9c
    4a7c:	00003da4 	.word	0x00003da4
    4a80:	00003dac 	.word	0x00003dac
    4a84:	00003db4 	.word	0x00003db4
    4a88:	00003dbc 	.word	0x00003dbc
    4a8c:	00003dc4 	.word	0x00003dc4
    4a90:	00003d76 	.word	0x00003d76
    4a94:	00003d94 	.word	0x00003d94
    4a98:	00003d9c 	.word	0x00003d9c
    4a9c:	00003da4 	.word	0x00003da4
    4aa0:	00003dac 	.word	0x00003dac
    4aa4:	00003db4 	.word	0x00003db4
    4aa8:	00003dbc 	.word	0x00003dbc
    4aac:	00003dc4 	.word	0x00003dc4
    4ab0:	00003d76 	.word	0x00003d76
    4ab4:	00003d94 	.word	0x00003d94
    4ab8:	00003d9c 	.word	0x00003d9c
    4abc:	00003da4 	.word	0x00003da4
    4ac0:	00003dac 	.word	0x00003dac
    4ac4:	00003db4 	.word	0x00003db4
    4ac8:	00003dbc 	.word	0x00003dbc
    4acc:	00003dc4 	.word	0x00003dc4
    4ad0:	00003d76 	.word	0x00003d76
    4ad4:	00003d94 	.word	0x00003d94
    4ad8:	00003d9c 	.word	0x00003d9c
    4adc:	00003da4 	.word	0x00003da4
    4ae0:	00003dac 	.word	0x00003dac
    4ae4:	00003db4 	.word	0x00003db4
    4ae8:	00003dbc 	.word	0x00003dbc
    4aec:	00003dc4 	.word	0x00003dc4
    4af0:	00003e9e 	.word	0x00003e9e
    4af4:	00003e96 	.word	0x00003e96
    4af8:	00003f56 	.word	0x00003f56
    4afc:	00003f68 	.word	0x00003f68
    4b00:	00003f7a 	.word	0x00003f7a
    4b04:	00003f8c 	.word	0x00003f8c
    4b08:	00003f9e 	.word	0x00003f9e
    4b0c:	00003fb0 	.word	0x00003fb0
    4b10:	00004008 	.word	0x00004008
    4b14:	0000401c 	.word	0x0000401c
    4b18:	00004044 	.word	0x00004044
    4b1c:	00004030 	.word	0x00004030
    4b20:	00004058 	.word	0x00004058
    4b24:	0000406c 	.word	0x0000406c
    4b28:	00004080 	.word	0x00004080
    4b2c:	00004094 	.word	0x00004094
    4b30:	0000421a 	.word	0x0000421a
    4b34:	00004226 	.word	0x00004226
    4b38:	0000423e 	.word	0x0000423e
    4b3c:	00004232 	.word	0x00004232
    4b40:	0000424a 	.word	0x0000424a
    4b44:	00004256 	.word	0x00004256
    4b48:	00004262 	.word	0x00004262
    4b4c:	0000426e 	.word	0x0000426e

00004b50 <ED037TC1_A2_LUT>:
    4b50:	0000052a 00000000 2a050000 00000000     *..........*....
    4b60:	00000000 0000152a 00000000 0a050000     ....*...........
	...
    4b80:	02000000 02000a03 00050a06 00000000     ................
	...
    4bb4:	22222222 00000022                       """""...

00004bbc <ED037TC1_DU_LUT>:
	...
    4bc4:	2a010000 00000000 00000000 0000550a     ...*.........U..
	...
    4bf0:	05000505 00050503 00000000 00000000     ................
	...
    4c20:	22222222 00000022                       """""...

00004c28 <SSD1608_A45_IU_LUT>:
    4c28:	18181824 10181800 00000008 00000000     $...............
    4c38:	00000000 11111141 00000001 00000000     ....A...........

00004c48 <SSD1608_A05_IU_LUT>:
    4c48:	28181810 18181818 00000008 00000000     ...(............
    4c58:	00000000 13221233 00000011 00000000     ....3.".........

00004c68 <ED028TC1_WF_LUT>:
    4c68:	0011042e 00000000 00000000 00000000     ................
    4c78:	00000010 00000100 00000100 10040100     ................
    4c88:	00440100 00400000 00000000 00400000     ..D...@.......@.
    4c98:	00000000 10400100 10400500 00000000     ......@...@.....
    4ca8:	00511400 00000000 00000000 00000010     ..Q.............
    4cb8:	00000010 00400100 00401100 10040100     ......@...@.....
    4cc8:	00440100 00400000 00000000 10440100     ..D...@.......D.
    4cd8:	00000100 10400100 10400500 00000100     ......@...@.....
    4ce8:	00511500 00100000 00000010 00000010     ..Q.............
    4cf8:	00000010 00400100 10401100 10040100     ......@...@.....
    4d08:	00441100 00400100 10400000 10444100     ..D...@...@..AD.
    4d18:	00000100 10441500 10444500 00040100     ......D..ED.....
    4d28:	00511500 00100000 00000010 00000010     ..Q.............
    4d38:	00000010 00440100 10401100 10040100     ......D...@.....
    4d48:	00441100 00404100 10400000 10444500     ..D..A@...@..ED.
    4d58:	10400100 10441500 10444500 10440500     ..@...D..ED...D.
    4d68:	00512500 00100004 00000010 00400010     .%Q...........@.
    4d78:	00400010 10440100 10401500 10040500     ..@...D...@.....
    4d88:	10441100 00404100 10401100 10444500     ..D..A@...@..ED.
    4d98:	10440100 10441500 10444500 10440500     ..D...D..ED...D.
    4da8:	00512500 00541104 00400010 00400110     .%Q...T...@...@.
    4db8:	00444110 10440100 10405500 10044504     .AD...D..U@..E..
    4dc8:	10445500 00444500 10401100 10444500     .UD..ED...@..ED.
    4dd8:	10440100 10441500 10444500 10540500     ..D...D..ED...T.
    4de8:	00512500 00541104 00400110 00400110     .%Q...T...@...@.
    4df8:	00444110 10440500 14445500 10544504     .AD...D..UD..ET.
    4e08:	10445500 10444500 10441100 10444500     .UD..ED...D..ED.
    4e18:	10440500 14545500 14544500 10540500     ..D..UT..ET...T.
    4e28:	00512500 10545504 00500114 10445110     .%Q..UT...P..QD.
    4e38:	10444114 10544500 14445504 10544504     .AD..ET..UD..ET.
    4e48:	10445500 10444500 10445500 14544500     .UD..ED..UD..ET.
    4e58:	14441500 14545500 14554500 14540500     ..D..UT..EU...T.
    4e68:	00512900 10545504 10500114 10545110     .)Q..UT...P..QT.
    4e78:	10444114 10545500 14445504 14544504     .AD..UT..UD..ET.
    4e88:	14445500 14544510 10445500 14544500     .UD..ET..UD..ET.
    4e98:	14541500 14545500 14554500 14540500     ..T..UT..EU...T.
    4ea8:	00512900 10545514 10500114 14545510     .)Q..UT...P..UT.
    4eb8:	10444114 10545510 14545504 14544504     .AD..UT..UT..ET.
    4ec8:	14445500 14544510 10545504 14544500     .UD..ET..UT..ET.
    4ed8:	14541500 14545500 14555500 14540500     ..T..UT..UU...T.
    4ee8:	00a12900 10545514 14500114 14545510     .)...UT...P..UT.
    4ef8:	10544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    4f08:	14445510 14544510 14545504 14544500     .UD..ET..UT..ET.
    4f18:	14541500 14555500 14555511 14540511     ..T..UU..UU...T.
    4f28:	00a22a00 14545518 14500114 14545510     .*...UT...P..UT.
    4f38:	14544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    4f48:	14545510 14544510 14545504 14544500     .UT..ET..UT..ET.
    4f58:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    4f68:	00a26a10 14555518 14544514 14545510     .j...UU..ET..UT.
    4f78:	14544114 14545514 14555514 14554515     .AT..UT..UU..EU.
    4f88:	14545511 14544511 14545515 14544501     .UT..ET..UT..ET.
    4f98:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    4fa8:	00a6aa10 14555518 14544515 14545510     .....UU..ET..UT.
    4fb8:	14544514 14545514 15555514 15554515     .ET..UT..UU..EU.
    4fc8:	14545515 14544515 14545515 14544501     .UT..ET..UT..ET.
    4fd8:	14541511 14555511 15555511 14550511     ..T..UU..UU...U.
    4fe8:	10a6aa11 15556518 14554515 14545514     .....eU..EU..UT.
    4ff8:	14544514 14545514 15555515 15554515     .ET..UT..UU..EU.
    5008:	14546515 14544515 14545515 14555511     .eT..ET..UT..UU.
    5018:	14545511 14555511 15555511 14550511     .UT..UU..UU...U.
    5028:	10a6aa11 55a9a518 14554555 14545514     .......UUEU..UT.
    5038:	14558515 15995515 15556515 15594515     ..U..U...eU..EY.
    5048:	14596515 15558515 14555515 14559511     .eY...U..UU...U.
    5058:	14545511 14555511 15555511 55550551     .UT..UU..UU.Q.UU
    5068:	10aaaa51 55a9a518 15555559 1555a515     Q......UYUU...U.
    5078:	14998555 15995615 55556515 55595515     U....V...eUU.UYU
    5088:	55996515 15959515 14956515 14559511     .e.U.....e....U.
    5098:	14545611 54556511 55959551 55551551     .VT..eUTQ..UQ.UU
    50a8:	10aaaa51 55a9aa28 15955569 1595a525     Q...(..UiU..%...
    50b8:	14998569 15999615 5595aa15 55599a15     i..........U..YU
    50c8:	5599a655 55999515 1495a515 14999511     U..U...U........
    50d8:	14956611 55996911 55959951 55591551     .f...i.UQ..UQ.YU
    50e8:	54aaaa55 55a9aa28 55a59669 5599a625     U..T(..Ui..U%..U
    50f8:	54998669 5599aa19 5595aa15 65999a55     i..T...U...UU..e
    5108:	5599aa55 55999a15 1499a555 14999615     U..U...UU.......
    5118:	14996651 5599aa11 5595aa55 55991551     Qf.....UU..UQ..U
    5128:	64aaaa55 65a9aa28 55a59669 55a9aa25     U..d(..ei..U%..U
    5138:	54999669 65a9aa19 6595aa19 65999a59     i..T...e...eY..e
    5148:	5599aa55 55999a15 2499aa55 25999a15     U..U...UU..$...%
    5158:	14996a55 6599aa11 65a9aa55 55991a51     Uj.....eU..eQ..U
    5168:	a5aaaa55 65a9aa28 65a5aa69 65a9aa69     U...(..ei..ei..e
    5178:	64a99669 65a9aa59 65a9aa59 65a99a59     i..dY..eY..eY..e
    5188:	6599aa55 55999a55 6499aa55 65999a55     U..eU..UU..dU..e
    5198:	24996a55 6599aa15 65a9aa55 55a91a51     Uj.$...eU..eQ..U
    51a8:	a5aaaa55 a5aaaa68 65a9aa69 65a9aa69     U...h...i..ei..e
    51b8:	65a99a69 65a9aa59 65a9aa59 65a99a59     i..eY..eY..eY..e
    51c8:	65a9aa55 65a99a55 64a9aa59 65a9aa55     U..eU..eY..dU..e
    51d8:	24a9aa55 65a9aa15 65a9aa55 65a91a51     U..$...eU..eQ..e
    51e8:	aaaaaa55 aaaaaa68 69aaaa68 69a9aa69     U...h...h..ii..i
    51f8:	65a99a69 65a9aa69 69aaaa59 65aaaa59     i..ei..eY..iY..e
    5208:	65a9aa55 65a9aa55 65a9aa59 65a9aa55     U..eU..eY..eU..e
    5218:	64a9aa55 65a9aa55 65aaaa55 65a92a55     U..dU..eU..eU*.e
    5228:	aaaaaa55 aaaaaaa8 6aaaaaa8 69a9aa69     U..........ji..i
    5238:	69aaaa69 69a9aa69 69aaaa59 69aaaa59     i..ii..iY..iY..i
    5248:	69a9aa59 69a9aa69 65aaaa59 69a9aa55     Y..ii..iY..eU..i
    5258:	69a9aa55 69aaaa55 69aaaa55 65aa2a55     U..iU..iU..iU*.e
    5268:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    5278:	a9aaaa68 6aaaaa68 aaaaaa68 6aaaaa68     h...h..jh...h..j
    5288:	69a9aa68 69aaaa68 69aaaa58 69aaaa54     h..ih..iX..iT..i
    5298:	69a9aa54 69aaaa54 6aaaaa54 69aa2a54     T..iT..iT..jT*.i
    52a8:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    52b8:	a9aaaaa8 aaaaaa68 aaaaaa68 aaaaaa68     ....h...h...h...
    52c8:	a9aaaa68 aaaaaa68 69aaaa68 69aaaa58     h...h...h..iX..i
    52d8:	69aaaa64 a9aaaa54 aaaaaa64 69aa2a64     d..iT...d...d*.i
    52e8:	aaaa9a59 aaaaaaaa aaaaaaaa aaaaaa6a     Y...........j...
    52f8:	aaaaaaaa aaaaaa6a aaaaaa6a aaaaaa6a     ....j...j...j...
    5308:	aaaaaa6a aaaaaa6a 69aaaa6a 69aaaa6a     j...j...j..ij..i
    5318:	69aaaa6a a9aaaa6a aaaaaa6a aaaa2aa6     j..ij...j....*..
    5328:	aaaaaa68 aaaaaaaa aaaaaaaa aaaaaaaa     h...............
    5338:	aaaaaaaa aaaaaaaa aaaaaa6a aaaaaa6a     ........j...j...
    5348:	aaaaaaaa aaaaaa6a a9aaaaaa aaaaaa6a     ....j.......j...
    5358:	69aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ...ij........*..
    5368:	aaaa4aa8 aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    5378:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5388:	aaaaaaaa aaaaaa6a aaaaaaaa aaaaaaaa     ....j...........
    5398:	a9aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ....j........*..
    53a8:	aaaa4aaa aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    53b8:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    53c8:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    53d8:	aaaaaaaa aaaaaa6a aaaa9aaa aaaa1aaa     ....j...........
    53e8:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    53f8:	aaaa6aaa aaaaaaaa aaaaaaaa aaaaaaaa     .j..............
    5408:	aaaa9aaa aaaa6aaa aaaa6aaa aaaa6aaa     .....j...j...j..
    5418:	aaaa5aaa aaaaaaaa aaaaaaaa aaaa2aaa     .Z...........*..
    5428:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    5438:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa6aaa     .j...j...j...j..
    5448:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa5aaa     .j...j...j...Z..
    5458:	aaaa6aaa aaaa6aaa aaaa4aaa aaaa4aaa     .j...j...J...J..
    5468:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa5aaa     .J...Z...Z...Z..
    5478:	aaaa6aaa aaaa6aa6 aaaa6aaa aaaa5aaa     .j...j...j...Z..
    5488:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa6aaa     .J...Z...Z...j..
    5498:	aaaa49aa aaaa5aaa aa9a4aaa aaaa4aaa     .I...Z...J...J..
    54a8:	aaaa52aa aa2a6aa6 aaaa6aa6 aaaa6aa6     .R...j*..j...j..
    54b8:	aaaa6aa6 aaa26aaa aa9a52aa aa2a62aa     .j...j...R...b*.
    54c8:	aa9a4aaa aaa26aaa aa2a6aaa aaaa4aaa     .J...j...j*..J..
    54d8:	aa2a4aaa aaaa62aa aa2a4aaa aa224aaa     .J*..b...J*..J".
    54e8:	aaaa12a6 6a224aaa aaaa4aaa aaaa4aaa     .....J"j.J...J..
    54f8:	aa225aaa aa225aa2 6aaa62aa aa2242aa     .Z"..Z"..b.j.B".
    5508:	aaa242aa aaa242aa aa2042aa aaaa4aaa     .B...B...B ..J..
    5518:	aa2a40aa 6aa242a6 6a0a4aaa aa124aaa     .@*..B.j.J.j.J..
    5528:	aa5215aa aa1242a2 aa9a42a2 6a9a42a2     ..R..B...B...B.j
    5538:	6a1262a2 aa1262a2 aa8842aa aa2042aa     .b.j.b...B...B .
    5548:	aa0242aa 6a2242aa aa1042aa 6aaa4aa6     .B...B"j.B...J.j
    5558:	6a1040a6 aa2242aa aa0a42a6 aa2042aa     .@.j.B"..B...B .
    5568:	6a6216a2 2a6211a2 696a11a2 aa6211a2     ..bj..b*..ji..b.
    5578:	a96211a2 6a6251a2 2a4851a6 6a5051a6     ..b..Qbj.QH*.QPj
    5588:	6a4251a6 aa5051a6 696051a6 a95059aa     .QBj.QP..Q`i.YP.
    5598:	a96050aa 2a5251a2 2a4a51aa 694051aa     .P`..QR*.QJ*.Q@i
    55a8:	aa5215a2 294216a2 aa4816a2 294216a2     ..R...B)..H...B)
    55b8:	2a4016a2 a94216a2 294816aa a96016aa     ..@*..B...H)..`.
    55c8:	aa4216aa 296016aa aa4016aa 2a6016a2     ..B...`)..@...`*
    55d8:	2a401422 296056a2 294a56a2 aa405626     ".@*.V`).VJ)&V@.
    55e8:	195555a2 1a5455a2 18545522 1a5455a2     .UU..UT."UT..UT.
    55f8:	185455a2 1a5455a2 1a5455a2 1a5455a2     .UT..UT..UT..UT.
    5608:	195455a2 1a5455a2 18545522 18545522     .UT..UT."UT."UT.
    5618:	18545522 1a5455a2 1a545522 1854552a     "UT..UT."UT.*UT.
    5628:	2a555522 28555526 28555526 285555a6     "UU*&UU(&UU(.UU(
    5638:	28555526 28555526 285555a6 285555a6     &UU(&UU(.UU(.UU(
    5648:	2a555526 285555a6 28555526 28555526     &UU*.UU(&UU(&UU(
    5658:	28555526 28555526 28555526 28555526     &UU(&UU(&UU(&UU(
    5668:	54555526 54555506 54555506 54555506     &UUT.UUT.UUT.UUT
    5678:	54555506 54555526 54555526 54555526     .UUT&UUT&UUT&UUT
    5688:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    5698:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    56a8:	55555526 55555554 55555554 55555554     &UUUTUUUTUUUTUUU
    56b8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    56c8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    56d8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    56e8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    56f8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    5708:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    5718:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    5728:	aaaa5454 aaaa54a8 aaaa54a8 aaaa54a8     TT...T...T...T..
    5738:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    5748:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    5758:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    5768:	000050a8 00005008 00005008 00005008     .P...P...P...P..
    5778:	00005008 00005008 00005008 00005008     .P...P...P...P..
    5788:	00005008 00005008 00005008 00005008     .P...P...P...P..
    5798:	00005008 00005008 00005008 00005008     .P...P...P...P..
    57a8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    57b8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    57c8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    57d8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    57e8:	00000008 00000000 00000000 00000000     ................
	...

0000582c <ArvoBold_18pt_CharCount>:
    582c:	12080805 0410150f 0e0c0808 09050906     ................
    583c:	0d0e0a0f 0e0e0e0e 05060d0e 0e0a0c0a     ................
    584c:	1210111b 130f1011 13080816 13141b10     ................
    585c:	0f121310 1c121211 080f1212 0c0e0709     ................
    586c:	0e0f0f09 0f090e10 11070910 0f111909     ................
    587c:	0d0d1010 160f1108 0b0d0f0e 000b0b07     ................

0000588c <ArvoBold_18pt_Table>:
	...
    58a8:	03cfff00 03cfff00 03cfff00 00000000     ................
	...
    58c4:	00003f00 00003f00 00001f00 00000000     .?...?..........
    58d4:	00003f00 00003f00 00001f00 00700000     .?...?........p.
    58e4:	03706000 03f07000 03fff000 00fffc00     .`p..p..........
    58f4:	007fff00 00707f00 00707300 03707000     ......p..sp..pp.
    5904:	03f07000 03fe7000 01fff000 007ffc00     .p...p..........
    5914:	0071ff00 00707f00 00307300 00007000     ..q...p..s0..p..
	...
    592c:	00f00000 00f3c000 00f7e000 01f7f000     ................
    593c:	01e77000 0fce7f00 0fce7f00 0fceff00     .p..............
    594c:	01ddf000 00fde000 00fde000 0079e000     ..............y.
	...
    596c:	00007c00 0000fe00 0201ff00 0301c700     .|..............
    597c:	03c1c700 01e1c700 00f9ff00 003cfe00     ..............<.
    598c:	001f7c00 00ff8000 01ffe000 03fef000     .|..............
    599c:	038e7c00 038e1e00 038e0f00 03fe0300     .|..............
    59ac:	01fc0100 00f80000 00000000 00000000     ................
    59bc:	00780000 00fe7800 01fffe00 03c7fe00     ..x..x..........
    59cc:	0383cf00 03878700 039f8700 03ffcf00     ................
    59dc:	01fffe00 01fcfe00 00f8f800 01fe0000     ................
    59ec:	03fe0000 03ce0000 01800000 00003f00     .............?..
    59fc:	00003f00 00000f00 00000000 00000000     .?..............
    5a0c:	01ff8000 0ffff000 3ffffc00 ff00fe00     ...........?....
    5a1c:	f8001f00 70000e00 00000000 00000000     .......p........
    5a2c:	70000e00 f8001f00 7f00fe00 3ffffc00     ...p...........?
    5a3c:	0ffff000 01ff8000 00000000 00000000     ................
    5a4c:	00000e00 0000ce00 0000fc00 0000ff80     ................
    5a5c:	00007f80 00007f80 0000fc00 0000fc00     ................
    5a6c:	0000ce00 00000e00 00000000 00000000     ................
    5a7c:	000e0000 000e0000 000e0000 000e0000     ................
    5a8c:	00ffe000 00ffe000 00ffe000 000e0000     ................
    5a9c:	000e0000 000e0000 000e0000 00000000     ................
    5aac:	00000000 30000000 3f000000 1f800000     .......0...?....
    5abc:	07800000 00000000 00000000 00000000     ................
    5acc:	001c0000 001c0000 001c0000 001c0000     ................
    5adc:	001c0000 001c0000 001c0000 00000000     ................
    5aec:	00000000 03c00000 03c00000 03c00000     ................
	...
    5b04:	03000000 03e00000 03fc0000 01ff8000     ................
    5b14:	003ff000 0007fe00 0000ff00 00001f00     ..?.............
    5b24:	00000000 001fe000 007ff800 01fffe00     ................
    5b34:	01e01e00 03c00f00 03800700 03800700     ................
    5b44:	03800700 03c00f00 01e01e00 01fffe00     ................
    5b54:	007ff800 001fe000 00000000 00007800     .............x..
    5b64:	03807c00 03803e00 03fffe00 03ffff00     .|...>..........
    5b74:	03ffff00 03800000 03800000 00000000     ................
	...
    5b8c:	03c03800 03e03c00 03f03e00 03f80f00     .8...<...>......
    5b9c:	03bc0700 039e0700 038f0700 03878700     ................
    5bac:	0383cf00 0381fe00 0380fc00 03807800     .............x..
    5bbc:	00000000 00601800 00e01c00 01e01e00     ......`.........
    5bcc:	03c00f00 03800700 03838700 03838700     ................
    5bdc:	03838700 01c7cf00 01fffe00 00fefc00     ................
    5bec:	007c7800 00000000 000f0000 000f8000     .x|.............
    5bfc:	000fe000 000ef000 000e7c00 000e1e00     .........|......
    5c0c:	038e0f00 038e0300 03ffc100 03ffc000     ................
    5c1c:	03ffc000 038e0000 038e0000 00000000     ................
	...
    5c34:	00e1ff00 01e1ff00 01e1ff00 03c1c700     ................
    5c44:	0381c700 0381c700 0381c700 03c3c700     ................
    5c54:	01ff8700 00ff0700 007e0000 00000000     ..........~.....
    5c64:	00000000 003c0000 00ff0000 01ffc000     ......<.........
    5c74:	01c3f000 0381f800 0381fe00 0381cf00     ................
    5c84:	0381c700 01c38100 01ff8000 00ff0000     ................
    5c94:	003c0000 00000000 00003f00 00003f00     ..<......?...?..
    5ca4:	03803f00 03800700 03e00700 03f80700     .?..............
    5cb4:	03ff0700 039fc700 0387f700 0000ff00     ................
    5cc4:	00003f00 00000f00 00000300 00000000     .?..............
    5cd4:	00000000 007c7800 00fefc00 01fffe00     .....x|.........
    5ce4:	01c7cf00 03838700 03838700 03838700     ................
    5cf4:	03838700 01c7cf00 01fffe00 00fefc00     ................
    5d04:	007c7800 00000000 00000000 0001f000     .x|.............
    5d14:	0003fc00 0007fe00 030f0e00 03ce0700     ................
    5d24:	03ee0700 03fe0700 00fe0700 003f0e00     ..............?.
    5d34:	000ffe00 0003fc00 0000f800 00000000     ................
    5d44:	03c3c000 03c3c000 03c3c000 00000000     ................
    5d54:	00000000 3f000000 1f81e000 0781e000     .......?........
    5d64:	0301e000 00000000 001e0000 001e0000     ................
    5d74:	001f0000 003f0000 003f0000 00738000     ......?...?...s.
    5d84:	00738000 00738000 00e1c000 00000000     ..s...s.........
    5d94:	00000000 0039c000 0039c000 0039c000     ......9...9...9.
    5da4:	0039c000 0039c000 0039c000 0039c000     ..9...9...9...9.
    5db4:	0039c000 0039c000 0039c000 00000000     ..9...9...9.....
    5dc4:	00e1c000 00738000 00738000 00738000     ......s...s...s.
    5dd4:	003f0000 003f0000 003f0000 001e0000     ..?...?...?.....
    5de4:	001e0000 001e0000 00000000 00001c00     ................
    5df4:	00001e00 00001e00 03dc0f00 03df0700     ................
    5e04:	03df0700 00038700 0001c700 0001fe00     ................
    5e14:	0000fe00 00007800 00000000 00000000     .....x..........
	...
    5e2c:	00ff0000 03ffc000 07ffe000 1f81f800     ................
    5e3c:	3e007c00 3c3c3c00 78ff1e00 71ff8e00     .|.>.<<<...x...q
    5e4c:	f1c38f00 e381c700 e381c700 e381c700     ................
    5e5c:	e381c700 e1c3c700 f1ffcf00 73ffce00     ...............s
    5e6c:	73ffde00 03801c00 03803c00 03c0f800     ...s.....<......
	...
    5e90:	03800000 03c00000 03f80000 03ff0000     ................
    5ea0:	03bfe000 038ff800 000eff00 000e1f00     ................
    5eb0:	000e0700 000e7f00 038fff00 039ff800     ................
    5ec0:	03ff8000 03fc0000 03e00000 03800000     ................
	...
    5ed8:	03800700 03800700 03ffff00 03ffff00     ................
    5ee8:	03ffff00 03838700 03838700 03838700     ................
    5ef8:	03838700 03838700 03c7cf00 01fffe00     ................
    5f08:	00fffc00 007cf800 00000000 00000000     ......|.........
    5f18:	000fc000 003ff000 007ffc00 00f03e00     ......?......>..
    5f28:	01e01e00 01c00f00 03800700 03800700     ................
    5f38:	03800700 03800700 03c00f00 01e01e00     ................
    5f48:	01f03c00 00f03800 00703800 00303800     .<...8...8p..80.
    5f58:	00000000 03800700 03800700 03ffff00     ................
    5f68:	03ffff00 03ffff00 03800700 03800700     ................
    5f78:	03800700 03800700 03c00f00 01c00e00     ................
    5f88:	01e01e00 00f87c00 007ff800 003ff000     .....|........?.
    5f98:	000fc000 00000000 00000000 03800700     ................
    5fa8:	03800700 03ffff00 03ffff00 03ffff00     ................
    5fb8:	03838700 03838700 03838700 03838700     ................
    5fc8:	03838700 03800700 03f03f00 03f03f00     .........?...?..
    5fd8:	03f03f00 00000000 00000000 03800700     .?..............
    5fe8:	03800700 03ffff00 03ffff00 03ffff00     ................
    5ff8:	03838700 03838700 00038700 00038700     ................
    6008:	00038700 00000700 00001f00 00001f00     ................
    6018:	00001f00 00000000 000fc000 003ff000     ..............?.
    6028:	00fff800 00f07c00 01e01e00 01c00e00     .....|..........
    6038:	03800700 03800700 03800700 03870700     ................
    6048:	03870700 03c70e00 01e71e00 01f73c00     .............<..
    6058:	00ff3800 03ff3800 03ff3800 00000000     .8...8...8......
    6068:	00000000 03800700 03800700 03ffff00     ................
    6078:	03ffff00 03ffff00 03838700 03838700     ................
    6088:	00038000 00038000 00038000 00038000     ................
    6098:	00038000 00038000 03838700 03838700     ................
    60a8:	03ffff00 03ffff00 03ffff00 03800700     ................
    60b8:	03800700 00000000 00000000 03800700     ................
    60c8:	03800700 03ffff00 03ffff00 03ffff00     ................
    60d8:	03800700 03800700 00000000 0c000700     ................
    60e8:	0f000700 0fffff00 07ffff00 01ffff00     ................
    60f8:	00000700 00000700 00000000 03800700     ................
    6108:	03800700 03ffff00 03ffff00 03ffff00     ................
    6118:	03820700 03830700 00078000 000fc000     ................
    6128:	001ce000 00387000 00383800 03f03f00     .....p8..88..?..
    6138:	03e01f00 03c00f00 03800700 03800700     ................
    6148:	00000700 00000000 03800700 03800700     ................
    6158:	03ffff00 03ffff00 03ffff00 03800700     ................
    6168:	03800700 03800000 03800000 03800000     ................
    6178:	03800000 03f80000 03f80000 03f80000     ................
	...
    6190:	03800700 03800700 03ffff00 03ffff00     ................
    61a0:	03ffff00 03803f00 0000fc00 0003f800     .....?..........
    61b0:	0007e000 001f8000 007e0000 01f80000     ..........~.....
    61c0:	03e00000 03f80000 01fe0000 003f8000     ..............?.
    61d0:	000fe000 0003f800 0000fe00 03803f00     .............?..
    61e0:	03ffff00 03ffff00 03ffff00 03800700     ................
    61f0:	03800700 00000000 00000000 03800700     ................
    6200:	03800700 03ffff00 03ffff00 03fffe00     ................
    6210:	0380fc00 0381f000 0007e000 000f8000     ................
    6220:	003f0000 007c0000 01f00700 03e00700     ..?...|.........
    6230:	03ffff00 03ffff00 03ffff00 00000700     ................
    6240:	00000700 00000000 00000000 000fc000     ................
    6250:	003ff000 007ff800 00f03c00 01e01e00     ..?......<......
    6260:	01c00e00 03800700 03800700 03800700     ................
    6270:	03800700 03800700 01c00e00 01e01e00     ................
    6280:	00f03c00 007ff800 003ff000 000fc000     .<........?.....
	...
    6298:	03800700 03800700 03ffff00 03ffff00     ................
    62a8:	03ffff00 03870700 03870700 00070700     ................
    62b8:	00070700 00070700 00078f00 0003fe00     ................
    62c8:	0001fc00 0000f800 00000000 00000000     ................
    62d8:	000fc000 003ff000 00fff800 00f03c00     ......?......<..
    62e8:	01e01e00 03c00e00 03800700 3f800700     ...............?
    62f8:	3f800700 3f800700 7b800700 f3c00e00     ...?...?...{....
    6308:	e1e01e00 e0f03c00 f0fff800 703ff000     .....<........?p
    6318:	700fc000 00000000 00000000 03800700     ...p............
    6328:	03800700 03ffff00 03ffff00 03ffff00     ................
    6338:	03870700 03870700 00070700 00070700     ................
    6348:	00070700 000f0700 00ff0700 03ff8f00     ................
    6358:	03f9fe00 03e1fc00 03807800 00000000     .........x......
    6368:	00000000 00787800 00f9fc00 01f9fe00     .....xx.........
    6378:	01c3cf00 0383c700 03878700 03878700     ................
    6388:	03878700 03870700 01cf0e00 01ff3e00     .............>..
    6398:	00fe3c00 007c3800 00000000 00003f00     .<...8|......?..
    63a8:	00003f00 00003f00 00000700 03800700     .?...?..........
    63b8:	03800700 03ffff00 03ffff00 03ffff00     ................
    63c8:	03800700 03800700 00000700 00000700     ................
    63d8:	00003f00 00003f00 00003f00 00000000     .?...?...?......
    63e8:	00000700 00000700 001fff00 007fff00     ................
    63f8:	00ffff00 01e00700 03c00700 03800000     ................
    6408:	03800000 03800000 03800000 03c00700     ................
    6418:	01e00700 00ffff00 007fff00 001fff00     ................
    6428:	00000700 00000700 00000700 00000700     ................
    6438:	00000f00 00007f00 0003ff00 000ff700     ................
    6448:	007f8700 01fe0000 03f00000 03f00000     ................
    6458:	03fe0000 007f8700 000ff700 0003ff00     ................
    6468:	00007f00 00000f00 00000700 00000700     ................
    6478:	00000700 00000700 00000f00 00007f00     ................
    6488:	0003ff00 000ff700 007fc700 01fe0000     ................
    6498:	03f80000 03e00000 03fe0000 01ffe000     ................
    64a8:	001ffe00 0000ff00 0000ff00 0007fc00     ................
    64b8:	003fe000 01ff0000 03f80000 03f00000     ..?.............
    64c8:	01fe0000 007f8700 001ff700 0003ff00     ................
    64d8:	00007f00 00000f00 00000700 00000700     ................
    64e8:	03800700 03c00f00 03e01f00 03f03f00     .............?..
    64f8:	03f87f00 03bcf700 001fe000 000fc000     ................
    6508:	000fc000 001fe000 03bcf700 03f87f00     ................
    6518:	03f03f00 03e01f00 03c00f00 03800700     .?..............
	...
    6530:	00000700 00000700 00000f00 00001f00     ................
    6540:	00003f00 03807f00 0380f700 03ffc000     .?..............
    6550:	03ff8000 03ffc000 0380e000 03807700     .............w..
    6560:	00003f00 00001f00 00000f00 00000700     .?..............
    6570:	00000700 00000000 00000000 03e07f00     ................
    6580:	03f07f00 03f87f00 03de0700 038f0700     ................
    6590:	0387c700 0381e700 0380f700 03803f00     .............?..
    65a0:	03801f00 03f00f00 03f00f00 03f00700     ................
	...
    65b8:	ffffffe0 ffffffe0 ffffffe0 e00000e0     ................
    65c8:	e00000e0 00000000 00000000 00000100     ................
    65d8:	00000f00 00007f00 0001fe00 000ff800     ................
    65e8:	007fc000 01fe0000 03f00000 03c00000     ................
    65f8:	00000000 e00000e0 e00000e0 ffffffe0     ................
    6608:	ffffffe0 ffffffe0 00000000 00000000     ................
    6618:	00010000 0001c000 0001f000 0001fc00     ................
    6628:	00003f00 00000f00 00000f00 00003f00     .?...........?..
    6638:	0000fe00 0001f800 0001c000 00010000     ................
    6648:	00000000 38000000 38000000 38000000     .......8...8...8
    6658:	38000000 38000000 38000000 38000000     ...8...8...8...8
    6668:	38000000 38000000 38000000 38000000     ...8...8...8...8
    6678:	38000000 00000000 00000000 00000100     ...8............
    6688:	00000300 00000700 00000f00 00000e00     ................
    6698:	00000800 00000000 00000000 00e00000     ................
    66a8:	01f18000 03f98000 0399c000 0399c000     ................
    66b8:	0399c000 0399c000 039bc000 03ffc000     ................
    66c8:	03ff8000 03ff0000 03800000 03800000     ................
    66d8:	00000000 00000700 00000700 03ffff00     ................
    66e8:	03ffff00 03ffff00 03c3c000 0381c000     ................
    66f8:	0381c000 0381c000 0381c000 01c38000     ................
    6708:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
    6718:	00000000 003e0000 00ff0000 01ff8000     ......>.........
    6728:	01c38000 0381c000 0381c000 0381c000     ................
    6738:	0381c000 03c3c000 01e38000 00e38000     ................
    6748:	00638000 00000000 00000000 003c0000     ..c...........<.
    6758:	00ff0000 01ff8000 03c38000 0381c000     ................
    6768:	0381c000 0381c000 0381c700 03c3c700     ................
    6778:	03ffff00 03ffff00 03ffff00 03800000     ................
    6788:	03800000 00000000 00000000 003c0000     ..............<.
    6798:	00ff0000 01ff8000 01d98000 0399c000     ................
    67a8:	0399c000 0399c000 0399c000 0399c000     ................
    67b8:	039f8000 019f0000 001e0000 00000000     ................
    67c8:	00000000 0381c000 0381c000 03fffc00     ................
    67d8:	03fffe00 03ffff00 0381c700 0381c700     ................
    67e8:	00000700 00000000 003c0000 60ff0000     ..........<....`
    67f8:	71ff8000 f1c38000 e381c000 e381c000     ...q............
    6808:	e381c000 e381c000 f3c3c000 7fffc000     ................
    6818:	3fffc000 1fffc000 00000000 00000000     ...?............
    6828:	00000000 03800700 03800700 03ffff00     ................
    6838:	03ffff00 03ffff00 03838000 0381c000     ................
    6848:	0001c000 0001c000 0003c000 03ffc000     ................
    6858:	03ff8000 03ff0000 03800000 03800000     ................
    6868:	00000000 0381c000 0381c600 03ffcf00     ................
    6878:	03ffcf00 03ffcf00 03800600 03800000     ................
    6888:	00000000 e001c000 e001c000 ffffc600     ................
    6898:	7fffcf00 3fffcf00 00000f00 00000600     .......?........
    68a8:	00000000 03800700 03800700 03ffff00     ................
    68b8:	03ffff00 03ffff00 039c0000 039c0000     ................
    68c8:	003c0000 007f0000 00ff8000 01e7c000     ..<.............
    68d8:	03c3c000 03c1c000 03c1c000 00000000     ................
	...
    68f0:	03800700 03800700 03ffff00 03ffff00     ................
    6900:	03ffff00 03800000 03800000 00000000     ................
    6910:	00000000 0381c000 0381c000 03ffc000     ................
    6920:	03ffc000 03ffc000 03838000 0381c000     ................
    6930:	0001c000 0001c000 0003c000 03ffc000     ................
    6940:	03ff8000 03ff0000 03838000 0381c000     ................
    6950:	0001c000 0001c000 0003c000 03ffc000     ................
    6960:	03ff8000 03ff0000 03800000 03800000     ................
    6970:	00000000 0381c000 0381c000 03ffc000     ................
    6980:	03ffc000 03ffc000 03838000 0381c000     ................
    6990:	0001c000 0001c000 0001c000 0003c000     ................
    69a0:	03ffc000 03ff8000 03ff0000 03800000     ................
    69b0:	03800000 00000000 003c0000 00ff0000     ..........<.....
    69c0:	01ff8000 01c38000 03c1c000 0381c000     ................
    69d0:	0381c000 0381c000 0381c000 01c38000     ................
    69e0:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
	...
    69f8:	e001c000 e001c000 ffffc000 ffffc000     ................
    6a08:	ffffc000 e3c3c000 e381c000 0381c000     ................
    6a18:	0381c000 0381c000 01c38000 01ff8000     ................
    6a28:	00ff0000 003c0000 00000000 00000000     ......<.........
    6a38:	003c0000 00ff0000 01ff8000 01c38000     ..<.............
    6a48:	03c3c000 0381c000 0381c000 0381c000     ................
    6a58:	e381c000 e3c3c000 ffffc000 ffffc000     ................
    6a68:	ffffc000 e0000000 e0000000 00000000     ................
    6a78:	0381c000 0381c000 03ffc000 03ffc000     ................
    6a88:	03ffc000 03838000 0381c000 0001c000     ................
    6a98:	0003c000 0003c000 0003c000 00000000     ................
    6aa8:	00000000 01c70000 01cf8000 01cfc000     ................
    6ab8:	03ddc000 0399c000 0399c000 0399c000     ................
    6ac8:	03bbc000 01fb8000 01f38000 00e38000     ................
    6ad8:	00000000 0001c000 0001c000 01fff800     ................
    6ae8:	03fffc00 03fffc00 0381c000 0381c000     ................
    6af8:	01800000 0001c000 0001c000 007fc000     ................
    6b08:	01ffc000 01ffc000 03c00000 03800000     ................
    6b18:	03800000 03800000 0381c000 01c1c000     ................
    6b28:	03ffc000 03ffc000 03ffc000 03800000     ................
    6b38:	03800000 00000000 0001c000 0001c000     ................
    6b48:	0003c000 000fc000 003fc000 00fdc000     ..........?.....
    6b58:	03f1c000 03c00000 03f00000 01fdc000     ................
    6b68:	007fc000 000fc000 0003c000 0001c000     ................
    6b78:	0001c000 0001c000 0001c000 0007c000     ................
    6b88:	001fc000 00ffc000 03fdc000 03e1c000     ................
    6b98:	03f80000 01ff8000 003fc000 0007c000     ..........?.....
    6ba8:	000fc000 007fc000 03fe0000 03f00000     ................
    6bb8:	03e1c000 03fdc000 00ffc000 001fc000     ................
    6bc8:	0003c000 0001c000 0001c000 0381c000     ................
    6bd8:	0381c000 03c1c000 03e3c000 03f7c000     ................
    6be8:	03ffc000 003c0000 003c0000 03ffc000     ......<...<.....
    6bf8:	03ffc000 03e7c000 03c3c000 0381c000     ................
    6c08:	0381c000 0001c000 0001c000 0003c000     ................
    6c18:	e00fc000 e03fc000 f0fdc000 fff00000     ......?.........
    6c28:	ffc00000 eff00000 e3fdc000 007fc000     ................
    6c38:	001fc000 0003c000 0001c000 0001c000     ................
    6c48:	00000000 0387c000 03c7c000 03f7c000     ................
    6c58:	03f9c000 03fdc000 039fc000 038fc000     ................
    6c68:	03e3c000 03e1c000 03e04000 00000000     .........@......
	...
    6c80:	00070000 00070000 00070000 1fffffc0     ................
    6c90:	3fffffe0 3ffdffe0 380000e0 380000e0     ...?...?...8...8
	...
    6cac:	ffffffe0 ffffffe0 ffffffe0 00000000     ................
	...
    6cc4:	380000e0 380000e0 3ffdffe0 3fffffe0     ...8...8...?...?
    6cd4:	1fffffc0 00070000 00070000 00070000     ................
	...
    6cf0:	00070000 00078000 0001c000 0001c000     ................
    6d00:	0003c000 00038000 00078000 00070000     ................
    6d10:	00070000 0003c000 0001c000 75647241     ............Ardu
    6d20:	206f6e69 006f6e55                       ino Uno.

00006d28 <__sf_fake_stderr>:
	...

00006d48 <__sf_fake_stdin>:
	...

00006d68 <__sf_fake_stdout>:
	...

00006d88 <_init>:
    6d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d8a:	46c0      	nop			; (mov r8, r8)
    6d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6d8e:	bc08      	pop	{r3}
    6d90:	469e      	mov	lr, r3
    6d92:	4770      	bx	lr

00006d94 <__init_array_start>:
    6d94:	000000dd 	.word	0x000000dd

00006d98 <_fini>:
    6d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d9a:	46c0      	nop			; (mov r8, r8)
    6d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6d9e:	bc08      	pop	{r3}
    6da0:	469e      	mov	lr, r3
    6da2:	4770      	bx	lr

00006da4 <__fini_array_start>:
    6da4:	000000b5 	.word	0x000000b5
