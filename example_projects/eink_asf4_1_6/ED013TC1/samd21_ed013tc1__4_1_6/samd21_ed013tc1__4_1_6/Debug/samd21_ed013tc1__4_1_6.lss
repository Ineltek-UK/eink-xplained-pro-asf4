
samd21_ed013tc1__4_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006398  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002d0  20000000  00006398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d8  200002d0  00006668  000202d0  2**2
                  ALLOC
  3 .stack        00002000  200003a8  00006740  000202d0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018d7a  00000000  00000000  00020351  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c68  00000000  00000000  000390cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000cb7e  00000000  00000000  0003ad33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005a0  00000000  00000000  000478b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000728  00000000  00000000  00047e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005049  00000000  00000000  00048579  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009773  00000000  00000000  0004d5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000863a5  00000000  00000000  00056d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001324  00000000  00000000  000dd0dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 23 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .#. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002d0 	.word	0x200002d0
      d4:	00000000 	.word	0x00000000
      d8:	00006398 	.word	0x00006398

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002d4 	.word	0x200002d4
     108:	00006398 	.word	0x00006398
     10c:	00006398 	.word	0x00006398
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00006398 	.word	0x00006398
     1c8:	20000000 	.word	0x20000000
     1cc:	200002d0 	.word	0x200002d0
     1d0:	20000004 	.word	0x20000004
     1d4:	200002d0 	.word	0x200002d0
     1d8:	200003a8 	.word	0x200003a8
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00003ced 	.word	0x00003ced
     1f8:	00003c2d 	.word	0x00003c2d

000001fc <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
     1fc:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fe:	4802      	ldr	r0, [pc, #8]	; (208 <delay_driver_init+0xc>)
     200:	4b02      	ldr	r3, [pc, #8]	; (20c <delay_driver_init+0x10>)
     202:	4798      	blx	r3
}
     204:	bd10      	pop	{r4, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	e000e010 	.word	0xe000e010
     20c:	00000369 	.word	0x00000369

00000210 <system_init>:

void system_init(void)
{
     210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     212:	46de      	mov	lr, fp
     214:	4657      	mov	r7, sl
     216:	464e      	mov	r6, r9
     218:	4645      	mov	r5, r8
     21a:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     21c:	4b40      	ldr	r3, [pc, #256]	; (320 <system_init+0x110>)
     21e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     220:	22c0      	movs	r2, #192	; 0xc0
     222:	05d2      	lsls	r2, r2, #23
     224:	2310      	movs	r3, #16
     226:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     228:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22a:	4b3e      	ldr	r3, [pc, #248]	; (324 <system_init+0x114>)
     22c:	493e      	ldr	r1, [pc, #248]	; (328 <system_init+0x118>)
     22e:	6299      	str	r1, [r3, #40]	; 0x28
     230:	24c0      	movs	r4, #192	; 0xc0
     232:	0624      	lsls	r4, r4, #24
     234:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	2544      	movs	r5, #68	; 0x44
     238:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23a:	2101      	movs	r1, #1
     23c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     240:	2020      	movs	r0, #32
     242:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     244:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     246:	4839      	ldr	r0, [pc, #228]	; (32c <system_init+0x11c>)
     248:	6298      	str	r0, [r3, #40]	; 0x28
     24a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24c:	3501      	adds	r5, #1
     24e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     250:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     252:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     254:	2040      	movs	r0, #64	; 0x40
     256:	4684      	mov	ip, r0
     258:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25c:	4834      	ldr	r0, [pc, #208]	; (330 <system_init+0x120>)
     25e:	4682      	mov	sl, r0
     260:	6298      	str	r0, [r3, #40]	; 0x28
     262:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     264:	3501      	adds	r5, #1
     266:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     268:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     26c:	2080      	movs	r0, #128	; 0x80
     26e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     270:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     272:	4830      	ldr	r0, [pc, #192]	; (334 <system_init+0x124>)
     274:	4680      	mov	r8, r0
     276:	6298      	str	r0, [r3, #40]	; 0x28
     278:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	3501      	adds	r5, #1
     27c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     280:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     282:	2580      	movs	r5, #128	; 0x80
     284:	022d      	lsls	r5, r5, #8
     286:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     288:	482b      	ldr	r0, [pc, #172]	; (338 <system_init+0x128>)
     28a:	6298      	str	r0, [r3, #40]	; 0x28
     28c:	482b      	ldr	r0, [pc, #172]	; (33c <system_init+0x12c>)
     28e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     290:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     292:	204f      	movs	r0, #79	; 0x4f
     294:	5c1e      	ldrb	r6, [r3, r0]
     296:	2704      	movs	r7, #4
     298:	433e      	orrs	r6, r7
     29a:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     29c:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a2:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2a4:	2694      	movs	r6, #148	; 0x94
     2a6:	5191      	str	r1, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a8:	3039      	adds	r0, #57	; 0x39
     2aa:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ac:	3020      	adds	r0, #32
     2ae:	4f24      	ldr	r7, [pc, #144]	; (340 <system_init+0x130>)
     2b0:	501f      	str	r7, [r3, r0]
     2b2:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b4:	27c0      	movs	r7, #192	; 0xc0
     2b6:	46bb      	mov	fp, r7
     2b8:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438f      	bics	r7, r1
     2bc:	46b9      	mov	r9, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2be:	465f      	mov	r7, fp
     2c0:	464d      	mov	r5, r9
     2c2:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c4:	4665      	mov	r5, ip
     2c6:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2c8:	3f38      	subs	r7, #56	; 0x38
     2ca:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4655      	mov	r5, sl
     2ce:	501d      	str	r5, [r3, r0]
     2d0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	25c6      	movs	r5, #198	; 0xc6
     2d4:	46a9      	mov	r9, r5
     2d6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d8:	002f      	movs	r7, r5
     2da:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	464d      	mov	r5, r9
     2de:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e0:	3d46      	subs	r5, #70	; 0x46
     2e2:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2e4:	3508      	adds	r5, #8
     2e6:	2780      	movs	r7, #128	; 0x80
     2e8:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ea:	4645      	mov	r5, r8
     2ec:	501d      	str	r5, [r3, r0]
     2ee:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f0:	3747      	adds	r7, #71	; 0x47
     2f2:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2f4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f6:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f8:	2480      	movs	r4, #128	; 0x80
     2fa:	05e4      	lsls	r4, r4, #23
     2fc:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2fe:	2588      	movs	r5, #136	; 0x88
     300:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     302:	501c      	str	r4, [r3, r0]
     304:	4a0f      	ldr	r2, [pc, #60]	; (344 <system_init+0x134>)
     306:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     308:	3036      	adds	r0, #54	; 0x36
     30a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     30c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(EINK_X_LED_0_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(EINK_X_LED_0_PIN, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
     310:	4b0d      	ldr	r3, [pc, #52]	; (348 <system_init+0x138>)
     312:	4798      	blx	r3
}
     314:	bc3c      	pop	{r2, r3, r4, r5}
     316:	4690      	mov	r8, r2
     318:	4699      	mov	r9, r3
     31a:	46a2      	mov	sl, r4
     31c:	46ab      	mov	fp, r5
     31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     320:	000003cd 	.word	0x000003cd
     324:	41004400 	.word	0x41004400
     328:	40000010 	.word	0x40000010
     32c:	40000020 	.word	0x40000020
     330:	40000040 	.word	0x40000040
     334:	40000080 	.word	0x40000080
     338:	40028000 	.word	0x40028000
     33c:	c0020000 	.word	0xc0020000
     340:	40000001 	.word	0x40000001
     344:	c0004000 	.word	0xc0004000
     348:	000001fd 	.word	0x000001fd

0000034c <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     34c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     350:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     352:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     354:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     358:	4770      	bx	lr

0000035a <atomic_leave_critical>:
     35a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     35e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     360:	f383 8810 	msr	PRIMASK, r3
}
     364:	4770      	bx	lr
	...

00000368 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     368:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     36a:	4b02      	ldr	r3, [pc, #8]	; (374 <delay_init+0xc>)
     36c:	6018      	str	r0, [r3, #0]
     36e:	4b02      	ldr	r3, [pc, #8]	; (378 <delay_init+0x10>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	200002ec 	.word	0x200002ec
     378:	0000050d 	.word	0x0000050d

0000037c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     37c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <delay_ms+0x14>)
     380:	681c      	ldr	r4, [r3, #0]
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x18>)
     384:	4798      	blx	r3
     386:	0001      	movs	r1, r0
     388:	0020      	movs	r0, r4
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <delay_ms+0x1c>)
     38c:	4798      	blx	r3
}
     38e:	bd10      	pop	{r4, pc}
     390:	200002ec 	.word	0x200002ec
     394:	000003c1 	.word	0x000003c1
     398:	00000521 	.word	0x00000521

0000039c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     39c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     39e:	4a06      	ldr	r2, [pc, #24]	; (3b8 <_sbrk+0x1c>)
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	2a00      	cmp	r2, #0
     3a4:	d004      	beq.n	3b0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3a6:	4a04      	ldr	r2, [pc, #16]	; (3b8 <_sbrk+0x1c>)
     3a8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3aa:	18c3      	adds	r3, r0, r3
     3ac:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3b0:	4902      	ldr	r1, [pc, #8]	; (3bc <_sbrk+0x20>)
     3b2:	4a01      	ldr	r2, [pc, #4]	; (3b8 <_sbrk+0x1c>)
     3b4:	6011      	str	r1, [r2, #0]
     3b6:	e7f6      	b.n	3a6 <_sbrk+0xa>
     3b8:	200002f0 	.word	0x200002f0
     3bc:	200023a8 	.word	0x200023a8

000003c0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <_get_cycles_for_ms+0x8>)
     3c2:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3c4:	4770      	bx	lr
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00005dc0 	.word	0x00005dc0

000003cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3cc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3ce:	4b07      	ldr	r3, [pc, #28]	; (3ec <_init_chip+0x20>)
     3d0:	685a      	ldr	r2, [r3, #4]
     3d2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     3d4:	4b06      	ldr	r3, [pc, #24]	; (3f0 <_init_chip+0x24>)
     3d6:	4798      	blx	r3
	_sysctrl_init_sources();
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <_init_chip+0x28>)
     3da:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     3dc:	2008      	movs	r0, #8
     3de:	4c06      	ldr	r4, [pc, #24]	; (3f8 <_init_chip+0x2c>)
     3e0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <_init_chip+0x30>)
     3e4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3e6:	20f7      	movs	r0, #247	; 0xf7
     3e8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     3ea:	bd10      	pop	{r4, pc}
     3ec:	41004000 	.word	0x41004000
     3f0:	00000441 	.word	0x00000441
     3f4:	00000461 	.word	0x00000461
     3f8:	00000401 	.word	0x00000401
     3fc:	00000495 	.word	0x00000495

00000400 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     400:	07c3      	lsls	r3, r0, #31
     402:	d509      	bpl.n	418 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <_gclk_init_generators_by_fref+0x34>)
     406:	2280      	movs	r2, #128	; 0x80
     408:	0092      	lsls	r2, r2, #2
     40a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     40c:	4a0a      	ldr	r2, [pc, #40]	; (438 <_gclk_init_generators_by_fref+0x38>)
     40e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     410:	001a      	movs	r2, r3
     412:	7853      	ldrb	r3, [r2, #1]
     414:	09db      	lsrs	r3, r3, #7
     416:	d1fc      	bne.n	412 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     418:	0703      	lsls	r3, r0, #28
     41a:	d509      	bpl.n	430 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     41c:	4b05      	ldr	r3, [pc, #20]	; (434 <_gclk_init_generators_by_fref+0x34>)
     41e:	2204      	movs	r2, #4
     420:	32ff      	adds	r2, #255	; 0xff
     422:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     424:	4a05      	ldr	r2, [pc, #20]	; (43c <_gclk_init_generators_by_fref+0x3c>)
     426:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     428:	001a      	movs	r2, r3
     42a:	7853      	ldrb	r3, [r2, #1]
     42c:	09db      	lsrs	r3, r3, #7
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	40000c00 	.word	0x40000c00
     438:	00010700 	.word	0x00010700
     43c:	00010403 	.word	0x00010403

00000440 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     440:	4b06      	ldr	r3, [pc, #24]	; (45c <_pm_init+0x1c>)
     442:	7a1a      	ldrb	r2, [r3, #8]
     444:	b2d2      	uxtb	r2, r2
     446:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     448:	7a5a      	ldrb	r2, [r3, #9]
     44a:	b2d2      	uxtb	r2, r2
     44c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     44e:	7a9a      	ldrb	r2, [r3, #10]
     450:	b2d2      	uxtb	r2, r2
     452:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     454:	7ada      	ldrb	r2, [r3, #11]
     456:	b2d2      	uxtb	r2, r2
     458:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     45a:	4770      	bx	lr
     45c:	40000400 	.word	0x40000400

00000460 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     460:	4a0b      	ldr	r2, [pc, #44]	; (490 <_sysctrl_init_sources+0x30>)
     462:	6993      	ldr	r3, [r2, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     464:	21fe      	movs	r1, #254	; 0xfe
     466:	03c9      	lsls	r1, r1, #15
     468:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     46a:	214e      	movs	r1, #78	; 0x4e
     46c:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
     46e:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     470:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     472:	392f      	subs	r1, #47	; 0x2f
     474:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     476:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     478:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     47a:	2204      	movs	r2, #4
     47c:	68cb      	ldr	r3, [r1, #12]
     47e:	421a      	tst	r2, r3
     480:	d0fc      	beq.n	47c <_sysctrl_init_sources+0x1c>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
     482:	4a03      	ldr	r2, [pc, #12]	; (490 <_sysctrl_init_sources+0x30>)
     484:	6993      	ldr	r3, [r2, #24]
     486:	2180      	movs	r1, #128	; 0x80
     488:	430b      	orrs	r3, r1
     48a:	6193      	str	r3, [r2, #24]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     48c:	4770      	bx	lr
     48e:	46c0      	nop			; (mov r8, r8)
     490:	40000800 	.word	0x40000800

00000494 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     494:	2202      	movs	r2, #2
     496:	4b19      	ldr	r3, [pc, #100]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     498:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     49a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     49c:	320e      	adds	r2, #14
     49e:	68cb      	ldr	r3, [r1, #12]
     4a0:	421a      	tst	r2, r3
     4a2:	d0fc      	beq.n	49e <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     4a4:	4a16      	ldr	r2, [pc, #88]	; (500 <_sysctrl_init_referenced_generators+0x6c>)
     4a6:	4b15      	ldr	r3, [pc, #84]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4a8:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4aa:	4b16      	ldr	r3, [pc, #88]	; (504 <_sysctrl_init_referenced_generators+0x70>)
     4ac:	681b      	ldr	r3, [r3, #0]
     4ae:	0e9b      	lsrs	r3, r3, #26
     4b0:	2b3f      	cmp	r3, #63	; 0x3f
     4b2:	d01a      	beq.n	4ea <_sysctrl_init_referenced_generators+0x56>
     4b4:	029b      	lsls	r3, r3, #10
     4b6:	2280      	movs	r2, #128	; 0x80
     4b8:	0092      	lsls	r2, r2, #2
     4ba:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     4bc:	4a0f      	ldr	r2, [pc, #60]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4be:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     4c0:	2302      	movs	r3, #2
     4c2:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     4c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     4c6:	075b      	lsls	r3, r3, #29
     4c8:	d512      	bpl.n	4f0 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ca:	0011      	movs	r1, r2
	tmp &= mask;
     4cc:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ce:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     4d0:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     4d2:	2bd0      	cmp	r3, #208	; 0xd0
     4d4:	d1fb      	bne.n	4ce <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     4d6:	4a09      	ldr	r2, [pc, #36]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4d8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     4da:	2180      	movs	r1, #128	; 0x80
     4dc:	430b      	orrs	r3, r1
     4de:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     4e0:	4a09      	ldr	r2, [pc, #36]	; (508 <_sysctrl_init_referenced_generators+0x74>)
     4e2:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     4e4:	09db      	lsrs	r3, r3, #7
     4e6:	d1fc      	bne.n	4e2 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     4e8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4ea:	23fc      	movs	r3, #252	; 0xfc
     4ec:	01db      	lsls	r3, r3, #7
     4ee:	e7e5      	b.n	4bc <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     4f0:	4902      	ldr	r1, [pc, #8]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     4f2:	2210      	movs	r2, #16
     4f4:	68cb      	ldr	r3, [r1, #12]
     4f6:	421a      	tst	r2, r3
     4f8:	d0fc      	beq.n	4f4 <_sysctrl_init_referenced_generators+0x60>
     4fa:	e7ec      	b.n	4d6 <_sysctrl_init_referenced_generators+0x42>
     4fc:	40000800 	.word	0x40000800
     500:	04010000 	.word	0x04010000
     504:	00806024 	.word	0x00806024
     508:	40000c00 	.word	0x40000c00

0000050c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     50c:	4b02      	ldr	r3, [pc, #8]	; (518 <_delay_init+0xc>)
     50e:	4a03      	ldr	r2, [pc, #12]	; (51c <_delay_init+0x10>)
     510:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     512:	2205      	movs	r2, #5
     514:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     516:	4770      	bx	lr
     518:	e000e010 	.word	0xe000e010
     51c:	00ffffff 	.word	0x00ffffff

00000520 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     520:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     522:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     524:	1e5e      	subs	r6, r3, #1
     526:	b2f6      	uxtb	r6, r6
     528:	2b00      	cmp	r3, #0
     52a:	d013      	beq.n	554 <_delay_cycles+0x34>
     52c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     52e:	4a0e      	ldr	r2, [pc, #56]	; (568 <_delay_cycles+0x48>)
     530:	4d0e      	ldr	r5, [pc, #56]	; (56c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     532:	2080      	movs	r0, #128	; 0x80
     534:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     536:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     538:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     53a:	6813      	ldr	r3, [r2, #0]
     53c:	4203      	tst	r3, r0
     53e:	d0fc      	beq.n	53a <_delay_cycles+0x1a>
	while (n--) {
     540:	3c01      	subs	r4, #1
     542:	b2e4      	uxtb	r4, r4
     544:	2cff      	cmp	r4, #255	; 0xff
     546:	d1f6      	bne.n	536 <_delay_cycles+0x16>
     548:	0633      	lsls	r3, r6, #24
     54a:	1af6      	subs	r6, r6, r3
     54c:	4b08      	ldr	r3, [pc, #32]	; (570 <_delay_cycles+0x50>)
     54e:	469c      	mov	ip, r3
     550:	4461      	add	r1, ip
     552:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     554:	4b04      	ldr	r3, [pc, #16]	; (568 <_delay_cycles+0x48>)
     556:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     558:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     55a:	0019      	movs	r1, r3
     55c:	2280      	movs	r2, #128	; 0x80
     55e:	0252      	lsls	r2, r2, #9
     560:	680b      	ldr	r3, [r1, #0]
     562:	4213      	tst	r3, r2
     564:	d0fc      	beq.n	560 <_delay_cycles+0x40>
		;
}
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	e000e010 	.word	0xe000e010
     56c:	00ffffff 	.word	0x00ffffff
     570:	ff000001 	.word	0xff000001

00000574 <eink_ite_wait_for_hrdy>:
 * to use. 
 */
/**
 * \brief Wait For Host Ready function.
 */
static void eink_ite_wait_for_hrdy(void) {
     574:	b510      	push	{r4, lr}
    ptr_eink_ite_config->wait_for_hrdy();
     576:	4b02      	ldr	r3, [pc, #8]	; (580 <eink_ite_wait_for_hrdy+0xc>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	4798      	blx	r3
}
     57e:	bd10      	pop	{r4, pc}
     580:	2000030c 	.word	0x2000030c

00000584 <gfx_eink_set_pixel>:
}

/**
 * \brief Set Pixel function.
 */
static void gfx_eink_set_pixel(eink_coordinate x_set, eink_coordinate y_set, enum eink_pixel_colour pixel_colour) {
     584:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel(x_set, y_set, pixel_colour);
     586:	4b02      	ldr	r3, [pc, #8]	; (590 <gfx_eink_set_pixel+0xc>)
     588:	681b      	ldr	r3, [r3, #0]
     58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     58c:	4798      	blx	r3
}
     58e:	bd10      	pop	{r4, pc}
     590:	200003a0 	.word	0x200003a0

00000594 <gfx_eink_set_pixel_raw>:

/**
 * \brief Set Pixel with raw value function.
 */
static void gfx_eink_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value) {
     594:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel_raw(x_set, y_set, pixel_value);
     596:	4b02      	ldr	r3, [pc, #8]	; (5a0 <gfx_eink_set_pixel_raw+0xc>)
     598:	681b      	ldr	r3, [r3, #0]
     59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     59c:	4798      	blx	r3
}
     59e:	bd10      	pop	{r4, pc}
     5a0:	200003a0 	.word	0x200003a0

000005a4 <eink_ed013tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed013tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a6:	46de      	mov	lr, fp
     5a8:	4657      	mov	r7, sl
     5aa:	464e      	mov	r6, r9
     5ac:	4645      	mov	r5, r8
     5ae:	b5e0      	push	{r5, r6, r7, lr}
     5b0:	b08b      	sub	sp, #44	; 0x2c
     5b2:	9003      	str	r0, [sp, #12]
     5b4:	9205      	str	r2, [sp, #20]
     5b6:	0018      	movs	r0, r3
     5b8:	9307      	str	r3, [sp, #28]
     5ba:	ab14      	add	r3, sp, #80	; 0x50
     5bc:	8819      	ldrh	r1, [r3, #0]
     5be:	9108      	str	r1, [sp, #32]
     5c0:	ab15      	add	r3, sp, #84	; 0x54
     5c2:	8819      	ldrh	r1, [r3, #0]
     5c4:	9109      	str	r1, [sp, #36]	; 0x24
     5c6:	ab16      	add	r3, sp, #88	; 0x58
     5c8:	781f      	ldrb	r7, [r3, #0]
     5ca:	ab17      	add	r3, sp, #92	; 0x5c
     5cc:	7819      	ldrb	r1, [r3, #0]
     5ce:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     5d0:	428f      	cmp	r7, r1
     5d2:	d051      	beq.n	678 <eink_ed013tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     5d4:	2a00      	cmp	r2, #0
     5d6:	d04f      	beq.n	678 <eink_ed013tc1_graphics_load_mono_image+0xd4>
     5d8:	2200      	movs	r2, #0
     5da:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     5dc:	0003      	movs	r3, r0
     5de:	3b01      	subs	r3, #1
     5e0:	b29b      	uxth	r3, r3
     5e2:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5e4:	4b28      	ldr	r3, [pc, #160]	; (688 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     5e6:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     5e8:	46b8      	mov	r8, r7
     5ea:	e033      	b.n	654 <eink_ed013tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5ec:	464b      	mov	r3, r9
     5ee:	2b08      	cmp	r3, #8
     5f0:	d003      	beq.n	5fa <eink_ed013tc1_graphics_load_mono_image+0x56>
     5f2:	464a      	mov	r2, r9
     5f4:	0021      	movs	r1, r4
     5f6:	9801      	ldr	r0, [sp, #4]
     5f8:	47d8      	blx	fp
     5fa:	3501      	adds	r5, #1
     5fc:	3401      	adds	r4, #1
     5fe:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     600:	2d08      	cmp	r5, #8
     602:	d00b      	beq.n	61c <eink_ed013tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     604:	7833      	ldrb	r3, [r6, #0]
     606:	412b      	asrs	r3, r5
                    if(bit_value) {
     608:	07db      	lsls	r3, r3, #31
     60a:	d5ef      	bpl.n	5ec <eink_ed013tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     60c:	2f08      	cmp	r7, #8
     60e:	d0f4      	beq.n	5fa <eink_ed013tc1_graphics_load_mono_image+0x56>
     610:	003a      	movs	r2, r7
     612:	0021      	movs	r1, r4
     614:	9801      	ldr	r0, [sp, #4]
     616:	4b1c      	ldr	r3, [pc, #112]	; (688 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     618:	4798      	blx	r3
     61a:	e7ee      	b.n	5fa <eink_ed013tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     61c:	4643      	mov	r3, r8
     61e:	3b01      	subs	r3, #1
     620:	b29b      	uxth	r3, r3
     622:	4698      	mov	r8, r3
     624:	4653      	mov	r3, sl
     626:	3308      	adds	r3, #8
     628:	b29b      	uxth	r3, r3
     62a:	469a      	mov	sl, r3
     62c:	4643      	mov	r3, r8
     62e:	2b00      	cmp	r3, #0
     630:	d008      	beq.n	644 <eink_ed013tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     632:	9b02      	ldr	r3, [sp, #8]
     634:	4443      	add	r3, r8
     636:	001e      	movs	r6, r3
     638:	9b03      	ldr	r3, [sp, #12]
     63a:	469c      	mov	ip, r3
     63c:	4466      	add	r6, ip
     63e:	4654      	mov	r4, sl
     640:	2500      	movs	r5, #0
     642:	e7df      	b.n	604 <eink_ed013tc1_graphics_load_mono_image+0x60>
     644:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     646:	9b04      	ldr	r3, [sp, #16]
     648:	3301      	adds	r3, #1
     64a:	b29b      	uxth	r3, r3
     64c:	9304      	str	r3, [sp, #16]
     64e:	9a05      	ldr	r2, [sp, #20]
     650:	429a      	cmp	r2, r3
     652:	d911      	bls.n	678 <eink_ed013tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     654:	9b06      	ldr	r3, [sp, #24]
     656:	1e1f      	subs	r7, r3, #0
     658:	d0f5      	beq.n	646 <eink_ed013tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     65a:	9b07      	ldr	r3, [sp, #28]
     65c:	9a04      	ldr	r2, [sp, #16]
     65e:	4353      	muls	r3, r2
     660:	9302      	str	r3, [sp, #8]
     662:	9b09      	ldr	r3, [sp, #36]	; 0x24
     664:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     666:	9b08      	ldr	r3, [sp, #32]
     668:	4694      	mov	ip, r2
     66a:	4463      	add	r3, ip
     66c:	b29b      	uxth	r3, r3
     66e:	9301      	str	r3, [sp, #4]
     670:	4643      	mov	r3, r8
     672:	46b8      	mov	r8, r7
     674:	001f      	movs	r7, r3
     676:	e7dc      	b.n	632 <eink_ed013tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
     678:	b00b      	add	sp, #44	; 0x2c
     67a:	bc3c      	pop	{r2, r3, r4, r5}
     67c:	4690      	mov	r8, r2
     67e:	4699      	mov	r9, r3
     680:	46a2      	mov	sl, r4
     682:	46ab      	mov	fp, r5
     684:	bdf0      	pop	{r4, r5, r6, r7, pc}
     686:	46c0      	nop			; (mov r8, r8)
     688:	00000585 	.word	0x00000585

0000068c <eink_ed029tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed029tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	46de      	mov	lr, fp
     690:	4657      	mov	r7, sl
     692:	464e      	mov	r6, r9
     694:	4645      	mov	r5, r8
     696:	b5e0      	push	{r5, r6, r7, lr}
     698:	b089      	sub	sp, #36	; 0x24
     69a:	0019      	movs	r1, r3
     69c:	9305      	str	r3, [sp, #20]
     69e:	ab12      	add	r3, sp, #72	; 0x48
     6a0:	881c      	ldrh	r4, [r3, #0]
     6a2:	9400      	str	r4, [sp, #0]
     6a4:	ab13      	add	r3, sp, #76	; 0x4c
     6a6:	881d      	ldrh	r5, [r3, #0]
     6a8:	9506      	str	r5, [sp, #24]
     6aa:	ab14      	add	r3, sp, #80	; 0x50
     6ac:	781d      	ldrb	r5, [r3, #0]
     6ae:	46a8      	mov	r8, r5
     6b0:	ab15      	add	r3, sp, #84	; 0x54
     6b2:	781d      	ldrb	r5, [r3, #0]
     6b4:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     6b6:	45a8      	cmp	r8, r5
     6b8:	d04e      	beq.n	758 <eink_ed029tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     6ba:	2a00      	cmp	r2, #0
     6bc:	d04c      	beq.n	758 <eink_ed029tc1_graphics_load_mono_image+0xcc>
     6be:	000b      	movs	r3, r1
     6c0:	9103      	str	r1, [sp, #12]
     6c2:	3b01      	subs	r3, #1
     6c4:	b29b      	uxth	r3, r3
     6c6:	3902      	subs	r1, #2
     6c8:	1ac9      	subs	r1, r1, r3
     6ca:	1841      	adds	r1, r0, r1
     6cc:	9102      	str	r1, [sp, #8]
     6ce:	46a4      	mov	ip, r4
     6d0:	4462      	add	r2, ip
     6d2:	b292      	uxth	r2, r2
     6d4:	9204      	str	r2, [sp, #16]
     6d6:	3301      	adds	r3, #1
     6d8:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6da:	4b23      	ldr	r3, [pc, #140]	; (768 <eink_ed029tc1_graphics_load_mono_image+0xdc>)
     6dc:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6de:	469a      	mov	sl, r3
     6e0:	e02f      	b.n	742 <eink_ed029tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6e2:	464b      	mov	r3, r9
     6e4:	2b08      	cmp	r3, #8
     6e6:	d003      	beq.n	6f0 <eink_ed029tc1_graphics_load_mono_image+0x64>
     6e8:	464a      	mov	r2, r9
     6ea:	0021      	movs	r1, r4
     6ec:	9800      	ldr	r0, [sp, #0]
     6ee:	47d8      	blx	fp
     6f0:	3501      	adds	r5, #1
     6f2:	3401      	adds	r4, #1
     6f4:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     6f6:	2d08      	cmp	r5, #8
     6f8:	d00b      	beq.n	712 <eink_ed029tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     6fa:	7833      	ldrb	r3, [r6, #0]
     6fc:	412b      	asrs	r3, r5
                    if(bit_value) {
     6fe:	421f      	tst	r7, r3
     700:	d0ef      	beq.n	6e2 <eink_ed029tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     702:	4643      	mov	r3, r8
     704:	2b08      	cmp	r3, #8
     706:	d0f3      	beq.n	6f0 <eink_ed029tc1_graphics_load_mono_image+0x64>
     708:	4642      	mov	r2, r8
     70a:	0021      	movs	r1, r4
     70c:	9800      	ldr	r0, [sp, #0]
     70e:	47d0      	blx	sl
     710:	e7ee      	b.n	6f0 <eink_ed029tc1_graphics_load_mono_image+0x64>
     712:	9b01      	ldr	r3, [sp, #4]
     714:	3308      	adds	r3, #8
     716:	b29b      	uxth	r3, r3
     718:	9301      	str	r3, [sp, #4]
     71a:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     71c:	9b02      	ldr	r3, [sp, #8]
     71e:	429e      	cmp	r6, r3
     720:	d003      	beq.n	72a <eink_ed029tc1_graphics_load_mono_image+0x9e>
{
     722:	9c01      	ldr	r4, [sp, #4]
     724:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     726:	2701      	movs	r7, #1
     728:	e7e7      	b.n	6fa <eink_ed029tc1_graphics_load_mono_image+0x6e>
     72a:	9b02      	ldr	r3, [sp, #8]
     72c:	9a03      	ldr	r2, [sp, #12]
     72e:	4694      	mov	ip, r2
     730:	4463      	add	r3, ip
     732:	9302      	str	r3, [sp, #8]
     734:	9b00      	ldr	r3, [sp, #0]
     736:	3301      	adds	r3, #1
     738:	b29b      	uxth	r3, r3
     73a:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     73c:	9a04      	ldr	r2, [sp, #16]
     73e:	4293      	cmp	r3, r2
     740:	d00a      	beq.n	758 <eink_ed029tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     742:	9b05      	ldr	r3, [sp, #20]
     744:	2b00      	cmp	r3, #0
     746:	d0f0      	beq.n	72a <eink_ed029tc1_graphics_load_mono_image+0x9e>
     748:	9b07      	ldr	r3, [sp, #28]
     74a:	9a02      	ldr	r2, [sp, #8]
     74c:	4694      	mov	ip, r2
     74e:	4463      	add	r3, ip
     750:	001e      	movs	r6, r3
     752:	9b06      	ldr	r3, [sp, #24]
     754:	9301      	str	r3, [sp, #4]
     756:	e7e4      	b.n	722 <eink_ed029tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     758:	b009      	add	sp, #36	; 0x24
     75a:	bc3c      	pop	{r2, r3, r4, r5}
     75c:	4690      	mov	r8, r2
     75e:	4699      	mov	r9, r3
     760:	46a2      	mov	sl, r4
     762:	46ab      	mov	fp, r5
     764:	bdf0      	pop	{r4, r5, r6, r7, pc}
     766:	46c0      	nop			; (mov r8, r8)
     768:	00000585 	.word	0x00000585

0000076c <eink_el026tr1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_el026tr1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     76c:	b5f0      	push	{r4, r5, r6, r7, lr}
     76e:	b085      	sub	sp, #20
     770:	ac0a      	add	r4, sp, #40	; 0x28
     772:	8824      	ldrh	r4, [r4, #0]
     774:	ad0b      	add	r5, sp, #44	; 0x2c
     776:	882d      	ldrh	r5, [r5, #0]
     778:	ae0c      	add	r6, sp, #48	; 0x30
     77a:	7836      	ldrb	r6, [r6, #0]
     77c:	af0d      	add	r7, sp, #52	; 0x34
     77e:	783f      	ldrb	r7, [r7, #0]
    /** Calls the equivalent function but for the ED029TC1 - avoid code repetition */
    eink_ed029tc1_graphics_load_mono_image(img_array, array_size, image_width_px, image_height_bytes, x_place, y_place, foreground_colour, background_colour);
     780:	9703      	str	r7, [sp, #12]
     782:	9602      	str	r6, [sp, #8]
     784:	9501      	str	r5, [sp, #4]
     786:	9400      	str	r4, [sp, #0]
     788:	4c01      	ldr	r4, [pc, #4]	; (790 <eink_el026tr1_graphics_load_mono_image+0x24>)
     78a:	47a0      	blx	r4
     78c:	b005      	add	sp, #20
     78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     790:	0000068d 	.word	0x0000068d

00000794 <eink_hink_e0154a05_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_hink_e0154a05_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     794:	b5f0      	push	{r4, r5, r6, r7, lr}
     796:	46de      	mov	lr, fp
     798:	4657      	mov	r7, sl
     79a:	464e      	mov	r6, r9
     79c:	4645      	mov	r5, r8
     79e:	b5e0      	push	{r5, r6, r7, lr}
     7a0:	b089      	sub	sp, #36	; 0x24
     7a2:	0019      	movs	r1, r3
     7a4:	9305      	str	r3, [sp, #20]
     7a6:	ab12      	add	r3, sp, #72	; 0x48
     7a8:	881c      	ldrh	r4, [r3, #0]
     7aa:	9400      	str	r4, [sp, #0]
     7ac:	ab13      	add	r3, sp, #76	; 0x4c
     7ae:	881d      	ldrh	r5, [r3, #0]
     7b0:	9506      	str	r5, [sp, #24]
     7b2:	ab14      	add	r3, sp, #80	; 0x50
     7b4:	781d      	ldrb	r5, [r3, #0]
     7b6:	46a8      	mov	r8, r5
     7b8:	ab15      	add	r3, sp, #84	; 0x54
     7ba:	781d      	ldrb	r5, [r3, #0]
     7bc:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     7be:	45a8      	cmp	r8, r5
     7c0:	d04e      	beq.n	860 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     7c2:	2a00      	cmp	r2, #0
     7c4:	d04c      	beq.n	860 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
     7c6:	000b      	movs	r3, r1
     7c8:	9103      	str	r1, [sp, #12]
     7ca:	3b01      	subs	r3, #1
     7cc:	b29b      	uxth	r3, r3
     7ce:	3902      	subs	r1, #2
     7d0:	1ac9      	subs	r1, r1, r3
     7d2:	1841      	adds	r1, r0, r1
     7d4:	9102      	str	r1, [sp, #8]
     7d6:	46a4      	mov	ip, r4
     7d8:	4462      	add	r2, ip
     7da:	b292      	uxth	r2, r2
     7dc:	9204      	str	r2, [sp, #16]
     7de:	3301      	adds	r3, #1
     7e0:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                        } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7e2:	4b23      	ldr	r3, [pc, #140]	; (870 <eink_hink_e0154a05_graphics_load_mono_image+0xdc>)
     7e4:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7e6:	469a      	mov	sl, r3
     7e8:	e02f      	b.n	84a <eink_hink_e0154a05_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7ea:	464b      	mov	r3, r9
     7ec:	2b08      	cmp	r3, #8
     7ee:	d003      	beq.n	7f8 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     7f0:	464a      	mov	r2, r9
     7f2:	0021      	movs	r1, r4
     7f4:	9800      	ldr	r0, [sp, #0]
     7f6:	47d8      	blx	fp
     7f8:	3501      	adds	r5, #1
     7fa:	3401      	adds	r4, #1
     7fc:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     7fe:	2d08      	cmp	r5, #8
     800:	d00b      	beq.n	81a <eink_hink_e0154a05_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     802:	7833      	ldrb	r3, [r6, #0]
     804:	412b      	asrs	r3, r5
                    if(bit_value) {
     806:	421f      	tst	r7, r3
     808:	d0ef      	beq.n	7ea <eink_hink_e0154a05_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     80a:	4643      	mov	r3, r8
     80c:	2b08      	cmp	r3, #8
     80e:	d0f3      	beq.n	7f8 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     810:	4642      	mov	r2, r8
     812:	0021      	movs	r1, r4
     814:	9800      	ldr	r0, [sp, #0]
     816:	47d0      	blx	sl
     818:	e7ee      	b.n	7f8 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     81a:	9b01      	ldr	r3, [sp, #4]
     81c:	3308      	adds	r3, #8
     81e:	b29b      	uxth	r3, r3
     820:	9301      	str	r3, [sp, #4]
     822:	3e01      	subs	r6, #1
            for (j = (image_height_bytes); j > 0; j--) {
     824:	9b02      	ldr	r3, [sp, #8]
     826:	429e      	cmp	r6, r3
     828:	d003      	beq.n	832 <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
{
     82a:	9c01      	ldr	r4, [sp, #4]
     82c:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     82e:	2701      	movs	r7, #1
     830:	e7e7      	b.n	802 <eink_hink_e0154a05_graphics_load_mono_image+0x6e>
     832:	9b02      	ldr	r3, [sp, #8]
     834:	9a03      	ldr	r2, [sp, #12]
     836:	4694      	mov	ip, r2
     838:	4463      	add	r3, ip
     83a:	9302      	str	r3, [sp, #8]
     83c:	9b00      	ldr	r3, [sp, #0]
     83e:	3301      	adds	r3, #1
     840:	b29b      	uxth	r3, r3
     842:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     844:	9a04      	ldr	r2, [sp, #16]
     846:	4293      	cmp	r3, r2
     848:	d00a      	beq.n	860 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
            for (j = (image_height_bytes); j > 0; j--) {
     84a:	9b05      	ldr	r3, [sp, #20]
     84c:	2b00      	cmp	r3, #0
     84e:	d0f0      	beq.n	832 <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
     850:	9b07      	ldr	r3, [sp, #28]
     852:	9a02      	ldr	r2, [sp, #8]
     854:	4694      	mov	ip, r2
     856:	4463      	add	r3, ip
     858:	001e      	movs	r6, r3
     85a:	9b06      	ldr	r3, [sp, #24]
     85c:	9301      	str	r3, [sp, #4]
     85e:	e7e4      	b.n	82a <eink_hink_e0154a05_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     860:	b009      	add	sp, #36	; 0x24
     862:	bc3c      	pop	{r2, r3, r4, r5}
     864:	4690      	mov	r8, r2
     866:	4699      	mov	r9, r3
     868:	46a2      	mov	sl, r4
     86a:	46ab      	mov	fp, r5
     86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	00000585 	.word	0x00000585

00000874 <eink_ac057tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac057tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     874:	b5f0      	push	{r4, r5, r6, r7, lr}
     876:	46de      	mov	lr, fp
     878:	4657      	mov	r7, sl
     87a:	464e      	mov	r6, r9
     87c:	4645      	mov	r5, r8
     87e:	b5e0      	push	{r5, r6, r7, lr}
     880:	b089      	sub	sp, #36	; 0x24
     882:	a912      	add	r1, sp, #72	; 0x48
     884:	8809      	ldrh	r1, [r1, #0]
     886:	9106      	str	r1, [sp, #24]
     888:	a913      	add	r1, sp, #76	; 0x4c
     88a:	8809      	ldrh	r1, [r1, #0]
     88c:	ac14      	add	r4, sp, #80	; 0x50
     88e:	7827      	ldrb	r7, [r4, #0]
     890:	ac15      	add	r4, sp, #84	; 0x54
     892:	7824      	ldrb	r4, [r4, #0]
     894:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     896:	42a7      	cmp	r7, r4
     898:	d04e      	beq.n	938 <eink_ac057tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     89a:	9205      	str	r2, [sp, #20]
     89c:	2a00      	cmp	r2, #0
     89e:	d04b      	beq.n	938 <eink_ac057tc1_graphics_load_mono_image+0xc4>
     8a0:	9304      	str	r3, [sp, #16]
     8a2:	9003      	str	r0, [sp, #12]
     8a4:	4a28      	ldr	r2, [pc, #160]	; (948 <eink_ac057tc1_graphics_load_mono_image+0xd4>)
     8a6:	4694      	mov	ip, r2
     8a8:	4463      	add	r3, ip
     8aa:	00db      	lsls	r3, r3, #3
     8ac:	18cb      	adds	r3, r1, r3
     8ae:	2200      	movs	r2, #0
     8b0:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     8b2:	b29b      	uxth	r3, r3
     8b4:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8b6:	4b25      	ldr	r3, [pc, #148]	; (94c <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     8b8:	469b      	mov	fp, r3
     8ba:	e02c      	b.n	916 <eink_ac057tc1_graphics_load_mono_image+0xa2>
     8bc:	464b      	mov	r3, r9
     8be:	2b08      	cmp	r3, #8
     8c0:	d003      	beq.n	8ca <eink_ac057tc1_graphics_load_mono_image+0x56>
     8c2:	464a      	mov	r2, r9
     8c4:	0021      	movs	r1, r4
     8c6:	9801      	ldr	r0, [sp, #4]
     8c8:	47d8      	blx	fp
     8ca:	3501      	adds	r5, #1
     8cc:	3401      	adds	r4, #1
     8ce:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     8d0:	2d08      	cmp	r5, #8
     8d2:	d00b      	beq.n	8ec <eink_ac057tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     8d4:	7833      	ldrb	r3, [r6, #0]
     8d6:	412b      	asrs	r3, r5
                    if(bit_value) {
     8d8:	07db      	lsls	r3, r3, #31
     8da:	d5ef      	bpl.n	8bc <eink_ac057tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8dc:	2f08      	cmp	r7, #8
     8de:	d0f4      	beq.n	8ca <eink_ac057tc1_graphics_load_mono_image+0x56>
     8e0:	003a      	movs	r2, r7
     8e2:	0021      	movs	r1, r4
     8e4:	9801      	ldr	r0, [sp, #4]
     8e6:	4b19      	ldr	r3, [pc, #100]	; (94c <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     8e8:	4798      	blx	r3
     8ea:	e7ee      	b.n	8ca <eink_ac057tc1_graphics_load_mono_image+0x56>
     8ec:	4643      	mov	r3, r8
     8ee:	3b08      	subs	r3, #8
     8f0:	b29b      	uxth	r3, r3
     8f2:	4698      	mov	r8, r3
     8f4:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     8f6:	4556      	cmp	r6, sl
     8f8:	d002      	beq.n	900 <eink_ac057tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     8fa:	4644      	mov	r4, r8
     8fc:	2500      	movs	r5, #0
     8fe:	e7e9      	b.n	8d4 <eink_ac057tc1_graphics_load_mono_image+0x60>
     900:	9b02      	ldr	r3, [sp, #8]
     902:	3301      	adds	r3, #1
     904:	9302      	str	r3, [sp, #8]
     906:	9a03      	ldr	r2, [sp, #12]
     908:	9904      	ldr	r1, [sp, #16]
     90a:	468c      	mov	ip, r1
     90c:	4462      	add	r2, ip
     90e:	9203      	str	r2, [sp, #12]
     910:	9a05      	ldr	r2, [sp, #20]
     912:	4293      	cmp	r3, r2
     914:	d210      	bcs.n	938 <eink_ac057tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     916:	9b04      	ldr	r3, [sp, #16]
     918:	2b00      	cmp	r3, #0
     91a:	d0f1      	beq.n	900 <eink_ac057tc1_graphics_load_mono_image+0x8c>
     91c:	9e03      	ldr	r6, [sp, #12]
     91e:	0032      	movs	r2, r6
     920:	469c      	mov	ip, r3
     922:	4462      	add	r2, ip
     924:	4692      	mov	sl, r2
     926:	9b07      	ldr	r3, [sp, #28]
     928:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     92a:	9b06      	ldr	r3, [sp, #24]
     92c:	9a02      	ldr	r2, [sp, #8]
     92e:	4694      	mov	ip, r2
     930:	4463      	add	r3, ip
     932:	b29b      	uxth	r3, r3
     934:	9301      	str	r3, [sp, #4]
     936:	e7e0      	b.n	8fa <eink_ac057tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     938:	b009      	add	sp, #36	; 0x24
     93a:	bc3c      	pop	{r2, r3, r4, r5}
     93c:	4690      	mov	r8, r2
     93e:	4699      	mov	r9, r3
     940:	46a2      	mov	sl, r4
     942:	46ab      	mov	fp, r5
     944:	bdf0      	pop	{r4, r5, r6, r7, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	00001fff 	.word	0x00001fff
     94c:	00000585 	.word	0x00000585

00000950 <eink_ed057tc2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed057tc2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     950:	b5f0      	push	{r4, r5, r6, r7, lr}
     952:	46de      	mov	lr, fp
     954:	4657      	mov	r7, sl
     956:	464e      	mov	r6, r9
     958:	4645      	mov	r5, r8
     95a:	b5e0      	push	{r5, r6, r7, lr}
     95c:	b089      	sub	sp, #36	; 0x24
     95e:	a912      	add	r1, sp, #72	; 0x48
     960:	8809      	ldrh	r1, [r1, #0]
     962:	9106      	str	r1, [sp, #24]
     964:	a913      	add	r1, sp, #76	; 0x4c
     966:	8809      	ldrh	r1, [r1, #0]
     968:	ac14      	add	r4, sp, #80	; 0x50
     96a:	7827      	ldrb	r7, [r4, #0]
     96c:	ac15      	add	r4, sp, #84	; 0x54
     96e:	7824      	ldrb	r4, [r4, #0]
     970:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     972:	42a7      	cmp	r7, r4
     974:	d04e      	beq.n	a14 <eink_ed057tc2_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     976:	9205      	str	r2, [sp, #20]
     978:	2a00      	cmp	r2, #0
     97a:	d04b      	beq.n	a14 <eink_ed057tc2_graphics_load_mono_image+0xc4>
     97c:	9304      	str	r3, [sp, #16]
     97e:	9003      	str	r0, [sp, #12]
     980:	4a28      	ldr	r2, [pc, #160]	; (a24 <eink_ed057tc2_graphics_load_mono_image+0xd4>)
     982:	4694      	mov	ip, r2
     984:	4463      	add	r3, ip
     986:	00db      	lsls	r3, r3, #3
     988:	18cb      	adds	r3, r1, r3
     98a:	2200      	movs	r2, #0
     98c:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     98e:	b29b      	uxth	r3, r3
     990:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     992:	4b25      	ldr	r3, [pc, #148]	; (a28 <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     994:	469b      	mov	fp, r3
     996:	e02c      	b.n	9f2 <eink_ed057tc2_graphics_load_mono_image+0xa2>
     998:	464b      	mov	r3, r9
     99a:	2b08      	cmp	r3, #8
     99c:	d003      	beq.n	9a6 <eink_ed057tc2_graphics_load_mono_image+0x56>
     99e:	464a      	mov	r2, r9
     9a0:	0021      	movs	r1, r4
     9a2:	9801      	ldr	r0, [sp, #4]
     9a4:	47d8      	blx	fp
     9a6:	3501      	adds	r5, #1
     9a8:	3401      	adds	r4, #1
     9aa:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     9ac:	2d08      	cmp	r5, #8
     9ae:	d00b      	beq.n	9c8 <eink_ed057tc2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     9b0:	7833      	ldrb	r3, [r6, #0]
     9b2:	412b      	asrs	r3, r5
                    if(bit_value) {
     9b4:	07db      	lsls	r3, r3, #31
     9b6:	d5ef      	bpl.n	998 <eink_ed057tc2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     9b8:	2f08      	cmp	r7, #8
     9ba:	d0f4      	beq.n	9a6 <eink_ed057tc2_graphics_load_mono_image+0x56>
     9bc:	003a      	movs	r2, r7
     9be:	0021      	movs	r1, r4
     9c0:	9801      	ldr	r0, [sp, #4]
     9c2:	4b19      	ldr	r3, [pc, #100]	; (a28 <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     9c4:	4798      	blx	r3
     9c6:	e7ee      	b.n	9a6 <eink_ed057tc2_graphics_load_mono_image+0x56>
     9c8:	4643      	mov	r3, r8
     9ca:	3b08      	subs	r3, #8
     9cc:	b29b      	uxth	r3, r3
     9ce:	4698      	mov	r8, r3
     9d0:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     9d2:	4556      	cmp	r6, sl
     9d4:	d002      	beq.n	9dc <eink_ed057tc2_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     9d6:	4644      	mov	r4, r8
     9d8:	2500      	movs	r5, #0
     9da:	e7e9      	b.n	9b0 <eink_ed057tc2_graphics_load_mono_image+0x60>
     9dc:	9b02      	ldr	r3, [sp, #8]
     9de:	3301      	adds	r3, #1
     9e0:	9302      	str	r3, [sp, #8]
     9e2:	9a03      	ldr	r2, [sp, #12]
     9e4:	9904      	ldr	r1, [sp, #16]
     9e6:	468c      	mov	ip, r1
     9e8:	4462      	add	r2, ip
     9ea:	9203      	str	r2, [sp, #12]
     9ec:	9a05      	ldr	r2, [sp, #20]
     9ee:	4293      	cmp	r3, r2
     9f0:	d210      	bcs.n	a14 <eink_ed057tc2_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     9f2:	9b04      	ldr	r3, [sp, #16]
     9f4:	2b00      	cmp	r3, #0
     9f6:	d0f1      	beq.n	9dc <eink_ed057tc2_graphics_load_mono_image+0x8c>
     9f8:	9e03      	ldr	r6, [sp, #12]
     9fa:	0032      	movs	r2, r6
     9fc:	469c      	mov	ip, r3
     9fe:	4462      	add	r2, ip
     a00:	4692      	mov	sl, r2
     a02:	9b07      	ldr	r3, [sp, #28]
     a04:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a06:	9b06      	ldr	r3, [sp, #24]
     a08:	9a02      	ldr	r2, [sp, #8]
     a0a:	4694      	mov	ip, r2
     a0c:	4463      	add	r3, ip
     a0e:	b29b      	uxth	r3, r3
     a10:	9301      	str	r3, [sp, #4]
     a12:	e7e0      	b.n	9d6 <eink_ed057tc2_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     a14:	b009      	add	sp, #36	; 0x24
     a16:	bc3c      	pop	{r2, r3, r4, r5}
     a18:	4690      	mov	r8, r2
     a1a:	4699      	mov	r9, r3
     a1c:	46a2      	mov	sl, r4
     a1e:	46ab      	mov	fp, r5
     a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	00001fff 	.word	0x00001fff
     a28:	00000585 	.word	0x00000585

00000a2c <eink_ed028tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed028tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2e:	46de      	mov	lr, fp
     a30:	4657      	mov	r7, sl
     a32:	464e      	mov	r6, r9
     a34:	4645      	mov	r5, r8
     a36:	b5e0      	push	{r5, r6, r7, lr}
     a38:	b08b      	sub	sp, #44	; 0x2c
     a3a:	9003      	str	r0, [sp, #12]
     a3c:	9205      	str	r2, [sp, #20]
     a3e:	0018      	movs	r0, r3
     a40:	9307      	str	r3, [sp, #28]
     a42:	ab14      	add	r3, sp, #80	; 0x50
     a44:	8819      	ldrh	r1, [r3, #0]
     a46:	9108      	str	r1, [sp, #32]
     a48:	ab15      	add	r3, sp, #84	; 0x54
     a4a:	8819      	ldrh	r1, [r3, #0]
     a4c:	9109      	str	r1, [sp, #36]	; 0x24
     a4e:	ab16      	add	r3, sp, #88	; 0x58
     a50:	781f      	ldrb	r7, [r3, #0]
     a52:	ab17      	add	r3, sp, #92	; 0x5c
     a54:	7819      	ldrb	r1, [r3, #0]
     a56:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     a58:	428f      	cmp	r7, r1
     a5a:	d051      	beq.n	b00 <eink_ed028tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     a5c:	2a00      	cmp	r2, #0
     a5e:	d04f      	beq.n	b00 <eink_ed028tc1_graphics_load_mono_image+0xd4>
     a60:	2200      	movs	r2, #0
     a62:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     a64:	0003      	movs	r3, r0
     a66:	3b01      	subs	r3, #1
     a68:	b29b      	uxth	r3, r3
     a6a:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a6c:	4b28      	ldr	r3, [pc, #160]	; (b10 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     a6e:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     a70:	46b8      	mov	r8, r7
     a72:	e033      	b.n	adc <eink_ed028tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a74:	464b      	mov	r3, r9
     a76:	2b08      	cmp	r3, #8
     a78:	d003      	beq.n	a82 <eink_ed028tc1_graphics_load_mono_image+0x56>
     a7a:	464a      	mov	r2, r9
     a7c:	0021      	movs	r1, r4
     a7e:	9801      	ldr	r0, [sp, #4]
     a80:	47d8      	blx	fp
     a82:	3501      	adds	r5, #1
     a84:	3401      	adds	r4, #1
     a86:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     a88:	2d08      	cmp	r5, #8
     a8a:	d00b      	beq.n	aa4 <eink_ed028tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     a8c:	7833      	ldrb	r3, [r6, #0]
     a8e:	412b      	asrs	r3, r5
                    if(bit_value) {
     a90:	07db      	lsls	r3, r3, #31
     a92:	d5ef      	bpl.n	a74 <eink_ed028tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     a94:	2f08      	cmp	r7, #8
     a96:	d0f4      	beq.n	a82 <eink_ed028tc1_graphics_load_mono_image+0x56>
     a98:	003a      	movs	r2, r7
     a9a:	0021      	movs	r1, r4
     a9c:	9801      	ldr	r0, [sp, #4]
     a9e:	4b1c      	ldr	r3, [pc, #112]	; (b10 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     aa0:	4798      	blx	r3
     aa2:	e7ee      	b.n	a82 <eink_ed028tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     aa4:	4643      	mov	r3, r8
     aa6:	3b01      	subs	r3, #1
     aa8:	b29b      	uxth	r3, r3
     aaa:	4698      	mov	r8, r3
     aac:	4653      	mov	r3, sl
     aae:	3308      	adds	r3, #8
     ab0:	b29b      	uxth	r3, r3
     ab2:	469a      	mov	sl, r3
     ab4:	4643      	mov	r3, r8
     ab6:	2b00      	cmp	r3, #0
     ab8:	d008      	beq.n	acc <eink_ed028tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     aba:	9b02      	ldr	r3, [sp, #8]
     abc:	4443      	add	r3, r8
     abe:	001e      	movs	r6, r3
     ac0:	9b03      	ldr	r3, [sp, #12]
     ac2:	469c      	mov	ip, r3
     ac4:	4466      	add	r6, ip
     ac6:	4654      	mov	r4, sl
     ac8:	2500      	movs	r5, #0
     aca:	e7df      	b.n	a8c <eink_ed028tc1_graphics_load_mono_image+0x60>
     acc:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     ace:	9b04      	ldr	r3, [sp, #16]
     ad0:	3301      	adds	r3, #1
     ad2:	b29b      	uxth	r3, r3
     ad4:	9304      	str	r3, [sp, #16]
     ad6:	9a05      	ldr	r2, [sp, #20]
     ad8:	429a      	cmp	r2, r3
     ada:	d911      	bls.n	b00 <eink_ed028tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     adc:	9b06      	ldr	r3, [sp, #24]
     ade:	1e1f      	subs	r7, r3, #0
     ae0:	d0f5      	beq.n	ace <eink_ed028tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     ae2:	9b07      	ldr	r3, [sp, #28]
     ae4:	9a04      	ldr	r2, [sp, #16]
     ae6:	4353      	muls	r3, r2
     ae8:	9302      	str	r3, [sp, #8]
     aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
     aec:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     aee:	9b08      	ldr	r3, [sp, #32]
     af0:	4694      	mov	ip, r2
     af2:	4463      	add	r3, ip
     af4:	b29b      	uxth	r3, r3
     af6:	9301      	str	r3, [sp, #4]
     af8:	4643      	mov	r3, r8
     afa:	46b8      	mov	r8, r7
     afc:	001f      	movs	r7, r3
     afe:	e7dc      	b.n	aba <eink_ed028tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     b00:	b00b      	add	sp, #44	; 0x2c
     b02:	bc3c      	pop	{r2, r3, r4, r5}
     b04:	4690      	mov	r8, r2
     b06:	4699      	mov	r9, r3
     b08:	46a2      	mov	sl, r4
     b0a:	46ab      	mov	fp, r5
     b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	00000585 	.word	0x00000585

00000b14 <eink_ed037tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed037tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     b14:	b5f0      	push	{r4, r5, r6, r7, lr}
     b16:	46de      	mov	lr, fp
     b18:	4657      	mov	r7, sl
     b1a:	464e      	mov	r6, r9
     b1c:	4645      	mov	r5, r8
     b1e:	b5e0      	push	{r5, r6, r7, lr}
     b20:	b089      	sub	sp, #36	; 0x24
     b22:	0019      	movs	r1, r3
     b24:	9305      	str	r3, [sp, #20]
     b26:	ab12      	add	r3, sp, #72	; 0x48
     b28:	881c      	ldrh	r4, [r3, #0]
     b2a:	9400      	str	r4, [sp, #0]
     b2c:	ab13      	add	r3, sp, #76	; 0x4c
     b2e:	881d      	ldrh	r5, [r3, #0]
     b30:	9506      	str	r5, [sp, #24]
     b32:	ab14      	add	r3, sp, #80	; 0x50
     b34:	781d      	ldrb	r5, [r3, #0]
     b36:	46a8      	mov	r8, r5
     b38:	ab15      	add	r3, sp, #84	; 0x54
     b3a:	781d      	ldrb	r5, [r3, #0]
     b3c:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     b3e:	45a8      	cmp	r8, r5
     b40:	d04e      	beq.n	be0 <eink_ed037tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     b42:	2a00      	cmp	r2, #0
     b44:	d04c      	beq.n	be0 <eink_ed037tc1_graphics_load_mono_image+0xcc>
     b46:	000b      	movs	r3, r1
     b48:	9103      	str	r1, [sp, #12]
     b4a:	3b01      	subs	r3, #1
     b4c:	b29b      	uxth	r3, r3
     b4e:	3902      	subs	r1, #2
     b50:	1ac9      	subs	r1, r1, r3
     b52:	1841      	adds	r1, r0, r1
     b54:	9102      	str	r1, [sp, #8]
     b56:	46a4      	mov	ip, r4
     b58:	4462      	add	r2, ip
     b5a:	b292      	uxth	r2, r2
     b5c:	9204      	str	r2, [sp, #16]
     b5e:	3301      	adds	r3, #1
     b60:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     b62:	4b23      	ldr	r3, [pc, #140]	; (bf0 <eink_ed037tc1_graphics_load_mono_image+0xdc>)
     b64:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     b66:	469a      	mov	sl, r3
     b68:	e02f      	b.n	bca <eink_ed037tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     b6a:	464b      	mov	r3, r9
     b6c:	2b08      	cmp	r3, #8
     b6e:	d003      	beq.n	b78 <eink_ed037tc1_graphics_load_mono_image+0x64>
     b70:	464a      	mov	r2, r9
     b72:	0021      	movs	r1, r4
     b74:	9800      	ldr	r0, [sp, #0]
     b76:	47d8      	blx	fp
     b78:	3501      	adds	r5, #1
     b7a:	3401      	adds	r4, #1
     b7c:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     b7e:	2d08      	cmp	r5, #8
     b80:	d00b      	beq.n	b9a <eink_ed037tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     b82:	7833      	ldrb	r3, [r6, #0]
     b84:	412b      	asrs	r3, r5
                    if(bit_value) {
     b86:	421f      	tst	r7, r3
     b88:	d0ef      	beq.n	b6a <eink_ed037tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     b8a:	4643      	mov	r3, r8
     b8c:	2b08      	cmp	r3, #8
     b8e:	d0f3      	beq.n	b78 <eink_ed037tc1_graphics_load_mono_image+0x64>
     b90:	4642      	mov	r2, r8
     b92:	0021      	movs	r1, r4
     b94:	9800      	ldr	r0, [sp, #0]
     b96:	47d0      	blx	sl
     b98:	e7ee      	b.n	b78 <eink_ed037tc1_graphics_load_mono_image+0x64>
     b9a:	9b01      	ldr	r3, [sp, #4]
     b9c:	3308      	adds	r3, #8
     b9e:	b29b      	uxth	r3, r3
     ba0:	9301      	str	r3, [sp, #4]
     ba2:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     ba4:	9b02      	ldr	r3, [sp, #8]
     ba6:	429e      	cmp	r6, r3
     ba8:	d003      	beq.n	bb2 <eink_ed037tc1_graphics_load_mono_image+0x9e>
{
     baa:	9c01      	ldr	r4, [sp, #4]
     bac:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     bae:	2701      	movs	r7, #1
     bb0:	e7e7      	b.n	b82 <eink_ed037tc1_graphics_load_mono_image+0x6e>
     bb2:	9b02      	ldr	r3, [sp, #8]
     bb4:	9a03      	ldr	r2, [sp, #12]
     bb6:	4694      	mov	ip, r2
     bb8:	4463      	add	r3, ip
     bba:	9302      	str	r3, [sp, #8]
     bbc:	9b00      	ldr	r3, [sp, #0]
     bbe:	3301      	adds	r3, #1
     bc0:	b29b      	uxth	r3, r3
     bc2:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     bc4:	9a04      	ldr	r2, [sp, #16]
     bc6:	4293      	cmp	r3, r2
     bc8:	d00a      	beq.n	be0 <eink_ed037tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     bca:	9b05      	ldr	r3, [sp, #20]
     bcc:	2b00      	cmp	r3, #0
     bce:	d0f0      	beq.n	bb2 <eink_ed037tc1_graphics_load_mono_image+0x9e>
     bd0:	9b07      	ldr	r3, [sp, #28]
     bd2:	9a02      	ldr	r2, [sp, #8]
     bd4:	4694      	mov	ip, r2
     bd6:	4463      	add	r3, ip
     bd8:	001e      	movs	r6, r3
     bda:	9b06      	ldr	r3, [sp, #24]
     bdc:	9301      	str	r3, [sp, #4]
     bde:	e7e4      	b.n	baa <eink_ed037tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     be0:	b009      	add	sp, #36	; 0x24
     be2:	bc3c      	pop	{r2, r3, r4, r5}
     be4:	4690      	mov	r8, r2
     be6:	4699      	mov	r9, r3
     be8:	46a2      	mov	sl, r4
     bea:	46ab      	mov	fp, r5
     bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	00000585 	.word	0x00000585

00000bf4 <it8951_wait_for_hrdy>:
static inline void it8951_wait_for_hrdy(void)
{
#ifdef EINK_HOST_RDY
    while(!gpio_get_pin_level(EINK_HOST_RDY));
#endif
}
     bf4:	4770      	bx	lr
	...

00000bf8 <eink_interface_init>:
 *
 * \note Initializes the display controller hardware interface, regardless
 * of driver IC, interface or display. Takes definitions from conf_eink.h.
 */
static void eink_interface_init(uint8_t f_init)
{
     bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfa:	46c6      	mov	lr, r8
     bfc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bfe:	22c0      	movs	r2, #192	; 0xc0
     c00:	05d2      	lsls	r2, r2, #23
     c02:	2788      	movs	r7, #136	; 0x88
     c04:	2640      	movs	r6, #64	; 0x40
     c06:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c08:	4b2a      	ldr	r3, [pc, #168]	; (cb4 <eink_interface_init+0xbc>)
     c0a:	20a8      	movs	r0, #168	; 0xa8
     c0c:	4d2a      	ldr	r5, [pc, #168]	; (cb8 <eink_interface_init+0xc0>)
     c0e:	501d      	str	r5, [r3, r0]
     c10:	24c0      	movs	r4, #192	; 0xc0
     c12:	0624      	lsls	r4, r4, #24
     c14:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c16:	2101      	movs	r1, #1
     c18:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c1a:	4f28      	ldr	r7, [pc, #160]	; (cbc <eink_interface_init+0xc4>)
     c1c:	501f      	str	r7, [r3, r0]
     c1e:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c20:	2720      	movs	r7, #32
     c22:	46b8      	mov	r8, r7
     c24:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c26:	4f26      	ldr	r7, [pc, #152]	; (cc0 <eink_interface_init+0xc8>)
     c28:	629f      	str	r7, [r3, #40]	; 0x28
     c2a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c2c:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c2e:	629d      	str	r5, [r3, #40]	; 0x28
     c30:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c32:	2510      	movs	r5, #16
     c34:	46ac      	mov	ip, r5
     c36:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c38:	4d22      	ldr	r5, [pc, #136]	; (cc4 <eink_interface_init+0xcc>)
     c3a:	629d      	str	r5, [r3, #40]	; 0x28
     c3c:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c3e:	2580      	movs	r5, #128	; 0x80
     c40:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	4f21      	ldr	r7, [pc, #132]	; (cc8 <eink_interface_init+0xd0>)
     c44:	629f      	str	r7, [r3, #40]	; 0x28
     c46:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c48:	2494      	movs	r4, #148	; 0x94
     c4a:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c4c:	2798      	movs	r7, #152	; 0x98
     c4e:	51d1      	str	r1, [r2, r7]
     c50:	4644      	mov	r4, r8
     c52:	6194      	str	r4, [r2, #24]
     c54:	6196      	str	r6, [r2, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c56:	4664      	mov	r4, ip
     c58:	6154      	str	r4, [r2, #20]
     c5a:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c5c:	3474      	adds	r4, #116	; 0x74
     c5e:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c60:	4e1a      	ldr	r6, [pc, #104]	; (ccc <eink_interface_init+0xd4>)
     c62:	501e      	str	r6, [r3, r0]
     c64:	4e1a      	ldr	r6, [pc, #104]	; (cd0 <eink_interface_init+0xd8>)
     c66:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c68:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     c6a:	301f      	adds	r0, #31
     c6c:	5c1c      	ldrb	r4, [r3, r0]
     c6e:	2604      	movs	r6, #4
     c70:	4334      	orrs	r4, r6
     c72:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c74:	51d5      	str	r5, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c76:	24c6      	movs	r4, #198	; 0xc6
     c78:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c7a:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c7c:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c7e:	3c06      	subs	r4, #6
     c80:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c82:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c84:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	3c7b      	subs	r4, #123	; 0x7b
     c88:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c8c:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c8e:	3401      	adds	r4, #1
     c90:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c92:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c94:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c96:	3c02      	subs	r4, #2
     c98:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c9a:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c9c:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c9e:	3403      	adds	r4, #3
     ca0:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ca2:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ca4:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ca6:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ca8:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     caa:	541a      	strb	r2, [r3, r0]
#endif
    
#ifdef EINK_BUSY
    gpio_set_pin_function(EINK_BUSY, GPIO_PIN_FUNCTION_OFF);
#endif
}
     cac:	bc04      	pop	{r2}
     cae:	4690      	mov	r8, r2
     cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	41004400 	.word	0x41004400
     cb8:	40000040 	.word	0x40000040
     cbc:	40000001 	.word	0x40000001
     cc0:	40000020 	.word	0x40000020
     cc4:	40000010 	.word	0x40000010
     cc8:	40000080 	.word	0x40000080
     ccc:	40020080 	.word	0x40020080
     cd0:	c0020000 	.word	0xc0020000

00000cd4 <eink_ed037tc1_set_pixel>:
{
     cd4:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < ssd1677_global_instance.display_width) && (y_set >= 0) && (y_set < ssd1677_global_instance.display_height) ) {
     cd6:	4b2e      	ldr	r3, [pc, #184]	; (d90 <eink_ed037tc1_set_pixel+0xbc>)
     cd8:	889b      	ldrh	r3, [r3, #4]
     cda:	b29b      	uxth	r3, r3
     cdc:	4283      	cmp	r3, r0
     cde:	d91c      	bls.n	d1a <eink_ed037tc1_set_pixel+0x46>
     ce0:	4b2b      	ldr	r3, [pc, #172]	; (d90 <eink_ed037tc1_set_pixel+0xbc>)
     ce2:	88db      	ldrh	r3, [r3, #6]
     ce4:	b29b      	uxth	r3, r3
     ce6:	428b      	cmp	r3, r1
     ce8:	d917      	bls.n	d1a <eink_ed037tc1_set_pixel+0x46>
        if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
     cea:	4b29      	ldr	r3, [pc, #164]	; (d90 <eink_ed037tc1_set_pixel+0xbc>)
     cec:	781b      	ldrb	r3, [r3, #0]
     cee:	2b01      	cmp	r3, #1
     cf0:	d014      	beq.n	d1c <eink_ed037tc1_set_pixel+0x48>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
     cf2:	4b27      	ldr	r3, [pc, #156]	; (d90 <eink_ed037tc1_set_pixel+0xbc>)
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	2b02      	cmp	r3, #2
     cf8:	d01b      	beq.n	d32 <eink_ed037tc1_set_pixel+0x5e>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
     cfa:	4b25      	ldr	r3, [pc, #148]	; (d90 <eink_ed037tc1_set_pixel+0xbc>)
     cfc:	781b      	ldrb	r3, [r3, #0]
     cfe:	2b03      	cmp	r3, #3
     d00:	d025      	beq.n	d4e <eink_ed037tc1_set_pixel+0x7a>
            x1_set = (x_set - (x_set % 8)) / 8;
     d02:	10c3      	asrs	r3, r0, #3
            byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * y_set);
     d04:	008c      	lsls	r4, r1, #2
     d06:	1861      	adds	r1, r4, r1
     d08:	00cc      	lsls	r4, r1, #3
     d0a:	1a61      	subs	r1, r4, r1
     d0c:	185b      	adds	r3, r3, r1
            bit_set = 7 - (x_set % 8);
     d0e:	2107      	movs	r1, #7
     d10:	4381      	bics	r1, r0
        switch(pixel_colour) {
     d12:	2a00      	cmp	r2, #0
     d14:	d027      	beq.n	d66 <eink_ed037tc1_set_pixel+0x92>
     d16:	2a01      	cmp	r2, #1
     d18:	d030      	beq.n	d7c <eink_ed037tc1_set_pixel+0xa8>
}
     d1a:	bd10      	pop	{r4, pc}
            y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - ((y_set - (y_set % 8)) / 8);
     d1c:	10cc      	asrs	r4, r1, #3
     d1e:	3321      	adds	r3, #33	; 0x21
     d20:	1b1b      	subs	r3, r3, r4
            byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (x_set));
     d22:	0084      	lsls	r4, r0, #2
     d24:	1820      	adds	r0, r4, r0
     d26:	00c4      	lsls	r4, r0, #3
     d28:	1a20      	subs	r0, r4, r0
     d2a:	181b      	adds	r3, r3, r0
            bit_set = y_set % 8;
     d2c:	2007      	movs	r0, #7
     d2e:	4001      	ands	r1, r0
     d30:	e7ef      	b.n	d12 <eink_ed037tc1_set_pixel+0x3e>
            x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((x_set - (x_set % 8)) / 8);
     d32:	10c4      	asrs	r4, r0, #3
     d34:	2318      	movs	r3, #24
     d36:	33ff      	adds	r3, #255	; 0xff
     d38:	1b1b      	subs	r3, r3, r4
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (y_set * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
     d3a:	2423      	movs	r4, #35	; 0x23
     d3c:	4264      	negs	r4, r4
     d3e:	4361      	muls	r1, r4
     d40:	4c14      	ldr	r4, [pc, #80]	; (d94 <eink_ed037tc1_set_pixel+0xc0>)
     d42:	46a4      	mov	ip, r4
     d44:	4461      	add	r1, ip
     d46:	185b      	adds	r3, r3, r1
            bit_set = x_set % 8;
     d48:	2107      	movs	r1, #7
     d4a:	4001      	ands	r1, r0
     d4c:	e7e1      	b.n	d12 <eink_ed037tc1_set_pixel+0x3e>
            y1_set = (y_set - (y_set % 8)) / 8;
     d4e:	10cc      	asrs	r4, r1, #3
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (x_set * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
     d50:	4b10      	ldr	r3, [pc, #64]	; (d94 <eink_ed037tc1_set_pixel+0xc0>)
     d52:	469c      	mov	ip, r3
     d54:	4464      	add	r4, ip
     d56:	2323      	movs	r3, #35	; 0x23
     d58:	425b      	negs	r3, r3
     d5a:	4343      	muls	r3, r0
     d5c:	18e3      	adds	r3, r4, r3
            bit_set = 7 - (y_set % 8);
     d5e:	2007      	movs	r0, #7
     d60:	4388      	bics	r0, r1
     d62:	0001      	movs	r1, r0
     d64:	e7d5      	b.n	d12 <eink_ed037tc1_set_pixel+0x3e>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 0);
     d66:	4a0c      	ldr	r2, [pc, #48]	; (d98 <eink_ed037tc1_set_pixel+0xc4>)
     d68:	6812      	ldr	r2, [r2, #0]
     d6a:	6910      	ldr	r0, [r2, #16]
     d6c:	18c3      	adds	r3, r0, r3
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
     d6e:	2201      	movs	r2, #1
     d70:	408a      	lsls	r2, r1
     d72:	0011      	movs	r1, r2
     d74:	781a      	ldrb	r2, [r3, #0]
     d76:	438a      	bics	r2, r1
     d78:	701a      	strb	r2, [r3, #0]
     d7a:	e7ce      	b.n	d1a <eink_ed037tc1_set_pixel+0x46>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 1);
     d7c:	4a06      	ldr	r2, [pc, #24]	; (d98 <eink_ed037tc1_set_pixel+0xc4>)
     d7e:	6812      	ldr	r2, [r2, #0]
     d80:	6910      	ldr	r0, [r2, #16]
     d82:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
     d84:	2201      	movs	r2, #1
     d86:	408a      	lsls	r2, r1
     d88:	7819      	ldrb	r1, [r3, #0]
     d8a:	430a      	orrs	r2, r1
     d8c:	701a      	strb	r2, [r3, #0]
}
     d8e:	e7c4      	b.n	d1a <eink_ed037tc1_set_pixel+0x46>
     d90:	20000384 	.word	0x20000384
     d94:	0000417d 	.word	0x0000417d
     d98:	200003a0 	.word	0x200003a0

00000d9c <eink_ed028tc1_set_pixel_raw>:
{    
     d9c:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8177_global_instance.display_width) && (y_set >= 0) && (y_set < uc8177_global_instance.display_height) ) {
     d9e:	4b4e      	ldr	r3, [pc, #312]	; (ed8 <eink_ed028tc1_set_pixel_raw+0x13c>)
     da0:	885b      	ldrh	r3, [r3, #2]
     da2:	b29b      	uxth	r3, r3
     da4:	4283      	cmp	r3, r0
     da6:	d944      	bls.n	e32 <eink_ed028tc1_set_pixel_raw+0x96>
     da8:	4b4b      	ldr	r3, [pc, #300]	; (ed8 <eink_ed028tc1_set_pixel_raw+0x13c>)
     daa:	889c      	ldrh	r4, [r3, #4]
     dac:	b2a4      	uxth	r4, r4
     dae:	428c      	cmp	r4, r1
     db0:	d93f      	bls.n	e32 <eink_ed028tc1_set_pixel_raw+0x96>
        if ( (uc8177_global_instance.display_config.display_rotation == ROTATE_0) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180) ) {
     db2:	781b      	ldrb	r3, [r3, #0]
     db4:	2b00      	cmp	r3, #0
     db6:	d00b      	beq.n	dd0 <eink_ed028tc1_set_pixel_raw+0x34>
     db8:	4b47      	ldr	r3, [pc, #284]	; (ed8 <eink_ed028tc1_set_pixel_raw+0x13c>)
     dba:	781b      	ldrb	r3, [r3, #0]
     dbc:	2b02      	cmp	r3, #2
     dbe:	d007      	beq.n	dd0 <eink_ed028tc1_set_pixel_raw+0x34>
            byte_set = x1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * y_set);
     dc0:	1044      	asrs	r4, r0, #1
     dc2:	2396      	movs	r3, #150	; 0x96
     dc4:	005b      	lsls	r3, r3, #1
     dc6:	434b      	muls	r3, r1
     dc8:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
     dca:	2101      	movs	r1, #1
     dcc:	4001      	ands	r1, r0
     dce:	e006      	b.n	dde <eink_ed028tc1_set_pixel_raw+0x42>
           byte_set = y1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * x_set);
     dd0:	104c      	asrs	r4, r1, #1
     dd2:	2396      	movs	r3, #150	; 0x96
     dd4:	005b      	lsls	r3, r3, #1
     dd6:	4343      	muls	r3, r0
     dd8:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
     dda:	2001      	movs	r0, #1
     ddc:	4001      	ands	r1, r0
        if (odd_even_bit) {
     dde:	2900      	cmp	r1, #0
     de0:	d128      	bne.n	e34 <eink_ed028tc1_set_pixel_raw+0x98>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_set >> 3) & 0x1));
     de2:	493e      	ldr	r1, [pc, #248]	; (edc <eink_ed028tc1_set_pixel_raw+0x140>)
     de4:	6809      	ldr	r1, [r1, #0]
     de6:	6909      	ldr	r1, [r1, #16]
     de8:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     dea:	0710      	lsls	r0, r2, #28
     dec:	d45f      	bmi.n	eae <eink_ed028tc1_set_pixel_raw+0x112>
        *byte &= ~(1 << bit_number);
     dee:	780c      	ldrb	r4, [r1, #0]
     df0:	207f      	movs	r0, #127	; 0x7f
     df2:	4020      	ands	r0, r4
     df4:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_set >> 2) & 0x1));
     df6:	4939      	ldr	r1, [pc, #228]	; (edc <eink_ed028tc1_set_pixel_raw+0x140>)
     df8:	6809      	ldr	r1, [r1, #0]
     dfa:	6909      	ldr	r1, [r1, #16]
     dfc:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     dfe:	0750      	lsls	r0, r2, #29
     e00:	d45b      	bmi.n	eba <eink_ed028tc1_set_pixel_raw+0x11e>
        *byte &= ~(1 << bit_number);
     e02:	7808      	ldrb	r0, [r1, #0]
     e04:	2440      	movs	r4, #64	; 0x40
     e06:	43a0      	bics	r0, r4
     e08:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_set >> 1) & 0x1));
     e0a:	4934      	ldr	r1, [pc, #208]	; (edc <eink_ed028tc1_set_pixel_raw+0x140>)
     e0c:	6809      	ldr	r1, [r1, #0]
     e0e:	6909      	ldr	r1, [r1, #16]
     e10:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     e12:	0790      	lsls	r0, r2, #30
     e14:	d456      	bmi.n	ec4 <eink_ed028tc1_set_pixel_raw+0x128>
        *byte &= ~(1 << bit_number);
     e16:	7808      	ldrb	r0, [r1, #0]
     e18:	2420      	movs	r4, #32
     e1a:	43a0      	bics	r0, r4
     e1c:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_set & 0x1));
     e1e:	492f      	ldr	r1, [pc, #188]	; (edc <eink_ed028tc1_set_pixel_raw+0x140>)
     e20:	6809      	ldr	r1, [r1, #0]
     e22:	6909      	ldr	r1, [r1, #16]
     e24:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
     e26:	07d2      	lsls	r2, r2, #31
     e28:	d451      	bmi.n	ece <eink_ed028tc1_set_pixel_raw+0x132>
        *byte &= ~(1 << bit_number);
     e2a:	781a      	ldrb	r2, [r3, #0]
     e2c:	2110      	movs	r1, #16
     e2e:	438a      	bics	r2, r1
     e30:	701a      	strb	r2, [r3, #0]
}
     e32:	bd10      	pop	{r4, pc}
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_set >> 3) & 0x1));
     e34:	4929      	ldr	r1, [pc, #164]	; (edc <eink_ed028tc1_set_pixel_raw+0x140>)
     e36:	6809      	ldr	r1, [r1, #0]
     e38:	6909      	ldr	r1, [r1, #16]
     e3a:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     e3c:	0710      	lsls	r0, r2, #28
     e3e:	d422      	bmi.n	e86 <eink_ed028tc1_set_pixel_raw+0xea>
        *byte &= ~(1 << bit_number);
     e40:	7808      	ldrb	r0, [r1, #0]
     e42:	2408      	movs	r4, #8
     e44:	43a0      	bics	r0, r4
     e46:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_set >> 2) & 0x1));
     e48:	4924      	ldr	r1, [pc, #144]	; (edc <eink_ed028tc1_set_pixel_raw+0x140>)
     e4a:	6809      	ldr	r1, [r1, #0]
     e4c:	6909      	ldr	r1, [r1, #16]
     e4e:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     e50:	0750      	lsls	r0, r2, #29
     e52:	d41d      	bmi.n	e90 <eink_ed028tc1_set_pixel_raw+0xf4>
        *byte &= ~(1 << bit_number);
     e54:	7808      	ldrb	r0, [r1, #0]
     e56:	2404      	movs	r4, #4
     e58:	43a0      	bics	r0, r4
     e5a:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_set >> 1) & 0x1));
     e5c:	491f      	ldr	r1, [pc, #124]	; (edc <eink_ed028tc1_set_pixel_raw+0x140>)
     e5e:	6809      	ldr	r1, [r1, #0]
     e60:	6909      	ldr	r1, [r1, #16]
     e62:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     e64:	0790      	lsls	r0, r2, #30
     e66:	d418      	bmi.n	e9a <eink_ed028tc1_set_pixel_raw+0xfe>
        *byte &= ~(1 << bit_number);
     e68:	7808      	ldrb	r0, [r1, #0]
     e6a:	2402      	movs	r4, #2
     e6c:	43a0      	bics	r0, r4
     e6e:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_set & 0x1));
     e70:	491a      	ldr	r1, [pc, #104]	; (edc <eink_ed028tc1_set_pixel_raw+0x140>)
     e72:	6809      	ldr	r1, [r1, #0]
     e74:	6909      	ldr	r1, [r1, #16]
     e76:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
     e78:	07d2      	lsls	r2, r2, #31
     e7a:	d413      	bmi.n	ea4 <eink_ed028tc1_set_pixel_raw+0x108>
        *byte &= ~(1 << bit_number);
     e7c:	781a      	ldrb	r2, [r3, #0]
     e7e:	2101      	movs	r1, #1
     e80:	438a      	bics	r2, r1
     e82:	701a      	strb	r2, [r3, #0]
     e84:	e7d5      	b.n	e32 <eink_ed028tc1_set_pixel_raw+0x96>
        *byte |= 1 << bit_number;
     e86:	7808      	ldrb	r0, [r1, #0]
     e88:	2408      	movs	r4, #8
     e8a:	4320      	orrs	r0, r4
     e8c:	7008      	strb	r0, [r1, #0]
     e8e:	e7db      	b.n	e48 <eink_ed028tc1_set_pixel_raw+0xac>
     e90:	7808      	ldrb	r0, [r1, #0]
     e92:	2404      	movs	r4, #4
     e94:	4320      	orrs	r0, r4
     e96:	7008      	strb	r0, [r1, #0]
     e98:	e7e0      	b.n	e5c <eink_ed028tc1_set_pixel_raw+0xc0>
     e9a:	7808      	ldrb	r0, [r1, #0]
     e9c:	2402      	movs	r4, #2
     e9e:	4320      	orrs	r0, r4
     ea0:	7008      	strb	r0, [r1, #0]
     ea2:	e7e5      	b.n	e70 <eink_ed028tc1_set_pixel_raw+0xd4>
     ea4:	781a      	ldrb	r2, [r3, #0]
     ea6:	2101      	movs	r1, #1
     ea8:	430a      	orrs	r2, r1
     eaa:	701a      	strb	r2, [r3, #0]
     eac:	e7c1      	b.n	e32 <eink_ed028tc1_set_pixel_raw+0x96>
     eae:	780c      	ldrb	r4, [r1, #0]
     eb0:	2080      	movs	r0, #128	; 0x80
     eb2:	4240      	negs	r0, r0
     eb4:	4320      	orrs	r0, r4
     eb6:	7008      	strb	r0, [r1, #0]
     eb8:	e79d      	b.n	df6 <eink_ed028tc1_set_pixel_raw+0x5a>
     eba:	7808      	ldrb	r0, [r1, #0]
     ebc:	2440      	movs	r4, #64	; 0x40
     ebe:	4320      	orrs	r0, r4
     ec0:	7008      	strb	r0, [r1, #0]
     ec2:	e7a2      	b.n	e0a <eink_ed028tc1_set_pixel_raw+0x6e>
     ec4:	7808      	ldrb	r0, [r1, #0]
     ec6:	2420      	movs	r4, #32
     ec8:	4320      	orrs	r0, r4
     eca:	7008      	strb	r0, [r1, #0]
     ecc:	e7a7      	b.n	e1e <eink_ed028tc1_set_pixel_raw+0x82>
     ece:	781a      	ldrb	r2, [r3, #0]
     ed0:	2110      	movs	r1, #16
     ed2:	430a      	orrs	r2, r1
     ed4:	701a      	strb	r2, [r3, #0]
     ed6:	e7ac      	b.n	e32 <eink_ed028tc1_set_pixel_raw+0x96>
     ed8:	20000320 	.word	0x20000320
     edc:	200003a0 	.word	0x200003a0

00000ee0 <eink_ed028tc1_set_pixel>:
{    
     ee0:	b510      	push	{r4, lr}
    switch(pixel_colour) {
     ee2:	2a00      	cmp	r2, #0
     ee4:	d003      	beq.n	eee <eink_ed028tc1_set_pixel+0xe>
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0xF);
     ee6:	220f      	movs	r2, #15
     ee8:	4b02      	ldr	r3, [pc, #8]	; (ef4 <eink_ed028tc1_set_pixel+0x14>)
     eea:	4798      	blx	r3
}
     eec:	bd10      	pop	{r4, pc}
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0x0);
     eee:	4b01      	ldr	r3, [pc, #4]	; (ef4 <eink_ed028tc1_set_pixel+0x14>)
     ef0:	4798      	blx	r3
            break;
     ef2:	e7fb      	b.n	eec <eink_ed028tc1_set_pixel+0xc>
     ef4:	00000d9d 	.word	0x00000d9d

00000ef8 <eink_ed028tc1_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_ed028tc1_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
     ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
     efa:	46de      	mov	lr, fp
     efc:	4657      	mov	r7, sl
     efe:	464e      	mov	r6, r9
     f00:	4645      	mov	r5, r8
     f02:	b5e0      	push	{r5, r6, r7, lr}
     f04:	b087      	sub	sp, #28
     f06:	9002      	str	r0, [sp, #8]
     f08:	4693      	mov	fp, r2
     f0a:	0019      	movs	r1, r3
     f0c:	9303      	str	r3, [sp, #12]
     f0e:	ab10      	add	r3, sp, #64	; 0x40
     f10:	881a      	ldrh	r2, [r3, #0]
     f12:	4690      	mov	r8, r2
     f14:	ab11      	add	r3, sp, #68	; 0x44
     f16:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value_1, bit_value_2;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
     f18:	465a      	mov	r2, fp
     f1a:	2a00      	cmp	r2, #0
     f1c:	d034      	beq.n	f88 <eink_ed028tc1_graphics_load_4bgrey_image+0x90>
     f1e:	2200      	movs	r2, #0
     f20:	4692      	mov	sl, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
     f22:	000a      	movs	r2, r1
     f24:	3a01      	subs	r2, #1
     f26:	b292      	uxth	r2, r2
     f28:	4691      	mov	r9, r2
            /* Process each pixel in byte  */
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
     f2a:	9304      	str	r3, [sp, #16]
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
            /* Set the pixel in the display buffer */
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
     f2c:	4f1a      	ldr	r7, [pc, #104]	; (f98 <eink_ed028tc1_graphics_load_4bgrey_image+0xa0>)
     f2e:	4643      	mov	r3, r8
     f30:	9305      	str	r3, [sp, #20]
        for (j = (image_height_bytes-1); j > 0; j--) {
     f32:	464b      	mov	r3, r9
     f34:	464d      	mov	r5, r9
     f36:	2b00      	cmp	r3, #0
     f38:	d020      	beq.n	f7c <eink_ed028tc1_graphics_load_4bgrey_image+0x84>
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
     f3a:	9e04      	ldr	r6, [sp, #16]
     f3c:	9b03      	ldr	r3, [sp, #12]
     f3e:	4652      	mov	r2, sl
     f40:	4353      	muls	r3, r2
     f42:	9a02      	ldr	r2, [sp, #8]
     f44:	4690      	mov	r8, r2
     f46:	4498      	add	r8, r3
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
     f48:	9b05      	ldr	r3, [sp, #20]
     f4a:	4453      	add	r3, sl
     f4c:	b29b      	uxth	r3, r3
     f4e:	9301      	str	r3, [sp, #4]
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
     f50:	4643      	mov	r3, r8
     f52:	5d5c      	ldrb	r4, [r3, r5]
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
     f54:	220f      	movs	r2, #15
     f56:	4022      	ands	r2, r4
     f58:	43d2      	mvns	r2, r2
     f5a:	b2d2      	uxtb	r2, r2
     f5c:	0031      	movs	r1, r6
     f5e:	9801      	ldr	r0, [sp, #4]
     f60:	47b8      	blx	r7
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
     f62:	0924      	lsrs	r4, r4, #4
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value_2));
     f64:	43e2      	mvns	r2, r4
     f66:	b2d2      	uxtb	r2, r2
     f68:	1c71      	adds	r1, r6, #1
     f6a:	b289      	uxth	r1, r1
     f6c:	9801      	ldr	r0, [sp, #4]
     f6e:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
     f70:	3d01      	subs	r5, #1
     f72:	b2ad      	uxth	r5, r5
     f74:	3602      	adds	r6, #2
     f76:	b2b6      	uxth	r6, r6
     f78:	2d00      	cmp	r5, #0
     f7a:	d1e9      	bne.n	f50 <eink_ed028tc1_graphics_load_4bgrey_image+0x58>
    for (i = 0; i < image_width_px; i++) {
     f7c:	4653      	mov	r3, sl
     f7e:	3301      	adds	r3, #1
     f80:	b29b      	uxth	r3, r3
     f82:	469a      	mov	sl, r3
     f84:	459b      	cmp	fp, r3
     f86:	d8d4      	bhi.n	f32 <eink_ed028tc1_graphics_load_4bgrey_image+0x3a>
            m += 2;
        }
    }
    return;
     f88:	b007      	add	sp, #28
     f8a:	bc3c      	pop	{r2, r3, r4, r5}
     f8c:	4690      	mov	r8, r2
     f8e:	4699      	mov	r9, r3
     f90:	46a2      	mov	sl, r4
     f92:	46ab      	mov	fp, r5
     f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00000d9d 	.word	0x00000d9d

00000f9c <eink_ed057tc2_set_pixel>:
{
     f9c:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
     f9e:	4b36      	ldr	r3, [pc, #216]	; (1078 <eink_ed057tc2_set_pixel+0xdc>)
     fa0:	889b      	ldrh	r3, [r3, #4]
     fa2:	b29b      	uxth	r3, r3
     fa4:	4283      	cmp	r3, r0
     fa6:	d919      	bls.n	fdc <eink_ed057tc2_set_pixel+0x40>
     fa8:	4b33      	ldr	r3, [pc, #204]	; (1078 <eink_ed057tc2_set_pixel+0xdc>)
     faa:	88db      	ldrh	r3, [r3, #6]
     fac:	b29b      	uxth	r3, r3
     fae:	428b      	cmp	r3, r1
     fb0:	d914      	bls.n	fdc <eink_ed057tc2_set_pixel+0x40>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
     fb2:	4b31      	ldr	r3, [pc, #196]	; (1078 <eink_ed057tc2_set_pixel+0xdc>)
     fb4:	785b      	ldrb	r3, [r3, #1]
     fb6:	2b01      	cmp	r3, #1
     fb8:	d011      	beq.n	fde <eink_ed057tc2_set_pixel+0x42>
     fba:	4b2f      	ldr	r3, [pc, #188]	; (1078 <eink_ed057tc2_set_pixel+0xdc>)
     fbc:	785b      	ldrb	r3, [r3, #1]
     fbe:	2b03      	cmp	r3, #3
     fc0:	d00d      	beq.n	fde <eink_ed057tc2_set_pixel+0x42>
            byte_set = x1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * y_set);
     fc2:	1044      	asrs	r4, r0, #1
     fc4:	2396      	movs	r3, #150	; 0x96
     fc6:	005b      	lsls	r3, r3, #1
     fc8:	434b      	muls	r3, r1
     fca:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
     fcc:	2101      	movs	r1, #1
     fce:	4008      	ands	r0, r1
        if (odd_even_bit) {
     fd0:	2800      	cmp	r0, #0
     fd2:	d02c      	beq.n	102e <eink_ed057tc2_set_pixel+0x92>
            switch(pixel_colour) {
     fd4:	2a00      	cmp	r2, #0
     fd6:	d00a      	beq.n	fee <eink_ed057tc2_set_pixel+0x52>
     fd8:	2a01      	cmp	r2, #1
     fda:	d018      	beq.n	100e <eink_ed057tc2_set_pixel+0x72>
}
     fdc:	bd10      	pop	{r4, pc}
           byte_set = y1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * x_set);
     fde:	104c      	asrs	r4, r1, #1
     fe0:	2396      	movs	r3, #150	; 0x96
     fe2:	005b      	lsls	r3, r3, #1
     fe4:	4343      	muls	r3, r0
     fe6:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
     fe8:	2001      	movs	r0, #1
     fea:	4008      	ands	r0, r1
     fec:	e7f0      	b.n	fd0 <eink_ed057tc2_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
     fee:	4823      	ldr	r0, [pc, #140]	; (107c <eink_ed057tc2_set_pixel+0xe0>)
     ff0:	6802      	ldr	r2, [r0, #0]
     ff2:	6912      	ldr	r2, [r2, #16]
     ff4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
     ff6:	7811      	ldrb	r1, [r2, #0]
     ff8:	2402      	movs	r4, #2
     ffa:	43a1      	bics	r1, r4
     ffc:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
     ffe:	6802      	ldr	r2, [r0, #0]
    1000:	6911      	ldr	r1, [r2, #16]
    1002:	18cb      	adds	r3, r1, r3
    1004:	781a      	ldrb	r2, [r3, #0]
    1006:	2101      	movs	r1, #1
    1008:	438a      	bics	r2, r1
    100a:	701a      	strb	r2, [r3, #0]
    100c:	e7e6      	b.n	fdc <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    100e:	481b      	ldr	r0, [pc, #108]	; (107c <eink_ed057tc2_set_pixel+0xe0>)
    1010:	6802      	ldr	r2, [r0, #0]
    1012:	6912      	ldr	r2, [r2, #16]
    1014:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1016:	7811      	ldrb	r1, [r2, #0]
    1018:	2402      	movs	r4, #2
    101a:	4321      	orrs	r1, r4
    101c:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    101e:	6802      	ldr	r2, [r0, #0]
    1020:	6911      	ldr	r1, [r2, #16]
    1022:	18cb      	adds	r3, r1, r3
    1024:	781a      	ldrb	r2, [r3, #0]
    1026:	2101      	movs	r1, #1
    1028:	430a      	orrs	r2, r1
    102a:	701a      	strb	r2, [r3, #0]
    102c:	e7d6      	b.n	fdc <eink_ed057tc2_set_pixel+0x40>
            switch(pixel_colour) {
    102e:	2a00      	cmp	r2, #0
    1030:	d011      	beq.n	1056 <eink_ed057tc2_set_pixel+0xba>
    1032:	2a01      	cmp	r2, #1
    1034:	d1d2      	bne.n	fdc <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1036:	4811      	ldr	r0, [pc, #68]	; (107c <eink_ed057tc2_set_pixel+0xe0>)
    1038:	6802      	ldr	r2, [r0, #0]
    103a:	6912      	ldr	r2, [r2, #16]
    103c:	18d2      	adds	r2, r2, r3
    103e:	7811      	ldrb	r1, [r2, #0]
    1040:	2420      	movs	r4, #32
    1042:	4321      	orrs	r1, r4
    1044:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1046:	6802      	ldr	r2, [r0, #0]
    1048:	6911      	ldr	r1, [r2, #16]
    104a:	18cb      	adds	r3, r1, r3
    104c:	781a      	ldrb	r2, [r3, #0]
    104e:	2110      	movs	r1, #16
    1050:	430a      	orrs	r2, r1
    1052:	701a      	strb	r2, [r3, #0]
}
    1054:	e7c2      	b.n	fdc <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1056:	4809      	ldr	r0, [pc, #36]	; (107c <eink_ed057tc2_set_pixel+0xe0>)
    1058:	6802      	ldr	r2, [r0, #0]
    105a:	6912      	ldr	r2, [r2, #16]
    105c:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    105e:	7811      	ldrb	r1, [r2, #0]
    1060:	2420      	movs	r4, #32
    1062:	43a1      	bics	r1, r4
    1064:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1066:	6802      	ldr	r2, [r0, #0]
    1068:	6911      	ldr	r1, [r2, #16]
    106a:	18cb      	adds	r3, r1, r3
    106c:	781a      	ldrb	r2, [r3, #0]
    106e:	2110      	movs	r1, #16
    1070:	438a      	bics	r2, r1
    1072:	701a      	strb	r2, [r3, #0]
    1074:	e7b2      	b.n	fdc <eink_ed057tc2_set_pixel+0x40>
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	20000378 	.word	0x20000378
    107c:	200003a0 	.word	0x200003a0

00001080 <eink_ac057tc1_set_pixel>:
{
    1080:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1082:	4bd0      	ldr	r3, [pc, #832]	; (13c4 <eink_ac057tc1_set_pixel+0x344>)
    1084:	889b      	ldrh	r3, [r3, #4]
    1086:	b29b      	uxth	r3, r3
    1088:	4283      	cmp	r3, r0
    108a:	d93a      	bls.n	1102 <eink_ac057tc1_set_pixel+0x82>
    108c:	4bcd      	ldr	r3, [pc, #820]	; (13c4 <eink_ac057tc1_set_pixel+0x344>)
    108e:	88db      	ldrh	r3, [r3, #6]
    1090:	b29b      	uxth	r3, r3
    1092:	428b      	cmp	r3, r1
    1094:	d935      	bls.n	1102 <eink_ac057tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    1096:	4bcb      	ldr	r3, [pc, #812]	; (13c4 <eink_ac057tc1_set_pixel+0x344>)
    1098:	785b      	ldrb	r3, [r3, #1]
    109a:	2b01      	cmp	r3, #1
    109c:	d013      	beq.n	10c6 <eink_ac057tc1_set_pixel+0x46>
    109e:	4bc9      	ldr	r3, [pc, #804]	; (13c4 <eink_ac057tc1_set_pixel+0x344>)
    10a0:	785b      	ldrb	r3, [r3, #1]
    10a2:	2b03      	cmp	r3, #3
    10a4:	d00f      	beq.n	10c6 <eink_ac057tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * y_set);
    10a6:	1044      	asrs	r4, r0, #1
    10a8:	2396      	movs	r3, #150	; 0x96
    10aa:	005b      	lsls	r3, r3, #1
    10ac:	434b      	muls	r3, r1
    10ae:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    10b0:	2101      	movs	r1, #1
    10b2:	4008      	ands	r0, r1
        if (odd_even_bit) {
    10b4:	2800      	cmp	r0, #0
    10b6:	d100      	bne.n	10ba <eink_ac057tc1_set_pixel+0x3a>
    10b8:	e0c5      	b.n	1246 <eink_ac057tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    10ba:	2a07      	cmp	r2, #7
    10bc:	d821      	bhi.n	1102 <eink_ac057tc1_set_pixel+0x82>
    10be:	0092      	lsls	r2, r2, #2
    10c0:	49c1      	ldr	r1, [pc, #772]	; (13c8 <eink_ac057tc1_set_pixel+0x348>)
    10c2:	588a      	ldr	r2, [r1, r2]
    10c4:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * x_set);
    10c6:	104c      	asrs	r4, r1, #1
    10c8:	2396      	movs	r3, #150	; 0x96
    10ca:	005b      	lsls	r3, r3, #1
    10cc:	4343      	muls	r3, r0
    10ce:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    10d0:	2001      	movs	r0, #1
    10d2:	4008      	ands	r0, r1
    10d4:	e7ee      	b.n	10b4 <eink_ac057tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    10d6:	49bd      	ldr	r1, [pc, #756]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    10d8:	680a      	ldr	r2, [r1, #0]
    10da:	6912      	ldr	r2, [r2, #16]
    10dc:	18d2      	adds	r2, r2, r3
    10de:	7810      	ldrb	r0, [r2, #0]
    10e0:	2404      	movs	r4, #4
    10e2:	43a0      	bics	r0, r4
    10e4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    10e6:	680a      	ldr	r2, [r1, #0]
    10e8:	6912      	ldr	r2, [r2, #16]
    10ea:	18d2      	adds	r2, r2, r3
    10ec:	7810      	ldrb	r0, [r2, #0]
    10ee:	3c02      	subs	r4, #2
    10f0:	43a0      	bics	r0, r4
    10f2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    10f4:	680a      	ldr	r2, [r1, #0]
    10f6:	6911      	ldr	r1, [r2, #16]
    10f8:	18cb      	adds	r3, r1, r3
    10fa:	781a      	ldrb	r2, [r3, #0]
    10fc:	2101      	movs	r1, #1
    10fe:	438a      	bics	r2, r1
    1100:	701a      	strb	r2, [r3, #0]
}
    1102:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1104:	49b1      	ldr	r1, [pc, #708]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    1106:	680a      	ldr	r2, [r1, #0]
    1108:	6912      	ldr	r2, [r2, #16]
    110a:	18d2      	adds	r2, r2, r3
    110c:	7810      	ldrb	r0, [r2, #0]
    110e:	2404      	movs	r4, #4
    1110:	43a0      	bics	r0, r4
    1112:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1114:	680a      	ldr	r2, [r1, #0]
    1116:	6912      	ldr	r2, [r2, #16]
    1118:	18d2      	adds	r2, r2, r3
    111a:	7810      	ldrb	r0, [r2, #0]
    111c:	3c02      	subs	r4, #2
    111e:	43a0      	bics	r0, r4
    1120:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1122:	680a      	ldr	r2, [r1, #0]
    1124:	6911      	ldr	r1, [r2, #16]
    1126:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1128:	781a      	ldrb	r2, [r3, #0]
    112a:	2101      	movs	r1, #1
    112c:	430a      	orrs	r2, r1
    112e:	701a      	strb	r2, [r3, #0]
    1130:	e7e7      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1132:	49a6      	ldr	r1, [pc, #664]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    1134:	680a      	ldr	r2, [r1, #0]
    1136:	6912      	ldr	r2, [r2, #16]
    1138:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    113a:	7810      	ldrb	r0, [r2, #0]
    113c:	2404      	movs	r4, #4
    113e:	43a0      	bics	r0, r4
    1140:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1142:	680a      	ldr	r2, [r1, #0]
    1144:	6912      	ldr	r2, [r2, #16]
    1146:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1148:	7810      	ldrb	r0, [r2, #0]
    114a:	2402      	movs	r4, #2
    114c:	4320      	orrs	r0, r4
    114e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1150:	680a      	ldr	r2, [r1, #0]
    1152:	6911      	ldr	r1, [r2, #16]
    1154:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1156:	781a      	ldrb	r2, [r3, #0]
    1158:	2101      	movs	r1, #1
    115a:	438a      	bics	r2, r1
    115c:	701a      	strb	r2, [r3, #0]
    115e:	e7d0      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1160:	499a      	ldr	r1, [pc, #616]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    1162:	680a      	ldr	r2, [r1, #0]
    1164:	6912      	ldr	r2, [r2, #16]
    1166:	18d2      	adds	r2, r2, r3
    1168:	7810      	ldrb	r0, [r2, #0]
    116a:	2404      	movs	r4, #4
    116c:	43a0      	bics	r0, r4
    116e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1170:	680a      	ldr	r2, [r1, #0]
    1172:	6912      	ldr	r2, [r2, #16]
    1174:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1176:	7810      	ldrb	r0, [r2, #0]
    1178:	2402      	movs	r4, #2
    117a:	4320      	orrs	r0, r4
    117c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    117e:	680a      	ldr	r2, [r1, #0]
    1180:	6911      	ldr	r1, [r2, #16]
    1182:	18cb      	adds	r3, r1, r3
    1184:	781a      	ldrb	r2, [r3, #0]
    1186:	2101      	movs	r1, #1
    1188:	430a      	orrs	r2, r1
    118a:	701a      	strb	r2, [r3, #0]
    118c:	e7b9      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    118e:	498f      	ldr	r1, [pc, #572]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    1190:	680a      	ldr	r2, [r1, #0]
    1192:	6912      	ldr	r2, [r2, #16]
    1194:	18d2      	adds	r2, r2, r3
    1196:	7810      	ldrb	r0, [r2, #0]
    1198:	2404      	movs	r4, #4
    119a:	4320      	orrs	r0, r4
    119c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    119e:	680a      	ldr	r2, [r1, #0]
    11a0:	6912      	ldr	r2, [r2, #16]
    11a2:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    11a4:	7810      	ldrb	r0, [r2, #0]
    11a6:	2402      	movs	r4, #2
    11a8:	43a0      	bics	r0, r4
    11aa:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    11ac:	680a      	ldr	r2, [r1, #0]
    11ae:	6911      	ldr	r1, [r2, #16]
    11b0:	18cb      	adds	r3, r1, r3
    11b2:	781a      	ldrb	r2, [r3, #0]
    11b4:	2101      	movs	r1, #1
    11b6:	438a      	bics	r2, r1
    11b8:	701a      	strb	r2, [r3, #0]
    11ba:	e7a2      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    11bc:	4983      	ldr	r1, [pc, #524]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    11be:	680a      	ldr	r2, [r1, #0]
    11c0:	6912      	ldr	r2, [r2, #16]
    11c2:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    11c4:	7810      	ldrb	r0, [r2, #0]
    11c6:	2404      	movs	r4, #4
    11c8:	4320      	orrs	r0, r4
    11ca:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    11cc:	680a      	ldr	r2, [r1, #0]
    11ce:	6912      	ldr	r2, [r2, #16]
    11d0:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    11d2:	7810      	ldrb	r0, [r2, #0]
    11d4:	2402      	movs	r4, #2
    11d6:	43a0      	bics	r0, r4
    11d8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    11da:	680a      	ldr	r2, [r1, #0]
    11dc:	6911      	ldr	r1, [r2, #16]
    11de:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    11e0:	781a      	ldrb	r2, [r3, #0]
    11e2:	2101      	movs	r1, #1
    11e4:	430a      	orrs	r2, r1
    11e6:	701a      	strb	r2, [r3, #0]
    11e8:	e78b      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    11ea:	4978      	ldr	r1, [pc, #480]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    11ec:	680a      	ldr	r2, [r1, #0]
    11ee:	6912      	ldr	r2, [r2, #16]
    11f0:	18d2      	adds	r2, r2, r3
    11f2:	7810      	ldrb	r0, [r2, #0]
    11f4:	2404      	movs	r4, #4
    11f6:	4320      	orrs	r0, r4
    11f8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    11fa:	680a      	ldr	r2, [r1, #0]
    11fc:	6912      	ldr	r2, [r2, #16]
    11fe:	18d2      	adds	r2, r2, r3
    1200:	7810      	ldrb	r0, [r2, #0]
    1202:	2402      	movs	r4, #2
    1204:	4320      	orrs	r0, r4
    1206:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1208:	680a      	ldr	r2, [r1, #0]
    120a:	6911      	ldr	r1, [r2, #16]
    120c:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    120e:	781a      	ldrb	r2, [r3, #0]
    1210:	2101      	movs	r1, #1
    1212:	438a      	bics	r2, r1
    1214:	701a      	strb	r2, [r3, #0]
    1216:	e774      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1218:	496c      	ldr	r1, [pc, #432]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    121a:	680a      	ldr	r2, [r1, #0]
    121c:	6912      	ldr	r2, [r2, #16]
    121e:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1220:	7810      	ldrb	r0, [r2, #0]
    1222:	2404      	movs	r4, #4
    1224:	4320      	orrs	r0, r4
    1226:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1228:	680a      	ldr	r2, [r1, #0]
    122a:	6912      	ldr	r2, [r2, #16]
    122c:	18d2      	adds	r2, r2, r3
    122e:	7810      	ldrb	r0, [r2, #0]
    1230:	2402      	movs	r4, #2
    1232:	4320      	orrs	r0, r4
    1234:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1236:	680a      	ldr	r2, [r1, #0]
    1238:	6911      	ldr	r1, [r2, #16]
    123a:	18cb      	adds	r3, r1, r3
    123c:	781a      	ldrb	r2, [r3, #0]
    123e:	2101      	movs	r1, #1
    1240:	430a      	orrs	r2, r1
    1242:	701a      	strb	r2, [r3, #0]
    1244:	e75d      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
            switch(pixel_colour) {
    1246:	2a07      	cmp	r2, #7
    1248:	d900      	bls.n	124c <eink_ac057tc1_set_pixel+0x1cc>
    124a:	e75a      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
    124c:	0092      	lsls	r2, r2, #2
    124e:	4960      	ldr	r1, [pc, #384]	; (13d0 <eink_ac057tc1_set_pixel+0x350>)
    1250:	588a      	ldr	r2, [r1, r2]
    1252:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1254:	495d      	ldr	r1, [pc, #372]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    1256:	680a      	ldr	r2, [r1, #0]
    1258:	6912      	ldr	r2, [r2, #16]
    125a:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    125c:	7810      	ldrb	r0, [r2, #0]
    125e:	2440      	movs	r4, #64	; 0x40
    1260:	43a0      	bics	r0, r4
    1262:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1264:	680a      	ldr	r2, [r1, #0]
    1266:	6912      	ldr	r2, [r2, #16]
    1268:	18d2      	adds	r2, r2, r3
    126a:	7810      	ldrb	r0, [r2, #0]
    126c:	3c20      	subs	r4, #32
    126e:	43a0      	bics	r0, r4
    1270:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1272:	680a      	ldr	r2, [r1, #0]
    1274:	6911      	ldr	r1, [r2, #16]
    1276:	18cb      	adds	r3, r1, r3
    1278:	781a      	ldrb	r2, [r3, #0]
    127a:	2110      	movs	r1, #16
    127c:	438a      	bics	r2, r1
    127e:	701a      	strb	r2, [r3, #0]
    1280:	e73f      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1282:	4952      	ldr	r1, [pc, #328]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    1284:	680a      	ldr	r2, [r1, #0]
    1286:	6912      	ldr	r2, [r2, #16]
    1288:	18d2      	adds	r2, r2, r3
    128a:	7810      	ldrb	r0, [r2, #0]
    128c:	2440      	movs	r4, #64	; 0x40
    128e:	43a0      	bics	r0, r4
    1290:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1292:	680a      	ldr	r2, [r1, #0]
    1294:	6912      	ldr	r2, [r2, #16]
    1296:	18d2      	adds	r2, r2, r3
    1298:	7810      	ldrb	r0, [r2, #0]
    129a:	3c20      	subs	r4, #32
    129c:	43a0      	bics	r0, r4
    129e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    12a0:	680a      	ldr	r2, [r1, #0]
    12a2:	6911      	ldr	r1, [r2, #16]
    12a4:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    12a6:	781a      	ldrb	r2, [r3, #0]
    12a8:	2110      	movs	r1, #16
    12aa:	430a      	orrs	r2, r1
    12ac:	701a      	strb	r2, [r3, #0]
    12ae:	e728      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    12b0:	4946      	ldr	r1, [pc, #280]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    12b2:	680a      	ldr	r2, [r1, #0]
    12b4:	6912      	ldr	r2, [r2, #16]
    12b6:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    12b8:	7810      	ldrb	r0, [r2, #0]
    12ba:	2440      	movs	r4, #64	; 0x40
    12bc:	43a0      	bics	r0, r4
    12be:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    12c0:	680a      	ldr	r2, [r1, #0]
    12c2:	6912      	ldr	r2, [r2, #16]
    12c4:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    12c6:	7810      	ldrb	r0, [r2, #0]
    12c8:	2420      	movs	r4, #32
    12ca:	4320      	orrs	r0, r4
    12cc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    12ce:	680a      	ldr	r2, [r1, #0]
    12d0:	6911      	ldr	r1, [r2, #16]
    12d2:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    12d4:	781a      	ldrb	r2, [r3, #0]
    12d6:	2110      	movs	r1, #16
    12d8:	438a      	bics	r2, r1
    12da:	701a      	strb	r2, [r3, #0]
    12dc:	e711      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    12de:	493b      	ldr	r1, [pc, #236]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    12e0:	680a      	ldr	r2, [r1, #0]
    12e2:	6912      	ldr	r2, [r2, #16]
    12e4:	18d2      	adds	r2, r2, r3
    12e6:	7810      	ldrb	r0, [r2, #0]
    12e8:	2440      	movs	r4, #64	; 0x40
    12ea:	43a0      	bics	r0, r4
    12ec:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    12ee:	680a      	ldr	r2, [r1, #0]
    12f0:	6912      	ldr	r2, [r2, #16]
    12f2:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    12f4:	7810      	ldrb	r0, [r2, #0]
    12f6:	2420      	movs	r4, #32
    12f8:	4320      	orrs	r0, r4
    12fa:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    12fc:	680a      	ldr	r2, [r1, #0]
    12fe:	6911      	ldr	r1, [r2, #16]
    1300:	18cb      	adds	r3, r1, r3
    1302:	781a      	ldrb	r2, [r3, #0]
    1304:	2110      	movs	r1, #16
    1306:	430a      	orrs	r2, r1
    1308:	701a      	strb	r2, [r3, #0]
    130a:	e6fa      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    130c:	492f      	ldr	r1, [pc, #188]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    130e:	680a      	ldr	r2, [r1, #0]
    1310:	6912      	ldr	r2, [r2, #16]
    1312:	18d2      	adds	r2, r2, r3
    1314:	7810      	ldrb	r0, [r2, #0]
    1316:	2440      	movs	r4, #64	; 0x40
    1318:	4320      	orrs	r0, r4
    131a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    131c:	680a      	ldr	r2, [r1, #0]
    131e:	6912      	ldr	r2, [r2, #16]
    1320:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1322:	7810      	ldrb	r0, [r2, #0]
    1324:	2420      	movs	r4, #32
    1326:	43a0      	bics	r0, r4
    1328:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    132a:	680a      	ldr	r2, [r1, #0]
    132c:	6911      	ldr	r1, [r2, #16]
    132e:	18cb      	adds	r3, r1, r3
    1330:	781a      	ldrb	r2, [r3, #0]
    1332:	2110      	movs	r1, #16
    1334:	438a      	bics	r2, r1
    1336:	701a      	strb	r2, [r3, #0]
    1338:	e6e3      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    133a:	4924      	ldr	r1, [pc, #144]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    133c:	680a      	ldr	r2, [r1, #0]
    133e:	6912      	ldr	r2, [r2, #16]
    1340:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1342:	7810      	ldrb	r0, [r2, #0]
    1344:	2440      	movs	r4, #64	; 0x40
    1346:	4320      	orrs	r0, r4
    1348:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    134a:	680a      	ldr	r2, [r1, #0]
    134c:	6912      	ldr	r2, [r2, #16]
    134e:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1350:	7810      	ldrb	r0, [r2, #0]
    1352:	2420      	movs	r4, #32
    1354:	43a0      	bics	r0, r4
    1356:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1358:	680a      	ldr	r2, [r1, #0]
    135a:	6911      	ldr	r1, [r2, #16]
    135c:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    135e:	781a      	ldrb	r2, [r3, #0]
    1360:	2110      	movs	r1, #16
    1362:	430a      	orrs	r2, r1
    1364:	701a      	strb	r2, [r3, #0]
    1366:	e6cc      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1368:	4918      	ldr	r1, [pc, #96]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    136a:	680a      	ldr	r2, [r1, #0]
    136c:	6912      	ldr	r2, [r2, #16]
    136e:	18d2      	adds	r2, r2, r3
    1370:	7810      	ldrb	r0, [r2, #0]
    1372:	2440      	movs	r4, #64	; 0x40
    1374:	4320      	orrs	r0, r4
    1376:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1378:	680a      	ldr	r2, [r1, #0]
    137a:	6912      	ldr	r2, [r2, #16]
    137c:	18d2      	adds	r2, r2, r3
    137e:	7810      	ldrb	r0, [r2, #0]
    1380:	2420      	movs	r4, #32
    1382:	4320      	orrs	r0, r4
    1384:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1386:	680a      	ldr	r2, [r1, #0]
    1388:	6911      	ldr	r1, [r2, #16]
    138a:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    138c:	781a      	ldrb	r2, [r3, #0]
    138e:	2110      	movs	r1, #16
    1390:	438a      	bics	r2, r1
    1392:	701a      	strb	r2, [r3, #0]
    1394:	e6b5      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1396:	490d      	ldr	r1, [pc, #52]	; (13cc <eink_ac057tc1_set_pixel+0x34c>)
    1398:	680a      	ldr	r2, [r1, #0]
    139a:	6912      	ldr	r2, [r2, #16]
    139c:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    139e:	7810      	ldrb	r0, [r2, #0]
    13a0:	2440      	movs	r4, #64	; 0x40
    13a2:	4320      	orrs	r0, r4
    13a4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    13a6:	680a      	ldr	r2, [r1, #0]
    13a8:	6912      	ldr	r2, [r2, #16]
    13aa:	18d2      	adds	r2, r2, r3
    13ac:	7810      	ldrb	r0, [r2, #0]
    13ae:	2420      	movs	r4, #32
    13b0:	4320      	orrs	r0, r4
    13b2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    13b4:	680a      	ldr	r2, [r1, #0]
    13b6:	6911      	ldr	r1, [r2, #16]
    13b8:	18cb      	adds	r3, r1, r3
    13ba:	781a      	ldrb	r2, [r3, #0]
    13bc:	2110      	movs	r1, #16
    13be:	430a      	orrs	r2, r1
    13c0:	701a      	strb	r2, [r3, #0]
}
    13c2:	e69e      	b.n	1102 <eink_ac057tc1_set_pixel+0x82>
    13c4:	20000378 	.word	0x20000378
    13c8:	00003e40 	.word	0x00003e40
    13cc:	200003a0 	.word	0x200003a0
    13d0:	00003e60 	.word	0x00003e60

000013d4 <eink_hink_e0154a05_set_pixel>:
{    
    13d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch(ssd1608_global_instance.display_config.display_rotation)
    13d6:	4c2a      	ldr	r4, [pc, #168]	; (1480 <eink_hink_e0154a05_set_pixel+0xac>)
    13d8:	7824      	ldrb	r4, [r4, #0]
    13da:	b2e4      	uxtb	r4, r4
    13dc:	2c01      	cmp	r4, #1
    13de:	d014      	beq.n	140a <eink_hink_e0154a05_set_pixel+0x36>
    13e0:	2c00      	cmp	r4, #0
    13e2:	d008      	beq.n	13f6 <eink_hink_e0154a05_set_pixel+0x22>
    13e4:	2c02      	cmp	r4, #2
    13e6:	d01c      	beq.n	1422 <eink_hink_e0154a05_set_pixel+0x4e>
    13e8:	2c03      	cmp	r4, #3
    13ea:	d024      	beq.n	1436 <eink_hink_e0154a05_set_pixel+0x62>
    if ( (x_set >= 0) && (x_set < max_x) && (y_set >= 0) && (y_set < max_y) ) {
    13ec:	42b3      	cmp	r3, r6
    13ee:	d201      	bcs.n	13f4 <eink_hink_e0154a05_set_pixel+0x20>
    13f0:	42bd      	cmp	r5, r7
    13f2:	d328      	bcc.n	1446 <eink_hink_e0154a05_set_pixel+0x72>
}
    13f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            x_set = ssd1608_global_instance.display_height - y;
    13f6:	4c22      	ldr	r4, [pc, #136]	; (1480 <eink_hink_e0154a05_set_pixel+0xac>)
    13f8:	88e3      	ldrh	r3, [r4, #6]
    13fa:	1a5b      	subs	r3, r3, r1
    13fc:	b29b      	uxth	r3, r3
            max_x = ssd1608_global_instance.display_height;
    13fe:	88e6      	ldrh	r6, [r4, #6]
    1400:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    1402:	88a7      	ldrh	r7, [r4, #4]
    1404:	b2bf      	uxth	r7, r7
            y_set = x;
    1406:	0005      	movs	r5, r0
            break;
    1408:	e7f0      	b.n	13ec <eink_hink_e0154a05_set_pixel+0x18>
            x_set = ssd1608_global_instance.display_width - x;
    140a:	4c1d      	ldr	r4, [pc, #116]	; (1480 <eink_hink_e0154a05_set_pixel+0xac>)
    140c:	88a3      	ldrh	r3, [r4, #4]
    140e:	1a1b      	subs	r3, r3, r0
    1410:	b29b      	uxth	r3, r3
            y_set = ssd1608_global_instance.display_height - y;
    1412:	88e5      	ldrh	r5, [r4, #6]
    1414:	1a6d      	subs	r5, r5, r1
    1416:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_width;
    1418:	88a6      	ldrh	r6, [r4, #4]
    141a:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    141c:	88e7      	ldrh	r7, [r4, #6]
    141e:	b2bf      	uxth	r7, r7
            break;
    1420:	e7e4      	b.n	13ec <eink_hink_e0154a05_set_pixel+0x18>
            y_set = ssd1608_global_instance.display_width - x;
    1422:	4c17      	ldr	r4, [pc, #92]	; (1480 <eink_hink_e0154a05_set_pixel+0xac>)
    1424:	88a5      	ldrh	r5, [r4, #4]
    1426:	1a2d      	subs	r5, r5, r0
    1428:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_height;
    142a:	88e6      	ldrh	r6, [r4, #6]
    142c:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    142e:	88a7      	ldrh	r7, [r4, #4]
    1430:	b2bf      	uxth	r7, r7
            x_set = y;
    1432:	000b      	movs	r3, r1
            break;
    1434:	e7da      	b.n	13ec <eink_hink_e0154a05_set_pixel+0x18>
            max_x = ssd1608_global_instance.display_width;
    1436:	4b12      	ldr	r3, [pc, #72]	; (1480 <eink_hink_e0154a05_set_pixel+0xac>)
    1438:	889e      	ldrh	r6, [r3, #4]
    143a:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    143c:	88df      	ldrh	r7, [r3, #6]
    143e:	b2bf      	uxth	r7, r7
            y_set = y;
    1440:	000d      	movs	r5, r1
            x_set = x;
    1442:	0003      	movs	r3, r0
            break;
    1444:	e7d2      	b.n	13ec <eink_hink_e0154a05_set_pixel+0x18>
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    1446:	490f      	ldr	r1, [pc, #60]	; (1484 <eink_hink_e0154a05_set_pixel+0xb0>)
    1448:	6809      	ldr	r1, [r1, #0]
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    144a:	3301      	adds	r3, #1
    144c:	0098      	lsls	r0, r3, #2
    144e:	181b      	adds	r3, r3, r0
    1450:	0098      	lsls	r0, r3, #2
    1452:	181b      	adds	r3, r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1454:	10e8      	asrs	r0, r5, #3
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    1456:	1a1b      	subs	r3, r3, r0
    1458:	3b01      	subs	r3, #1
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    145a:	b29b      	uxth	r3, r3
    145c:	6909      	ldr	r1, [r1, #16]
    145e:	18cb      	adds	r3, r1, r3
    1460:	2107      	movs	r1, #7
    1462:	400d      	ands	r5, r1
    if (bit_value == 1) {
    1464:	2a00      	cmp	r2, #0
    1466:	d105      	bne.n	1474 <eink_hink_e0154a05_set_pixel+0xa0>
        *byte &= ~(1 << bit_number);
    1468:	2101      	movs	r1, #1
    146a:	40a9      	lsls	r1, r5
    146c:	781a      	ldrb	r2, [r3, #0]
    146e:	438a      	bics	r2, r1
    1470:	701a      	strb	r2, [r3, #0]
}
    1472:	e7bf      	b.n	13f4 <eink_hink_e0154a05_set_pixel+0x20>
        *byte |= 1 << bit_number;
    1474:	3906      	subs	r1, #6
    1476:	40a9      	lsls	r1, r5
    1478:	781a      	ldrb	r2, [r3, #0]
    147a:	430a      	orrs	r2, r1
    147c:	701a      	strb	r2, [r3, #0]
    147e:	e7b9      	b.n	13f4 <eink_hink_e0154a05_set_pixel+0x20>
    1480:	20000328 	.word	0x20000328
    1484:	200003a0 	.word	0x200003a0

00001488 <eink_ed029tc1_set_pixel>:
{    
    1488:	b570      	push	{r4, r5, r6, lr}
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    148a:	4c37      	ldr	r4, [pc, #220]	; (1568 <eink_ed029tc1_set_pixel+0xe0>)
    148c:	8923      	ldrh	r3, [r4, #8]
    148e:	b29b      	uxth	r3, r3
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    1490:	88e5      	ldrh	r5, [r4, #6]
    1492:	b2ad      	uxth	r5, r5
    if ( (x_set >= 0) && (x_set < uc8151_global_instance.display_width) && (y_set >= 0) && (y_set < uc8151_global_instance.display_height) ) {
    1494:	88e4      	ldrh	r4, [r4, #6]
    1496:	b2a4      	uxth	r4, r4
    1498:	4284      	cmp	r4, r0
    149a:	d925      	bls.n	14e8 <eink_ed029tc1_set_pixel+0x60>
    149c:	4c32      	ldr	r4, [pc, #200]	; (1568 <eink_ed029tc1_set_pixel+0xe0>)
    149e:	8924      	ldrh	r4, [r4, #8]
    14a0:	b2a4      	uxth	r4, r4
    14a2:	428c      	cmp	r4, r1
    14a4:	d920      	bls.n	14e8 <eink_ed029tc1_set_pixel+0x60>
        if ( (uc8151_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8151_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    14a6:	4c30      	ldr	r4, [pc, #192]	; (1568 <eink_ed029tc1_set_pixel+0xe0>)
    14a8:	78e4      	ldrb	r4, [r4, #3]
    14aa:	2c01      	cmp	r4, #1
    14ac:	d01d      	beq.n	14ea <eink_ed029tc1_set_pixel+0x62>
    14ae:	4c2e      	ldr	r4, [pc, #184]	; (1568 <eink_ed029tc1_set_pixel+0xe0>)
    14b0:	78e4      	ldrb	r4, [r4, #3]
    14b2:	2c03      	cmp	r4, #3
    14b4:	d019      	beq.n	14ea <eink_ed029tc1_set_pixel+0x62>
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    14b6:	3001      	adds	r0, #1
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    14b8:	08db      	lsrs	r3, r3, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    14ba:	b2db      	uxtb	r3, r3
    14bc:	4358      	muls	r0, r3
            y1_set = ((y_set - (y_set % 8)) / 8);
    14be:	10cb      	asrs	r3, r1, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    14c0:	43db      	mvns	r3, r3
    14c2:	18c3      	adds	r3, r0, r3
            bit_set = (y_set % 8);
    14c4:	2007      	movs	r0, #7
    14c6:	4001      	ands	r1, r0
        if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    14c8:	4827      	ldr	r0, [pc, #156]	; (1568 <eink_ed029tc1_set_pixel+0xe0>)
    14ca:	7880      	ldrb	r0, [r0, #2]
    14cc:	2800      	cmp	r0, #0
    14ce:	d11b      	bne.n	1508 <eink_ed029tc1_set_pixel+0x80>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);
    14d0:	4826      	ldr	r0, [pc, #152]	; (156c <eink_ed029tc1_set_pixel+0xe4>)
    14d2:	6800      	ldr	r0, [r0, #0]
    14d4:	6940      	ldr	r0, [r0, #20]
    14d6:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    14d8:	2a00      	cmp	r2, #0
    14da:	d10e      	bne.n	14fa <eink_ed029tc1_set_pixel+0x72>
        *byte &= ~(1 << bit_number);
    14dc:	2201      	movs	r2, #1
    14de:	408a      	lsls	r2, r1
    14e0:	0011      	movs	r1, r2
    14e2:	781a      	ldrb	r2, [r3, #0]
    14e4:	438a      	bics	r2, r1
    14e6:	701a      	strb	r2, [r3, #0]
}
    14e8:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    14ea:	08ed      	lsrs	r5, r5, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - (width_bytes - 16) - x1_set);
    14ec:	b2eb      	uxtb	r3, r5
    14ee:	4359      	muls	r1, r3
            x1_set = 15 - ((x_set - (x_set % 8)) / 8);
    14f0:	10c3      	asrs	r3, r0, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - (width_bytes - 16) - x1_set);
    14f2:	18cb      	adds	r3, r1, r3
            bit_set = 7 - (x_set % 8);
    14f4:	2107      	movs	r1, #7
    14f6:	4381      	bics	r1, r0
    14f8:	e7e6      	b.n	14c8 <eink_ed029tc1_set_pixel+0x40>
        *byte |= 1 << bit_number;
    14fa:	2201      	movs	r2, #1
    14fc:	408a      	lsls	r2, r1
    14fe:	0011      	movs	r1, r2
    1500:	781a      	ldrb	r2, [r3, #0]
    1502:	430a      	orrs	r2, r1
    1504:	701a      	strb	r2, [r3, #0]
    1506:	e7ef      	b.n	14e8 <eink_ed029tc1_set_pixel+0x60>
            if (pixel_colour == PIXEL_BLACK) {
    1508:	2a00      	cmp	r2, #0
    150a:	d017      	beq.n	153c <eink_ed029tc1_set_pixel+0xb4>
            } else if(pixel_colour == PIXEL_WHITE) {
    150c:	3a02      	subs	r2, #2
    150e:	2a01      	cmp	r2, #1
    1510:	d801      	bhi.n	1516 <eink_ed029tc1_set_pixel+0x8e>
                pixel_set_2 = 0;    
    1512:	2600      	movs	r6, #0
    1514:	e013      	b.n	153e <eink_ed029tc1_set_pixel+0xb6>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1516:	4d15      	ldr	r5, [pc, #84]	; (156c <eink_ed029tc1_set_pixel+0xe4>)
    1518:	682a      	ldr	r2, [r5, #0]
    151a:	6912      	ldr	r2, [r2, #16]
    151c:	18d2      	adds	r2, r2, r3
    151e:	2401      	movs	r4, #1
    1520:	408c      	lsls	r4, r1
    1522:	7810      	ldrb	r0, [r2, #0]
    1524:	4320      	orrs	r0, r4
    1526:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1528:	682a      	ldr	r2, [r5, #0]
    152a:	6950      	ldr	r0, [r2, #20]
    152c:	18c3      	adds	r3, r0, r3
    152e:	2201      	movs	r2, #1
    1530:	408a      	lsls	r2, r1
    1532:	0011      	movs	r1, r2
    1534:	781a      	ldrb	r2, [r3, #0]
    1536:	430a      	orrs	r2, r1
    1538:	701a      	strb	r2, [r3, #0]
    153a:	e7d5      	b.n	14e8 <eink_ed029tc1_set_pixel+0x60>
                pixel_set_2 = 1;
    153c:	2601      	movs	r6, #1
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    153e:	4d0b      	ldr	r5, [pc, #44]	; (156c <eink_ed029tc1_set_pixel+0xe4>)
    1540:	682a      	ldr	r2, [r5, #0]
    1542:	6912      	ldr	r2, [r2, #16]
    1544:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1546:	2401      	movs	r4, #1
    1548:	408c      	lsls	r4, r1
    154a:	7810      	ldrb	r0, [r2, #0]
    154c:	43a0      	bics	r0, r4
    154e:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1550:	682a      	ldr	r2, [r5, #0]
    1552:	6950      	ldr	r0, [r2, #20]
    1554:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    1556:	2e00      	cmp	r6, #0
    1558:	d1e9      	bne.n	152e <eink_ed029tc1_set_pixel+0xa6>
        *byte &= ~(1 << bit_number);
    155a:	2201      	movs	r2, #1
    155c:	408a      	lsls	r2, r1
    155e:	0011      	movs	r1, r2
    1560:	781a      	ldrb	r2, [r3, #0]
    1562:	438a      	bics	r2, r1
    1564:	701a      	strb	r2, [r3, #0]
}
    1566:	e7bf      	b.n	14e8 <eink_ed029tc1_set_pixel+0x60>
    1568:	20000368 	.word	0x20000368
    156c:	200003a0 	.word	0x200003a0

00001570 <eink_el026tr1_set_pixel>:
{    
    1570:	b510      	push	{r4, lr}
    eink_ed029tc1_set_pixel(x_set, y_set, pixel_colour);
    1572:	4b01      	ldr	r3, [pc, #4]	; (1578 <eink_el026tr1_set_pixel+0x8>)
    1574:	4798      	blx	r3
}
    1576:	bd10      	pop	{r4, pc}
    1578:	00001489 	.word	0x00001489

0000157c <eink_ed013tc1_set_pixel>:
{    
    157c:	b510      	push	{r4, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    157e:	4c16      	ldr	r4, [pc, #88]	; (15d8 <eink_ed013tc1_set_pixel+0x5c>)
    1580:	88a3      	ldrh	r3, [r4, #4]
    1582:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1584:	8864      	ldrh	r4, [r4, #2]
    1586:	b2a4      	uxth	r4, r4
    1588:	4284      	cmp	r4, r0
    158a:	d918      	bls.n	15be <eink_ed013tc1_set_pixel+0x42>
    158c:	4c12      	ldr	r4, [pc, #72]	; (15d8 <eink_ed013tc1_set_pixel+0x5c>)
    158e:	88a4      	ldrh	r4, [r4, #4]
    1590:	b2a4      	uxth	r4, r4
    1592:	428c      	cmp	r4, r1
    1594:	d913      	bls.n	15be <eink_ed013tc1_set_pixel+0x42>
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1596:	08db      	lsrs	r3, r3, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1598:	b2db      	uxtb	r3, r3
    159a:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    159c:	10c8      	asrs	r0, r1, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    159e:	1a1b      	subs	r3, r3, r0
    15a0:	3b01      	subs	r3, #1
        bit_set = (y_set % 8);
    15a2:	2007      	movs	r0, #7
    15a4:	4001      	ands	r1, r0
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    15a6:	2a00      	cmp	r2, #0
    15a8:	d00a      	beq.n	15c0 <eink_ed013tc1_set_pixel+0x44>
		else eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 1);
    15aa:	4a0c      	ldr	r2, [pc, #48]	; (15dc <eink_ed013tc1_set_pixel+0x60>)
    15ac:	6812      	ldr	r2, [r2, #0]
    15ae:	6950      	ldr	r0, [r2, #20]
    15b0:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
    15b2:	2201      	movs	r2, #1
    15b4:	408a      	lsls	r2, r1
    15b6:	0011      	movs	r1, r2
    15b8:	781a      	ldrb	r2, [r3, #0]
    15ba:	430a      	orrs	r2, r1
    15bc:	701a      	strb	r2, [r3, #0]
}
    15be:	bd10      	pop	{r4, pc}
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    15c0:	4a06      	ldr	r2, [pc, #24]	; (15dc <eink_ed013tc1_set_pixel+0x60>)
    15c2:	6812      	ldr	r2, [r2, #0]
    15c4:	6950      	ldr	r0, [r2, #20]
    15c6:	18c3      	adds	r3, r0, r3
        *byte &= ~(1 << bit_number);
    15c8:	2201      	movs	r2, #1
    15ca:	408a      	lsls	r2, r1
    15cc:	0011      	movs	r1, r2
    15ce:	781a      	ldrb	r2, [r3, #0]
    15d0:	438a      	bics	r2, r1
    15d2:	701a      	strb	r2, [r3, #0]
    15d4:	e7f3      	b.n	15be <eink_ed013tc1_set_pixel+0x42>
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	20000304 	.word	0x20000304
    15dc:	200003a0 	.word	0x200003a0

000015e0 <eink_send_raw_byte>:
{    
    15e0:	b570      	push	{r4, r5, r6, lr}
    if(!f_send)
    15e2:	2900      	cmp	r1, #0
    15e4:	d103      	bne.n	15ee <eink_send_raw_byte+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    15e6:	2220      	movs	r2, #32
    15e8:	23c0      	movs	r3, #192	; 0xc0
    15ea:	05db      	lsls	r3, r3, #23
    15ec:	615a      	str	r2, [r3, #20]
{    
    15ee:	2308      	movs	r3, #8
    15f0:	22c0      	movs	r2, #192	; 0xc0
    15f2:	05d2      	lsls	r2, r2, #23
    15f4:	2610      	movs	r6, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    15f6:	2480      	movs	r4, #128	; 0x80
    15f8:	e008      	b.n	160c <eink_send_raw_byte+0x2c>
    15fa:	6196      	str	r6, [r2, #24]
    15fc:	6194      	str	r4, [r2, #24]
        send_byte=send_byte << 1;
    15fe:	0040      	lsls	r0, r0, #1
    1600:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1602:	6154      	str	r4, [r2, #20]
    1604:	3b01      	subs	r3, #1
    1606:	b2db      	uxtb	r3, r3
    for (i=0;i<8;i++) {
    1608:	2b00      	cmp	r3, #0
    160a:	d004      	beq.n	1616 <eink_send_raw_byte+0x36>
        if (send_byte & 0x80) {
    160c:	b245      	sxtb	r5, r0
    160e:	2d00      	cmp	r5, #0
    1610:	dbf3      	blt.n	15fa <eink_send_raw_byte+0x1a>
    1612:	6156      	str	r6, [r2, #20]
    1614:	e7f2      	b.n	15fc <eink_send_raw_byte+0x1c>
    if(!f_send)
    1616:	2900      	cmp	r1, #0
    1618:	d103      	bne.n	1622 <eink_send_raw_byte+0x42>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    161a:	2220      	movs	r2, #32
    161c:	23c0      	movs	r3, #192	; 0xc0
    161e:	05db      	lsls	r3, r3, #23
    1620:	619a      	str	r2, [r3, #24]
}
    1622:	bd70      	pop	{r4, r5, r6, pc}

00001624 <eink_write_data>:
{    
    1624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1626:	000c      	movs	r4, r1
    1628:	0015      	movs	r5, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    162a:	26c0      	movs	r6, #192	; 0xc0
    162c:	05f6      	lsls	r6, r6, #23
    162e:	2701      	movs	r7, #1
    1630:	2394      	movs	r3, #148	; 0x94
    1632:	50f7      	str	r7, [r6, r3]
    1634:	3b74      	subs	r3, #116	; 0x74
    1636:	6173      	str	r3, [r6, #20]
    eink_send_raw_byte(command, f_send);
    1638:	2100      	movs	r1, #0
    163a:	4b07      	ldr	r3, [pc, #28]	; (1658 <eink_write_data+0x34>)
    163c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    163e:	2398      	movs	r3, #152	; 0x98
    1640:	50f7      	str	r7, [r6, r3]
    if (data_bytes != 0) {
    1642:	2d00      	cmp	r5, #0
    1644:	d007      	beq.n	1656 <eink_write_data+0x32>
    1646:	1965      	adds	r5, r4, r5
            eink_send_raw_byte(*data, f_send);
    1648:	4e03      	ldr	r6, [pc, #12]	; (1658 <eink_write_data+0x34>)
    164a:	7820      	ldrb	r0, [r4, #0]
    164c:	2100      	movs	r1, #0
    164e:	47b0      	blx	r6
            data++;
    1650:	3401      	adds	r4, #1
        for (i=0;i<data_bytes;i++) {
    1652:	42a5      	cmp	r5, r4
    1654:	d1f9      	bne.n	164a <eink_write_data+0x26>
}
    1656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1658:	000015e1 	.word	0x000015e1

0000165c <eink_ed013tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed013tc1_refresh_display_buffer(void)
{
    165c:	b5f0      	push	{r4, r5, r6, r7, lr}
    165e:	b087      	sub	sp, #28
    uint8_t eink_data[7];
    
    /* Enable power to the display */   
    eink_write_data(UC8173_PON, 0, 0);
    1660:	2200      	movs	r2, #0
    1662:	2100      	movs	r1, #0
    1664:	2004      	movs	r0, #4
    1666:	4b31      	ldr	r3, [pc, #196]	; (172c <eink_ed013tc1_refresh_display_buffer+0xd0>)
    1668:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    166a:	4f31      	ldr	r7, [pc, #196]	; (1730 <eink_ed013tc1_refresh_display_buffer+0xd4>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    166c:	4e31      	ldr	r6, [pc, #196]	; (1734 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    166e:	a801      	add	r0, sp, #4
    1670:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1672:	23c0      	movs	r3, #192	; 0xc0
    1674:	05db      	lsls	r3, r3, #23
    1676:	2580      	movs	r5, #128	; 0x80
    1678:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    167a:	22a0      	movs	r2, #160	; 0xa0
    167c:	492e      	ldr	r1, [pc, #184]	; (1738 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    167e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1680:	2190      	movs	r1, #144	; 0x90
    1682:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1684:	4053      	eors	r3, r2
    1686:	401c      	ands	r4, r3
    1688:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    168a:	a801      	add	r0, sp, #4
    168c:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8173_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    168e:	4225      	tst	r5, r4
    1690:	d0ed      	beq.n	166e <eink_ed013tc1_refresh_display_buffer+0x12>
    //eink_read_data(UC8173_TSC, LUT_idx, 2);
    //uc8173_wait_for_busy_low();

    //volatile uint16_t LUT_temperature = (LUT_idx[0] << 8) | LUT_idx[1];

	eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    1692:	2220      	movs	r2, #32
    1694:	2155      	movs	r1, #85	; 0x55
    1696:	2020      	movs	r0, #32
    1698:	4c24      	ldr	r4, [pc, #144]	; (172c <eink_ed013tc1_refresh_display_buffer+0xd0>)
    169a:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    169c:	2280      	movs	r2, #128	; 0x80
    169e:	0092      	lsls	r2, r2, #2
    16a0:	2181      	movs	r1, #129	; 0x81
    16a2:	2022      	movs	r0, #34	; 0x22
    16a4:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);
    16a6:	2280      	movs	r2, #128	; 0x80
    16a8:	2100      	movs	r1, #0
    16aa:	2026      	movs	r0, #38	; 0x26
    16ac:	47a0      	blx	r4
    uc8173_wait_for_busy_low();
    
    uc8173_send_gu2_lut();
	
    /* Display Refresh */
    eink_data[0] = 0x01; /* GU2 Update Mode */
    16ae:	a904      	add	r1, sp, #16
    16b0:	2301      	movs	r3, #1
    16b2:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    16b4:	2300      	movs	r3, #0
    16b6:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    16b8:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    16ba:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    16bc:	227f      	movs	r2, #127	; 0x7f
    16be:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    16c0:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    16c2:	33ff      	adds	r3, #255	; 0xff
    16c4:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    16c6:	3a78      	subs	r2, #120	; 0x78
    16c8:	2012      	movs	r0, #18
    16ca:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    16cc:	4f18      	ldr	r7, [pc, #96]	; (1730 <eink_ed013tc1_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    16ce:	4e19      	ldr	r6, [pc, #100]	; (1734 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    16d0:	a802      	add	r0, sp, #8
    16d2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    16d4:	23c0      	movs	r3, #192	; 0xc0
    16d6:	05db      	lsls	r3, r3, #23
    16d8:	2580      	movs	r5, #128	; 0x80
    16da:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    16dc:	22a0      	movs	r2, #160	; 0xa0
    16de:	4916      	ldr	r1, [pc, #88]	; (1738 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    16e0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    16e2:	2190      	movs	r1, #144	; 0x90
    16e4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    16e6:	4053      	eors	r3, r2
    16e8:	401c      	ands	r4, r3
    16ea:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    16ec:	a802      	add	r0, sp, #8
    16ee:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    16f0:	4225      	tst	r5, r4
    16f2:	d0ed      	beq.n	16d0 <eink_ed013tc1_refresh_display_buffer+0x74>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    eink_write_data(UC8173_POF, 0, 0);
    16f4:	2200      	movs	r2, #0
    16f6:	2100      	movs	r1, #0
    16f8:	2002      	movs	r0, #2
    16fa:	4b0c      	ldr	r3, [pc, #48]	; (172c <eink_ed013tc1_refresh_display_buffer+0xd0>)
    16fc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    16fe:	4f0c      	ldr	r7, [pc, #48]	; (1730 <eink_ed013tc1_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    1700:	4e0c      	ldr	r6, [pc, #48]	; (1734 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    1702:	a803      	add	r0, sp, #12
    1704:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1706:	23c0      	movs	r3, #192	; 0xc0
    1708:	05db      	lsls	r3, r3, #23
    170a:	2580      	movs	r5, #128	; 0x80
    170c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    170e:	22a0      	movs	r2, #160	; 0xa0
    1710:	4909      	ldr	r1, [pc, #36]	; (1738 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    1712:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1714:	2190      	movs	r1, #144	; 0x90
    1716:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1718:	4053      	eors	r3, r2
    171a:	401c      	ands	r4, r3
    171c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    171e:	a803      	add	r0, sp, #12
    1720:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    1722:	4225      	tst	r5, r4
    1724:	d1ed      	bne.n	1702 <eink_ed013tc1_refresh_display_buffer+0xa6>
    uc8173_wait_for_busy_high();
}
    1726:	b007      	add	sp, #28
    1728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	00001625 	.word	0x00001625
    1730:	0000034d 	.word	0x0000034d
    1734:	0000035b 	.word	0x0000035b
    1738:	41004400 	.word	0x41004400

0000173c <eink_ed029tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed029tc1_refresh_display_buffer(void)
{
    173c:	b5f0      	push	{r4, r5, r6, r7, lr}
    173e:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1740:	2200      	movs	r2, #0
    1742:	2100      	movs	r1, #0
    1744:	2004      	movs	r0, #4
    1746:	4c1a      	ldr	r4, [pc, #104]	; (17b0 <eink_ed029tc1_refresh_display_buffer+0x74>)
    1748:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    174a:	2200      	movs	r2, #0
    174c:	2100      	movs	r1, #0
    174e:	2012      	movs	r0, #18
    1750:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1752:	4f18      	ldr	r7, [pc, #96]	; (17b4 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1754:	4e18      	ldr	r6, [pc, #96]	; (17b8 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1756:	4668      	mov	r0, sp
    1758:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    175a:	23c0      	movs	r3, #192	; 0xc0
    175c:	05db      	lsls	r3, r3, #23
    175e:	2580      	movs	r5, #128	; 0x80
    1760:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1762:	22a0      	movs	r2, #160	; 0xa0
    1764:	4915      	ldr	r1, [pc, #84]	; (17bc <eink_ed029tc1_refresh_display_buffer+0x80>)
    1766:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1768:	2190      	movs	r1, #144	; 0x90
    176a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    176c:	4053      	eors	r3, r2
    176e:	401c      	ands	r4, r3
    1770:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1772:	4668      	mov	r0, sp
    1774:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8151_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1776:	4225      	tst	r5, r4
    1778:	d0ed      	beq.n	1756 <eink_ed029tc1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    177a:	2200      	movs	r2, #0
    177c:	2100      	movs	r1, #0
    177e:	2002      	movs	r0, #2
    1780:	4b0b      	ldr	r3, [pc, #44]	; (17b0 <eink_ed029tc1_refresh_display_buffer+0x74>)
    1782:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1784:	4f0b      	ldr	r7, [pc, #44]	; (17b4 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1786:	4e0c      	ldr	r6, [pc, #48]	; (17b8 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1788:	a801      	add	r0, sp, #4
    178a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    178c:	23c0      	movs	r3, #192	; 0xc0
    178e:	05db      	lsls	r3, r3, #23
    1790:	2580      	movs	r5, #128	; 0x80
    1792:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1794:	22a0      	movs	r2, #160	; 0xa0
    1796:	4909      	ldr	r1, [pc, #36]	; (17bc <eink_ed029tc1_refresh_display_buffer+0x80>)
    1798:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    179a:	2190      	movs	r1, #144	; 0x90
    179c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    179e:	4053      	eors	r3, r2
    17a0:	401c      	ands	r4, r3
    17a2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    17a4:	a801      	add	r0, sp, #4
    17a6:	47b0      	blx	r6
    17a8:	4225      	tst	r5, r4
    17aa:	d0ed      	beq.n	1788 <eink_ed029tc1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    17ac:	b003      	add	sp, #12
    17ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17b0:	00001625 	.word	0x00001625
    17b4:	0000034d 	.word	0x0000034d
    17b8:	0000035b 	.word	0x0000035b
    17bc:	41004400 	.word	0x41004400

000017c0 <eink_ed029tc1_put_display_buffer>:
{
    17c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17c2:	46c6      	mov	lr, r8
    17c4:	b500      	push	{lr}
    17c6:	b084      	sub	sp, #16
    17c8:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    17ca:	2200      	movs	r2, #0
    17cc:	2100      	movs	r1, #0
    17ce:	2004      	movs	r0, #4
    17d0:	4c44      	ldr	r4, [pc, #272]	; (18e4 <eink_ed029tc1_put_display_buffer+0x124>)
    17d2:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    17d4:	4b44      	ldr	r3, [pc, #272]	; (18e8 <eink_ed029tc1_put_display_buffer+0x128>)
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	6919      	ldr	r1, [r3, #16]
    17da:	2294      	movs	r2, #148	; 0x94
    17dc:	0152      	lsls	r2, r2, #5
    17de:	2010      	movs	r0, #16
    17e0:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    17e2:	2200      	movs	r2, #0
    17e4:	2100      	movs	r1, #0
    17e6:	2011      	movs	r0, #17
    17e8:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    17ea:	4d40      	ldr	r5, [pc, #256]	; (18ec <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    17ec:	4f40      	ldr	r7, [pc, #256]	; (18f0 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    17ee:	4668      	mov	r0, sp
    17f0:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    17f2:	23c0      	movs	r3, #192	; 0xc0
    17f4:	05db      	lsls	r3, r3, #23
    17f6:	2680      	movs	r6, #128	; 0x80
    17f8:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    17fa:	22a0      	movs	r2, #160	; 0xa0
    17fc:	493d      	ldr	r1, [pc, #244]	; (18f4 <eink_ed029tc1_put_display_buffer+0x134>)
    17fe:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1800:	2190      	movs	r1, #144	; 0x90
    1802:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1804:	4053      	eors	r3, r2
    1806:	401c      	ands	r4, r3
    1808:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    180a:	4668      	mov	r0, sp
    180c:	47b8      	blx	r7
    180e:	4226      	tst	r6, r4
    1810:	d0ed      	beq.n	17ee <eink_ed029tc1_put_display_buffer+0x2e>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1812:	4b35      	ldr	r3, [pc, #212]	; (18e8 <eink_ed029tc1_put_display_buffer+0x128>)
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	6959      	ldr	r1, [r3, #20]
    1818:	2294      	movs	r2, #148	; 0x94
    181a:	0152      	lsls	r2, r2, #5
    181c:	2013      	movs	r0, #19
    181e:	4c31      	ldr	r4, [pc, #196]	; (18e4 <eink_ed029tc1_put_display_buffer+0x124>)
    1820:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1822:	2200      	movs	r2, #0
    1824:	2100      	movs	r1, #0
    1826:	2011      	movs	r0, #17
    1828:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    182a:	4d30      	ldr	r5, [pc, #192]	; (18ec <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    182c:	4f30      	ldr	r7, [pc, #192]	; (18f0 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    182e:	a801      	add	r0, sp, #4
    1830:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1832:	23c0      	movs	r3, #192	; 0xc0
    1834:	05db      	lsls	r3, r3, #23
    1836:	2680      	movs	r6, #128	; 0x80
    1838:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    183a:	22a0      	movs	r2, #160	; 0xa0
    183c:	492d      	ldr	r1, [pc, #180]	; (18f4 <eink_ed029tc1_put_display_buffer+0x134>)
    183e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1840:	2190      	movs	r1, #144	; 0x90
    1842:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1844:	4053      	eors	r3, r2
    1846:	401c      	ands	r4, r3
    1848:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    184a:	a801      	add	r0, sp, #4
    184c:	47b8      	blx	r7
    184e:	4226      	tst	r6, r4
    1850:	d0ed      	beq.n	182e <eink_ed029tc1_put_display_buffer+0x6e>
    if(refresh_display) {
    1852:	4643      	mov	r3, r8
    1854:	2b00      	cmp	r3, #0
    1856:	d12b      	bne.n	18b0 <eink_ed029tc1_put_display_buffer+0xf0>
    eink_write_data(UC8151_POF, 0, 0);
    1858:	2200      	movs	r2, #0
    185a:	2100      	movs	r1, #0
    185c:	2002      	movs	r0, #2
    185e:	4b21      	ldr	r3, [pc, #132]	; (18e4 <eink_ed029tc1_put_display_buffer+0x124>)
    1860:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1862:	4f22      	ldr	r7, [pc, #136]	; (18ec <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1864:	4e22      	ldr	r6, [pc, #136]	; (18f0 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1866:	a803      	add	r0, sp, #12
    1868:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    186a:	23c0      	movs	r3, #192	; 0xc0
    186c:	05db      	lsls	r3, r3, #23
    186e:	2580      	movs	r5, #128	; 0x80
    1870:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1872:	22a0      	movs	r2, #160	; 0xa0
    1874:	491f      	ldr	r1, [pc, #124]	; (18f4 <eink_ed029tc1_put_display_buffer+0x134>)
    1876:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1878:	2190      	movs	r1, #144	; 0x90
    187a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    187c:	4053      	eors	r3, r2
    187e:	401c      	ands	r4, r3
    1880:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1882:	a803      	add	r0, sp, #12
    1884:	47b0      	blx	r6
    1886:	4225      	tst	r5, r4
    1888:	d0ed      	beq.n	1866 <eink_ed029tc1_put_display_buffer+0xa6>
    if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    188a:	4b1b      	ldr	r3, [pc, #108]	; (18f8 <eink_ed029tc1_put_display_buffer+0x138>)
    188c:	789b      	ldrb	r3, [r3, #2]
    188e:	2b00      	cmp	r3, #0
    1890:	d10a      	bne.n	18a8 <eink_ed029tc1_put_display_buffer+0xe8>
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1892:	4c15      	ldr	r4, [pc, #84]	; (18e8 <eink_ed029tc1_put_display_buffer+0x128>)
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1894:	2094      	movs	r0, #148	; 0x94
    1896:	0140      	lsls	r0, r0, #5
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1898:	6822      	ldr	r2, [r4, #0]
    189a:	6951      	ldr	r1, [r2, #20]
    189c:	5cc9      	ldrb	r1, [r1, r3]
    189e:	6912      	ldr	r2, [r2, #16]
    18a0:	54d1      	strb	r1, [r2, r3]
    18a2:	3301      	adds	r3, #1
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    18a4:	4283      	cmp	r3, r0
    18a6:	d1f7      	bne.n	1898 <eink_ed029tc1_put_display_buffer+0xd8>
}
    18a8:	b004      	add	sp, #16
    18aa:	bc04      	pop	{r2}
    18ac:	4690      	mov	r8, r2
    18ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    18b0:	2200      	movs	r2, #0
    18b2:	2100      	movs	r1, #0
    18b4:	2012      	movs	r0, #18
    18b6:	4b0b      	ldr	r3, [pc, #44]	; (18e4 <eink_ed029tc1_put_display_buffer+0x124>)
    18b8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    18ba:	4f0c      	ldr	r7, [pc, #48]	; (18ec <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    18bc:	4e0c      	ldr	r6, [pc, #48]	; (18f0 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    18be:	a802      	add	r0, sp, #8
    18c0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    18c2:	23c0      	movs	r3, #192	; 0xc0
    18c4:	05db      	lsls	r3, r3, #23
    18c6:	2580      	movs	r5, #128	; 0x80
    18c8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    18ca:	22a0      	movs	r2, #160	; 0xa0
    18cc:	4909      	ldr	r1, [pc, #36]	; (18f4 <eink_ed029tc1_put_display_buffer+0x134>)
    18ce:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    18d0:	2190      	movs	r1, #144	; 0x90
    18d2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    18d4:	4053      	eors	r3, r2
    18d6:	401c      	ands	r4, r3
    18d8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    18da:	a802      	add	r0, sp, #8
    18dc:	47b0      	blx	r6
    18de:	4225      	tst	r5, r4
    18e0:	d0ed      	beq.n	18be <eink_ed029tc1_put_display_buffer+0xfe>
    18e2:	e7b9      	b.n	1858 <eink_ed029tc1_put_display_buffer+0x98>
    18e4:	00001625 	.word	0x00001625
    18e8:	200003a0 	.word	0x200003a0
    18ec:	0000034d 	.word	0x0000034d
    18f0:	0000035b 	.word	0x0000035b
    18f4:	41004400 	.word	0x41004400
    18f8:	20000368 	.word	0x20000368

000018fc <eink_el026tr1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_el026tr1_refresh_display_buffer(void)
{
    18fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fe:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1900:	2200      	movs	r2, #0
    1902:	2100      	movs	r1, #0
    1904:	2004      	movs	r0, #4
    1906:	4c1a      	ldr	r4, [pc, #104]	; (1970 <eink_el026tr1_refresh_display_buffer+0x74>)
    1908:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    190a:	2200      	movs	r2, #0
    190c:	2100      	movs	r1, #0
    190e:	2012      	movs	r0, #18
    1910:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1912:	4f18      	ldr	r7, [pc, #96]	; (1974 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1914:	4e18      	ldr	r6, [pc, #96]	; (1978 <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1916:	4668      	mov	r0, sp
    1918:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    191a:	23c0      	movs	r3, #192	; 0xc0
    191c:	05db      	lsls	r3, r3, #23
    191e:	2580      	movs	r5, #128	; 0x80
    1920:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1922:	22a0      	movs	r2, #160	; 0xa0
    1924:	4915      	ldr	r1, [pc, #84]	; (197c <eink_el026tr1_refresh_display_buffer+0x80>)
    1926:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1928:	2190      	movs	r1, #144	; 0x90
    192a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    192c:	4053      	eors	r3, r2
    192e:	401c      	ands	r4, r3
    1930:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1932:	4668      	mov	r0, sp
    1934:	47b0      	blx	r6
    1936:	4225      	tst	r5, r4
    1938:	d0ed      	beq.n	1916 <eink_el026tr1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    193a:	2200      	movs	r2, #0
    193c:	2100      	movs	r1, #0
    193e:	2002      	movs	r0, #2
    1940:	4b0b      	ldr	r3, [pc, #44]	; (1970 <eink_el026tr1_refresh_display_buffer+0x74>)
    1942:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1944:	4f0b      	ldr	r7, [pc, #44]	; (1974 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1946:	4e0c      	ldr	r6, [pc, #48]	; (1978 <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1948:	a801      	add	r0, sp, #4
    194a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    194c:	23c0      	movs	r3, #192	; 0xc0
    194e:	05db      	lsls	r3, r3, #23
    1950:	2580      	movs	r5, #128	; 0x80
    1952:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1954:	22a0      	movs	r2, #160	; 0xa0
    1956:	4909      	ldr	r1, [pc, #36]	; (197c <eink_el026tr1_refresh_display_buffer+0x80>)
    1958:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    195a:	2190      	movs	r1, #144	; 0x90
    195c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    195e:	4053      	eors	r3, r2
    1960:	401c      	ands	r4, r3
    1962:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1964:	a801      	add	r0, sp, #4
    1966:	47b0      	blx	r6
    1968:	4225      	tst	r5, r4
    196a:	d0ed      	beq.n	1948 <eink_el026tr1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    196c:	b003      	add	sp, #12
    196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1970:	00001625 	.word	0x00001625
    1974:	0000034d 	.word	0x0000034d
    1978:	0000035b 	.word	0x0000035b
    197c:	41004400 	.word	0x41004400

00001980 <eink_el026tr1_put_display_buffer>:
{
    1980:	b5f0      	push	{r4, r5, r6, r7, lr}
    1982:	46c6      	mov	lr, r8
    1984:	b500      	push	{lr}
    1986:	b084      	sub	sp, #16
    1988:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    198a:	2200      	movs	r2, #0
    198c:	2100      	movs	r1, #0
    198e:	2004      	movs	r0, #4
    1990:	4c3c      	ldr	r4, [pc, #240]	; (1a84 <eink_el026tr1_put_display_buffer+0x104>)
    1992:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    1994:	4b3c      	ldr	r3, [pc, #240]	; (1a88 <eink_el026tr1_put_display_buffer+0x108>)
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	6919      	ldr	r1, [r3, #16]
    199a:	4a3c      	ldr	r2, [pc, #240]	; (1a8c <eink_el026tr1_put_display_buffer+0x10c>)
    199c:	2010      	movs	r0, #16
    199e:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    19a0:	2200      	movs	r2, #0
    19a2:	2100      	movs	r1, #0
    19a4:	2011      	movs	r0, #17
    19a6:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    19a8:	4d39      	ldr	r5, [pc, #228]	; (1a90 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    19aa:	4f3a      	ldr	r7, [pc, #232]	; (1a94 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    19ac:	4668      	mov	r0, sp
    19ae:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    19b0:	23c0      	movs	r3, #192	; 0xc0
    19b2:	05db      	lsls	r3, r3, #23
    19b4:	2680      	movs	r6, #128	; 0x80
    19b6:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    19b8:	22a0      	movs	r2, #160	; 0xa0
    19ba:	4937      	ldr	r1, [pc, #220]	; (1a98 <eink_el026tr1_put_display_buffer+0x118>)
    19bc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    19be:	2190      	movs	r1, #144	; 0x90
    19c0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    19c2:	4053      	eors	r3, r2
    19c4:	401c      	ands	r4, r3
    19c6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    19c8:	4668      	mov	r0, sp
    19ca:	47b8      	blx	r7
    19cc:	4226      	tst	r6, r4
    19ce:	d0ed      	beq.n	19ac <eink_el026tr1_put_display_buffer+0x2c>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    19d0:	4b2d      	ldr	r3, [pc, #180]	; (1a88 <eink_el026tr1_put_display_buffer+0x108>)
    19d2:	681b      	ldr	r3, [r3, #0]
    19d4:	6959      	ldr	r1, [r3, #20]
    19d6:	4a2d      	ldr	r2, [pc, #180]	; (1a8c <eink_el026tr1_put_display_buffer+0x10c>)
    19d8:	2013      	movs	r0, #19
    19da:	4c2a      	ldr	r4, [pc, #168]	; (1a84 <eink_el026tr1_put_display_buffer+0x104>)
    19dc:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    19de:	2200      	movs	r2, #0
    19e0:	2100      	movs	r1, #0
    19e2:	2011      	movs	r0, #17
    19e4:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    19e6:	4d2a      	ldr	r5, [pc, #168]	; (1a90 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    19e8:	4f2a      	ldr	r7, [pc, #168]	; (1a94 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    19ea:	a801      	add	r0, sp, #4
    19ec:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    19ee:	23c0      	movs	r3, #192	; 0xc0
    19f0:	05db      	lsls	r3, r3, #23
    19f2:	2680      	movs	r6, #128	; 0x80
    19f4:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    19f6:	22a0      	movs	r2, #160	; 0xa0
    19f8:	4927      	ldr	r1, [pc, #156]	; (1a98 <eink_el026tr1_put_display_buffer+0x118>)
    19fa:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    19fc:	2190      	movs	r1, #144	; 0x90
    19fe:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1a00:	4053      	eors	r3, r2
    1a02:	401c      	ands	r4, r3
    1a04:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1a06:	a801      	add	r0, sp, #4
    1a08:	47b8      	blx	r7
    1a0a:	4226      	tst	r6, r4
    1a0c:	d0ed      	beq.n	19ea <eink_el026tr1_put_display_buffer+0x6a>
    if(refresh_display) {
    1a0e:	4643      	mov	r3, r8
    1a10:	2b00      	cmp	r3, #0
    1a12:	d11c      	bne.n	1a4e <eink_el026tr1_put_display_buffer+0xce>
    eink_write_data(UC8151_POF, 0, 0);
    1a14:	2200      	movs	r2, #0
    1a16:	2100      	movs	r1, #0
    1a18:	2002      	movs	r0, #2
    1a1a:	4b1a      	ldr	r3, [pc, #104]	; (1a84 <eink_el026tr1_put_display_buffer+0x104>)
    1a1c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1a1e:	4f1c      	ldr	r7, [pc, #112]	; (1a90 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    1a20:	4e1c      	ldr	r6, [pc, #112]	; (1a94 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    1a22:	a803      	add	r0, sp, #12
    1a24:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1a26:	23c0      	movs	r3, #192	; 0xc0
    1a28:	05db      	lsls	r3, r3, #23
    1a2a:	2580      	movs	r5, #128	; 0x80
    1a2c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1a2e:	22a0      	movs	r2, #160	; 0xa0
    1a30:	4919      	ldr	r1, [pc, #100]	; (1a98 <eink_el026tr1_put_display_buffer+0x118>)
    1a32:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1a34:	2190      	movs	r1, #144	; 0x90
    1a36:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1a38:	4053      	eors	r3, r2
    1a3a:	401c      	ands	r4, r3
    1a3c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1a3e:	a803      	add	r0, sp, #12
    1a40:	47b0      	blx	r6
    1a42:	4225      	tst	r5, r4
    1a44:	d0ed      	beq.n	1a22 <eink_el026tr1_put_display_buffer+0xa2>
}
    1a46:	b004      	add	sp, #16
    1a48:	bc04      	pop	{r2}
    1a4a:	4690      	mov	r8, r2
    1a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    1a4e:	2200      	movs	r2, #0
    1a50:	2100      	movs	r1, #0
    1a52:	2012      	movs	r0, #18
    1a54:	4b0b      	ldr	r3, [pc, #44]	; (1a84 <eink_el026tr1_put_display_buffer+0x104>)
    1a56:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1a58:	4f0d      	ldr	r7, [pc, #52]	; (1a90 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    1a5a:	4e0e      	ldr	r6, [pc, #56]	; (1a94 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    1a5c:	a802      	add	r0, sp, #8
    1a5e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1a60:	23c0      	movs	r3, #192	; 0xc0
    1a62:	05db      	lsls	r3, r3, #23
    1a64:	2580      	movs	r5, #128	; 0x80
    1a66:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1a68:	22a0      	movs	r2, #160	; 0xa0
    1a6a:	490b      	ldr	r1, [pc, #44]	; (1a98 <eink_el026tr1_put_display_buffer+0x118>)
    1a6c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1a6e:	2190      	movs	r1, #144	; 0x90
    1a70:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1a72:	4053      	eors	r3, r2
    1a74:	401c      	ands	r4, r3
    1a76:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1a78:	a802      	add	r0, sp, #8
    1a7a:	47b0      	blx	r6
    1a7c:	4225      	tst	r5, r4
    1a7e:	d0ed      	beq.n	1a5c <eink_el026tr1_put_display_buffer+0xdc>
    1a80:	e7c8      	b.n	1a14 <eink_el026tr1_put_display_buffer+0x94>
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	00001625 	.word	0x00001625
    1a88:	200003a0 	.word	0x200003a0
    1a8c:	000015f8 	.word	0x000015f8
    1a90:	0000034d 	.word	0x0000034d
    1a94:	0000035b 	.word	0x0000035b
    1a98:	41004400 	.word	0x41004400

00001a9c <eink_hink_e0154a05_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_hink_e0154a05_refresh_display_buffer(void)
{
    1a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9e:	b085      	sub	sp, #20
    uint8_t eink_data[1];
    uint8_t temperature_value = 20;
    
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    1aa0:	4b23      	ldr	r3, [pc, #140]	; (1b30 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    1aa2:	785b      	ldrb	r3, [r3, #1]
    1aa4:	2b01      	cmp	r3, #1
    1aa6:	d036      	beq.n	1b16 <eink_hink_e0154a05_refresh_display_buffer+0x7a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
        else
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
        
    } else {
        eink_data[0] = 0xF7; /* Slow Update */
    1aa8:	22f7      	movs	r2, #247	; 0xf7
    1aaa:	ab03      	add	r3, sp, #12
    1aac:	701a      	strb	r2, [r3, #0]
    }

    /* Display Update Control 2 */
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    1aae:	2201      	movs	r2, #1
    1ab0:	a903      	add	r1, sp, #12
    1ab2:	2022      	movs	r0, #34	; 0x22
    1ab4:	4b1f      	ldr	r3, [pc, #124]	; (1b34 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    1ab6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1ab8:	4f1f      	ldr	r7, [pc, #124]	; (1b38 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    1aba:	4e20      	ldr	r6, [pc, #128]	; (1b3c <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    1abc:	a801      	add	r0, sp, #4
    1abe:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1ac0:	23c0      	movs	r3, #192	; 0xc0
    1ac2:	05db      	lsls	r3, r3, #23
    1ac4:	2580      	movs	r5, #128	; 0x80
    1ac6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1ac8:	22a0      	movs	r2, #160	; 0xa0
    1aca:	491d      	ldr	r1, [pc, #116]	; (1b40 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    1acc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ace:	2190      	movs	r1, #144	; 0x90
    1ad0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ad2:	4053      	eors	r3, r2
    1ad4:	401c      	ands	r4, r3
    1ad6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ad8:	a801      	add	r0, sp, #4
    1ada:	47b0      	blx	r6
 * hold the MCU until it returns LOW again.
 */
static inline void ssd1608_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(gpio_get_pin_level(EINK_BUSY));
    1adc:	4225      	tst	r5, r4
    1ade:	d1ed      	bne.n	1abc <eink_hink_e0154a05_refresh_display_buffer+0x20>
    ssd1608_wait_for_busy();
    
    /* Master Activation */
    eink_write_data(SSD1608_MA, 0, 0);
    1ae0:	2200      	movs	r2, #0
    1ae2:	2100      	movs	r1, #0
    1ae4:	2020      	movs	r0, #32
    1ae6:	4b13      	ldr	r3, [pc, #76]	; (1b34 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    1ae8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1aea:	4f13      	ldr	r7, [pc, #76]	; (1b38 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    1aec:	4e13      	ldr	r6, [pc, #76]	; (1b3c <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    1aee:	a802      	add	r0, sp, #8
    1af0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1af2:	23c0      	movs	r3, #192	; 0xc0
    1af4:	05db      	lsls	r3, r3, #23
    1af6:	2580      	movs	r5, #128	; 0x80
    1af8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1afa:	22a0      	movs	r2, #160	; 0xa0
    1afc:	4910      	ldr	r1, [pc, #64]	; (1b40 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    1afe:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1b00:	2190      	movs	r1, #144	; 0x90
    1b02:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1b04:	4053      	eors	r3, r2
    1b06:	401c      	ands	r4, r3
    1b08:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1b0a:	a802      	add	r0, sp, #8
    1b0c:	47b0      	blx	r6
    1b0e:	4225      	tst	r5, r4
    1b10:	d1ed      	bne.n	1aee <eink_hink_e0154a05_refresh_display_buffer+0x52>
    ssd1608_wait_for_busy();
}
    1b12:	b005      	add	sp, #20
    1b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    1b16:	4b06      	ldr	r3, [pc, #24]	; (1b30 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    1b18:	789b      	ldrb	r3, [r3, #2]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d103      	bne.n	1b26 <eink_hink_e0154a05_refresh_display_buffer+0x8a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    1b1e:	22c7      	movs	r2, #199	; 0xc7
    1b20:	ab03      	add	r3, sp, #12
    1b22:	701a      	strb	r2, [r3, #0]
    1b24:	e7c3      	b.n	1aae <eink_hink_e0154a05_refresh_display_buffer+0x12>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    1b26:	22ff      	movs	r2, #255	; 0xff
    1b28:	ab03      	add	r3, sp, #12
    1b2a:	701a      	strb	r2, [r3, #0]
    1b2c:	e7bf      	b.n	1aae <eink_hink_e0154a05_refresh_display_buffer+0x12>
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	20000328 	.word	0x20000328
    1b34:	00001625 	.word	0x00001625
    1b38:	0000034d 	.word	0x0000034d
    1b3c:	0000035b 	.word	0x0000035b
    1b40:	41004400 	.word	0x41004400

00001b44 <eink_ac057tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac057tc1_refresh_display_buffer(void)
{
    1b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b46:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    1b48:	2200      	movs	r2, #0
    1b4a:	2100      	movs	r1, #0
    1b4c:	2004      	movs	r0, #4
    1b4e:	4b25      	ldr	r3, [pc, #148]	; (1be4 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    1b50:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1b52:	4f25      	ldr	r7, [pc, #148]	; (1be8 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    1b54:	4e25      	ldr	r6, [pc, #148]	; (1bec <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    1b56:	a801      	add	r0, sp, #4
    1b58:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1b5a:	23c0      	movs	r3, #192	; 0xc0
    1b5c:	05db      	lsls	r3, r3, #23
    1b5e:	2580      	movs	r5, #128	; 0x80
    1b60:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1b62:	22a0      	movs	r2, #160	; 0xa0
    1b64:	4922      	ldr	r1, [pc, #136]	; (1bf0 <eink_ac057tc1_refresh_display_buffer+0xac>)
    1b66:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1b68:	2190      	movs	r1, #144	; 0x90
    1b6a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1b6c:	4053      	eors	r3, r2
    1b6e:	401c      	ands	r4, r3
    1b70:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1b72:	a801      	add	r0, sp, #4
    1b74:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8159_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1b76:	4225      	tst	r5, r4
    1b78:	d0ed      	beq.n	1b56 <eink_ac057tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    1b7a:	2200      	movs	r2, #0
    1b7c:	2100      	movs	r1, #0
    1b7e:	2012      	movs	r0, #18
    1b80:	4b18      	ldr	r3, [pc, #96]	; (1be4 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    1b82:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1b84:	4f18      	ldr	r7, [pc, #96]	; (1be8 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    1b86:	4e19      	ldr	r6, [pc, #100]	; (1bec <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    1b88:	a802      	add	r0, sp, #8
    1b8a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1b8c:	23c0      	movs	r3, #192	; 0xc0
    1b8e:	05db      	lsls	r3, r3, #23
    1b90:	2580      	movs	r5, #128	; 0x80
    1b92:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1b94:	22a0      	movs	r2, #160	; 0xa0
    1b96:	4916      	ldr	r1, [pc, #88]	; (1bf0 <eink_ac057tc1_refresh_display_buffer+0xac>)
    1b98:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1b9a:	2190      	movs	r1, #144	; 0x90
    1b9c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1b9e:	4053      	eors	r3, r2
    1ba0:	401c      	ands	r4, r3
    1ba2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ba4:	a802      	add	r0, sp, #8
    1ba6:	47b0      	blx	r6
    1ba8:	4225      	tst	r5, r4
    1baa:	d0ed      	beq.n	1b88 <eink_ac057tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    1bac:	2200      	movs	r2, #0
    1bae:	2100      	movs	r1, #0
    1bb0:	2002      	movs	r0, #2
    1bb2:	4b0c      	ldr	r3, [pc, #48]	; (1be4 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    1bb4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1bb6:	4f0c      	ldr	r7, [pc, #48]	; (1be8 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    1bb8:	4e0c      	ldr	r6, [pc, #48]	; (1bec <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    1bba:	a803      	add	r0, sp, #12
    1bbc:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1bbe:	23c0      	movs	r3, #192	; 0xc0
    1bc0:	05db      	lsls	r3, r3, #23
    1bc2:	2580      	movs	r5, #128	; 0x80
    1bc4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1bc6:	22a0      	movs	r2, #160	; 0xa0
    1bc8:	4909      	ldr	r1, [pc, #36]	; (1bf0 <eink_ac057tc1_refresh_display_buffer+0xac>)
    1bca:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1bcc:	2190      	movs	r1, #144	; 0x90
    1bce:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1bd0:	4053      	eors	r3, r2
    1bd2:	401c      	ands	r4, r3
    1bd4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1bd6:	a803      	add	r0, sp, #12
    1bd8:	47b0      	blx	r6
    1bda:	4225      	tst	r5, r4
    1bdc:	d0ed      	beq.n	1bba <eink_ac057tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    1bde:	b005      	add	sp, #20
    1be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	00001625 	.word	0x00001625
    1be8:	0000034d 	.word	0x0000034d
    1bec:	0000035b 	.word	0x0000035b
    1bf0:	41004400 	.word	0x41004400

00001bf4 <eink_ac057tc1_put_display_buffer>:
{
    1bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf6:	46c6      	mov	lr, r8
    1bf8:	b500      	push	{lr}
    1bfa:	b084      	sub	sp, #16
    1bfc:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC057TC1_DISPLAY_BUFFER_SIZE);
    1bfe:	4b37      	ldr	r3, [pc, #220]	; (1cdc <eink_ac057tc1_put_display_buffer+0xe8>)
    1c00:	681b      	ldr	r3, [r3, #0]
    1c02:	6919      	ldr	r1, [r3, #16]
    1c04:	4a36      	ldr	r2, [pc, #216]	; (1ce0 <eink_ac057tc1_put_display_buffer+0xec>)
    1c06:	2010      	movs	r0, #16
    1c08:	4b36      	ldr	r3, [pc, #216]	; (1ce4 <eink_ac057tc1_put_display_buffer+0xf0>)
    1c0a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1c0c:	4f36      	ldr	r7, [pc, #216]	; (1ce8 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    1c0e:	4e37      	ldr	r6, [pc, #220]	; (1cec <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    1c10:	4668      	mov	r0, sp
    1c12:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c14:	23c0      	movs	r3, #192	; 0xc0
    1c16:	05db      	lsls	r3, r3, #23
    1c18:	2580      	movs	r5, #128	; 0x80
    1c1a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c1c:	22a0      	movs	r2, #160	; 0xa0
    1c1e:	4934      	ldr	r1, [pc, #208]	; (1cf0 <eink_ac057tc1_put_display_buffer+0xfc>)
    1c20:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c22:	2190      	movs	r1, #144	; 0x90
    1c24:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c26:	4053      	eors	r3, r2
    1c28:	401c      	ands	r4, r3
    1c2a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c2c:	4668      	mov	r0, sp
    1c2e:	47b0      	blx	r6
    1c30:	4225      	tst	r5, r4
    1c32:	d0ed      	beq.n	1c10 <eink_ac057tc1_put_display_buffer+0x1c>
    if(refresh_display) {
    1c34:	4643      	mov	r3, r8
    1c36:	2b00      	cmp	r3, #0
    1c38:	d103      	bne.n	1c42 <eink_ac057tc1_put_display_buffer+0x4e>
}
    1c3a:	b004      	add	sp, #16
    1c3c:	bc04      	pop	{r2}
    1c3e:	4690      	mov	r8, r2
    1c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    1c42:	2200      	movs	r2, #0
    1c44:	2100      	movs	r1, #0
    1c46:	2004      	movs	r0, #4
    1c48:	4b26      	ldr	r3, [pc, #152]	; (1ce4 <eink_ac057tc1_put_display_buffer+0xf0>)
    1c4a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1c4c:	4f26      	ldr	r7, [pc, #152]	; (1ce8 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    1c4e:	4e27      	ldr	r6, [pc, #156]	; (1cec <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    1c50:	a801      	add	r0, sp, #4
    1c52:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c54:	23c0      	movs	r3, #192	; 0xc0
    1c56:	05db      	lsls	r3, r3, #23
    1c58:	2580      	movs	r5, #128	; 0x80
    1c5a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c5c:	22a0      	movs	r2, #160	; 0xa0
    1c5e:	4924      	ldr	r1, [pc, #144]	; (1cf0 <eink_ac057tc1_put_display_buffer+0xfc>)
    1c60:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c62:	2190      	movs	r1, #144	; 0x90
    1c64:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c66:	4053      	eors	r3, r2
    1c68:	401c      	ands	r4, r3
    1c6a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c6c:	a801      	add	r0, sp, #4
    1c6e:	47b0      	blx	r6
    1c70:	4225      	tst	r5, r4
    1c72:	d0ed      	beq.n	1c50 <eink_ac057tc1_put_display_buffer+0x5c>
        eink_write_data(UC8159_DRF, 0, 0);
    1c74:	2200      	movs	r2, #0
    1c76:	2100      	movs	r1, #0
    1c78:	2012      	movs	r0, #18
    1c7a:	4b1a      	ldr	r3, [pc, #104]	; (1ce4 <eink_ac057tc1_put_display_buffer+0xf0>)
    1c7c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1c7e:	4f1a      	ldr	r7, [pc, #104]	; (1ce8 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    1c80:	4e1a      	ldr	r6, [pc, #104]	; (1cec <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    1c82:	a802      	add	r0, sp, #8
    1c84:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c86:	23c0      	movs	r3, #192	; 0xc0
    1c88:	05db      	lsls	r3, r3, #23
    1c8a:	2580      	movs	r5, #128	; 0x80
    1c8c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c8e:	22a0      	movs	r2, #160	; 0xa0
    1c90:	4917      	ldr	r1, [pc, #92]	; (1cf0 <eink_ac057tc1_put_display_buffer+0xfc>)
    1c92:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c94:	2190      	movs	r1, #144	; 0x90
    1c96:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c98:	4053      	eors	r3, r2
    1c9a:	401c      	ands	r4, r3
    1c9c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c9e:	a802      	add	r0, sp, #8
    1ca0:	47b0      	blx	r6
    1ca2:	4225      	tst	r5, r4
    1ca4:	d0ed      	beq.n	1c82 <eink_ac057tc1_put_display_buffer+0x8e>
        eink_write_data(UC8159_POF, 0, 0);
    1ca6:	2200      	movs	r2, #0
    1ca8:	2100      	movs	r1, #0
    1caa:	2002      	movs	r0, #2
    1cac:	4b0d      	ldr	r3, [pc, #52]	; (1ce4 <eink_ac057tc1_put_display_buffer+0xf0>)
    1cae:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1cb0:	4f0d      	ldr	r7, [pc, #52]	; (1ce8 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    1cb2:	4e0e      	ldr	r6, [pc, #56]	; (1cec <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    1cb4:	a803      	add	r0, sp, #12
    1cb6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1cb8:	23c0      	movs	r3, #192	; 0xc0
    1cba:	05db      	lsls	r3, r3, #23
    1cbc:	2580      	movs	r5, #128	; 0x80
    1cbe:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1cc0:	22a0      	movs	r2, #160	; 0xa0
    1cc2:	490b      	ldr	r1, [pc, #44]	; (1cf0 <eink_ac057tc1_put_display_buffer+0xfc>)
    1cc4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1cc6:	2190      	movs	r1, #144	; 0x90
    1cc8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1cca:	4053      	eors	r3, r2
    1ccc:	401c      	ands	r4, r3
    1cce:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1cd0:	a803      	add	r0, sp, #12
    1cd2:	47b0      	blx	r6
    1cd4:	4225      	tst	r5, r4
    1cd6:	d0ed      	beq.n	1cb4 <eink_ac057tc1_put_display_buffer+0xc0>
    1cd8:	e7af      	b.n	1c3a <eink_ac057tc1_put_display_buffer+0x46>
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	200003a0 	.word	0x200003a0
    1ce0:	00020d00 	.word	0x00020d00
    1ce4:	00001625 	.word	0x00001625
    1ce8:	0000034d 	.word	0x0000034d
    1cec:	0000035b 	.word	0x0000035b
    1cf0:	41004400 	.word	0x41004400

00001cf4 <eink_ed057tc2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed057tc2_refresh_display_buffer(void)
{
    1cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cf6:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    1cf8:	2200      	movs	r2, #0
    1cfa:	2100      	movs	r1, #0
    1cfc:	2004      	movs	r0, #4
    1cfe:	4c1a      	ldr	r4, [pc, #104]	; (1d68 <eink_ed057tc2_refresh_display_buffer+0x74>)
    1d00:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    1d02:	2200      	movs	r2, #0
    1d04:	2100      	movs	r1, #0
    1d06:	2012      	movs	r0, #18
    1d08:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1d0a:	4f18      	ldr	r7, [pc, #96]	; (1d6c <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1d0c:	4e18      	ldr	r6, [pc, #96]	; (1d70 <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1d0e:	4668      	mov	r0, sp
    1d10:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d12:	23c0      	movs	r3, #192	; 0xc0
    1d14:	05db      	lsls	r3, r3, #23
    1d16:	2580      	movs	r5, #128	; 0x80
    1d18:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d1a:	22a0      	movs	r2, #160	; 0xa0
    1d1c:	4915      	ldr	r1, [pc, #84]	; (1d74 <eink_ed057tc2_refresh_display_buffer+0x80>)
    1d1e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d20:	2190      	movs	r1, #144	; 0x90
    1d22:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d24:	4053      	eors	r3, r2
    1d26:	401c      	ands	r4, r3
    1d28:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d2a:	4668      	mov	r0, sp
    1d2c:	47b0      	blx	r6
    1d2e:	4225      	tst	r5, r4
    1d30:	d0ed      	beq.n	1d0e <eink_ed057tc2_refresh_display_buffer+0x1a>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    1d32:	2200      	movs	r2, #0
    1d34:	2100      	movs	r1, #0
    1d36:	2002      	movs	r0, #2
    1d38:	4b0b      	ldr	r3, [pc, #44]	; (1d68 <eink_ed057tc2_refresh_display_buffer+0x74>)
    1d3a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1d3c:	4f0b      	ldr	r7, [pc, #44]	; (1d6c <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1d3e:	4e0c      	ldr	r6, [pc, #48]	; (1d70 <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1d40:	a801      	add	r0, sp, #4
    1d42:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d44:	23c0      	movs	r3, #192	; 0xc0
    1d46:	05db      	lsls	r3, r3, #23
    1d48:	2580      	movs	r5, #128	; 0x80
    1d4a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d4c:	22a0      	movs	r2, #160	; 0xa0
    1d4e:	4909      	ldr	r1, [pc, #36]	; (1d74 <eink_ed057tc2_refresh_display_buffer+0x80>)
    1d50:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d52:	2190      	movs	r1, #144	; 0x90
    1d54:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d56:	4053      	eors	r3, r2
    1d58:	401c      	ands	r4, r3
    1d5a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d5c:	a801      	add	r0, sp, #4
    1d5e:	47b0      	blx	r6
    1d60:	4225      	tst	r5, r4
    1d62:	d0ed      	beq.n	1d40 <eink_ed057tc2_refresh_display_buffer+0x4c>
    uc8159_wait_for_busy();
}
    1d64:	b003      	add	sp, #12
    1d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d68:	00001625 	.word	0x00001625
    1d6c:	0000034d 	.word	0x0000034d
    1d70:	0000035b 	.word	0x0000035b
    1d74:	41004400 	.word	0x41004400

00001d78 <eink_ed057tc2_put_display_buffer>:
{
    1d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d7a:	46c6      	mov	lr, r8
    1d7c:	b500      	push	{lr}
    1d7e:	b084      	sub	sp, #16
    1d80:	4680      	mov	r8, r0
    eink_write_data(UC8159_PON, 0, 0);
    1d82:	2200      	movs	r2, #0
    1d84:	2100      	movs	r1, #0
    1d86:	2004      	movs	r0, #4
    1d88:	4c2c      	ldr	r4, [pc, #176]	; (1e3c <eink_ed057tc2_put_display_buffer+0xc4>)
    1d8a:	47a0      	blx	r4
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED057TC2_DISPLAY_BUFFER_SIZE);
    1d8c:	4b2c      	ldr	r3, [pc, #176]	; (1e40 <eink_ed057tc2_put_display_buffer+0xc8>)
    1d8e:	681b      	ldr	r3, [r3, #0]
    1d90:	6919      	ldr	r1, [r3, #16]
    1d92:	4a2c      	ldr	r2, [pc, #176]	; (1e44 <eink_ed057tc2_put_display_buffer+0xcc>)
    1d94:	2010      	movs	r0, #16
    1d96:	47a0      	blx	r4
    eink_write_data(UC8159_DSP, 0, 0);
    1d98:	2200      	movs	r2, #0
    1d9a:	2100      	movs	r1, #0
    1d9c:	2011      	movs	r0, #17
    1d9e:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1da0:	4f29      	ldr	r7, [pc, #164]	; (1e48 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    1da2:	4e2a      	ldr	r6, [pc, #168]	; (1e4c <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    1da4:	a801      	add	r0, sp, #4
    1da6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1da8:	23c0      	movs	r3, #192	; 0xc0
    1daa:	05db      	lsls	r3, r3, #23
    1dac:	2580      	movs	r5, #128	; 0x80
    1dae:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1db0:	22a0      	movs	r2, #160	; 0xa0
    1db2:	4927      	ldr	r1, [pc, #156]	; (1e50 <eink_ed057tc2_put_display_buffer+0xd8>)
    1db4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1db6:	2190      	movs	r1, #144	; 0x90
    1db8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1dba:	4053      	eors	r3, r2
    1dbc:	401c      	ands	r4, r3
    1dbe:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1dc0:	a801      	add	r0, sp, #4
    1dc2:	47b0      	blx	r6
    1dc4:	4225      	tst	r5, r4
    1dc6:	d0ed      	beq.n	1da4 <eink_ed057tc2_put_display_buffer+0x2c>
    if(refresh_display) {
    1dc8:	4643      	mov	r3, r8
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d11c      	bne.n	1e08 <eink_ed057tc2_put_display_buffer+0x90>
    eink_write_data(UC8159_POF, 0, 0);
    1dce:	2200      	movs	r2, #0
    1dd0:	2100      	movs	r1, #0
    1dd2:	2002      	movs	r0, #2
    1dd4:	4b19      	ldr	r3, [pc, #100]	; (1e3c <eink_ed057tc2_put_display_buffer+0xc4>)
    1dd6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1dd8:	4f1b      	ldr	r7, [pc, #108]	; (1e48 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    1dda:	4e1c      	ldr	r6, [pc, #112]	; (1e4c <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    1ddc:	a803      	add	r0, sp, #12
    1dde:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1de0:	23c0      	movs	r3, #192	; 0xc0
    1de2:	05db      	lsls	r3, r3, #23
    1de4:	2580      	movs	r5, #128	; 0x80
    1de6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1de8:	22a0      	movs	r2, #160	; 0xa0
    1dea:	4919      	ldr	r1, [pc, #100]	; (1e50 <eink_ed057tc2_put_display_buffer+0xd8>)
    1dec:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1dee:	2190      	movs	r1, #144	; 0x90
    1df0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1df2:	4053      	eors	r3, r2
    1df4:	401c      	ands	r4, r3
    1df6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1df8:	a803      	add	r0, sp, #12
    1dfa:	47b0      	blx	r6
    1dfc:	4225      	tst	r5, r4
    1dfe:	d0ed      	beq.n	1ddc <eink_ed057tc2_put_display_buffer+0x64>
}
    1e00:	b004      	add	sp, #16
    1e02:	bc04      	pop	{r2}
    1e04:	4690      	mov	r8, r2
    1e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_DRF, 0, 0);
    1e08:	2200      	movs	r2, #0
    1e0a:	2100      	movs	r1, #0
    1e0c:	2012      	movs	r0, #18
    1e0e:	4b0b      	ldr	r3, [pc, #44]	; (1e3c <eink_ed057tc2_put_display_buffer+0xc4>)
    1e10:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1e12:	4f0d      	ldr	r7, [pc, #52]	; (1e48 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    1e14:	4e0d      	ldr	r6, [pc, #52]	; (1e4c <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    1e16:	a802      	add	r0, sp, #8
    1e18:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e1a:	23c0      	movs	r3, #192	; 0xc0
    1e1c:	05db      	lsls	r3, r3, #23
    1e1e:	2580      	movs	r5, #128	; 0x80
    1e20:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e22:	22a0      	movs	r2, #160	; 0xa0
    1e24:	490a      	ldr	r1, [pc, #40]	; (1e50 <eink_ed057tc2_put_display_buffer+0xd8>)
    1e26:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e28:	2190      	movs	r1, #144	; 0x90
    1e2a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e2c:	4053      	eors	r3, r2
    1e2e:	401c      	ands	r4, r3
    1e30:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e32:	a802      	add	r0, sp, #8
    1e34:	47b0      	blx	r6
    1e36:	4225      	tst	r5, r4
    1e38:	d0ed      	beq.n	1e16 <eink_ed057tc2_put_display_buffer+0x9e>
    1e3a:	e7c8      	b.n	1dce <eink_ed057tc2_put_display_buffer+0x56>
    1e3c:	00001625 	.word	0x00001625
    1e40:	200003a0 	.word	0x200003a0
    1e44:	00020d00 	.word	0x00020d00
    1e48:	0000034d 	.word	0x0000034d
    1e4c:	0000035b 	.word	0x0000035b
    1e50:	41004400 	.word	0x41004400

00001e54 <eink_ed028tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed028tc1_refresh_display_buffer(void)
{
    1e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e56:	b087      	sub	sp, #28
    uint8_t eink_data[9];
    
    /* Enable power to the display */
    eink_write_data(UC8177_PON, 0, 0);
    1e58:	2200      	movs	r2, #0
    1e5a:	2100      	movs	r1, #0
    1e5c:	2004      	movs	r0, #4
    1e5e:	4b22      	ldr	r3, [pc, #136]	; (1ee8 <eink_ed028tc1_refresh_display_buffer+0x94>)
    1e60:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1e62:	4f22      	ldr	r7, [pc, #136]	; (1eec <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    1e64:	4e22      	ldr	r6, [pc, #136]	; (1ef0 <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    1e66:	a801      	add	r0, sp, #4
    1e68:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e6a:	23c0      	movs	r3, #192	; 0xc0
    1e6c:	05db      	lsls	r3, r3, #23
    1e6e:	2580      	movs	r5, #128	; 0x80
    1e70:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e72:	22a0      	movs	r2, #160	; 0xa0
    1e74:	491f      	ldr	r1, [pc, #124]	; (1ef4 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    1e76:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e78:	2190      	movs	r1, #144	; 0x90
    1e7a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e7c:	4053      	eors	r3, r2
    1e7e:	401c      	ands	r4, r3
    1e80:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e82:	a801      	add	r0, sp, #4
    1e84:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8177_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1e86:	4225      	tst	r5, r4
    1e88:	d0ed      	beq.n	1e66 <eink_ed028tc1_refresh_display_buffer+0x12>
    
    uc8177_wait_for_busy_low();
    
    /* Display Refresh */
    eink_data[0] = 0x18; /* Update Mode 1 */
    1e8a:	a903      	add	r1, sp, #12
    1e8c:	2318      	movs	r3, #24
    1e8e:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1e90:	2300      	movs	r3, #0
    1e92:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1e94:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1e96:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    1e98:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    1e9a:	3302      	adds	r3, #2
    1e9c:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    1e9e:	3356      	adds	r3, #86	; 0x56
    1ea0:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    1ea2:	3b57      	subs	r3, #87	; 0x57
    1ea4:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    1ea6:	33df      	adds	r3, #223	; 0xdf
    1ea8:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    1eaa:	2209      	movs	r2, #9
    1eac:	2012      	movs	r0, #18
    1eae:	4c0e      	ldr	r4, [pc, #56]	; (1ee8 <eink_ed028tc1_refresh_display_buffer+0x94>)
    1eb0:	47a0      	blx	r4
    
    /* Disable power to the display */
    eink_write_data(UC8177_POF, 0, 0);
    1eb2:	2200      	movs	r2, #0
    1eb4:	2100      	movs	r1, #0
    1eb6:	2002      	movs	r0, #2
    1eb8:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1eba:	4f0c      	ldr	r7, [pc, #48]	; (1eec <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    1ebc:	4e0c      	ldr	r6, [pc, #48]	; (1ef0 <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    1ebe:	a802      	add	r0, sp, #8
    1ec0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1ec2:	23c0      	movs	r3, #192	; 0xc0
    1ec4:	05db      	lsls	r3, r3, #23
    1ec6:	2580      	movs	r5, #128	; 0x80
    1ec8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1eca:	22a0      	movs	r2, #160	; 0xa0
    1ecc:	4909      	ldr	r1, [pc, #36]	; (1ef4 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    1ece:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ed0:	2190      	movs	r1, #144	; 0x90
    1ed2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ed4:	4053      	eors	r3, r2
    1ed6:	401c      	ands	r4, r3
    1ed8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1eda:	a802      	add	r0, sp, #8
    1edc:	47b0      	blx	r6
    1ede:	4225      	tst	r5, r4
    1ee0:	d0ed      	beq.n	1ebe <eink_ed028tc1_refresh_display_buffer+0x6a>
    uc8177_wait_for_busy_low();
}
    1ee2:	b007      	add	sp, #28
    1ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	00001625 	.word	0x00001625
    1eec:	0000034d 	.word	0x0000034d
    1ef0:	0000035b 	.word	0x0000035b
    1ef4:	41004400 	.word	0x41004400

00001ef8 <eink_ed037tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed037tc1_refresh_display_buffer(void)
{
    1ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1efa:	b083      	sub	sp, #12
    /* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
    if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    1efc:	4b15      	ldr	r3, [pc, #84]	; (1f54 <eink_ed037tc1_refresh_display_buffer+0x5c>)
    1efe:	78db      	ldrb	r3, [r3, #3]
    1f00:	2b00      	cmp	r3, #0
    1f02:	d11f      	bne.n	1f44 <eink_ed037tc1_refresh_display_buffer+0x4c>
    {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    1f04:	2269      	movs	r2, #105	; 0x69
    1f06:	4914      	ldr	r1, [pc, #80]	; (1f58 <eink_ed037tc1_refresh_display_buffer+0x60>)
    1f08:	2032      	movs	r0, #50	; 0x32
    1f0a:	4b14      	ldr	r3, [pc, #80]	; (1f5c <eink_ed037tc1_refresh_display_buffer+0x64>)
    1f0c:	4798      	blx	r3
    } else {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    }
    /* Display Update */
    eink_write_data(SSD1677_DSP_ACT, 0, 0);
    1f0e:	2200      	movs	r2, #0
    1f10:	2100      	movs	r1, #0
    1f12:	2020      	movs	r0, #32
    1f14:	4b11      	ldr	r3, [pc, #68]	; (1f5c <eink_ed037tc1_refresh_display_buffer+0x64>)
    1f16:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1f18:	4f11      	ldr	r7, [pc, #68]	; (1f60 <eink_ed037tc1_refresh_display_buffer+0x68>)
	CRITICAL_SECTION_LEAVE();
    1f1a:	4e12      	ldr	r6, [pc, #72]	; (1f64 <eink_ed037tc1_refresh_display_buffer+0x6c>)
	CRITICAL_SECTION_ENTER();
    1f1c:	a801      	add	r0, sp, #4
    1f1e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f20:	23c0      	movs	r3, #192	; 0xc0
    1f22:	05db      	lsls	r3, r3, #23
    1f24:	2580      	movs	r5, #128	; 0x80
    1f26:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f28:	22a0      	movs	r2, #160	; 0xa0
    1f2a:	490f      	ldr	r1, [pc, #60]	; (1f68 <eink_ed037tc1_refresh_display_buffer+0x70>)
    1f2c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f2e:	2190      	movs	r1, #144	; 0x90
    1f30:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f32:	4053      	eors	r3, r2
    1f34:	401c      	ands	r4, r3
    1f36:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f38:	a801      	add	r0, sp, #4
    1f3a:	47b0      	blx	r6
#ifdef EINK_BUSY    
    while(gpio_get_pin_level(EINK_BUSY));
    1f3c:	4225      	tst	r5, r4
    1f3e:	d1ed      	bne.n	1f1c <eink_ed037tc1_refresh_display_buffer+0x24>
#endif
}
    1f40:	b003      	add	sp, #12
    1f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    1f44:	2269      	movs	r2, #105	; 0x69
    1f46:	4904      	ldr	r1, [pc, #16]	; (1f58 <eink_ed037tc1_refresh_display_buffer+0x60>)
    1f48:	316c      	adds	r1, #108	; 0x6c
    1f4a:	2032      	movs	r0, #50	; 0x32
    1f4c:	4b03      	ldr	r3, [pc, #12]	; (1f5c <eink_ed037tc1_refresh_display_buffer+0x64>)
    1f4e:	4798      	blx	r3
    1f50:	e7dd      	b.n	1f0e <eink_ed037tc1_refresh_display_buffer+0x16>
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	20000384 	.word	0x20000384
    1f58:	00004140 	.word	0x00004140
    1f5c:	00001625 	.word	0x00001625
    1f60:	0000034d 	.word	0x0000034d
    1f64:	0000035b 	.word	0x0000035b
    1f68:	41004400 	.word	0x41004400

00001f6c <eink_ed037tc1_put_display_buffer>:
{
    1f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f6e:	b083      	sub	sp, #12
    1f70:	0007      	movs	r7, r0
    eink_data[0] = 0x00;
    1f72:	ac01      	add	r4, sp, #4
    1f74:	2500      	movs	r5, #0
    1f76:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    1f78:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    1f7a:	2202      	movs	r2, #2
    1f7c:	0021      	movs	r1, r4
    1f7e:	204e      	movs	r0, #78	; 0x4e
    1f80:	4e1d      	ldr	r6, [pc, #116]	; (1ff8 <eink_ed037tc1_put_display_buffer+0x8c>)
    1f82:	47b0      	blx	r6
    eink_data[0] = 0x00;
    1f84:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    1f86:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    1f88:	2202      	movs	r2, #2
    1f8a:	0021      	movs	r1, r4
    1f8c:	204f      	movs	r0, #79	; 0x4f
    1f8e:	47b0      	blx	r6
    eink_write_data(SSD1677_RAM_BW, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED037TC1_DISPLAY_BUFFER_SIZE);
    1f90:	4b1a      	ldr	r3, [pc, #104]	; (1ffc <eink_ed037tc1_put_display_buffer+0x90>)
    1f92:	681b      	ldr	r3, [r3, #0]
    1f94:	6919      	ldr	r1, [r3, #16]
    1f96:	4a1a      	ldr	r2, [pc, #104]	; (2000 <STACK_SIZE>)
    1f98:	2024      	movs	r0, #36	; 0x24
    1f9a:	47b0      	blx	r6
    if(refresh_display) {
    1f9c:	2f00      	cmp	r7, #0
    1f9e:	d021      	beq.n	1fe4 <eink_ed037tc1_put_display_buffer+0x78>
        if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    1fa0:	4b18      	ldr	r3, [pc, #96]	; (2004 <STACK_SIZE+0x4>)
    1fa2:	78db      	ldrb	r3, [r3, #3]
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d11f      	bne.n	1fe8 <eink_ed037tc1_put_display_buffer+0x7c>
            eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    1fa8:	2269      	movs	r2, #105	; 0x69
    1faa:	4917      	ldr	r1, [pc, #92]	; (2008 <STACK_SIZE+0x8>)
    1fac:	2032      	movs	r0, #50	; 0x32
    1fae:	4b12      	ldr	r3, [pc, #72]	; (1ff8 <eink_ed037tc1_put_display_buffer+0x8c>)
    1fb0:	4798      	blx	r3
        eink_write_data(SSD1677_DSP_ACT, 0, 0);
    1fb2:	2200      	movs	r2, #0
    1fb4:	2100      	movs	r1, #0
    1fb6:	2020      	movs	r0, #32
    1fb8:	4b0f      	ldr	r3, [pc, #60]	; (1ff8 <eink_ed037tc1_put_display_buffer+0x8c>)
    1fba:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1fbc:	4f13      	ldr	r7, [pc, #76]	; (200c <STACK_SIZE+0xc>)
	CRITICAL_SECTION_LEAVE();
    1fbe:	4e14      	ldr	r6, [pc, #80]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_ENTER();
    1fc0:	4668      	mov	r0, sp
    1fc2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1fc4:	23c0      	movs	r3, #192	; 0xc0
    1fc6:	05db      	lsls	r3, r3, #23
    1fc8:	2580      	movs	r5, #128	; 0x80
    1fca:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fcc:	22a0      	movs	r2, #160	; 0xa0
    1fce:	4911      	ldr	r1, [pc, #68]	; (2014 <STACK_SIZE+0x14>)
    1fd0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fd2:	2190      	movs	r1, #144	; 0x90
    1fd4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fd6:	4053      	eors	r3, r2
    1fd8:	401c      	ands	r4, r3
    1fda:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1fdc:	4668      	mov	r0, sp
    1fde:	47b0      	blx	r6
        while(gpio_get_pin_level(EINK_BUSY));
    1fe0:	4225      	tst	r5, r4
    1fe2:	d1ed      	bne.n	1fc0 <eink_ed037tc1_put_display_buffer+0x54>
}
    1fe4:	b003      	add	sp, #12
    1fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    1fe8:	2269      	movs	r2, #105	; 0x69
    1fea:	4907      	ldr	r1, [pc, #28]	; (2008 <STACK_SIZE+0x8>)
    1fec:	316c      	adds	r1, #108	; 0x6c
    1fee:	2032      	movs	r0, #50	; 0x32
    1ff0:	4b01      	ldr	r3, [pc, #4]	; (1ff8 <eink_ed037tc1_put_display_buffer+0x8c>)
    1ff2:	4798      	blx	r3
    1ff4:	e7dd      	b.n	1fb2 <eink_ed037tc1_put_display_buffer+0x46>
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	00001625 	.word	0x00001625
    1ffc:	200003a0 	.word	0x200003a0
    2000:	000041a0 	.word	0x000041a0
    2004:	20000384 	.word	0x20000384
    2008:	00004140 	.word	0x00004140
    200c:	0000034d 	.word	0x0000034d
    2010:	0000035b 	.word	0x0000035b
    2014:	41004400 	.word	0x41004400

00002018 <eink_ed037tc1_put_partial_display_buffer>:
{
    2018:	b5f0      	push	{r4, r5, r6, r7, lr}
    201a:	46de      	mov	lr, fp
    201c:	4657      	mov	r7, sl
    201e:	464e      	mov	r6, r9
    2020:	4645      	mov	r5, r8
    2022:	b5e0      	push	{r5, r6, r7, lr}
    2024:	b085      	sub	sp, #20
    2026:	4681      	mov	r9, r0
    2028:	000c      	movs	r4, r1
	if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
    202a:	4940      	ldr	r1, [pc, #256]	; (212c <eink_ed037tc1_put_partial_display_buffer+0x114>)
    202c:	7809      	ldrb	r1, [r1, #0]
    202e:	2901      	cmp	r1, #1
    2030:	d050      	beq.n	20d4 <eink_ed037tc1_put_partial_display_buffer+0xbc>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
    2032:	493e      	ldr	r1, [pc, #248]	; (212c <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2034:	7809      	ldrb	r1, [r1, #0]
    2036:	2902      	cmp	r1, #2
    2038:	d068      	beq.n	210c <eink_ed037tc1_put_partial_display_buffer+0xf4>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
    203a:	493c      	ldr	r1, [pc, #240]	; (212c <eink_ed037tc1_put_partial_display_buffer+0x114>)
    203c:	7809      	ldrb	r1, [r1, #0]
    203e:	2903      	cmp	r1, #3
    2040:	d06c      	beq.n	211c <eink_ed037tc1_put_partial_display_buffer+0x104>
        x1_set = (start_x - (start_x % 8)) / 8;
    2042:	10c6      	asrs	r6, r0, #3
        byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * start_y);
    2044:	00a1      	lsls	r1, r4, #2
    2046:	1909      	adds	r1, r1, r4
    2048:	00c8      	lsls	r0, r1, #3
    204a:	1a41      	subs	r1, r0, r1
    204c:	1876      	adds	r6, r6, r1
        mod_calc_x = (start_x - (start_x % 8));
    204e:	2107      	movs	r1, #7
    2050:	4648      	mov	r0, r9
    2052:	4388      	bics	r0, r1
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    2054:	b2c0      	uxtb	r0, r0
    2056:	1880      	adds	r0, r0, r2
        mod_calc_w = 8 - (window_w % 8);
    2058:	2507      	movs	r5, #7
    205a:	402a      	ands	r2, r5
    205c:	2508      	movs	r5, #8
    205e:	1aaa      	subs	r2, r5, r2
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    2060:	b2d2      	uxtb	r2, r2
    2062:	1882      	adds	r2, r0, r2
    2064:	17d0      	asrs	r0, r2, #31
    2066:	4001      	ands	r1, r0
    2068:	1889      	adds	r1, r1, r2
    206a:	10c9      	asrs	r1, r1, #3
    206c:	b28a      	uxth	r2, r1
    206e:	9201      	str	r2, [sp, #4]
    display_buffer = (uint8_t*) ptr_eink_gfx_config->display_buffer_1_ptr;
    2070:	4a2f      	ldr	r2, [pc, #188]	; (2130 <eink_ed037tc1_put_partial_display_buffer+0x118>)
    2072:	6812      	ldr	r2, [r2, #0]
    2074:	6912      	ldr	r2, [r2, #16]
    display_buffer += byte_set;
    2076:	1996      	adds	r6, r2, r6
    for(i=0; i<window_set_h; i++)
    2078:	2b00      	cmp	r3, #0
    207a:	d024      	beq.n	20c6 <eink_ed037tc1_put_partial_display_buffer+0xae>
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    207c:	464a      	mov	r2, r9
    207e:	0592      	lsls	r2, r2, #22
    2080:	0f92      	lsrs	r2, r2, #30
    2082:	4692      	mov	sl, r2
    2084:	18e3      	adds	r3, r4, r3
    2086:	b29b      	uxth	r3, r3
    2088:	4698      	mov	r8, r3
	    eink_data[0] = (window_set_x & 0xFF);
    208a:	ad03      	add	r5, sp, #12
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    208c:	4f29      	ldr	r7, [pc, #164]	; (2134 <eink_ed037tc1_put_partial_display_buffer+0x11c>)
	    eink_data[1] = (temp_y >> 8) & 0x3;
    208e:	2303      	movs	r3, #3
    2090:	469b      	mov	fp, r3
	    eink_data[0] = (window_set_x & 0xFF);
    2092:	464b      	mov	r3, r9
    2094:	702b      	strb	r3, [r5, #0]
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    2096:	4653      	mov	r3, sl
    2098:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    209a:	2202      	movs	r2, #2
    209c:	0029      	movs	r1, r5
    209e:	204e      	movs	r0, #78	; 0x4e
    20a0:	47b8      	blx	r7
	    eink_data[0] = (temp_y & 0xFF);
    20a2:	702c      	strb	r4, [r5, #0]
	    eink_data[1] = (temp_y >> 8) & 0x3;
    20a4:	0a23      	lsrs	r3, r4, #8
    20a6:	465a      	mov	r2, fp
    20a8:	4013      	ands	r3, r2
    20aa:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    20ac:	2202      	movs	r2, #2
    20ae:	0029      	movs	r1, r5
    20b0:	204f      	movs	r0, #79	; 0x4f
    20b2:	47b8      	blx	r7
	    display_buffer += (GFX_ED037TC1_MAX_WIDTH / 8);
    20b4:	3623      	adds	r6, #35	; 0x23
	    eink_write_data(SSD1677_RAM_BW, display_buffer, window_set_w);
    20b6:	9a01      	ldr	r2, [sp, #4]
    20b8:	0031      	movs	r1, r6
    20ba:	2024      	movs	r0, #36	; 0x24
    20bc:	47b8      	blx	r7
    20be:	3401      	adds	r4, #1
    20c0:	b2a4      	uxth	r4, r4
    for(i=0; i<window_set_h; i++)
    20c2:	4544      	cmp	r4, r8
    20c4:	d1e5      	bne.n	2092 <eink_ed037tc1_put_partial_display_buffer+0x7a>
}
    20c6:	b005      	add	sp, #20
    20c8:	bc3c      	pop	{r2, r3, r4, r5}
    20ca:	4690      	mov	r8, r2
    20cc:	4699      	mov	r9, r3
    20ce:	46a2      	mov	sl, r4
    20d0:	46ab      	mov	fp, r5
    20d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - (((start_y + window_h) - ((start_y + window_h) % 8)) / 8);
    20d4:	18e6      	adds	r6, r4, r3
    20d6:	3106      	adds	r1, #6
    20d8:	438e      	bics	r6, r1
    20da:	0031      	movs	r1, r6
    20dc:	17f0      	asrs	r0, r6, #31
    20de:	2607      	movs	r6, #7
    20e0:	4006      	ands	r6, r0
    20e2:	1876      	adds	r6, r6, r1
    20e4:	10f6      	asrs	r6, r6, #3
    20e6:	4276      	negs	r6, r6
    20e8:	3622      	adds	r6, #34	; 0x22
		byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (start_x));
    20ea:	4649      	mov	r1, r9
    20ec:	0089      	lsls	r1, r1, #2
    20ee:	4449      	add	r1, r9
    20f0:	00c8      	lsls	r0, r1, #3
    20f2:	1a41      	subs	r1, r0, r1
    20f4:	1876      	adds	r6, r6, r1
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    20f6:	218c      	movs	r1, #140	; 0x8c
    20f8:	0049      	lsls	r1, r1, #1
    20fa:	1ac9      	subs	r1, r1, r3
    20fc:	1b09      	subs	r1, r1, r4
		window_set_w = window_h / 8;
    20fe:	08db      	lsrs	r3, r3, #3
    2100:	9301      	str	r3, [sp, #4]
		window_set_h = window_w;
    2102:	0013      	movs	r3, r2
		window_set_y = start_x;
    2104:	464c      	mov	r4, r9
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    2106:	b28a      	uxth	r2, r1
    2108:	4691      	mov	r9, r2
    210a:	e7b1      	b.n	2070 <eink_ed037tc1_put_partial_display_buffer+0x58>
        x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((start_x - (start_x % 8)) / 8);
    210c:	10c6      	asrs	r6, r0, #3
    210e:	490a      	ldr	r1, [pc, #40]	; (2138 <eink_ed037tc1_put_partial_display_buffer+0x120>)
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
    2110:	1b89      	subs	r1, r1, r6
    2112:	2623      	movs	r6, #35	; 0x23
    2114:	4276      	negs	r6, r6
    2116:	4366      	muls	r6, r4
    2118:	198e      	adds	r6, r1, r6
    211a:	e7a9      	b.n	2070 <eink_ed037tc1_put_partial_display_buffer+0x58>
        y1_set = (start_y - (start_y % 8)) / 8;
    211c:	10e2      	asrs	r2, r4, #3
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
    211e:	3926      	subs	r1, #38	; 0x26
    2120:	4361      	muls	r1, r4
    2122:	1856      	adds	r6, r2, r1
    2124:	4a05      	ldr	r2, [pc, #20]	; (213c <eink_ed037tc1_put_partial_display_buffer+0x124>)
    2126:	4694      	mov	ip, r2
    2128:	4466      	add	r6, ip
    212a:	e7a1      	b.n	2070 <eink_ed037tc1_put_partial_display_buffer+0x58>
    212c:	20000384 	.word	0x20000384
    2130:	200003a0 	.word	0x200003a0
    2134:	00001625 	.word	0x00001625
    2138:	00004294 	.word	0x00004294
    213c:	0000417d 	.word	0x0000417d

00002140 <eink_hink_e0154a05_put_display_buffer>:
{
    2140:	b5f0      	push	{r4, r5, r6, r7, lr}
    2142:	46c6      	mov	lr, r8
    2144:	b500      	push	{lr}
    2146:	b086      	sub	sp, #24
    2148:	4680      	mov	r8, r0
    eink_data[0] = 0x7D;
    214a:	ac05      	add	r4, sp, #20
    214c:	237d      	movs	r3, #125	; 0x7d
    214e:	7023      	strb	r3, [r4, #0]
    eink_write_data(SSD1608_WVCOM, eink_data, 1);
    2150:	2201      	movs	r2, #1
    2152:	0021      	movs	r1, r4
    2154:	202c      	movs	r0, #44	; 0x2c
    2156:	4d3e      	ldr	r5, [pc, #248]	; (2250 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2158:	47a8      	blx	r5
    eink_data[0] = 0x18;
    215a:	2718      	movs	r7, #24
    215c:	7027      	strb	r7, [r4, #0]
    eink_data[1] = 0x00;
    215e:	2600      	movs	r6, #0
    2160:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RXAS, eink_data, 2);
    2162:	2202      	movs	r2, #2
    2164:	0021      	movs	r1, r4
    2166:	2044      	movs	r0, #68	; 0x44
    2168:	47a8      	blx	r5
    eink_data[0] = 0x18;
    216a:	7027      	strb	r7, [r4, #0]
    eink_write_data(SSD1608_RXC, eink_data, 1);
    216c:	2201      	movs	r2, #1
    216e:	0021      	movs	r1, r4
    2170:	204e      	movs	r0, #78	; 0x4e
    2172:	47a8      	blx	r5
    eink_data[0] = 0xC7;
    2174:	23c7      	movs	r3, #199	; 0xc7
    2176:	7023      	strb	r3, [r4, #0]
    eink_data[1] = 0x00;
    2178:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RYC, eink_data, 2);
    217a:	2202      	movs	r2, #2
    217c:	0021      	movs	r1, r4
    217e:	204f      	movs	r0, #79	; 0x4f
    2180:	47a8      	blx	r5
    eink_write_data(SSD1608_WR, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_HINK_E0154A05_DISPLAY_BUFFER_SIZE);
    2182:	4b34      	ldr	r3, [pc, #208]	; (2254 <eink_hink_e0154a05_put_display_buffer+0x114>)
    2184:	681b      	ldr	r3, [r3, #0]
    2186:	6919      	ldr	r1, [r3, #16]
    2188:	4a33      	ldr	r2, [pc, #204]	; (2258 <eink_hink_e0154a05_put_display_buffer+0x118>)
    218a:	2024      	movs	r0, #36	; 0x24
    218c:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    218e:	4f33      	ldr	r7, [pc, #204]	; (225c <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2190:	4e33      	ldr	r6, [pc, #204]	; (2260 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2192:	a802      	add	r0, sp, #8
    2194:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2196:	23c0      	movs	r3, #192	; 0xc0
    2198:	05db      	lsls	r3, r3, #23
    219a:	2580      	movs	r5, #128	; 0x80
    219c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    219e:	22a0      	movs	r2, #160	; 0xa0
    21a0:	4930      	ldr	r1, [pc, #192]	; (2264 <eink_hink_e0154a05_put_display_buffer+0x124>)
    21a2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21a4:	2190      	movs	r1, #144	; 0x90
    21a6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21a8:	4053      	eors	r3, r2
    21aa:	401c      	ands	r4, r3
    21ac:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    21ae:	a802      	add	r0, sp, #8
    21b0:	47b0      	blx	r6
    21b2:	4225      	tst	r5, r4
    21b4:	d1ed      	bne.n	2192 <eink_hink_e0154a05_put_display_buffer+0x52>
    if(refresh_display) {
    21b6:	4643      	mov	r3, r8
    21b8:	2b00      	cmp	r3, #0
    21ba:	d103      	bne.n	21c4 <eink_hink_e0154a05_put_display_buffer+0x84>
}
    21bc:	b006      	add	sp, #24
    21be:	bc04      	pop	{r2}
    21c0:	4690      	mov	r8, r2
    21c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    21c4:	4b28      	ldr	r3, [pc, #160]	; (2268 <eink_hink_e0154a05_put_display_buffer+0x128>)
    21c6:	785b      	ldrb	r3, [r3, #1]
    21c8:	2b01      	cmp	r3, #1
    21ca:	d035      	beq.n	2238 <eink_hink_e0154a05_put_display_buffer+0xf8>
        eink_data[0] = 0xF7; /* Slow Update */
    21cc:	22f7      	movs	r2, #247	; 0xf7
    21ce:	ab01      	add	r3, sp, #4
    21d0:	701a      	strb	r2, [r3, #0]
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    21d2:	2201      	movs	r2, #1
    21d4:	a901      	add	r1, sp, #4
    21d6:	2022      	movs	r0, #34	; 0x22
    21d8:	4b1d      	ldr	r3, [pc, #116]	; (2250 <eink_hink_e0154a05_put_display_buffer+0x110>)
    21da:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    21dc:	4f1f      	ldr	r7, [pc, #124]	; (225c <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    21de:	4e20      	ldr	r6, [pc, #128]	; (2260 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    21e0:	a803      	add	r0, sp, #12
    21e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    21e4:	23c0      	movs	r3, #192	; 0xc0
    21e6:	05db      	lsls	r3, r3, #23
    21e8:	2580      	movs	r5, #128	; 0x80
    21ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    21ec:	22a0      	movs	r2, #160	; 0xa0
    21ee:	491d      	ldr	r1, [pc, #116]	; (2264 <eink_hink_e0154a05_put_display_buffer+0x124>)
    21f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21f2:	2190      	movs	r1, #144	; 0x90
    21f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21f6:	4053      	eors	r3, r2
    21f8:	401c      	ands	r4, r3
    21fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    21fc:	a803      	add	r0, sp, #12
    21fe:	47b0      	blx	r6
    2200:	4225      	tst	r5, r4
    2202:	d1ed      	bne.n	21e0 <eink_hink_e0154a05_put_display_buffer+0xa0>
    eink_write_data(SSD1608_MA, 0, 0);
    2204:	2200      	movs	r2, #0
    2206:	2100      	movs	r1, #0
    2208:	2020      	movs	r0, #32
    220a:	4b11      	ldr	r3, [pc, #68]	; (2250 <eink_hink_e0154a05_put_display_buffer+0x110>)
    220c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    220e:	4f13      	ldr	r7, [pc, #76]	; (225c <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2210:	4e13      	ldr	r6, [pc, #76]	; (2260 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2212:	a804      	add	r0, sp, #16
    2214:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2216:	23c0      	movs	r3, #192	; 0xc0
    2218:	05db      	lsls	r3, r3, #23
    221a:	2580      	movs	r5, #128	; 0x80
    221c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    221e:	22a0      	movs	r2, #160	; 0xa0
    2220:	4910      	ldr	r1, [pc, #64]	; (2264 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2222:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2224:	2190      	movs	r1, #144	; 0x90
    2226:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2228:	4053      	eors	r3, r2
    222a:	401c      	ands	r4, r3
    222c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    222e:	a804      	add	r0, sp, #16
    2230:	47b0      	blx	r6
    2232:	4225      	tst	r5, r4
    2234:	d1ed      	bne.n	2212 <eink_hink_e0154a05_put_display_buffer+0xd2>
    2236:	e7c1      	b.n	21bc <eink_hink_e0154a05_put_display_buffer+0x7c>
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2238:	4b0b      	ldr	r3, [pc, #44]	; (2268 <eink_hink_e0154a05_put_display_buffer+0x128>)
    223a:	789b      	ldrb	r3, [r3, #2]
    223c:	2b00      	cmp	r3, #0
    223e:	d103      	bne.n	2248 <eink_hink_e0154a05_put_display_buffer+0x108>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    2240:	22c7      	movs	r2, #199	; 0xc7
    2242:	ab01      	add	r3, sp, #4
    2244:	701a      	strb	r2, [r3, #0]
    2246:	e7c4      	b.n	21d2 <eink_hink_e0154a05_put_display_buffer+0x92>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    2248:	22ff      	movs	r2, #255	; 0xff
    224a:	ab01      	add	r3, sp, #4
    224c:	701a      	strb	r2, [r3, #0]
    224e:	e7c0      	b.n	21d2 <eink_hink_e0154a05_put_display_buffer+0x92>
    2250:	00001625 	.word	0x00001625
    2254:	200003a0 	.word	0x200003a0
    2258:	00001388 	.word	0x00001388
    225c:	0000034d 	.word	0x0000034d
    2260:	0000035b 	.word	0x0000035b
    2264:	41004400 	.word	0x41004400
    2268:	20000328 	.word	0x20000328

0000226c <eink_ed028tc1_put_display_buffer>:
{
    226c:	b5f0      	push	{r4, r5, r6, r7, lr}
    226e:	b089      	sub	sp, #36	; 0x24
    2270:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2272:	a906      	add	r1, sp, #24
    2274:	2300      	movs	r3, #0
    2276:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2278:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    227a:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00;
    227c:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x02; /* W = 600 */
    227e:	3302      	adds	r3, #2
    2280:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x58;
    2282:	3356      	adds	r3, #86	; 0x56
    2284:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x01; /* H = 480 */
    2286:	3b57      	subs	r3, #87	; 0x57
    2288:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0xE0;
    228a:	33df      	adds	r3, #223	; 0xdf
    228c:	71cb      	strb	r3, [r1, #7]
    eink_write_data(UC8177_DTMW, eink_data, 8);
    228e:	2208      	movs	r2, #8
    2290:	2083      	movs	r0, #131	; 0x83
    2292:	4c33      	ldr	r4, [pc, #204]	; (2360 <eink_ed028tc1_put_display_buffer+0xf4>)
    2294:	47a0      	blx	r4
    eink_write_data(UC8177_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED028TC1_DISPLAY_BUFFER_SIZE);
    2296:	4b33      	ldr	r3, [pc, #204]	; (2364 <eink_ed028tc1_put_display_buffer+0xf8>)
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	6919      	ldr	r1, [r3, #16]
    229c:	4a32      	ldr	r2, [pc, #200]	; (2368 <eink_ed028tc1_put_display_buffer+0xfc>)
    229e:	2010      	movs	r0, #16
    22a0:	47a0      	blx	r4
    if((uc8177_global_instance.display_config.display_rotation == ROTATE_90) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180)) {
    22a2:	4b32      	ldr	r3, [pc, #200]	; (236c <eink_ed028tc1_put_display_buffer+0x100>)
    22a4:	781b      	ldrb	r3, [r3, #0]
    22a6:	2b01      	cmp	r3, #1
    22a8:	d00f      	beq.n	22ca <eink_ed028tc1_put_display_buffer+0x5e>
    22aa:	4b30      	ldr	r3, [pc, #192]	; (236c <eink_ed028tc1_put_display_buffer+0x100>)
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	2b02      	cmp	r3, #2
    22b0:	d00b      	beq.n	22ca <eink_ed028tc1_put_display_buffer+0x5e>
        eink_data[0] = 0x02;
    22b2:	2202      	movs	r2, #2
    22b4:	ab06      	add	r3, sp, #24
    22b6:	701a      	strb	r2, [r3, #0]
    eink_write_data(UC8177_GDOS, eink_data, 1);
    22b8:	2201      	movs	r2, #1
    22ba:	a906      	add	r1, sp, #24
    22bc:	20e0      	movs	r0, #224	; 0xe0
    22be:	4b28      	ldr	r3, [pc, #160]	; (2360 <eink_ed028tc1_put_display_buffer+0xf4>)
    22c0:	4798      	blx	r3
    if(refresh_display) {
    22c2:	2d00      	cmp	r5, #0
    22c4:	d105      	bne.n	22d2 <eink_ed028tc1_put_display_buffer+0x66>
}
    22c6:	b009      	add	sp, #36	; 0x24
    22c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_data[0] = 0x03;
    22ca:	2203      	movs	r2, #3
    22cc:	ab06      	add	r3, sp, #24
    22ce:	701a      	strb	r2, [r3, #0]
    22d0:	e7f2      	b.n	22b8 <eink_ed028tc1_put_display_buffer+0x4c>
    eink_write_data(UC8177_PON, 0, 0);
    22d2:	2200      	movs	r2, #0
    22d4:	2100      	movs	r1, #0
    22d6:	2004      	movs	r0, #4
    22d8:	4b21      	ldr	r3, [pc, #132]	; (2360 <eink_ed028tc1_put_display_buffer+0xf4>)
    22da:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    22dc:	4f24      	ldr	r7, [pc, #144]	; (2370 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    22de:	4e25      	ldr	r6, [pc, #148]	; (2374 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    22e0:	a801      	add	r0, sp, #4
    22e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22e4:	23c0      	movs	r3, #192	; 0xc0
    22e6:	05db      	lsls	r3, r3, #23
    22e8:	2580      	movs	r5, #128	; 0x80
    22ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22ec:	22a0      	movs	r2, #160	; 0xa0
    22ee:	4922      	ldr	r1, [pc, #136]	; (2378 <eink_ed028tc1_put_display_buffer+0x10c>)
    22f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22f2:	2190      	movs	r1, #144	; 0x90
    22f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22f6:	4053      	eors	r3, r2
    22f8:	401c      	ands	r4, r3
    22fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22fc:	a801      	add	r0, sp, #4
    22fe:	47b0      	blx	r6
    2300:	4225      	tst	r5, r4
    2302:	d0ed      	beq.n	22e0 <eink_ed028tc1_put_display_buffer+0x74>
    eink_data[0] = 0x18; /* Update Mode 1 */
    2304:	a903      	add	r1, sp, #12
    2306:	2318      	movs	r3, #24
    2308:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    230a:	2300      	movs	r3, #0
    230c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    230e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2310:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    2312:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    2314:	3302      	adds	r3, #2
    2316:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    2318:	3356      	adds	r3, #86	; 0x56
    231a:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    231c:	3b57      	subs	r3, #87	; 0x57
    231e:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    2320:	33df      	adds	r3, #223	; 0xdf
    2322:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    2324:	2209      	movs	r2, #9
    2326:	2012      	movs	r0, #18
    2328:	4c0d      	ldr	r4, [pc, #52]	; (2360 <eink_ed028tc1_put_display_buffer+0xf4>)
    232a:	47a0      	blx	r4
    eink_write_data(UC8177_POF, 0, 0);
    232c:	2200      	movs	r2, #0
    232e:	2100      	movs	r1, #0
    2330:	2002      	movs	r0, #2
    2332:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2334:	4f0e      	ldr	r7, [pc, #56]	; (2370 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2336:	4e0f      	ldr	r6, [pc, #60]	; (2374 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2338:	a802      	add	r0, sp, #8
    233a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    233c:	23c0      	movs	r3, #192	; 0xc0
    233e:	05db      	lsls	r3, r3, #23
    2340:	2580      	movs	r5, #128	; 0x80
    2342:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2344:	22a0      	movs	r2, #160	; 0xa0
    2346:	490c      	ldr	r1, [pc, #48]	; (2378 <eink_ed028tc1_put_display_buffer+0x10c>)
    2348:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    234a:	2190      	movs	r1, #144	; 0x90
    234c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    234e:	4053      	eors	r3, r2
    2350:	401c      	ands	r4, r3
    2352:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2354:	a802      	add	r0, sp, #8
    2356:	47b0      	blx	r6
    2358:	4225      	tst	r5, r4
    235a:	d0ed      	beq.n	2338 <eink_ed028tc1_put_display_buffer+0xcc>
    235c:	e7b3      	b.n	22c6 <eink_ed028tc1_put_display_buffer+0x5a>
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	00001625 	.word	0x00001625
    2364:	200003a0 	.word	0x200003a0
    2368:	00023280 	.word	0x00023280
    236c:	20000320 	.word	0x20000320
    2370:	0000034d 	.word	0x0000034d
    2374:	0000035b 	.word	0x0000035b
    2378:	41004400 	.word	0x41004400

0000237c <eink_ed013tc1_put_display_buffer>:
{
    237c:	b5f0      	push	{r4, r5, r6, r7, lr}
    237e:	b089      	sub	sp, #36	; 0x24
    2380:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2382:	a906      	add	r1, sp, #24
    2384:	2300      	movs	r3, #0
    2386:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2388:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    238a:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x7F; /* W = 127 */
    238c:	227f      	movs	r2, #127	; 0x7f
    238e:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2390:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xFF; /* H = 255 */
    2392:	33ff      	adds	r3, #255	; 0xff
    2394:	714b      	strb	r3, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2396:	3a79      	subs	r2, #121	; 0x79
    2398:	2014      	movs	r0, #20
    239a:	4c3e      	ldr	r4, [pc, #248]	; (2494 <eink_ed013tc1_put_display_buffer+0x118>)
    239c:	47a0      	blx	r4
    eink_write_data(UC8173_DTM4, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    239e:	4b3e      	ldr	r3, [pc, #248]	; (2498 <eink_ed013tc1_put_display_buffer+0x11c>)
    23a0:	681b      	ldr	r3, [r3, #0]
    23a2:	6959      	ldr	r1, [r3, #20]
    23a4:	2280      	movs	r2, #128	; 0x80
    23a6:	0152      	lsls	r2, r2, #5
    23a8:	2016      	movs	r0, #22
    23aa:	47a0      	blx	r4
    if(refresh_display) {
    23ac:	2d00      	cmp	r5, #0
    23ae:	d10d      	bne.n	23cc <eink_ed013tc1_put_display_buffer+0x50>
{
    23b0:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    23b2:	4c39      	ldr	r4, [pc, #228]	; (2498 <eink_ed013tc1_put_display_buffer+0x11c>)
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    23b4:	2080      	movs	r0, #128	; 0x80
    23b6:	0140      	lsls	r0, r0, #5
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    23b8:	6822      	ldr	r2, [r4, #0]
    23ba:	6951      	ldr	r1, [r2, #20]
    23bc:	5cc9      	ldrb	r1, [r1, r3]
    23be:	6912      	ldr	r2, [r2, #16]
    23c0:	54d1      	strb	r1, [r2, r3]
    23c2:	3301      	adds	r3, #1
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    23c4:	4283      	cmp	r3, r0
    23c6:	d1f7      	bne.n	23b8 <eink_ed013tc1_put_display_buffer+0x3c>
}
    23c8:	b009      	add	sp, #36	; 0x24
    23ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_write_data(UC8173_PON, 0, 0);
    23cc:	2200      	movs	r2, #0
    23ce:	2100      	movs	r1, #0
    23d0:	2004      	movs	r0, #4
    23d2:	4b30      	ldr	r3, [pc, #192]	; (2494 <eink_ed013tc1_put_display_buffer+0x118>)
    23d4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23d6:	4f31      	ldr	r7, [pc, #196]	; (249c <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    23d8:	4e31      	ldr	r6, [pc, #196]	; (24a0 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    23da:	a801      	add	r0, sp, #4
    23dc:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23de:	23c0      	movs	r3, #192	; 0xc0
    23e0:	05db      	lsls	r3, r3, #23
    23e2:	2580      	movs	r5, #128	; 0x80
    23e4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23e6:	22a0      	movs	r2, #160	; 0xa0
    23e8:	492e      	ldr	r1, [pc, #184]	; (24a4 <eink_ed013tc1_put_display_buffer+0x128>)
    23ea:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23ec:	2190      	movs	r1, #144	; 0x90
    23ee:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23f0:	4053      	eors	r3, r2
    23f2:	401c      	ands	r4, r3
    23f4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23f6:	a801      	add	r0, sp, #4
    23f8:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    23fa:	4225      	tst	r5, r4
    23fc:	d0ed      	beq.n	23da <eink_ed013tc1_put_display_buffer+0x5e>
	eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    23fe:	2220      	movs	r2, #32
    2400:	2155      	movs	r1, #85	; 0x55
    2402:	2020      	movs	r0, #32
    2404:	4c23      	ldr	r4, [pc, #140]	; (2494 <eink_ed013tc1_put_display_buffer+0x118>)
    2406:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    2408:	2280      	movs	r2, #128	; 0x80
    240a:	0092      	lsls	r2, r2, #2
    240c:	2181      	movs	r1, #129	; 0x81
    240e:	2022      	movs	r0, #34	; 0x22
    2410:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);
    2412:	2280      	movs	r2, #128	; 0x80
    2414:	2100      	movs	r1, #0
    2416:	2026      	movs	r0, #38	; 0x26
    2418:	47a0      	blx	r4
    eink_data[0] = 0x01; /* GU2 Update Mode */
    241a:	a904      	add	r1, sp, #16
    241c:	2301      	movs	r3, #1
    241e:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2420:	2300      	movs	r3, #0
    2422:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2424:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2426:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    2428:	227f      	movs	r2, #127	; 0x7f
    242a:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    242c:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    242e:	33ff      	adds	r3, #255	; 0xff
    2430:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2432:	3a78      	subs	r2, #120	; 0x78
    2434:	2012      	movs	r0, #18
    2436:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2438:	4f18      	ldr	r7, [pc, #96]	; (249c <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    243a:	4e19      	ldr	r6, [pc, #100]	; (24a0 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    243c:	a802      	add	r0, sp, #8
    243e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2440:	23c0      	movs	r3, #192	; 0xc0
    2442:	05db      	lsls	r3, r3, #23
    2444:	2580      	movs	r5, #128	; 0x80
    2446:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2448:	22a0      	movs	r2, #160	; 0xa0
    244a:	4916      	ldr	r1, [pc, #88]	; (24a4 <eink_ed013tc1_put_display_buffer+0x128>)
    244c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    244e:	2190      	movs	r1, #144	; 0x90
    2450:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2452:	4053      	eors	r3, r2
    2454:	401c      	ands	r4, r3
    2456:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2458:	a802      	add	r0, sp, #8
    245a:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    245c:	4225      	tst	r5, r4
    245e:	d0ed      	beq.n	243c <eink_ed013tc1_put_display_buffer+0xc0>
    eink_write_data(UC8173_POF, 0, 0);
    2460:	2200      	movs	r2, #0
    2462:	2100      	movs	r1, #0
    2464:	2002      	movs	r0, #2
    2466:	4b0b      	ldr	r3, [pc, #44]	; (2494 <eink_ed013tc1_put_display_buffer+0x118>)
    2468:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    246a:	4f0c      	ldr	r7, [pc, #48]	; (249c <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    246c:	4e0c      	ldr	r6, [pc, #48]	; (24a0 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    246e:	a803      	add	r0, sp, #12
    2470:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2472:	23c0      	movs	r3, #192	; 0xc0
    2474:	05db      	lsls	r3, r3, #23
    2476:	2580      	movs	r5, #128	; 0x80
    2478:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    247a:	22a0      	movs	r2, #160	; 0xa0
    247c:	4909      	ldr	r1, [pc, #36]	; (24a4 <eink_ed013tc1_put_display_buffer+0x128>)
    247e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2480:	2190      	movs	r1, #144	; 0x90
    2482:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2484:	4053      	eors	r3, r2
    2486:	401c      	ands	r4, r3
    2488:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    248a:	a803      	add	r0, sp, #12
    248c:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    248e:	4225      	tst	r5, r4
    2490:	d1ed      	bne.n	246e <eink_ed013tc1_put_display_buffer+0xf2>
    2492:	e78d      	b.n	23b0 <eink_ed013tc1_put_display_buffer+0x34>
    2494:	00001625 	.word	0x00001625
    2498:	200003a0 	.word	0x200003a0
    249c:	0000034d 	.word	0x0000034d
    24a0:	0000035b 	.word	0x0000035b
    24a4:	41004400 	.word	0x41004400

000024a8 <eink_read_data>:
{    
    24a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24aa:	46de      	mov	lr, fp
    24ac:	4657      	mov	r7, sl
    24ae:	464e      	mov	r6, r9
    24b0:	4645      	mov	r5, r8
    24b2:	b5e0      	push	{r5, r6, r7, lr}
    24b4:	b083      	sub	sp, #12
    24b6:	000f      	movs	r7, r1
    24b8:	0016      	movs	r6, r2
    *data = 0;
    24ba:	2300      	movs	r3, #0
    24bc:	700b      	strb	r3, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24be:	24c0      	movs	r4, #192	; 0xc0
    24c0:	05e4      	lsls	r4, r4, #23
    24c2:	3301      	adds	r3, #1
    24c4:	4698      	mov	r8, r3
    24c6:	3393      	adds	r3, #147	; 0x93
    24c8:	4642      	mov	r2, r8
    24ca:	50e2      	str	r2, [r4, r3]
    24cc:	2520      	movs	r5, #32
    24ce:	6165      	str	r5, [r4, #20]
    eink_send_raw_byte(command, f_send);
    24d0:	2100      	movs	r1, #0
    24d2:	4b2e      	ldr	r3, [pc, #184]	; (258c <eink_read_data+0xe4>)
    24d4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24d6:	2398      	movs	r3, #152	; 0x98
    24d8:	4642      	mov	r2, r8
    24da:	50e2      	str	r2, [r4, r3]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    24dc:	320f      	adds	r2, #15
    24de:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    24e0:	4b2b      	ldr	r3, [pc, #172]	; (2590 <eink_read_data+0xe8>)
    24e2:	492c      	ldr	r1, [pc, #176]	; (2594 <eink_read_data+0xec>)
    24e4:	6299      	str	r1, [r3, #40]	; 0x28
    24e6:	492c      	ldr	r1, [pc, #176]	; (2598 <eink_read_data+0xf0>)
    24e8:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    24ea:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    24ec:	2144      	movs	r1, #68	; 0x44
    24ee:	4689      	mov	r9, r1
    24f0:	5c59      	ldrb	r1, [r3, r1]
    24f2:	4688      	mov	r8, r1
    24f4:	2104      	movs	r1, #4
    24f6:	4640      	mov	r0, r8
    24f8:	4308      	orrs	r0, r1
    24fa:	0001      	movs	r1, r0
    24fc:	4648      	mov	r0, r9
    24fe:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2500:	61a2      	str	r2, [r4, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2502:	6165      	str	r5, [r4, #20]
    for (j=0;j<data_bytes;j++) {
    2504:	2e00      	cmp	r6, #0
    2506:	d02e      	beq.n	2566 <eink_read_data+0xbe>
    2508:	46b3      	mov	fp, r6
    250a:	44bb      	add	fp, r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    250c:	2380      	movs	r3, #128	; 0x80
    250e:	4698      	mov	r8, r3
    2510:	469a      	mov	sl, r3
	CRITICAL_SECTION_ENTER();
    2512:	4b22      	ldr	r3, [pc, #136]	; (259c <eink_read_data+0xf4>)
    2514:	4699      	mov	r9, r3
    2516:	e022      	b.n	255e <eink_read_data+0xb6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2518:	4643      	mov	r3, r8
    251a:	6173      	str	r3, [r6, #20]
            if(i!=7) *data = *data << 1;
    251c:	2c01      	cmp	r4, #1
    251e:	d01b      	beq.n	2558 <eink_read_data+0xb0>
    2520:	783b      	ldrb	r3, [r7, #0]
    2522:	005b      	lsls	r3, r3, #1
    2524:	703b      	strb	r3, [r7, #0]
    2526:	3c01      	subs	r4, #1
    2528:	b2a4      	uxth	r4, r4
        for (i=0;i<8;i++) {
    252a:	2c00      	cmp	r4, #0
    252c:	d014      	beq.n	2558 <eink_read_data+0xb0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    252e:	4653      	mov	r3, sl
    2530:	61b3      	str	r3, [r6, #24]
    2532:	a801      	add	r0, sp, #4
    2534:	47c8      	blx	r9
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2536:	6835      	ldr	r5, [r6, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2538:	4b15      	ldr	r3, [pc, #84]	; (2590 <eink_read_data+0xe8>)
    253a:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    253c:	6933      	ldr	r3, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    253e:	4053      	eors	r3, r2
    2540:	401d      	ands	r5, r3
    2542:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    2544:	a801      	add	r0, sp, #4
    2546:	4b16      	ldr	r3, [pc, #88]	; (25a0 <eink_read_data+0xf8>)
    2548:	4798      	blx	r3
            if (gpio_get_pin_level(EINK_SPI_SDA)) {
    254a:	06eb      	lsls	r3, r5, #27
    254c:	d5e4      	bpl.n	2518 <eink_read_data+0x70>
                *data |= 1;
    254e:	783b      	ldrb	r3, [r7, #0]
    2550:	2201      	movs	r2, #1
    2552:	4313      	orrs	r3, r2
    2554:	703b      	strb	r3, [r7, #0]
    2556:	e7df      	b.n	2518 <eink_read_data+0x70>
        data++;
    2558:	3701      	adds	r7, #1
    for (j=0;j<data_bytes;j++) {
    255a:	45bb      	cmp	fp, r7
    255c:	d003      	beq.n	2566 <eink_read_data+0xbe>
{    
    255e:	2408      	movs	r4, #8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2560:	26c0      	movs	r6, #192	; 0xc0
    2562:	05f6      	lsls	r6, r6, #23
    2564:	e7e3      	b.n	252e <eink_read_data+0x86>
    2566:	23c0      	movs	r3, #192	; 0xc0
    2568:	05db      	lsls	r3, r3, #23
    256a:	2220      	movs	r2, #32
    256c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    256e:	3a10      	subs	r2, #16
    2570:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2572:	4b07      	ldr	r3, [pc, #28]	; (2590 <eink_read_data+0xe8>)
    2574:	4a0b      	ldr	r2, [pc, #44]	; (25a4 <eink_read_data+0xfc>)
    2576:	629a      	str	r2, [r3, #40]	; 0x28
    2578:	22c0      	movs	r2, #192	; 0xc0
    257a:	0612      	lsls	r2, r2, #24
    257c:	629a      	str	r2, [r3, #40]	; 0x28
}
    257e:	b003      	add	sp, #12
    2580:	bc3c      	pop	{r2, r3, r4, r5}
    2582:	4690      	mov	r8, r2
    2584:	4699      	mov	r9, r3
    2586:	46a2      	mov	sl, r4
    2588:	46ab      	mov	fp, r5
    258a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    258c:	000015e1 	.word	0x000015e1
    2590:	41004400 	.word	0x41004400
    2594:	40020010 	.word	0x40020010
    2598:	c0020000 	.word	0xc0020000
    259c:	0000034d 	.word	0x0000034d
    25a0:	0000035b 	.word	0x0000035b
    25a4:	40000010 	.word	0x40000010

000025a8 <_eink_ite_write_data>:
void _eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes,
        uint8_t fast_write)
{   
    25a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25aa:	0004      	movs	r4, r0
    25ac:	0015      	movs	r5, r2
    uint32_t i, j, sendWords_m, sendWords_r;
    
    eink_ite_wait_for_hrdy();
    25ae:	4b12      	ldr	r3, [pc, #72]	; (25f8 <_eink_ite_write_data+0x50>)
    25b0:	4798      	blx	r3
    if (command != 0) {
    25b2:	2c00      	cmp	r4, #0
    25b4:	d11d      	bne.n	25f2 <_eink_ite_write_data+0x4a>
        /* Set CSB LOW to enable communication to the display */
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
    }
    
    eink_ite_wait_for_hrdy();
    25b6:	4b10      	ldr	r3, [pc, #64]	; (25f8 <_eink_ite_write_data+0x50>)
    25b8:	4798      	blx	r3
    if (data_bytes != 0) {
    25ba:	2d00      	cmp	r5, #0
    25bc:	d018      	beq.n	25f0 <_eink_ite_write_data+0x48>
        /* Data burst must be sent 1024 words at a time */
        sendWords_r = data_bytes % 2048;
    25be:	056e      	lsls	r6, r5, #21
    25c0:	0d76      	lsrs	r6, r6, #21
        sendWords_m = (data_bytes - sendWords_r) / 2048;
    25c2:	1bad      	subs	r5, r5, r6
    25c4:	0aed      	lsrs	r5, r5, #11
        
        /* If we have more than 1024 words, start sending them in bursts */
        for(j=0; j<sendWords_m; j++)
    25c6:	2400      	movs	r4, #0
    25c8:	2d00      	cmp	r5, #0
    25ca:	d009      	beq.n	25e0 <_eink_ite_write_data+0x38>
            }           
            /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
            gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
            eink_ite_wait_for_hrdy();
    25cc:	4f0a      	ldr	r7, [pc, #40]	; (25f8 <_eink_ite_write_data+0x50>)
{   
    25ce:	2380      	movs	r3, #128	; 0x80
    25d0:	011b      	lsls	r3, r3, #4
    25d2:	3b01      	subs	r3, #1
            for (i=0; i<2048; i++)
    25d4:	2b00      	cmp	r3, #0
    25d6:	d1fc      	bne.n	25d2 <_eink_ite_write_data+0x2a>
            eink_ite_wait_for_hrdy();
    25d8:	47b8      	blx	r7
        for(j=0; j<sendWords_m; j++)
    25da:	3401      	adds	r4, #1
    25dc:	42a5      	cmp	r5, r4
    25de:	d1f6      	bne.n	25ce <_eink_ite_write_data+0x26>
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 0);
#endif
        eink_ite_send_raw_hword(0x0000);
        /* Send the remaining data (or all the data if there was less than 1024 words */
        for (i=0; i<sendWords_r; i++) {
    25e0:	2e00      	cmp	r6, #0
    25e2:	d003      	beq.n	25ec <_eink_ite_write_data+0x44>
    25e4:	2300      	movs	r3, #0
    25e6:	3301      	adds	r3, #1
    25e8:	429e      	cmp	r6, r3
    25ea:	d1fc      	bne.n	25e6 <_eink_ite_write_data+0x3e>
        }
        /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
        eink_ite_wait_for_hrdy();
    25ec:	4b02      	ldr	r3, [pc, #8]	; (25f8 <_eink_ite_write_data+0x50>)
    25ee:	4798      	blx	r3
    }
}
    25f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eink_ite_wait_for_hrdy();
    25f2:	4b01      	ldr	r3, [pc, #4]	; (25f8 <_eink_ite_write_data+0x50>)
    25f4:	4798      	blx	r3
    25f6:	e7de      	b.n	25b6 <_eink_ite_write_data+0xe>
    25f8:	00000575 	.word	0x00000575

000025fc <eink_ite_write_data>:
 */
void eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    25fc:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 0);
    25fe:	2300      	movs	r3, #0
    2600:	4c01      	ldr	r4, [pc, #4]	; (2608 <eink_ite_write_data+0xc>)
    2602:	47a0      	blx	r4
}
    2604:	bd10      	pop	{r4, pc}
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	000025a9 	.word	0x000025a9

0000260c <eink_it8951_refresh_partial_display>:
    eink_coordinate show_x,
    eink_coordinate show_y,
    eink_coordinate show_w,
    eink_coordinate show_h,
    uint8_t update_mode)
{
    260c:	b5f0      	push	{r4, r5, r6, r7, lr}
    260e:	b085      	sub	sp, #20
    2610:	ac0a      	add	r4, sp, #40	; 0x28
    2612:	7825      	ldrb	r5, [r4, #0]
    uint16_t eink_data[5];
    switch(it8951_global_instance.display_rotation)
    2614:	2430      	movs	r4, #48	; 0x30
    2616:	4e26      	ldr	r6, [pc, #152]	; (26b0 <eink_it8951_refresh_partial_display+0xa4>)
    2618:	5d34      	ldrb	r4, [r6, r4]
    261a:	b2e4      	uxtb	r4, r4
    261c:	2c01      	cmp	r4, #1
    261e:	d025      	beq.n	266c <eink_it8951_refresh_partial_display+0x60>
    2620:	2c00      	cmp	r4, #0
    2622:	d01d      	beq.n	2660 <eink_it8951_refresh_partial_display+0x54>
    2624:	2c02      	cmp	r4, #2
    2626:	d02b      	beq.n	2680 <eink_it8951_refresh_partial_display+0x74>
    2628:	2c03      	cmp	r4, #3
    262a:	d036      	beq.n	269a <eink_it8951_refresh_partial_display+0x8e>
            eink_data[1] = (uint16_t) show_y;
            eink_data[2] = (uint16_t) show_w;
            eink_data[3] = (uint16_t) show_h;
            break;
    }
    eink_data[4] = (uint16_t) update_mode;
    262c:	a901      	add	r1, sp, #4
    262e:	810d      	strh	r5, [r1, #8]
    /* Send I80 Display Command */
    eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2630:	2201      	movs	r2, #1
    2632:	2034      	movs	r0, #52	; 0x34
    2634:	4c1f      	ldr	r4, [pc, #124]	; (26b4 <eink_it8951_refresh_partial_display+0xa8>)
    2636:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[1], 1);
    2638:	2201      	movs	r2, #1
    263a:	466b      	mov	r3, sp
    263c:	1d99      	adds	r1, r3, #6
    263e:	2000      	movs	r0, #0
    2640:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[2], 1);
    2642:	2201      	movs	r2, #1
    2644:	a902      	add	r1, sp, #8
    2646:	2000      	movs	r0, #0
    2648:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[3], 1);
    264a:	2201      	movs	r2, #1
    264c:	210a      	movs	r1, #10
    264e:	4469      	add	r1, sp
    2650:	2000      	movs	r0, #0
    2652:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[4], 1);
    2654:	2201      	movs	r2, #1
    2656:	a903      	add	r1, sp, #12
    2658:	2000      	movs	r0, #0
    265a:	47a0      	blx	r4
}
    265c:	b005      	add	sp, #20
    265e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_data[0] = (uint16_t) show_y;
    2660:	ac01      	add	r4, sp, #4
    2662:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) show_x;
    2664:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2666:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2668:	80e2      	strh	r2, [r4, #6]
            break;
    266a:	e7df      	b.n	262c <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) show_x;
    266c:	ac01      	add	r4, sp, #4
    266e:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_y-show_h;
    2670:	480f      	ldr	r0, [pc, #60]	; (26b0 <eink_it8951_refresh_partial_display+0xa4>)
    2672:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2674:	1a41      	subs	r1, r0, r1
    2676:	1ac9      	subs	r1, r1, r3
    2678:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    267a:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    267c:	80e3      	strh	r3, [r4, #6]
            break;
    267e:	e7d5      	b.n	262c <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_y-show_h;
    2680:	4f0b      	ldr	r7, [pc, #44]	; (26b0 <eink_it8951_refresh_partial_display+0xa4>)
    2682:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
    2684:	ac01      	add	r4, sp, #4
    2686:	1a71      	subs	r1, r6, r1
    2688:	1ac9      	subs	r1, r1, r3
    268a:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_x-show_w;
    268c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
    268e:	1a08      	subs	r0, r1, r0
    2690:	1a80      	subs	r0, r0, r2
    2692:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2694:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2696:	80e2      	strh	r2, [r4, #6]
            break;
    2698:	e7c8      	b.n	262c <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_x-show_w;
    269a:	4c05      	ldr	r4, [pc, #20]	; (26b0 <eink_it8951_refresh_partial_display+0xa4>)
    269c:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
    269e:	ac01      	add	r4, sp, #4
    26a0:	1a30      	subs	r0, r6, r0
    26a2:	1a80      	subs	r0, r0, r2
    26a4:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) show_y;
    26a6:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    26a8:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    26aa:	80e3      	strh	r3, [r4, #6]
            break;
    26ac:	e7be      	b.n	262c <eink_it8951_refresh_partial_display+0x20>
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	20000330 	.word	0x20000330
    26b4:	000025fd 	.word	0x000025fd

000026b8 <eink_it8951_refresh_display_mode>:
{
    26b8:	b510      	push	{r4, lr}
    26ba:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    26bc:	a901      	add	r1, sp, #4
    26be:	2300      	movs	r3, #0
    26c0:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    26c2:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    26c4:	4b0e      	ldr	r3, [pc, #56]	; (2700 <eink_it8951_refresh_display_mode+0x48>)
    26c6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    26c8:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    26ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    26cc:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    26ce:	8108      	strh	r0, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    26d0:	2201      	movs	r2, #1
    26d2:	2034      	movs	r0, #52	; 0x34
    26d4:	4c0b      	ldr	r4, [pc, #44]	; (2704 <eink_it8951_refresh_display_mode+0x4c>)
    26d6:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    26d8:	2201      	movs	r2, #1
    26da:	466b      	mov	r3, sp
    26dc:	1d99      	adds	r1, r3, #6
    26de:	2000      	movs	r0, #0
    26e0:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    26e2:	2201      	movs	r2, #1
    26e4:	a902      	add	r1, sp, #8
    26e6:	2000      	movs	r0, #0
    26e8:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    26ea:	2201      	movs	r2, #1
    26ec:	210a      	movs	r1, #10
    26ee:	4469      	add	r1, sp
    26f0:	2000      	movs	r0, #0
    26f2:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    26f4:	2201      	movs	r2, #1
    26f6:	a903      	add	r1, sp, #12
    26f8:	2000      	movs	r0, #0
    26fa:	47a0      	blx	r4
 }
    26fc:	b004      	add	sp, #16
    26fe:	bd10      	pop	{r4, pc}
    2700:	20000330 	.word	0x20000330
    2704:	000025fd 	.word	0x000025fd

00002708 <eink_it8951_put_partial_display_buffer>:
 * \param start_y starting Y coordinate start of the display buffer to send
 * \param window_w width of the display buffer to send
 * \param window_h height of the display buffer to send
 */
void eink_it8951_put_partial_display_buffer(eink_coordinate start_x, eink_coordinate start_y, eink_coordinate window_w, eink_coordinate window_h)
{
    2708:	b5f0      	push	{r4, r5, r6, r7, lr}
    270a:	46de      	mov	lr, fp
    270c:	4657      	mov	r7, sl
    270e:	464e      	mov	r6, r9
    2710:	4645      	mov	r5, r8
    2712:	b5e0      	push	{r5, r6, r7, lr}
    2714:	b087      	sub	sp, #28
    2716:	0004      	movs	r4, r0
    2718:	000d      	movs	r5, r1
    271a:	9201      	str	r2, [sp, #4]
    271c:	001f      	movs	r7, r3
    uint16_t eink_data[5], rotation = 0;
    uint16_t* display_buffer;
    uint32_t i, j, k;

    /* Get pointer to Display Buffer */
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    271e:	4b45      	ldr	r3, [pc, #276]	; (2834 <eink_it8951_put_partial_display_buffer+0x12c>)
    2720:	681b      	ldr	r3, [r3, #0]
    2722:	4698      	mov	r8, r3
        
    /* Set Image Buffer Base address (IT8951) */
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    2724:	4e44      	ldr	r6, [pc, #272]	; (2838 <eink_it8951_put_partial_display_buffer+0x130>)
    2726:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    2728:	6b72      	ldr	r2, [r6, #52]	; 0x34
    272a:	4692      	mov	sl, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    272c:	4a43      	ldr	r2, [pc, #268]	; (283c <eink_it8951_put_partial_display_buffer+0x134>)
    272e:	a902      	add	r1, sp, #8
    2730:	800a      	strh	r2, [r1, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    2732:	0c1b      	lsrs	r3, r3, #16
    2734:	804b      	strh	r3, [r1, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    2736:	2202      	movs	r2, #2
    2738:	2011      	movs	r0, #17
    273a:	4b41      	ldr	r3, [pc, #260]	; (2840 <eink_it8951_put_partial_display_buffer+0x138>)
    273c:	469b      	mov	fp, r3
    273e:	4798      	blx	r3
    uint16_t data_send[2] = {reg_addr, reg_value};
    2740:	2382      	movs	r3, #130	; 0x82
    2742:	009b      	lsls	r3, r3, #2
    2744:	aa02      	add	r2, sp, #8
    2746:	8013      	strh	r3, [r2, #0]
    2748:	0013      	movs	r3, r2
    274a:	4652      	mov	r2, sl
    274c:	805a      	strh	r2, [r3, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    274e:	2202      	movs	r2, #2
    2750:	0019      	movs	r1, r3
    2752:	2011      	movs	r0, #17
    2754:	47d8      	blx	fp
    it8951_write_reg(LISAR + 2, usWordH);
    it8951_write_reg(LISAR, usWordL);
    
    /* Set arguments for Load Image Start */
    switch(it8951_global_instance.display_rotation)
    2756:	2330      	movs	r3, #48	; 0x30
    2758:	5cf3      	ldrb	r3, [r6, r3]
    275a:	b2db      	uxtb	r3, r3
    275c:	2b02      	cmp	r3, #2
    275e:	d022      	beq.n	27a6 <eink_it8951_put_partial_display_buffer+0x9e>
    2760:	2b03      	cmp	r3, #3
    2762:	d022      	beq.n	27aa <eink_it8951_put_partial_display_buffer+0xa2>
    uint16_t eink_data[5], rotation = 0;
    2764:	3b01      	subs	r3, #1
    2766:	425a      	negs	r2, r3
    2768:	4153      	adcs	r3, r2
        case ROTATE_0: rotation = 0; break;
        case ROTATE_90: rotation = 1; break;
        case ROTATE_180: rotation = 2; break;
        case ROTATE_270: rotation = 3; break;
    }
    eink_data[0] = (0 << 8) | (2 << 4) | (rotation);
    276a:	a903      	add	r1, sp, #12
    276c:	2220      	movs	r2, #32
    276e:	4313      	orrs	r3, r2
    2770:	800b      	strh	r3, [r1, #0]
    eink_data[1] = start_y;
    2772:	804d      	strh	r5, [r1, #2]
    eink_data[2] = start_x;
    2774:	808c      	strh	r4, [r1, #4]
    eink_data[3] = window_h;
    2776:	80cf      	strh	r7, [r1, #6]
    eink_data[4] = window_w;
    2778:	466b      	mov	r3, sp
    277a:	889b      	ldrh	r3, [r3, #4]
    277c:	810b      	strh	r3, [r1, #8]
    eink_ite_write_data(IT8951_I80_LD_IMG_AREA, eink_data, 5);
    277e:	2205      	movs	r2, #5
    2780:	2021      	movs	r0, #33	; 0x21
    2782:	4b2f      	ldr	r3, [pc, #188]	; (2840 <eink_it8951_put_partial_display_buffer+0x138>)
    2784:	4798      	blx	r3
    
    /* Move to start of the window within the display buffer */
    if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    2786:	2330      	movs	r3, #48	; 0x30
    2788:	4a2b      	ldr	r2, [pc, #172]	; (2838 <eink_it8951_put_partial_display_buffer+0x130>)
    278a:	5cd3      	ldrb	r3, [r2, r3]
    278c:	2b00      	cmp	r3, #0
    278e:	d00e      	beq.n	27ae <eink_it8951_put_partial_display_buffer+0xa6>
    2790:	2330      	movs	r3, #48	; 0x30
    2792:	5cd3      	ldrb	r3, [r2, r3]
    2794:	2b02      	cmp	r3, #2
    2796:	d00a      	beq.n	27ae <eink_it8951_put_partial_display_buffer+0xa6>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    else
        display_buffer += (it8951_global_instance.display_width / 4) * (start_x);
    2798:	4b27      	ldr	r3, [pc, #156]	; (2838 <eink_it8951_put_partial_display_buffer+0x130>)
    279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    279c:	089b      	lsrs	r3, r3, #2
    279e:	435c      	muls	r4, r3
    27a0:	0064      	lsls	r4, r4, #1
    27a2:	4444      	add	r4, r8
    27a4:	e009      	b.n	27ba <eink_it8951_put_partial_display_buffer+0xb2>
        case ROTATE_180: rotation = 2; break;
    27a6:	2302      	movs	r3, #2
    27a8:	e7df      	b.n	276a <eink_it8951_put_partial_display_buffer+0x62>
        case ROTATE_270: rotation = 3; break;
    27aa:	2303      	movs	r3, #3
    27ac:	e7dd      	b.n	276a <eink_it8951_put_partial_display_buffer+0x62>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    27ae:	4b22      	ldr	r3, [pc, #136]	; (2838 <eink_it8951_put_partial_display_buffer+0x130>)
    27b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    27b2:	089b      	lsrs	r3, r3, #2
    27b4:	435c      	muls	r4, r3
    27b6:	0064      	lsls	r4, r4, #1
    27b8:	4444      	add	r4, r8
    display_buffer += (start_y / 4);
    27ba:	08ad      	lsrs	r5, r5, #2
    27bc:	006d      	lsls	r5, r5, #1
    27be:	1964      	adds	r4, r4, r5
    
    /* Loop through window sending the display buffer */
    for(j = 0; j < window_w; j++)
    27c0:	9e01      	ldr	r6, [sp, #4]
    27c2:	2e00      	cmp	r6, #0
    27c4:	d02a      	beq.n	281c <eink_it8951_put_partial_display_buffer+0x114>
    {
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    27c6:	08bb      	lsrs	r3, r7, #2
    27c8:	9301      	str	r3, [sp, #4]
        display_buffer += (window_h / 4);
    27ca:	005a      	lsls	r2, r3, #1
    27cc:	4691      	mov	r9, r2
        
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
        else
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    27ce:	469a      	mov	sl, r3
    27d0:	2500      	movs	r5, #0
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    27d2:	4b1b      	ldr	r3, [pc, #108]	; (2840 <eink_it8951_put_partial_display_buffer+0x138>)
    27d4:	4698      	mov	r8, r3
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    27d6:	4f18      	ldr	r7, [pc, #96]	; (2838 <eink_it8951_put_partial_display_buffer+0x130>)
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
    27d8:	46bb      	mov	fp, r7
    27da:	e009      	b.n	27f0 <eink_it8951_put_partial_display_buffer+0xe8>
    27dc:	465b      	mov	r3, fp
    27de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    27e0:	089b      	lsrs	r3, r3, #2
    27e2:	4652      	mov	r2, sl
    27e4:	1a9b      	subs	r3, r3, r2
    27e6:	005b      	lsls	r3, r3, #1
    27e8:	18e4      	adds	r4, r4, r3
    for(j = 0; j < window_w; j++)
    27ea:	3501      	adds	r5, #1
    27ec:	42b5      	cmp	r5, r6
    27ee:	d215      	bcs.n	281c <eink_it8951_put_partial_display_buffer+0x114>
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    27f0:	9a01      	ldr	r2, [sp, #4]
    27f2:	0021      	movs	r1, r4
    27f4:	2000      	movs	r0, #0
    27f6:	47c0      	blx	r8
        display_buffer += (window_h / 4);
    27f8:	444c      	add	r4, r9
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    27fa:	2330      	movs	r3, #48	; 0x30
    27fc:	5cfb      	ldrb	r3, [r7, r3]
    27fe:	2b00      	cmp	r3, #0
    2800:	d0ec      	beq.n	27dc <eink_it8951_put_partial_display_buffer+0xd4>
    2802:	2330      	movs	r3, #48	; 0x30
    2804:	4a0c      	ldr	r2, [pc, #48]	; (2838 <eink_it8951_put_partial_display_buffer+0x130>)
    2806:	5cd3      	ldrb	r3, [r2, r3]
    2808:	2b02      	cmp	r3, #2
    280a:	d0e7      	beq.n	27dc <eink_it8951_put_partial_display_buffer+0xd4>
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    280c:	4b0a      	ldr	r3, [pc, #40]	; (2838 <eink_it8951_put_partial_display_buffer+0x130>)
    280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2810:	089b      	lsrs	r3, r3, #2
    2812:	4652      	mov	r2, sl
    2814:	1a9b      	subs	r3, r3, r2
    2816:	005b      	lsls	r3, r3, #1
    2818:	18e4      	adds	r4, r4, r3
    281a:	e7e6      	b.n	27ea <eink_it8951_put_partial_display_buffer+0xe2>
    }
    
    /* Send Load Img End Command */
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    281c:	2200      	movs	r2, #0
    281e:	2100      	movs	r1, #0
    2820:	2022      	movs	r0, #34	; 0x22
    2822:	4b07      	ldr	r3, [pc, #28]	; (2840 <eink_it8951_put_partial_display_buffer+0x138>)
    2824:	4798      	blx	r3
}
    2826:	b007      	add	sp, #28
    2828:	bc3c      	pop	{r2, r3, r4, r5}
    282a:	4690      	mov	r8, r2
    282c:	4699      	mov	r9, r3
    282e:	46a2      	mov	sl, r4
    2830:	46ab      	mov	fp, r5
    2832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2834:	20000314 	.word	0x20000314
    2838:	20000330 	.word	0x20000330
    283c:	0000020a 	.word	0x0000020a
    2840:	000025fd 	.word	0x000025fd

00002844 <eink_it8951_refresh_display>:
{
    2844:	b510      	push	{r4, lr}
    2846:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    2848:	a901      	add	r1, sp, #4
    284a:	2300      	movs	r3, #0
    284c:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    284e:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    2850:	4b0f      	ldr	r3, [pc, #60]	; (2890 <eink_it8951_refresh_display+0x4c>)
    2852:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    2854:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    2856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2858:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    285a:	2302      	movs	r3, #2
    285c:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    285e:	2201      	movs	r2, #1
    2860:	2034      	movs	r0, #52	; 0x34
    2862:	4c0c      	ldr	r4, [pc, #48]	; (2894 <eink_it8951_refresh_display+0x50>)
    2864:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    2866:	2201      	movs	r2, #1
    2868:	466b      	mov	r3, sp
    286a:	1d99      	adds	r1, r3, #6
    286c:	2000      	movs	r0, #0
    286e:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    2870:	2201      	movs	r2, #1
    2872:	a902      	add	r1, sp, #8
    2874:	2000      	movs	r0, #0
    2876:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    2878:	2201      	movs	r2, #1
    287a:	210a      	movs	r1, #10
    287c:	4469      	add	r1, sp
    287e:	2000      	movs	r0, #0
    2880:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    2882:	2201      	movs	r2, #1
    2884:	a903      	add	r1, sp, #12
    2886:	2000      	movs	r0, #0
    2888:	47a0      	blx	r4
}
    288a:	b004      	add	sp, #16
    288c:	bd10      	pop	{r4, pc}
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	20000330 	.word	0x20000330
    2894:	000025fd 	.word	0x000025fd

00002898 <eink_ite_write_data_fast>:
 */
void eink_ite_write_data_fast(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    2898:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 1);
    289a:	2301      	movs	r3, #1
    289c:	4c01      	ldr	r4, [pc, #4]	; (28a4 <eink_ite_write_data_fast+0xc>)
    289e:	47a0      	blx	r4
}
    28a0:	bd10      	pop	{r4, pc}
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	000025a9 	.word	0x000025a9

000028a8 <eink_it8951_put_display_buffer>:
{
    28a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28aa:	46c6      	mov	lr, r8
    28ac:	b500      	push	{lr}
    28ae:	b084      	sub	sp, #16
    28b0:	0005      	movs	r5, r0
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    28b2:	4e31      	ldr	r6, [pc, #196]	; (2978 <eink_it8951_put_display_buffer+0xd0>)
    28b4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    28b6:	6b72      	ldr	r2, [r6, #52]	; 0x34
    28b8:	4690      	mov	r8, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    28ba:	ac01      	add	r4, sp, #4
    28bc:	4a2f      	ldr	r2, [pc, #188]	; (297c <eink_it8951_put_display_buffer+0xd4>)
    28be:	8022      	strh	r2, [r4, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    28c0:	0c1b      	lsrs	r3, r3, #16
    28c2:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    28c4:	2202      	movs	r2, #2
    28c6:	0021      	movs	r1, r4
    28c8:	2011      	movs	r0, #17
    28ca:	4f2d      	ldr	r7, [pc, #180]	; (2980 <eink_it8951_put_display_buffer+0xd8>)
    28cc:	47b8      	blx	r7
    uint16_t data_send[2] = {reg_addr, reg_value};
    28ce:	2382      	movs	r3, #130	; 0x82
    28d0:	009b      	lsls	r3, r3, #2
    28d2:	8023      	strh	r3, [r4, #0]
    28d4:	4643      	mov	r3, r8
    28d6:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    28d8:	2202      	movs	r2, #2
    28da:	0021      	movs	r1, r4
    28dc:	2011      	movs	r0, #17
    28de:	47b8      	blx	r7
    switch(it8951_global_instance.display_rotation)
    28e0:	2330      	movs	r3, #48	; 0x30
    28e2:	5cf3      	ldrb	r3, [r6, r3]
    28e4:	b2db      	uxtb	r3, r3
    28e6:	2b02      	cmp	r3, #2
    28e8:	d01f      	beq.n	292a <eink_it8951_put_display_buffer+0x82>
    28ea:	2b03      	cmp	r3, #3
    28ec:	d01f      	beq.n	292e <eink_it8951_put_display_buffer+0x86>
    uint16_t eink_data, rotation = 0;
    28ee:	3b01      	subs	r3, #1
    28f0:	425a      	negs	r2, r3
    28f2:	4153      	adcs	r3, r2
    eink_data = (0 << 8) | (2 << 4) | (rotation);
    28f4:	210e      	movs	r1, #14
    28f6:	4469      	add	r1, sp
    28f8:	2220      	movs	r2, #32
    28fa:	4313      	orrs	r3, r2
    28fc:	800b      	strh	r3, [r1, #0]
    eink_ite_write_data(IT8951_I80_LD_IMG, &eink_data, 1);
    28fe:	2201      	movs	r2, #1
    2900:	2020      	movs	r0, #32
    2902:	4c1f      	ldr	r4, [pc, #124]	; (2980 <eink_it8951_put_display_buffer+0xd8>)
    2904:	47a0      	blx	r4
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    2906:	4b1c      	ldr	r3, [pc, #112]	; (2978 <eink_it8951_put_display_buffer+0xd0>)
    2908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    290a:	0852      	lsrs	r2, r2, #1
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    290c:	4b1d      	ldr	r3, [pc, #116]	; (2984 <eink_it8951_put_display_buffer+0xdc>)
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    290e:	6819      	ldr	r1, [r3, #0]
    2910:	2000      	movs	r0, #0
    2912:	4b1d      	ldr	r3, [pc, #116]	; (2988 <eink_it8951_put_display_buffer+0xe0>)
    2914:	4798      	blx	r3
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    2916:	2200      	movs	r2, #0
    2918:	2100      	movs	r1, #0
    291a:	2022      	movs	r0, #34	; 0x22
    291c:	47a0      	blx	r4
    if(refresh_display) eink_it8951_refresh_display();
    291e:	2d00      	cmp	r5, #0
    2920:	d107      	bne.n	2932 <eink_it8951_put_display_buffer+0x8a>
}
    2922:	b004      	add	sp, #16
    2924:	bc04      	pop	{r2}
    2926:	4690      	mov	r8, r2
    2928:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case ROTATE_180: rotation = 2; break;
    292a:	2302      	movs	r3, #2
    292c:	e7e2      	b.n	28f4 <eink_it8951_put_display_buffer+0x4c>
        case ROTATE_270: rotation = 3; break;
    292e:	2303      	movs	r3, #3
    2930:	e7e0      	b.n	28f4 <eink_it8951_put_display_buffer+0x4c>
     eink_data[0] = (uint16_t) 0;
    2932:	a901      	add	r1, sp, #4
    2934:	2300      	movs	r3, #0
    2936:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    2938:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    293a:	4b0f      	ldr	r3, [pc, #60]	; (2978 <eink_it8951_put_display_buffer+0xd0>)
    293c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    293e:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    2940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2942:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    2944:	2302      	movs	r3, #2
    2946:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2948:	2201      	movs	r2, #1
    294a:	2034      	movs	r0, #52	; 0x34
    294c:	4c0c      	ldr	r4, [pc, #48]	; (2980 <eink_it8951_put_display_buffer+0xd8>)
    294e:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    2950:	2201      	movs	r2, #1
    2952:	466b      	mov	r3, sp
    2954:	1d99      	adds	r1, r3, #6
    2956:	2000      	movs	r0, #0
    2958:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    295a:	2201      	movs	r2, #1
    295c:	a902      	add	r1, sp, #8
    295e:	2000      	movs	r0, #0
    2960:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    2962:	2201      	movs	r2, #1
    2964:	210a      	movs	r1, #10
    2966:	4469      	add	r1, sp
    2968:	2000      	movs	r0, #0
    296a:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    296c:	2201      	movs	r2, #1
    296e:	a903      	add	r1, sp, #12
    2970:	2000      	movs	r0, #0
    2972:	47a0      	blx	r4
}
    2974:	e7d5      	b.n	2922 <eink_it8951_put_display_buffer+0x7a>
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	20000330 	.word	0x20000330
    297c:	0000020a 	.word	0x0000020a
    2980:	000025fd 	.word	0x000025fd
    2984:	20000314 	.word	0x20000314
    2988:	00002899 	.word	0x00002899

0000298c <eink_ite_set_bit>:
 * \param bit_value Bit value.
 */
void eink_ite_set_bit(uint8_t *byte, uint8_t bit_number, bool bit_value)
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
    298c:	2a00      	cmp	r2, #0
    298e:	d105      	bne.n	299c <eink_ite_set_bit+0x10>
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
    2990:	2201      	movs	r2, #1
    2992:	408a      	lsls	r2, r1
    2994:	7803      	ldrb	r3, [r0, #0]
    2996:	4393      	bics	r3, r2
    2998:	7003      	strb	r3, [r0, #0]
    }
    299a:	4770      	bx	lr
        *byte |= 1 << bit_number;
    299c:	2201      	movs	r2, #1
    299e:	408a      	lsls	r2, r1
    29a0:	7803      	ldrb	r3, [r0, #0]
    29a2:	4313      	orrs	r3, r2
    29a4:	7003      	strb	r3, [r0, #0]
    29a6:	e7f8      	b.n	299a <eink_ite_set_bit+0xe>

000029a8 <eink_it8951_set_pixel_raw>:
 * \param x_set X coordinate of the pixel to set.
 * \param y_set Y coordinate of the pixel to set.
 * \param pixel_value Greyscale value to set the pixel to.
 */
void eink_it8951_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value)
{
    29a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29aa:	46c6      	mov	lr, r8
    29ac:	b500      	push	{lr}
    29ae:	0015      	movs	r5, r2
    eink_coordinate x1_set, y1_set, odd_even_bit;
    uint32_t byte_set;
    
    /* Ignore any pixels being set outside of the display window */
    if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    29b0:	4b34      	ldr	r3, [pc, #208]	; (2a84 <eink_it8951_set_pixel_raw+0xdc>)
    29b2:	681f      	ldr	r7, [r3, #0]
    29b4:	887b      	ldrh	r3, [r7, #2]
    29b6:	4283      	cmp	r3, r0
    29b8:	d93f      	bls.n	2a3a <eink_it8951_set_pixel_raw+0x92>
    29ba:	88bb      	ldrh	r3, [r7, #4]
    29bc:	428b      	cmp	r3, r1
    29be:	d93c      	bls.n	2a3a <eink_it8951_set_pixel_raw+0x92>
        
        if ( (it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180) ) {
    29c0:	2330      	movs	r3, #48	; 0x30
    29c2:	4a31      	ldr	r2, [pc, #196]	; (2a88 <eink_it8951_set_pixel_raw+0xe0>)
    29c4:	5cd3      	ldrb	r3, [r2, r3]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d00c      	beq.n	29e4 <eink_it8951_set_pixel_raw+0x3c>
    29ca:	2330      	movs	r3, #48	; 0x30
    29cc:	5cd3      	ldrb	r3, [r2, r3]
    29ce:	2b02      	cmp	r3, #2
    29d0:	d008      	beq.n	29e4 <eink_it8951_set_pixel_raw+0x3c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
            odd_even_bit = y_set % 2;
        } else {
            /* Calculate which byte the pixel in question is contained in */
            y1_set = (y_set - (y_set % 2)) / 2;
            byte_set = y1_set + ((it8951_global_instance.display_config.display_height / 2) * x_set);
    29d2:	4b2d      	ldr	r3, [pc, #180]	; (2a88 <eink_it8951_set_pixel_raw+0xe0>)
    29d4:	885c      	ldrh	r4, [r3, #2]
    29d6:	0864      	lsrs	r4, r4, #1
    29d8:	4360      	muls	r0, r4
    29da:	104c      	asrs	r4, r1, #1
    29dc:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    29de:	2301      	movs	r3, #1
    29e0:	4019      	ands	r1, r3
    29e2:	e007      	b.n	29f4 <eink_it8951_set_pixel_raw+0x4c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
    29e4:	4b28      	ldr	r3, [pc, #160]	; (2a88 <eink_it8951_set_pixel_raw+0xe0>)
    29e6:	881c      	ldrh	r4, [r3, #0]
    29e8:	0864      	lsrs	r4, r4, #1
    29ea:	4360      	muls	r0, r4
    29ec:	104c      	asrs	r4, r1, #1
    29ee:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    29f0:	2301      	movs	r3, #1
    29f2:	4019      	ands	r1, r3
        }
        
        if (!odd_even_bit) {
    29f4:	2900      	cmp	r1, #0
    29f6:	d023      	beq.n	2a40 <eink_it8951_set_pixel_raw+0x98>
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
        } else {
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_value >> 3) & 0x1));
    29f8:	08ea      	lsrs	r2, r5, #3
    29fa:	2601      	movs	r6, #1
    29fc:	4032      	ands	r2, r6
    29fe:	6938      	ldr	r0, [r7, #16]
    2a00:	1900      	adds	r0, r0, r4
    2a02:	2107      	movs	r1, #7
    2a04:	4f21      	ldr	r7, [pc, #132]	; (2a8c <eink_it8951_set_pixel_raw+0xe4>)
    2a06:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_value >> 2) & 0x1));
    2a08:	08aa      	lsrs	r2, r5, #2
    2a0a:	4032      	ands	r2, r6
    2a0c:	4b1d      	ldr	r3, [pc, #116]	; (2a84 <eink_it8951_set_pixel_raw+0xdc>)
    2a0e:	4698      	mov	r8, r3
    2a10:	681b      	ldr	r3, [r3, #0]
    2a12:	6918      	ldr	r0, [r3, #16]
    2a14:	1900      	adds	r0, r0, r4
    2a16:	2106      	movs	r1, #6
    2a18:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_value >> 1) & 0x1));
    2a1a:	086a      	lsrs	r2, r5, #1
    2a1c:	4032      	ands	r2, r6
    2a1e:	4643      	mov	r3, r8
    2a20:	681b      	ldr	r3, [r3, #0]
    2a22:	6918      	ldr	r0, [r3, #16]
    2a24:	1900      	adds	r0, r0, r4
    2a26:	2105      	movs	r1, #5
    2a28:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_value & 0x1));
    2a2a:	0032      	movs	r2, r6
    2a2c:	402a      	ands	r2, r5
    2a2e:	4643      	mov	r3, r8
    2a30:	681b      	ldr	r3, [r3, #0]
    2a32:	6918      	ldr	r0, [r3, #16]
    2a34:	1900      	adds	r0, r0, r4
    2a36:	2104      	movs	r1, #4
    2a38:	47b8      	blx	r7
        }
    }
}
    2a3a:	bc04      	pop	{r2}
    2a3c:	4690      	mov	r8, r2
    2a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
    2a40:	08ea      	lsrs	r2, r5, #3
    2a42:	2601      	movs	r6, #1
    2a44:	4032      	ands	r2, r6
    2a46:	6938      	ldr	r0, [r7, #16]
    2a48:	1900      	adds	r0, r0, r4
    2a4a:	3103      	adds	r1, #3
    2a4c:	4f0f      	ldr	r7, [pc, #60]	; (2a8c <eink_it8951_set_pixel_raw+0xe4>)
    2a4e:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
    2a50:	08aa      	lsrs	r2, r5, #2
    2a52:	4032      	ands	r2, r6
    2a54:	4b0b      	ldr	r3, [pc, #44]	; (2a84 <eink_it8951_set_pixel_raw+0xdc>)
    2a56:	4698      	mov	r8, r3
    2a58:	681b      	ldr	r3, [r3, #0]
    2a5a:	6918      	ldr	r0, [r3, #16]
    2a5c:	1900      	adds	r0, r0, r4
    2a5e:	2102      	movs	r1, #2
    2a60:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
    2a62:	086a      	lsrs	r2, r5, #1
    2a64:	4032      	ands	r2, r6
    2a66:	4643      	mov	r3, r8
    2a68:	681b      	ldr	r3, [r3, #0]
    2a6a:	6918      	ldr	r0, [r3, #16]
    2a6c:	1900      	adds	r0, r0, r4
    2a6e:	2101      	movs	r1, #1
    2a70:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
    2a72:	0032      	movs	r2, r6
    2a74:	402a      	ands	r2, r5
    2a76:	4643      	mov	r3, r8
    2a78:	681b      	ldr	r3, [r3, #0]
    2a7a:	6918      	ldr	r0, [r3, #16]
    2a7c:	1900      	adds	r0, r0, r4
    2a7e:	2100      	movs	r1, #0
    2a80:	47b8      	blx	r7
    2a82:	e7da      	b.n	2a3a <eink_it8951_set_pixel_raw+0x92>
    2a84:	200003a0 	.word	0x200003a0
    2a88:	20000330 	.word	0x20000330
    2a8c:	0000298d 	.word	0x0000298d

00002a90 <eink_it8951_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_it8951_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    2a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a92:	46de      	mov	lr, fp
    2a94:	4657      	mov	r7, sl
    2a96:	464e      	mov	r6, r9
    2a98:	4645      	mov	r5, r8
    2a9a:	b5e0      	push	{r5, r6, r7, lr}
    2a9c:	b087      	sub	sp, #28
    2a9e:	9000      	str	r0, [sp, #0]
    2aa0:	0011      	movs	r1, r2
    2aa2:	9201      	str	r2, [sp, #4]
    2aa4:	4699      	mov	r9, r3
    2aa6:	ab10      	add	r3, sp, #64	; 0x40
    2aa8:	881b      	ldrh	r3, [r3, #0]
    2aaa:	469a      	mov	sl, r3
    2aac:	ab11      	add	r3, sp, #68	; 0x44
    2aae:	881b      	ldrh	r3, [r3, #0]
    2ab0:	469b      	mov	fp, r3
    volatile uint16_t buffer_index, i, j;
    volatile uint16_t k, l, m, bit_value_1, bit_value_2;
    eink_coordinate x_set, y_set;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    2ab2:	230e      	movs	r3, #14
    2ab4:	aa02      	add	r2, sp, #8
    2ab6:	4694      	mov	ip, r2
    2ab8:	4463      	add	r3, ip
    2aba:	2200      	movs	r2, #0
    2abc:	801a      	strh	r2, [r3, #0]
    2abe:	881b      	ldrh	r3, [r3, #0]
    2ac0:	b29b      	uxth	r3, r3
    2ac2:	4299      	cmp	r1, r3
    2ac4:	d966      	bls.n	2b94 <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    2ac6:	260a      	movs	r6, #10
    2ac8:	4466      	add	r6, ip
        for (j = 0; j < image_height_bytes; j++) {
            x_set = x_place+i;
            y_set = y_place+m;
            
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    2aca:	4f36      	ldr	r7, [pc, #216]	; (2ba4 <eink_it8951_graphics_load_4bgrey_image+0x114>)
    2acc:	464d      	mov	r5, r9
    2ace:	46d1      	mov	r9, sl
    2ad0:	e054      	b.n	2b7c <eink_it8951_graphics_load_4bgrey_image+0xec>
                /* Set the pixel in the display buffer */
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
            }

        m += 2;
    2ad2:	8833      	ldrh	r3, [r6, #0]
    2ad4:	3302      	adds	r3, #2
    2ad6:	b29b      	uxth	r3, r3
    2ad8:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    2ada:	8823      	ldrh	r3, [r4, #0]
    2adc:	3301      	adds	r3, #1
    2ade:	b29b      	uxth	r3, r3
    2ae0:	8023      	strh	r3, [r4, #0]
    2ae2:	8823      	ldrh	r3, [r4, #0]
    2ae4:	b29b      	uxth	r3, r3
    2ae6:	42ab      	cmp	r3, r5
    2ae8:	d23a      	bcs.n	2b60 <eink_it8951_graphics_load_4bgrey_image+0xd0>
            x_set = x_place+i;
    2aea:	230e      	movs	r3, #14
    2aec:	aa02      	add	r2, sp, #8
    2aee:	4694      	mov	ip, r2
    2af0:	4463      	add	r3, ip
    2af2:	881b      	ldrh	r3, [r3, #0]
    2af4:	444b      	add	r3, r9
    2af6:	b29b      	uxth	r3, r3
    2af8:	4698      	mov	r8, r3
            y_set = y_place+m;
    2afa:	8833      	ldrh	r3, [r6, #0]
    2afc:	b29b      	uxth	r3, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    2afe:	683a      	ldr	r2, [r7, #0]
    2b00:	8851      	ldrh	r1, [r2, #2]
    2b02:	4541      	cmp	r1, r8
    2b04:	d9e5      	bls.n	2ad2 <eink_it8951_graphics_load_4bgrey_image+0x42>
            y_set = y_place+m;
    2b06:	4453      	add	r3, sl
    2b08:	b29b      	uxth	r3, r3
    2b0a:	469b      	mov	fp, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    2b0c:	8893      	ldrh	r3, [r2, #4]
    2b0e:	455b      	cmp	r3, fp
    2b10:	d9df      	bls.n	2ad2 <eink_it8951_graphics_load_4bgrey_image+0x42>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    2b12:	210e      	movs	r1, #14
    2b14:	4461      	add	r1, ip
    2b16:	880b      	ldrh	r3, [r1, #0]
    2b18:	8822      	ldrh	r2, [r4, #0]
    2b1a:	436b      	muls	r3, r5
    2b1c:	9800      	ldr	r0, [sp, #0]
    2b1e:	4684      	mov	ip, r0
    2b20:	4462      	add	r2, ip
    2b22:	5cd2      	ldrb	r2, [r2, r3]
    2b24:	230f      	movs	r3, #15
    2b26:	4013      	ands	r3, r2
    2b28:	aa04      	add	r2, sp, #16
    2b2a:	8013      	strh	r3, [r2, #0]
                bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    2b2c:	880b      	ldrh	r3, [r1, #0]
    2b2e:	8821      	ldrh	r1, [r4, #0]
    2b30:	436b      	muls	r3, r5
    2b32:	4461      	add	r1, ip
    2b34:	5ccb      	ldrb	r3, [r1, r3]
    2b36:	091b      	lsrs	r3, r3, #4
    2b38:	a902      	add	r1, sp, #8
    2b3a:	80cb      	strh	r3, [r1, #6]
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
    2b3c:	8812      	ldrh	r2, [r2, #0]
    2b3e:	43d2      	mvns	r2, r2
    2b40:	b2d2      	uxtb	r2, r2
    2b42:	465b      	mov	r3, fp
    2b44:	1c59      	adds	r1, r3, #1
    2b46:	b289      	uxth	r1, r1
    2b48:	4640      	mov	r0, r8
    2b4a:	4b17      	ldr	r3, [pc, #92]	; (2ba8 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    2b4c:	4798      	blx	r3
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
    2b4e:	ab02      	add	r3, sp, #8
    2b50:	88da      	ldrh	r2, [r3, #6]
    2b52:	43d2      	mvns	r2, r2
    2b54:	b2d2      	uxtb	r2, r2
    2b56:	4659      	mov	r1, fp
    2b58:	4640      	mov	r0, r8
    2b5a:	4b13      	ldr	r3, [pc, #76]	; (2ba8 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    2b5c:	4798      	blx	r3
    2b5e:	e7b8      	b.n	2ad2 <eink_it8951_graphics_load_4bgrey_image+0x42>
    2b60:	46d3      	mov	fp, sl
    for (i = 0; i < image_width_px; i++) {
    2b62:	220e      	movs	r2, #14
    2b64:	ab02      	add	r3, sp, #8
    2b66:	469c      	mov	ip, r3
    2b68:	4462      	add	r2, ip
    2b6a:	8813      	ldrh	r3, [r2, #0]
    2b6c:	3301      	adds	r3, #1
    2b6e:	b29b      	uxth	r3, r3
    2b70:	8013      	strh	r3, [r2, #0]
    2b72:	8813      	ldrh	r3, [r2, #0]
    2b74:	b29b      	uxth	r3, r3
    2b76:	9a01      	ldr	r2, [sp, #4]
    2b78:	4293      	cmp	r3, r2
    2b7a:	d20b      	bcs.n	2b94 <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    2b7c:	2300      	movs	r3, #0
    2b7e:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    2b80:	ab05      	add	r3, sp, #20
    2b82:	2200      	movs	r2, #0
    2b84:	801a      	strh	r2, [r3, #0]
    2b86:	881b      	ldrh	r3, [r3, #0]
    2b88:	b29b      	uxth	r3, r3
    2b8a:	429d      	cmp	r5, r3
    2b8c:	d9e9      	bls.n	2b62 <eink_it8951_graphics_load_4bgrey_image+0xd2>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    2b8e:	ac05      	add	r4, sp, #20
    2b90:	46da      	mov	sl, fp
    2b92:	e7aa      	b.n	2aea <eink_it8951_graphics_load_4bgrey_image+0x5a>
        }
    }
    2b94:	b007      	add	sp, #28
    2b96:	bc3c      	pop	{r2, r3, r4, r5}
    2b98:	4690      	mov	r8, r2
    2b9a:	4699      	mov	r9, r3
    2b9c:	46a2      	mov	sl, r4
    2b9e:	46ab      	mov	fp, r5
    2ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	200003a0 	.word	0x200003a0
    2ba8:	000029a9 	.word	0x000029a9

00002bac <uc8173_init>:
 *
 * Call this function to initialize the hardware interface and the UC8173 display
 * driver. When initialization is done the display is ready to receive data.
 */
void uc8173_init(void)
{
    2bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bae:	b083      	sub	sp, #12
    /* Initialize delay routine */
    delay_init(SysTick);
    2bb0:	4812      	ldr	r0, [pc, #72]	; (2bfc <uc8173_init+0x50>)
    2bb2:	4b13      	ldr	r3, [pc, #76]	; (2c00 <uc8173_init+0x54>)
    2bb4:	4798      	blx	r3

    /* Initialize the interface */
    eink_interface_init(0);
    2bb6:	2000      	movs	r0, #0
    2bb8:	4b12      	ldr	r3, [pc, #72]	; (2c04 <uc8173_init+0x58>)
    2bba:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2bbc:	25c0      	movs	r5, #192	; 0xc0
    2bbe:	05ed      	lsls	r5, r5, #23
    2bc0:	2640      	movs	r6, #64	; 0x40
    2bc2:	616e      	str	r6, [r5, #20]
    delay_ms(1);
    2bc4:	2001      	movs	r0, #1
    2bc6:	4c10      	ldr	r4, [pc, #64]	; (2c08 <uc8173_init+0x5c>)
    2bc8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2bca:	61ae      	str	r6, [r5, #24]
    delay_ms(1);
    2bcc:	2001      	movs	r0, #1
    2bce:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2bd0:	4f0e      	ldr	r7, [pc, #56]	; (2c0c <uc8173_init+0x60>)
	CRITICAL_SECTION_LEAVE();
    2bd2:	4e0f      	ldr	r6, [pc, #60]	; (2c10 <uc8173_init+0x64>)
	CRITICAL_SECTION_ENTER();
    2bd4:	a801      	add	r0, sp, #4
    2bd6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2bd8:	23c0      	movs	r3, #192	; 0xc0
    2bda:	05db      	lsls	r3, r3, #23
    2bdc:	2580      	movs	r5, #128	; 0x80
    2bde:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2be0:	22a0      	movs	r2, #160	; 0xa0
    2be2:	490c      	ldr	r1, [pc, #48]	; (2c14 <uc8173_init+0x68>)
    2be4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2be6:	2190      	movs	r1, #144	; 0x90
    2be8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2bea:	4053      	eors	r3, r2
    2bec:	401c      	ands	r4, r3
    2bee:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2bf0:	a801      	add	r0, sp, #4
    2bf2:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2bf4:	4225      	tst	r5, r4
    2bf6:	d0ed      	beq.n	2bd4 <uc8173_init+0x28>
    /* Reset display */
    uc8173_hard_reset();
    
    /* Wait for BUSY output to return HIGH */
    uc8173_wait_for_busy_low();
}
    2bf8:	b003      	add	sp, #12
    2bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bfc:	e000e010 	.word	0xe000e010
    2c00:	00000369 	.word	0x00000369
    2c04:	00000bf9 	.word	0x00000bf9
    2c08:	0000037d 	.word	0x0000037d
    2c0c:	0000034d 	.word	0x0000034d
    2c10:	0000035b 	.word	0x0000035b
    2c14:	41004400 	.word	0x41004400

00002c18 <uc8173_measure_vcom>:
 *
 * Measure the VCOM voltage from the UC8173's internal mechanism and sets the 
 * VDCS and VBDS setting.
 */
void uc8173_measure_vcom(void)
{
    2c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c1a:	b083      	sub	sp, #12
	uint8_t vcom_value = 0, eink_data[1];
    2c1c:	2200      	movs	r2, #0
    2c1e:	466b      	mov	r3, sp
    2c20:	71da      	strb	r2, [r3, #7]
	
	/* Auto measure VCOM */
	eink_data[0] = 0x11;
    2c22:	a901      	add	r1, sp, #4
    2c24:	2311      	movs	r3, #17
    2c26:	700b      	strb	r3, [r1, #0]
	eink_write_data(UC8173_AMV, eink_data, 1);
    2c28:	3201      	adds	r2, #1
    2c2a:	2080      	movs	r0, #128	; 0x80
    2c2c:	4b16      	ldr	r3, [pc, #88]	; (2c88 <uc8173_measure_vcom+0x70>)
    2c2e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2c30:	4f16      	ldr	r7, [pc, #88]	; (2c8c <uc8173_measure_vcom+0x74>)
	CRITICAL_SECTION_LEAVE();
    2c32:	4e17      	ldr	r6, [pc, #92]	; (2c90 <uc8173_measure_vcom+0x78>)
	CRITICAL_SECTION_ENTER();
    2c34:	4668      	mov	r0, sp
    2c36:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c38:	23c0      	movs	r3, #192	; 0xc0
    2c3a:	05db      	lsls	r3, r3, #23
    2c3c:	2580      	movs	r5, #128	; 0x80
    2c3e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c40:	22a0      	movs	r2, #160	; 0xa0
    2c42:	4914      	ldr	r1, [pc, #80]	; (2c94 <uc8173_measure_vcom+0x7c>)
    2c44:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c46:	2190      	movs	r1, #144	; 0x90
    2c48:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2c4a:	4053      	eors	r3, r2
    2c4c:	401c      	ands	r4, r3
    2c4e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c50:	4668      	mov	r0, sp
    2c52:	47b0      	blx	r6
    2c54:	4225      	tst	r5, r4
    2c56:	d0ed      	beq.n	2c34 <uc8173_measure_vcom+0x1c>
	uc8173_wait_for_busy_low();

	/* Read the measured VCOM value using 'VV' command */
	eink_read_data(UC8173_VV, &vcom_value, 1);
    2c58:	466b      	mov	r3, sp
    2c5a:	1ddc      	adds	r4, r3, #7
    2c5c:	2201      	movs	r2, #1
    2c5e:	0021      	movs	r1, r4
    2c60:	2081      	movs	r0, #129	; 0x81
    2c62:	4b0d      	ldr	r3, [pc, #52]	; (2c98 <uc8173_measure_vcom+0x80>)
    2c64:	4798      	blx	r3
	vcom_value = vcom_value + 12;
    2c66:	7823      	ldrb	r3, [r4, #0]
    2c68:	330c      	adds	r3, #12
    2c6a:	b2db      	uxtb	r3, r3
    2c6c:	7023      	strb	r3, [r4, #0]

	eink_data[0] = vcom_value;
    2c6e:	ac01      	add	r4, sp, #4
    2c70:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_VDCS, eink_data, 1);
    2c72:	2201      	movs	r2, #1
    2c74:	0021      	movs	r1, r4
    2c76:	2082      	movs	r0, #130	; 0x82
    2c78:	4d03      	ldr	r5, [pc, #12]	; (2c88 <uc8173_measure_vcom+0x70>)
    2c7a:	47a8      	blx	r5
	eink_write_data(UC8173_VBDS, eink_data, 1);
    2c7c:	2201      	movs	r2, #1
    2c7e:	0021      	movs	r1, r4
    2c80:	2084      	movs	r0, #132	; 0x84
    2c82:	47a8      	blx	r5

    2c84:	b003      	add	sp, #12
    2c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c88:	00001625 	.word	0x00001625
    2c8c:	0000034d 	.word	0x0000034d
    2c90:	0000035b 	.word	0x0000035b
    2c94:	41004400 	.word	0x41004400
    2c98:	000024a9 	.word	0x000024a9

00002c9c <uc8173_set_config>:
{
    2c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c9e:	b085      	sub	sp, #20
    uc8173_global_instance.display_config = *config;
    2ca0:	7802      	ldrb	r2, [r0, #0]
    2ca2:	4b55      	ldr	r3, [pc, #340]	; (2df8 <uc8173_set_config+0x15c>)
    2ca4:	701a      	strb	r2, [r3, #0]
	if((config->display_rotation == ROTATE_90) || (config->display_rotation == ROTATE_270)) {
    2ca6:	7803      	ldrb	r3, [r0, #0]
    2ca8:	2202      	movs	r2, #2
    2caa:	4393      	bics	r3, r2
    2cac:	2b01      	cmp	r3, #1
    2cae:	d100      	bne.n	2cb2 <uc8173_set_config+0x16>
    2cb0:	e09c      	b.n	2dec <uc8173_set_config+0x150>
		uc8173_global_instance.display_width   = 256;
    2cb2:	4b51      	ldr	r3, [pc, #324]	; (2df8 <uc8173_set_config+0x15c>)
    2cb4:	2280      	movs	r2, #128	; 0x80
    2cb6:	0052      	lsls	r2, r2, #1
    2cb8:	805a      	strh	r2, [r3, #2]
		uc8173_global_instance.display_height  = 128;
    2cba:	3a80      	subs	r2, #128	; 0x80
    2cbc:	809a      	strh	r2, [r3, #4]
    eink_data[0] = 0x17;
    2cbe:	ac02      	add	r4, sp, #8
    2cc0:	2317      	movs	r3, #23
    2cc2:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x17;
    2cc4:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x26;
    2cc6:	330f      	adds	r3, #15
    2cc8:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_BTST, eink_data, 3);
    2cca:	2203      	movs	r2, #3
    2ccc:	0021      	movs	r1, r4
    2cce:	2006      	movs	r0, #6
    2cd0:	4d4a      	ldr	r5, [pc, #296]	; (2dfc <uc8173_set_config+0x160>)
    2cd2:	47a8      	blx	r5
	eink_data[0] = 0x03;
    2cd4:	2303      	movs	r3, #3
    2cd6:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
    2cd8:	2300      	movs	r3, #0
    2cda:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x2B;
    2cdc:	332b      	adds	r3, #43	; 0x2b
    2cde:	70a3      	strb	r3, [r4, #2]
	eink_data[3] = 0x2B;
    2ce0:	70e3      	strb	r3, [r4, #3]
	eink_data[4] = 0x08;
    2ce2:	3b23      	subs	r3, #35	; 0x23
    2ce4:	7123      	strb	r3, [r4, #4]
	eink_write_data(UC8173_PWR, eink_data, 5);
    2ce6:	2205      	movs	r2, #5
    2ce8:	0021      	movs	r1, r4
    2cea:	2001      	movs	r0, #1
    2cec:	47a8      	blx	r5
	eink_write_data(UC8173_PON, 0, 0);
    2cee:	2200      	movs	r2, #0
    2cf0:	2100      	movs	r1, #0
    2cf2:	2004      	movs	r0, #4
    2cf4:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    2cf6:	4f42      	ldr	r7, [pc, #264]	; (2e00 <uc8173_set_config+0x164>)
	CRITICAL_SECTION_LEAVE();
    2cf8:	4e42      	ldr	r6, [pc, #264]	; (2e04 <uc8173_set_config+0x168>)
	CRITICAL_SECTION_ENTER();
    2cfa:	4668      	mov	r0, sp
    2cfc:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2cfe:	23c0      	movs	r3, #192	; 0xc0
    2d00:	05db      	lsls	r3, r3, #23
    2d02:	2580      	movs	r5, #128	; 0x80
    2d04:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d06:	22a0      	movs	r2, #160	; 0xa0
    2d08:	493f      	ldr	r1, [pc, #252]	; (2e08 <uc8173_set_config+0x16c>)
    2d0a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d0c:	2190      	movs	r1, #144	; 0x90
    2d0e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d10:	4053      	eors	r3, r2
    2d12:	401c      	ands	r4, r3
    2d14:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2d16:	4668      	mov	r0, sp
    2d18:	47b0      	blx	r6
    2d1a:	4225      	tst	r5, r4
    2d1c:	d0ed      	beq.n	2cfa <uc8173_set_config+0x5e>
	eink_data[0] = 0x03;
    2d1e:	ac02      	add	r4, sp, #8
    2d20:	2703      	movs	r7, #3
    2d22:	7027      	strb	r7, [r4, #0]
	eink_data[1] = 0x86;
    2d24:	2386      	movs	r3, #134	; 0x86
    2d26:	7063      	strb	r3, [r4, #1]
	eink_write_data(UC8173_PSR, eink_data, 2);
    2d28:	2202      	movs	r2, #2
    2d2a:	0021      	movs	r1, r4
    2d2c:	2000      	movs	r0, #0
    2d2e:	4d33      	ldr	r5, [pc, #204]	; (2dfc <uc8173_set_config+0x160>)
    2d30:	47a8      	blx	r5
	eink_data[0] = 0x00;
    2d32:	2600      	movs	r6, #0
    2d34:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_PFS, eink_data, 1);
    2d36:	2201      	movs	r2, #1
    2d38:	0021      	movs	r1, r4
    2d3a:	2003      	movs	r0, #3
    2d3c:	47a8      	blx	r5
	eink_data[0] = 0x48;
    2d3e:	2348      	movs	r3, #72	; 0x48
    2d40:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_LPRD, eink_data, 1);
    2d42:	2201      	movs	r2, #1
    2d44:	0021      	movs	r1, r4
    2d46:	2030      	movs	r0, #48	; 0x30
    2d48:	47a8      	blx	r5
	eink_data[0] = 0x00; /* Internal Sensor Enabled */
    2d4a:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_TSE, eink_data, 1);
    2d4c:	2201      	movs	r2, #1
    2d4e:	0021      	movs	r1, r4
    2d50:	2041      	movs	r0, #65	; 0x41
    2d52:	47a8      	blx	r5
	eink_data[0] = 0xE1;
    2d54:	23e1      	movs	r3, #225	; 0xe1
    2d56:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x20;
    2d58:	3bc1      	subs	r3, #193	; 0xc1
    2d5a:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x10;
    2d5c:	3b10      	subs	r3, #16
    2d5e:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_CDI, eink_data, 3);
    2d60:	2203      	movs	r2, #3
    2d62:	0021      	movs	r1, r4
    2d64:	2050      	movs	r0, #80	; 0x50
    2d66:	47a8      	blx	r5
	eink_data[0] = 0x7F; /* H = 127 */
    2d68:	237f      	movs	r3, #127	; 0x7f
    2d6a:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
    2d6c:	7066      	strb	r6, [r4, #1]
	eink_data[2] = 0xFF; /* W = 255 */
    2d6e:	3380      	adds	r3, #128	; 0x80
    2d70:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_TRES, eink_data, 3);
    2d72:	2203      	movs	r2, #3
    2d74:	0021      	movs	r1, r4
    2d76:	2061      	movs	r0, #97	; 0x61
    2d78:	47a8      	blx	r5
	eink_data[0] = 0xCF;
    2d7a:	23cf      	movs	r3, #207	; 0xcf
    2d7c:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0xAF;
    2d7e:	3b20      	subs	r3, #32
    2d80:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x00;
    2d82:	70a6      	strb	r6, [r4, #2]
	eink_data[3] = 0x00;
    2d84:	70e6      	strb	r6, [r4, #3]
	eink_data[4] = 0x03;
    2d86:	7127      	strb	r7, [r4, #4]
	eink_write_data(UC8173_GDS, eink_data, 5);
    2d88:	2205      	movs	r2, #5
    2d8a:	0021      	movs	r1, r4
    2d8c:	2062      	movs	r0, #98	; 0x62
    2d8e:	47a8      	blx	r5
	uc8173_measure_vcom();
    2d90:	4b1e      	ldr	r3, [pc, #120]	; (2e0c <uc8173_set_config+0x170>)
    2d92:	4798      	blx	r3
	eink_data[0] = 0x02;
    2d94:	3602      	adds	r6, #2
    2d96:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_LVSEL, eink_data, 1);
    2d98:	2201      	movs	r2, #1
    2d9a:	0021      	movs	r1, r4
    2d9c:	20e4      	movs	r0, #228	; 0xe4
    2d9e:	47a8      	blx	r5
	eink_data[0] = 0x02;
    2da0:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    2da2:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GBS, eink_data, 2);
    2da4:	2202      	movs	r2, #2
    2da6:	0021      	movs	r1, r4
    2da8:	2063      	movs	r0, #99	; 0x63
    2daa:	47a8      	blx	r5
	eink_data[0] = 0x02;
    2dac:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    2dae:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GSS, eink_data, 2);
    2db0:	2202      	movs	r2, #2
    2db2:	0021      	movs	r1, r4
    2db4:	2064      	movs	r0, #100	; 0x64
    2db6:	47a8      	blx	r5
	eink_write_data(UC8173_POF, 0, 0);
    2db8:	2200      	movs	r2, #0
    2dba:	2100      	movs	r1, #0
    2dbc:	2002      	movs	r0, #2
    2dbe:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    2dc0:	4f0f      	ldr	r7, [pc, #60]	; (2e00 <uc8173_set_config+0x164>)
	CRITICAL_SECTION_LEAVE();
    2dc2:	4e10      	ldr	r6, [pc, #64]	; (2e04 <uc8173_set_config+0x168>)
	CRITICAL_SECTION_ENTER();
    2dc4:	a801      	add	r0, sp, #4
    2dc6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2dc8:	23c0      	movs	r3, #192	; 0xc0
    2dca:	05db      	lsls	r3, r3, #23
    2dcc:	2580      	movs	r5, #128	; 0x80
    2dce:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2dd0:	22a0      	movs	r2, #160	; 0xa0
    2dd2:	490d      	ldr	r1, [pc, #52]	; (2e08 <uc8173_set_config+0x16c>)
    2dd4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2dd6:	2190      	movs	r1, #144	; 0x90
    2dd8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2dda:	4053      	eors	r3, r2
    2ddc:	401c      	ands	r4, r3
    2dde:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2de0:	a801      	add	r0, sp, #4
    2de2:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    2de4:	4225      	tst	r5, r4
    2de6:	d1ed      	bne.n	2dc4 <uc8173_set_config+0x128>
}
    2de8:	b005      	add	sp, #20
    2dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uc8173_global_instance.display_width   = 128;
    2dec:	4b02      	ldr	r3, [pc, #8]	; (2df8 <uc8173_set_config+0x15c>)
    2dee:	327e      	adds	r2, #126	; 0x7e
    2df0:	805a      	strh	r2, [r3, #2]
		uc8173_global_instance.display_height  = 256;
    2df2:	3280      	adds	r2, #128	; 0x80
    2df4:	809a      	strh	r2, [r3, #4]
    2df6:	e762      	b.n	2cbe <uc8173_set_config+0x22>
    2df8:	20000304 	.word	0x20000304
    2dfc:	00001625 	.word	0x00001625
    2e00:	0000034d 	.word	0x0000034d
    2e04:	0000035b 	.word	0x0000035b
    2e08:	41004400 	.word	0x41004400
    2e0c:	00002c19 	.word	0x00002c19

00002e10 <eink_ed013tc1_init>:
{    
    2e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e12:	0006      	movs	r6, r0
    2e14:	000c      	movs	r4, r1
    ed013tc1_dtm1_display_buffer = (uint8_t*) malloc (malloc_size);
    2e16:	2080      	movs	r0, #128	; 0x80
    2e18:	0140      	lsls	r0, r0, #5
    2e1a:	4d1c      	ldr	r5, [pc, #112]	; (2e8c <eink_ed013tc1_init+0x7c>)
    2e1c:	47a8      	blx	r5
    2e1e:	0007      	movs	r7, r0
    2e20:	4b1b      	ldr	r3, [pc, #108]	; (2e90 <eink_ed013tc1_init+0x80>)
    2e22:	6018      	str	r0, [r3, #0]
    ed013tc1_dtm2_display_buffer = (uint8_t*) malloc (malloc_size);
    2e24:	2080      	movs	r0, #128	; 0x80
    2e26:	0140      	lsls	r0, r0, #5
    2e28:	47a8      	blx	r5
    2e2a:	4b1a      	ldr	r3, [pc, #104]	; (2e94 <eink_ed013tc1_init+0x84>)
    2e2c:	6018      	str	r0, [r3, #0]
    eink_gfx_ed013tc1_config.display_buffer_1_ptr = ed013tc1_dtm1_display_buffer;
    2e2e:	4d1a      	ldr	r5, [pc, #104]	; (2e98 <eink_ed013tc1_init+0x88>)
    2e30:	612f      	str	r7, [r5, #16]
    eink_gfx_ed013tc1_config.display_buffer_2_ptr = ed013tc1_dtm2_display_buffer;
    2e32:	6168      	str	r0, [r5, #20]
    uc8173_init();
    2e34:	4b19      	ldr	r3, [pc, #100]	; (2e9c <eink_ed013tc1_init+0x8c>)
    2e36:	4798      	blx	r3
    uc8173_set_config(config);
    2e38:	0030      	movs	r0, r6
    2e3a:	4b19      	ldr	r3, [pc, #100]	; (2ea0 <eink_ed013tc1_init+0x90>)
    2e3c:	4798      	blx	r3
    eink_gfx_ed013tc1_config.display_rotation = config->display_rotation;
    2e3e:	7833      	ldrb	r3, [r6, #0]
    2e40:	732b      	strb	r3, [r5, #12]
    ptr_eink_gfx_config = (struct eink_gfx_config*) &eink_gfx_ed013tc1_config;
    2e42:	4b18      	ldr	r3, [pc, #96]	; (2ea4 <eink_ed013tc1_init+0x94>)
    2e44:	601d      	str	r5, [r3, #0]
    for (buffer_index = 0; buffer_index < GFX_ED013TC1_DISPLAY_BUFFER_SIZE; buffer_index++) {
    2e46:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM1 is previous buffer */
    2e48:	4916      	ldr	r1, [pc, #88]	; (2ea4 <eink_ed013tc1_init+0x94>)
    2e4a:	22ff      	movs	r2, #255	; 0xff
    for (buffer_index = 0; buffer_index < GFX_ED013TC1_DISPLAY_BUFFER_SIZE; buffer_index++) {
    2e4c:	2580      	movs	r5, #128	; 0x80
    2e4e:	016d      	lsls	r5, r5, #5
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM1 is previous buffer */
    2e50:	6808      	ldr	r0, [r1, #0]
    2e52:	6900      	ldr	r0, [r0, #16]
    2e54:	54c2      	strb	r2, [r0, r3]
        ptr_eink_gfx_config->display_buffer_2_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    2e56:	6808      	ldr	r0, [r1, #0]
    2e58:	6940      	ldr	r0, [r0, #20]
    2e5a:	54c2      	strb	r2, [r0, r3]
    for (buffer_index = 0; buffer_index < GFX_ED013TC1_DISPLAY_BUFFER_SIZE; buffer_index++) {
    2e5c:	3301      	adds	r3, #1
    2e5e:	42ab      	cmp	r3, r5
    2e60:	d1f6      	bne.n	2e50 <eink_ed013tc1_init+0x40>
	eink_write_data(UC8173_DTM3, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    2e62:	2680      	movs	r6, #128	; 0x80
    2e64:	0176      	lsls	r6, r6, #5
    2e66:	4f0f      	ldr	r7, [pc, #60]	; (2ea4 <eink_ed013tc1_init+0x94>)
    2e68:	683b      	ldr	r3, [r7, #0]
    2e6a:	6919      	ldr	r1, [r3, #16]
    2e6c:	0032      	movs	r2, r6
    2e6e:	2015      	movs	r0, #21
    2e70:	4d0d      	ldr	r5, [pc, #52]	; (2ea8 <eink_ed013tc1_init+0x98>)
    2e72:	47a8      	blx	r5
	eink_write_data(UC8173_DTM4, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    2e74:	683b      	ldr	r3, [r7, #0]
    2e76:	6959      	ldr	r1, [r3, #20]
    2e78:	0032      	movs	r2, r6
    2e7a:	2016      	movs	r0, #22
    2e7c:	47a8      	blx	r5
    if(clear_display) eink_ed013tc1_put_display_buffer(true);
    2e7e:	2c00      	cmp	r4, #0
    2e80:	d100      	bne.n	2e84 <eink_ed013tc1_init+0x74>
}
    2e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(clear_display) eink_ed013tc1_put_display_buffer(true);
    2e84:	2001      	movs	r0, #1
    2e86:	4b09      	ldr	r3, [pc, #36]	; (2eac <eink_ed013tc1_init+0x9c>)
    2e88:	4798      	blx	r3
}
    2e8a:	e7fa      	b.n	2e82 <eink_ed013tc1_init+0x72>
    2e8c:	00003d35 	.word	0x00003d35
    2e90:	20000394 	.word	0x20000394
    2e94:	20000380 	.word	0x20000380
    2e98:	20000000 	.word	0x20000000
    2e9c:	00002bad 	.word	0x00002bad
    2ea0:	00002c9d 	.word	0x00002c9d
    2ea4:	200003a0 	.word	0x200003a0
    2ea8:	00001625 	.word	0x00001625
    2eac:	0000237d 	.word	0x0000237d

00002eb0 <uc8151_set_psr_config>:
 *
 * \param *psr_config The PSR structure to write to the PSR register.
 */
void uc8151_set_psr_config(
        const struct uc8151_panel_settings *psr_config)
{    
    2eb0:	b510      	push	{r4, lr}
    2eb2:	b082      	sub	sp, #8
    2eb4:	0004      	movs	r4, r0
    /* Copy configuration into UC8151 instance */
    uc8151_global_instance.panel_settings = *psr_config;
    2eb6:	2205      	movs	r2, #5
    2eb8:	0001      	movs	r1, r0
    2eba:	4859      	ldr	r0, [pc, #356]	; (3020 <uc8151_set_psr_config+0x170>)
    2ebc:	4b59      	ldr	r3, [pc, #356]	; (3024 <uc8151_set_psr_config+0x174>)
    2ebe:	4798      	blx	r3
    
    /* Save display resolution into UC8151 instance */
    switch (psr_config->display_resolution) {
    2ec0:	7823      	ldrb	r3, [r4, #0]
    2ec2:	2b01      	cmp	r3, #1
    2ec4:	d066      	beq.n	2f94 <uc8151_set_psr_config+0xe4>
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d053      	beq.n	2f72 <uc8151_set_psr_config+0xc2>
    2eca:	2b02      	cmp	r3, #2
    2ecc:	d100      	bne.n	2ed0 <uc8151_set_psr_config+0x20>
    2ece:	e072      	b.n	2fb6 <uc8151_set_psr_config+0x106>
    2ed0:	2b03      	cmp	r3, #3
    2ed2:	d100      	bne.n	2ed6 <uc8151_set_psr_config+0x26>
    2ed4:	e081      	b.n	2fda <uc8151_set_psr_config+0x12a>
    }
    
    uint8_t eink_data[5];

    /* Translate the panel settings structure to the required bytes to be sent to the display */
    switch (psr_config->display_resolution) {
    2ed6:	7823      	ldrb	r3, [r4, #0]
    2ed8:	2b01      	cmp	r3, #1
    2eda:	d100      	bne.n	2ede <uc8151_set_psr_config+0x2e>
    2edc:	e093      	b.n	3006 <uc8151_set_psr_config+0x156>
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d100      	bne.n	2ee4 <uc8151_set_psr_config+0x34>
    2ee2:	e08c      	b.n	2ffe <uc8151_set_psr_config+0x14e>
    2ee4:	2b02      	cmp	r3, #2
    2ee6:	d100      	bne.n	2eea <uc8151_set_psr_config+0x3a>
    2ee8:	e091      	b.n	300e <uc8151_set_psr_config+0x15e>
    2eea:	2b03      	cmp	r3, #3
    2eec:	d100      	bne.n	2ef0 <uc8151_set_psr_config+0x40>
    2eee:	e092      	b.n	3016 <uc8151_set_psr_config+0x166>
        case RES_96x230:                eink_data[0] = 0x00; break;
        case RES_96x252:                eink_data[0] = 0x01; break;
        case RES_128x296:               eink_data[0] = 0x02; break;
        case RES_160x296:               eink_data[0] = 0x03; break;
    }
    eink_data[0] = eink_data[0] << 1;
    2ef0:	466b      	mov	r3, sp
    2ef2:	781b      	ldrb	r3, [r3, #0]
    2ef4:	005b      	lsls	r3, r3, #1
    2ef6:	b2db      	uxtb	r3, r3
    2ef8:	466a      	mov	r2, sp
    2efa:	7013      	strb	r3, [r2, #0]
    switch (psr_config->lut_selection) {
    2efc:	7862      	ldrb	r2, [r4, #1]
    2efe:	2a01      	cmp	r2, #1
    2f00:	d102      	bne.n	2f08 <uc8151_set_psr_config+0x58>
        case LUT_FROM_OTP:              eink_data[0] |= 0x00; break;
        case LUT_FROM_REGISTER:         eink_data[0] |= 0x01; break;
    2f02:	4313      	orrs	r3, r2
    2f04:	466a      	mov	r2, sp
    2f06:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    2f08:	466b      	mov	r3, sp
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	005b      	lsls	r3, r3, #1
    2f0e:	b2db      	uxtb	r3, r3
    2f10:	466a      	mov	r2, sp
    2f12:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_colours) {
    2f14:	78a2      	ldrb	r2, [r4, #2]
    2f16:	2a00      	cmp	r2, #0
    2f18:	d103      	bne.n	2f22 <uc8151_set_psr_config+0x72>
        case B_W_R_PIXELS:              eink_data[0] |= 0x00; break;
        case B_W_PIXELS:                eink_data[0] |= 0x01; break;
    2f1a:	2201      	movs	r2, #1
    2f1c:	4313      	orrs	r3, r2
    2f1e:	466a      	mov	r2, sp
    2f20:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 2;
    2f22:	466b      	mov	r3, sp
    2f24:	781b      	ldrb	r3, [r3, #0]
    2f26:	009b      	lsls	r3, r3, #2
    2f28:	b2db      	uxtb	r3, r3
    2f2a:	466a      	mov	r2, sp
    2f2c:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_rotation) {
    2f2e:	78e2      	ldrb	r2, [r4, #3]
    2f30:	3a01      	subs	r2, #1
    2f32:	2a01      	cmp	r2, #1
    2f34:	d803      	bhi.n	2f3e <uc8151_set_psr_config+0x8e>
        case ROTATE_0:
        case ROTATE_270:                 eink_data[0] |= 0b00; break;
        case ROTATE_180:
        case ROTATE_90:                  eink_data[0] |= 0b11; break;
    2f36:	2203      	movs	r2, #3
    2f38:	4313      	orrs	r3, r2
    2f3a:	466a      	mov	r2, sp
    2f3c:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    2f3e:	466b      	mov	r3, sp
    2f40:	781b      	ldrb	r3, [r3, #0]
    2f42:	005b      	lsls	r3, r3, #1
    2f44:	b2db      	uxtb	r3, r3
    2f46:	466a      	mov	r2, sp
    2f48:	7013      	strb	r3, [r2, #0]
    switch (psr_config->booster_switch) {
    2f4a:	7922      	ldrb	r2, [r4, #4]
    2f4c:	2a01      	cmp	r2, #1
    2f4e:	d102      	bne.n	2f56 <uc8151_set_psr_config+0xa6>
        case BOOSTER_OFF:               eink_data[0] |= 0x00; break;
        case BOOSTER_ON:                eink_data[0] |= 0x01; break;
    2f50:	4313      	orrs	r3, r2
    2f52:	466a      	mov	r2, sp
    2f54:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    2f56:	466b      	mov	r3, sp
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	005b      	lsls	r3, r3, #1
    /* Add the soft reset bit */
    eink_data[0] |= 0x01;
    2f5c:	2201      	movs	r2, #1
    2f5e:	4313      	orrs	r3, r2
    2f60:	466a      	mov	r2, sp
    2f62:	7013      	strb	r3, [r2, #0]
    /* Send the PSR register to the display */
    eink_write_data(UC8151_PSR, eink_data, 1);
    2f64:	2201      	movs	r2, #1
    2f66:	4669      	mov	r1, sp
    2f68:	2000      	movs	r0, #0
    2f6a:	4b2f      	ldr	r3, [pc, #188]	; (3028 <uc8151_set_psr_config+0x178>)
    2f6c:	4798      	blx	r3
    2f6e:	b002      	add	sp, #8
    2f70:	bd10      	pop	{r4, pc}
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    2f72:	78e3      	ldrb	r3, [r4, #3]
    2f74:	2202      	movs	r2, #2
    2f76:	4393      	bics	r3, r2
    2f78:	2b01      	cmp	r3, #1
    2f7a:	d005      	beq.n	2f88 <uc8151_set_psr_config+0xd8>
                uc8151_global_instance.display_width   = 230;
    2f7c:	4b28      	ldr	r3, [pc, #160]	; (3020 <uc8151_set_psr_config+0x170>)
    2f7e:	22e6      	movs	r2, #230	; 0xe6
    2f80:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    2f82:	3a86      	subs	r2, #134	; 0x86
    2f84:	811a      	strh	r2, [r3, #8]
    2f86:	e7a6      	b.n	2ed6 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    2f88:	4b25      	ldr	r3, [pc, #148]	; (3020 <uc8151_set_psr_config+0x170>)
    2f8a:	325e      	adds	r2, #94	; 0x5e
    2f8c:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 230;
    2f8e:	3286      	adds	r2, #134	; 0x86
    2f90:	811a      	strh	r2, [r3, #8]
    2f92:	e7a0      	b.n	2ed6 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    2f94:	78e3      	ldrb	r3, [r4, #3]
    2f96:	2202      	movs	r2, #2
    2f98:	4393      	bics	r3, r2
    2f9a:	2b01      	cmp	r3, #1
    2f9c:	d005      	beq.n	2faa <uc8151_set_psr_config+0xfa>
                uc8151_global_instance.display_width   = 252;
    2f9e:	4b20      	ldr	r3, [pc, #128]	; (3020 <uc8151_set_psr_config+0x170>)
    2fa0:	22fc      	movs	r2, #252	; 0xfc
    2fa2:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    2fa4:	3a9c      	subs	r2, #156	; 0x9c
    2fa6:	811a      	strh	r2, [r3, #8]
    2fa8:	e795      	b.n	2ed6 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    2faa:	4b1d      	ldr	r3, [pc, #116]	; (3020 <uc8151_set_psr_config+0x170>)
    2fac:	325e      	adds	r2, #94	; 0x5e
    2fae:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 252;
    2fb0:	329c      	adds	r2, #156	; 0x9c
    2fb2:	811a      	strh	r2, [r3, #8]
    2fb4:	e78f      	b.n	2ed6 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    2fb6:	78e3      	ldrb	r3, [r4, #3]
    2fb8:	2202      	movs	r2, #2
    2fba:	4393      	bics	r3, r2
    2fbc:	2b01      	cmp	r3, #1
    2fbe:	d006      	beq.n	2fce <uc8151_set_psr_config+0x11e>
                uc8151_global_instance.display_width   = 296;
    2fc0:	4b17      	ldr	r3, [pc, #92]	; (3020 <uc8151_set_psr_config+0x170>)
    2fc2:	2294      	movs	r2, #148	; 0x94
    2fc4:	0052      	lsls	r2, r2, #1
    2fc6:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 128;
    2fc8:	3aa8      	subs	r2, #168	; 0xa8
    2fca:	811a      	strh	r2, [r3, #8]
    2fcc:	e783      	b.n	2ed6 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 128;
    2fce:	4b14      	ldr	r3, [pc, #80]	; (3020 <uc8151_set_psr_config+0x170>)
    2fd0:	327e      	adds	r2, #126	; 0x7e
    2fd2:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    2fd4:	32a8      	adds	r2, #168	; 0xa8
    2fd6:	811a      	strh	r2, [r3, #8]
    2fd8:	e77d      	b.n	2ed6 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    2fda:	78e3      	ldrb	r3, [r4, #3]
    2fdc:	2202      	movs	r2, #2
    2fde:	4393      	bics	r3, r2
    2fe0:	2b01      	cmp	r3, #1
    2fe2:	d006      	beq.n	2ff2 <uc8151_set_psr_config+0x142>
                uc8151_global_instance.display_width   = 296;
    2fe4:	4b0e      	ldr	r3, [pc, #56]	; (3020 <uc8151_set_psr_config+0x170>)
    2fe6:	2294      	movs	r2, #148	; 0x94
    2fe8:	0052      	lsls	r2, r2, #1
    2fea:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 160;
    2fec:	3a88      	subs	r2, #136	; 0x88
    2fee:	811a      	strh	r2, [r3, #8]
    2ff0:	e771      	b.n	2ed6 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 160;
    2ff2:	4b0b      	ldr	r3, [pc, #44]	; (3020 <uc8151_set_psr_config+0x170>)
    2ff4:	329e      	adds	r2, #158	; 0x9e
    2ff6:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    2ff8:	3288      	adds	r2, #136	; 0x88
    2ffa:	811a      	strh	r2, [r3, #8]
    2ffc:	e76b      	b.n	2ed6 <uc8151_set_psr_config+0x26>
        case RES_96x230:                eink_data[0] = 0x00; break;
    2ffe:	2300      	movs	r3, #0
    3000:	466a      	mov	r2, sp
    3002:	7013      	strb	r3, [r2, #0]
    3004:	e774      	b.n	2ef0 <uc8151_set_psr_config+0x40>
        case RES_96x252:                eink_data[0] = 0x01; break;
    3006:	2301      	movs	r3, #1
    3008:	466a      	mov	r2, sp
    300a:	7013      	strb	r3, [r2, #0]
    300c:	e770      	b.n	2ef0 <uc8151_set_psr_config+0x40>
        case RES_128x296:               eink_data[0] = 0x02; break;
    300e:	2302      	movs	r3, #2
    3010:	466a      	mov	r2, sp
    3012:	7013      	strb	r3, [r2, #0]
    3014:	e76c      	b.n	2ef0 <uc8151_set_psr_config+0x40>
        case RES_160x296:               eink_data[0] = 0x03; break;
    3016:	2303      	movs	r3, #3
    3018:	466a      	mov	r2, sp
    301a:	7013      	strb	r3, [r2, #0]
    301c:	e768      	b.n	2ef0 <uc8151_set_psr_config+0x40>
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	20000368 	.word	0x20000368
    3024:	00003d49 	.word	0x00003d49
    3028:	00001625 	.word	0x00001625

0000302c <uc8151_set_config>:
{        
    302c:	b5f0      	push	{r4, r5, r6, r7, lr}
    302e:	46c6      	mov	lr, r8
    3030:	b500      	push	{lr}
    3032:	b086      	sub	sp, #24
    3034:	0004      	movs	r4, r0
    switch(config->power_settings.source_power) {
    3036:	7943      	ldrb	r3, [r0, #5]
    3038:	2b00      	cmp	r3, #0
    303a:	d020      	beq.n	307e <uc8151_set_config+0x52>
    303c:	2b01      	cmp	r3, #1
    303e:	d022      	beq.n	3086 <uc8151_set_config+0x5a>
    eink_data[0] = eink_data[0] << 1;
    3040:	aa04      	add	r2, sp, #16
    3042:	7813      	ldrb	r3, [r2, #0]
    3044:	005b      	lsls	r3, r3, #1
    3046:	b2db      	uxtb	r3, r3
    3048:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.gate_power) {
    304a:	79a2      	ldrb	r2, [r4, #6]
    304c:	2a01      	cmp	r2, #1
    304e:	d102      	bne.n	3056 <uc8151_set_config+0x2a>
        case GATE_INTERNAL_DC_DC:       eink_data[0] |= 0x01; break;
    3050:	4313      	orrs	r3, r2
    3052:	aa04      	add	r2, sp, #16
    3054:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.vcom_voltage_level) {
    3056:	79e3      	ldrb	r3, [r4, #7]
    3058:	2b00      	cmp	r3, #0
    305a:	d018      	beq.n	308e <uc8151_set_config+0x62>
    305c:	2b01      	cmp	r3, #1
    305e:	d01a      	beq.n	3096 <uc8151_set_config+0x6a>
    eink_data[1] = eink_data[1] << 2;
    3060:	aa04      	add	r2, sp, #16
    3062:	7853      	ldrb	r3, [r2, #1]
    3064:	009b      	lsls	r3, r3, #2
    3066:	b2db      	uxtb	r3, r3
    3068:	7053      	strb	r3, [r2, #1]
    switch (config->power_settings.vg_voltage_level) {
    306a:	7a22      	ldrb	r2, [r4, #8]
    306c:	2a06      	cmp	r2, #6
    306e:	d05b      	beq.n	3128 <uc8151_set_config+0xfc>
    3070:	2a07      	cmp	r2, #7
    3072:	d05e      	beq.n	3132 <uc8151_set_config+0x106>
    3074:	2a05      	cmp	r2, #5
    3076:	d012      	beq.n	309e <uc8151_set_config+0x72>
    if( (config->power_settings.vg_voltage_level == VGx_17V) | (config->power_settings.vg_voltage_level == VGx_18V) | (config->power_settings.vg_voltage_level == VGx_19V) | (config->power_settings.vg_voltage_level == VGx_20V) )
    3078:	2a03      	cmp	r2, #3
    307a:	d814      	bhi.n	30a6 <uc8151_set_config+0x7a>
    307c:	e7fe      	b.n	307c <uc8151_set_config+0x50>
        case SOURCE_EXTERNAL_POWER:     eink_data[0] = 0x00; break;
    307e:	2200      	movs	r2, #0
    3080:	ab04      	add	r3, sp, #16
    3082:	701a      	strb	r2, [r3, #0]
    3084:	e7dc      	b.n	3040 <uc8151_set_config+0x14>
        case SOURCE_INTERNAL_DC_DC:     eink_data[0] = 0x01; break;
    3086:	2201      	movs	r2, #1
    3088:	ab04      	add	r3, sp, #16
    308a:	701a      	strb	r2, [r3, #0]
    308c:	e7d8      	b.n	3040 <uc8151_set_config+0x14>
        case VCOMx_VDx_DC_VCOMD:        eink_data[1] = 0x00; break;
    308e:	2200      	movs	r2, #0
    3090:	ab04      	add	r3, sp, #16
    3092:	705a      	strb	r2, [r3, #1]
    3094:	e7e4      	b.n	3060 <uc8151_set_config+0x34>
        case VCOMx_VGx:                 eink_data[1] = 0x01; break;
    3096:	2201      	movs	r2, #1
    3098:	ab04      	add	r3, sp, #16
    309a:	705a      	strb	r2, [r3, #1]
    309c:	e7e0      	b.n	3060 <uc8151_set_config+0x34>
        case VGx_15V:                   eink_data[1] |= 0x01; break;
    309e:	2201      	movs	r2, #1
    30a0:	4313      	orrs	r3, r2
    30a2:	aa04      	add	r2, sp, #16
    30a4:	7053      	strb	r3, [r2, #1]
    eink_data[2] = config->power_settings.pwr_vdh_level;
    30a6:	a904      	add	r1, sp, #16
    30a8:	7a63      	ldrb	r3, [r4, #9]
    30aa:	708b      	strb	r3, [r1, #2]
    eink_data[3] = config->power_settings.pwr_vdl_level;
    30ac:	7aa3      	ldrb	r3, [r4, #10]
    30ae:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = config->power_settings.pwr_vdhr_level;
    30b0:	7ae3      	ldrb	r3, [r4, #11]
    30b2:	710b      	strb	r3, [r1, #4]
    eink_write_data(UC8151_PWR, eink_data, 5);
    30b4:	2205      	movs	r2, #5
    30b6:	2001      	movs	r0, #1
    30b8:	4dd8      	ldr	r5, [pc, #864]	; (341c <uc8151_set_config+0x3f0>)
    30ba:	47a8      	blx	r5
    psr_config = config->panel_settings;
    30bc:	2205      	movs	r2, #5
    30be:	0021      	movs	r1, r4
    30c0:	a802      	add	r0, sp, #8
    30c2:	4bd7      	ldr	r3, [pc, #860]	; (3420 <uc8151_set_config+0x3f4>)
    30c4:	4798      	blx	r3
    uc8151_set_psr_config(&psr_config);
    30c6:	a802      	add	r0, sp, #8
    30c8:	4bd6      	ldr	r3, [pc, #856]	; (3424 <uc8151_set_config+0x3f8>)
    30ca:	4798      	blx	r3
    eink_write_data(UC8151_PON, 0, 0);
    30cc:	2200      	movs	r2, #0
    30ce:	2100      	movs	r1, #0
    30d0:	2004      	movs	r0, #4
    30d2:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    30d4:	4bd4      	ldr	r3, [pc, #848]	; (3428 <uc8151_set_config+0x3fc>)
    30d6:	4698      	mov	r8, r3
	CRITICAL_SECTION_LEAVE();
    30d8:	4fd4      	ldr	r7, [pc, #848]	; (342c <uc8151_set_config+0x400>)
	CRITICAL_SECTION_ENTER();
    30da:	4668      	mov	r0, sp
    30dc:	47c0      	blx	r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    30de:	23c0      	movs	r3, #192	; 0xc0
    30e0:	05db      	lsls	r3, r3, #23
    30e2:	2680      	movs	r6, #128	; 0x80
    30e4:	599d      	ldr	r5, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    30e6:	22a0      	movs	r2, #160	; 0xa0
    30e8:	49d1      	ldr	r1, [pc, #836]	; (3430 <uc8151_set_config+0x404>)
    30ea:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    30ec:	2190      	movs	r1, #144	; 0x90
    30ee:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    30f0:	4053      	eors	r3, r2
    30f2:	401d      	ands	r5, r3
    30f4:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    30f6:	4668      	mov	r0, sp
    30f8:	47b8      	blx	r7
    30fa:	422e      	tst	r6, r5
    30fc:	d0ed      	beq.n	30da <uc8151_set_config+0xae>
    switch (config->booster_soft_start.a_soft_start_period) {
    30fe:	7b20      	ldrb	r0, [r4, #12]
    3100:	2801      	cmp	r0, #1
    3102:	d01f      	beq.n	3144 <uc8151_set_config+0x118>
    3104:	2800      	cmp	r0, #0
    3106:	d019      	beq.n	313c <uc8151_set_config+0x110>
    3108:	2802      	cmp	r0, #2
    310a:	d01f      	beq.n	314c <uc8151_set_config+0x120>
    310c:	2803      	cmp	r0, #3
    310e:	d021      	beq.n	3154 <uc8151_set_config+0x128>
    eink_data[0] = eink_data[0] << 3;
    3110:	aa04      	add	r2, sp, #16
    3112:	7813      	ldrb	r3, [r2, #0]
    3114:	00db      	lsls	r3, r3, #3
    3116:	b2db      	uxtb	r3, r3
    3118:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_drive_strength) {
    311a:	7b61      	ldrb	r1, [r4, #13]
    311c:	2907      	cmp	r1, #7
    311e:	d821      	bhi.n	3164 <uc8151_set_config+0x138>
    3120:	008a      	lsls	r2, r1, #2
    3122:	4dc4      	ldr	r5, [pc, #784]	; (3434 <uc8151_set_config+0x408>)
    3124:	58aa      	ldr	r2, [r5, r2]
    3126:	4697      	mov	pc, r2
        case VGx_14V:                   eink_data[1] |= 0x02; break;
    3128:	2202      	movs	r2, #2
    312a:	4313      	orrs	r3, r2
    312c:	aa04      	add	r2, sp, #16
    312e:	7053      	strb	r3, [r2, #1]
    3130:	e7b9      	b.n	30a6 <uc8151_set_config+0x7a>
        case VGx_13V:                   eink_data[1] |= 0x03; break;
    3132:	2203      	movs	r2, #3
    3134:	4313      	orrs	r3, r2
    3136:	aa04      	add	r2, sp, #16
    3138:	7053      	strb	r3, [r2, #1]
    313a:	e7b4      	b.n	30a6 <uc8151_set_config+0x7a>
        case SS_PERIOD_10MS:            eink_data[0] = 0x00; break;
    313c:	2200      	movs	r2, #0
    313e:	ab04      	add	r3, sp, #16
    3140:	701a      	strb	r2, [r3, #0]
    3142:	e7e5      	b.n	3110 <uc8151_set_config+0xe4>
        case SS_PERIOD_20MS:            eink_data[0] = 0x01; break;
    3144:	2201      	movs	r2, #1
    3146:	ab04      	add	r3, sp, #16
    3148:	701a      	strb	r2, [r3, #0]
    314a:	e7e1      	b.n	3110 <uc8151_set_config+0xe4>
        case SS_PERIOD_30MS:            eink_data[0] = 0x02; break;
    314c:	2202      	movs	r2, #2
    314e:	ab04      	add	r3, sp, #16
    3150:	701a      	strb	r2, [r3, #0]
    3152:	e7dd      	b.n	3110 <uc8151_set_config+0xe4>
        case SS_PERIOD_40MS:            eink_data[0] = 0x03; break;
    3154:	2203      	movs	r2, #3
    3156:	ab04      	add	r3, sp, #16
    3158:	701a      	strb	r2, [r3, #0]
    315a:	e7d9      	b.n	3110 <uc8151_set_config+0xe4>
        case STRENGTH_2:                eink_data[0] |= 0x01; break;
    315c:	2201      	movs	r2, #1
    315e:	4313      	orrs	r3, r2
    3160:	aa04      	add	r2, sp, #16
    3162:	7013      	strb	r3, [r2, #0]
    eink_data[0] = eink_data[0] << 3;
    3164:	aa04      	add	r2, sp, #16
    3166:	7813      	ldrb	r3, [r2, #0]
    3168:	00db      	lsls	r3, r3, #3
    316a:	b2db      	uxtb	r3, r3
    316c:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_min_off_time) {
    316e:	7ba2      	ldrb	r2, [r4, #14]
    3170:	2a07      	cmp	r2, #7
    3172:	d825      	bhi.n	31c0 <uc8151_set_config+0x194>
    3174:	0095      	lsls	r5, r2, #2
    3176:	4eb0      	ldr	r6, [pc, #704]	; (3438 <uc8151_set_config+0x40c>)
    3178:	5975      	ldr	r5, [r6, r5]
    317a:	46af      	mov	pc, r5
        case STRENGTH_3:                eink_data[0] |= 0x02; break;
    317c:	2202      	movs	r2, #2
    317e:	4313      	orrs	r3, r2
    3180:	aa04      	add	r2, sp, #16
    3182:	7013      	strb	r3, [r2, #0]
    3184:	e7ee      	b.n	3164 <uc8151_set_config+0x138>
        case STRENGTH_4:                eink_data[0] |= 0x03; break;
    3186:	2203      	movs	r2, #3
    3188:	4313      	orrs	r3, r2
    318a:	aa04      	add	r2, sp, #16
    318c:	7013      	strb	r3, [r2, #0]
    318e:	e7e9      	b.n	3164 <uc8151_set_config+0x138>
        case STRENGTH_5:                eink_data[0] |= 0x04; break;
    3190:	2204      	movs	r2, #4
    3192:	4313      	orrs	r3, r2
    3194:	aa04      	add	r2, sp, #16
    3196:	7013      	strb	r3, [r2, #0]
    3198:	e7e4      	b.n	3164 <uc8151_set_config+0x138>
        case STRENGTH_6:                eink_data[0] |= 0x05; break;
    319a:	2205      	movs	r2, #5
    319c:	4313      	orrs	r3, r2
    319e:	aa04      	add	r2, sp, #16
    31a0:	7013      	strb	r3, [r2, #0]
    31a2:	e7df      	b.n	3164 <uc8151_set_config+0x138>
        case STRENGTH_7:                eink_data[0] |= 0x06; break;
    31a4:	2206      	movs	r2, #6
    31a6:	4313      	orrs	r3, r2
    31a8:	aa04      	add	r2, sp, #16
    31aa:	7013      	strb	r3, [r2, #0]
    31ac:	e7da      	b.n	3164 <uc8151_set_config+0x138>
        case STRENGTH_8:                eink_data[0] |= 0x07; break;
    31ae:	2207      	movs	r2, #7
    31b0:	4313      	orrs	r3, r2
    31b2:	aa04      	add	r2, sp, #16
    31b4:	7013      	strb	r3, [r2, #0]
    31b6:	e7d5      	b.n	3164 <uc8151_set_config+0x138>
        case MIN_OFF_TIME_340_NS:       eink_data[0] |= 0x01; break;
    31b8:	2501      	movs	r5, #1
    31ba:	432b      	orrs	r3, r5
    31bc:	ad04      	add	r5, sp, #16
    31be:	702b      	strb	r3, [r5, #0]
    switch (config->booster_soft_start.a_soft_start_period) {
    31c0:	2801      	cmp	r0, #1
    31c2:	d030      	beq.n	3226 <uc8151_set_config+0x1fa>
    31c4:	2800      	cmp	r0, #0
    31c6:	d02a      	beq.n	321e <uc8151_set_config+0x1f2>
    31c8:	2802      	cmp	r0, #2
    31ca:	d030      	beq.n	322e <uc8151_set_config+0x202>
    31cc:	2803      	cmp	r0, #3
    31ce:	d032      	beq.n	3236 <uc8151_set_config+0x20a>
    eink_data[1] = eink_data[1] << 3;
    31d0:	ab04      	add	r3, sp, #16
    31d2:	785b      	ldrb	r3, [r3, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    31d4:	2907      	cmp	r1, #7
    31d6:	d900      	bls.n	31da <uc8151_set_config+0x1ae>
    31d8:	e08c      	b.n	32f4 <uc8151_set_config+0x2c8>
    31da:	0088      	lsls	r0, r1, #2
    31dc:	4d97      	ldr	r5, [pc, #604]	; (343c <uc8151_set_config+0x410>)
    31de:	5828      	ldr	r0, [r5, r0]
    31e0:	4687      	mov	pc, r0
        case MIN_OFF_TIME_400_NS:       eink_data[0] |= 0x02; break;
    31e2:	2502      	movs	r5, #2
    31e4:	432b      	orrs	r3, r5
    31e6:	ad04      	add	r5, sp, #16
    31e8:	702b      	strb	r3, [r5, #0]
    31ea:	e7e9      	b.n	31c0 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_540_NS:       eink_data[0] |= 0x03; break;
    31ec:	2503      	movs	r5, #3
    31ee:	432b      	orrs	r3, r5
    31f0:	ad04      	add	r5, sp, #16
    31f2:	702b      	strb	r3, [r5, #0]
    31f4:	e7e4      	b.n	31c0 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_800_NS:       eink_data[0] |= 0x04; break;
    31f6:	2504      	movs	r5, #4
    31f8:	432b      	orrs	r3, r5
    31fa:	ad04      	add	r5, sp, #16
    31fc:	702b      	strb	r3, [r5, #0]
    31fe:	e7df      	b.n	31c0 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_1540_NS:      eink_data[0] |= 0x05; break;
    3200:	2505      	movs	r5, #5
    3202:	432b      	orrs	r3, r5
    3204:	ad04      	add	r5, sp, #16
    3206:	702b      	strb	r3, [r5, #0]
    3208:	e7da      	b.n	31c0 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_3340_NS:      eink_data[0] |= 0x06; break;
    320a:	2506      	movs	r5, #6
    320c:	432b      	orrs	r3, r5
    320e:	ad04      	add	r5, sp, #16
    3210:	702b      	strb	r3, [r5, #0]
    3212:	e7d5      	b.n	31c0 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_6580_NS:      eink_data[0] |= 0x07; break;
    3214:	2507      	movs	r5, #7
    3216:	432b      	orrs	r3, r5
    3218:	ad04      	add	r5, sp, #16
    321a:	702b      	strb	r3, [r5, #0]
    321c:	e7d0      	b.n	31c0 <uc8151_set_config+0x194>
        case SS_PERIOD_10MS:            eink_data[1] = 0x00; break;
    321e:	2000      	movs	r0, #0
    3220:	ab04      	add	r3, sp, #16
    3222:	7058      	strb	r0, [r3, #1]
    3224:	e7d4      	b.n	31d0 <uc8151_set_config+0x1a4>
        case SS_PERIOD_20MS:            eink_data[1] = 0x01; break;
    3226:	2001      	movs	r0, #1
    3228:	ab04      	add	r3, sp, #16
    322a:	7058      	strb	r0, [r3, #1]
    322c:	e7d0      	b.n	31d0 <uc8151_set_config+0x1a4>
        case SS_PERIOD_30MS:            eink_data[1] = 0x02; break;
    322e:	2002      	movs	r0, #2
    3230:	ab04      	add	r3, sp, #16
    3232:	7058      	strb	r0, [r3, #1]
    3234:	e7cc      	b.n	31d0 <uc8151_set_config+0x1a4>
        case SS_PERIOD_40MS:            eink_data[1] = 0x03; break;
    3236:	2003      	movs	r0, #3
    3238:	ab04      	add	r3, sp, #16
    323a:	7058      	strb	r0, [r3, #1]
    323c:	e7c8      	b.n	31d0 <uc8151_set_config+0x1a4>
    eink_data[1] = eink_data[1] << 3;
    323e:	019b      	lsls	r3, r3, #6
    3240:	2008      	movs	r0, #8
    3242:	4303      	orrs	r3, r0
    3244:	b2db      	uxtb	r3, r3
    3246:	a804      	add	r0, sp, #16
    3248:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    324a:	2a07      	cmp	r2, #7
    324c:	d900      	bls.n	3250 <uc8151_set_config+0x224>
    324e:	e0bd      	b.n	33cc <uc8151_set_config+0x3a0>
    3250:	0090      	lsls	r0, r2, #2
    3252:	4d7b      	ldr	r5, [pc, #492]	; (3440 <uc8151_set_config+0x414>)
    3254:	5828      	ldr	r0, [r5, r0]
    3256:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3258:	019b      	lsls	r3, r3, #6
    325a:	2010      	movs	r0, #16
    325c:	4303      	orrs	r3, r0
    325e:	b2db      	uxtb	r3, r3
    3260:	a804      	add	r0, sp, #16
    3262:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3264:	2a07      	cmp	r2, #7
    3266:	d900      	bls.n	326a <uc8151_set_config+0x23e>
    3268:	e0b4      	b.n	33d4 <uc8151_set_config+0x3a8>
    326a:	0090      	lsls	r0, r2, #2
    326c:	4d75      	ldr	r5, [pc, #468]	; (3444 <uc8151_set_config+0x418>)
    326e:	5828      	ldr	r0, [r5, r0]
    3270:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3272:	019b      	lsls	r3, r3, #6
    3274:	2018      	movs	r0, #24
    3276:	4303      	orrs	r3, r0
    3278:	b2db      	uxtb	r3, r3
    327a:	a804      	add	r0, sp, #16
    327c:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    327e:	2a07      	cmp	r2, #7
    3280:	d900      	bls.n	3284 <uc8151_set_config+0x258>
    3282:	e0ab      	b.n	33dc <uc8151_set_config+0x3b0>
    3284:	0090      	lsls	r0, r2, #2
    3286:	4d70      	ldr	r5, [pc, #448]	; (3448 <uc8151_set_config+0x41c>)
    3288:	5828      	ldr	r0, [r5, r0]
    328a:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    328c:	019b      	lsls	r3, r3, #6
    328e:	2020      	movs	r0, #32
    3290:	4303      	orrs	r3, r0
    3292:	b2db      	uxtb	r3, r3
    3294:	a804      	add	r0, sp, #16
    3296:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3298:	2a07      	cmp	r2, #7
    329a:	d900      	bls.n	329e <uc8151_set_config+0x272>
    329c:	e0a2      	b.n	33e4 <uc8151_set_config+0x3b8>
    329e:	0090      	lsls	r0, r2, #2
    32a0:	4d6a      	ldr	r5, [pc, #424]	; (344c <uc8151_set_config+0x420>)
    32a2:	5828      	ldr	r0, [r5, r0]
    32a4:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    32a6:	019b      	lsls	r3, r3, #6
    32a8:	2028      	movs	r0, #40	; 0x28
    32aa:	4303      	orrs	r3, r0
    32ac:	b2db      	uxtb	r3, r3
    32ae:	a804      	add	r0, sp, #16
    32b0:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    32b2:	2a07      	cmp	r2, #7
    32b4:	d900      	bls.n	32b8 <uc8151_set_config+0x28c>
    32b6:	e099      	b.n	33ec <uc8151_set_config+0x3c0>
    32b8:	0090      	lsls	r0, r2, #2
    32ba:	4d65      	ldr	r5, [pc, #404]	; (3450 <uc8151_set_config+0x424>)
    32bc:	5828      	ldr	r0, [r5, r0]
    32be:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    32c0:	019b      	lsls	r3, r3, #6
    32c2:	2030      	movs	r0, #48	; 0x30
    32c4:	4303      	orrs	r3, r0
    32c6:	b2db      	uxtb	r3, r3
    32c8:	a804      	add	r0, sp, #16
    32ca:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    32cc:	2a07      	cmp	r2, #7
    32ce:	d900      	bls.n	32d2 <uc8151_set_config+0x2a6>
    32d0:	e090      	b.n	33f4 <uc8151_set_config+0x3c8>
    32d2:	0090      	lsls	r0, r2, #2
    32d4:	4d5f      	ldr	r5, [pc, #380]	; (3454 <uc8151_set_config+0x428>)
    32d6:	5828      	ldr	r0, [r5, r0]
    32d8:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    32da:	019b      	lsls	r3, r3, #6
    32dc:	2038      	movs	r0, #56	; 0x38
    32de:	4303      	orrs	r3, r0
    32e0:	b2db      	uxtb	r3, r3
    32e2:	a804      	add	r0, sp, #16
    32e4:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    32e6:	2a07      	cmp	r2, #7
    32e8:	d900      	bls.n	32ec <uc8151_set_config+0x2c0>
    32ea:	e087      	b.n	33fc <uc8151_set_config+0x3d0>
    32ec:	0090      	lsls	r0, r2, #2
    32ee:	4d5a      	ldr	r5, [pc, #360]	; (3458 <uc8151_set_config+0x42c>)
    32f0:	5828      	ldr	r0, [r5, r0]
    32f2:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    32f4:	019b      	lsls	r3, r3, #6
    32f6:	b2db      	uxtb	r3, r3
    32f8:	a804      	add	r0, sp, #16
    32fa:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    32fc:	2a07      	cmp	r2, #7
    32fe:	d850      	bhi.n	33a2 <uc8151_set_config+0x376>
    3300:	0090      	lsls	r0, r2, #2
    3302:	4d56      	ldr	r5, [pc, #344]	; (345c <uc8151_set_config+0x430>)
    3304:	5828      	ldr	r0, [r5, r0]
    3306:	4687      	mov	pc, r0
        case MIN_OFF_TIME_340_NS:       eink_data[1] |= 0x01; break;
    3308:	2001      	movs	r0, #1
    330a:	4303      	orrs	r3, r0
    330c:	a804      	add	r0, sp, #16
    330e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3310:	2907      	cmp	r1, #7
    3312:	d900      	bls.n	3316 <uc8151_set_config+0x2ea>
    3314:	e0d7      	b.n	34c6 <uc8151_set_config+0x49a>
    3316:	0089      	lsls	r1, r1, #2
    3318:	4b51      	ldr	r3, [pc, #324]	; (3460 <uc8151_set_config+0x434>)
    331a:	585b      	ldr	r3, [r3, r1]
    331c:	469f      	mov	pc, r3
        case MIN_OFF_TIME_400_NS:       eink_data[1] |= 0x02; break;
    331e:	2002      	movs	r0, #2
    3320:	4303      	orrs	r3, r0
    3322:	a804      	add	r0, sp, #16
    3324:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3326:	2907      	cmp	r1, #7
    3328:	d900      	bls.n	332c <uc8151_set_config+0x300>
    332a:	e12c      	b.n	3586 <uc8151_set_config+0x55a>
    332c:	0089      	lsls	r1, r1, #2
    332e:	4b4d      	ldr	r3, [pc, #308]	; (3464 <uc8151_set_config+0x438>)
    3330:	585b      	ldr	r3, [r3, r1]
    3332:	469f      	mov	pc, r3
        case MIN_OFF_TIME_540_NS:       eink_data[1] |= 0x03; break;
    3334:	2003      	movs	r0, #3
    3336:	4303      	orrs	r3, r0
    3338:	a804      	add	r0, sp, #16
    333a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    333c:	2907      	cmp	r1, #7
    333e:	d900      	bls.n	3342 <uc8151_set_config+0x316>
    3340:	e12a      	b.n	3598 <uc8151_set_config+0x56c>
    3342:	0089      	lsls	r1, r1, #2
    3344:	4b48      	ldr	r3, [pc, #288]	; (3468 <uc8151_set_config+0x43c>)
    3346:	585b      	ldr	r3, [r3, r1]
    3348:	469f      	mov	pc, r3
        case MIN_OFF_TIME_800_NS:       eink_data[1] |= 0x04; break;
    334a:	2004      	movs	r0, #4
    334c:	4303      	orrs	r3, r0
    334e:	a804      	add	r0, sp, #16
    3350:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3352:	2907      	cmp	r1, #7
    3354:	d900      	bls.n	3358 <uc8151_set_config+0x32c>
    3356:	e128      	b.n	35aa <uc8151_set_config+0x57e>
    3358:	0089      	lsls	r1, r1, #2
    335a:	4b44      	ldr	r3, [pc, #272]	; (346c <uc8151_set_config+0x440>)
    335c:	585b      	ldr	r3, [r3, r1]
    335e:	469f      	mov	pc, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[1] |= 0x05; break;
    3360:	2005      	movs	r0, #5
    3362:	4303      	orrs	r3, r0
    3364:	a804      	add	r0, sp, #16
    3366:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3368:	2907      	cmp	r1, #7
    336a:	d900      	bls.n	336e <uc8151_set_config+0x342>
    336c:	e126      	b.n	35bc <uc8151_set_config+0x590>
    336e:	0089      	lsls	r1, r1, #2
    3370:	4b3f      	ldr	r3, [pc, #252]	; (3470 <uc8151_set_config+0x444>)
    3372:	585b      	ldr	r3, [r3, r1]
    3374:	469f      	mov	pc, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[1] |= 0x06; break;
    3376:	2006      	movs	r0, #6
    3378:	4303      	orrs	r3, r0
    337a:	a804      	add	r0, sp, #16
    337c:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    337e:	2907      	cmp	r1, #7
    3380:	d900      	bls.n	3384 <uc8151_set_config+0x358>
    3382:	e124      	b.n	35ce <uc8151_set_config+0x5a2>
    3384:	0089      	lsls	r1, r1, #2
    3386:	4b3b      	ldr	r3, [pc, #236]	; (3474 <uc8151_set_config+0x448>)
    3388:	585b      	ldr	r3, [r3, r1]
    338a:	469f      	mov	pc, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[1] |= 0x07; break;
    338c:	2007      	movs	r0, #7
    338e:	4303      	orrs	r3, r0
    3390:	a804      	add	r0, sp, #16
    3392:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3394:	2907      	cmp	r1, #7
    3396:	d900      	bls.n	339a <uc8151_set_config+0x36e>
    3398:	e122      	b.n	35e0 <uc8151_set_config+0x5b4>
    339a:	0089      	lsls	r1, r1, #2
    339c:	4b36      	ldr	r3, [pc, #216]	; (3478 <uc8151_set_config+0x44c>)
    339e:	585b      	ldr	r3, [r3, r1]
    33a0:	469f      	mov	pc, r3
    33a2:	2907      	cmp	r1, #7
    33a4:	d806      	bhi.n	33b4 <uc8151_set_config+0x388>
    33a6:	0089      	lsls	r1, r1, #2
    33a8:	4b34      	ldr	r3, [pc, #208]	; (347c <uc8151_set_config+0x450>)
    33aa:	585b      	ldr	r3, [r3, r1]
    33ac:	469f      	mov	pc, r3
        case STRENGTH_1:                eink_data[2] = 0x00; break;
    33ae:	2100      	movs	r1, #0
    33b0:	ab04      	add	r3, sp, #16
    33b2:	7099      	strb	r1, [r3, #2]
    eink_data[2] = eink_data[2] << 3;
    33b4:	a904      	add	r1, sp, #16
    33b6:	788b      	ldrb	r3, [r1, #2]
    33b8:	00db      	lsls	r3, r3, #3
    33ba:	b2db      	uxtb	r3, r3
    33bc:	708b      	strb	r3, [r1, #2]
    switch (config->booster_soft_start.a_min_off_time) {
    33be:	2a07      	cmp	r2, #7
    33c0:	d900      	bls.n	33c4 <uc8151_set_config+0x398>
    33c2:	e088      	b.n	34d6 <uc8151_set_config+0x4aa>
    33c4:	0092      	lsls	r2, r2, #2
    33c6:	492e      	ldr	r1, [pc, #184]	; (3480 <uc8151_set_config+0x454>)
    33c8:	588a      	ldr	r2, [r1, r2]
    33ca:	4697      	mov	pc, r2
        case STRENGTH_2:                eink_data[2] = 0x01; break;
    33cc:	2101      	movs	r1, #1
    33ce:	ab04      	add	r3, sp, #16
    33d0:	7099      	strb	r1, [r3, #2]
    33d2:	e7ef      	b.n	33b4 <uc8151_set_config+0x388>
        case STRENGTH_3:                eink_data[2] = 0x02; break;
    33d4:	2102      	movs	r1, #2
    33d6:	ab04      	add	r3, sp, #16
    33d8:	7099      	strb	r1, [r3, #2]
    33da:	e7eb      	b.n	33b4 <uc8151_set_config+0x388>
        case STRENGTH_4:                eink_data[2] = 0x03; break;
    33dc:	2103      	movs	r1, #3
    33de:	ab04      	add	r3, sp, #16
    33e0:	7099      	strb	r1, [r3, #2]
    33e2:	e7e7      	b.n	33b4 <uc8151_set_config+0x388>
        case STRENGTH_5:                eink_data[2] = 0x04; break;
    33e4:	2104      	movs	r1, #4
    33e6:	ab04      	add	r3, sp, #16
    33e8:	7099      	strb	r1, [r3, #2]
    33ea:	e7e3      	b.n	33b4 <uc8151_set_config+0x388>
        case STRENGTH_6:                eink_data[2] = 0x05; break;
    33ec:	2105      	movs	r1, #5
    33ee:	ab04      	add	r3, sp, #16
    33f0:	7099      	strb	r1, [r3, #2]
    33f2:	e7df      	b.n	33b4 <uc8151_set_config+0x388>
        case STRENGTH_7:                eink_data[2] = 0x06; break;
    33f4:	2106      	movs	r1, #6
    33f6:	ab04      	add	r3, sp, #16
    33f8:	7099      	strb	r1, [r3, #2]
    33fa:	e7db      	b.n	33b4 <uc8151_set_config+0x388>
        case STRENGTH_8:                eink_data[2] = 0x07; break;
    33fc:	2107      	movs	r1, #7
    33fe:	ab04      	add	r3, sp, #16
    3400:	7099      	strb	r1, [r3, #2]
    3402:	e7d7      	b.n	33b4 <uc8151_set_config+0x388>
        case PFS_1_FRAME:               eink_data[0] = 0x00; break;
    3404:	2200      	movs	r2, #0
    3406:	ab04      	add	r3, sp, #16
    3408:	701a      	strb	r2, [r3, #0]
    340a:	e072      	b.n	34f2 <uc8151_set_config+0x4c6>
        case PFS_2_FRAMES:              eink_data[0] = 0x10; break;
    340c:	2210      	movs	r2, #16
    340e:	ab04      	add	r3, sp, #16
    3410:	701a      	strb	r2, [r3, #0]
    3412:	e06e      	b.n	34f2 <uc8151_set_config+0x4c6>
        case PFS_3_FRAMES:              eink_data[0] = 0x20; break;
    3414:	2220      	movs	r2, #32
    3416:	ab04      	add	r3, sp, #16
    3418:	701a      	strb	r2, [r3, #0]
    341a:	e06a      	b.n	34f2 <uc8151_set_config+0x4c6>
    341c:	00001625 	.word	0x00001625
    3420:	00003d49 	.word	0x00003d49
    3424:	00002eb1 	.word	0x00002eb1
    3428:	0000034d 	.word	0x0000034d
    342c:	0000035b 	.word	0x0000035b
    3430:	41004400 	.word	0x41004400
    3434:	00003e80 	.word	0x00003e80
    3438:	00003ea0 	.word	0x00003ea0
    343c:	00003ec0 	.word	0x00003ec0
    3440:	00003ee0 	.word	0x00003ee0
    3444:	00003f00 	.word	0x00003f00
    3448:	00003f20 	.word	0x00003f20
    344c:	00003f40 	.word	0x00003f40
    3450:	00003f60 	.word	0x00003f60
    3454:	00003f80 	.word	0x00003f80
    3458:	00003fa0 	.word	0x00003fa0
    345c:	00003fc0 	.word	0x00003fc0
    3460:	00003fe0 	.word	0x00003fe0
    3464:	00004000 	.word	0x00004000
    3468:	00004020 	.word	0x00004020
    346c:	00004040 	.word	0x00004040
    3470:	00004060 	.word	0x00004060
    3474:	00004080 	.word	0x00004080
    3478:	000040a0 	.word	0x000040a0
    347c:	000040c0 	.word	0x000040c0
    3480:	000040e0 	.word	0x000040e0
        case PFS_4_FRAMES:              eink_data[0] = 0x30; break;
    3484:	2230      	movs	r2, #48	; 0x30
    3486:	ab04      	add	r3, sp, #16
    3488:	701a      	strb	r2, [r3, #0]
    348a:	e032      	b.n	34f2 <uc8151_set_config+0x4c6>
        case INTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x0; break;
    348c:	2200      	movs	r2, #0
    348e:	ab04      	add	r3, sp, #16
    3490:	701a      	strb	r2, [r3, #0]
    3492:	e038      	b.n	3506 <uc8151_set_config+0x4da>
        case EXTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x1; break;
    3494:	2201      	movs	r2, #1
    3496:	ab04      	add	r3, sp, #16
    3498:	701a      	strb	r2, [r3, #0]
    349a:	e034      	b.n	3506 <uc8151_set_config+0x4da>
    } else if((config->temperature_sensor_settings.temperature_offset <= 7) && (config->temperature_sensor_settings.temperature_offset >= 0)) {
    349c:	b2d1      	uxtb	r1, r2
    349e:	2907      	cmp	r1, #7
    34a0:	d803      	bhi.n	34aa <uc8151_set_config+0x47e>
        eink_data[0] |= config->temperature_sensor_settings.temperature_offset;
    34a2:	4313      	orrs	r3, r2
    34a4:	aa04      	add	r2, sp, #16
    34a6:	7013      	strb	r3, [r2, #0]
    34a8:	e039      	b.n	351e <uc8151_set_config+0x4f2>
    } else if(config->temperature_sensor_settings.temperature_offset < -8) {
    34aa:	0011      	movs	r1, r2
    34ac:	3108      	adds	r1, #8
    34ae:	da04      	bge.n	34ba <uc8151_set_config+0x48e>
        eink_data[0] |= 0x8;
    34b0:	2208      	movs	r2, #8
    34b2:	4313      	orrs	r3, r2
    34b4:	aa04      	add	r2, sp, #16
    34b6:	7013      	strb	r3, [r2, #0]
    34b8:	e031      	b.n	351e <uc8151_set_config+0x4f2>
        eink_data[0] |= (config->temperature_sensor_settings.temperature_offset & 0x0F);
    34ba:	210f      	movs	r1, #15
    34bc:	400a      	ands	r2, r1
    34be:	4313      	orrs	r3, r2
    34c0:	aa04      	add	r2, sp, #16
    34c2:	7013      	strb	r3, [r2, #0]
    34c4:	e02b      	b.n	351e <uc8151_set_config+0x4f2>
    eink_data[2] = eink_data[2] << 3;
    34c6:	ab04      	add	r3, sp, #16
    34c8:	789b      	ldrb	r3, [r3, #2]
    34ca:	00db      	lsls	r3, r3, #3
    34cc:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_340_NS:       eink_data[2] |= 0x01; break;
    34ce:	2201      	movs	r2, #1
    34d0:	4313      	orrs	r3, r2
    34d2:	aa04      	add	r2, sp, #16
    34d4:	7093      	strb	r3, [r2, #2]
    eink_write_data(UC8151_BTST, eink_data, 3);
    34d6:	2203      	movs	r2, #3
    34d8:	a904      	add	r1, sp, #16
    34da:	2006      	movs	r0, #6
    34dc:	4b45      	ldr	r3, [pc, #276]	; (35f4 <uc8151_set_config+0x5c8>)
    34de:	4798      	blx	r3
    switch (config->power_off_sequence) {
    34e0:	7d23      	ldrb	r3, [r4, #20]
    34e2:	2b01      	cmp	r3, #1
    34e4:	d092      	beq.n	340c <uc8151_set_config+0x3e0>
    34e6:	2b00      	cmp	r3, #0
    34e8:	d08c      	beq.n	3404 <uc8151_set_config+0x3d8>
    34ea:	2b02      	cmp	r3, #2
    34ec:	d092      	beq.n	3414 <uc8151_set_config+0x3e8>
    34ee:	2b03      	cmp	r3, #3
    34f0:	d0c8      	beq.n	3484 <uc8151_set_config+0x458>
    eink_write_data(UC8151_PFS, eink_data, 1);
    34f2:	2201      	movs	r2, #1
    34f4:	a904      	add	r1, sp, #16
    34f6:	2003      	movs	r0, #3
    34f8:	4b3e      	ldr	r3, [pc, #248]	; (35f4 <uc8151_set_config+0x5c8>)
    34fa:	4798      	blx	r3
    switch (config->temperature_sensor_settings.sensor_select) {
    34fc:	7d63      	ldrb	r3, [r4, #21]
    34fe:	2b00      	cmp	r3, #0
    3500:	d0c4      	beq.n	348c <uc8151_set_config+0x460>
    3502:	2b01      	cmp	r3, #1
    3504:	d0c6      	beq.n	3494 <uc8151_set_config+0x468>
    eink_data[0] = eink_data[0] << 4;
    3506:	ab04      	add	r3, sp, #16
    3508:	781b      	ldrb	r3, [r3, #0]
    350a:	011b      	lsls	r3, r3, #4
    350c:	b2db      	uxtb	r3, r3
    if (config->temperature_sensor_settings.temperature_offset > 7) {
    350e:	2216      	movs	r2, #22
    3510:	56a2      	ldrsb	r2, [r4, r2]
    3512:	2a07      	cmp	r2, #7
    3514:	ddc2      	ble.n	349c <uc8151_set_config+0x470>
        eink_data[0] |= 0x7;
    3516:	2207      	movs	r2, #7
    3518:	4313      	orrs	r3, r2
    351a:	aa04      	add	r2, sp, #16
    351c:	7013      	strb	r3, [r2, #0]
    eink_write_data(UC8151_TSE, eink_data, 1);
    351e:	ad04      	add	r5, sp, #16
    3520:	2201      	movs	r2, #1
    3522:	0029      	movs	r1, r5
    3524:	2041      	movs	r0, #65	; 0x41
    3526:	4c33      	ldr	r4, [pc, #204]	; (35f4 <uc8151_set_config+0x5c8>)
    3528:	47a0      	blx	r4
    eink_data[0] = 0x77;
    352a:	2377      	movs	r3, #119	; 0x77
    352c:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    352e:	2201      	movs	r2, #1
    3530:	0029      	movs	r1, r5
    3532:	2050      	movs	r0, #80	; 0x50
    3534:	47a0      	blx	r4
    eink_data[0] = 0x22;
    3536:	2322      	movs	r3, #34	; 0x22
    3538:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_TCON, eink_data, 1);
    353a:	2201      	movs	r2, #1
    353c:	0029      	movs	r1, r5
    353e:	2060      	movs	r0, #96	; 0x60
    3540:	47a0      	blx	r4
    eink_data[0] = 0x3C;
    3542:	233c      	movs	r3, #60	; 0x3c
    3544:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3546:	2201      	movs	r2, #1
    3548:	0029      	movs	r1, r5
    354a:	2050      	movs	r0, #80	; 0x50
    354c:	47a0      	blx	r4
    eink_write_data(UC8151_POF, 0, 0);
    354e:	2200      	movs	r2, #0
    3550:	2100      	movs	r1, #0
    3552:	2002      	movs	r0, #2
    3554:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    3556:	4f28      	ldr	r7, [pc, #160]	; (35f8 <uc8151_set_config+0x5cc>)
	CRITICAL_SECTION_LEAVE();
    3558:	4e28      	ldr	r6, [pc, #160]	; (35fc <uc8151_set_config+0x5d0>)
	CRITICAL_SECTION_ENTER();
    355a:	a801      	add	r0, sp, #4
    355c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    355e:	23c0      	movs	r3, #192	; 0xc0
    3560:	05db      	lsls	r3, r3, #23
    3562:	2580      	movs	r5, #128	; 0x80
    3564:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3566:	22a0      	movs	r2, #160	; 0xa0
    3568:	4925      	ldr	r1, [pc, #148]	; (3600 <uc8151_set_config+0x5d4>)
    356a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    356c:	2190      	movs	r1, #144	; 0x90
    356e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3570:	4053      	eors	r3, r2
    3572:	401c      	ands	r4, r3
    3574:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3576:	a801      	add	r0, sp, #4
    3578:	47b0      	blx	r6
    357a:	4225      	tst	r5, r4
    357c:	d0ed      	beq.n	355a <uc8151_set_config+0x52e>
}
    357e:	b006      	add	sp, #24
    3580:	bc04      	pop	{r2}
    3582:	4690      	mov	r8, r2
    3584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_data[2] = eink_data[2] << 3;
    3586:	ab04      	add	r3, sp, #16
    3588:	789b      	ldrb	r3, [r3, #2]
    358a:	00db      	lsls	r3, r3, #3
    358c:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_400_NS:       eink_data[2] |= 0x02; break;
    358e:	2202      	movs	r2, #2
    3590:	4313      	orrs	r3, r2
    3592:	aa04      	add	r2, sp, #16
    3594:	7093      	strb	r3, [r2, #2]
    3596:	e79e      	b.n	34d6 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3598:	ab04      	add	r3, sp, #16
    359a:	789b      	ldrb	r3, [r3, #2]
    359c:	00db      	lsls	r3, r3, #3
    359e:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_540_NS:       eink_data[2] |= 0x03; break;
    35a0:	2203      	movs	r2, #3
    35a2:	4313      	orrs	r3, r2
    35a4:	aa04      	add	r2, sp, #16
    35a6:	7093      	strb	r3, [r2, #2]
    35a8:	e795      	b.n	34d6 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    35aa:	ab04      	add	r3, sp, #16
    35ac:	789b      	ldrb	r3, [r3, #2]
    35ae:	00db      	lsls	r3, r3, #3
    35b0:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_800_NS:       eink_data[2] |= 0x04; break;
    35b2:	2204      	movs	r2, #4
    35b4:	4313      	orrs	r3, r2
    35b6:	aa04      	add	r2, sp, #16
    35b8:	7093      	strb	r3, [r2, #2]
    35ba:	e78c      	b.n	34d6 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    35bc:	ab04      	add	r3, sp, #16
    35be:	789b      	ldrb	r3, [r3, #2]
    35c0:	00db      	lsls	r3, r3, #3
    35c2:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[2] |= 0x05; break;
    35c4:	2205      	movs	r2, #5
    35c6:	4313      	orrs	r3, r2
    35c8:	aa04      	add	r2, sp, #16
    35ca:	7093      	strb	r3, [r2, #2]
    35cc:	e783      	b.n	34d6 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    35ce:	ab04      	add	r3, sp, #16
    35d0:	789b      	ldrb	r3, [r3, #2]
    35d2:	00db      	lsls	r3, r3, #3
    35d4:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[2] |= 0x06; break;
    35d6:	2206      	movs	r2, #6
    35d8:	4313      	orrs	r3, r2
    35da:	aa04      	add	r2, sp, #16
    35dc:	7093      	strb	r3, [r2, #2]
    35de:	e77a      	b.n	34d6 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    35e0:	ab04      	add	r3, sp, #16
    35e2:	789b      	ldrb	r3, [r3, #2]
    35e4:	00db      	lsls	r3, r3, #3
    35e6:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[2] |= 0x07; break;
    35e8:	2207      	movs	r2, #7
    35ea:	4313      	orrs	r3, r2
    35ec:	aa04      	add	r2, sp, #16
    35ee:	7093      	strb	r3, [r2, #2]
    35f0:	e771      	b.n	34d6 <uc8151_set_config+0x4aa>
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	00001625 	.word	0x00001625
    35f8:	0000034d 	.word	0x0000034d
    35fc:	0000035b 	.word	0x0000035b
    3600:	41004400 	.word	0x41004400

00003604 <gfx_eink_graphics_fill_screen>:
 * \param fill_type Selects the color to fill the display buffer with.
 * 
 * \note Selecting FILL_NONE as the color will be ignored.
 */
void gfx_eink_graphics_fill_screen(enum eink_fill_colour fill_color)
{
    3604:	b530      	push	{r4, r5, lr}
    3606:	b083      	sub	sp, #12
    3608:	0004      	movs	r4, r0
    volatile eink_coordinate dx, width_fill;
    volatile eink_coordinate dy, height_fill;
    
    width_fill = ptr_eink_gfx_config->display_width;
    360a:	4b5c      	ldr	r3, [pc, #368]	; (377c <gfx_eink_graphics_fill_screen+0x178>)
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	8859      	ldrh	r1, [r3, #2]
    3610:	aa01      	add	r2, sp, #4
    3612:	8011      	strh	r1, [r2, #0]
    height_fill = ptr_eink_gfx_config->display_height;
    3614:	889b      	ldrh	r3, [r3, #4]
    3616:	4669      	mov	r1, sp
    3618:	800b      	strh	r3, [r1, #0]
    
    for(dx = 0; dx < width_fill; dx++) {
    361a:	466b      	mov	r3, sp
    361c:	2100      	movs	r1, #0
    361e:	80d9      	strh	r1, [r3, #6]
    3620:	3306      	adds	r3, #6
    3622:	881b      	ldrh	r3, [r3, #0]
    3624:	8812      	ldrh	r2, [r2, #0]
    3626:	b29b      	uxth	r3, r3
    3628:	4293      	cmp	r3, r2
    362a:	d300      	bcc.n	362e <gfx_eink_graphics_fill_screen+0x2a>
    362c:	e0a4      	b.n	3778 <gfx_eink_graphics_fill_screen+0x174>
        for(dy = 0; dy < height_fill; dy++) {
            if(ptr_eink_gfx_config->gfx_display == GFX_AC057TC1)
            {
                switch (fill_color) {
    362e:	0085      	lsls	r5, r0, #2
    3630:	4b53      	ldr	r3, [pc, #332]	; (3780 <gfx_eink_graphics_fill_screen+0x17c>)
    3632:	469c      	mov	ip, r3
    3634:	4465      	add	r5, ip
    3636:	e094      	b.n	3762 <gfx_eink_graphics_fill_screen+0x15e>
    3638:	2c07      	cmp	r4, #7
    363a:	d85a      	bhi.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
    363c:	682b      	ldr	r3, [r5, #0]
    363e:	469f      	mov	pc, r3
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    3640:	466b      	mov	r3, sp
    3642:	88d8      	ldrh	r0, [r3, #6]
    3644:	b280      	uxth	r0, r0
    3646:	466b      	mov	r3, sp
    3648:	8859      	ldrh	r1, [r3, #2]
    364a:	b289      	uxth	r1, r1
    364c:	2200      	movs	r2, #0
    364e:	4b4d      	ldr	r3, [pc, #308]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    3650:	4798      	blx	r3
    3652:	e04e      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    3654:	466b      	mov	r3, sp
    3656:	88d8      	ldrh	r0, [r3, #6]
    3658:	b280      	uxth	r0, r0
    365a:	466b      	mov	r3, sp
    365c:	8859      	ldrh	r1, [r3, #2]
    365e:	b289      	uxth	r1, r1
    3660:	2201      	movs	r2, #1
    3662:	4b48      	ldr	r3, [pc, #288]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    3664:	4798      	blx	r3
    3666:	e044      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_YELLOW: gfx_eink_set_pixel(dx, dy, PIXEL_YELLOW); break;
    3668:	466b      	mov	r3, sp
    366a:	88d8      	ldrh	r0, [r3, #6]
    366c:	b280      	uxth	r0, r0
    366e:	466b      	mov	r3, sp
    3670:	8859      	ldrh	r1, [r3, #2]
    3672:	b289      	uxth	r1, r1
    3674:	2203      	movs	r2, #3
    3676:	4b43      	ldr	r3, [pc, #268]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    3678:	4798      	blx	r3
    367a:	e03a      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    367c:	466b      	mov	r3, sp
    367e:	88d8      	ldrh	r0, [r3, #6]
    3680:	b280      	uxth	r0, r0
    3682:	466b      	mov	r3, sp
    3684:	8859      	ldrh	r1, [r3, #2]
    3686:	b289      	uxth	r1, r1
    3688:	2202      	movs	r2, #2
    368a:	4b3e      	ldr	r3, [pc, #248]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    368c:	4798      	blx	r3
    368e:	e030      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_GREEN:  gfx_eink_set_pixel(dx, dy, PIXEL_GREEN); break;
    3690:	466b      	mov	r3, sp
    3692:	88d8      	ldrh	r0, [r3, #6]
    3694:	b280      	uxth	r0, r0
    3696:	466b      	mov	r3, sp
    3698:	8859      	ldrh	r1, [r3, #2]
    369a:	b289      	uxth	r1, r1
    369c:	2204      	movs	r2, #4
    369e:	4b39      	ldr	r3, [pc, #228]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    36a0:	4798      	blx	r3
    36a2:	e026      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_BLUE:   gfx_eink_set_pixel(dx, dy, PIXEL_BLUE); break;
    36a4:	466b      	mov	r3, sp
    36a6:	88d8      	ldrh	r0, [r3, #6]
    36a8:	b280      	uxth	r0, r0
    36aa:	466b      	mov	r3, sp
    36ac:	8859      	ldrh	r1, [r3, #2]
    36ae:	b289      	uxth	r1, r1
    36b0:	2205      	movs	r2, #5
    36b2:	4b34      	ldr	r3, [pc, #208]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    36b4:	4798      	blx	r3
    36b6:	e01c      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_ORANGE: gfx_eink_set_pixel(dx, dy, PIXEL_ORANGE); break;
    36b8:	466b      	mov	r3, sp
    36ba:	88d8      	ldrh	r0, [r3, #6]
    36bc:	b280      	uxth	r0, r0
    36be:	466b      	mov	r3, sp
    36c0:	8859      	ldrh	r1, [r3, #2]
    36c2:	b289      	uxth	r1, r1
    36c4:	2206      	movs	r2, #6
    36c6:	4b2f      	ldr	r3, [pc, #188]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    36c8:	4798      	blx	r3
    36ca:	e012      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_CLEAN:  gfx_eink_set_pixel(dx, dy, PIXEL_CLEAN); break;
    36cc:	466b      	mov	r3, sp
    36ce:	88d8      	ldrh	r0, [r3, #6]
    36d0:	b280      	uxth	r0, r0
    36d2:	466b      	mov	r3, sp
    36d4:	8859      	ldrh	r1, [r3, #2]
    36d6:	b289      	uxth	r1, r1
    36d8:	2207      	movs	r2, #7
    36da:	4b2a      	ldr	r3, [pc, #168]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    36dc:	4798      	blx	r3
    36de:	e008      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                }
            } else {
                switch (fill_color) {
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    36e0:	466b      	mov	r3, sp
    36e2:	88d8      	ldrh	r0, [r3, #6]
    36e4:	b280      	uxth	r0, r0
    36e6:	466b      	mov	r3, sp
    36e8:	8859      	ldrh	r1, [r3, #2]
    36ea:	b289      	uxth	r1, r1
    36ec:	2200      	movs	r2, #0
    36ee:	4b25      	ldr	r3, [pc, #148]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    36f0:	4798      	blx	r3
        for(dy = 0; dy < height_fill; dy++) {
    36f2:	466b      	mov	r3, sp
    36f4:	1c9a      	adds	r2, r3, #2
    36f6:	885b      	ldrh	r3, [r3, #2]
    36f8:	3301      	adds	r3, #1
    36fa:	b29b      	uxth	r3, r3
    36fc:	8013      	strh	r3, [r2, #0]
    36fe:	8813      	ldrh	r3, [r2, #0]
    3700:	466a      	mov	r2, sp
    3702:	8812      	ldrh	r2, [r2, #0]
    3704:	b29b      	uxth	r3, r3
    3706:	4293      	cmp	r3, r2
    3708:	d21f      	bcs.n	374a <gfx_eink_graphics_fill_screen+0x146>
            if(ptr_eink_gfx_config->gfx_display == GFX_AC057TC1)
    370a:	4b1c      	ldr	r3, [pc, #112]	; (377c <gfx_eink_graphics_fill_screen+0x178>)
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	781b      	ldrb	r3, [r3, #0]
    3710:	2b05      	cmp	r3, #5
    3712:	d100      	bne.n	3716 <gfx_eink_graphics_fill_screen+0x112>
    3714:	e790      	b.n	3638 <gfx_eink_graphics_fill_screen+0x34>
                switch (fill_color) {
    3716:	2c01      	cmp	r4, #1
    3718:	d00d      	beq.n	3736 <gfx_eink_graphics_fill_screen+0x132>
    371a:	2c00      	cmp	r4, #0
    371c:	d0e0      	beq.n	36e0 <gfx_eink_graphics_fill_screen+0xdc>
    371e:	2c03      	cmp	r4, #3
    3720:	d8e7      	bhi.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
                    case FILL_YELLOW:
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    3722:	466b      	mov	r3, sp
    3724:	88d8      	ldrh	r0, [r3, #6]
    3726:	b280      	uxth	r0, r0
    3728:	466b      	mov	r3, sp
    372a:	8859      	ldrh	r1, [r3, #2]
    372c:	b289      	uxth	r1, r1
    372e:	2202      	movs	r2, #2
    3730:	4b14      	ldr	r3, [pc, #80]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    3732:	4798      	blx	r3
    3734:	e7dd      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    3736:	466b      	mov	r3, sp
    3738:	88d8      	ldrh	r0, [r3, #6]
    373a:	b280      	uxth	r0, r0
    373c:	466b      	mov	r3, sp
    373e:	8859      	ldrh	r1, [r3, #2]
    3740:	b289      	uxth	r1, r1
    3742:	2201      	movs	r2, #1
    3744:	4b0f      	ldr	r3, [pc, #60]	; (3784 <gfx_eink_graphics_fill_screen+0x180>)
    3746:	4798      	blx	r3
    3748:	e7d3      	b.n	36f2 <gfx_eink_graphics_fill_screen+0xee>
    for(dx = 0; dx < width_fill; dx++) {
    374a:	466b      	mov	r3, sp
    374c:	1d9a      	adds	r2, r3, #6
    374e:	88db      	ldrh	r3, [r3, #6]
    3750:	3301      	adds	r3, #1
    3752:	b29b      	uxth	r3, r3
    3754:	8013      	strh	r3, [r2, #0]
    3756:	8813      	ldrh	r3, [r2, #0]
    3758:	aa01      	add	r2, sp, #4
    375a:	8812      	ldrh	r2, [r2, #0]
    375c:	b29b      	uxth	r3, r3
    375e:	4293      	cmp	r3, r2
    3760:	d20a      	bcs.n	3778 <gfx_eink_graphics_fill_screen+0x174>
        for(dy = 0; dy < height_fill; dy++) {
    3762:	466b      	mov	r3, sp
    3764:	2200      	movs	r2, #0
    3766:	805a      	strh	r2, [r3, #2]
    3768:	3302      	adds	r3, #2
    376a:	881b      	ldrh	r3, [r3, #0]
    376c:	466a      	mov	r2, sp
    376e:	8812      	ldrh	r2, [r2, #0]
    3770:	b29b      	uxth	r3, r3
    3772:	4293      	cmp	r3, r2
    3774:	d3c9      	bcc.n	370a <gfx_eink_graphics_fill_screen+0x106>
    3776:	e7e8      	b.n	374a <gfx_eink_graphics_fill_screen+0x146>
                }
            }
        }
    }
}
    3778:	b003      	add	sp, #12
    377a:	bd30      	pop	{r4, r5, pc}
    377c:	200003a0 	.word	0x200003a0
    3780:	00004100 	.word	0x00004100
    3784:	00000585 	.word	0x00000585

00003788 <gfx_eink_graphics_draw_rect>:
 * \param fill_type Color of the rectangle fill.
 *
 * \note Both the border and the fill can be set to blank should you want a border-less or empty rectangle.
 */
void gfx_eink_graphics_draw_rect(eink_coordinate x0, eink_coordinate y0, eink_coordinate width, eink_coordinate height, enum eink_pixel_colour line_colour, enum eink_fill_colour fill_colour)
{
    3788:	b5f0      	push	{r4, r5, r6, r7, lr}
    378a:	46de      	mov	lr, fp
    378c:	4657      	mov	r7, sl
    378e:	464e      	mov	r6, r9
    3790:	4645      	mov	r5, r8
    3792:	b5e0      	push	{r5, r6, r7, lr}
    3794:	b085      	sub	sp, #20
    3796:	0007      	movs	r7, r0
    3798:	9001      	str	r0, [sp, #4]
    379a:	4688      	mov	r8, r1
    379c:	9203      	str	r2, [sp, #12]
    379e:	469b      	mov	fp, r3
    37a0:	ab0e      	add	r3, sp, #56	; 0x38
    37a2:	781e      	ldrb	r6, [r3, #0]
    37a4:	ab0f      	add	r3, sp, #60	; 0x3c
    37a6:	781c      	ldrb	r4, [r3, #0]
    eink_coordinate i, j;
    
    /* Draw rectangle borders first */
    for (i = x0; i < (x0+width); i++) {
    37a8:	4691      	mov	r9, r2
    37aa:	4684      	mov	ip, r0
    37ac:	44e1      	add	r9, ip
    37ae:	4548      	cmp	r0, r9
    37b0:	da1b      	bge.n	37ea <gfx_eink_graphics_draw_rect+0x62>
        gfx_eink_set_pixel(i, y0, line_colour);
    37b2:	4d59      	ldr	r5, [pc, #356]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    37b4:	465b      	mov	r3, fp
    37b6:	3b01      	subs	r3, #1
    37b8:	4443      	add	r3, r8
    37ba:	b29b      	uxth	r3, r3
    37bc:	9302      	str	r3, [sp, #8]
    37be:	9600      	str	r6, [sp, #0]
    37c0:	464e      	mov	r6, r9
    37c2:	0023      	movs	r3, r4
    37c4:	000c      	movs	r4, r1
    37c6:	4698      	mov	r8, r3
        gfx_eink_set_pixel(i, y0, line_colour);
    37c8:	9a00      	ldr	r2, [sp, #0]
    37ca:	0021      	movs	r1, r4
    37cc:	0038      	movs	r0, r7
    37ce:	47a8      	blx	r5
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    37d0:	9a00      	ldr	r2, [sp, #0]
    37d2:	9902      	ldr	r1, [sp, #8]
    37d4:	0038      	movs	r0, r7
    37d6:	47a8      	blx	r5
    for (i = x0; i < (x0+width); i++) {
    37d8:	3701      	adds	r7, #1
    37da:	b2bf      	uxth	r7, r7
    37dc:	42b7      	cmp	r7, r6
    37de:	dbf3      	blt.n	37c8 <gfx_eink_graphics_draw_rect+0x40>
    37e0:	46b1      	mov	r9, r6
    37e2:	9e00      	ldr	r6, [sp, #0]
    37e4:	4643      	mov	r3, r8
    37e6:	46a0      	mov	r8, r4
    37e8:	001c      	movs	r4, r3
    }
    for (i = y0; i < (y0+height); i++) {
    37ea:	46da      	mov	sl, fp
    37ec:	44c2      	add	sl, r8
    37ee:	45d0      	cmp	r8, sl
    37f0:	da1a      	bge.n	3828 <gfx_eink_graphics_draw_rect+0xa0>
    37f2:	4645      	mov	r5, r8
        gfx_eink_set_pixel(x0, i, line_colour);
    37f4:	4f48      	ldr	r7, [pc, #288]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    37f6:	9b03      	ldr	r3, [sp, #12]
    37f8:	3b01      	subs	r3, #1
    37fa:	9a01      	ldr	r2, [sp, #4]
    37fc:	4694      	mov	ip, r2
    37fe:	4463      	add	r3, ip
    3800:	b29b      	uxth	r3, r3
    3802:	9300      	str	r3, [sp, #0]
    3804:	0023      	movs	r3, r4
    3806:	4654      	mov	r4, sl
    3808:	469a      	mov	sl, r3
        gfx_eink_set_pixel(x0, i, line_colour);
    380a:	0032      	movs	r2, r6
    380c:	0029      	movs	r1, r5
    380e:	9801      	ldr	r0, [sp, #4]
    3810:	47b8      	blx	r7
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    3812:	0032      	movs	r2, r6
    3814:	0029      	movs	r1, r5
    3816:	9800      	ldr	r0, [sp, #0]
    3818:	47b8      	blx	r7
    for (i = y0; i < (y0+height); i++) {
    381a:	3501      	adds	r5, #1
    381c:	b2ad      	uxth	r5, r5
    381e:	42a5      	cmp	r5, r4
    3820:	dbf3      	blt.n	380a <gfx_eink_graphics_draw_rect+0x82>
    3822:	4653      	mov	r3, sl
    3824:	46a2      	mov	sl, r4
    3826:	001c      	movs	r4, r3
    }
    
    /* Add a fill if necessary */
    if (fill_colour != FILL_NONE) {
    3828:	2c08      	cmp	r4, #8
    382a:	d06e      	beq.n	390a <gfx_eink_graphics_draw_rect+0x182>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    382c:	9d01      	ldr	r5, [sp, #4]
    382e:	3501      	adds	r5, #1
    3830:	b2ad      	uxth	r5, r5
    3832:	2301      	movs	r3, #1
    3834:	425b      	negs	r3, r3
    3836:	469c      	mov	ip, r3
    3838:	44e1      	add	r9, ip
    383a:	454d      	cmp	r5, r9
    383c:	da65      	bge.n	390a <gfx_eink_graphics_draw_rect+0x182>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
                if(ptr_eink_gfx_config->gfx_display == GFX_AC057TC1)
                {
                    switch (fill_colour) {
    383e:	00a3      	lsls	r3, r4, #2
    3840:	4a36      	ldr	r2, [pc, #216]	; (391c <gfx_eink_graphics_draw_rect+0x194>)
    3842:	4693      	mov	fp, r2
    3844:	449b      	add	fp, r3
    3846:	e058      	b.n	38fa <gfx_eink_graphics_draw_rect+0x172>
    3848:	2c07      	cmp	r4, #7
    384a:	d837      	bhi.n	38bc <gfx_eink_graphics_draw_rect+0x134>
    384c:	465b      	mov	r3, fp
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	469f      	mov	pc, r3
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    3852:	2200      	movs	r2, #0
    3854:	0031      	movs	r1, r6
    3856:	0028      	movs	r0, r5
    3858:	4b2f      	ldr	r3, [pc, #188]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    385a:	4798      	blx	r3
    385c:	e02e      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    385e:	2201      	movs	r2, #1
    3860:	0031      	movs	r1, r6
    3862:	0028      	movs	r0, r5
    3864:	4b2c      	ldr	r3, [pc, #176]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    3866:	4798      	blx	r3
    3868:	e028      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_YELLOW: gfx_eink_set_pixel(i, j, PIXEL_YELLOW); break;
    386a:	2203      	movs	r2, #3
    386c:	0031      	movs	r1, r6
    386e:	0028      	movs	r0, r5
    3870:	4b29      	ldr	r3, [pc, #164]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    3872:	4798      	blx	r3
    3874:	e022      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    3876:	2202      	movs	r2, #2
    3878:	0031      	movs	r1, r6
    387a:	0028      	movs	r0, r5
    387c:	4b26      	ldr	r3, [pc, #152]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    387e:	4798      	blx	r3
    3880:	e01c      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_GREEN:  gfx_eink_set_pixel(i, j, PIXEL_GREEN); break;
    3882:	2204      	movs	r2, #4
    3884:	0031      	movs	r1, r6
    3886:	0028      	movs	r0, r5
    3888:	4b23      	ldr	r3, [pc, #140]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    388a:	4798      	blx	r3
    388c:	e016      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_BLUE:   gfx_eink_set_pixel(i, j, PIXEL_BLUE); break;
    388e:	2205      	movs	r2, #5
    3890:	0031      	movs	r1, r6
    3892:	0028      	movs	r0, r5
    3894:	4b20      	ldr	r3, [pc, #128]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    3896:	4798      	blx	r3
    3898:	e010      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_ORANGE: gfx_eink_set_pixel(i, j, PIXEL_ORANGE); break;
    389a:	2206      	movs	r2, #6
    389c:	0031      	movs	r1, r6
    389e:	0028      	movs	r0, r5
    38a0:	4b1d      	ldr	r3, [pc, #116]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    38a2:	4798      	blx	r3
    38a4:	e00a      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_CLEAN:  gfx_eink_set_pixel(i, j, PIXEL_CLEAN); break;
    38a6:	2207      	movs	r2, #7
    38a8:	0031      	movs	r1, r6
    38aa:	0028      	movs	r0, r5
    38ac:	4b1a      	ldr	r3, [pc, #104]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    38ae:	4798      	blx	r3
    38b0:	e004      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                    }
                } else {
                    switch (fill_colour) {
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    38b2:	2200      	movs	r2, #0
    38b4:	0031      	movs	r1, r6
    38b6:	0028      	movs	r0, r5
    38b8:	4b17      	ldr	r3, [pc, #92]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    38ba:	4798      	blx	r3
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    38bc:	3601      	adds	r6, #1
    38be:	b2b6      	uxth	r6, r6
    38c0:	42be      	cmp	r6, r7
    38c2:	da16      	bge.n	38f2 <gfx_eink_graphics_draw_rect+0x16a>
                if(ptr_eink_gfx_config->gfx_display == GFX_AC057TC1)
    38c4:	4b16      	ldr	r3, [pc, #88]	; (3920 <gfx_eink_graphics_draw_rect+0x198>)
    38c6:	681b      	ldr	r3, [r3, #0]
    38c8:	781b      	ldrb	r3, [r3, #0]
    38ca:	2b05      	cmp	r3, #5
    38cc:	d0bc      	beq.n	3848 <gfx_eink_graphics_draw_rect+0xc0>
                    switch (fill_colour) {
    38ce:	2c01      	cmp	r4, #1
    38d0:	d009      	beq.n	38e6 <gfx_eink_graphics_draw_rect+0x15e>
    38d2:	2c00      	cmp	r4, #0
    38d4:	d0ed      	beq.n	38b2 <gfx_eink_graphics_draw_rect+0x12a>
    38d6:	2c03      	cmp	r4, #3
    38d8:	d8f0      	bhi.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
                        case FILL_YELLOW:
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    38da:	2202      	movs	r2, #2
    38dc:	0031      	movs	r1, r6
    38de:	0028      	movs	r0, r5
    38e0:	4b0d      	ldr	r3, [pc, #52]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    38e2:	4798      	blx	r3
    38e4:	e7ea      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    38e6:	2201      	movs	r2, #1
    38e8:	0031      	movs	r1, r6
    38ea:	0028      	movs	r0, r5
    38ec:	4b0a      	ldr	r3, [pc, #40]	; (3918 <gfx_eink_graphics_draw_rect+0x190>)
    38ee:	4798      	blx	r3
    38f0:	e7e4      	b.n	38bc <gfx_eink_graphics_draw_rect+0x134>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    38f2:	3501      	adds	r5, #1
    38f4:	b2ad      	uxth	r5, r5
    38f6:	454d      	cmp	r5, r9
    38f8:	da07      	bge.n	390a <gfx_eink_graphics_draw_rect+0x182>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    38fa:	4643      	mov	r3, r8
    38fc:	1c5e      	adds	r6, r3, #1
    38fe:	b2b6      	uxth	r6, r6
    3900:	4653      	mov	r3, sl
    3902:	1e5f      	subs	r7, r3, #1
    3904:	42be      	cmp	r6, r7
    3906:	dbdd      	blt.n	38c4 <gfx_eink_graphics_draw_rect+0x13c>
    3908:	e7f3      	b.n	38f2 <gfx_eink_graphics_draw_rect+0x16a>
                    }
                }
            }
        }
    }
}
    390a:	b005      	add	sp, #20
    390c:	bc3c      	pop	{r2, r3, r4, r5}
    390e:	4690      	mov	r8, r2
    3910:	4699      	mov	r9, r3
    3912:	46a2      	mov	sl, r4
    3914:	46ab      	mov	fp, r5
    3916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3918:	00000585 	.word	0x00000585
    391c:	00004120 	.word	0x00004120
    3920:	200003a0 	.word	0x200003a0

00003924 <_gfx_eink_text_write_character>:
 * \param text_colour Color of character.
 * \param text_colour_value Pixel value of character.
 * \param eink_font Font structure to use. 
 */
void _gfx_eink_text_write_character(char character, eink_coordinate start_x, eink_coordinate start_y, uint8_t colour_raw, enum eink_pixel_colour text_colour, uint8_t text_colour_value, struct gfx_eink_font eink_font)
{
    3924:	b5f0      	push	{r4, r5, r6, r7, lr}
    3926:	46de      	mov	lr, fp
    3928:	4657      	mov	r7, sl
    392a:	464e      	mov	r6, r9
    392c:	4645      	mov	r5, r8
    392e:	b5e0      	push	{r5, r6, r7, lr}
    3930:	b08f      	sub	sp, #60	; 0x3c
    3932:	4694      	mov	ip, r2
    3934:	9202      	str	r2, [sp, #8]
    3936:	4698      	mov	r8, r3
    3938:	ab18      	add	r3, sp, #96	; 0x60
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	9300      	str	r3, [sp, #0]
    393e:	ab19      	add	r3, sp, #100	; 0x64
    3940:	781b      	ldrb	r3, [r3, #0]
    3942:	9301      	str	r3, [sp, #4]
    3944:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    3946:	ab1a      	add	r3, sp, #104	; 0x68
    3948:	7b5d      	ldrb	r5, [r3, #13]
    394a:	7b9e      	ldrb	r6, [r3, #14]
    394c:	46b1      	mov	r9, r6
    394e:	7bde      	ldrb	r6, [r3, #15]
    volatile eink_coordinate current_y, send_y;
    
    uint8_t *font_character_size_map_ptr;
    uint8_t *font_array_ptr;
    
    current_x = start_x;
    3950:	af04      	add	r7, sp, #16
    3952:	80f9      	strh	r1, [r7, #6]
    current_y = start_y;
    3954:	1cba      	adds	r2, r7, #2
    3956:	4661      	mov	r1, ip
    3958:	8011      	strh	r1, [r2, #0]
    
    /* Get the index of the start of the character in the font array */
    start_font_index = 0;
    395a:	2200      	movs	r2, #0
    395c:	920a      	str	r2, [sp, #40]	; 0x28
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    current_char_index = character - eink_font.font_starting_ascii_char;
    395e:	7b1b      	ldrb	r3, [r3, #12]
    3960:	1ac0      	subs	r0, r0, r3
    3962:	900b      	str	r0, [sp, #44]	; 0x2c
    for(i = 0; i < current_char_index; i++) {
    3964:	9208      	str	r2, [sp, #32]
    3966:	9a08      	ldr	r2, [sp, #32]
    3968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    396a:	429a      	cmp	r2, r3
    396c:	d237      	bcs.n	39de <_gfx_eink_text_write_character+0xba>
    396e:	0021      	movs	r1, r4
        start_font_index += (*font_character_size_map_ptr * eink_font.font_height_bytes);
    3970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3972:	780b      	ldrb	r3, [r1, #0]
    3974:	436b      	muls	r3, r5
    3976:	189b      	adds	r3, r3, r2
    3978:	930a      	str	r3, [sp, #40]	; 0x28
        font_character_size_map_ptr++;
    397a:	3101      	adds	r1, #1
    for(i = 0; i < current_char_index; i++) {
    397c:	9b08      	ldr	r3, [sp, #32]
    397e:	3301      	adds	r3, #1
    3980:	9308      	str	r3, [sp, #32]
    3982:	9a08      	ldr	r2, [sp, #32]
    3984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3986:	429a      	cmp	r2, r3
    3988:	d3f2      	bcc.n	3970 <_gfx_eink_text_write_character+0x4c>
    }
    
    /* Ensure the chosen character is still in the font array */
    if( (start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) ) < (eink_font.font_array_size + (eink_font.font_character_size_map_ptr[current_char_index] * eink_font.font_height_bytes) )) {
    398a:	780a      	ldrb	r2, [r1, #0]
    398c:	436a      	muls	r2, r5
    398e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3992:	1851      	adds	r1, r2, r1
    3994:	5ce3      	ldrb	r3, [r4, r3]
    3996:	436b      	muls	r3, r5
    3998:	981b      	ldr	r0, [sp, #108]	; 0x6c
    399a:	4684      	mov	ip, r0
    399c:	4463      	add	r3, ip
    399e:	4299      	cmp	r1, r3
    39a0:	d300      	bcc.n	39a4 <_gfx_eink_text_write_character+0x80>
    39a2:	e0ea      	b.n	3b7a <_gfx_eink_text_write_character+0x256>
        
        /* Move the pointer to the character starting byte */
        font_array_ptr = (uint8_t*) eink_font.font_array_ptr;
    39a4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
        if(ptr_eink_gfx_config->gfx_display == GFX_IT8951)
    39a6:	4b78      	ldr	r3, [pc, #480]	; (3b88 <_gfx_eink_text_write_character+0x264>)
    39a8:	681b      	ldr	r3, [r3, #0]
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	2b08      	cmp	r3, #8
    39ae:	d018      	beq.n	39e2 <_gfx_eink_text_write_character+0xbe>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
        else
            font_array_ptr += start_font_index;
    39b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    39b2:	18e4      	adds	r4, r4, r3
    
       /**
        * Loop horizontally through the columns of the font first,
        * then loop vertically through each row of the font (bit by bit)
        */
        j = 0;
    39b4:	2300      	movs	r3, #0
    39b6:	9307      	str	r3, [sp, #28]
        end_font_index = start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) - 1;
    39b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    39ba:	3b01      	subs	r3, #1
    39bc:	189a      	adds	r2, r3, r2
    39be:	9209      	str	r2, [sp, #36]	; 0x24
        for (i = start_font_index; i <= end_font_index; i++) {
    39c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    39c2:	9308      	str	r3, [sp, #32]
    39c4:	9a08      	ldr	r2, [sp, #32]
    39c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    39c8:	429a      	cmp	r2, r3
    39ca:	d900      	bls.n	39ce <_gfx_eink_text_write_character+0xaa>
    39cc:	e0d5      	b.n	3b7a <_gfx_eink_text_write_character+0x256>
            j++;
            current_y += 8;
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
            else font_array_ptr += sizeof(uint8_t);
            
            if(j == eink_font.font_height_bytes) {
    39ce:	46aa      	mov	sl, r5
                j = 0;
                current_y = start_y;
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    39d0:	006b      	lsls	r3, r5, #1
    39d2:	9303      	str	r3, [sp, #12]
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    39d4:	4b6d      	ldr	r3, [pc, #436]	; (3b8c <_gfx_eink_text_write_character+0x268>)
    39d6:	469b      	mov	fp, r3
                    send_y = (current_y + (m));
    39d8:	ab04      	add	r3, sp, #16
    39da:	1c9d      	adds	r5, r3, #2
    39dc:	e0a3      	b.n	3b26 <_gfx_eink_text_write_character+0x202>
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    39de:	0021      	movs	r1, r4
    39e0:	e7d3      	b.n	398a <_gfx_eink_text_write_character+0x66>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
    39e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    39e4:	3b01      	subs	r3, #1
    39e6:	195b      	adds	r3, r3, r5
    39e8:	18e4      	adds	r4, r4, r3
    39ea:	e7e3      	b.n	39b4 <_gfx_eink_text_write_character+0x90>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    39ec:	464b      	mov	r3, r9
    39ee:	2b01      	cmp	r3, #1
    39f0:	d009      	beq.n	3a06 <_gfx_eink_text_write_character+0xe2>
                m = 0;
    39f2:	2300      	movs	r3, #0
    39f4:	9306      	str	r3, [sp, #24]
                for (k = 8; k > 0; k--) {
    39f6:	3308      	adds	r3, #8
    39f8:	930d      	str	r3, [sp, #52]	; 0x34
    39fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    39fc:	2b00      	cmp	r3, #0
    39fe:	d100      	bne.n	3a02 <_gfx_eink_text_write_character+0xde>
    3a00:	e07a      	b.n	3af8 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    3a02:	2701      	movs	r7, #1
    3a04:	e051      	b.n	3aaa <_gfx_eink_text_write_character+0x186>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    3a06:	4b60      	ldr	r3, [pc, #384]	; (3b88 <_gfx_eink_text_write_character+0x264>)
    3a08:	681b      	ldr	r3, [r3, #0]
    3a0a:	781b      	ldrb	r3, [r3, #0]
    3a0c:	2b08      	cmp	r3, #8
    3a0e:	d1f0      	bne.n	39f2 <_gfx_eink_text_write_character+0xce>
    3a10:	e093      	b.n	3b3a <_gfx_eink_text_write_character+0x216>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    3a12:	2e00      	cmp	r6, #0
    3a14:	d125      	bne.n	3a62 <_gfx_eink_text_write_character+0x13e>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    3a16:	4643      	mov	r3, r8
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d128      	bne.n	3a6e <_gfx_eink_text_write_character+0x14a>
    3a1c:	ab05      	add	r3, sp, #20
    3a1e:	8818      	ldrh	r0, [r3, #0]
    3a20:	b280      	uxth	r0, r0
    3a22:	ab04      	add	r3, sp, #16
    3a24:	8819      	ldrh	r1, [r3, #0]
    3a26:	b289      	uxth	r1, r1
    3a28:	9a00      	ldr	r2, [sp, #0]
    3a2a:	4b59      	ldr	r3, [pc, #356]	; (3b90 <_gfx_eink_text_write_character+0x26c>)
    3a2c:	4798      	blx	r3
                for (k = 0; k < 8; k++) {
    3a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3a30:	3301      	adds	r3, #1
    3a32:	930d      	str	r3, [sp, #52]	; 0x34
    3a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3a36:	2b07      	cmp	r3, #7
    3a38:	d85e      	bhi.n	3af8 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    3a3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a3c:	7823      	ldrb	r3, [r4, #0]
    3a3e:	4113      	asrs	r3, r2
    3a40:	403b      	ands	r3, r7
    3a42:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    3a44:	ab04      	add	r3, sp, #16
    3a46:	3306      	adds	r3, #6
    3a48:	881b      	ldrh	r3, [r3, #0]
    3a4a:	b29b      	uxth	r3, r3
    3a4c:	aa05      	add	r2, sp, #20
    3a4e:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + k);
    3a50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a52:	882b      	ldrh	r3, [r5, #0]
    3a54:	189b      	adds	r3, r3, r2
    3a56:	b29b      	uxth	r3, r3
    3a58:	aa04      	add	r2, sp, #16
    3a5a:	8013      	strh	r3, [r2, #0]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    3a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3a5e:	2b01      	cmp	r3, #1
    3a60:	d0d7      	beq.n	3a12 <_gfx_eink_text_write_character+0xee>
    3a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3a64:	2b00      	cmp	r3, #0
    3a66:	d1e2      	bne.n	3a2e <_gfx_eink_text_write_character+0x10a>
    3a68:	2e01      	cmp	r6, #1
    3a6a:	d1e0      	bne.n	3a2e <_gfx_eink_text_write_character+0x10a>
    3a6c:	e7d3      	b.n	3a16 <_gfx_eink_text_write_character+0xf2>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    3a6e:	ab05      	add	r3, sp, #20
    3a70:	8818      	ldrh	r0, [r3, #0]
    3a72:	b280      	uxth	r0, r0
    3a74:	ab04      	add	r3, sp, #16
    3a76:	8819      	ldrh	r1, [r3, #0]
    3a78:	b289      	uxth	r1, r1
    3a7a:	9a01      	ldr	r2, [sp, #4]
    3a7c:	4b43      	ldr	r3, [pc, #268]	; (3b8c <_gfx_eink_text_write_character+0x268>)
    3a7e:	4798      	blx	r3
    3a80:	e7d5      	b.n	3a2e <_gfx_eink_text_write_character+0x10a>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    3a82:	2e00      	cmp	r6, #0
    3a84:	d129      	bne.n	3ada <_gfx_eink_text_write_character+0x1b6>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    3a86:	4643      	mov	r3, r8
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d12c      	bne.n	3ae6 <_gfx_eink_text_write_character+0x1c2>
    3a8c:	ab05      	add	r3, sp, #20
    3a8e:	8818      	ldrh	r0, [r3, #0]
    3a90:	b280      	uxth	r0, r0
    3a92:	ab04      	add	r3, sp, #16
    3a94:	8819      	ldrh	r1, [r3, #0]
    3a96:	b289      	uxth	r1, r1
    3a98:	9a00      	ldr	r2, [sp, #0]
    3a9a:	4b3d      	ldr	r3, [pc, #244]	; (3b90 <_gfx_eink_text_write_character+0x26c>)
    3a9c:	4798      	blx	r3
                for (k = 8; k > 0; k--) {
    3a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3aa0:	3b01      	subs	r3, #1
    3aa2:	930d      	str	r3, [sp, #52]	; 0x34
    3aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d026      	beq.n	3af8 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    3aaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3aac:	7823      	ldrb	r3, [r4, #0]
    3aae:	3a01      	subs	r2, #1
    3ab0:	4113      	asrs	r3, r2
    3ab2:	403b      	ands	r3, r7
    3ab4:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    3ab6:	ab04      	add	r3, sp, #16
    3ab8:	3306      	adds	r3, #6
    3aba:	881b      	ldrh	r3, [r3, #0]
    3abc:	b29b      	uxth	r3, r3
    3abe:	aa05      	add	r2, sp, #20
    3ac0:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + (m));
    3ac2:	9a06      	ldr	r2, [sp, #24]
    3ac4:	882b      	ldrh	r3, [r5, #0]
    3ac6:	189b      	adds	r3, r3, r2
    3ac8:	b29b      	uxth	r3, r3
    3aca:	aa04      	add	r2, sp, #16
    3acc:	8013      	strh	r3, [r2, #0]
                    m++;
    3ace:	9b06      	ldr	r3, [sp, #24]
    3ad0:	3301      	adds	r3, #1
    3ad2:	9306      	str	r3, [sp, #24]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    3ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3ad6:	2b01      	cmp	r3, #1
    3ad8:	d0d3      	beq.n	3a82 <_gfx_eink_text_write_character+0x15e>
    3ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3adc:	2b00      	cmp	r3, #0
    3ade:	d1de      	bne.n	3a9e <_gfx_eink_text_write_character+0x17a>
    3ae0:	2e01      	cmp	r6, #1
    3ae2:	d1dc      	bne.n	3a9e <_gfx_eink_text_write_character+0x17a>
    3ae4:	e7cf      	b.n	3a86 <_gfx_eink_text_write_character+0x162>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    3ae6:	ab05      	add	r3, sp, #20
    3ae8:	8818      	ldrh	r0, [r3, #0]
    3aea:	b280      	uxth	r0, r0
    3aec:	ab04      	add	r3, sp, #16
    3aee:	8819      	ldrh	r1, [r3, #0]
    3af0:	b289      	uxth	r1, r1
    3af2:	9a01      	ldr	r2, [sp, #4]
    3af4:	47d8      	blx	fp
    3af6:	e7d2      	b.n	3a9e <_gfx_eink_text_write_character+0x17a>
            j++;
    3af8:	9b07      	ldr	r3, [sp, #28]
    3afa:	3301      	adds	r3, #1
    3afc:	9307      	str	r3, [sp, #28]
            current_y += 8;
    3afe:	882b      	ldrh	r3, [r5, #0]
    3b00:	3308      	adds	r3, #8
    3b02:	b29b      	uxth	r3, r3
    3b04:	802b      	strh	r3, [r5, #0]
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    3b06:	4b20      	ldr	r3, [pc, #128]	; (3b88 <_gfx_eink_text_write_character+0x264>)
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	781b      	ldrb	r3, [r3, #0]
    3b0c:	2b08      	cmp	r3, #8
    3b0e:	d01b      	beq.n	3b48 <_gfx_eink_text_write_character+0x224>
            else font_array_ptr += sizeof(uint8_t);
    3b10:	3401      	adds	r4, #1
            if(j == eink_font.font_height_bytes) {
    3b12:	9b07      	ldr	r3, [sp, #28]
    3b14:	459a      	cmp	sl, r3
    3b16:	d024      	beq.n	3b62 <_gfx_eink_text_write_character+0x23e>
        for (i = start_font_index; i <= end_font_index; i++) {
    3b18:	9b08      	ldr	r3, [sp, #32]
    3b1a:	3301      	adds	r3, #1
    3b1c:	9308      	str	r3, [sp, #32]
    3b1e:	9a08      	ldr	r2, [sp, #32]
    3b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b22:	429a      	cmp	r2, r3
    3b24:	d829      	bhi.n	3b7a <_gfx_eink_text_write_character+0x256>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    3b26:	464b      	mov	r3, r9
    3b28:	2b00      	cmp	r3, #0
    3b2a:	d000      	beq.n	3b2e <_gfx_eink_text_write_character+0x20a>
    3b2c:	e75e      	b.n	39ec <_gfx_eink_text_write_character+0xc8>
    3b2e:	4b16      	ldr	r3, [pc, #88]	; (3b88 <_gfx_eink_text_write_character+0x264>)
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	781b      	ldrb	r3, [r3, #0]
    3b34:	2b08      	cmp	r3, #8
    3b36:	d100      	bne.n	3b3a <_gfx_eink_text_write_character+0x216>
    3b38:	e75b      	b.n	39f2 <_gfx_eink_text_write_character+0xce>
                for (k = 0; k < 8; k++) {
    3b3a:	2300      	movs	r3, #0
    3b3c:	930d      	str	r3, [sp, #52]	; 0x34
    3b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3b40:	2b07      	cmp	r3, #7
    3b42:	d8d9      	bhi.n	3af8 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    3b44:	2701      	movs	r7, #1
    3b46:	e778      	b.n	3a3a <_gfx_eink_text_write_character+0x116>
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    3b48:	3c01      	subs	r4, #1
            if(j == eink_font.font_height_bytes) {
    3b4a:	9b07      	ldr	r3, [sp, #28]
    3b4c:	459a      	cmp	sl, r3
    3b4e:	d1e3      	bne.n	3b18 <_gfx_eink_text_write_character+0x1f4>
                j = 0;
    3b50:	2300      	movs	r3, #0
    3b52:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    3b54:	466b      	mov	r3, sp
    3b56:	891b      	ldrh	r3, [r3, #8]
    3b58:	802b      	strh	r3, [r5, #0]
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    3b5a:	9b03      	ldr	r3, [sp, #12]
    3b5c:	469c      	mov	ip, r3
    3b5e:	4464      	add	r4, ip
    3b60:	e004      	b.n	3b6c <_gfx_eink_text_write_character+0x248>
                j = 0;
    3b62:	2300      	movs	r3, #0
    3b64:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    3b66:	466b      	mov	r3, sp
    3b68:	891b      	ldrh	r3, [r3, #8]
    3b6a:	802b      	strh	r3, [r5, #0]
                
                current_x++;
    3b6c:	ab04      	add	r3, sp, #16
    3b6e:	1d9a      	adds	r2, r3, #6
    3b70:	88db      	ldrh	r3, [r3, #6]
    3b72:	3301      	adds	r3, #1
    3b74:	b29b      	uxth	r3, r3
    3b76:	8013      	strh	r3, [r2, #0]
    3b78:	e7ce      	b.n	3b18 <_gfx_eink_text_write_character+0x1f4>
            }
        }
    }
}
    3b7a:	b00f      	add	sp, #60	; 0x3c
    3b7c:	bc3c      	pop	{r2, r3, r4, r5}
    3b7e:	4690      	mov	r8, r2
    3b80:	4699      	mov	r9, r3
    3b82:	46a2      	mov	sl, r4
    3b84:	46ab      	mov	fp, r5
    3b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b88:	200003a0 	.word	0x200003a0
    3b8c:	00000595 	.word	0x00000595
    3b90:	00000585 	.word	0x00000585

00003b94 <gfx_eink_text_write_string>:
 * \param start_y Y coordinate to start writing.
 * \param text_colour Color of character.
 * \param eink_font Font structure to use.
 */
void gfx_eink_text_write_string(char *char_array, eink_coordinate start_x, eink_coordinate start_y, enum eink_pixel_colour text_colour, struct gfx_eink_font eink_font)
{
    3b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b96:	46de      	mov	lr, fp
    3b98:	4657      	mov	r7, sl
    3b9a:	464e      	mov	r6, r9
    3b9c:	4645      	mov	r5, r8
    3b9e:	b5e0      	push	{r5, r6, r7, lr}
    3ba0:	b089      	sub	sp, #36	; 0x24
    3ba2:	4681      	mov	r9, r0
    3ba4:	000c      	movs	r4, r1
    3ba6:	9206      	str	r2, [sp, #24]
    3ba8:	469a      	mov	sl, r3
    uint8_t i = 0;
    eink_coordinate x_send = start_x;
    
    while(char_array[i] != '\0')
    3baa:	7800      	ldrb	r0, [r0, #0]
    3bac:	2800      	cmp	r0, #0
    3bae:	d027      	beq.n	3c00 <gfx_eink_text_write_string+0x6c>
    3bb0:	464f      	mov	r7, r9
    3bb2:	2500      	movs	r5, #0
    {
        _gfx_eink_text_write_character(char_array[i], x_send, start_y, 0, text_colour, 0, eink_font);
    3bb4:	ae02      	add	r6, sp, #8
    3bb6:	2300      	movs	r3, #0
    3bb8:	4698      	mov	r8, r3
    3bba:	4b15      	ldr	r3, [pc, #84]	; (3c10 <gfx_eink_text_write_string+0x7c>)
    3bbc:	469b      	mov	fp, r3
    3bbe:	4684      	mov	ip, r0
    3bc0:	9607      	str	r6, [sp, #28]
    3bc2:	9b07      	ldr	r3, [sp, #28]
    3bc4:	aa12      	add	r2, sp, #72	; 0x48
    3bc6:	ca43      	ldmia	r2!, {r0, r1, r6}
    3bc8:	c343      	stmia	r3!, {r0, r1, r6}
    3bca:	6812      	ldr	r2, [r2, #0]
    3bcc:	601a      	str	r2, [r3, #0]
    3bce:	4643      	mov	r3, r8
    3bd0:	9301      	str	r3, [sp, #4]
    3bd2:	4653      	mov	r3, sl
    3bd4:	9300      	str	r3, [sp, #0]
    3bd6:	4643      	mov	r3, r8
    3bd8:	9a06      	ldr	r2, [sp, #24]
    3bda:	0021      	movs	r1, r4
    3bdc:	4660      	mov	r0, ip
    3bde:	47d8      	blx	fp
            
        x_send += eink_font.font_character_size_map_ptr[char_array[i]-eink_font.font_starting_ascii_char];
    3be0:	783b      	ldrb	r3, [r7, #0]
    3be2:	aa12      	add	r2, sp, #72	; 0x48
    3be4:	7b12      	ldrb	r2, [r2, #12]
    3be6:	1a9b      	subs	r3, r3, r2
    3be8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3bea:	5cd3      	ldrb	r3, [r2, r3]
    3bec:	18e4      	adds	r4, r4, r3
    3bee:	b2a4      	uxth	r4, r4
        i++;        
    3bf0:	3501      	adds	r5, #1
    3bf2:	b2ed      	uxtb	r5, r5
    while(char_array[i] != '\0')
    3bf4:	464b      	mov	r3, r9
    3bf6:	195f      	adds	r7, r3, r5
    3bf8:	783b      	ldrb	r3, [r7, #0]
    3bfa:	469c      	mov	ip, r3
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d1e0      	bne.n	3bc2 <gfx_eink_text_write_string+0x2e>
    }
}
    3c00:	b009      	add	sp, #36	; 0x24
    3c02:	bc3c      	pop	{r2, r3, r4, r5}
    3c04:	4690      	mov	r8, r2
    3c06:	4699      	mov	r9, r3
    3c08:	46a2      	mov	sl, r4
    3c0a:	46ab      	mov	fp, r5
    3c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c0e:	46c0      	nop			; (mov r8, r8)
    3c10:	00003925 	.word	0x00003925

00003c14 <eink_init_display>:
	
	while(1);
}

void eink_init_display(void)
{
    3c14:	b500      	push	{lr}
    3c16:	b083      	sub	sp, #12
    config->display_rotation = ROTATE_0;
    3c18:	a801      	add	r0, sp, #4
    3c1a:	2300      	movs	r3, #0
    3c1c:	7003      	strb	r3, [r0, #0]
	struct uc8173_config eink_conf;
	
	uc8173_get_config_defaults(&eink_conf);
	eink_conf.display_rotation = ROTATE_0;
	eink_ed013tc1_init(&eink_conf, false);
    3c1e:	2100      	movs	r1, #0
    3c20:	4b01      	ldr	r3, [pc, #4]	; (3c28 <eink_init_display+0x14>)
    3c22:	4798      	blx	r3
}
    3c24:	b003      	add	sp, #12
    3c26:	bd00      	pop	{pc}
    3c28:	00002e11 	.word	0x00002e11

00003c2c <main>:
{
    3c2c:	b570      	push	{r4, r5, r6, lr}
    3c2e:	b086      	sub	sp, #24
	system_init();
    3c30:	4b24      	ldr	r3, [pc, #144]	; (3cc4 <main+0x98>)
    3c32:	4798      	blx	r3
	eink_init_display();
    3c34:	4b24      	ldr	r3, [pc, #144]	; (3cc8 <main+0x9c>)
    3c36:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3c38:	2180      	movs	r1, #128	; 0x80
    3c3a:	05c9      	lsls	r1, r1, #23
    3c3c:	2398      	movs	r3, #152	; 0x98
    3c3e:	22c0      	movs	r2, #192	; 0xc0
    3c40:	05d2      	lsls	r2, r2, #23
    3c42:	50d1      	str	r1, [r2, r3]
	CRITICAL_SECTION_ENTER();
    3c44:	4e21      	ldr	r6, [pc, #132]	; (3ccc <main+0xa0>)
	CRITICAL_SECTION_LEAVE();
    3c46:	4d22      	ldr	r5, [pc, #136]	; (3cd0 <main+0xa4>)
	CRITICAL_SECTION_ENTER();
    3c48:	a804      	add	r0, sp, #16
    3c4a:	47b0      	blx	r6
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3c4c:	23c0      	movs	r3, #192	; 0xc0
    3c4e:	05db      	lsls	r3, r3, #23
    3c50:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3c52:	4a20      	ldr	r2, [pc, #128]	; (3cd4 <main+0xa8>)
    3c54:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3c56:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3c58:	4053      	eors	r3, r2
    3c5a:	401c      	ands	r4, r3
    3c5c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3c5e:	a804      	add	r0, sp, #16
    3c60:	47a8      	blx	r5
		if(!gpio_get_pin_level(USER_SW))
    3c62:	0423      	lsls	r3, r4, #16
    3c64:	d4f0      	bmi.n	3c48 <main+0x1c>
	CRITICAL_SECTION_ENTER();
    3c66:	4e19      	ldr	r6, [pc, #100]	; (3ccc <main+0xa0>)
	CRITICAL_SECTION_LEAVE();
    3c68:	4d19      	ldr	r5, [pc, #100]	; (3cd0 <main+0xa4>)
	CRITICAL_SECTION_ENTER();
    3c6a:	a805      	add	r0, sp, #20
    3c6c:	47b0      	blx	r6
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3c6e:	23c0      	movs	r3, #192	; 0xc0
    3c70:	05db      	lsls	r3, r3, #23
    3c72:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3c74:	4a17      	ldr	r2, [pc, #92]	; (3cd4 <main+0xa8>)
    3c76:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3c78:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3c7a:	4053      	eors	r3, r2
    3c7c:	401c      	ands	r4, r3
    3c7e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3c80:	a805      	add	r0, sp, #20
    3c82:	47a8      	blx	r5
			while(!gpio_get_pin_level(USER_SW));
    3c84:	0423      	lsls	r3, r4, #16
    3c86:	d5f0      	bpl.n	3c6a <main+0x3e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3c88:	24c0      	movs	r4, #192	; 0xc0
    3c8a:	05e4      	lsls	r4, r4, #23
    3c8c:	2580      	movs	r5, #128	; 0x80
    3c8e:	05ed      	lsls	r5, r5, #23
    3c90:	2394      	movs	r3, #148	; 0x94
    3c92:	50e5      	str	r5, [r4, r3]
	gfx_eink_graphics_fill_screen(FILL_BLACK);
    3c94:	2000      	movs	r0, #0
    3c96:	4b10      	ldr	r3, [pc, #64]	; (3cd8 <main+0xac>)
    3c98:	4798      	blx	r3
	gfx_eink_text_write_string("Arduino Uno", 7, 48, PIXEL_WHITE, ArvoBold_18pt);
    3c9a:	4b10      	ldr	r3, [pc, #64]	; (3cdc <main+0xb0>)
    3c9c:	335c      	adds	r3, #92	; 0x5c
    3c9e:	466a      	mov	r2, sp
    3ca0:	cb43      	ldmia	r3!, {r0, r1, r6}
    3ca2:	c243      	stmia	r2!, {r0, r1, r6}
    3ca4:	681b      	ldr	r3, [r3, #0]
    3ca6:	6013      	str	r3, [r2, #0]
    3ca8:	2301      	movs	r3, #1
    3caa:	2230      	movs	r2, #48	; 0x30
    3cac:	2107      	movs	r1, #7
    3cae:	480c      	ldr	r0, [pc, #48]	; (3ce0 <main+0xb4>)
    3cb0:	4e0c      	ldr	r6, [pc, #48]	; (3ce4 <main+0xb8>)
    3cb2:	47b0      	blx	r6
    ptr_eink_gfx_config->put_display_buffer(refresh_display);
    3cb4:	4b0c      	ldr	r3, [pc, #48]	; (3ce8 <main+0xbc>)
    3cb6:	681b      	ldr	r3, [r3, #0]
    3cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3cba:	2001      	movs	r0, #1
    3cbc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3cbe:	2398      	movs	r3, #152	; 0x98
    3cc0:	50e5      	str	r5, [r4, r3]
    3cc2:	e7fe      	b.n	3cc2 <main+0x96>
    3cc4:	00000211 	.word	0x00000211
    3cc8:	00003c15 	.word	0x00003c15
    3ccc:	0000034d 	.word	0x0000034d
    3cd0:	0000035b 	.word	0x0000035b
    3cd4:	41004400 	.word	0x41004400
    3cd8:	00003605 	.word	0x00003605
    3cdc:	20000200 	.word	0x20000200
    3ce0:	0000630c 	.word	0x0000630c
    3ce4:	00003b95 	.word	0x00003b95
    3ce8:	200003a0 	.word	0x200003a0

00003cec <__libc_init_array>:
    3cec:	b570      	push	{r4, r5, r6, lr}
    3cee:	2600      	movs	r6, #0
    3cf0:	4d0c      	ldr	r5, [pc, #48]	; (3d24 <__libc_init_array+0x38>)
    3cf2:	4c0d      	ldr	r4, [pc, #52]	; (3d28 <__libc_init_array+0x3c>)
    3cf4:	1b64      	subs	r4, r4, r5
    3cf6:	10a4      	asrs	r4, r4, #2
    3cf8:	42a6      	cmp	r6, r4
    3cfa:	d109      	bne.n	3d10 <__libc_init_array+0x24>
    3cfc:	2600      	movs	r6, #0
    3cfe:	f002 fb3b 	bl	6378 <_init>
    3d02:	4d0a      	ldr	r5, [pc, #40]	; (3d2c <__libc_init_array+0x40>)
    3d04:	4c0a      	ldr	r4, [pc, #40]	; (3d30 <__libc_init_array+0x44>)
    3d06:	1b64      	subs	r4, r4, r5
    3d08:	10a4      	asrs	r4, r4, #2
    3d0a:	42a6      	cmp	r6, r4
    3d0c:	d105      	bne.n	3d1a <__libc_init_array+0x2e>
    3d0e:	bd70      	pop	{r4, r5, r6, pc}
    3d10:	00b3      	lsls	r3, r6, #2
    3d12:	58eb      	ldr	r3, [r5, r3]
    3d14:	4798      	blx	r3
    3d16:	3601      	adds	r6, #1
    3d18:	e7ee      	b.n	3cf8 <__libc_init_array+0xc>
    3d1a:	00b3      	lsls	r3, r6, #2
    3d1c:	58eb      	ldr	r3, [r5, r3]
    3d1e:	4798      	blx	r3
    3d20:	3601      	adds	r6, #1
    3d22:	e7f2      	b.n	3d0a <__libc_init_array+0x1e>
    3d24:	00006384 	.word	0x00006384
    3d28:	00006384 	.word	0x00006384
    3d2c:	00006384 	.word	0x00006384
    3d30:	00006388 	.word	0x00006388

00003d34 <malloc>:
    3d34:	b510      	push	{r4, lr}
    3d36:	4b03      	ldr	r3, [pc, #12]	; (3d44 <malloc+0x10>)
    3d38:	0001      	movs	r1, r0
    3d3a:	6818      	ldr	r0, [r3, #0]
    3d3c:	f000 f80e 	bl	3d5c <_malloc_r>
    3d40:	bd10      	pop	{r4, pc}
    3d42:	46c0      	nop			; (mov r8, r8)
    3d44:	2000026c 	.word	0x2000026c

00003d48 <memcpy>:
    3d48:	2300      	movs	r3, #0
    3d4a:	b510      	push	{r4, lr}
    3d4c:	429a      	cmp	r2, r3
    3d4e:	d100      	bne.n	3d52 <memcpy+0xa>
    3d50:	bd10      	pop	{r4, pc}
    3d52:	5ccc      	ldrb	r4, [r1, r3]
    3d54:	54c4      	strb	r4, [r0, r3]
    3d56:	3301      	adds	r3, #1
    3d58:	e7f8      	b.n	3d4c <memcpy+0x4>
	...

00003d5c <_malloc_r>:
    3d5c:	2303      	movs	r3, #3
    3d5e:	b570      	push	{r4, r5, r6, lr}
    3d60:	1ccd      	adds	r5, r1, #3
    3d62:	439d      	bics	r5, r3
    3d64:	3508      	adds	r5, #8
    3d66:	0006      	movs	r6, r0
    3d68:	2d0c      	cmp	r5, #12
    3d6a:	d21e      	bcs.n	3daa <_malloc_r+0x4e>
    3d6c:	250c      	movs	r5, #12
    3d6e:	42a9      	cmp	r1, r5
    3d70:	d81d      	bhi.n	3dae <_malloc_r+0x52>
    3d72:	0030      	movs	r0, r6
    3d74:	f000 f862 	bl	3e3c <__malloc_lock>
    3d78:	4a25      	ldr	r2, [pc, #148]	; (3e10 <_malloc_r+0xb4>)
    3d7a:	6814      	ldr	r4, [r2, #0]
    3d7c:	0021      	movs	r1, r4
    3d7e:	2900      	cmp	r1, #0
    3d80:	d119      	bne.n	3db6 <_malloc_r+0x5a>
    3d82:	4c24      	ldr	r4, [pc, #144]	; (3e14 <_malloc_r+0xb8>)
    3d84:	6823      	ldr	r3, [r4, #0]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d103      	bne.n	3d92 <_malloc_r+0x36>
    3d8a:	0030      	movs	r0, r6
    3d8c:	f000 f844 	bl	3e18 <_sbrk_r>
    3d90:	6020      	str	r0, [r4, #0]
    3d92:	0029      	movs	r1, r5
    3d94:	0030      	movs	r0, r6
    3d96:	f000 f83f 	bl	3e18 <_sbrk_r>
    3d9a:	1c43      	adds	r3, r0, #1
    3d9c:	d12c      	bne.n	3df8 <_malloc_r+0x9c>
    3d9e:	230c      	movs	r3, #12
    3da0:	0030      	movs	r0, r6
    3da2:	6033      	str	r3, [r6, #0]
    3da4:	f000 f84b 	bl	3e3e <__malloc_unlock>
    3da8:	e003      	b.n	3db2 <_malloc_r+0x56>
    3daa:	2d00      	cmp	r5, #0
    3dac:	dadf      	bge.n	3d6e <_malloc_r+0x12>
    3dae:	230c      	movs	r3, #12
    3db0:	6033      	str	r3, [r6, #0]
    3db2:	2000      	movs	r0, #0
    3db4:	bd70      	pop	{r4, r5, r6, pc}
    3db6:	680b      	ldr	r3, [r1, #0]
    3db8:	1b5b      	subs	r3, r3, r5
    3dba:	d41a      	bmi.n	3df2 <_malloc_r+0x96>
    3dbc:	2b0b      	cmp	r3, #11
    3dbe:	d903      	bls.n	3dc8 <_malloc_r+0x6c>
    3dc0:	600b      	str	r3, [r1, #0]
    3dc2:	18cc      	adds	r4, r1, r3
    3dc4:	6025      	str	r5, [r4, #0]
    3dc6:	e003      	b.n	3dd0 <_malloc_r+0x74>
    3dc8:	428c      	cmp	r4, r1
    3dca:	d10e      	bne.n	3dea <_malloc_r+0x8e>
    3dcc:	6863      	ldr	r3, [r4, #4]
    3dce:	6013      	str	r3, [r2, #0]
    3dd0:	0030      	movs	r0, r6
    3dd2:	f000 f834 	bl	3e3e <__malloc_unlock>
    3dd6:	0020      	movs	r0, r4
    3dd8:	2207      	movs	r2, #7
    3dda:	300b      	adds	r0, #11
    3ddc:	1d23      	adds	r3, r4, #4
    3dde:	4390      	bics	r0, r2
    3de0:	1ac3      	subs	r3, r0, r3
    3de2:	d0e7      	beq.n	3db4 <_malloc_r+0x58>
    3de4:	425a      	negs	r2, r3
    3de6:	50e2      	str	r2, [r4, r3]
    3de8:	e7e4      	b.n	3db4 <_malloc_r+0x58>
    3dea:	684b      	ldr	r3, [r1, #4]
    3dec:	6063      	str	r3, [r4, #4]
    3dee:	000c      	movs	r4, r1
    3df0:	e7ee      	b.n	3dd0 <_malloc_r+0x74>
    3df2:	000c      	movs	r4, r1
    3df4:	6849      	ldr	r1, [r1, #4]
    3df6:	e7c2      	b.n	3d7e <_malloc_r+0x22>
    3df8:	2303      	movs	r3, #3
    3dfa:	1cc4      	adds	r4, r0, #3
    3dfc:	439c      	bics	r4, r3
    3dfe:	42a0      	cmp	r0, r4
    3e00:	d0e0      	beq.n	3dc4 <_malloc_r+0x68>
    3e02:	1a21      	subs	r1, r4, r0
    3e04:	0030      	movs	r0, r6
    3e06:	f000 f807 	bl	3e18 <_sbrk_r>
    3e0a:	1c43      	adds	r3, r0, #1
    3e0c:	d1da      	bne.n	3dc4 <_malloc_r+0x68>
    3e0e:	e7c6      	b.n	3d9e <_malloc_r+0x42>
    3e10:	200002f4 	.word	0x200002f4
    3e14:	200002f8 	.word	0x200002f8

00003e18 <_sbrk_r>:
    3e18:	2300      	movs	r3, #0
    3e1a:	b570      	push	{r4, r5, r6, lr}
    3e1c:	4c06      	ldr	r4, [pc, #24]	; (3e38 <_sbrk_r+0x20>)
    3e1e:	0005      	movs	r5, r0
    3e20:	0008      	movs	r0, r1
    3e22:	6023      	str	r3, [r4, #0]
    3e24:	f7fc faba 	bl	39c <_sbrk>
    3e28:	1c43      	adds	r3, r0, #1
    3e2a:	d103      	bne.n	3e34 <_sbrk_r+0x1c>
    3e2c:	6823      	ldr	r3, [r4, #0]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d000      	beq.n	3e34 <_sbrk_r+0x1c>
    3e32:	602b      	str	r3, [r5, #0]
    3e34:	bd70      	pop	{r4, r5, r6, pc}
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	200003a4 	.word	0x200003a4

00003e3c <__malloc_lock>:
    3e3c:	4770      	bx	lr

00003e3e <__malloc_unlock>:
    3e3e:	4770      	bx	lr
    3e40:	000010d6 	.word	0x000010d6
    3e44:	00001104 	.word	0x00001104
    3e48:	0000118e 	.word	0x0000118e
    3e4c:	000011bc 	.word	0x000011bc
    3e50:	00001132 	.word	0x00001132
    3e54:	00001160 	.word	0x00001160
    3e58:	000011ea 	.word	0x000011ea
    3e5c:	00001218 	.word	0x00001218
    3e60:	00001254 	.word	0x00001254
    3e64:	00001282 	.word	0x00001282
    3e68:	0000130c 	.word	0x0000130c
    3e6c:	0000133a 	.word	0x0000133a
    3e70:	000012b0 	.word	0x000012b0
    3e74:	000012de 	.word	0x000012de
    3e78:	00001368 	.word	0x00001368
    3e7c:	00001396 	.word	0x00001396
    3e80:	00003164 	.word	0x00003164
    3e84:	0000315c 	.word	0x0000315c
    3e88:	0000317c 	.word	0x0000317c
    3e8c:	00003186 	.word	0x00003186
    3e90:	00003190 	.word	0x00003190
    3e94:	0000319a 	.word	0x0000319a
    3e98:	000031a4 	.word	0x000031a4
    3e9c:	000031ae 	.word	0x000031ae
    3ea0:	000031c0 	.word	0x000031c0
    3ea4:	000031b8 	.word	0x000031b8
    3ea8:	000031e2 	.word	0x000031e2
    3eac:	000031ec 	.word	0x000031ec
    3eb0:	000031f6 	.word	0x000031f6
    3eb4:	00003200 	.word	0x00003200
    3eb8:	0000320a 	.word	0x0000320a
    3ebc:	00003214 	.word	0x00003214
    3ec0:	000032f4 	.word	0x000032f4
    3ec4:	0000323e 	.word	0x0000323e
    3ec8:	00003258 	.word	0x00003258
    3ecc:	00003272 	.word	0x00003272
    3ed0:	0000328c 	.word	0x0000328c
    3ed4:	000032a6 	.word	0x000032a6
    3ed8:	000032c0 	.word	0x000032c0
    3edc:	000032da 	.word	0x000032da
    3ee0:	000033cc 	.word	0x000033cc
    3ee4:	00003308 	.word	0x00003308
    3ee8:	0000331e 	.word	0x0000331e
    3eec:	00003334 	.word	0x00003334
    3ef0:	0000334a 	.word	0x0000334a
    3ef4:	00003360 	.word	0x00003360
    3ef8:	00003376 	.word	0x00003376
    3efc:	0000338c 	.word	0x0000338c
    3f00:	000033d4 	.word	0x000033d4
    3f04:	00003308 	.word	0x00003308
    3f08:	0000331e 	.word	0x0000331e
    3f0c:	00003334 	.word	0x00003334
    3f10:	0000334a 	.word	0x0000334a
    3f14:	00003360 	.word	0x00003360
    3f18:	00003376 	.word	0x00003376
    3f1c:	0000338c 	.word	0x0000338c
    3f20:	000033dc 	.word	0x000033dc
    3f24:	00003308 	.word	0x00003308
    3f28:	0000331e 	.word	0x0000331e
    3f2c:	00003334 	.word	0x00003334
    3f30:	0000334a 	.word	0x0000334a
    3f34:	00003360 	.word	0x00003360
    3f38:	00003376 	.word	0x00003376
    3f3c:	0000338c 	.word	0x0000338c
    3f40:	000033e4 	.word	0x000033e4
    3f44:	00003308 	.word	0x00003308
    3f48:	0000331e 	.word	0x0000331e
    3f4c:	00003334 	.word	0x00003334
    3f50:	0000334a 	.word	0x0000334a
    3f54:	00003360 	.word	0x00003360
    3f58:	00003376 	.word	0x00003376
    3f5c:	0000338c 	.word	0x0000338c
    3f60:	000033ec 	.word	0x000033ec
    3f64:	00003308 	.word	0x00003308
    3f68:	0000331e 	.word	0x0000331e
    3f6c:	00003334 	.word	0x00003334
    3f70:	0000334a 	.word	0x0000334a
    3f74:	00003360 	.word	0x00003360
    3f78:	00003376 	.word	0x00003376
    3f7c:	0000338c 	.word	0x0000338c
    3f80:	000033f4 	.word	0x000033f4
    3f84:	00003308 	.word	0x00003308
    3f88:	0000331e 	.word	0x0000331e
    3f8c:	00003334 	.word	0x00003334
    3f90:	0000334a 	.word	0x0000334a
    3f94:	00003360 	.word	0x00003360
    3f98:	00003376 	.word	0x00003376
    3f9c:	0000338c 	.word	0x0000338c
    3fa0:	000033fc 	.word	0x000033fc
    3fa4:	00003308 	.word	0x00003308
    3fa8:	0000331e 	.word	0x0000331e
    3fac:	00003334 	.word	0x00003334
    3fb0:	0000334a 	.word	0x0000334a
    3fb4:	00003360 	.word	0x00003360
    3fb8:	00003376 	.word	0x00003376
    3fbc:	0000338c 	.word	0x0000338c
    3fc0:	000033a2 	.word	0x000033a2
    3fc4:	00003308 	.word	0x00003308
    3fc8:	0000331e 	.word	0x0000331e
    3fcc:	00003334 	.word	0x00003334
    3fd0:	0000334a 	.word	0x0000334a
    3fd4:	00003360 	.word	0x00003360
    3fd8:	00003376 	.word	0x00003376
    3fdc:	0000338c 	.word	0x0000338c
    3fe0:	000033ae 	.word	0x000033ae
    3fe4:	000033cc 	.word	0x000033cc
    3fe8:	000033d4 	.word	0x000033d4
    3fec:	000033dc 	.word	0x000033dc
    3ff0:	000033e4 	.word	0x000033e4
    3ff4:	000033ec 	.word	0x000033ec
    3ff8:	000033f4 	.word	0x000033f4
    3ffc:	000033fc 	.word	0x000033fc
    4000:	000033ae 	.word	0x000033ae
    4004:	000033cc 	.word	0x000033cc
    4008:	000033d4 	.word	0x000033d4
    400c:	000033dc 	.word	0x000033dc
    4010:	000033e4 	.word	0x000033e4
    4014:	000033ec 	.word	0x000033ec
    4018:	000033f4 	.word	0x000033f4
    401c:	000033fc 	.word	0x000033fc
    4020:	000033ae 	.word	0x000033ae
    4024:	000033cc 	.word	0x000033cc
    4028:	000033d4 	.word	0x000033d4
    402c:	000033dc 	.word	0x000033dc
    4030:	000033e4 	.word	0x000033e4
    4034:	000033ec 	.word	0x000033ec
    4038:	000033f4 	.word	0x000033f4
    403c:	000033fc 	.word	0x000033fc
    4040:	000033ae 	.word	0x000033ae
    4044:	000033cc 	.word	0x000033cc
    4048:	000033d4 	.word	0x000033d4
    404c:	000033dc 	.word	0x000033dc
    4050:	000033e4 	.word	0x000033e4
    4054:	000033ec 	.word	0x000033ec
    4058:	000033f4 	.word	0x000033f4
    405c:	000033fc 	.word	0x000033fc
    4060:	000033ae 	.word	0x000033ae
    4064:	000033cc 	.word	0x000033cc
    4068:	000033d4 	.word	0x000033d4
    406c:	000033dc 	.word	0x000033dc
    4070:	000033e4 	.word	0x000033e4
    4074:	000033ec 	.word	0x000033ec
    4078:	000033f4 	.word	0x000033f4
    407c:	000033fc 	.word	0x000033fc
    4080:	000033ae 	.word	0x000033ae
    4084:	000033cc 	.word	0x000033cc
    4088:	000033d4 	.word	0x000033d4
    408c:	000033dc 	.word	0x000033dc
    4090:	000033e4 	.word	0x000033e4
    4094:	000033ec 	.word	0x000033ec
    4098:	000033f4 	.word	0x000033f4
    409c:	000033fc 	.word	0x000033fc
    40a0:	000033ae 	.word	0x000033ae
    40a4:	000033cc 	.word	0x000033cc
    40a8:	000033d4 	.word	0x000033d4
    40ac:	000033dc 	.word	0x000033dc
    40b0:	000033e4 	.word	0x000033e4
    40b4:	000033ec 	.word	0x000033ec
    40b8:	000033f4 	.word	0x000033f4
    40bc:	000033fc 	.word	0x000033fc
    40c0:	000033ae 	.word	0x000033ae
    40c4:	000033cc 	.word	0x000033cc
    40c8:	000033d4 	.word	0x000033d4
    40cc:	000033dc 	.word	0x000033dc
    40d0:	000033e4 	.word	0x000033e4
    40d4:	000033ec 	.word	0x000033ec
    40d8:	000033f4 	.word	0x000033f4
    40dc:	000033fc 	.word	0x000033fc
    40e0:	000034d6 	.word	0x000034d6
    40e4:	000034ce 	.word	0x000034ce
    40e8:	0000358e 	.word	0x0000358e
    40ec:	000035a0 	.word	0x000035a0
    40f0:	000035b2 	.word	0x000035b2
    40f4:	000035c4 	.word	0x000035c4
    40f8:	000035d6 	.word	0x000035d6
    40fc:	000035e8 	.word	0x000035e8
    4100:	00003640 	.word	0x00003640
    4104:	00003654 	.word	0x00003654
    4108:	0000367c 	.word	0x0000367c
    410c:	00003668 	.word	0x00003668
    4110:	00003690 	.word	0x00003690
    4114:	000036a4 	.word	0x000036a4
    4118:	000036b8 	.word	0x000036b8
    411c:	000036cc 	.word	0x000036cc
    4120:	00003852 	.word	0x00003852
    4124:	0000385e 	.word	0x0000385e
    4128:	00003876 	.word	0x00003876
    412c:	0000386a 	.word	0x0000386a
    4130:	00003882 	.word	0x00003882
    4134:	0000388e 	.word	0x0000388e
    4138:	0000389a 	.word	0x0000389a
    413c:	000038a6 	.word	0x000038a6

00004140 <ED037TC1_A2_LUT>:
    4140:	0000052a 00000000 2a050000 00000000     *..........*....
    4150:	00000000 0000152a 00000000 0a050000     ....*...........
	...
    4170:	02000000 02000a03 00050a06 00000000     ................
	...
    41a4:	22222222 00000022                       """""...

000041ac <ED037TC1_DU_LUT>:
	...
    41b4:	2a010000 00000000 00000000 0000550a     ...*.........U..
	...
    41e0:	05000505 00050503 00000000 00000000     ................
	...
    4210:	22222222 00000022                       """""...

00004218 <SSD1608_A45_IU_LUT>:
    4218:	18181824 10181800 00000008 00000000     $...............
    4228:	00000000 11111141 00000001 00000000     ....A...........

00004238 <SSD1608_A05_IU_LUT>:
    4238:	28181810 18181818 00000008 00000000     ...(............
    4248:	00000000 13221233 00000011 00000000     ....3.".........

00004258 <ED028TC1_WF_LUT>:
    4258:	0011042e 00000000 00000000 00000000     ................
    4268:	00000010 00000100 00000100 10040100     ................
    4278:	00440100 00400000 00000000 00400000     ..D...@.......@.
    4288:	00000000 10400100 10400500 00000000     ......@...@.....
    4298:	00511400 00000000 00000000 00000010     ..Q.............
    42a8:	00000010 00400100 00401100 10040100     ......@...@.....
    42b8:	00440100 00400000 00000000 10440100     ..D...@.......D.
    42c8:	00000100 10400100 10400500 00000100     ......@...@.....
    42d8:	00511500 00100000 00000010 00000010     ..Q.............
    42e8:	00000010 00400100 10401100 10040100     ......@...@.....
    42f8:	00441100 00400100 10400000 10444100     ..D...@...@..AD.
    4308:	00000100 10441500 10444500 00040100     ......D..ED.....
    4318:	00511500 00100000 00000010 00000010     ..Q.............
    4328:	00000010 00440100 10401100 10040100     ......D...@.....
    4338:	00441100 00404100 10400000 10444500     ..D..A@...@..ED.
    4348:	10400100 10441500 10444500 10440500     ..@...D..ED...D.
    4358:	00512500 00100004 00000010 00400010     .%Q...........@.
    4368:	00400010 10440100 10401500 10040500     ..@...D...@.....
    4378:	10441100 00404100 10401100 10444500     ..D..A@...@..ED.
    4388:	10440100 10441500 10444500 10440500     ..D...D..ED...D.
    4398:	00512500 00541104 00400010 00400110     .%Q...T...@...@.
    43a8:	00444110 10440100 10405500 10044504     .AD...D..U@..E..
    43b8:	10445500 00444500 10401100 10444500     .UD..ED...@..ED.
    43c8:	10440100 10441500 10444500 10540500     ..D...D..ED...T.
    43d8:	00512500 00541104 00400110 00400110     .%Q...T...@...@.
    43e8:	00444110 10440500 14445500 10544504     .AD...D..UD..ET.
    43f8:	10445500 10444500 10441100 10444500     .UD..ED...D..ED.
    4408:	10440500 14545500 14544500 10540500     ..D..UT..ET...T.
    4418:	00512500 10545504 00500114 10445110     .%Q..UT...P..QD.
    4428:	10444114 10544500 14445504 10544504     .AD..ET..UD..ET.
    4438:	10445500 10444500 10445500 14544500     .UD..ED..UD..ET.
    4448:	14441500 14545500 14554500 14540500     ..D..UT..EU...T.
    4458:	00512900 10545504 10500114 10545110     .)Q..UT...P..QT.
    4468:	10444114 10545500 14445504 14544504     .AD..UT..UD..ET.
    4478:	14445500 14544510 10445500 14544500     .UD..ET..UD..ET.
    4488:	14541500 14545500 14554500 14540500     ..T..UT..EU...T.
    4498:	00512900 10545514 10500114 14545510     .)Q..UT...P..UT.
    44a8:	10444114 10545510 14545504 14544504     .AD..UT..UT..ET.
    44b8:	14445500 14544510 10545504 14544500     .UD..ET..UT..ET.
    44c8:	14541500 14545500 14555500 14540500     ..T..UT..UU...T.
    44d8:	00a12900 10545514 14500114 14545510     .)...UT...P..UT.
    44e8:	10544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    44f8:	14445510 14544510 14545504 14544500     .UD..ET..UT..ET.
    4508:	14541500 14555500 14555511 14540511     ..T..UU..UU...T.
    4518:	00a22a00 14545518 14500114 14545510     .*...UT...P..UT.
    4528:	14544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    4538:	14545510 14544510 14545504 14544500     .UT..ET..UT..ET.
    4548:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    4558:	00a26a10 14555518 14544514 14545510     .j...UU..ET..UT.
    4568:	14544114 14545514 14555514 14554515     .AT..UT..UU..EU.
    4578:	14545511 14544511 14545515 14544501     .UT..ET..UT..ET.
    4588:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    4598:	00a6aa10 14555518 14544515 14545510     .....UU..ET..UT.
    45a8:	14544514 14545514 15555514 15554515     .ET..UT..UU..EU.
    45b8:	14545515 14544515 14545515 14544501     .UT..ET..UT..ET.
    45c8:	14541511 14555511 15555511 14550511     ..T..UU..UU...U.
    45d8:	10a6aa11 15556518 14554515 14545514     .....eU..EU..UT.
    45e8:	14544514 14545514 15555515 15554515     .ET..UT..UU..EU.
    45f8:	14546515 14544515 14545515 14555511     .eT..ET..UT..UU.
    4608:	14545511 14555511 15555511 14550511     .UT..UU..UU...U.
    4618:	10a6aa11 55a9a518 14554555 14545514     .......UUEU..UT.
    4628:	14558515 15995515 15556515 15594515     ..U..U...eU..EY.
    4638:	14596515 15558515 14555515 14559511     .eY...U..UU...U.
    4648:	14545511 14555511 15555511 55550551     .UT..UU..UU.Q.UU
    4658:	10aaaa51 55a9a518 15555559 1555a515     Q......UYUU...U.
    4668:	14998555 15995615 55556515 55595515     U....V...eUU.UYU
    4678:	55996515 15959515 14956515 14559511     .e.U.....e....U.
    4688:	14545611 54556511 55959551 55551551     .VT..eUTQ..UQ.UU
    4698:	10aaaa51 55a9aa28 15955569 1595a525     Q...(..UiU..%...
    46a8:	14998569 15999615 5595aa15 55599a15     i..........U..YU
    46b8:	5599a655 55999515 1495a515 14999511     U..U...U........
    46c8:	14956611 55996911 55959951 55591551     .f...i.UQ..UQ.YU
    46d8:	54aaaa55 55a9aa28 55a59669 5599a625     U..T(..Ui..U%..U
    46e8:	54998669 5599aa19 5595aa15 65999a55     i..T...U...UU..e
    46f8:	5599aa55 55999a15 1499a555 14999615     U..U...UU.......
    4708:	14996651 5599aa11 5595aa55 55991551     Qf.....UU..UQ..U
    4718:	64aaaa55 65a9aa28 55a59669 55a9aa25     U..d(..ei..U%..U
    4728:	54999669 65a9aa19 6595aa19 65999a59     i..T...e...eY..e
    4738:	5599aa55 55999a15 2499aa55 25999a15     U..U...UU..$...%
    4748:	14996a55 6599aa11 65a9aa55 55991a51     Uj.....eU..eQ..U
    4758:	a5aaaa55 65a9aa28 65a5aa69 65a9aa69     U...(..ei..ei..e
    4768:	64a99669 65a9aa59 65a9aa59 65a99a59     i..dY..eY..eY..e
    4778:	6599aa55 55999a55 6499aa55 65999a55     U..eU..UU..dU..e
    4788:	24996a55 6599aa15 65a9aa55 55a91a51     Uj.$...eU..eQ..U
    4798:	a5aaaa55 a5aaaa68 65a9aa69 65a9aa69     U...h...i..ei..e
    47a8:	65a99a69 65a9aa59 65a9aa59 65a99a59     i..eY..eY..eY..e
    47b8:	65a9aa55 65a99a55 64a9aa59 65a9aa55     U..eU..eY..dU..e
    47c8:	24a9aa55 65a9aa15 65a9aa55 65a91a51     U..$...eU..eQ..e
    47d8:	aaaaaa55 aaaaaa68 69aaaa68 69a9aa69     U...h...h..ii..i
    47e8:	65a99a69 65a9aa69 69aaaa59 65aaaa59     i..ei..eY..iY..e
    47f8:	65a9aa55 65a9aa55 65a9aa59 65a9aa55     U..eU..eY..eU..e
    4808:	64a9aa55 65a9aa55 65aaaa55 65a92a55     U..dU..eU..eU*.e
    4818:	aaaaaa55 aaaaaaa8 6aaaaaa8 69a9aa69     U..........ji..i
    4828:	69aaaa69 69a9aa69 69aaaa59 69aaaa59     i..ii..iY..iY..i
    4838:	69a9aa59 69a9aa69 65aaaa59 69a9aa55     Y..ii..iY..eU..i
    4848:	69a9aa55 69aaaa55 69aaaa55 65aa2a55     U..iU..iU..iU*.e
    4858:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    4868:	a9aaaa68 6aaaaa68 aaaaaa68 6aaaaa68     h...h..jh...h..j
    4878:	69a9aa68 69aaaa68 69aaaa58 69aaaa54     h..ih..iX..iT..i
    4888:	69a9aa54 69aaaa54 6aaaaa54 69aa2a54     T..iT..iT..jT*.i
    4898:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    48a8:	a9aaaaa8 aaaaaa68 aaaaaa68 aaaaaa68     ....h...h...h...
    48b8:	a9aaaa68 aaaaaa68 69aaaa68 69aaaa58     h...h...h..iX..i
    48c8:	69aaaa64 a9aaaa54 aaaaaa64 69aa2a64     d..iT...d...d*.i
    48d8:	aaaa9a59 aaaaaaaa aaaaaaaa aaaaaa6a     Y...........j...
    48e8:	aaaaaaaa aaaaaa6a aaaaaa6a aaaaaa6a     ....j...j...j...
    48f8:	aaaaaa6a aaaaaa6a 69aaaa6a 69aaaa6a     j...j...j..ij..i
    4908:	69aaaa6a a9aaaa6a aaaaaa6a aaaa2aa6     j..ij...j....*..
    4918:	aaaaaa68 aaaaaaaa aaaaaaaa aaaaaaaa     h...............
    4928:	aaaaaaaa aaaaaaaa aaaaaa6a aaaaaa6a     ........j...j...
    4938:	aaaaaaaa aaaaaa6a a9aaaaaa aaaaaa6a     ....j.......j...
    4948:	69aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ...ij........*..
    4958:	aaaa4aa8 aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    4968:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    4978:	aaaaaaaa aaaaaa6a aaaaaaaa aaaaaaaa     ....j...........
    4988:	a9aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ....j........*..
    4998:	aaaa4aaa aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    49a8:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    49b8:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    49c8:	aaaaaaaa aaaaaa6a aaaa9aaa aaaa1aaa     ....j...........
    49d8:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    49e8:	aaaa6aaa aaaaaaaa aaaaaaaa aaaaaaaa     .j..............
    49f8:	aaaa9aaa aaaa6aaa aaaa6aaa aaaa6aaa     .....j...j...j..
    4a08:	aaaa5aaa aaaaaaaa aaaaaaaa aaaa2aaa     .Z...........*..
    4a18:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    4a28:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa6aaa     .j...j...j...j..
    4a38:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa5aaa     .j...j...j...Z..
    4a48:	aaaa6aaa aaaa6aaa aaaa4aaa aaaa4aaa     .j...j...J...J..
    4a58:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa5aaa     .J...Z...Z...Z..
    4a68:	aaaa6aaa aaaa6aa6 aaaa6aaa aaaa5aaa     .j...j...j...Z..
    4a78:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa6aaa     .J...Z...Z...j..
    4a88:	aaaa49aa aaaa5aaa aa9a4aaa aaaa4aaa     .I...Z...J...J..
    4a98:	aaaa52aa aa2a6aa6 aaaa6aa6 aaaa6aa6     .R...j*..j...j..
    4aa8:	aaaa6aa6 aaa26aaa aa9a52aa aa2a62aa     .j...j...R...b*.
    4ab8:	aa9a4aaa aaa26aaa aa2a6aaa aaaa4aaa     .J...j...j*..J..
    4ac8:	aa2a4aaa aaaa62aa aa2a4aaa aa224aaa     .J*..b...J*..J".
    4ad8:	aaaa12a6 6a224aaa aaaa4aaa aaaa4aaa     .....J"j.J...J..
    4ae8:	aa225aaa aa225aa2 6aaa62aa aa2242aa     .Z"..Z"..b.j.B".
    4af8:	aaa242aa aaa242aa aa2042aa aaaa4aaa     .B...B...B ..J..
    4b08:	aa2a40aa 6aa242a6 6a0a4aaa aa124aaa     .@*..B.j.J.j.J..
    4b18:	aa5215aa aa1242a2 aa9a42a2 6a9a42a2     ..R..B...B...B.j
    4b28:	6a1262a2 aa1262a2 aa8842aa aa2042aa     .b.j.b...B...B .
    4b38:	aa0242aa 6a2242aa aa1042aa 6aaa4aa6     .B...B"j.B...J.j
    4b48:	6a1040a6 aa2242aa aa0a42a6 aa2042aa     .@.j.B"..B...B .
    4b58:	6a6216a2 2a6211a2 696a11a2 aa6211a2     ..bj..b*..ji..b.
    4b68:	a96211a2 6a6251a2 2a4851a6 6a5051a6     ..b..Qbj.QH*.QPj
    4b78:	6a4251a6 aa5051a6 696051a6 a95059aa     .QBj.QP..Q`i.YP.
    4b88:	a96050aa 2a5251a2 2a4a51aa 694051aa     .P`..QR*.QJ*.Q@i
    4b98:	aa5215a2 294216a2 aa4816a2 294216a2     ..R...B)..H...B)
    4ba8:	2a4016a2 a94216a2 294816aa a96016aa     ..@*..B...H)..`.
    4bb8:	aa4216aa 296016aa aa4016aa 2a6016a2     ..B...`)..@...`*
    4bc8:	2a401422 296056a2 294a56a2 aa405626     ".@*.V`).VJ)&V@.
    4bd8:	195555a2 1a5455a2 18545522 1a5455a2     .UU..UT."UT..UT.
    4be8:	185455a2 1a5455a2 1a5455a2 1a5455a2     .UT..UT..UT..UT.
    4bf8:	195455a2 1a5455a2 18545522 18545522     .UT..UT."UT."UT.
    4c08:	18545522 1a5455a2 1a545522 1854552a     "UT..UT."UT.*UT.
    4c18:	2a555522 28555526 28555526 285555a6     "UU*&UU(&UU(.UU(
    4c28:	28555526 28555526 285555a6 285555a6     &UU(&UU(.UU(.UU(
    4c38:	2a555526 285555a6 28555526 28555526     &UU*.UU(&UU(&UU(
    4c48:	28555526 28555526 28555526 28555526     &UU(&UU(&UU(&UU(
    4c58:	54555526 54555506 54555506 54555506     &UUT.UUT.UUT.UUT
    4c68:	54555506 54555526 54555526 54555526     .UUT&UUT&UUT&UUT
    4c78:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    4c88:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    4c98:	55555526 55555554 55555554 55555554     &UUUTUUUTUUUTUUU
    4ca8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    4cb8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    4cc8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    4cd8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    4ce8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    4cf8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    4d08:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    4d18:	aaaa5454 aaaa54a8 aaaa54a8 aaaa54a8     TT...T...T...T..
    4d28:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    4d38:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    4d48:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    4d58:	000050a8 00005008 00005008 00005008     .P...P...P...P..
    4d68:	00005008 00005008 00005008 00005008     .P...P...P...P..
    4d78:	00005008 00005008 00005008 00005008     .P...P...P...P..
    4d88:	00005008 00005008 00005008 00005008     .P...P...P...P..
    4d98:	00004008 00004008 00004008 00004008     .@...@...@...@..
    4da8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    4db8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    4dc8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    4dd8:	00000008 00000000 00000000 00000000     ................
	...

00004e1c <ArvoBold_18pt_CharCount>:
    4e1c:	12080805 0410150f 0e0c0808 09050906     ................
    4e2c:	0d0e0a0f 0e0e0e0e 05060d0e 0e0a0c0a     ................
    4e3c:	1210111b 130f1011 13080816 13141b10     ................
    4e4c:	0f121310 1c121211 080f1212 0c0e0709     ................
    4e5c:	0e0f0f09 0f090e10 11070910 0f111909     ................
    4e6c:	0d0d1010 160f1108 0b0d0f0e 000b0b07     ................

00004e7c <ArvoBold_18pt_Table>:
	...
    4e98:	03cfff00 03cfff00 03cfff00 00000000     ................
	...
    4eb4:	00003f00 00003f00 00001f00 00000000     .?...?..........
    4ec4:	00003f00 00003f00 00001f00 00700000     .?...?........p.
    4ed4:	03706000 03f07000 03fff000 00fffc00     .`p..p..........
    4ee4:	007fff00 00707f00 00707300 03707000     ......p..sp..pp.
    4ef4:	03f07000 03fe7000 01fff000 007ffc00     .p...p..........
    4f04:	0071ff00 00707f00 00307300 00007000     ..q...p..s0..p..
	...
    4f1c:	00f00000 00f3c000 00f7e000 01f7f000     ................
    4f2c:	01e77000 0fce7f00 0fce7f00 0fceff00     .p..............
    4f3c:	01ddf000 00fde000 00fde000 0079e000     ..............y.
	...
    4f5c:	00007c00 0000fe00 0201ff00 0301c700     .|..............
    4f6c:	03c1c700 01e1c700 00f9ff00 003cfe00     ..............<.
    4f7c:	001f7c00 00ff8000 01ffe000 03fef000     .|..............
    4f8c:	038e7c00 038e1e00 038e0f00 03fe0300     .|..............
    4f9c:	01fc0100 00f80000 00000000 00000000     ................
    4fac:	00780000 00fe7800 01fffe00 03c7fe00     ..x..x..........
    4fbc:	0383cf00 03878700 039f8700 03ffcf00     ................
    4fcc:	01fffe00 01fcfe00 00f8f800 01fe0000     ................
    4fdc:	03fe0000 03ce0000 01800000 00003f00     .............?..
    4fec:	00003f00 00000f00 00000000 00000000     .?..............
    4ffc:	01ff8000 0ffff000 3ffffc00 ff00fe00     ...........?....
    500c:	f8001f00 70000e00 00000000 00000000     .......p........
    501c:	70000e00 f8001f00 7f00fe00 3ffffc00     ...p...........?
    502c:	0ffff000 01ff8000 00000000 00000000     ................
    503c:	00000e00 0000ce00 0000fc00 0000ff80     ................
    504c:	00007f80 00007f80 0000fc00 0000fc00     ................
    505c:	0000ce00 00000e00 00000000 00000000     ................
    506c:	000e0000 000e0000 000e0000 000e0000     ................
    507c:	00ffe000 00ffe000 00ffe000 000e0000     ................
    508c:	000e0000 000e0000 000e0000 00000000     ................
    509c:	00000000 30000000 3f000000 1f800000     .......0...?....
    50ac:	07800000 00000000 00000000 00000000     ................
    50bc:	001c0000 001c0000 001c0000 001c0000     ................
    50cc:	001c0000 001c0000 001c0000 00000000     ................
    50dc:	00000000 03c00000 03c00000 03c00000     ................
	...
    50f4:	03000000 03e00000 03fc0000 01ff8000     ................
    5104:	003ff000 0007fe00 0000ff00 00001f00     ..?.............
    5114:	00000000 001fe000 007ff800 01fffe00     ................
    5124:	01e01e00 03c00f00 03800700 03800700     ................
    5134:	03800700 03c00f00 01e01e00 01fffe00     ................
    5144:	007ff800 001fe000 00000000 00007800     .............x..
    5154:	03807c00 03803e00 03fffe00 03ffff00     .|...>..........
    5164:	03ffff00 03800000 03800000 00000000     ................
	...
    517c:	03c03800 03e03c00 03f03e00 03f80f00     .8...<...>......
    518c:	03bc0700 039e0700 038f0700 03878700     ................
    519c:	0383cf00 0381fe00 0380fc00 03807800     .............x..
    51ac:	00000000 00601800 00e01c00 01e01e00     ......`.........
    51bc:	03c00f00 03800700 03838700 03838700     ................
    51cc:	03838700 01c7cf00 01fffe00 00fefc00     ................
    51dc:	007c7800 00000000 000f0000 000f8000     .x|.............
    51ec:	000fe000 000ef000 000e7c00 000e1e00     .........|......
    51fc:	038e0f00 038e0300 03ffc100 03ffc000     ................
    520c:	03ffc000 038e0000 038e0000 00000000     ................
	...
    5224:	00e1ff00 01e1ff00 01e1ff00 03c1c700     ................
    5234:	0381c700 0381c700 0381c700 03c3c700     ................
    5244:	01ff8700 00ff0700 007e0000 00000000     ..........~.....
    5254:	00000000 003c0000 00ff0000 01ffc000     ......<.........
    5264:	01c3f000 0381f800 0381fe00 0381cf00     ................
    5274:	0381c700 01c38100 01ff8000 00ff0000     ................
    5284:	003c0000 00000000 00003f00 00003f00     ..<......?...?..
    5294:	03803f00 03800700 03e00700 03f80700     .?..............
    52a4:	03ff0700 039fc700 0387f700 0000ff00     ................
    52b4:	00003f00 00000f00 00000300 00000000     .?..............
    52c4:	00000000 007c7800 00fefc00 01fffe00     .....x|.........
    52d4:	01c7cf00 03838700 03838700 03838700     ................
    52e4:	03838700 01c7cf00 01fffe00 00fefc00     ................
    52f4:	007c7800 00000000 00000000 0001f000     .x|.............
    5304:	0003fc00 0007fe00 030f0e00 03ce0700     ................
    5314:	03ee0700 03fe0700 00fe0700 003f0e00     ..............?.
    5324:	000ffe00 0003fc00 0000f800 00000000     ................
    5334:	03c3c000 03c3c000 03c3c000 00000000     ................
    5344:	00000000 3f000000 1f81e000 0781e000     .......?........
    5354:	0301e000 00000000 001e0000 001e0000     ................
    5364:	001f0000 003f0000 003f0000 00738000     ......?...?...s.
    5374:	00738000 00738000 00e1c000 00000000     ..s...s.........
    5384:	00000000 0039c000 0039c000 0039c000     ......9...9...9.
    5394:	0039c000 0039c000 0039c000 0039c000     ..9...9...9...9.
    53a4:	0039c000 0039c000 0039c000 00000000     ..9...9...9.....
    53b4:	00e1c000 00738000 00738000 00738000     ......s...s...s.
    53c4:	003f0000 003f0000 003f0000 001e0000     ..?...?...?.....
    53d4:	001e0000 001e0000 00000000 00001c00     ................
    53e4:	00001e00 00001e00 03dc0f00 03df0700     ................
    53f4:	03df0700 00038700 0001c700 0001fe00     ................
    5404:	0000fe00 00007800 00000000 00000000     .....x..........
	...
    541c:	00ff0000 03ffc000 07ffe000 1f81f800     ................
    542c:	3e007c00 3c3c3c00 78ff1e00 71ff8e00     .|.>.<<<...x...q
    543c:	f1c38f00 e381c700 e381c700 e381c700     ................
    544c:	e381c700 e1c3c700 f1ffcf00 73ffce00     ...............s
    545c:	73ffde00 03801c00 03803c00 03c0f800     ...s.....<......
	...
    5480:	03800000 03c00000 03f80000 03ff0000     ................
    5490:	03bfe000 038ff800 000eff00 000e1f00     ................
    54a0:	000e0700 000e7f00 038fff00 039ff800     ................
    54b0:	03ff8000 03fc0000 03e00000 03800000     ................
	...
    54c8:	03800700 03800700 03ffff00 03ffff00     ................
    54d8:	03ffff00 03838700 03838700 03838700     ................
    54e8:	03838700 03838700 03c7cf00 01fffe00     ................
    54f8:	00fffc00 007cf800 00000000 00000000     ......|.........
    5508:	000fc000 003ff000 007ffc00 00f03e00     ......?......>..
    5518:	01e01e00 01c00f00 03800700 03800700     ................
    5528:	03800700 03800700 03c00f00 01e01e00     ................
    5538:	01f03c00 00f03800 00703800 00303800     .<...8...8p..80.
    5548:	00000000 03800700 03800700 03ffff00     ................
    5558:	03ffff00 03ffff00 03800700 03800700     ................
    5568:	03800700 03800700 03c00f00 01c00e00     ................
    5578:	01e01e00 00f87c00 007ff800 003ff000     .....|........?.
    5588:	000fc000 00000000 00000000 03800700     ................
    5598:	03800700 03ffff00 03ffff00 03ffff00     ................
    55a8:	03838700 03838700 03838700 03838700     ................
    55b8:	03838700 03800700 03f03f00 03f03f00     .........?...?..
    55c8:	03f03f00 00000000 00000000 03800700     .?..............
    55d8:	03800700 03ffff00 03ffff00 03ffff00     ................
    55e8:	03838700 03838700 00038700 00038700     ................
    55f8:	00038700 00000700 00001f00 00001f00     ................
    5608:	00001f00 00000000 000fc000 003ff000     ..............?.
    5618:	00fff800 00f07c00 01e01e00 01c00e00     .....|..........
    5628:	03800700 03800700 03800700 03870700     ................
    5638:	03870700 03c70e00 01e71e00 01f73c00     .............<..
    5648:	00ff3800 03ff3800 03ff3800 00000000     .8...8...8......
    5658:	00000000 03800700 03800700 03ffff00     ................
    5668:	03ffff00 03ffff00 03838700 03838700     ................
    5678:	00038000 00038000 00038000 00038000     ................
    5688:	00038000 00038000 03838700 03838700     ................
    5698:	03ffff00 03ffff00 03ffff00 03800700     ................
    56a8:	03800700 00000000 00000000 03800700     ................
    56b8:	03800700 03ffff00 03ffff00 03ffff00     ................
    56c8:	03800700 03800700 00000000 0c000700     ................
    56d8:	0f000700 0fffff00 07ffff00 01ffff00     ................
    56e8:	00000700 00000700 00000000 03800700     ................
    56f8:	03800700 03ffff00 03ffff00 03ffff00     ................
    5708:	03820700 03830700 00078000 000fc000     ................
    5718:	001ce000 00387000 00383800 03f03f00     .....p8..88..?..
    5728:	03e01f00 03c00f00 03800700 03800700     ................
    5738:	00000700 00000000 03800700 03800700     ................
    5748:	03ffff00 03ffff00 03ffff00 03800700     ................
    5758:	03800700 03800000 03800000 03800000     ................
    5768:	03800000 03f80000 03f80000 03f80000     ................
	...
    5780:	03800700 03800700 03ffff00 03ffff00     ................
    5790:	03ffff00 03803f00 0000fc00 0003f800     .....?..........
    57a0:	0007e000 001f8000 007e0000 01f80000     ..........~.....
    57b0:	03e00000 03f80000 01fe0000 003f8000     ..............?.
    57c0:	000fe000 0003f800 0000fe00 03803f00     .............?..
    57d0:	03ffff00 03ffff00 03ffff00 03800700     ................
    57e0:	03800700 00000000 00000000 03800700     ................
    57f0:	03800700 03ffff00 03ffff00 03fffe00     ................
    5800:	0380fc00 0381f000 0007e000 000f8000     ................
    5810:	003f0000 007c0000 01f00700 03e00700     ..?...|.........
    5820:	03ffff00 03ffff00 03ffff00 00000700     ................
    5830:	00000700 00000000 00000000 000fc000     ................
    5840:	003ff000 007ff800 00f03c00 01e01e00     ..?......<......
    5850:	01c00e00 03800700 03800700 03800700     ................
    5860:	03800700 03800700 01c00e00 01e01e00     ................
    5870:	00f03c00 007ff800 003ff000 000fc000     .<........?.....
	...
    5888:	03800700 03800700 03ffff00 03ffff00     ................
    5898:	03ffff00 03870700 03870700 00070700     ................
    58a8:	00070700 00070700 00078f00 0003fe00     ................
    58b8:	0001fc00 0000f800 00000000 00000000     ................
    58c8:	000fc000 003ff000 00fff800 00f03c00     ......?......<..
    58d8:	01e01e00 03c00e00 03800700 3f800700     ...............?
    58e8:	3f800700 3f800700 7b800700 f3c00e00     ...?...?...{....
    58f8:	e1e01e00 e0f03c00 f0fff800 703ff000     .....<........?p
    5908:	700fc000 00000000 00000000 03800700     ...p............
    5918:	03800700 03ffff00 03ffff00 03ffff00     ................
    5928:	03870700 03870700 00070700 00070700     ................
    5938:	00070700 000f0700 00ff0700 03ff8f00     ................
    5948:	03f9fe00 03e1fc00 03807800 00000000     .........x......
    5958:	00000000 00787800 00f9fc00 01f9fe00     .....xx.........
    5968:	01c3cf00 0383c700 03878700 03878700     ................
    5978:	03878700 03870700 01cf0e00 01ff3e00     .............>..
    5988:	00fe3c00 007c3800 00000000 00003f00     .<...8|......?..
    5998:	00003f00 00003f00 00000700 03800700     .?...?..........
    59a8:	03800700 03ffff00 03ffff00 03ffff00     ................
    59b8:	03800700 03800700 00000700 00000700     ................
    59c8:	00003f00 00003f00 00003f00 00000000     .?...?...?......
    59d8:	00000700 00000700 001fff00 007fff00     ................
    59e8:	00ffff00 01e00700 03c00700 03800000     ................
    59f8:	03800000 03800000 03800000 03c00700     ................
    5a08:	01e00700 00ffff00 007fff00 001fff00     ................
    5a18:	00000700 00000700 00000700 00000700     ................
    5a28:	00000f00 00007f00 0003ff00 000ff700     ................
    5a38:	007f8700 01fe0000 03f00000 03f00000     ................
    5a48:	03fe0000 007f8700 000ff700 0003ff00     ................
    5a58:	00007f00 00000f00 00000700 00000700     ................
    5a68:	00000700 00000700 00000f00 00007f00     ................
    5a78:	0003ff00 000ff700 007fc700 01fe0000     ................
    5a88:	03f80000 03e00000 03fe0000 01ffe000     ................
    5a98:	001ffe00 0000ff00 0000ff00 0007fc00     ................
    5aa8:	003fe000 01ff0000 03f80000 03f00000     ..?.............
    5ab8:	01fe0000 007f8700 001ff700 0003ff00     ................
    5ac8:	00007f00 00000f00 00000700 00000700     ................
    5ad8:	03800700 03c00f00 03e01f00 03f03f00     .............?..
    5ae8:	03f87f00 03bcf700 001fe000 000fc000     ................
    5af8:	000fc000 001fe000 03bcf700 03f87f00     ................
    5b08:	03f03f00 03e01f00 03c00f00 03800700     .?..............
	...
    5b20:	00000700 00000700 00000f00 00001f00     ................
    5b30:	00003f00 03807f00 0380f700 03ffc000     .?..............
    5b40:	03ff8000 03ffc000 0380e000 03807700     .............w..
    5b50:	00003f00 00001f00 00000f00 00000700     .?..............
    5b60:	00000700 00000000 00000000 03e07f00     ................
    5b70:	03f07f00 03f87f00 03de0700 038f0700     ................
    5b80:	0387c700 0381e700 0380f700 03803f00     .............?..
    5b90:	03801f00 03f00f00 03f00f00 03f00700     ................
	...
    5ba8:	ffffffe0 ffffffe0 ffffffe0 e00000e0     ................
    5bb8:	e00000e0 00000000 00000000 00000100     ................
    5bc8:	00000f00 00007f00 0001fe00 000ff800     ................
    5bd8:	007fc000 01fe0000 03f00000 03c00000     ................
    5be8:	00000000 e00000e0 e00000e0 ffffffe0     ................
    5bf8:	ffffffe0 ffffffe0 00000000 00000000     ................
    5c08:	00010000 0001c000 0001f000 0001fc00     ................
    5c18:	00003f00 00000f00 00000f00 00003f00     .?...........?..
    5c28:	0000fe00 0001f800 0001c000 00010000     ................
    5c38:	00000000 38000000 38000000 38000000     .......8...8...8
    5c48:	38000000 38000000 38000000 38000000     ...8...8...8...8
    5c58:	38000000 38000000 38000000 38000000     ...8...8...8...8
    5c68:	38000000 00000000 00000000 00000100     ...8............
    5c78:	00000300 00000700 00000f00 00000e00     ................
    5c88:	00000800 00000000 00000000 00e00000     ................
    5c98:	01f18000 03f98000 0399c000 0399c000     ................
    5ca8:	0399c000 0399c000 039bc000 03ffc000     ................
    5cb8:	03ff8000 03ff0000 03800000 03800000     ................
    5cc8:	00000000 00000700 00000700 03ffff00     ................
    5cd8:	03ffff00 03ffff00 03c3c000 0381c000     ................
    5ce8:	0381c000 0381c000 0381c000 01c38000     ................
    5cf8:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
    5d08:	00000000 003e0000 00ff0000 01ff8000     ......>.........
    5d18:	01c38000 0381c000 0381c000 0381c000     ................
    5d28:	0381c000 03c3c000 01e38000 00e38000     ................
    5d38:	00638000 00000000 00000000 003c0000     ..c...........<.
    5d48:	00ff0000 01ff8000 03c38000 0381c000     ................
    5d58:	0381c000 0381c000 0381c700 03c3c700     ................
    5d68:	03ffff00 03ffff00 03ffff00 03800000     ................
    5d78:	03800000 00000000 00000000 003c0000     ..............<.
    5d88:	00ff0000 01ff8000 01d98000 0399c000     ................
    5d98:	0399c000 0399c000 0399c000 0399c000     ................
    5da8:	039f8000 019f0000 001e0000 00000000     ................
    5db8:	00000000 0381c000 0381c000 03fffc00     ................
    5dc8:	03fffe00 03ffff00 0381c700 0381c700     ................
    5dd8:	00000700 00000000 003c0000 60ff0000     ..........<....`
    5de8:	71ff8000 f1c38000 e381c000 e381c000     ...q............
    5df8:	e381c000 e381c000 f3c3c000 7fffc000     ................
    5e08:	3fffc000 1fffc000 00000000 00000000     ...?............
    5e18:	00000000 03800700 03800700 03ffff00     ................
    5e28:	03ffff00 03ffff00 03838000 0381c000     ................
    5e38:	0001c000 0001c000 0003c000 03ffc000     ................
    5e48:	03ff8000 03ff0000 03800000 03800000     ................
    5e58:	00000000 0381c000 0381c600 03ffcf00     ................
    5e68:	03ffcf00 03ffcf00 03800600 03800000     ................
    5e78:	00000000 e001c000 e001c000 ffffc600     ................
    5e88:	7fffcf00 3fffcf00 00000f00 00000600     .......?........
    5e98:	00000000 03800700 03800700 03ffff00     ................
    5ea8:	03ffff00 03ffff00 039c0000 039c0000     ................
    5eb8:	003c0000 007f0000 00ff8000 01e7c000     ..<.............
    5ec8:	03c3c000 03c1c000 03c1c000 00000000     ................
	...
    5ee0:	03800700 03800700 03ffff00 03ffff00     ................
    5ef0:	03ffff00 03800000 03800000 00000000     ................
    5f00:	00000000 0381c000 0381c000 03ffc000     ................
    5f10:	03ffc000 03ffc000 03838000 0381c000     ................
    5f20:	0001c000 0001c000 0003c000 03ffc000     ................
    5f30:	03ff8000 03ff0000 03838000 0381c000     ................
    5f40:	0001c000 0001c000 0003c000 03ffc000     ................
    5f50:	03ff8000 03ff0000 03800000 03800000     ................
    5f60:	00000000 0381c000 0381c000 03ffc000     ................
    5f70:	03ffc000 03ffc000 03838000 0381c000     ................
    5f80:	0001c000 0001c000 0001c000 0003c000     ................
    5f90:	03ffc000 03ff8000 03ff0000 03800000     ................
    5fa0:	03800000 00000000 003c0000 00ff0000     ..........<.....
    5fb0:	01ff8000 01c38000 03c1c000 0381c000     ................
    5fc0:	0381c000 0381c000 0381c000 01c38000     ................
    5fd0:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
	...
    5fe8:	e001c000 e001c000 ffffc000 ffffc000     ................
    5ff8:	ffffc000 e3c3c000 e381c000 0381c000     ................
    6008:	0381c000 0381c000 01c38000 01ff8000     ................
    6018:	00ff0000 003c0000 00000000 00000000     ......<.........
    6028:	003c0000 00ff0000 01ff8000 01c38000     ..<.............
    6038:	03c3c000 0381c000 0381c000 0381c000     ................
    6048:	e381c000 e3c3c000 ffffc000 ffffc000     ................
    6058:	ffffc000 e0000000 e0000000 00000000     ................
    6068:	0381c000 0381c000 03ffc000 03ffc000     ................
    6078:	03ffc000 03838000 0381c000 0001c000     ................
    6088:	0003c000 0003c000 0003c000 00000000     ................
    6098:	00000000 01c70000 01cf8000 01cfc000     ................
    60a8:	03ddc000 0399c000 0399c000 0399c000     ................
    60b8:	03bbc000 01fb8000 01f38000 00e38000     ................
    60c8:	00000000 0001c000 0001c000 01fff800     ................
    60d8:	03fffc00 03fffc00 0381c000 0381c000     ................
    60e8:	01800000 0001c000 0001c000 007fc000     ................
    60f8:	01ffc000 01ffc000 03c00000 03800000     ................
    6108:	03800000 03800000 0381c000 01c1c000     ................
    6118:	03ffc000 03ffc000 03ffc000 03800000     ................
    6128:	03800000 00000000 0001c000 0001c000     ................
    6138:	0003c000 000fc000 003fc000 00fdc000     ..........?.....
    6148:	03f1c000 03c00000 03f00000 01fdc000     ................
    6158:	007fc000 000fc000 0003c000 0001c000     ................
    6168:	0001c000 0001c000 0001c000 0007c000     ................
    6178:	001fc000 00ffc000 03fdc000 03e1c000     ................
    6188:	03f80000 01ff8000 003fc000 0007c000     ..........?.....
    6198:	000fc000 007fc000 03fe0000 03f00000     ................
    61a8:	03e1c000 03fdc000 00ffc000 001fc000     ................
    61b8:	0003c000 0001c000 0001c000 0381c000     ................
    61c8:	0381c000 03c1c000 03e3c000 03f7c000     ................
    61d8:	03ffc000 003c0000 003c0000 03ffc000     ......<...<.....
    61e8:	03ffc000 03e7c000 03c3c000 0381c000     ................
    61f8:	0381c000 0001c000 0001c000 0003c000     ................
    6208:	e00fc000 e03fc000 f0fdc000 fff00000     ......?.........
    6218:	ffc00000 eff00000 e3fdc000 007fc000     ................
    6228:	001fc000 0003c000 0001c000 0001c000     ................
    6238:	00000000 0387c000 03c7c000 03f7c000     ................
    6248:	03f9c000 03fdc000 039fc000 038fc000     ................
    6258:	03e3c000 03e1c000 03e04000 00000000     .........@......
	...
    6270:	00070000 00070000 00070000 1fffffc0     ................
    6280:	3fffffe0 3ffdffe0 380000e0 380000e0     ...?...?...8...8
	...
    629c:	ffffffe0 ffffffe0 ffffffe0 00000000     ................
	...
    62b4:	380000e0 380000e0 3ffdffe0 3fffffe0     ...8...8...?...?
    62c4:	1fffffc0 00070000 00070000 00070000     ................
	...
    62e0:	00070000 00078000 0001c000 0001c000     ................
    62f0:	0003c000 00038000 00078000 00070000     ................
    6300:	00070000 0003c000 0001c000 75647241     ............Ardu
    6310:	206f6e69 006f6e55                       ino Uno.

00006318 <__sf_fake_stderr>:
	...

00006338 <__sf_fake_stdin>:
	...

00006358 <__sf_fake_stdout>:
	...

00006378 <_init>:
    6378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    637e:	bc08      	pop	{r3}
    6380:	469e      	mov	lr, r3
    6382:	4770      	bx	lr

00006384 <__init_array_start>:
    6384:	000000dd 	.word	0x000000dd

00006388 <_fini>:
    6388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    638e:	bc08      	pop	{r3}
    6390:	469e      	mov	lr, r3
    6392:	4770      	bx	lr

00006394 <__fini_array_start>:
    6394:	000000b5 	.word	0x000000b5
