
samd21_ed013tc1__4_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000087c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  0001087c  2**0
                  CONTENTS
  2 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002000  20000020  20000020  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001087c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000108a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016982  00000000  00000000  000108fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019fb  00000000  00000000  0002727f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b98d  00000000  00000000  00028c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000508  00000000  00000000  00034607  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006a0  00000000  00000000  00034b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000464a  00000000  00000000  000351af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008fdb  00000000  00000000  000397f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000849aa  00000000  00000000  000427d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000f1c  00000000  00000000  000c7180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	20 20 00 20 19 01 00 00 15 01 00 00 15 01 00 00       . ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	0000087c 	.word	0x0000087c

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000004 	.word	0x20000004
 108:	0000087c 	.word	0x0000087c
 10c:	0000087c 	.word	0x0000087c
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
 11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
 11e:	429a      	cmp	r2, r3
 120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 122:	001a      	movs	r2, r3
 124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
 126:	429a      	cmp	r2, r3
 128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
 12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
 12c:	3303      	adds	r3, #3
 12e:	1a9b      	subs	r3, r3, r2
 130:	089b      	lsrs	r3, r3, #2
 132:	3301      	adds	r3, #1
 134:	009b      	lsls	r3, r3, #2
 136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
 13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
 13c:	588c      	ldr	r4, [r1, r2]
 13e:	5084      	str	r4, [r0, r2]
 140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 142:	429a      	cmp	r2, r3
 144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
 14a:	429a      	cmp	r2, r3
 14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
 14e:	43d3      	mvns	r3, r2
 150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
 152:	185b      	adds	r3, r3, r1
 154:	2103      	movs	r1, #3
 156:	438b      	bics	r3, r1
 158:	3304      	adds	r3, #4
 15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 15c:	2100      	movs	r1, #0
 15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 160:	4293      	cmp	r3, r2
 162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
 166:	21ff      	movs	r1, #255	; 0xff
 168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
 16a:	438b      	bics	r3, r1
 16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 16e:	39fd      	subs	r1, #253	; 0xfd
 170:	2390      	movs	r3, #144	; 0x90
 172:	005b      	lsls	r3, r3, #1
 174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
 176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
 17a:	78d3      	ldrb	r3, [r2, #3]
 17c:	2503      	movs	r5, #3
 17e:	43ab      	bics	r3, r5
 180:	2402      	movs	r4, #2
 182:	4323      	orrs	r3, r4
 184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	270c      	movs	r7, #12
 18a:	43bb      	bics	r3, r7
 18c:	2608      	movs	r6, #8
 18e:	4333      	orrs	r3, r6
 190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
 194:	7b98      	ldrb	r0, [r3, #14]
 196:	2230      	movs	r2, #48	; 0x30
 198:	4390      	bics	r0, r2
 19a:	2220      	movs	r2, #32
 19c:	4310      	orrs	r0, r2
 19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1a0:	7b99      	ldrb	r1, [r3, #14]
 1a2:	43b9      	bics	r1, r7
 1a4:	4331      	orrs	r1, r6
 1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1a8:	7b9a      	ldrb	r2, [r3, #14]
 1aa:	43aa      	bics	r2, r5
 1ac:	4322      	orrs	r2, r4
 1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
 1b2:	6853      	ldr	r3, [r2, #4]
 1b4:	2180      	movs	r1, #128	; 0x80
 1b6:	430b      	orrs	r3, r1
 1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
 1bc:	4798      	blx	r3
        main();
 1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
 1c0:	4798      	blx	r3
 1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
 1c4:	0000087c 	.word	0x0000087c
 1c8:	20000000 	.word	0x20000000
 1cc:	20000000 	.word	0x20000000
 1d0:	20000004 	.word	0x20000004
 1d4:	20000000 	.word	0x20000000
 1d8:	20000020 	.word	0x20000020
 1dc:	e000ed00 	.word	0xe000ed00
 1e0:	00000000 	.word	0x00000000
 1e4:	41007000 	.word	0x41007000
 1e8:	41005000 	.word	0x41005000
 1ec:	41004800 	.word	0x41004800
 1f0:	41004000 	.word	0x41004000
 1f4:	00000815 	.word	0x00000815
 1f8:	000006b9 	.word	0x000006b9

000001fc <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
 1fc:	b510      	push	{r4, lr}
	delay_init(SysTick);
 1fe:	4802      	ldr	r0, [pc, #8]	; (208 <delay_driver_init+0xc>)
 200:	4b02      	ldr	r3, [pc, #8]	; (20c <delay_driver_init+0x10>)
 202:	4798      	blx	r3
}
 204:	bd10      	pop	{r4, pc}
 206:	46c0      	nop			; (mov r8, r8)
 208:	e000e010 	.word	0xe000e010
 20c:	00000345 	.word	0x00000345

00000210 <system_init>:

void system_init(void)
{
 210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 212:	46de      	mov	lr, fp
 214:	4657      	mov	r7, sl
 216:	464e      	mov	r6, r9
 218:	4645      	mov	r5, r8
 21a:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 21c:	4b39      	ldr	r3, [pc, #228]	; (304 <system_init+0xf4>)
 21e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 220:	22c0      	movs	r2, #192	; 0xc0
 222:	05d2      	lsls	r2, r2, #23
 224:	2310      	movs	r3, #16
 226:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 228:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 22a:	4b37      	ldr	r3, [pc, #220]	; (308 <system_init+0xf8>)
 22c:	4937      	ldr	r1, [pc, #220]	; (30c <system_init+0xfc>)
 22e:	6299      	str	r1, [r3, #40]	; 0x28
 230:	24c0      	movs	r4, #192	; 0xc0
 232:	0624      	lsls	r4, r4, #24
 234:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 236:	2544      	movs	r5, #68	; 0x44
 238:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 23a:	2101      	movs	r1, #1
 23c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 23e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 240:	2020      	movs	r0, #32
 242:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 244:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 246:	4832      	ldr	r0, [pc, #200]	; (310 <system_init+0x100>)
 248:	6298      	str	r0, [r3, #40]	; 0x28
 24a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 24c:	3501      	adds	r5, #1
 24e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 250:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 252:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 254:	2040      	movs	r0, #64	; 0x40
 256:	4684      	mov	ip, r0
 258:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 25a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 25c:	482d      	ldr	r0, [pc, #180]	; (314 <system_init+0x104>)
 25e:	4682      	mov	sl, r0
 260:	6298      	str	r0, [r3, #40]	; 0x28
 262:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 264:	3501      	adds	r5, #1
 266:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 268:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 26a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 26c:	2780      	movs	r7, #128	; 0x80
 26e:	6157      	str	r7, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 270:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 272:	4829      	ldr	r0, [pc, #164]	; (318 <system_init+0x108>)
 274:	4681      	mov	r9, r0
 276:	6298      	str	r0, [r3, #40]	; 0x28
 278:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 27a:	3501      	adds	r5, #1
 27c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 27e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 280:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 282:	2094      	movs	r0, #148	; 0x94
 284:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 286:	380c      	subs	r0, #12
 288:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 28a:	3020      	adds	r0, #32
 28c:	4d23      	ldr	r5, [pc, #140]	; (31c <system_init+0x10c>)
 28e:	501d      	str	r5, [r3, r0]
 290:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 292:	25c0      	movs	r5, #192	; 0xc0
 294:	46ab      	mov	fp, r5
 296:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 298:	438d      	bics	r5, r1
 29a:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 29c:	465d      	mov	r5, fp
 29e:	4646      	mov	r6, r8
 2a0:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 2a2:	4665      	mov	r5, ip
 2a4:	2694      	movs	r6, #148	; 0x94
 2a6:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2a8:	3e0c      	subs	r6, #12
 2aa:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2ac:	4655      	mov	r5, sl
 2ae:	501d      	str	r5, [r3, r0]
 2b0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2b2:	25c6      	movs	r5, #198	; 0xc6
 2b4:	46a8      	mov	r8, r5
 2b6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2b8:	438d      	bics	r5, r1
 2ba:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2bc:	4645      	mov	r5, r8
 2be:	4666      	mov	r6, ip
 2c0:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 2c2:	3d32      	subs	r5, #50	; 0x32
 2c4:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2c6:	3d0c      	subs	r5, #12
 2c8:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2ca:	464d      	mov	r5, r9
 2cc:	501d      	str	r5, [r3, r0]
 2ce:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2d0:	3747      	adds	r7, #71	; 0x47
 2d2:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2d4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2d6:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 2d8:	2480      	movs	r4, #128	; 0x80
 2da:	05e4      	lsls	r4, r4, #23
 2dc:	2594      	movs	r5, #148	; 0x94
 2de:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2e0:	3d0c      	subs	r5, #12
 2e2:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2e4:	501c      	str	r4, [r3, r0]
 2e6:	4a0e      	ldr	r2, [pc, #56]	; (320 <system_init+0x110>)
 2e8:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2ea:	3036      	adds	r0, #54	; 0x36
 2ec:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2ee:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2f0:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(EINK_X_LED_0_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(EINK_X_LED_0_PIN, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
 2f2:	4b0c      	ldr	r3, [pc, #48]	; (324 <system_init+0x114>)
 2f4:	4798      	blx	r3
}
 2f6:	bc3c      	pop	{r2, r3, r4, r5}
 2f8:	4690      	mov	r8, r2
 2fa:	4699      	mov	r9, r3
 2fc:	46a2      	mov	sl, r4
 2fe:	46ab      	mov	fp, r5
 300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 302:	46c0      	nop			; (mov r8, r8)
 304:	00000385 	.word	0x00000385
 308:	41004400 	.word	0x41004400
 30c:	40000010 	.word	0x40000010
 310:	40000020 	.word	0x40000020
 314:	40000040 	.word	0x40000040
 318:	40000080 	.word	0x40000080
 31c:	40000001 	.word	0x40000001
 320:	c0004000 	.word	0xc0004000
 324:	000001fd 	.word	0x000001fd

00000328 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 328:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
 32c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 32e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 330:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
 334:	4770      	bx	lr

00000336 <atomic_leave_critical>:
 336:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
 33a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 33c:	f383 8810 	msr	PRIMASK, r3
}
 340:	4770      	bx	lr
	...

00000344 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
 344:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
 346:	4b02      	ldr	r3, [pc, #8]	; (350 <delay_init+0xc>)
 348:	6018      	str	r0, [r3, #0]
 34a:	4b02      	ldr	r3, [pc, #8]	; (354 <delay_init+0x10>)
 34c:	4798      	blx	r3
}
 34e:	bd10      	pop	{r4, pc}
 350:	2000001c 	.word	0x2000001c
 354:	000004c5 	.word	0x000004c5

00000358 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 358:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 35a:	4b04      	ldr	r3, [pc, #16]	; (36c <delay_ms+0x14>)
 35c:	681c      	ldr	r4, [r3, #0]
 35e:	4b04      	ldr	r3, [pc, #16]	; (370 <delay_ms+0x18>)
 360:	4798      	blx	r3
 362:	0001      	movs	r1, r0
 364:	0020      	movs	r0, r4
 366:	4b03      	ldr	r3, [pc, #12]	; (374 <delay_ms+0x1c>)
 368:	4798      	blx	r3
}
 36a:	bd10      	pop	{r4, pc}
 36c:	2000001c 	.word	0x2000001c
 370:	00000379 	.word	0x00000379
 374:	000004d9 	.word	0x000004d9

00000378 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
 378:	4b01      	ldr	r3, [pc, #4]	; (380 <_get_cycles_for_ms+0x8>)
 37a:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 37c:	4770      	bx	lr
 37e:	46c0      	nop			; (mov r8, r8)
 380:	00005dc0 	.word	0x00005dc0

00000384 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 384:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <_init_chip+0x20>)
 388:	685a      	ldr	r2, [r3, #4]
 38a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
 38c:	4b06      	ldr	r3, [pc, #24]	; (3a8 <_init_chip+0x24>)
 38e:	4798      	blx	r3
	_sysctrl_init_sources();
 390:	4b06      	ldr	r3, [pc, #24]	; (3ac <_init_chip+0x28>)
 392:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
 394:	2008      	movs	r0, #8
 396:	4c06      	ldr	r4, [pc, #24]	; (3b0 <_init_chip+0x2c>)
 398:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
 39a:	4b06      	ldr	r3, [pc, #24]	; (3b4 <_init_chip+0x30>)
 39c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 39e:	20f7      	movs	r0, #247	; 0xf7
 3a0:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
 3a2:	bd10      	pop	{r4, pc}
 3a4:	41004000 	.word	0x41004000
 3a8:	000003f9 	.word	0x000003f9
 3ac:	00000419 	.word	0x00000419
 3b0:	000003b9 	.word	0x000003b9
 3b4:	0000044d 	.word	0x0000044d

000003b8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 3b8:	07c3      	lsls	r3, r0, #31
 3ba:	d509      	bpl.n	3d0 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
 3bc:	4b0b      	ldr	r3, [pc, #44]	; (3ec <_gclk_init_generators_by_fref+0x34>)
 3be:	2280      	movs	r2, #128	; 0x80
 3c0:	0092      	lsls	r2, r2, #2
 3c2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 3c4:	4a0a      	ldr	r2, [pc, #40]	; (3f0 <_gclk_init_generators_by_fref+0x38>)
 3c6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 3c8:	001a      	movs	r2, r3
 3ca:	7853      	ldrb	r3, [r2, #1]
 3cc:	09db      	lsrs	r3, r3, #7
 3ce:	d1fc      	bne.n	3ca <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
 3d0:	0703      	lsls	r3, r0, #28
 3d2:	d509      	bpl.n	3e8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
 3d4:	4b05      	ldr	r3, [pc, #20]	; (3ec <_gclk_init_generators_by_fref+0x34>)
 3d6:	2204      	movs	r2, #4
 3d8:	32ff      	adds	r2, #255	; 0xff
 3da:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 3dc:	4a05      	ldr	r2, [pc, #20]	; (3f4 <_gclk_init_generators_by_fref+0x3c>)
 3de:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 3e0:	001a      	movs	r2, r3
 3e2:	7853      	ldrb	r3, [r2, #1]
 3e4:	09db      	lsrs	r3, r3, #7
 3e6:	d1fc      	bne.n	3e2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
 3e8:	4770      	bx	lr
 3ea:	46c0      	nop			; (mov r8, r8)
 3ec:	40000c00 	.word	0x40000c00
 3f0:	00010700 	.word	0x00010700
 3f4:	00010403 	.word	0x00010403

000003f8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
 3f8:	4b06      	ldr	r3, [pc, #24]	; (414 <_pm_init+0x1c>)
 3fa:	7a1a      	ldrb	r2, [r3, #8]
 3fc:	b2d2      	uxtb	r2, r2
 3fe:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
 400:	7a5a      	ldrb	r2, [r3, #9]
 402:	b2d2      	uxtb	r2, r2
 404:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
 406:	7a9a      	ldrb	r2, [r3, #10]
 408:	b2d2      	uxtb	r2, r2
 40a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
 40c:	7ada      	ldrb	r2, [r3, #11]
 40e:	b2d2      	uxtb	r2, r2
 410:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
 412:	4770      	bx	lr
 414:	40000400 	.word	0x40000400

00000418 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
 418:	4a0b      	ldr	r2, [pc, #44]	; (448 <_sysctrl_init_sources+0x30>)
 41a:	6993      	ldr	r3, [r2, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
 41c:	21fe      	movs	r1, #254	; 0xfe
 41e:	03c9      	lsls	r1, r1, #15
 420:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
 422:	214e      	movs	r1, #78	; 0x4e
 424:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
 426:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
 428:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
 42a:	392f      	subs	r1, #47	; 0x2f
 42c:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
 42e:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
 430:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
 432:	2204      	movs	r2, #4
 434:	68cb      	ldr	r3, [r1, #12]
 436:	421a      	tst	r2, r3
 438:	d0fc      	beq.n	434 <_sysctrl_init_sources+0x1c>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
 43a:	4a03      	ldr	r2, [pc, #12]	; (448 <_sysctrl_init_sources+0x30>)
 43c:	6993      	ldr	r3, [r2, #24]
 43e:	2180      	movs	r1, #128	; 0x80
 440:	430b      	orrs	r3, r1
 442:	6193      	str	r3, [r2, #24]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
 444:	4770      	bx	lr
 446:	46c0      	nop			; (mov r8, r8)
 448:	40000800 	.word	0x40000800

0000044c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
 44c:	2202      	movs	r2, #2
 44e:	4b19      	ldr	r3, [pc, #100]	; (4b4 <_sysctrl_init_referenced_generators+0x68>)
 450:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
 452:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 454:	320e      	adds	r2, #14
 456:	68cb      	ldr	r3, [r1, #12]
 458:	421a      	tst	r2, r3
 45a:	d0fc      	beq.n	456 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
 45c:	4a16      	ldr	r2, [pc, #88]	; (4b8 <_sysctrl_init_referenced_generators+0x6c>)
 45e:	4b15      	ldr	r3, [pc, #84]	; (4b4 <_sysctrl_init_referenced_generators+0x68>)
 460:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
 462:	4b16      	ldr	r3, [pc, #88]	; (4bc <_sysctrl_init_referenced_generators+0x70>)
 464:	681b      	ldr	r3, [r3, #0]
 466:	0e9b      	lsrs	r3, r3, #26
 468:	2b3f      	cmp	r3, #63	; 0x3f
 46a:	d01a      	beq.n	4a2 <_sysctrl_init_referenced_generators+0x56>
 46c:	029b      	lsls	r3, r3, #10
 46e:	2280      	movs	r2, #128	; 0x80
 470:	0092      	lsls	r2, r2, #2
 472:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
 474:	4a0f      	ldr	r2, [pc, #60]	; (4b4 <_sysctrl_init_referenced_generators+0x68>)
 476:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
 478:	2302      	movs	r3, #2
 47a:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
 47c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
 47e:	075b      	lsls	r3, r3, #29
 480:	d512      	bpl.n	4a8 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
 482:	0011      	movs	r1, r2
	tmp &= mask;
 484:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
 486:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
 488:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
 48a:	2bd0      	cmp	r3, #208	; 0xd0
 48c:	d1fb      	bne.n	486 <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
 48e:	4a09      	ldr	r2, [pc, #36]	; (4b4 <_sysctrl_init_referenced_generators+0x68>)
 490:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 492:	2180      	movs	r1, #128	; 0x80
 494:	430b      	orrs	r3, r1
 496:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
 498:	4a09      	ldr	r2, [pc, #36]	; (4c0 <_sysctrl_init_referenced_generators+0x74>)
 49a:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
 49c:	09db      	lsrs	r3, r3, #7
 49e:	d1fc      	bne.n	49a <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
 4a0:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
 4a2:	23fc      	movs	r3, #252	; 0xfc
 4a4:	01db      	lsls	r3, r3, #7
 4a6:	e7e5      	b.n	474 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
 4a8:	4902      	ldr	r1, [pc, #8]	; (4b4 <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 4aa:	2210      	movs	r2, #16
 4ac:	68cb      	ldr	r3, [r1, #12]
 4ae:	421a      	tst	r2, r3
 4b0:	d0fc      	beq.n	4ac <_sysctrl_init_referenced_generators+0x60>
 4b2:	e7ec      	b.n	48e <_sysctrl_init_referenced_generators+0x42>
 4b4:	40000800 	.word	0x40000800
 4b8:	04010000 	.word	0x04010000
 4bc:	00806024 	.word	0x00806024
 4c0:	40000c00 	.word	0x40000c00

000004c4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
 4c4:	4b02      	ldr	r3, [pc, #8]	; (4d0 <_delay_init+0xc>)
 4c6:	4a03      	ldr	r2, [pc, #12]	; (4d4 <_delay_init+0x10>)
 4c8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
 4ca:	2205      	movs	r2, #5
 4cc:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
 4ce:	4770      	bx	lr
 4d0:	e000e010 	.word	0xe000e010
 4d4:	00ffffff 	.word	0x00ffffff

000004d8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
 4d8:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
 4da:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
 4dc:	1e5e      	subs	r6, r3, #1
 4de:	b2f6      	uxtb	r6, r6
 4e0:	2b00      	cmp	r3, #0
 4e2:	d013      	beq.n	50c <_delay_cycles+0x34>
 4e4:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
 4e6:	4a0e      	ldr	r2, [pc, #56]	; (520 <_delay_cycles+0x48>)
 4e8:	4d0e      	ldr	r5, [pc, #56]	; (524 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 4ea:	2080      	movs	r0, #128	; 0x80
 4ec:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
 4ee:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
 4f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 4f2:	6813      	ldr	r3, [r2, #0]
 4f4:	4203      	tst	r3, r0
 4f6:	d0fc      	beq.n	4f2 <_delay_cycles+0x1a>
	while (n--) {
 4f8:	3c01      	subs	r4, #1
 4fa:	b2e4      	uxtb	r4, r4
 4fc:	2cff      	cmp	r4, #255	; 0xff
 4fe:	d1f6      	bne.n	4ee <_delay_cycles+0x16>
 500:	0633      	lsls	r3, r6, #24
 502:	1af6      	subs	r6, r6, r3
 504:	4b08      	ldr	r3, [pc, #32]	; (528 <_delay_cycles+0x50>)
 506:	469c      	mov	ip, r3
 508:	4461      	add	r1, ip
 50a:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
 50c:	4b04      	ldr	r3, [pc, #16]	; (520 <_delay_cycles+0x48>)
 50e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
 510:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 512:	0019      	movs	r1, r3
 514:	2280      	movs	r2, #128	; 0x80
 516:	0252      	lsls	r2, r2, #9
 518:	680b      	ldr	r3, [r1, #0]
 51a:	4213      	tst	r3, r2
 51c:	d0fc      	beq.n	518 <_delay_cycles+0x40>
		;
}
 51e:	bd70      	pop	{r4, r5, r6, pc}
 520:	e000e010 	.word	0xe000e010
 524:	00ffffff 	.word	0x00ffffff
 528:	ff000001 	.word	0xff000001

0000052c <eink_interface_init>:
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
 52c:	b5f0      	push	{r4, r5, r6, r7, lr}
	CRITICAL_SECTION_ENTER();
 52e:	46c6      	mov	lr, r8
 530:	b500      	push	{lr}
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
 532:	22c0      	movs	r2, #192	; 0xc0
 534:	05d2      	lsls	r2, r2, #23
 536:	2788      	movs	r7, #136	; 0x88
 538:	2640      	movs	r6, #64	; 0x40
	return ((Port *)hw)->Group[submodule_index].IN.reg;
 53a:	51d6      	str	r6, [r2, r7]
 53c:	4b2a      	ldr	r3, [pc, #168]	; (5e8 <eink_interface_init+0xbc>)
 53e:	20a8      	movs	r0, #168	; 0xa8
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
 540:	4d2a      	ldr	r5, [pc, #168]	; (5ec <eink_interface_init+0xc0>)
 542:	501d      	str	r5, [r3, r0]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
 544:	24c0      	movs	r4, #192	; 0xc0
 546:	0624      	lsls	r4, r4, #24
 548:	501c      	str	r4, [r3, r0]
	CRITICAL_SECTION_LEAVE();
 54a:	2101      	movs	r1, #1
 54c:	51d1      	str	r1, [r2, r7]
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8151_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
 54e:	4f28      	ldr	r7, [pc, #160]	; (5f0 <eink_interface_init+0xc4>)
 550:	501f      	str	r7, [r3, r0]
    eink_data[0] = 0x3C;
    eink_write_data(UC8151_CDI, eink_data, 1);

    eink_write_data(UC8151_POF, 0, 0);
    uc8151_wait_for_busy();
}
 552:	501c      	str	r4, [r3, r0]
 554:	2720      	movs	r7, #32
 556:	46b8      	mov	r8, r7
 558:	6097      	str	r7, [r2, #8]
    eink_data[2] = eink_data[2] << 3;
 55a:	4f26      	ldr	r7, [pc, #152]	; (5f4 <eink_interface_init+0xc8>)
 55c:	629f      	str	r7, [r3, #40]	; 0x28
 55e:	629c      	str	r4, [r3, #40]	; 0x28
 560:	6096      	str	r6, [r2, #8]
        case MIN_OFF_TIME_400_NS:       eink_data[2] |= 0x02; break;
 562:	629d      	str	r5, [r3, #40]	; 0x28
 564:	629c      	str	r4, [r3, #40]	; 0x28
 566:	2510      	movs	r5, #16
 568:	46ac      	mov	ip, r5
 56a:	6095      	str	r5, [r2, #8]
    eink_data[2] = eink_data[2] << 3;
 56c:	4d22      	ldr	r5, [pc, #136]	; (5f8 <eink_interface_init+0xcc>)
 56e:	629d      	str	r5, [r3, #40]	; 0x28
 570:	629c      	str	r4, [r3, #40]	; 0x28
 572:	2580      	movs	r5, #128	; 0x80
        case MIN_OFF_TIME_540_NS:       eink_data[2] |= 0x03; break;
 574:	6095      	str	r5, [r2, #8]
 576:	4f21      	ldr	r7, [pc, #132]	; (5fc <eink_interface_init+0xd0>)
 578:	629f      	str	r7, [r3, #40]	; 0x28
 57a:	629c      	str	r4, [r3, #40]	; 0x28
 57c:	2494      	movs	r4, #148	; 0x94
    eink_data[2] = eink_data[2] << 3;
 57e:	5116      	str	r6, [r2, r4]
 580:	2798      	movs	r7, #152	; 0x98
 582:	51d1      	str	r1, [r2, r7]
 584:	4644      	mov	r4, r8
        case MIN_OFF_TIME_800_NS:       eink_data[2] |= 0x04; break;
 586:	6194      	str	r4, [r2, #24]
 588:	6196      	str	r6, [r2, #24]
 58a:	4664      	mov	r4, ip
 58c:	6154      	str	r4, [r2, #20]
 58e:	6155      	str	r5, [r2, #20]
    eink_data[2] = eink_data[2] << 3;
 590:	3474      	adds	r4, #116	; 0x74
 592:	5115      	str	r5, [r2, r4]
 594:	4e1a      	ldr	r6, [pc, #104]	; (600 <eink_interface_init+0xd4>)
 596:	501e      	str	r6, [r3, r0]
        case MIN_OFF_TIME_1540_NS:      eink_data[2] |= 0x05; break;
 598:	4e1a      	ldr	r6, [pc, #104]	; (604 <eink_interface_init+0xd8>)
 59a:	501e      	str	r6, [r3, r0]
 59c:	5115      	str	r5, [r2, r4]
 59e:	301f      	adds	r0, #31
 5a0:	5c1c      	ldrb	r4, [r3, r0]
    eink_data[2] = eink_data[2] << 3;
 5a2:	2604      	movs	r6, #4
 5a4:	4334      	orrs	r4, r6
 5a6:	541c      	strb	r4, [r3, r0]
 5a8:	51d5      	str	r5, [r2, r7]
        case MIN_OFF_TIME_3340_NS:      eink_data[2] |= 0x06; break;
 5aa:	24c6      	movs	r4, #198	; 0xc6
 5ac:	5d1a      	ldrb	r2, [r3, r4]
 5ae:	438a      	bics	r2, r1
 5b0:	551a      	strb	r2, [r3, r4]
 5b2:	3c06      	subs	r4, #6
    eink_data[2] = eink_data[2] << 3;
 5b4:	5d1a      	ldrb	r2, [r3, r4]
 5b6:	438a      	bics	r2, r1
 5b8:	551a      	strb	r2, [r3, r4]
 5ba:	3c7b      	subs	r4, #123	; 0x7b
        case MIN_OFF_TIME_6580_NS:      eink_data[2] |= 0x07; break;
 5bc:	5d1a      	ldrb	r2, [r3, r4]
 5be:	438a      	bics	r2, r1
 5c0:	551a      	strb	r2, [r3, r4]
 5c2:	3401      	adds	r4, #1
 5c4:	5d1a      	ldrb	r2, [r3, r4]
 5c6:	438a      	bics	r2, r1
 5c8:	551a      	strb	r2, [r3, r4]
 5ca:	3c02      	subs	r4, #2
 5cc:	5d1a      	ldrb	r2, [r3, r4]
 5ce:	438a      	bics	r2, r1
 5d0:	551a      	strb	r2, [r3, r4]
 5d2:	3403      	adds	r4, #3
 5d4:	5d1a      	ldrb	r2, [r3, r4]
 5d6:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 5d8:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 5da:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 5dc:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 5de:	541a      	strb	r2, [r3, r0]
#endif
    
#ifdef EINK_BUSY
    gpio_set_pin_function(EINK_BUSY, GPIO_PIN_FUNCTION_OFF);
#endif
}
 5e0:	bc04      	pop	{r2}
 5e2:	4690      	mov	r8, r2
 5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 5e6:	46c0      	nop			; (mov r8, r8)
 5e8:	41004400 	.word	0x41004400
 5ec:	40000040 	.word	0x40000040
 5f0:	40000001 	.word	0x40000001
 5f4:	40000020 	.word	0x40000020
 5f8:	40000010 	.word	0x40000010
 5fc:	40000080 	.word	0x40000080
 600:	40020080 	.word	0x40020080
 604:	c0020000 	.word	0xc0020000

00000608 <eink_send_raw_byte>:
 * \param send_byte Data byte to write.
 */
void eink_send_raw_byte(
        uint8_t send_byte,
        uint8_t f_send)
{    
 608:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;
    
#ifdef EINK_CSB 
    if(!f_send)
 60a:	2900      	cmp	r1, #0
 60c:	d103      	bne.n	616 <eink_send_raw_byte+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 60e:	2220      	movs	r2, #32
 610:	23c0      	movs	r3, #192	; 0xc0
 612:	05db      	lsls	r3, r3, #23
 614:	615a      	str	r2, [r3, #20]
{    
 616:	2308      	movs	r3, #8
 618:	22c0      	movs	r2, #192	; 0xc0
 61a:	05d2      	lsls	r2, r2, #23
 61c:	2610      	movs	r6, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 61e:	2480      	movs	r4, #128	; 0x80
 620:	e008      	b.n	634 <eink_send_raw_byte+0x2c>
 622:	6196      	str	r6, [r2, #24]
 624:	6194      	str	r4, [r2, #24]
            gpio_set_pin_level(EINK_SPI_SDA, 0);
        }
#endif
#ifdef EINK_SPI_SCL
        gpio_set_pin_level(EINK_SPI_SCL, 1);
        send_byte=send_byte << 1;
 626:	0040      	lsls	r0, r0, #1
 628:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 62a:	6154      	str	r4, [r2, #20]
 62c:	3b01      	subs	r3, #1
 62e:	b2db      	uxtb	r3, r3
    for (i=0;i<8;i++) {
 630:	2b00      	cmp	r3, #0
 632:	d004      	beq.n	63e <eink_send_raw_byte+0x36>
        if (send_byte & 0x80) {
 634:	b245      	sxtb	r5, r0
 636:	2d00      	cmp	r5, #0
 638:	dbf3      	blt.n	622 <eink_send_raw_byte+0x1a>
 63a:	6156      	str	r6, [r2, #20]
 63c:	e7f2      	b.n	624 <eink_send_raw_byte+0x1c>
        gpio_set_pin_level(EINK_SPI_SCL, 0);
#endif
    }
#ifdef EINK_CSB
    if(!f_send)
 63e:	2900      	cmp	r1, #0
 640:	d103      	bne.n	64a <eink_send_raw_byte+0x42>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 642:	2220      	movs	r2, #32
 644:	23c0      	movs	r3, #192	; 0xc0
 646:	05db      	lsls	r3, r3, #23
 648:	619a      	str	r2, [r3, #24]
        /* Set CSB HIGH to end communication to the display */
        gpio_set_pin_level(EINK_CSB, 1);
#endif
}
 64a:	bd70      	pop	{r4, r5, r6, pc}

0000064c <eink_write_data>:
{    
 64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 64e:	000c      	movs	r4, r1
 650:	0015      	movs	r5, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 652:	26c0      	movs	r6, #192	; 0xc0
 654:	05f6      	lsls	r6, r6, #23
 656:	2701      	movs	r7, #1
 658:	2394      	movs	r3, #148	; 0x94
 65a:	50f7      	str	r7, [r6, r3]
 65c:	3b74      	subs	r3, #116	; 0x74
 65e:	6173      	str	r3, [r6, #20]
    eink_send_raw_byte(command, f_send);
 660:	2100      	movs	r1, #0
 662:	4b07      	ldr	r3, [pc, #28]	; (680 <eink_write_data+0x34>)
 664:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 666:	2398      	movs	r3, #152	; 0x98
 668:	50f7      	str	r7, [r6, r3]
    if (data_bytes != 0) {
 66a:	2d00      	cmp	r5, #0
 66c:	d007      	beq.n	67e <eink_write_data+0x32>
 66e:	1965      	adds	r5, r4, r5
            eink_send_raw_byte(*data, f_send);
 670:	4e03      	ldr	r6, [pc, #12]	; (680 <eink_write_data+0x34>)
 672:	7820      	ldrb	r0, [r4, #0]
 674:	2100      	movs	r1, #0
 676:	47b0      	blx	r6
            data++;
 678:	3401      	adds	r4, #1
        for (i=0;i<data_bytes;i++) {
 67a:	42a5      	cmp	r5, r4
 67c:	d1f9      	bne.n	672 <eink_write_data+0x26>
}
 67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 680:	00000609 	.word	0x00000609

00000684 <uc8173_init>:
 *
 * Call this function to initialize the hardware interface and the UC8173 display
 * driver. When initialization is done the display is ready to receive data.
 */
void uc8173_init(void)
{
 684:	b570      	push	{r4, r5, r6, lr}
    /* Initialize delay routine */
    delay_init(SysTick);
 686:	4808      	ldr	r0, [pc, #32]	; (6a8 <uc8173_init+0x24>)
 688:	4b08      	ldr	r3, [pc, #32]	; (6ac <uc8173_init+0x28>)
 68a:	4798      	blx	r3

    /* Initialize the interface */
    eink_interface_init(0);
 68c:	2000      	movs	r0, #0
 68e:	4b08      	ldr	r3, [pc, #32]	; (6b0 <uc8173_init+0x2c>)
 690:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 692:	25c0      	movs	r5, #192	; 0xc0
 694:	05ed      	lsls	r5, r5, #23
 696:	2640      	movs	r6, #64	; 0x40
 698:	616e      	str	r6, [r5, #20]
 * This functions will reset the UC8173 by setting the reset pin LOW for 1ms.
 */
static inline void uc8173_hard_reset(void)
{
    gpio_set_pin_level(EINK_RST, 0);
    delay_ms(1);
 69a:	2001      	movs	r0, #1
 69c:	4c05      	ldr	r4, [pc, #20]	; (6b4 <uc8173_init+0x30>)
 69e:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 6a0:	61ae      	str	r6, [r5, #24]
    gpio_set_pin_level(EINK_RST, 1);
    delay_ms(1);
 6a2:	2001      	movs	r0, #1
 6a4:	47a0      	blx	r4
    /* Reset display */
    uc8173_hard_reset();
    
    /* Wait for BUSY output to return LOW */
    //uc8173_wait_for_busy_high();
 6a6:	bd70      	pop	{r4, r5, r6, pc}
 6a8:	e000e010 	.word	0xe000e010
 6ac:	00000345 	.word	0x00000345
 6b0:	0000052d 	.word	0x0000052d
 6b4:	00000359 	.word	0x00000359

000006b8 <main>:
//Function prototypes
void eink_init_display();
void eink_draw_display(uint8_t display_no);

int main (void)
{
 6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 6ba:	b085      	sub	sp, #20
	uint8_t eink_data[7];
	
	system_init();
 6bc:	4b4f      	ldr	r3, [pc, #316]	; (7fc <main+0x144>)
 6be:	4798      	blx	r3

	uc8173_init();
 6c0:	4b4f      	ldr	r3, [pc, #316]	; (800 <main+0x148>)
 6c2:	4798      	blx	r3
	
	eink_data[0] = 0x17;
 6c4:	ac02      	add	r4, sp, #8
 6c6:	2317      	movs	r3, #23
 6c8:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x97;
 6ca:	3380      	adds	r3, #128	; 0x80
 6cc:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x20;
 6ce:	3b77      	subs	r3, #119	; 0x77
 6d0:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_BTST, eink_data, 3);
 6d2:	2203      	movs	r2, #3
 6d4:	0021      	movs	r1, r4
 6d6:	2006      	movs	r0, #6
 6d8:	4d4a      	ldr	r5, [pc, #296]	; (804 <main+0x14c>)
 6da:	47a8      	blx	r5
	
	eink_data[0] = 0x03;
 6dc:	2303      	movs	r3, #3
 6de:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x01;
 6e0:	3b02      	subs	r3, #2
 6e2:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x2B;
 6e4:	332a      	adds	r3, #42	; 0x2a
 6e6:	70a3      	strb	r3, [r4, #2]
	eink_data[3] = 0x2B;
 6e8:	70e3      	strb	r3, [r4, #3]
	eink_data[4] = 0x00;
 6ea:	2300      	movs	r3, #0
 6ec:	7123      	strb	r3, [r4, #4]
	eink_write_data(UC8173_PWR, eink_data, 5);
 6ee:	2205      	movs	r2, #5
 6f0:	0021      	movs	r1, r4
 6f2:	2001      	movs	r0, #1
 6f4:	47a8      	blx	r5
	   
	
	eink_write_data(UC8173_PON, 0, 0);
 6f6:	2200      	movs	r2, #0
 6f8:	2100      	movs	r1, #0
 6fa:	2004      	movs	r0, #4
 6fc:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
 6fe:	4f42      	ldr	r7, [pc, #264]	; (808 <main+0x150>)
	CRITICAL_SECTION_LEAVE();
 700:	4e42      	ldr	r6, [pc, #264]	; (80c <main+0x154>)
	CRITICAL_SECTION_ENTER();
 702:	4668      	mov	r0, sp
 704:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
 706:	23c0      	movs	r3, #192	; 0xc0
 708:	05db      	lsls	r3, r3, #23
 70a:	2580      	movs	r5, #128	; 0x80
 70c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
 70e:	22a0      	movs	r2, #160	; 0xa0
 710:	493f      	ldr	r1, [pc, #252]	; (810 <main+0x158>)
 712:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
 714:	2190      	movs	r1, #144	; 0x90
 716:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
 718:	4053      	eors	r3, r2
 71a:	401c      	ands	r4, r3
 71c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
 71e:	4668      	mov	r0, sp
 720:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8173_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
 722:	4225      	tst	r5, r4
 724:	d0ed      	beq.n	702 <main+0x4a>
	uc8173_wait_for_busy_low();
	
	
	eink_data[0] = 0x0B;
 726:	ac02      	add	r4, sp, #8
 728:	230b      	movs	r3, #11
 72a:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x86;
 72c:	337b      	adds	r3, #123	; 0x7b
 72e:	7063      	strb	r3, [r4, #1]
	eink_write_data(UC8173_PSR, eink_data, 2);
 730:	2202      	movs	r2, #2
 732:	0021      	movs	r1, r4
 734:	2000      	movs	r0, #0
 736:	4d33      	ldr	r5, [pc, #204]	; (804 <main+0x14c>)
 738:	47a8      	blx	r5


	eink_data[0] = 0x00;
 73a:	2600      	movs	r6, #0
 73c:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_PFS, eink_data, 1);
 73e:	2201      	movs	r2, #1
 740:	0021      	movs	r1, r4
 742:	2003      	movs	r0, #3
 744:	47a8      	blx	r5
	
	
	eink_data[0] = 0x25;
 746:	2325      	movs	r3, #37	; 0x25
 748:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_LPRD, eink_data, 1);
 74a:	2201      	movs	r2, #1
 74c:	0021      	movs	r1, r4
 74e:	2030      	movs	r0, #48	; 0x30
 750:	47a8      	blx	r5

	eink_data[0] = 0x00;
 752:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_TSE, eink_data, 1);
 754:	2201      	movs	r2, #1
 756:	0021      	movs	r1, r4
 758:	2041      	movs	r0, #65	; 0x41
 75a:	47a8      	blx	r5


	eink_data[0] = 0xE1;
 75c:	23e1      	movs	r3, #225	; 0xe1
 75e:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x20;
 760:	3bc1      	subs	r3, #193	; 0xc1
 762:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x10;
 764:	3b10      	subs	r3, #16
 766:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_CDI, eink_data, 3);
 768:	2203      	movs	r2, #3
 76a:	0021      	movs	r1, r4
 76c:	2050      	movs	r0, #80	; 0x50
 76e:	47a8      	blx	r5

	eink_data[0] = 0x7F;
 770:	237f      	movs	r3, #127	; 0x7f
 772:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
 774:	7066      	strb	r6, [r4, #1]
	eink_data[2] = 0xFF;
 776:	3380      	adds	r3, #128	; 0x80
 778:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_TRES, eink_data, 3);
 77a:	2203      	movs	r2, #3
 77c:	0021      	movs	r1, r4
 77e:	2061      	movs	r0, #97	; 0x61
 780:	47a8      	blx	r5
	
	eink_data[0] = 0xA9;
 782:	23a9      	movs	r3, #169	; 0xa9
 784:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0xA9;
 786:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0xEB;
 788:	3342      	adds	r3, #66	; 0x42
 78a:	70a3      	strb	r3, [r4, #2]
	eink_data[3] = 0xEB;
 78c:	70e3      	strb	r3, [r4, #3]
	eink_data[4] = 0x02;
 78e:	3602      	adds	r6, #2
 790:	7126      	strb	r6, [r4, #4]
	eink_write_data(UC8173_GDS, eink_data, 5);
 792:	2205      	movs	r2, #5
 794:	0021      	movs	r1, r4
 796:	2062      	movs	r0, #98	; 0x62
 798:	47a8      	blx	r5
	spi_9b_send(1,AutoVCOM);  //0x12
	   
	spi_9b_send_9b(VBDS);
	spi_9b_send(1,AutoVCOM);*/

	eink_data[0] = 0x02;
 79a:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_LVSEL, eink_data, 1);
 79c:	2201      	movs	r2, #1
 79e:	0021      	movs	r1, r4
 7a0:	20e4      	movs	r0, #228	; 0xe4
 7a2:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
 7a4:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
 7a6:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GBS, eink_data, 2);
 7a8:	2202      	movs	r2, #2
 7aa:	0021      	movs	r1, r4
 7ac:	2063      	movs	r0, #99	; 0x63
 7ae:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
 7b0:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
 7b2:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GSS, eink_data, 2);	
 7b4:	2202      	movs	r2, #2
 7b6:	0021      	movs	r1, r4
 7b8:	2064      	movs	r0, #100	; 0x64
 7ba:	47a8      	blx	r5
	
	eink_write_data(UC8173_POF, 0, 0);
 7bc:	2200      	movs	r2, #0
 7be:	2100      	movs	r1, #0
 7c0:	2002      	movs	r0, #2
 7c2:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
 7c4:	4f10      	ldr	r7, [pc, #64]	; (808 <main+0x150>)
	CRITICAL_SECTION_LEAVE();
 7c6:	4e11      	ldr	r6, [pc, #68]	; (80c <main+0x154>)
	CRITICAL_SECTION_ENTER();
 7c8:	a801      	add	r0, sp, #4
 7ca:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
 7cc:	23c0      	movs	r3, #192	; 0xc0
 7ce:	05db      	lsls	r3, r3, #23
 7d0:	2580      	movs	r5, #128	; 0x80
 7d2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
 7d4:	22a0      	movs	r2, #160	; 0xa0
 7d6:	490e      	ldr	r1, [pc, #56]	; (810 <main+0x158>)
 7d8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
 7da:	2190      	movs	r1, #144	; 0x90
 7dc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
 7de:	4053      	eors	r3, r2
 7e0:	401c      	ands	r4, r3
 7e2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
 7e4:	a801      	add	r0, sp, #4
 7e6:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
 7e8:	4225      	tst	r5, r4
 7ea:	d1ed      	bne.n	7c8 <main+0x110>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 7ec:	2180      	movs	r1, #128	; 0x80
 7ee:	05c9      	lsls	r1, r1, #23
 7f0:	2398      	movs	r3, #152	; 0x98
 7f2:	22c0      	movs	r2, #192	; 0xc0
 7f4:	05d2      	lsls	r2, r2, #23
 7f6:	50d1      	str	r1, [r2, r3]
 7f8:	e7fe      	b.n	7f8 <main+0x140>
 7fa:	46c0      	nop			; (mov r8, r8)
 7fc:	00000211 	.word	0x00000211
 800:	00000685 	.word	0x00000685
 804:	0000064d 	.word	0x0000064d
 808:	00000329 	.word	0x00000329
 80c:	00000337 	.word	0x00000337
 810:	41004400 	.word	0x41004400

00000814 <__libc_init_array>:
 814:	b570      	push	{r4, r5, r6, lr}
 816:	2600      	movs	r6, #0
 818:	4d0c      	ldr	r5, [pc, #48]	; (84c <__libc_init_array+0x38>)
 81a:	4c0d      	ldr	r4, [pc, #52]	; (850 <__libc_init_array+0x3c>)
 81c:	1b64      	subs	r4, r4, r5
 81e:	10a4      	asrs	r4, r4, #2
 820:	42a6      	cmp	r6, r4
 822:	d109      	bne.n	838 <__libc_init_array+0x24>
 824:	2600      	movs	r6, #0
 826:	f000 f819 	bl	85c <_init>
 82a:	4d0a      	ldr	r5, [pc, #40]	; (854 <__libc_init_array+0x40>)
 82c:	4c0a      	ldr	r4, [pc, #40]	; (858 <__libc_init_array+0x44>)
 82e:	1b64      	subs	r4, r4, r5
 830:	10a4      	asrs	r4, r4, #2
 832:	42a6      	cmp	r6, r4
 834:	d105      	bne.n	842 <__libc_init_array+0x2e>
 836:	bd70      	pop	{r4, r5, r6, pc}
 838:	00b3      	lsls	r3, r6, #2
 83a:	58eb      	ldr	r3, [r5, r3]
 83c:	4798      	blx	r3
 83e:	3601      	adds	r6, #1
 840:	e7ee      	b.n	820 <__libc_init_array+0xc>
 842:	00b3      	lsls	r3, r6, #2
 844:	58eb      	ldr	r3, [r5, r3]
 846:	4798      	blx	r3
 848:	3601      	adds	r6, #1
 84a:	e7f2      	b.n	832 <__libc_init_array+0x1e>
 84c:	00000868 	.word	0x00000868
 850:	00000868 	.word	0x00000868
 854:	00000868 	.word	0x00000868
 858:	0000086c 	.word	0x0000086c

0000085c <_init>:
 85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 85e:	46c0      	nop			; (mov r8, r8)
 860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 862:	bc08      	pop	{r3}
 864:	469e      	mov	lr, r3
 866:	4770      	bx	lr

00000868 <__init_array_start>:
 868:	000000dd 	.word	0x000000dd

0000086c <_fini>:
 86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 86e:	46c0      	nop			; (mov r8, r8)
 870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 872:	bc08      	pop	{r3}
 874:	469e      	mov	lr, r3
 876:	4770      	bx	lr

00000878 <__fini_array_start>:
 878:	000000b5 	.word	0x000000b5
