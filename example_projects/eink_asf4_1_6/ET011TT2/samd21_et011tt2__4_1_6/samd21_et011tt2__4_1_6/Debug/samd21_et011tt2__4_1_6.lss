
samd21_et011tt2__4_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001c590  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000358  20000000  0001c590  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  20000358  0001c8e8  00030358  2**2
                  ALLOC
  3 .stack        00002004  2000043c  0001c9cc  00030358  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001aed7  00000000  00000000  000303d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c93  00000000  00000000  0004b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f039  00000000  00000000  0004cf43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000610  00000000  00000000  0005bf7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000858  00000000  00000000  0005c58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000050df  00000000  00000000  0005cde4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009e3b  00000000  00000000  00061ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000869e2  00000000  00000000  0006bcfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001734  00000000  00000000  000f26e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     @$. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000358 	.word	0x20000358
      d4:	00000000 	.word	0x00000000
      d8:	0001c590 	.word	0x0001c590

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000035c 	.word	0x2000035c
     108:	0001c590 	.word	0x0001c590
     10c:	0001c590 	.word	0x0001c590
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	0001c590 	.word	0x0001c590
     1c8:	20000000 	.word	0x20000000
     1cc:	20000358 	.word	0x20000358
     1d0:	20000004 	.word	0x20000004
     1d4:	20000358 	.word	0x20000358
     1d8:	2000043c 	.word	0x2000043c
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	000049e5 	.word	0x000049e5
     1f8:	0000477d 	.word	0x0000477d

000001fc <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
     1fc:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fe:	4802      	ldr	r0, [pc, #8]	; (208 <delay_driver_init+0xc>)
     200:	4b02      	ldr	r3, [pc, #8]	; (20c <delay_driver_init+0x10>)
     202:	4798      	blx	r3
}
     204:	bd10      	pop	{r4, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	e000e010 	.word	0xe000e010
     20c:	00000369 	.word	0x00000369

00000210 <system_init>:

void system_init(void)
{
     210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     212:	46de      	mov	lr, fp
     214:	4657      	mov	r7, sl
     216:	464e      	mov	r6, r9
     218:	4645      	mov	r5, r8
     21a:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     21c:	4b40      	ldr	r3, [pc, #256]	; (320 <system_init+0x110>)
     21e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     220:	22c0      	movs	r2, #192	; 0xc0
     222:	05d2      	lsls	r2, r2, #23
     224:	2310      	movs	r3, #16
     226:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     228:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22a:	4b3e      	ldr	r3, [pc, #248]	; (324 <system_init+0x114>)
     22c:	493e      	ldr	r1, [pc, #248]	; (328 <system_init+0x118>)
     22e:	6299      	str	r1, [r3, #40]	; 0x28
     230:	24c0      	movs	r4, #192	; 0xc0
     232:	0624      	lsls	r4, r4, #24
     234:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	2544      	movs	r5, #68	; 0x44
     238:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23a:	2101      	movs	r1, #1
     23c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     240:	2020      	movs	r0, #32
     242:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     244:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     246:	4839      	ldr	r0, [pc, #228]	; (32c <system_init+0x11c>)
     248:	6298      	str	r0, [r3, #40]	; 0x28
     24a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24c:	3501      	adds	r5, #1
     24e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     250:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     252:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     254:	2040      	movs	r0, #64	; 0x40
     256:	4684      	mov	ip, r0
     258:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25c:	4834      	ldr	r0, [pc, #208]	; (330 <system_init+0x120>)
     25e:	4682      	mov	sl, r0
     260:	6298      	str	r0, [r3, #40]	; 0x28
     262:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     264:	3501      	adds	r5, #1
     266:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     268:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     26c:	2080      	movs	r0, #128	; 0x80
     26e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     270:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     272:	4830      	ldr	r0, [pc, #192]	; (334 <system_init+0x124>)
     274:	4680      	mov	r8, r0
     276:	6298      	str	r0, [r3, #40]	; 0x28
     278:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	3501      	adds	r5, #1
     27c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     280:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     282:	2580      	movs	r5, #128	; 0x80
     284:	022d      	lsls	r5, r5, #8
     286:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     288:	482b      	ldr	r0, [pc, #172]	; (338 <system_init+0x128>)
     28a:	6298      	str	r0, [r3, #40]	; 0x28
     28c:	482b      	ldr	r0, [pc, #172]	; (33c <system_init+0x12c>)
     28e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     290:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     292:	204f      	movs	r0, #79	; 0x4f
     294:	5c1e      	ldrb	r6, [r3, r0]
     296:	2704      	movs	r7, #4
     298:	433e      	orrs	r6, r7
     29a:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     29c:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a2:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2a4:	2694      	movs	r6, #148	; 0x94
     2a6:	5191      	str	r1, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a8:	3039      	adds	r0, #57	; 0x39
     2aa:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ac:	3020      	adds	r0, #32
     2ae:	4f24      	ldr	r7, [pc, #144]	; (340 <system_init+0x130>)
     2b0:	501f      	str	r7, [r3, r0]
     2b2:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b4:	27c0      	movs	r7, #192	; 0xc0
     2b6:	46bb      	mov	fp, r7
     2b8:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438f      	bics	r7, r1
     2bc:	46b9      	mov	r9, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2be:	465f      	mov	r7, fp
     2c0:	464d      	mov	r5, r9
     2c2:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c4:	4665      	mov	r5, ip
     2c6:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2c8:	3f38      	subs	r7, #56	; 0x38
     2ca:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4655      	mov	r5, sl
     2ce:	501d      	str	r5, [r3, r0]
     2d0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	25c6      	movs	r5, #198	; 0xc6
     2d4:	46a9      	mov	r9, r5
     2d6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d8:	002f      	movs	r7, r5
     2da:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	464d      	mov	r5, r9
     2de:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e0:	3d46      	subs	r5, #70	; 0x46
     2e2:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2e4:	3508      	adds	r5, #8
     2e6:	2780      	movs	r7, #128	; 0x80
     2e8:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ea:	4645      	mov	r5, r8
     2ec:	501d      	str	r5, [r3, r0]
     2ee:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f0:	3747      	adds	r7, #71	; 0x47
     2f2:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2f4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f6:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f8:	2480      	movs	r4, #128	; 0x80
     2fa:	05e4      	lsls	r4, r4, #23
     2fc:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2fe:	2588      	movs	r5, #136	; 0x88
     300:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     302:	501c      	str	r4, [r3, r0]
     304:	4a0f      	ldr	r2, [pc, #60]	; (344 <system_init+0x134>)
     306:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     308:	3036      	adds	r0, #54	; 0x36
     30a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     30c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(EINK_X_LED_0_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(EINK_X_LED_0_PIN, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
     310:	4b0d      	ldr	r3, [pc, #52]	; (348 <system_init+0x138>)
     312:	4798      	blx	r3
}
     314:	bc3c      	pop	{r2, r3, r4, r5}
     316:	4690      	mov	r8, r2
     318:	4699      	mov	r9, r3
     31a:	46a2      	mov	sl, r4
     31c:	46ab      	mov	fp, r5
     31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     320:	000003cd 	.word	0x000003cd
     324:	41004400 	.word	0x41004400
     328:	40000010 	.word	0x40000010
     32c:	40000020 	.word	0x40000020
     330:	40000040 	.word	0x40000040
     334:	40000080 	.word	0x40000080
     338:	40028000 	.word	0x40028000
     33c:	c0020000 	.word	0xc0020000
     340:	40000001 	.word	0x40000001
     344:	c0004000 	.word	0xc0004000
     348:	000001fd 	.word	0x000001fd

0000034c <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     34c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     350:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     352:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     354:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     358:	4770      	bx	lr

0000035a <atomic_leave_critical>:
     35a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     35e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     360:	f383 8810 	msr	PRIMASK, r3
}
     364:	4770      	bx	lr
	...

00000368 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     368:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     36a:	4b02      	ldr	r3, [pc, #8]	; (374 <delay_init+0xc>)
     36c:	6018      	str	r0, [r3, #0]
     36e:	4b02      	ldr	r3, [pc, #8]	; (378 <delay_init+0x10>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	20000374 	.word	0x20000374
     378:	0000050d 	.word	0x0000050d

0000037c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     37c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <delay_ms+0x14>)
     380:	681c      	ldr	r4, [r3, #0]
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x18>)
     384:	4798      	blx	r3
     386:	0001      	movs	r1, r0
     388:	0020      	movs	r0, r4
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <delay_ms+0x1c>)
     38c:	4798      	blx	r3
}
     38e:	bd10      	pop	{r4, pc}
     390:	20000374 	.word	0x20000374
     394:	000003c1 	.word	0x000003c1
     398:	00000521 	.word	0x00000521

0000039c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     39c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     39e:	4a06      	ldr	r2, [pc, #24]	; (3b8 <_sbrk+0x1c>)
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	2a00      	cmp	r2, #0
     3a4:	d004      	beq.n	3b0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3a6:	4a04      	ldr	r2, [pc, #16]	; (3b8 <_sbrk+0x1c>)
     3a8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3aa:	18c3      	adds	r3, r0, r3
     3ac:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3b0:	4902      	ldr	r1, [pc, #8]	; (3bc <_sbrk+0x20>)
     3b2:	4a01      	ldr	r2, [pc, #4]	; (3b8 <_sbrk+0x1c>)
     3b4:	6011      	str	r1, [r2, #0]
     3b6:	e7f6      	b.n	3a6 <_sbrk+0xa>
     3b8:	20000378 	.word	0x20000378
     3bc:	20002440 	.word	0x20002440

000003c0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <_get_cycles_for_ms+0x8>)
     3c2:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3c4:	4770      	bx	lr
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00005dc0 	.word	0x00005dc0

000003cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3cc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3ce:	4b07      	ldr	r3, [pc, #28]	; (3ec <_init_chip+0x20>)
     3d0:	685a      	ldr	r2, [r3, #4]
     3d2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     3d4:	4b06      	ldr	r3, [pc, #24]	; (3f0 <_init_chip+0x24>)
     3d6:	4798      	blx	r3
	_sysctrl_init_sources();
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <_init_chip+0x28>)
     3da:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     3dc:	2008      	movs	r0, #8
     3de:	4c06      	ldr	r4, [pc, #24]	; (3f8 <_init_chip+0x2c>)
     3e0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <_init_chip+0x30>)
     3e4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3e6:	20f7      	movs	r0, #247	; 0xf7
     3e8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     3ea:	bd10      	pop	{r4, pc}
     3ec:	41004000 	.word	0x41004000
     3f0:	00000441 	.word	0x00000441
     3f4:	00000461 	.word	0x00000461
     3f8:	00000401 	.word	0x00000401
     3fc:	00000495 	.word	0x00000495

00000400 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     400:	07c3      	lsls	r3, r0, #31
     402:	d509      	bpl.n	418 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <_gclk_init_generators_by_fref+0x34>)
     406:	2280      	movs	r2, #128	; 0x80
     408:	0092      	lsls	r2, r2, #2
     40a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     40c:	4a0a      	ldr	r2, [pc, #40]	; (438 <_gclk_init_generators_by_fref+0x38>)
     40e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     410:	001a      	movs	r2, r3
     412:	7853      	ldrb	r3, [r2, #1]
     414:	09db      	lsrs	r3, r3, #7
     416:	d1fc      	bne.n	412 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     418:	0703      	lsls	r3, r0, #28
     41a:	d509      	bpl.n	430 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     41c:	4b05      	ldr	r3, [pc, #20]	; (434 <_gclk_init_generators_by_fref+0x34>)
     41e:	2204      	movs	r2, #4
     420:	32ff      	adds	r2, #255	; 0xff
     422:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     424:	4a05      	ldr	r2, [pc, #20]	; (43c <_gclk_init_generators_by_fref+0x3c>)
     426:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     428:	001a      	movs	r2, r3
     42a:	7853      	ldrb	r3, [r2, #1]
     42c:	09db      	lsrs	r3, r3, #7
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	40000c00 	.word	0x40000c00
     438:	00010700 	.word	0x00010700
     43c:	00010403 	.word	0x00010403

00000440 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     440:	4b06      	ldr	r3, [pc, #24]	; (45c <_pm_init+0x1c>)
     442:	7a1a      	ldrb	r2, [r3, #8]
     444:	b2d2      	uxtb	r2, r2
     446:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     448:	7a5a      	ldrb	r2, [r3, #9]
     44a:	b2d2      	uxtb	r2, r2
     44c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     44e:	7a9a      	ldrb	r2, [r3, #10]
     450:	b2d2      	uxtb	r2, r2
     452:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     454:	7ada      	ldrb	r2, [r3, #11]
     456:	b2d2      	uxtb	r2, r2
     458:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     45a:	4770      	bx	lr
     45c:	40000400 	.word	0x40000400

00000460 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     460:	4a0b      	ldr	r2, [pc, #44]	; (490 <_sysctrl_init_sources+0x30>)
     462:	6993      	ldr	r3, [r2, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     464:	21fe      	movs	r1, #254	; 0xfe
     466:	03c9      	lsls	r1, r1, #15
     468:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     46a:	214e      	movs	r1, #78	; 0x4e
     46c:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
     46e:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     470:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     472:	392f      	subs	r1, #47	; 0x2f
     474:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     476:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     478:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     47a:	2204      	movs	r2, #4
     47c:	68cb      	ldr	r3, [r1, #12]
     47e:	421a      	tst	r2, r3
     480:	d0fc      	beq.n	47c <_sysctrl_init_sources+0x1c>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
     482:	4a03      	ldr	r2, [pc, #12]	; (490 <_sysctrl_init_sources+0x30>)
     484:	6993      	ldr	r3, [r2, #24]
     486:	2180      	movs	r1, #128	; 0x80
     488:	430b      	orrs	r3, r1
     48a:	6193      	str	r3, [r2, #24]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     48c:	4770      	bx	lr
     48e:	46c0      	nop			; (mov r8, r8)
     490:	40000800 	.word	0x40000800

00000494 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     494:	2202      	movs	r2, #2
     496:	4b19      	ldr	r3, [pc, #100]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     498:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     49a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     49c:	320e      	adds	r2, #14
     49e:	68cb      	ldr	r3, [r1, #12]
     4a0:	421a      	tst	r2, r3
     4a2:	d0fc      	beq.n	49e <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     4a4:	4a16      	ldr	r2, [pc, #88]	; (500 <_sysctrl_init_referenced_generators+0x6c>)
     4a6:	4b15      	ldr	r3, [pc, #84]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4a8:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4aa:	4b16      	ldr	r3, [pc, #88]	; (504 <_sysctrl_init_referenced_generators+0x70>)
     4ac:	681b      	ldr	r3, [r3, #0]
     4ae:	0e9b      	lsrs	r3, r3, #26
     4b0:	2b3f      	cmp	r3, #63	; 0x3f
     4b2:	d01a      	beq.n	4ea <_sysctrl_init_referenced_generators+0x56>
     4b4:	029b      	lsls	r3, r3, #10
     4b6:	2280      	movs	r2, #128	; 0x80
     4b8:	0092      	lsls	r2, r2, #2
     4ba:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     4bc:	4a0f      	ldr	r2, [pc, #60]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4be:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     4c0:	2302      	movs	r3, #2
     4c2:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     4c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     4c6:	075b      	lsls	r3, r3, #29
     4c8:	d512      	bpl.n	4f0 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ca:	0011      	movs	r1, r2
	tmp &= mask;
     4cc:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ce:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     4d0:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     4d2:	2bd0      	cmp	r3, #208	; 0xd0
     4d4:	d1fb      	bne.n	4ce <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     4d6:	4a09      	ldr	r2, [pc, #36]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4d8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     4da:	2180      	movs	r1, #128	; 0x80
     4dc:	430b      	orrs	r3, r1
     4de:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     4e0:	4a09      	ldr	r2, [pc, #36]	; (508 <_sysctrl_init_referenced_generators+0x74>)
     4e2:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     4e4:	09db      	lsrs	r3, r3, #7
     4e6:	d1fc      	bne.n	4e2 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     4e8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4ea:	23fc      	movs	r3, #252	; 0xfc
     4ec:	01db      	lsls	r3, r3, #7
     4ee:	e7e5      	b.n	4bc <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     4f0:	4902      	ldr	r1, [pc, #8]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     4f2:	2210      	movs	r2, #16
     4f4:	68cb      	ldr	r3, [r1, #12]
     4f6:	421a      	tst	r2, r3
     4f8:	d0fc      	beq.n	4f4 <_sysctrl_init_referenced_generators+0x60>
     4fa:	e7ec      	b.n	4d6 <_sysctrl_init_referenced_generators+0x42>
     4fc:	40000800 	.word	0x40000800
     500:	04010000 	.word	0x04010000
     504:	00806024 	.word	0x00806024
     508:	40000c00 	.word	0x40000c00

0000050c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     50c:	4b02      	ldr	r3, [pc, #8]	; (518 <_delay_init+0xc>)
     50e:	4a03      	ldr	r2, [pc, #12]	; (51c <_delay_init+0x10>)
     510:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     512:	2205      	movs	r2, #5
     514:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     516:	4770      	bx	lr
     518:	e000e010 	.word	0xe000e010
     51c:	00ffffff 	.word	0x00ffffff

00000520 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     520:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     522:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     524:	1e5e      	subs	r6, r3, #1
     526:	b2f6      	uxtb	r6, r6
     528:	2b00      	cmp	r3, #0
     52a:	d013      	beq.n	554 <_delay_cycles+0x34>
     52c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     52e:	4a0e      	ldr	r2, [pc, #56]	; (568 <_delay_cycles+0x48>)
     530:	4d0e      	ldr	r5, [pc, #56]	; (56c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     532:	2080      	movs	r0, #128	; 0x80
     534:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     536:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     538:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     53a:	6813      	ldr	r3, [r2, #0]
     53c:	4203      	tst	r3, r0
     53e:	d0fc      	beq.n	53a <_delay_cycles+0x1a>
	while (n--) {
     540:	3c01      	subs	r4, #1
     542:	b2e4      	uxtb	r4, r4
     544:	2cff      	cmp	r4, #255	; 0xff
     546:	d1f6      	bne.n	536 <_delay_cycles+0x16>
     548:	0633      	lsls	r3, r6, #24
     54a:	1af6      	subs	r6, r6, r3
     54c:	4b08      	ldr	r3, [pc, #32]	; (570 <_delay_cycles+0x50>)
     54e:	469c      	mov	ip, r3
     550:	4461      	add	r1, ip
     552:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     554:	4b04      	ldr	r3, [pc, #16]	; (568 <_delay_cycles+0x48>)
     556:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     558:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     55a:	0019      	movs	r1, r3
     55c:	2280      	movs	r2, #128	; 0x80
     55e:	0252      	lsls	r2, r2, #9
     560:	680b      	ldr	r3, [r1, #0]
     562:	4213      	tst	r3, r2
     564:	d0fc      	beq.n	560 <_delay_cycles+0x40>
		;
}
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	e000e010 	.word	0xe000e010
     56c:	00ffffff 	.word	0x00ffffff
     570:	ff000001 	.word	0xff000001

00000574 <eink_ite_wait_for_hrdy>:
 * to use. 
 */
/**
 * \brief Wait For Host Ready function.
 */
static void eink_ite_wait_for_hrdy(void) {
     574:	b510      	push	{r4, lr}
    ptr_eink_ite_config->wait_for_hrdy();
     576:	4b02      	ldr	r3, [pc, #8]	; (580 <eink_ite_wait_for_hrdy+0xc>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	4798      	blx	r3
}
     57e:	bd10      	pop	{r4, pc}
     580:	2000039c 	.word	0x2000039c

00000584 <gfx_eink_put_display_buffer>:
}

/**
 * \brief Put Display Buffer function.
 */
static void gfx_eink_put_display_buffer(bool refresh_display) {
     584:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->put_display_buffer(refresh_display);
     586:	4b02      	ldr	r3, [pc, #8]	; (590 <gfx_eink_put_display_buffer+0xc>)
     588:	681b      	ldr	r3, [r3, #0]
     58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     58c:	4798      	blx	r3
}
     58e:	bd10      	pop	{r4, pc}
     590:	20000434 	.word	0x20000434

00000594 <gfx_eink_set_pixel>:
}

/**
 * \brief Set Pixel function.
 */
static void gfx_eink_set_pixel(eink_coordinate x_set, eink_coordinate y_set, enum eink_pixel_colour pixel_colour) {
     594:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel(x_set, y_set, pixel_colour);
     596:	4b02      	ldr	r3, [pc, #8]	; (5a0 <gfx_eink_set_pixel+0xc>)
     598:	681b      	ldr	r3, [r3, #0]
     59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     59c:	4798      	blx	r3
}
     59e:	bd10      	pop	{r4, pc}
     5a0:	20000434 	.word	0x20000434

000005a4 <gfx_eink_set_pixel_raw>:

/**
 * \brief Set Pixel with raw value function.
 */
static void gfx_eink_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value) {
     5a4:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel_raw(x_set, y_set, pixel_value);
     5a6:	4b02      	ldr	r3, [pc, #8]	; (5b0 <gfx_eink_set_pixel_raw+0xc>)
     5a8:	681b      	ldr	r3, [r3, #0]
     5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     5ac:	4798      	blx	r3
}
     5ae:	bd10      	pop	{r4, pc}
     5b0:	20000434 	.word	0x20000434

000005b4 <eink_et011tt2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_et011tt2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b6:	46de      	mov	lr, fp
     5b8:	4657      	mov	r7, sl
     5ba:	464e      	mov	r6, r9
     5bc:	4645      	mov	r5, r8
     5be:	b5e0      	push	{r5, r6, r7, lr}
     5c0:	b08b      	sub	sp, #44	; 0x2c
     5c2:	9003      	str	r0, [sp, #12]
     5c4:	9205      	str	r2, [sp, #20]
     5c6:	0018      	movs	r0, r3
     5c8:	9307      	str	r3, [sp, #28]
     5ca:	ab14      	add	r3, sp, #80	; 0x50
     5cc:	8819      	ldrh	r1, [r3, #0]
     5ce:	9108      	str	r1, [sp, #32]
     5d0:	ab15      	add	r3, sp, #84	; 0x54
     5d2:	8819      	ldrh	r1, [r3, #0]
     5d4:	9109      	str	r1, [sp, #36]	; 0x24
     5d6:	ab16      	add	r3, sp, #88	; 0x58
     5d8:	781f      	ldrb	r7, [r3, #0]
     5da:	ab17      	add	r3, sp, #92	; 0x5c
     5dc:	7819      	ldrb	r1, [r3, #0]
     5de:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     5e0:	428f      	cmp	r7, r1
     5e2:	d051      	beq.n	688 <eink_et011tt2_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     5e4:	2a00      	cmp	r2, #0
     5e6:	d04f      	beq.n	688 <eink_et011tt2_graphics_load_mono_image+0xd4>
     5e8:	2200      	movs	r2, #0
     5ea:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     5ec:	0003      	movs	r3, r0
     5ee:	3b01      	subs	r3, #1
     5f0:	b29b      	uxth	r3, r3
     5f2:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5f4:	4b28      	ldr	r3, [pc, #160]	; (698 <eink_et011tt2_graphics_load_mono_image+0xe4>)
     5f6:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     5f8:	46b8      	mov	r8, r7
     5fa:	e033      	b.n	664 <eink_et011tt2_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5fc:	464b      	mov	r3, r9
     5fe:	2b08      	cmp	r3, #8
     600:	d003      	beq.n	60a <eink_et011tt2_graphics_load_mono_image+0x56>
     602:	464a      	mov	r2, r9
     604:	0021      	movs	r1, r4
     606:	9801      	ldr	r0, [sp, #4]
     608:	47d8      	blx	fp
     60a:	3501      	adds	r5, #1
     60c:	3401      	adds	r4, #1
     60e:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     610:	2d08      	cmp	r5, #8
     612:	d00b      	beq.n	62c <eink_et011tt2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     614:	7833      	ldrb	r3, [r6, #0]
     616:	412b      	asrs	r3, r5
                    if(bit_value) {
     618:	07db      	lsls	r3, r3, #31
     61a:	d5ef      	bpl.n	5fc <eink_et011tt2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     61c:	2f08      	cmp	r7, #8
     61e:	d0f4      	beq.n	60a <eink_et011tt2_graphics_load_mono_image+0x56>
     620:	003a      	movs	r2, r7
     622:	0021      	movs	r1, r4
     624:	9801      	ldr	r0, [sp, #4]
     626:	4b1c      	ldr	r3, [pc, #112]	; (698 <eink_et011tt2_graphics_load_mono_image+0xe4>)
     628:	4798      	blx	r3
     62a:	e7ee      	b.n	60a <eink_et011tt2_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     62c:	4643      	mov	r3, r8
     62e:	3b01      	subs	r3, #1
     630:	b29b      	uxth	r3, r3
     632:	4698      	mov	r8, r3
     634:	4653      	mov	r3, sl
     636:	3308      	adds	r3, #8
     638:	b29b      	uxth	r3, r3
     63a:	469a      	mov	sl, r3
     63c:	4643      	mov	r3, r8
     63e:	2b00      	cmp	r3, #0
     640:	d008      	beq.n	654 <eink_et011tt2_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     642:	9b02      	ldr	r3, [sp, #8]
     644:	4443      	add	r3, r8
     646:	001e      	movs	r6, r3
     648:	9b03      	ldr	r3, [sp, #12]
     64a:	469c      	mov	ip, r3
     64c:	4466      	add	r6, ip
     64e:	4654      	mov	r4, sl
     650:	2500      	movs	r5, #0
     652:	e7df      	b.n	614 <eink_et011tt2_graphics_load_mono_image+0x60>
     654:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     656:	9b04      	ldr	r3, [sp, #16]
     658:	3301      	adds	r3, #1
     65a:	b29b      	uxth	r3, r3
     65c:	9304      	str	r3, [sp, #16]
     65e:	9a05      	ldr	r2, [sp, #20]
     660:	429a      	cmp	r2, r3
     662:	d911      	bls.n	688 <eink_et011tt2_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     664:	9b06      	ldr	r3, [sp, #24]
     666:	1e1f      	subs	r7, r3, #0
     668:	d0f5      	beq.n	656 <eink_et011tt2_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     66a:	9b07      	ldr	r3, [sp, #28]
     66c:	9a04      	ldr	r2, [sp, #16]
     66e:	4353      	muls	r3, r2
     670:	9302      	str	r3, [sp, #8]
     672:	9b09      	ldr	r3, [sp, #36]	; 0x24
     674:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     676:	9b08      	ldr	r3, [sp, #32]
     678:	4694      	mov	ip, r2
     67a:	4463      	add	r3, ip
     67c:	b29b      	uxth	r3, r3
     67e:	9301      	str	r3, [sp, #4]
     680:	4643      	mov	r3, r8
     682:	46b8      	mov	r8, r7
     684:	001f      	movs	r7, r3
     686:	e7dc      	b.n	642 <eink_et011tt2_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     688:	b00b      	add	sp, #44	; 0x2c
     68a:	bc3c      	pop	{r2, r3, r4, r5}
     68c:	4690      	mov	r8, r2
     68e:	4699      	mov	r9, r3
     690:	46a2      	mov	sl, r4
     692:	46ab      	mov	fp, r5
     694:	bdf0      	pop	{r4, r5, r6, r7, pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	00000595 	.word	0x00000595

0000069c <eink_ed013tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed013tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     69c:	b5f0      	push	{r4, r5, r6, r7, lr}
     69e:	46de      	mov	lr, fp
     6a0:	4657      	mov	r7, sl
     6a2:	464e      	mov	r6, r9
     6a4:	4645      	mov	r5, r8
     6a6:	b5e0      	push	{r5, r6, r7, lr}
     6a8:	b08b      	sub	sp, #44	; 0x2c
     6aa:	9003      	str	r0, [sp, #12]
     6ac:	9205      	str	r2, [sp, #20]
     6ae:	0018      	movs	r0, r3
     6b0:	9307      	str	r3, [sp, #28]
     6b2:	ab14      	add	r3, sp, #80	; 0x50
     6b4:	8819      	ldrh	r1, [r3, #0]
     6b6:	9108      	str	r1, [sp, #32]
     6b8:	ab15      	add	r3, sp, #84	; 0x54
     6ba:	8819      	ldrh	r1, [r3, #0]
     6bc:	9109      	str	r1, [sp, #36]	; 0x24
     6be:	ab16      	add	r3, sp, #88	; 0x58
     6c0:	781f      	ldrb	r7, [r3, #0]
     6c2:	ab17      	add	r3, sp, #92	; 0x5c
     6c4:	7819      	ldrb	r1, [r3, #0]
     6c6:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     6c8:	428f      	cmp	r7, r1
     6ca:	d051      	beq.n	770 <eink_ed013tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     6cc:	2a00      	cmp	r2, #0
     6ce:	d04f      	beq.n	770 <eink_ed013tc1_graphics_load_mono_image+0xd4>
     6d0:	2200      	movs	r2, #0
     6d2:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     6d4:	0003      	movs	r3, r0
     6d6:	3b01      	subs	r3, #1
     6d8:	b29b      	uxth	r3, r3
     6da:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6dc:	4b28      	ldr	r3, [pc, #160]	; (780 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     6de:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6e0:	46b8      	mov	r8, r7
     6e2:	e033      	b.n	74c <eink_ed013tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6e4:	464b      	mov	r3, r9
     6e6:	2b08      	cmp	r3, #8
     6e8:	d003      	beq.n	6f2 <eink_ed013tc1_graphics_load_mono_image+0x56>
     6ea:	464a      	mov	r2, r9
     6ec:	0021      	movs	r1, r4
     6ee:	9801      	ldr	r0, [sp, #4]
     6f0:	47d8      	blx	fp
     6f2:	3501      	adds	r5, #1
     6f4:	3401      	adds	r4, #1
     6f6:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     6f8:	2d08      	cmp	r5, #8
     6fa:	d00b      	beq.n	714 <eink_ed013tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     6fc:	7833      	ldrb	r3, [r6, #0]
     6fe:	412b      	asrs	r3, r5
                    if(bit_value) {
     700:	07db      	lsls	r3, r3, #31
     702:	d5ef      	bpl.n	6e4 <eink_ed013tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     704:	2f08      	cmp	r7, #8
     706:	d0f4      	beq.n	6f2 <eink_ed013tc1_graphics_load_mono_image+0x56>
     708:	003a      	movs	r2, r7
     70a:	0021      	movs	r1, r4
     70c:	9801      	ldr	r0, [sp, #4]
     70e:	4b1c      	ldr	r3, [pc, #112]	; (780 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     710:	4798      	blx	r3
     712:	e7ee      	b.n	6f2 <eink_ed013tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     714:	4643      	mov	r3, r8
     716:	3b01      	subs	r3, #1
     718:	b29b      	uxth	r3, r3
     71a:	4698      	mov	r8, r3
     71c:	4653      	mov	r3, sl
     71e:	3308      	adds	r3, #8
     720:	b29b      	uxth	r3, r3
     722:	469a      	mov	sl, r3
     724:	4643      	mov	r3, r8
     726:	2b00      	cmp	r3, #0
     728:	d008      	beq.n	73c <eink_ed013tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     72a:	9b02      	ldr	r3, [sp, #8]
     72c:	4443      	add	r3, r8
     72e:	001e      	movs	r6, r3
     730:	9b03      	ldr	r3, [sp, #12]
     732:	469c      	mov	ip, r3
     734:	4466      	add	r6, ip
     736:	4654      	mov	r4, sl
     738:	2500      	movs	r5, #0
     73a:	e7df      	b.n	6fc <eink_ed013tc1_graphics_load_mono_image+0x60>
     73c:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     73e:	9b04      	ldr	r3, [sp, #16]
     740:	3301      	adds	r3, #1
     742:	b29b      	uxth	r3, r3
     744:	9304      	str	r3, [sp, #16]
     746:	9a05      	ldr	r2, [sp, #20]
     748:	429a      	cmp	r2, r3
     74a:	d911      	bls.n	770 <eink_ed013tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     74c:	9b06      	ldr	r3, [sp, #24]
     74e:	1e1f      	subs	r7, r3, #0
     750:	d0f5      	beq.n	73e <eink_ed013tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     752:	9b07      	ldr	r3, [sp, #28]
     754:	9a04      	ldr	r2, [sp, #16]
     756:	4353      	muls	r3, r2
     758:	9302      	str	r3, [sp, #8]
     75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     75c:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     75e:	9b08      	ldr	r3, [sp, #32]
     760:	4694      	mov	ip, r2
     762:	4463      	add	r3, ip
     764:	b29b      	uxth	r3, r3
     766:	9301      	str	r3, [sp, #4]
     768:	4643      	mov	r3, r8
     76a:	46b8      	mov	r8, r7
     76c:	001f      	movs	r7, r3
     76e:	e7dc      	b.n	72a <eink_ed013tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
     770:	b00b      	add	sp, #44	; 0x2c
     772:	bc3c      	pop	{r2, r3, r4, r5}
     774:	4690      	mov	r8, r2
     776:	4699      	mov	r9, r3
     778:	46a2      	mov	sl, r4
     77a:	46ab      	mov	fp, r5
     77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     77e:	46c0      	nop			; (mov r8, r8)
     780:	00000595 	.word	0x00000595

00000784 <eink_ed029tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed029tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	46de      	mov	lr, fp
     788:	4657      	mov	r7, sl
     78a:	464e      	mov	r6, r9
     78c:	4645      	mov	r5, r8
     78e:	b5e0      	push	{r5, r6, r7, lr}
     790:	b089      	sub	sp, #36	; 0x24
     792:	0019      	movs	r1, r3
     794:	9305      	str	r3, [sp, #20]
     796:	ab12      	add	r3, sp, #72	; 0x48
     798:	881c      	ldrh	r4, [r3, #0]
     79a:	9400      	str	r4, [sp, #0]
     79c:	ab13      	add	r3, sp, #76	; 0x4c
     79e:	881d      	ldrh	r5, [r3, #0]
     7a0:	9506      	str	r5, [sp, #24]
     7a2:	ab14      	add	r3, sp, #80	; 0x50
     7a4:	781d      	ldrb	r5, [r3, #0]
     7a6:	46a8      	mov	r8, r5
     7a8:	ab15      	add	r3, sp, #84	; 0x54
     7aa:	781d      	ldrb	r5, [r3, #0]
     7ac:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     7ae:	45a8      	cmp	r8, r5
     7b0:	d04e      	beq.n	850 <eink_ed029tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     7b2:	2a00      	cmp	r2, #0
     7b4:	d04c      	beq.n	850 <eink_ed029tc1_graphics_load_mono_image+0xcc>
     7b6:	000b      	movs	r3, r1
     7b8:	9103      	str	r1, [sp, #12]
     7ba:	3b01      	subs	r3, #1
     7bc:	b29b      	uxth	r3, r3
     7be:	3902      	subs	r1, #2
     7c0:	1ac9      	subs	r1, r1, r3
     7c2:	1841      	adds	r1, r0, r1
     7c4:	9102      	str	r1, [sp, #8]
     7c6:	46a4      	mov	ip, r4
     7c8:	4462      	add	r2, ip
     7ca:	b292      	uxth	r2, r2
     7cc:	9204      	str	r2, [sp, #16]
     7ce:	3301      	adds	r3, #1
     7d0:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7d2:	4b23      	ldr	r3, [pc, #140]	; (860 <eink_ed029tc1_graphics_load_mono_image+0xdc>)
     7d4:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7d6:	469a      	mov	sl, r3
     7d8:	e02f      	b.n	83a <eink_ed029tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7da:	464b      	mov	r3, r9
     7dc:	2b08      	cmp	r3, #8
     7de:	d003      	beq.n	7e8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     7e0:	464a      	mov	r2, r9
     7e2:	0021      	movs	r1, r4
     7e4:	9800      	ldr	r0, [sp, #0]
     7e6:	47d8      	blx	fp
     7e8:	3501      	adds	r5, #1
     7ea:	3401      	adds	r4, #1
     7ec:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     7ee:	2d08      	cmp	r5, #8
     7f0:	d00b      	beq.n	80a <eink_ed029tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     7f2:	7833      	ldrb	r3, [r6, #0]
     7f4:	412b      	asrs	r3, r5
                    if(bit_value) {
     7f6:	421f      	tst	r7, r3
     7f8:	d0ef      	beq.n	7da <eink_ed029tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7fa:	4643      	mov	r3, r8
     7fc:	2b08      	cmp	r3, #8
     7fe:	d0f3      	beq.n	7e8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     800:	4642      	mov	r2, r8
     802:	0021      	movs	r1, r4
     804:	9800      	ldr	r0, [sp, #0]
     806:	47d0      	blx	sl
     808:	e7ee      	b.n	7e8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     80a:	9b01      	ldr	r3, [sp, #4]
     80c:	3308      	adds	r3, #8
     80e:	b29b      	uxth	r3, r3
     810:	9301      	str	r3, [sp, #4]
     812:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     814:	9b02      	ldr	r3, [sp, #8]
     816:	429e      	cmp	r6, r3
     818:	d003      	beq.n	822 <eink_ed029tc1_graphics_load_mono_image+0x9e>
{
     81a:	9c01      	ldr	r4, [sp, #4]
     81c:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     81e:	2701      	movs	r7, #1
     820:	e7e7      	b.n	7f2 <eink_ed029tc1_graphics_load_mono_image+0x6e>
     822:	9b02      	ldr	r3, [sp, #8]
     824:	9a03      	ldr	r2, [sp, #12]
     826:	4694      	mov	ip, r2
     828:	4463      	add	r3, ip
     82a:	9302      	str	r3, [sp, #8]
     82c:	9b00      	ldr	r3, [sp, #0]
     82e:	3301      	adds	r3, #1
     830:	b29b      	uxth	r3, r3
     832:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     834:	9a04      	ldr	r2, [sp, #16]
     836:	4293      	cmp	r3, r2
     838:	d00a      	beq.n	850 <eink_ed029tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     83a:	9b05      	ldr	r3, [sp, #20]
     83c:	2b00      	cmp	r3, #0
     83e:	d0f0      	beq.n	822 <eink_ed029tc1_graphics_load_mono_image+0x9e>
     840:	9b07      	ldr	r3, [sp, #28]
     842:	9a02      	ldr	r2, [sp, #8]
     844:	4694      	mov	ip, r2
     846:	4463      	add	r3, ip
     848:	001e      	movs	r6, r3
     84a:	9b06      	ldr	r3, [sp, #24]
     84c:	9301      	str	r3, [sp, #4]
     84e:	e7e4      	b.n	81a <eink_ed029tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     850:	b009      	add	sp, #36	; 0x24
     852:	bc3c      	pop	{r2, r3, r4, r5}
     854:	4690      	mov	r8, r2
     856:	4699      	mov	r9, r3
     858:	46a2      	mov	sl, r4
     85a:	46ab      	mov	fp, r5
     85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00000595 	.word	0x00000595

00000864 <eink_el026tr1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_el026tr1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     864:	b5f0      	push	{r4, r5, r6, r7, lr}
     866:	b085      	sub	sp, #20
     868:	ac0a      	add	r4, sp, #40	; 0x28
     86a:	8824      	ldrh	r4, [r4, #0]
     86c:	ad0b      	add	r5, sp, #44	; 0x2c
     86e:	882d      	ldrh	r5, [r5, #0]
     870:	ae0c      	add	r6, sp, #48	; 0x30
     872:	7836      	ldrb	r6, [r6, #0]
     874:	af0d      	add	r7, sp, #52	; 0x34
     876:	783f      	ldrb	r7, [r7, #0]
    /** Calls the equivalent function but for the ED029TC1 - avoid code repetition */
    eink_ed029tc1_graphics_load_mono_image(img_array, array_size, image_width_px, image_height_bytes, x_place, y_place, foreground_colour, background_colour);
     878:	9703      	str	r7, [sp, #12]
     87a:	9602      	str	r6, [sp, #8]
     87c:	9501      	str	r5, [sp, #4]
     87e:	9400      	str	r4, [sp, #0]
     880:	4c01      	ldr	r4, [pc, #4]	; (888 <eink_el026tr1_graphics_load_mono_image+0x24>)
     882:	47a0      	blx	r4
     884:	b005      	add	sp, #20
     886:	bdf0      	pop	{r4, r5, r6, r7, pc}
     888:	00000785 	.word	0x00000785

0000088c <eink_hink_e0154a05_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_hink_e0154a05_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
     88e:	46de      	mov	lr, fp
     890:	4657      	mov	r7, sl
     892:	464e      	mov	r6, r9
     894:	4645      	mov	r5, r8
     896:	b5e0      	push	{r5, r6, r7, lr}
     898:	b089      	sub	sp, #36	; 0x24
     89a:	0019      	movs	r1, r3
     89c:	9305      	str	r3, [sp, #20]
     89e:	ab12      	add	r3, sp, #72	; 0x48
     8a0:	881c      	ldrh	r4, [r3, #0]
     8a2:	9400      	str	r4, [sp, #0]
     8a4:	ab13      	add	r3, sp, #76	; 0x4c
     8a6:	881d      	ldrh	r5, [r3, #0]
     8a8:	9506      	str	r5, [sp, #24]
     8aa:	ab14      	add	r3, sp, #80	; 0x50
     8ac:	781d      	ldrb	r5, [r3, #0]
     8ae:	46a8      	mov	r8, r5
     8b0:	ab15      	add	r3, sp, #84	; 0x54
     8b2:	781d      	ldrb	r5, [r3, #0]
     8b4:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     8b6:	45a8      	cmp	r8, r5
     8b8:	d04e      	beq.n	958 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     8ba:	2a00      	cmp	r2, #0
     8bc:	d04c      	beq.n	958 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
     8be:	000b      	movs	r3, r1
     8c0:	9103      	str	r1, [sp, #12]
     8c2:	3b01      	subs	r3, #1
     8c4:	b29b      	uxth	r3, r3
     8c6:	3902      	subs	r1, #2
     8c8:	1ac9      	subs	r1, r1, r3
     8ca:	1841      	adds	r1, r0, r1
     8cc:	9102      	str	r1, [sp, #8]
     8ce:	46a4      	mov	ip, r4
     8d0:	4462      	add	r2, ip
     8d2:	b292      	uxth	r2, r2
     8d4:	9204      	str	r2, [sp, #16]
     8d6:	3301      	adds	r3, #1
     8d8:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                        } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8da:	4b23      	ldr	r3, [pc, #140]	; (968 <eink_hink_e0154a05_graphics_load_mono_image+0xdc>)
     8dc:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8de:	469a      	mov	sl, r3
     8e0:	e02f      	b.n	942 <eink_hink_e0154a05_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8e2:	464b      	mov	r3, r9
     8e4:	2b08      	cmp	r3, #8
     8e6:	d003      	beq.n	8f0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8e8:	464a      	mov	r2, r9
     8ea:	0021      	movs	r1, r4
     8ec:	9800      	ldr	r0, [sp, #0]
     8ee:	47d8      	blx	fp
     8f0:	3501      	adds	r5, #1
     8f2:	3401      	adds	r4, #1
     8f4:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     8f6:	2d08      	cmp	r5, #8
     8f8:	d00b      	beq.n	912 <eink_hink_e0154a05_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     8fa:	7833      	ldrb	r3, [r6, #0]
     8fc:	412b      	asrs	r3, r5
                    if(bit_value) {
     8fe:	421f      	tst	r7, r3
     900:	d0ef      	beq.n	8e2 <eink_hink_e0154a05_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     902:	4643      	mov	r3, r8
     904:	2b08      	cmp	r3, #8
     906:	d0f3      	beq.n	8f0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     908:	4642      	mov	r2, r8
     90a:	0021      	movs	r1, r4
     90c:	9800      	ldr	r0, [sp, #0]
     90e:	47d0      	blx	sl
     910:	e7ee      	b.n	8f0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     912:	9b01      	ldr	r3, [sp, #4]
     914:	3308      	adds	r3, #8
     916:	b29b      	uxth	r3, r3
     918:	9301      	str	r3, [sp, #4]
     91a:	3e01      	subs	r6, #1
            for (j = (image_height_bytes); j > 0; j--) {
     91c:	9b02      	ldr	r3, [sp, #8]
     91e:	429e      	cmp	r6, r3
     920:	d003      	beq.n	92a <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
{
     922:	9c01      	ldr	r4, [sp, #4]
     924:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     926:	2701      	movs	r7, #1
     928:	e7e7      	b.n	8fa <eink_hink_e0154a05_graphics_load_mono_image+0x6e>
     92a:	9b02      	ldr	r3, [sp, #8]
     92c:	9a03      	ldr	r2, [sp, #12]
     92e:	4694      	mov	ip, r2
     930:	4463      	add	r3, ip
     932:	9302      	str	r3, [sp, #8]
     934:	9b00      	ldr	r3, [sp, #0]
     936:	3301      	adds	r3, #1
     938:	b29b      	uxth	r3, r3
     93a:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     93c:	9a04      	ldr	r2, [sp, #16]
     93e:	4293      	cmp	r3, r2
     940:	d00a      	beq.n	958 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
            for (j = (image_height_bytes); j > 0; j--) {
     942:	9b05      	ldr	r3, [sp, #20]
     944:	2b00      	cmp	r3, #0
     946:	d0f0      	beq.n	92a <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
     948:	9b07      	ldr	r3, [sp, #28]
     94a:	9a02      	ldr	r2, [sp, #8]
     94c:	4694      	mov	ip, r2
     94e:	4463      	add	r3, ip
     950:	001e      	movs	r6, r3
     952:	9b06      	ldr	r3, [sp, #24]
     954:	9301      	str	r3, [sp, #4]
     956:	e7e4      	b.n	922 <eink_hink_e0154a05_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     958:	b009      	add	sp, #36	; 0x24
     95a:	bc3c      	pop	{r2, r3, r4, r5}
     95c:	4690      	mov	r8, r2
     95e:	4699      	mov	r9, r3
     960:	46a2      	mov	sl, r4
     962:	46ab      	mov	fp, r5
     964:	bdf0      	pop	{r4, r5, r6, r7, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	00000595 	.word	0x00000595

0000096c <eink_ac040tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac040tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
     96e:	46de      	mov	lr, fp
     970:	4657      	mov	r7, sl
     972:	464e      	mov	r6, r9
     974:	4645      	mov	r5, r8
     976:	b5e0      	push	{r5, r6, r7, lr}
     978:	b089      	sub	sp, #36	; 0x24
     97a:	a912      	add	r1, sp, #72	; 0x48
     97c:	8809      	ldrh	r1, [r1, #0]
     97e:	9106      	str	r1, [sp, #24]
     980:	a913      	add	r1, sp, #76	; 0x4c
     982:	8809      	ldrh	r1, [r1, #0]
     984:	ac14      	add	r4, sp, #80	; 0x50
     986:	7827      	ldrb	r7, [r4, #0]
     988:	ac15      	add	r4, sp, #84	; 0x54
     98a:	7824      	ldrb	r4, [r4, #0]
     98c:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     98e:	42a7      	cmp	r7, r4
     990:	d04e      	beq.n	a30 <eink_ac040tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     992:	9205      	str	r2, [sp, #20]
     994:	2a00      	cmp	r2, #0
     996:	d04b      	beq.n	a30 <eink_ac040tc1_graphics_load_mono_image+0xc4>
     998:	9304      	str	r3, [sp, #16]
     99a:	9003      	str	r0, [sp, #12]
     99c:	4a28      	ldr	r2, [pc, #160]	; (a40 <eink_ac040tc1_graphics_load_mono_image+0xd4>)
     99e:	4694      	mov	ip, r2
     9a0:	4463      	add	r3, ip
     9a2:	00db      	lsls	r3, r3, #3
     9a4:	18cb      	adds	r3, r1, r3
     9a6:	2200      	movs	r2, #0
     9a8:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     9aa:	b29b      	uxth	r3, r3
     9ac:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     9ae:	4b25      	ldr	r3, [pc, #148]	; (a44 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9b0:	469b      	mov	fp, r3
     9b2:	e02c      	b.n	a0e <eink_ac040tc1_graphics_load_mono_image+0xa2>
     9b4:	464b      	mov	r3, r9
     9b6:	2b08      	cmp	r3, #8
     9b8:	d003      	beq.n	9c2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9ba:	464a      	mov	r2, r9
     9bc:	0021      	movs	r1, r4
     9be:	9801      	ldr	r0, [sp, #4]
     9c0:	47d8      	blx	fp
     9c2:	3501      	adds	r5, #1
     9c4:	3401      	adds	r4, #1
     9c6:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     9c8:	2d08      	cmp	r5, #8
     9ca:	d00b      	beq.n	9e4 <eink_ac040tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     9cc:	7833      	ldrb	r3, [r6, #0]
     9ce:	412b      	asrs	r3, r5
                    if(bit_value) {
     9d0:	07db      	lsls	r3, r3, #31
     9d2:	d5ef      	bpl.n	9b4 <eink_ac040tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     9d4:	2f08      	cmp	r7, #8
     9d6:	d0f4      	beq.n	9c2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9d8:	003a      	movs	r2, r7
     9da:	0021      	movs	r1, r4
     9dc:	9801      	ldr	r0, [sp, #4]
     9de:	4b19      	ldr	r3, [pc, #100]	; (a44 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9e0:	4798      	blx	r3
     9e2:	e7ee      	b.n	9c2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9e4:	4643      	mov	r3, r8
     9e6:	3b08      	subs	r3, #8
     9e8:	b29b      	uxth	r3, r3
     9ea:	4698      	mov	r8, r3
     9ec:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     9ee:	4556      	cmp	r6, sl
     9f0:	d002      	beq.n	9f8 <eink_ac040tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     9f2:	4644      	mov	r4, r8
     9f4:	2500      	movs	r5, #0
     9f6:	e7e9      	b.n	9cc <eink_ac040tc1_graphics_load_mono_image+0x60>
     9f8:	9b02      	ldr	r3, [sp, #8]
     9fa:	3301      	adds	r3, #1
     9fc:	9302      	str	r3, [sp, #8]
     9fe:	9a03      	ldr	r2, [sp, #12]
     a00:	9904      	ldr	r1, [sp, #16]
     a02:	468c      	mov	ip, r1
     a04:	4462      	add	r2, ip
     a06:	9203      	str	r2, [sp, #12]
     a08:	9a05      	ldr	r2, [sp, #20]
     a0a:	4293      	cmp	r3, r2
     a0c:	d210      	bcs.n	a30 <eink_ac040tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     a0e:	9b04      	ldr	r3, [sp, #16]
     a10:	2b00      	cmp	r3, #0
     a12:	d0f1      	beq.n	9f8 <eink_ac040tc1_graphics_load_mono_image+0x8c>
     a14:	9e03      	ldr	r6, [sp, #12]
     a16:	0032      	movs	r2, r6
     a18:	469c      	mov	ip, r3
     a1a:	4462      	add	r2, ip
     a1c:	4692      	mov	sl, r2
     a1e:	9b07      	ldr	r3, [sp, #28]
     a20:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a22:	9b06      	ldr	r3, [sp, #24]
     a24:	9a02      	ldr	r2, [sp, #8]
     a26:	4694      	mov	ip, r2
     a28:	4463      	add	r3, ip
     a2a:	b29b      	uxth	r3, r3
     a2c:	9301      	str	r3, [sp, #4]
     a2e:	e7e0      	b.n	9f2 <eink_ac040tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     a30:	b009      	add	sp, #36	; 0x24
     a32:	bc3c      	pop	{r2, r3, r4, r5}
     a34:	4690      	mov	r8, r2
     a36:	4699      	mov	r9, r3
     a38:	46a2      	mov	sl, r4
     a3a:	46ab      	mov	fp, r5
     a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	00001fff 	.word	0x00001fff
     a44:	00000595 	.word	0x00000595

00000a48 <eink_ac057tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac057tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     a48:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4a:	46de      	mov	lr, fp
     a4c:	4657      	mov	r7, sl
     a4e:	464e      	mov	r6, r9
     a50:	4645      	mov	r5, r8
     a52:	b5e0      	push	{r5, r6, r7, lr}
     a54:	b089      	sub	sp, #36	; 0x24
     a56:	a912      	add	r1, sp, #72	; 0x48
     a58:	8809      	ldrh	r1, [r1, #0]
     a5a:	9106      	str	r1, [sp, #24]
     a5c:	a913      	add	r1, sp, #76	; 0x4c
     a5e:	8809      	ldrh	r1, [r1, #0]
     a60:	ac14      	add	r4, sp, #80	; 0x50
     a62:	7827      	ldrb	r7, [r4, #0]
     a64:	ac15      	add	r4, sp, #84	; 0x54
     a66:	7824      	ldrb	r4, [r4, #0]
     a68:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     a6a:	42a7      	cmp	r7, r4
     a6c:	d04e      	beq.n	b0c <eink_ac057tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     a6e:	9205      	str	r2, [sp, #20]
     a70:	2a00      	cmp	r2, #0
     a72:	d04b      	beq.n	b0c <eink_ac057tc1_graphics_load_mono_image+0xc4>
     a74:	9304      	str	r3, [sp, #16]
     a76:	9003      	str	r0, [sp, #12]
     a78:	4a28      	ldr	r2, [pc, #160]	; (b1c <eink_ac057tc1_graphics_load_mono_image+0xd4>)
     a7a:	4694      	mov	ip, r2
     a7c:	4463      	add	r3, ip
     a7e:	00db      	lsls	r3, r3, #3
     a80:	18cb      	adds	r3, r1, r3
     a82:	2200      	movs	r2, #0
     a84:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     a86:	b29b      	uxth	r3, r3
     a88:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a8a:	4b25      	ldr	r3, [pc, #148]	; (b20 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     a8c:	469b      	mov	fp, r3
     a8e:	e02c      	b.n	aea <eink_ac057tc1_graphics_load_mono_image+0xa2>
     a90:	464b      	mov	r3, r9
     a92:	2b08      	cmp	r3, #8
     a94:	d003      	beq.n	a9e <eink_ac057tc1_graphics_load_mono_image+0x56>
     a96:	464a      	mov	r2, r9
     a98:	0021      	movs	r1, r4
     a9a:	9801      	ldr	r0, [sp, #4]
     a9c:	47d8      	blx	fp
     a9e:	3501      	adds	r5, #1
     aa0:	3401      	adds	r4, #1
     aa2:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     aa4:	2d08      	cmp	r5, #8
     aa6:	d00b      	beq.n	ac0 <eink_ac057tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     aa8:	7833      	ldrb	r3, [r6, #0]
     aaa:	412b      	asrs	r3, r5
                    if(bit_value) {
     aac:	07db      	lsls	r3, r3, #31
     aae:	d5ef      	bpl.n	a90 <eink_ac057tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     ab0:	2f08      	cmp	r7, #8
     ab2:	d0f4      	beq.n	a9e <eink_ac057tc1_graphics_load_mono_image+0x56>
     ab4:	003a      	movs	r2, r7
     ab6:	0021      	movs	r1, r4
     ab8:	9801      	ldr	r0, [sp, #4]
     aba:	4b19      	ldr	r3, [pc, #100]	; (b20 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     abc:	4798      	blx	r3
     abe:	e7ee      	b.n	a9e <eink_ac057tc1_graphics_load_mono_image+0x56>
     ac0:	4643      	mov	r3, r8
     ac2:	3b08      	subs	r3, #8
     ac4:	b29b      	uxth	r3, r3
     ac6:	4698      	mov	r8, r3
     ac8:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     aca:	4556      	cmp	r6, sl
     acc:	d002      	beq.n	ad4 <eink_ac057tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     ace:	4644      	mov	r4, r8
     ad0:	2500      	movs	r5, #0
     ad2:	e7e9      	b.n	aa8 <eink_ac057tc1_graphics_load_mono_image+0x60>
     ad4:	9b02      	ldr	r3, [sp, #8]
     ad6:	3301      	adds	r3, #1
     ad8:	9302      	str	r3, [sp, #8]
     ada:	9a03      	ldr	r2, [sp, #12]
     adc:	9904      	ldr	r1, [sp, #16]
     ade:	468c      	mov	ip, r1
     ae0:	4462      	add	r2, ip
     ae2:	9203      	str	r2, [sp, #12]
     ae4:	9a05      	ldr	r2, [sp, #20]
     ae6:	4293      	cmp	r3, r2
     ae8:	d210      	bcs.n	b0c <eink_ac057tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     aea:	9b04      	ldr	r3, [sp, #16]
     aec:	2b00      	cmp	r3, #0
     aee:	d0f1      	beq.n	ad4 <eink_ac057tc1_graphics_load_mono_image+0x8c>
     af0:	9e03      	ldr	r6, [sp, #12]
     af2:	0032      	movs	r2, r6
     af4:	469c      	mov	ip, r3
     af6:	4462      	add	r2, ip
     af8:	4692      	mov	sl, r2
     afa:	9b07      	ldr	r3, [sp, #28]
     afc:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     afe:	9b06      	ldr	r3, [sp, #24]
     b00:	9a02      	ldr	r2, [sp, #8]
     b02:	4694      	mov	ip, r2
     b04:	4463      	add	r3, ip
     b06:	b29b      	uxth	r3, r3
     b08:	9301      	str	r3, [sp, #4]
     b0a:	e7e0      	b.n	ace <eink_ac057tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     b0c:	b009      	add	sp, #36	; 0x24
     b0e:	bc3c      	pop	{r2, r3, r4, r5}
     b10:	4690      	mov	r8, r2
     b12:	4699      	mov	r9, r3
     b14:	46a2      	mov	sl, r4
     b16:	46ab      	mov	fp, r5
     b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	00001fff 	.word	0x00001fff
     b20:	00000595 	.word	0x00000595

00000b24 <eink_ed057tc2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed057tc2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     b24:	b5f0      	push	{r4, r5, r6, r7, lr}
     b26:	46de      	mov	lr, fp
     b28:	4657      	mov	r7, sl
     b2a:	464e      	mov	r6, r9
     b2c:	4645      	mov	r5, r8
     b2e:	b5e0      	push	{r5, r6, r7, lr}
     b30:	b089      	sub	sp, #36	; 0x24
     b32:	a912      	add	r1, sp, #72	; 0x48
     b34:	8809      	ldrh	r1, [r1, #0]
     b36:	9106      	str	r1, [sp, #24]
     b38:	a913      	add	r1, sp, #76	; 0x4c
     b3a:	8809      	ldrh	r1, [r1, #0]
     b3c:	ac14      	add	r4, sp, #80	; 0x50
     b3e:	7827      	ldrb	r7, [r4, #0]
     b40:	ac15      	add	r4, sp, #84	; 0x54
     b42:	7824      	ldrb	r4, [r4, #0]
     b44:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     b46:	42a7      	cmp	r7, r4
     b48:	d04e      	beq.n	be8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     b4a:	9205      	str	r2, [sp, #20]
     b4c:	2a00      	cmp	r2, #0
     b4e:	d04b      	beq.n	be8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
     b50:	9304      	str	r3, [sp, #16]
     b52:	9003      	str	r0, [sp, #12]
     b54:	4a28      	ldr	r2, [pc, #160]	; (bf8 <eink_ed057tc2_graphics_load_mono_image+0xd4>)
     b56:	4694      	mov	ip, r2
     b58:	4463      	add	r3, ip
     b5a:	00db      	lsls	r3, r3, #3
     b5c:	18cb      	adds	r3, r1, r3
     b5e:	2200      	movs	r2, #0
     b60:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     b62:	b29b      	uxth	r3, r3
     b64:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     b66:	4b25      	ldr	r3, [pc, #148]	; (bfc <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b68:	469b      	mov	fp, r3
     b6a:	e02c      	b.n	bc6 <eink_ed057tc2_graphics_load_mono_image+0xa2>
     b6c:	464b      	mov	r3, r9
     b6e:	2b08      	cmp	r3, #8
     b70:	d003      	beq.n	b7a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b72:	464a      	mov	r2, r9
     b74:	0021      	movs	r1, r4
     b76:	9801      	ldr	r0, [sp, #4]
     b78:	47d8      	blx	fp
     b7a:	3501      	adds	r5, #1
     b7c:	3401      	adds	r4, #1
     b7e:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     b80:	2d08      	cmp	r5, #8
     b82:	d00b      	beq.n	b9c <eink_ed057tc2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     b84:	7833      	ldrb	r3, [r6, #0]
     b86:	412b      	asrs	r3, r5
                    if(bit_value) {
     b88:	07db      	lsls	r3, r3, #31
     b8a:	d5ef      	bpl.n	b6c <eink_ed057tc2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     b8c:	2f08      	cmp	r7, #8
     b8e:	d0f4      	beq.n	b7a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b90:	003a      	movs	r2, r7
     b92:	0021      	movs	r1, r4
     b94:	9801      	ldr	r0, [sp, #4]
     b96:	4b19      	ldr	r3, [pc, #100]	; (bfc <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b98:	4798      	blx	r3
     b9a:	e7ee      	b.n	b7a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b9c:	4643      	mov	r3, r8
     b9e:	3b08      	subs	r3, #8
     ba0:	b29b      	uxth	r3, r3
     ba2:	4698      	mov	r8, r3
     ba4:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     ba6:	4556      	cmp	r6, sl
     ba8:	d002      	beq.n	bb0 <eink_ed057tc2_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     baa:	4644      	mov	r4, r8
     bac:	2500      	movs	r5, #0
     bae:	e7e9      	b.n	b84 <eink_ed057tc2_graphics_load_mono_image+0x60>
     bb0:	9b02      	ldr	r3, [sp, #8]
     bb2:	3301      	adds	r3, #1
     bb4:	9302      	str	r3, [sp, #8]
     bb6:	9a03      	ldr	r2, [sp, #12]
     bb8:	9904      	ldr	r1, [sp, #16]
     bba:	468c      	mov	ip, r1
     bbc:	4462      	add	r2, ip
     bbe:	9203      	str	r2, [sp, #12]
     bc0:	9a05      	ldr	r2, [sp, #20]
     bc2:	4293      	cmp	r3, r2
     bc4:	d210      	bcs.n	be8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     bc6:	9b04      	ldr	r3, [sp, #16]
     bc8:	2b00      	cmp	r3, #0
     bca:	d0f1      	beq.n	bb0 <eink_ed057tc2_graphics_load_mono_image+0x8c>
     bcc:	9e03      	ldr	r6, [sp, #12]
     bce:	0032      	movs	r2, r6
     bd0:	469c      	mov	ip, r3
     bd2:	4462      	add	r2, ip
     bd4:	4692      	mov	sl, r2
     bd6:	9b07      	ldr	r3, [sp, #28]
     bd8:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     bda:	9b06      	ldr	r3, [sp, #24]
     bdc:	9a02      	ldr	r2, [sp, #8]
     bde:	4694      	mov	ip, r2
     be0:	4463      	add	r3, ip
     be2:	b29b      	uxth	r3, r3
     be4:	9301      	str	r3, [sp, #4]
     be6:	e7e0      	b.n	baa <eink_ed057tc2_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     be8:	b009      	add	sp, #36	; 0x24
     bea:	bc3c      	pop	{r2, r3, r4, r5}
     bec:	4690      	mov	r8, r2
     bee:	4699      	mov	r9, r3
     bf0:	46a2      	mov	sl, r4
     bf2:	46ab      	mov	fp, r5
     bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	00001fff 	.word	0x00001fff
     bfc:	00000595 	.word	0x00000595

00000c00 <eink_ed028tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed028tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     c00:	b5f0      	push	{r4, r5, r6, r7, lr}
     c02:	46de      	mov	lr, fp
     c04:	4657      	mov	r7, sl
     c06:	464e      	mov	r6, r9
     c08:	4645      	mov	r5, r8
     c0a:	b5e0      	push	{r5, r6, r7, lr}
     c0c:	b08b      	sub	sp, #44	; 0x2c
     c0e:	9003      	str	r0, [sp, #12]
     c10:	9205      	str	r2, [sp, #20]
     c12:	0018      	movs	r0, r3
     c14:	9307      	str	r3, [sp, #28]
     c16:	ab14      	add	r3, sp, #80	; 0x50
     c18:	8819      	ldrh	r1, [r3, #0]
     c1a:	9108      	str	r1, [sp, #32]
     c1c:	ab15      	add	r3, sp, #84	; 0x54
     c1e:	8819      	ldrh	r1, [r3, #0]
     c20:	9109      	str	r1, [sp, #36]	; 0x24
     c22:	ab16      	add	r3, sp, #88	; 0x58
     c24:	781f      	ldrb	r7, [r3, #0]
     c26:	ab17      	add	r3, sp, #92	; 0x5c
     c28:	7819      	ldrb	r1, [r3, #0]
     c2a:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     c2c:	428f      	cmp	r7, r1
     c2e:	d051      	beq.n	cd4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     c30:	2a00      	cmp	r2, #0
     c32:	d04f      	beq.n	cd4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
     c34:	2200      	movs	r2, #0
     c36:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     c38:	0003      	movs	r3, r0
     c3a:	3b01      	subs	r3, #1
     c3c:	b29b      	uxth	r3, r3
     c3e:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c40:	4b28      	ldr	r3, [pc, #160]	; (ce4 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c42:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c44:	46b8      	mov	r8, r7
     c46:	e033      	b.n	cb0 <eink_ed028tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c48:	464b      	mov	r3, r9
     c4a:	2b08      	cmp	r3, #8
     c4c:	d003      	beq.n	c56 <eink_ed028tc1_graphics_load_mono_image+0x56>
     c4e:	464a      	mov	r2, r9
     c50:	0021      	movs	r1, r4
     c52:	9801      	ldr	r0, [sp, #4]
     c54:	47d8      	blx	fp
     c56:	3501      	adds	r5, #1
     c58:	3401      	adds	r4, #1
     c5a:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     c5c:	2d08      	cmp	r5, #8
     c5e:	d00b      	beq.n	c78 <eink_ed028tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c60:	7833      	ldrb	r3, [r6, #0]
     c62:	412b      	asrs	r3, r5
                    if(bit_value) {
     c64:	07db      	lsls	r3, r3, #31
     c66:	d5ef      	bpl.n	c48 <eink_ed028tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c68:	2f08      	cmp	r7, #8
     c6a:	d0f4      	beq.n	c56 <eink_ed028tc1_graphics_load_mono_image+0x56>
     c6c:	003a      	movs	r2, r7
     c6e:	0021      	movs	r1, r4
     c70:	9801      	ldr	r0, [sp, #4]
     c72:	4b1c      	ldr	r3, [pc, #112]	; (ce4 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c74:	4798      	blx	r3
     c76:	e7ee      	b.n	c56 <eink_ed028tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     c78:	4643      	mov	r3, r8
     c7a:	3b01      	subs	r3, #1
     c7c:	b29b      	uxth	r3, r3
     c7e:	4698      	mov	r8, r3
     c80:	4653      	mov	r3, sl
     c82:	3308      	adds	r3, #8
     c84:	b29b      	uxth	r3, r3
     c86:	469a      	mov	sl, r3
     c88:	4643      	mov	r3, r8
     c8a:	2b00      	cmp	r3, #0
     c8c:	d008      	beq.n	ca0 <eink_ed028tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c8e:	9b02      	ldr	r3, [sp, #8]
     c90:	4443      	add	r3, r8
     c92:	001e      	movs	r6, r3
     c94:	9b03      	ldr	r3, [sp, #12]
     c96:	469c      	mov	ip, r3
     c98:	4466      	add	r6, ip
     c9a:	4654      	mov	r4, sl
     c9c:	2500      	movs	r5, #0
     c9e:	e7df      	b.n	c60 <eink_ed028tc1_graphics_load_mono_image+0x60>
     ca0:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     ca2:	9b04      	ldr	r3, [sp, #16]
     ca4:	3301      	adds	r3, #1
     ca6:	b29b      	uxth	r3, r3
     ca8:	9304      	str	r3, [sp, #16]
     caa:	9a05      	ldr	r2, [sp, #20]
     cac:	429a      	cmp	r2, r3
     cae:	d911      	bls.n	cd4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     cb0:	9b06      	ldr	r3, [sp, #24]
     cb2:	1e1f      	subs	r7, r3, #0
     cb4:	d0f5      	beq.n	ca2 <eink_ed028tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     cb6:	9b07      	ldr	r3, [sp, #28]
     cb8:	9a04      	ldr	r2, [sp, #16]
     cba:	4353      	muls	r3, r2
     cbc:	9302      	str	r3, [sp, #8]
     cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cc0:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     cc2:	9b08      	ldr	r3, [sp, #32]
     cc4:	4694      	mov	ip, r2
     cc6:	4463      	add	r3, ip
     cc8:	b29b      	uxth	r3, r3
     cca:	9301      	str	r3, [sp, #4]
     ccc:	4643      	mov	r3, r8
     cce:	46b8      	mov	r8, r7
     cd0:	001f      	movs	r7, r3
     cd2:	e7dc      	b.n	c8e <eink_ed028tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     cd4:	b00b      	add	sp, #44	; 0x2c
     cd6:	bc3c      	pop	{r2, r3, r4, r5}
     cd8:	4690      	mov	r8, r2
     cda:	4699      	mov	r9, r3
     cdc:	46a2      	mov	sl, r4
     cde:	46ab      	mov	fp, r5
     ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	00000595 	.word	0x00000595

00000ce8 <eink_ed037tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed037tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cea:	46de      	mov	lr, fp
     cec:	4657      	mov	r7, sl
     cee:	464e      	mov	r6, r9
     cf0:	4645      	mov	r5, r8
     cf2:	b5e0      	push	{r5, r6, r7, lr}
     cf4:	b089      	sub	sp, #36	; 0x24
     cf6:	0019      	movs	r1, r3
     cf8:	9305      	str	r3, [sp, #20]
     cfa:	ab12      	add	r3, sp, #72	; 0x48
     cfc:	881c      	ldrh	r4, [r3, #0]
     cfe:	9400      	str	r4, [sp, #0]
     d00:	ab13      	add	r3, sp, #76	; 0x4c
     d02:	881d      	ldrh	r5, [r3, #0]
     d04:	9506      	str	r5, [sp, #24]
     d06:	ab14      	add	r3, sp, #80	; 0x50
     d08:	781d      	ldrb	r5, [r3, #0]
     d0a:	46a8      	mov	r8, r5
     d0c:	ab15      	add	r3, sp, #84	; 0x54
     d0e:	781d      	ldrb	r5, [r3, #0]
     d10:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     d12:	45a8      	cmp	r8, r5
     d14:	d04e      	beq.n	db4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     d16:	2a00      	cmp	r2, #0
     d18:	d04c      	beq.n	db4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
     d1a:	000b      	movs	r3, r1
     d1c:	9103      	str	r1, [sp, #12]
     d1e:	3b01      	subs	r3, #1
     d20:	b29b      	uxth	r3, r3
     d22:	3902      	subs	r1, #2
     d24:	1ac9      	subs	r1, r1, r3
     d26:	1841      	adds	r1, r0, r1
     d28:	9102      	str	r1, [sp, #8]
     d2a:	46a4      	mov	ip, r4
     d2c:	4462      	add	r2, ip
     d2e:	b292      	uxth	r2, r2
     d30:	9204      	str	r2, [sp, #16]
     d32:	3301      	adds	r3, #1
     d34:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d36:	4b23      	ldr	r3, [pc, #140]	; (dc4 <eink_ed037tc1_graphics_load_mono_image+0xdc>)
     d38:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d3a:	469a      	mov	sl, r3
     d3c:	e02f      	b.n	d9e <eink_ed037tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d3e:	464b      	mov	r3, r9
     d40:	2b08      	cmp	r3, #8
     d42:	d003      	beq.n	d4c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d44:	464a      	mov	r2, r9
     d46:	0021      	movs	r1, r4
     d48:	9800      	ldr	r0, [sp, #0]
     d4a:	47d8      	blx	fp
     d4c:	3501      	adds	r5, #1
     d4e:	3401      	adds	r4, #1
     d50:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     d52:	2d08      	cmp	r5, #8
     d54:	d00b      	beq.n	d6e <eink_ed037tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d56:	7833      	ldrb	r3, [r6, #0]
     d58:	412b      	asrs	r3, r5
                    if(bit_value) {
     d5a:	421f      	tst	r7, r3
     d5c:	d0ef      	beq.n	d3e <eink_ed037tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d5e:	4643      	mov	r3, r8
     d60:	2b08      	cmp	r3, #8
     d62:	d0f3      	beq.n	d4c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d64:	4642      	mov	r2, r8
     d66:	0021      	movs	r1, r4
     d68:	9800      	ldr	r0, [sp, #0]
     d6a:	47d0      	blx	sl
     d6c:	e7ee      	b.n	d4c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d6e:	9b01      	ldr	r3, [sp, #4]
     d70:	3308      	adds	r3, #8
     d72:	b29b      	uxth	r3, r3
     d74:	9301      	str	r3, [sp, #4]
     d76:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     d78:	9b02      	ldr	r3, [sp, #8]
     d7a:	429e      	cmp	r6, r3
     d7c:	d003      	beq.n	d86 <eink_ed037tc1_graphics_load_mono_image+0x9e>
{
     d7e:	9c01      	ldr	r4, [sp, #4]
     d80:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d82:	2701      	movs	r7, #1
     d84:	e7e7      	b.n	d56 <eink_ed037tc1_graphics_load_mono_image+0x6e>
     d86:	9b02      	ldr	r3, [sp, #8]
     d88:	9a03      	ldr	r2, [sp, #12]
     d8a:	4694      	mov	ip, r2
     d8c:	4463      	add	r3, ip
     d8e:	9302      	str	r3, [sp, #8]
     d90:	9b00      	ldr	r3, [sp, #0]
     d92:	3301      	adds	r3, #1
     d94:	b29b      	uxth	r3, r3
     d96:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     d98:	9a04      	ldr	r2, [sp, #16]
     d9a:	4293      	cmp	r3, r2
     d9c:	d00a      	beq.n	db4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     d9e:	9b05      	ldr	r3, [sp, #20]
     da0:	2b00      	cmp	r3, #0
     da2:	d0f0      	beq.n	d86 <eink_ed037tc1_graphics_load_mono_image+0x9e>
     da4:	9b07      	ldr	r3, [sp, #28]
     da6:	9a02      	ldr	r2, [sp, #8]
     da8:	4694      	mov	ip, r2
     daa:	4463      	add	r3, ip
     dac:	001e      	movs	r6, r3
     dae:	9b06      	ldr	r3, [sp, #24]
     db0:	9301      	str	r3, [sp, #4]
     db2:	e7e4      	b.n	d7e <eink_ed037tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
}
     db4:	b009      	add	sp, #36	; 0x24
     db6:	bc3c      	pop	{r2, r3, r4, r5}
     db8:	4690      	mov	r8, r2
     dba:	4699      	mov	r9, r3
     dbc:	46a2      	mov	sl, r4
     dbe:	46ab      	mov	fp, r5
     dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	00000595 	.word	0x00000595

00000dc8 <it8951_wait_for_hrdy>:
static inline void it8951_wait_for_hrdy(void)
{
#ifdef EINK_HOST_RDY
    while(!gpio_get_pin_level(EINK_HOST_RDY));
#endif
}
     dc8:	4770      	bx	lr
	...

00000dcc <eink_interface_init>:
 *
 * \note Initializes the display controller hardware interface, regardless
 * of driver IC, interface or display. Takes definitions from conf_eink.h.
 */
static void eink_interface_init(uint8_t f_init)
{
     dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dce:	46c6      	mov	lr, r8
     dd0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dd2:	22c0      	movs	r2, #192	; 0xc0
     dd4:	05d2      	lsls	r2, r2, #23
     dd6:	2788      	movs	r7, #136	; 0x88
     dd8:	2640      	movs	r6, #64	; 0x40
     dda:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ddc:	4b2a      	ldr	r3, [pc, #168]	; (e88 <eink_interface_init+0xbc>)
     dde:	20a8      	movs	r0, #168	; 0xa8
     de0:	4d2a      	ldr	r5, [pc, #168]	; (e8c <eink_interface_init+0xc0>)
     de2:	501d      	str	r5, [r3, r0]
     de4:	24c0      	movs	r4, #192	; 0xc0
     de6:	0624      	lsls	r4, r4, #24
     de8:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dea:	2101      	movs	r1, #1
     dec:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dee:	4f28      	ldr	r7, [pc, #160]	; (e90 <eink_interface_init+0xc4>)
     df0:	501f      	str	r7, [r3, r0]
     df2:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df4:	2720      	movs	r7, #32
     df6:	46b8      	mov	r8, r7
     df8:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dfa:	4f26      	ldr	r7, [pc, #152]	; (e94 <eink_interface_init+0xc8>)
     dfc:	629f      	str	r7, [r3, #40]	; 0x28
     dfe:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e00:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e02:	629d      	str	r5, [r3, #40]	; 0x28
     e04:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e06:	2510      	movs	r5, #16
     e08:	46ac      	mov	ip, r5
     e0a:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e0c:	4d22      	ldr	r5, [pc, #136]	; (e98 <eink_interface_init+0xcc>)
     e0e:	629d      	str	r5, [r3, #40]	; 0x28
     e10:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e12:	2580      	movs	r5, #128	; 0x80
     e14:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e16:	4f21      	ldr	r7, [pc, #132]	; (e9c <eink_interface_init+0xd0>)
     e18:	629f      	str	r7, [r3, #40]	; 0x28
     e1a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e1c:	2494      	movs	r4, #148	; 0x94
     e1e:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e20:	2798      	movs	r7, #152	; 0x98
     e22:	51d1      	str	r1, [r2, r7]
     e24:	4644      	mov	r4, r8
     e26:	6194      	str	r4, [r2, #24]
     e28:	6196      	str	r6, [r2, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2a:	4664      	mov	r4, ip
     e2c:	6154      	str	r4, [r2, #20]
     e2e:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e30:	3474      	adds	r4, #116	; 0x74
     e32:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	4e1a      	ldr	r6, [pc, #104]	; (ea0 <eink_interface_init+0xd4>)
     e36:	501e      	str	r6, [r3, r0]
     e38:	4e1a      	ldr	r6, [pc, #104]	; (ea4 <eink_interface_init+0xd8>)
     e3a:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e3c:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e3e:	301f      	adds	r0, #31
     e40:	5c1c      	ldrb	r4, [r3, r0]
     e42:	2604      	movs	r6, #4
     e44:	4334      	orrs	r4, r6
     e46:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e48:	51d5      	str	r5, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e4a:	24c6      	movs	r4, #198	; 0xc6
     e4c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e4e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e50:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e52:	3c06      	subs	r4, #6
     e54:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e56:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e58:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e5a:	3c7b      	subs	r4, #123	; 0x7b
     e5c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e60:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e62:	3401      	adds	r4, #1
     e64:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e66:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e68:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e6a:	3c02      	subs	r4, #2
     e6c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e70:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e72:	3403      	adds	r4, #3
     e74:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e76:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e78:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e7a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e7c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e7e:	541a      	strb	r2, [r3, r0]
#endif
    
#ifdef EINK_BUSY
    gpio_set_pin_function(EINK_BUSY, GPIO_PIN_FUNCTION_OFF);
#endif
}
     e80:	bc04      	pop	{r2}
     e82:	4690      	mov	r8, r2
     e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	41004400 	.word	0x41004400
     e8c:	40000040 	.word	0x40000040
     e90:	40000001 	.word	0x40000001
     e94:	40000020 	.word	0x40000020
     e98:	40000010 	.word	0x40000010
     e9c:	40000080 	.word	0x40000080
     ea0:	40020080 	.word	0x40020080
     ea4:	c0020000 	.word	0xc0020000

00000ea8 <eink_ed037tc1_set_pixel_raw>:
{    
     ea8:	b530      	push	{r4, r5, lr}
    if ( (x_set >= 0) && (x_set < ssd1677_global_instance.display_width) && (y_set >= 0) && (y_set < ssd1677_global_instance.display_height) ) {
     eaa:	4b33      	ldr	r3, [pc, #204]	; (f78 <eink_ed037tc1_set_pixel_raw+0xd0>)
     eac:	889b      	ldrh	r3, [r3, #4]
     eae:	b29b      	uxth	r3, r3
     eb0:	4283      	cmp	r3, r0
     eb2:	d92f      	bls.n	f14 <eink_ed037tc1_set_pixel_raw+0x6c>
     eb4:	4b30      	ldr	r3, [pc, #192]	; (f78 <eink_ed037tc1_set_pixel_raw+0xd0>)
     eb6:	88db      	ldrh	r3, [r3, #6]
     eb8:	b29b      	uxth	r3, r3
     eba:	428b      	cmp	r3, r1
     ebc:	d92a      	bls.n	f14 <eink_ed037tc1_set_pixel_raw+0x6c>
        if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
     ebe:	4b2e      	ldr	r3, [pc, #184]	; (f78 <eink_ed037tc1_set_pixel_raw+0xd0>)
     ec0:	781b      	ldrb	r3, [r3, #0]
     ec2:	2b01      	cmp	r3, #1
     ec4:	d027      	beq.n	f16 <eink_ed037tc1_set_pixel_raw+0x6e>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
     ec6:	4b2c      	ldr	r3, [pc, #176]	; (f78 <eink_ed037tc1_set_pixel_raw+0xd0>)
     ec8:	781b      	ldrb	r3, [r3, #0]
     eca:	2b02      	cmp	r3, #2
     ecc:	d02e      	beq.n	f2c <eink_ed037tc1_set_pixel_raw+0x84>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
     ece:	4b2a      	ldr	r3, [pc, #168]	; (f78 <eink_ed037tc1_set_pixel_raw+0xd0>)
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	2b03      	cmp	r3, #3
     ed4:	d038      	beq.n	f48 <eink_ed037tc1_set_pixel_raw+0xa0>
            x1_set = (x_set - (x_set % 8)) / 8;
     ed6:	10c3      	asrs	r3, r0, #3
            byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * y_set);
     ed8:	008c      	lsls	r4, r1, #2
     eda:	1861      	adds	r1, r4, r1
     edc:	00cc      	lsls	r4, r1, #3
     ede:	1a61      	subs	r1, r4, r1
     ee0:	185b      	adds	r3, r3, r1
            bit_set = 7 - (x_set % 8);
     ee2:	2107      	movs	r1, #7
     ee4:	4381      	bics	r1, r0
		eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, (pixel_set & 0x1));
     ee6:	4825      	ldr	r0, [pc, #148]	; (f7c <eink_ed037tc1_set_pixel_raw+0xd4>)
     ee8:	6800      	ldr	r0, [r0, #0]
     eea:	6904      	ldr	r4, [r0, #16]
     eec:	18e4      	adds	r4, r4, r3
 * \param bit_value Bit value.
 */
void eink_set_bit(uint8_t *byte, uint8_t bit_number, bool bit_value)
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
     eee:	07d0      	lsls	r0, r2, #31
     ef0:	d436      	bmi.n	f60 <eink_ed037tc1_set_pixel_raw+0xb8>
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
     ef2:	2501      	movs	r5, #1
     ef4:	408d      	lsls	r5, r1
     ef6:	7820      	ldrb	r0, [r4, #0]
     ef8:	43a8      	bics	r0, r5
     efa:	7020      	strb	r0, [r4, #0]
		eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, ((pixel_set >> 1) & 0x1));
     efc:	481f      	ldr	r0, [pc, #124]	; (f7c <eink_ed037tc1_set_pixel_raw+0xd4>)
     efe:	6800      	ldr	r0, [r0, #0]
     f00:	6944      	ldr	r4, [r0, #20]
     f02:	18e3      	adds	r3, r4, r3
    if (bit_value == 1) {
     f04:	0792      	lsls	r2, r2, #30
     f06:	d431      	bmi.n	f6c <eink_ed037tc1_set_pixel_raw+0xc4>
        *byte &= ~(1 << bit_number);
     f08:	2201      	movs	r2, #1
     f0a:	408a      	lsls	r2, r1
     f0c:	0011      	movs	r1, r2
     f0e:	781a      	ldrb	r2, [r3, #0]
     f10:	438a      	bics	r2, r1
     f12:	701a      	strb	r2, [r3, #0]
}
     f14:	bd30      	pop	{r4, r5, pc}
            y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - ((y_set - (y_set % 8)) / 8);
     f16:	10cc      	asrs	r4, r1, #3
     f18:	3321      	adds	r3, #33	; 0x21
     f1a:	1b1b      	subs	r3, r3, r4
            byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (x_set));
     f1c:	0084      	lsls	r4, r0, #2
     f1e:	1820      	adds	r0, r4, r0
     f20:	00c4      	lsls	r4, r0, #3
     f22:	1a20      	subs	r0, r4, r0
     f24:	181b      	adds	r3, r3, r0
            bit_set = y_set % 8;
     f26:	2007      	movs	r0, #7
     f28:	4001      	ands	r1, r0
     f2a:	e7dc      	b.n	ee6 <eink_ed037tc1_set_pixel_raw+0x3e>
            x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((x_set - (x_set % 8)) / 8);
     f2c:	10c4      	asrs	r4, r0, #3
     f2e:	2318      	movs	r3, #24
     f30:	33ff      	adds	r3, #255	; 0xff
     f32:	1b1b      	subs	r3, r3, r4
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (y_set * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
     f34:	2423      	movs	r4, #35	; 0x23
     f36:	4264      	negs	r4, r4
     f38:	4361      	muls	r1, r4
     f3a:	4c11      	ldr	r4, [pc, #68]	; (f80 <eink_ed037tc1_set_pixel_raw+0xd8>)
     f3c:	46a4      	mov	ip, r4
     f3e:	4461      	add	r1, ip
     f40:	185b      	adds	r3, r3, r1
            bit_set = x_set % 8;
     f42:	2107      	movs	r1, #7
     f44:	4001      	ands	r1, r0
     f46:	e7ce      	b.n	ee6 <eink_ed037tc1_set_pixel_raw+0x3e>
            y1_set = (y_set - (y_set % 8)) / 8;
     f48:	10cc      	asrs	r4, r1, #3
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (x_set * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
     f4a:	4b0d      	ldr	r3, [pc, #52]	; (f80 <eink_ed037tc1_set_pixel_raw+0xd8>)
     f4c:	469c      	mov	ip, r3
     f4e:	4464      	add	r4, ip
     f50:	2323      	movs	r3, #35	; 0x23
     f52:	425b      	negs	r3, r3
     f54:	4343      	muls	r3, r0
     f56:	18e3      	adds	r3, r4, r3
            bit_set = 7 - (y_set % 8);
     f58:	2007      	movs	r0, #7
     f5a:	4388      	bics	r0, r1
     f5c:	0001      	movs	r1, r0
     f5e:	e7c2      	b.n	ee6 <eink_ed037tc1_set_pixel_raw+0x3e>
        *byte |= 1 << bit_number;
     f60:	2001      	movs	r0, #1
     f62:	4088      	lsls	r0, r1
     f64:	7825      	ldrb	r5, [r4, #0]
     f66:	4328      	orrs	r0, r5
     f68:	7020      	strb	r0, [r4, #0]
     f6a:	e7c7      	b.n	efc <eink_ed037tc1_set_pixel_raw+0x54>
     f6c:	2201      	movs	r2, #1
     f6e:	408a      	lsls	r2, r1
     f70:	7819      	ldrb	r1, [r3, #0]
     f72:	430a      	orrs	r2, r1
     f74:	701a      	strb	r2, [r3, #0]
     f76:	e7cd      	b.n	f14 <eink_ed037tc1_set_pixel_raw+0x6c>
     f78:	20000414 	.word	0x20000414
     f7c:	20000434 	.word	0x20000434
     f80:	0000417d 	.word	0x0000417d

00000f84 <eink_ed037tc1_set_pixel>:
{
     f84:	b510      	push	{r4, lr}
    switch(pixel_colour) {
     f86:	2a00      	cmp	r2, #0
     f88:	d003      	beq.n	f92 <eink_ed037tc1_set_pixel+0xe>
            eink_ed037tc1_set_pixel_raw(x_set, y_set, 0xF);
     f8a:	220f      	movs	r2, #15
     f8c:	4b02      	ldr	r3, [pc, #8]	; (f98 <eink_ed037tc1_set_pixel+0x14>)
     f8e:	4798      	blx	r3
}
     f90:	bd10      	pop	{r4, pc}
            eink_ed037tc1_set_pixel_raw(x_set, y_set, 0x0);
     f92:	4b01      	ldr	r3, [pc, #4]	; (f98 <eink_ed037tc1_set_pixel+0x14>)
     f94:	4798      	blx	r3
            break;
     f96:	e7fb      	b.n	f90 <eink_ed037tc1_set_pixel+0xc>
     f98:	00000ea9 	.word	0x00000ea9

00000f9c <eink_ed037tc1_graphics_load_2bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_ed037tc1_graphics_load_2bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
     f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f9e:	46de      	mov	lr, fp
     fa0:	4657      	mov	r7, sl
     fa2:	464e      	mov	r6, r9
     fa4:	4645      	mov	r5, r8
     fa6:	b5e0      	push	{r5, r6, r7, lr}
     fa8:	b089      	sub	sp, #36	; 0x24
     faa:	9004      	str	r0, [sp, #16]
     fac:	4691      	mov	r9, r2
     fae:	0019      	movs	r1, r3
     fb0:	9305      	str	r3, [sp, #20]
     fb2:	ab12      	add	r3, sp, #72	; 0x48
     fb4:	881a      	ldrh	r2, [r3, #0]
     fb6:	9206      	str	r2, [sp, #24]
     fb8:	ab13      	add	r3, sp, #76	; 0x4c
     fba:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value[4];
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
     fbc:	464a      	mov	r2, r9
     fbe:	2a00      	cmp	r2, #0
     fc0:	d04a      	beq.n	1058 <eink_ed037tc1_graphics_load_2bgrey_image+0xbc>
     fc2:	2200      	movs	r2, #0
     fc4:	4693      	mov	fp, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
     fc6:	000a      	movs	r2, r1
     fc8:	3a01      	subs	r2, #1
     fca:	b292      	uxth	r2, r2
     fcc:	9202      	str	r2, [sp, #8]
            /* Process each pixel in byte  */
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
     fce:	9307      	str	r3, [sp, #28]
            bit_value[1] = ((img_array[(i*image_height_bytes)+j] >> 2) & 0x3);
            bit_value[2] = ((img_array[(i*image_height_bytes)+j] >> 4) & 0x3);
            bit_value[3] = ((img_array[(i*image_height_bytes)+j] >> 6) & 0x3);
            /* Set the pixel in the display buffer */
            eink_ed037tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
     fd0:	4f25      	ldr	r7, [pc, #148]	; (1068 <eink_ed037tc1_graphics_load_2bgrey_image+0xcc>)
     fd2:	464b      	mov	r3, r9
     fd4:	9303      	str	r3, [sp, #12]
        for (j = (image_height_bytes-1); j > 0; j--) {
     fd6:	9a02      	ldr	r2, [sp, #8]
     fd8:	4691      	mov	r9, r2
     fda:	2a00      	cmp	r2, #0
     fdc:	d035      	beq.n	104a <eink_ed037tc1_graphics_load_2bgrey_image+0xae>
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
     fde:	9e07      	ldr	r6, [sp, #28]
     fe0:	9b05      	ldr	r3, [sp, #20]
     fe2:	465a      	mov	r2, fp
     fe4:	4353      	muls	r3, r2
     fe6:	9a04      	ldr	r2, [sp, #16]
     fe8:	4692      	mov	sl, r2
     fea:	449a      	add	sl, r3
            eink_ed037tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
     fec:	9b06      	ldr	r3, [sp, #24]
     fee:	445b      	add	r3, fp
     ff0:	b29b      	uxth	r3, r3
     ff2:	9301      	str	r3, [sp, #4]
     ff4:	464d      	mov	r5, r9
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
     ff6:	4653      	mov	r3, sl
     ff8:	5d5c      	ldrb	r4, [r3, r5]
            eink_ed037tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
     ffa:	2303      	movs	r3, #3
     ffc:	4698      	mov	r8, r3
     ffe:	001a      	movs	r2, r3
    1000:	4022      	ands	r2, r4
    1002:	43d2      	mvns	r2, r2
    1004:	b2d2      	uxtb	r2, r2
    1006:	0031      	movs	r1, r6
    1008:	9801      	ldr	r0, [sp, #4]
    100a:	47b8      	blx	r7
            bit_value[1] = ((img_array[(i*image_height_bytes)+j] >> 2) & 0x3);
    100c:	08a2      	lsrs	r2, r4, #2
            eink_ed037tc1_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value[1]));
    100e:	4643      	mov	r3, r8
    1010:	401a      	ands	r2, r3
    1012:	43d2      	mvns	r2, r2
    1014:	b2d2      	uxtb	r2, r2
    1016:	1c71      	adds	r1, r6, #1
    1018:	b289      	uxth	r1, r1
    101a:	9801      	ldr	r0, [sp, #4]
    101c:	47b8      	blx	r7
            bit_value[2] = ((img_array[(i*image_height_bytes)+j] >> 4) & 0x3);
    101e:	0922      	lsrs	r2, r4, #4
            eink_ed037tc1_set_pixel_raw((x_place+i), (y_place+m+2), (~bit_value[2]));
    1020:	4643      	mov	r3, r8
    1022:	401a      	ands	r2, r3
    1024:	43d2      	mvns	r2, r2
    1026:	b2d2      	uxtb	r2, r2
    1028:	1cb1      	adds	r1, r6, #2
    102a:	b289      	uxth	r1, r1
    102c:	9801      	ldr	r0, [sp, #4]
    102e:	47b8      	blx	r7
            bit_value[3] = ((img_array[(i*image_height_bytes)+j] >> 6) & 0x3);
    1030:	09a4      	lsrs	r4, r4, #6
            eink_ed037tc1_set_pixel_raw((x_place+i), (y_place+m+3), (~bit_value[3]));
    1032:	43e2      	mvns	r2, r4
    1034:	b2d2      	uxtb	r2, r2
    1036:	1cf1      	adds	r1, r6, #3
    1038:	b289      	uxth	r1, r1
    103a:	9801      	ldr	r0, [sp, #4]
    103c:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    103e:	3d01      	subs	r5, #1
    1040:	b2ad      	uxth	r5, r5
    1042:	3604      	adds	r6, #4
    1044:	b2b6      	uxth	r6, r6
    1046:	2d00      	cmp	r5, #0
    1048:	d1d5      	bne.n	ff6 <eink_ed037tc1_graphics_load_2bgrey_image+0x5a>
    for (i = 0; i < image_width_px; i++) {
    104a:	465b      	mov	r3, fp
    104c:	3301      	adds	r3, #1
    104e:	b29b      	uxth	r3, r3
    1050:	469b      	mov	fp, r3
    1052:	9b03      	ldr	r3, [sp, #12]
    1054:	455b      	cmp	r3, fp
    1056:	d8be      	bhi.n	fd6 <eink_ed037tc1_graphics_load_2bgrey_image+0x3a>
            m += 4;
        }
    }
    return;
    1058:	b009      	add	sp, #36	; 0x24
    105a:	bc3c      	pop	{r2, r3, r4, r5}
    105c:	4690      	mov	r8, r2
    105e:	4699      	mov	r9, r3
    1060:	46a2      	mov	sl, r4
    1062:	46ab      	mov	fp, r5
    1064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	00000ea9 	.word	0x00000ea9

0000106c <eink_ed028tc1_set_pixel_raw>:
{    
    106c:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8177_global_instance.display_width) && (y_set >= 0) && (y_set < uc8177_global_instance.display_height) ) {
    106e:	4b4e      	ldr	r3, [pc, #312]	; (11a8 <eink_ed028tc1_set_pixel_raw+0x13c>)
    1070:	885b      	ldrh	r3, [r3, #2]
    1072:	b29b      	uxth	r3, r3
    1074:	4283      	cmp	r3, r0
    1076:	d944      	bls.n	1102 <eink_ed028tc1_set_pixel_raw+0x96>
    1078:	4b4b      	ldr	r3, [pc, #300]	; (11a8 <eink_ed028tc1_set_pixel_raw+0x13c>)
    107a:	889c      	ldrh	r4, [r3, #4]
    107c:	b2a4      	uxth	r4, r4
    107e:	428c      	cmp	r4, r1
    1080:	d93f      	bls.n	1102 <eink_ed028tc1_set_pixel_raw+0x96>
        if ( (uc8177_global_instance.display_config.display_rotation == ROTATE_0) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180) ) {
    1082:	781b      	ldrb	r3, [r3, #0]
    1084:	2b00      	cmp	r3, #0
    1086:	d00b      	beq.n	10a0 <eink_ed028tc1_set_pixel_raw+0x34>
    1088:	4b47      	ldr	r3, [pc, #284]	; (11a8 <eink_ed028tc1_set_pixel_raw+0x13c>)
    108a:	781b      	ldrb	r3, [r3, #0]
    108c:	2b02      	cmp	r3, #2
    108e:	d007      	beq.n	10a0 <eink_ed028tc1_set_pixel_raw+0x34>
            byte_set = x1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * y_set);
    1090:	1044      	asrs	r4, r0, #1
    1092:	2396      	movs	r3, #150	; 0x96
    1094:	005b      	lsls	r3, r3, #1
    1096:	434b      	muls	r3, r1
    1098:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    109a:	2101      	movs	r1, #1
    109c:	4001      	ands	r1, r0
    109e:	e006      	b.n	10ae <eink_ed028tc1_set_pixel_raw+0x42>
           byte_set = y1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * x_set);
    10a0:	104c      	asrs	r4, r1, #1
    10a2:	2396      	movs	r3, #150	; 0x96
    10a4:	005b      	lsls	r3, r3, #1
    10a6:	4343      	muls	r3, r0
    10a8:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    10aa:	2001      	movs	r0, #1
    10ac:	4001      	ands	r1, r0
        if (odd_even_bit) {
    10ae:	2900      	cmp	r1, #0
    10b0:	d128      	bne.n	1104 <eink_ed028tc1_set_pixel_raw+0x98>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_set >> 3) & 0x1));
    10b2:	493e      	ldr	r1, [pc, #248]	; (11ac <eink_ed028tc1_set_pixel_raw+0x140>)
    10b4:	6809      	ldr	r1, [r1, #0]
    10b6:	6909      	ldr	r1, [r1, #16]
    10b8:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    10ba:	0710      	lsls	r0, r2, #28
    10bc:	d45f      	bmi.n	117e <eink_ed028tc1_set_pixel_raw+0x112>
        *byte &= ~(1 << bit_number);
    10be:	780c      	ldrb	r4, [r1, #0]
    10c0:	207f      	movs	r0, #127	; 0x7f
    10c2:	4020      	ands	r0, r4
    10c4:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_set >> 2) & 0x1));
    10c6:	4939      	ldr	r1, [pc, #228]	; (11ac <eink_ed028tc1_set_pixel_raw+0x140>)
    10c8:	6809      	ldr	r1, [r1, #0]
    10ca:	6909      	ldr	r1, [r1, #16]
    10cc:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    10ce:	0750      	lsls	r0, r2, #29
    10d0:	d45b      	bmi.n	118a <eink_ed028tc1_set_pixel_raw+0x11e>
        *byte &= ~(1 << bit_number);
    10d2:	7808      	ldrb	r0, [r1, #0]
    10d4:	2440      	movs	r4, #64	; 0x40
    10d6:	43a0      	bics	r0, r4
    10d8:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_set >> 1) & 0x1));
    10da:	4934      	ldr	r1, [pc, #208]	; (11ac <eink_ed028tc1_set_pixel_raw+0x140>)
    10dc:	6809      	ldr	r1, [r1, #0]
    10de:	6909      	ldr	r1, [r1, #16]
    10e0:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    10e2:	0790      	lsls	r0, r2, #30
    10e4:	d456      	bmi.n	1194 <eink_ed028tc1_set_pixel_raw+0x128>
        *byte &= ~(1 << bit_number);
    10e6:	7808      	ldrb	r0, [r1, #0]
    10e8:	2420      	movs	r4, #32
    10ea:	43a0      	bics	r0, r4
    10ec:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_set & 0x1));
    10ee:	492f      	ldr	r1, [pc, #188]	; (11ac <eink_ed028tc1_set_pixel_raw+0x140>)
    10f0:	6809      	ldr	r1, [r1, #0]
    10f2:	6909      	ldr	r1, [r1, #16]
    10f4:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
    10f6:	07d2      	lsls	r2, r2, #31
    10f8:	d451      	bmi.n	119e <eink_ed028tc1_set_pixel_raw+0x132>
        *byte &= ~(1 << bit_number);
    10fa:	781a      	ldrb	r2, [r3, #0]
    10fc:	2110      	movs	r1, #16
    10fe:	438a      	bics	r2, r1
    1100:	701a      	strb	r2, [r3, #0]
}
    1102:	bd10      	pop	{r4, pc}
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_set >> 3) & 0x1));
    1104:	4929      	ldr	r1, [pc, #164]	; (11ac <eink_ed028tc1_set_pixel_raw+0x140>)
    1106:	6809      	ldr	r1, [r1, #0]
    1108:	6909      	ldr	r1, [r1, #16]
    110a:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    110c:	0710      	lsls	r0, r2, #28
    110e:	d422      	bmi.n	1156 <eink_ed028tc1_set_pixel_raw+0xea>
        *byte &= ~(1 << bit_number);
    1110:	7808      	ldrb	r0, [r1, #0]
    1112:	2408      	movs	r4, #8
    1114:	43a0      	bics	r0, r4
    1116:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_set >> 2) & 0x1));
    1118:	4924      	ldr	r1, [pc, #144]	; (11ac <eink_ed028tc1_set_pixel_raw+0x140>)
    111a:	6809      	ldr	r1, [r1, #0]
    111c:	6909      	ldr	r1, [r1, #16]
    111e:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1120:	0750      	lsls	r0, r2, #29
    1122:	d41d      	bmi.n	1160 <eink_ed028tc1_set_pixel_raw+0xf4>
        *byte &= ~(1 << bit_number);
    1124:	7808      	ldrb	r0, [r1, #0]
    1126:	2404      	movs	r4, #4
    1128:	43a0      	bics	r0, r4
    112a:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_set >> 1) & 0x1));
    112c:	491f      	ldr	r1, [pc, #124]	; (11ac <eink_ed028tc1_set_pixel_raw+0x140>)
    112e:	6809      	ldr	r1, [r1, #0]
    1130:	6909      	ldr	r1, [r1, #16]
    1132:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1134:	0790      	lsls	r0, r2, #30
    1136:	d418      	bmi.n	116a <eink_ed028tc1_set_pixel_raw+0xfe>
        *byte &= ~(1 << bit_number);
    1138:	7808      	ldrb	r0, [r1, #0]
    113a:	2402      	movs	r4, #2
    113c:	43a0      	bics	r0, r4
    113e:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_set & 0x1));
    1140:	491a      	ldr	r1, [pc, #104]	; (11ac <eink_ed028tc1_set_pixel_raw+0x140>)
    1142:	6809      	ldr	r1, [r1, #0]
    1144:	6909      	ldr	r1, [r1, #16]
    1146:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
    1148:	07d2      	lsls	r2, r2, #31
    114a:	d413      	bmi.n	1174 <eink_ed028tc1_set_pixel_raw+0x108>
        *byte &= ~(1 << bit_number);
    114c:	781a      	ldrb	r2, [r3, #0]
    114e:	2101      	movs	r1, #1
    1150:	438a      	bics	r2, r1
    1152:	701a      	strb	r2, [r3, #0]
    1154:	e7d5      	b.n	1102 <eink_ed028tc1_set_pixel_raw+0x96>
        *byte |= 1 << bit_number;
    1156:	7808      	ldrb	r0, [r1, #0]
    1158:	2408      	movs	r4, #8
    115a:	4320      	orrs	r0, r4
    115c:	7008      	strb	r0, [r1, #0]
    115e:	e7db      	b.n	1118 <eink_ed028tc1_set_pixel_raw+0xac>
    1160:	7808      	ldrb	r0, [r1, #0]
    1162:	2404      	movs	r4, #4
    1164:	4320      	orrs	r0, r4
    1166:	7008      	strb	r0, [r1, #0]
    1168:	e7e0      	b.n	112c <eink_ed028tc1_set_pixel_raw+0xc0>
    116a:	7808      	ldrb	r0, [r1, #0]
    116c:	2402      	movs	r4, #2
    116e:	4320      	orrs	r0, r4
    1170:	7008      	strb	r0, [r1, #0]
    1172:	e7e5      	b.n	1140 <eink_ed028tc1_set_pixel_raw+0xd4>
    1174:	781a      	ldrb	r2, [r3, #0]
    1176:	2101      	movs	r1, #1
    1178:	430a      	orrs	r2, r1
    117a:	701a      	strb	r2, [r3, #0]
    117c:	e7c1      	b.n	1102 <eink_ed028tc1_set_pixel_raw+0x96>
    117e:	780c      	ldrb	r4, [r1, #0]
    1180:	2080      	movs	r0, #128	; 0x80
    1182:	4240      	negs	r0, r0
    1184:	4320      	orrs	r0, r4
    1186:	7008      	strb	r0, [r1, #0]
    1188:	e79d      	b.n	10c6 <eink_ed028tc1_set_pixel_raw+0x5a>
    118a:	7808      	ldrb	r0, [r1, #0]
    118c:	2440      	movs	r4, #64	; 0x40
    118e:	4320      	orrs	r0, r4
    1190:	7008      	strb	r0, [r1, #0]
    1192:	e7a2      	b.n	10da <eink_ed028tc1_set_pixel_raw+0x6e>
    1194:	7808      	ldrb	r0, [r1, #0]
    1196:	2420      	movs	r4, #32
    1198:	4320      	orrs	r0, r4
    119a:	7008      	strb	r0, [r1, #0]
    119c:	e7a7      	b.n	10ee <eink_ed028tc1_set_pixel_raw+0x82>
    119e:	781a      	ldrb	r2, [r3, #0]
    11a0:	2110      	movs	r1, #16
    11a2:	430a      	orrs	r2, r1
    11a4:	701a      	strb	r2, [r3, #0]
    11a6:	e7ac      	b.n	1102 <eink_ed028tc1_set_pixel_raw+0x96>
    11a8:	200003b0 	.word	0x200003b0
    11ac:	20000434 	.word	0x20000434

000011b0 <eink_ed028tc1_set_pixel>:
{    
    11b0:	b510      	push	{r4, lr}
    switch(pixel_colour) {
    11b2:	2a00      	cmp	r2, #0
    11b4:	d003      	beq.n	11be <eink_ed028tc1_set_pixel+0xe>
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0xF);
    11b6:	220f      	movs	r2, #15
    11b8:	4b02      	ldr	r3, [pc, #8]	; (11c4 <eink_ed028tc1_set_pixel+0x14>)
    11ba:	4798      	blx	r3
}
    11bc:	bd10      	pop	{r4, pc}
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0x0);
    11be:	4b01      	ldr	r3, [pc, #4]	; (11c4 <eink_ed028tc1_set_pixel+0x14>)
    11c0:	4798      	blx	r3
            break;
    11c2:	e7fb      	b.n	11bc <eink_ed028tc1_set_pixel+0xc>
    11c4:	0000106d 	.word	0x0000106d

000011c8 <eink_ed028tc1_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_ed028tc1_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    11c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ca:	46de      	mov	lr, fp
    11cc:	4657      	mov	r7, sl
    11ce:	464e      	mov	r6, r9
    11d0:	4645      	mov	r5, r8
    11d2:	b5e0      	push	{r5, r6, r7, lr}
    11d4:	b087      	sub	sp, #28
    11d6:	9002      	str	r0, [sp, #8]
    11d8:	4693      	mov	fp, r2
    11da:	0019      	movs	r1, r3
    11dc:	9303      	str	r3, [sp, #12]
    11de:	ab10      	add	r3, sp, #64	; 0x40
    11e0:	881a      	ldrh	r2, [r3, #0]
    11e2:	4690      	mov	r8, r2
    11e4:	ab11      	add	r3, sp, #68	; 0x44
    11e6:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value_1, bit_value_2;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    11e8:	465a      	mov	r2, fp
    11ea:	2a00      	cmp	r2, #0
    11ec:	d034      	beq.n	1258 <eink_ed028tc1_graphics_load_4bgrey_image+0x90>
    11ee:	2200      	movs	r2, #0
    11f0:	4692      	mov	sl, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
    11f2:	000a      	movs	r2, r1
    11f4:	3a01      	subs	r2, #1
    11f6:	b292      	uxth	r2, r2
    11f8:	4691      	mov	r9, r2
            /* Process each pixel in byte  */
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    11fa:	9304      	str	r3, [sp, #16]
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
            /* Set the pixel in the display buffer */
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    11fc:	4f1a      	ldr	r7, [pc, #104]	; (1268 <eink_ed028tc1_graphics_load_4bgrey_image+0xa0>)
    11fe:	4643      	mov	r3, r8
    1200:	9305      	str	r3, [sp, #20]
        for (j = (image_height_bytes-1); j > 0; j--) {
    1202:	464b      	mov	r3, r9
    1204:	464d      	mov	r5, r9
    1206:	2b00      	cmp	r3, #0
    1208:	d020      	beq.n	124c <eink_ed028tc1_graphics_load_4bgrey_image+0x84>
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    120a:	9e04      	ldr	r6, [sp, #16]
    120c:	9b03      	ldr	r3, [sp, #12]
    120e:	4652      	mov	r2, sl
    1210:	4353      	muls	r3, r2
    1212:	9a02      	ldr	r2, [sp, #8]
    1214:	4690      	mov	r8, r2
    1216:	4498      	add	r8, r3
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    1218:	9b05      	ldr	r3, [sp, #20]
    121a:	4453      	add	r3, sl
    121c:	b29b      	uxth	r3, r3
    121e:	9301      	str	r3, [sp, #4]
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    1220:	4643      	mov	r3, r8
    1222:	5d5c      	ldrb	r4, [r3, r5]
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    1224:	220f      	movs	r2, #15
    1226:	4022      	ands	r2, r4
    1228:	43d2      	mvns	r2, r2
    122a:	b2d2      	uxtb	r2, r2
    122c:	0031      	movs	r1, r6
    122e:	9801      	ldr	r0, [sp, #4]
    1230:	47b8      	blx	r7
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    1232:	0924      	lsrs	r4, r4, #4
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value_2));
    1234:	43e2      	mvns	r2, r4
    1236:	b2d2      	uxtb	r2, r2
    1238:	1c71      	adds	r1, r6, #1
    123a:	b289      	uxth	r1, r1
    123c:	9801      	ldr	r0, [sp, #4]
    123e:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    1240:	3d01      	subs	r5, #1
    1242:	b2ad      	uxth	r5, r5
    1244:	3602      	adds	r6, #2
    1246:	b2b6      	uxth	r6, r6
    1248:	2d00      	cmp	r5, #0
    124a:	d1e9      	bne.n	1220 <eink_ed028tc1_graphics_load_4bgrey_image+0x58>
    for (i = 0; i < image_width_px; i++) {
    124c:	4653      	mov	r3, sl
    124e:	3301      	adds	r3, #1
    1250:	b29b      	uxth	r3, r3
    1252:	469a      	mov	sl, r3
    1254:	459b      	cmp	fp, r3
    1256:	d8d4      	bhi.n	1202 <eink_ed028tc1_graphics_load_4bgrey_image+0x3a>
            m += 2;
        }
    }
    return;
    1258:	b007      	add	sp, #28
    125a:	bc3c      	pop	{r2, r3, r4, r5}
    125c:	4690      	mov	r8, r2
    125e:	4699      	mov	r9, r3
    1260:	46a2      	mov	sl, r4
    1262:	46ab      	mov	fp, r5
    1264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	0000106d 	.word	0x0000106d

0000126c <eink_ed057tc2_set_pixel>:
{
    126c:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    126e:	4b36      	ldr	r3, [pc, #216]	; (1348 <eink_ed057tc2_set_pixel+0xdc>)
    1270:	889b      	ldrh	r3, [r3, #4]
    1272:	b29b      	uxth	r3, r3
    1274:	4283      	cmp	r3, r0
    1276:	d919      	bls.n	12ac <eink_ed057tc2_set_pixel+0x40>
    1278:	4b33      	ldr	r3, [pc, #204]	; (1348 <eink_ed057tc2_set_pixel+0xdc>)
    127a:	88db      	ldrh	r3, [r3, #6]
    127c:	b29b      	uxth	r3, r3
    127e:	428b      	cmp	r3, r1
    1280:	d914      	bls.n	12ac <eink_ed057tc2_set_pixel+0x40>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    1282:	4b31      	ldr	r3, [pc, #196]	; (1348 <eink_ed057tc2_set_pixel+0xdc>)
    1284:	785b      	ldrb	r3, [r3, #1]
    1286:	2b01      	cmp	r3, #1
    1288:	d011      	beq.n	12ae <eink_ed057tc2_set_pixel+0x42>
    128a:	4b2f      	ldr	r3, [pc, #188]	; (1348 <eink_ed057tc2_set_pixel+0xdc>)
    128c:	785b      	ldrb	r3, [r3, #1]
    128e:	2b03      	cmp	r3, #3
    1290:	d00d      	beq.n	12ae <eink_ed057tc2_set_pixel+0x42>
            byte_set = x1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * y_set);
    1292:	1044      	asrs	r4, r0, #1
    1294:	2396      	movs	r3, #150	; 0x96
    1296:	005b      	lsls	r3, r3, #1
    1298:	434b      	muls	r3, r1
    129a:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    129c:	2101      	movs	r1, #1
    129e:	4008      	ands	r0, r1
        if (odd_even_bit) {
    12a0:	2800      	cmp	r0, #0
    12a2:	d02c      	beq.n	12fe <eink_ed057tc2_set_pixel+0x92>
            switch(pixel_colour) {
    12a4:	2a00      	cmp	r2, #0
    12a6:	d00a      	beq.n	12be <eink_ed057tc2_set_pixel+0x52>
    12a8:	2a01      	cmp	r2, #1
    12aa:	d018      	beq.n	12de <eink_ed057tc2_set_pixel+0x72>
}
    12ac:	bd10      	pop	{r4, pc}
           byte_set = y1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * x_set);
    12ae:	104c      	asrs	r4, r1, #1
    12b0:	2396      	movs	r3, #150	; 0x96
    12b2:	005b      	lsls	r3, r3, #1
    12b4:	4343      	muls	r3, r0
    12b6:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    12b8:	2001      	movs	r0, #1
    12ba:	4008      	ands	r0, r1
    12bc:	e7f0      	b.n	12a0 <eink_ed057tc2_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    12be:	4823      	ldr	r0, [pc, #140]	; (134c <eink_ed057tc2_set_pixel+0xe0>)
    12c0:	6802      	ldr	r2, [r0, #0]
    12c2:	6912      	ldr	r2, [r2, #16]
    12c4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    12c6:	7811      	ldrb	r1, [r2, #0]
    12c8:	2402      	movs	r4, #2
    12ca:	43a1      	bics	r1, r4
    12cc:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    12ce:	6802      	ldr	r2, [r0, #0]
    12d0:	6911      	ldr	r1, [r2, #16]
    12d2:	18cb      	adds	r3, r1, r3
    12d4:	781a      	ldrb	r2, [r3, #0]
    12d6:	2101      	movs	r1, #1
    12d8:	438a      	bics	r2, r1
    12da:	701a      	strb	r2, [r3, #0]
    12dc:	e7e6      	b.n	12ac <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    12de:	481b      	ldr	r0, [pc, #108]	; (134c <eink_ed057tc2_set_pixel+0xe0>)
    12e0:	6802      	ldr	r2, [r0, #0]
    12e2:	6912      	ldr	r2, [r2, #16]
    12e4:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    12e6:	7811      	ldrb	r1, [r2, #0]
    12e8:	2402      	movs	r4, #2
    12ea:	4321      	orrs	r1, r4
    12ec:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    12ee:	6802      	ldr	r2, [r0, #0]
    12f0:	6911      	ldr	r1, [r2, #16]
    12f2:	18cb      	adds	r3, r1, r3
    12f4:	781a      	ldrb	r2, [r3, #0]
    12f6:	2101      	movs	r1, #1
    12f8:	430a      	orrs	r2, r1
    12fa:	701a      	strb	r2, [r3, #0]
    12fc:	e7d6      	b.n	12ac <eink_ed057tc2_set_pixel+0x40>
            switch(pixel_colour) {
    12fe:	2a00      	cmp	r2, #0
    1300:	d011      	beq.n	1326 <eink_ed057tc2_set_pixel+0xba>
    1302:	2a01      	cmp	r2, #1
    1304:	d1d2      	bne.n	12ac <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1306:	4811      	ldr	r0, [pc, #68]	; (134c <eink_ed057tc2_set_pixel+0xe0>)
    1308:	6802      	ldr	r2, [r0, #0]
    130a:	6912      	ldr	r2, [r2, #16]
    130c:	18d2      	adds	r2, r2, r3
    130e:	7811      	ldrb	r1, [r2, #0]
    1310:	2420      	movs	r4, #32
    1312:	4321      	orrs	r1, r4
    1314:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1316:	6802      	ldr	r2, [r0, #0]
    1318:	6911      	ldr	r1, [r2, #16]
    131a:	18cb      	adds	r3, r1, r3
    131c:	781a      	ldrb	r2, [r3, #0]
    131e:	2110      	movs	r1, #16
    1320:	430a      	orrs	r2, r1
    1322:	701a      	strb	r2, [r3, #0]
}
    1324:	e7c2      	b.n	12ac <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1326:	4809      	ldr	r0, [pc, #36]	; (134c <eink_ed057tc2_set_pixel+0xe0>)
    1328:	6802      	ldr	r2, [r0, #0]
    132a:	6912      	ldr	r2, [r2, #16]
    132c:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    132e:	7811      	ldrb	r1, [r2, #0]
    1330:	2420      	movs	r4, #32
    1332:	43a1      	bics	r1, r4
    1334:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1336:	6802      	ldr	r2, [r0, #0]
    1338:	6911      	ldr	r1, [r2, #16]
    133a:	18cb      	adds	r3, r1, r3
    133c:	781a      	ldrb	r2, [r3, #0]
    133e:	2110      	movs	r1, #16
    1340:	438a      	bics	r2, r1
    1342:	701a      	strb	r2, [r3, #0]
    1344:	e7b2      	b.n	12ac <eink_ed057tc2_set_pixel+0x40>
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	20000408 	.word	0x20000408
    134c:	20000434 	.word	0x20000434

00001350 <eink_ac057tc1_set_pixel>:
{
    1350:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1352:	4bd0      	ldr	r3, [pc, #832]	; (1694 <eink_ac057tc1_set_pixel+0x344>)
    1354:	889b      	ldrh	r3, [r3, #4]
    1356:	b29b      	uxth	r3, r3
    1358:	4283      	cmp	r3, r0
    135a:	d93a      	bls.n	13d2 <eink_ac057tc1_set_pixel+0x82>
    135c:	4bcd      	ldr	r3, [pc, #820]	; (1694 <eink_ac057tc1_set_pixel+0x344>)
    135e:	88db      	ldrh	r3, [r3, #6]
    1360:	b29b      	uxth	r3, r3
    1362:	428b      	cmp	r3, r1
    1364:	d935      	bls.n	13d2 <eink_ac057tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    1366:	4bcb      	ldr	r3, [pc, #812]	; (1694 <eink_ac057tc1_set_pixel+0x344>)
    1368:	785b      	ldrb	r3, [r3, #1]
    136a:	2b01      	cmp	r3, #1
    136c:	d013      	beq.n	1396 <eink_ac057tc1_set_pixel+0x46>
    136e:	4bc9      	ldr	r3, [pc, #804]	; (1694 <eink_ac057tc1_set_pixel+0x344>)
    1370:	785b      	ldrb	r3, [r3, #1]
    1372:	2b03      	cmp	r3, #3
    1374:	d00f      	beq.n	1396 <eink_ac057tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * y_set);
    1376:	1044      	asrs	r4, r0, #1
    1378:	2396      	movs	r3, #150	; 0x96
    137a:	005b      	lsls	r3, r3, #1
    137c:	434b      	muls	r3, r1
    137e:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    1380:	2101      	movs	r1, #1
    1382:	4008      	ands	r0, r1
        if (odd_even_bit) {
    1384:	2800      	cmp	r0, #0
    1386:	d100      	bne.n	138a <eink_ac057tc1_set_pixel+0x3a>
    1388:	e0c5      	b.n	1516 <eink_ac057tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    138a:	2a07      	cmp	r2, #7
    138c:	d821      	bhi.n	13d2 <eink_ac057tc1_set_pixel+0x82>
    138e:	0092      	lsls	r2, r2, #2
    1390:	49c1      	ldr	r1, [pc, #772]	; (1698 <eink_ac057tc1_set_pixel+0x348>)
    1392:	588a      	ldr	r2, [r1, r2]
    1394:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * x_set);
    1396:	104c      	asrs	r4, r1, #1
    1398:	2396      	movs	r3, #150	; 0x96
    139a:	005b      	lsls	r3, r3, #1
    139c:	4343      	muls	r3, r0
    139e:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    13a0:	2001      	movs	r0, #1
    13a2:	4008      	ands	r0, r1
    13a4:	e7ee      	b.n	1384 <eink_ac057tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    13a6:	49bd      	ldr	r1, [pc, #756]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    13a8:	680a      	ldr	r2, [r1, #0]
    13aa:	6912      	ldr	r2, [r2, #16]
    13ac:	18d2      	adds	r2, r2, r3
    13ae:	7810      	ldrb	r0, [r2, #0]
    13b0:	2404      	movs	r4, #4
    13b2:	43a0      	bics	r0, r4
    13b4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    13b6:	680a      	ldr	r2, [r1, #0]
    13b8:	6912      	ldr	r2, [r2, #16]
    13ba:	18d2      	adds	r2, r2, r3
    13bc:	7810      	ldrb	r0, [r2, #0]
    13be:	3c02      	subs	r4, #2
    13c0:	43a0      	bics	r0, r4
    13c2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    13c4:	680a      	ldr	r2, [r1, #0]
    13c6:	6911      	ldr	r1, [r2, #16]
    13c8:	18cb      	adds	r3, r1, r3
    13ca:	781a      	ldrb	r2, [r3, #0]
    13cc:	2101      	movs	r1, #1
    13ce:	438a      	bics	r2, r1
    13d0:	701a      	strb	r2, [r3, #0]
}
    13d2:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    13d4:	49b1      	ldr	r1, [pc, #708]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    13d6:	680a      	ldr	r2, [r1, #0]
    13d8:	6912      	ldr	r2, [r2, #16]
    13da:	18d2      	adds	r2, r2, r3
    13dc:	7810      	ldrb	r0, [r2, #0]
    13de:	2404      	movs	r4, #4
    13e0:	43a0      	bics	r0, r4
    13e2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    13e4:	680a      	ldr	r2, [r1, #0]
    13e6:	6912      	ldr	r2, [r2, #16]
    13e8:	18d2      	adds	r2, r2, r3
    13ea:	7810      	ldrb	r0, [r2, #0]
    13ec:	3c02      	subs	r4, #2
    13ee:	43a0      	bics	r0, r4
    13f0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    13f2:	680a      	ldr	r2, [r1, #0]
    13f4:	6911      	ldr	r1, [r2, #16]
    13f6:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    13f8:	781a      	ldrb	r2, [r3, #0]
    13fa:	2101      	movs	r1, #1
    13fc:	430a      	orrs	r2, r1
    13fe:	701a      	strb	r2, [r3, #0]
    1400:	e7e7      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1402:	49a6      	ldr	r1, [pc, #664]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    1404:	680a      	ldr	r2, [r1, #0]
    1406:	6912      	ldr	r2, [r2, #16]
    1408:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    140a:	7810      	ldrb	r0, [r2, #0]
    140c:	2404      	movs	r4, #4
    140e:	43a0      	bics	r0, r4
    1410:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1412:	680a      	ldr	r2, [r1, #0]
    1414:	6912      	ldr	r2, [r2, #16]
    1416:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1418:	7810      	ldrb	r0, [r2, #0]
    141a:	2402      	movs	r4, #2
    141c:	4320      	orrs	r0, r4
    141e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1420:	680a      	ldr	r2, [r1, #0]
    1422:	6911      	ldr	r1, [r2, #16]
    1424:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1426:	781a      	ldrb	r2, [r3, #0]
    1428:	2101      	movs	r1, #1
    142a:	438a      	bics	r2, r1
    142c:	701a      	strb	r2, [r3, #0]
    142e:	e7d0      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1430:	499a      	ldr	r1, [pc, #616]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    1432:	680a      	ldr	r2, [r1, #0]
    1434:	6912      	ldr	r2, [r2, #16]
    1436:	18d2      	adds	r2, r2, r3
    1438:	7810      	ldrb	r0, [r2, #0]
    143a:	2404      	movs	r4, #4
    143c:	43a0      	bics	r0, r4
    143e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1440:	680a      	ldr	r2, [r1, #0]
    1442:	6912      	ldr	r2, [r2, #16]
    1444:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1446:	7810      	ldrb	r0, [r2, #0]
    1448:	2402      	movs	r4, #2
    144a:	4320      	orrs	r0, r4
    144c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    144e:	680a      	ldr	r2, [r1, #0]
    1450:	6911      	ldr	r1, [r2, #16]
    1452:	18cb      	adds	r3, r1, r3
    1454:	781a      	ldrb	r2, [r3, #0]
    1456:	2101      	movs	r1, #1
    1458:	430a      	orrs	r2, r1
    145a:	701a      	strb	r2, [r3, #0]
    145c:	e7b9      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    145e:	498f      	ldr	r1, [pc, #572]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    1460:	680a      	ldr	r2, [r1, #0]
    1462:	6912      	ldr	r2, [r2, #16]
    1464:	18d2      	adds	r2, r2, r3
    1466:	7810      	ldrb	r0, [r2, #0]
    1468:	2404      	movs	r4, #4
    146a:	4320      	orrs	r0, r4
    146c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    146e:	680a      	ldr	r2, [r1, #0]
    1470:	6912      	ldr	r2, [r2, #16]
    1472:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1474:	7810      	ldrb	r0, [r2, #0]
    1476:	2402      	movs	r4, #2
    1478:	43a0      	bics	r0, r4
    147a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    147c:	680a      	ldr	r2, [r1, #0]
    147e:	6911      	ldr	r1, [r2, #16]
    1480:	18cb      	adds	r3, r1, r3
    1482:	781a      	ldrb	r2, [r3, #0]
    1484:	2101      	movs	r1, #1
    1486:	438a      	bics	r2, r1
    1488:	701a      	strb	r2, [r3, #0]
    148a:	e7a2      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    148c:	4983      	ldr	r1, [pc, #524]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    148e:	680a      	ldr	r2, [r1, #0]
    1490:	6912      	ldr	r2, [r2, #16]
    1492:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1494:	7810      	ldrb	r0, [r2, #0]
    1496:	2404      	movs	r4, #4
    1498:	4320      	orrs	r0, r4
    149a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    149c:	680a      	ldr	r2, [r1, #0]
    149e:	6912      	ldr	r2, [r2, #16]
    14a0:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    14a2:	7810      	ldrb	r0, [r2, #0]
    14a4:	2402      	movs	r4, #2
    14a6:	43a0      	bics	r0, r4
    14a8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    14aa:	680a      	ldr	r2, [r1, #0]
    14ac:	6911      	ldr	r1, [r2, #16]
    14ae:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    14b0:	781a      	ldrb	r2, [r3, #0]
    14b2:	2101      	movs	r1, #1
    14b4:	430a      	orrs	r2, r1
    14b6:	701a      	strb	r2, [r3, #0]
    14b8:	e78b      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    14ba:	4978      	ldr	r1, [pc, #480]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    14bc:	680a      	ldr	r2, [r1, #0]
    14be:	6912      	ldr	r2, [r2, #16]
    14c0:	18d2      	adds	r2, r2, r3
    14c2:	7810      	ldrb	r0, [r2, #0]
    14c4:	2404      	movs	r4, #4
    14c6:	4320      	orrs	r0, r4
    14c8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    14ca:	680a      	ldr	r2, [r1, #0]
    14cc:	6912      	ldr	r2, [r2, #16]
    14ce:	18d2      	adds	r2, r2, r3
    14d0:	7810      	ldrb	r0, [r2, #0]
    14d2:	2402      	movs	r4, #2
    14d4:	4320      	orrs	r0, r4
    14d6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    14d8:	680a      	ldr	r2, [r1, #0]
    14da:	6911      	ldr	r1, [r2, #16]
    14dc:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    14de:	781a      	ldrb	r2, [r3, #0]
    14e0:	2101      	movs	r1, #1
    14e2:	438a      	bics	r2, r1
    14e4:	701a      	strb	r2, [r3, #0]
    14e6:	e774      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    14e8:	496c      	ldr	r1, [pc, #432]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    14ea:	680a      	ldr	r2, [r1, #0]
    14ec:	6912      	ldr	r2, [r2, #16]
    14ee:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    14f0:	7810      	ldrb	r0, [r2, #0]
    14f2:	2404      	movs	r4, #4
    14f4:	4320      	orrs	r0, r4
    14f6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    14f8:	680a      	ldr	r2, [r1, #0]
    14fa:	6912      	ldr	r2, [r2, #16]
    14fc:	18d2      	adds	r2, r2, r3
    14fe:	7810      	ldrb	r0, [r2, #0]
    1500:	2402      	movs	r4, #2
    1502:	4320      	orrs	r0, r4
    1504:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1506:	680a      	ldr	r2, [r1, #0]
    1508:	6911      	ldr	r1, [r2, #16]
    150a:	18cb      	adds	r3, r1, r3
    150c:	781a      	ldrb	r2, [r3, #0]
    150e:	2101      	movs	r1, #1
    1510:	430a      	orrs	r2, r1
    1512:	701a      	strb	r2, [r3, #0]
    1514:	e75d      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
            switch(pixel_colour) {
    1516:	2a07      	cmp	r2, #7
    1518:	d900      	bls.n	151c <eink_ac057tc1_set_pixel+0x1cc>
    151a:	e75a      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
    151c:	0092      	lsls	r2, r2, #2
    151e:	4960      	ldr	r1, [pc, #384]	; (16a0 <eink_ac057tc1_set_pixel+0x350>)
    1520:	588a      	ldr	r2, [r1, r2]
    1522:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1524:	495d      	ldr	r1, [pc, #372]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    1526:	680a      	ldr	r2, [r1, #0]
    1528:	6912      	ldr	r2, [r2, #16]
    152a:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    152c:	7810      	ldrb	r0, [r2, #0]
    152e:	2440      	movs	r4, #64	; 0x40
    1530:	43a0      	bics	r0, r4
    1532:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1534:	680a      	ldr	r2, [r1, #0]
    1536:	6912      	ldr	r2, [r2, #16]
    1538:	18d2      	adds	r2, r2, r3
    153a:	7810      	ldrb	r0, [r2, #0]
    153c:	3c20      	subs	r4, #32
    153e:	43a0      	bics	r0, r4
    1540:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1542:	680a      	ldr	r2, [r1, #0]
    1544:	6911      	ldr	r1, [r2, #16]
    1546:	18cb      	adds	r3, r1, r3
    1548:	781a      	ldrb	r2, [r3, #0]
    154a:	2110      	movs	r1, #16
    154c:	438a      	bics	r2, r1
    154e:	701a      	strb	r2, [r3, #0]
    1550:	e73f      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1552:	4952      	ldr	r1, [pc, #328]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    1554:	680a      	ldr	r2, [r1, #0]
    1556:	6912      	ldr	r2, [r2, #16]
    1558:	18d2      	adds	r2, r2, r3
    155a:	7810      	ldrb	r0, [r2, #0]
    155c:	2440      	movs	r4, #64	; 0x40
    155e:	43a0      	bics	r0, r4
    1560:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1562:	680a      	ldr	r2, [r1, #0]
    1564:	6912      	ldr	r2, [r2, #16]
    1566:	18d2      	adds	r2, r2, r3
    1568:	7810      	ldrb	r0, [r2, #0]
    156a:	3c20      	subs	r4, #32
    156c:	43a0      	bics	r0, r4
    156e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1570:	680a      	ldr	r2, [r1, #0]
    1572:	6911      	ldr	r1, [r2, #16]
    1574:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1576:	781a      	ldrb	r2, [r3, #0]
    1578:	2110      	movs	r1, #16
    157a:	430a      	orrs	r2, r1
    157c:	701a      	strb	r2, [r3, #0]
    157e:	e728      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1580:	4946      	ldr	r1, [pc, #280]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    1582:	680a      	ldr	r2, [r1, #0]
    1584:	6912      	ldr	r2, [r2, #16]
    1586:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1588:	7810      	ldrb	r0, [r2, #0]
    158a:	2440      	movs	r4, #64	; 0x40
    158c:	43a0      	bics	r0, r4
    158e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1590:	680a      	ldr	r2, [r1, #0]
    1592:	6912      	ldr	r2, [r2, #16]
    1594:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1596:	7810      	ldrb	r0, [r2, #0]
    1598:	2420      	movs	r4, #32
    159a:	4320      	orrs	r0, r4
    159c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    159e:	680a      	ldr	r2, [r1, #0]
    15a0:	6911      	ldr	r1, [r2, #16]
    15a2:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    15a4:	781a      	ldrb	r2, [r3, #0]
    15a6:	2110      	movs	r1, #16
    15a8:	438a      	bics	r2, r1
    15aa:	701a      	strb	r2, [r3, #0]
    15ac:	e711      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    15ae:	493b      	ldr	r1, [pc, #236]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    15b0:	680a      	ldr	r2, [r1, #0]
    15b2:	6912      	ldr	r2, [r2, #16]
    15b4:	18d2      	adds	r2, r2, r3
    15b6:	7810      	ldrb	r0, [r2, #0]
    15b8:	2440      	movs	r4, #64	; 0x40
    15ba:	43a0      	bics	r0, r4
    15bc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    15be:	680a      	ldr	r2, [r1, #0]
    15c0:	6912      	ldr	r2, [r2, #16]
    15c2:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    15c4:	7810      	ldrb	r0, [r2, #0]
    15c6:	2420      	movs	r4, #32
    15c8:	4320      	orrs	r0, r4
    15ca:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    15cc:	680a      	ldr	r2, [r1, #0]
    15ce:	6911      	ldr	r1, [r2, #16]
    15d0:	18cb      	adds	r3, r1, r3
    15d2:	781a      	ldrb	r2, [r3, #0]
    15d4:	2110      	movs	r1, #16
    15d6:	430a      	orrs	r2, r1
    15d8:	701a      	strb	r2, [r3, #0]
    15da:	e6fa      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    15dc:	492f      	ldr	r1, [pc, #188]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    15de:	680a      	ldr	r2, [r1, #0]
    15e0:	6912      	ldr	r2, [r2, #16]
    15e2:	18d2      	adds	r2, r2, r3
    15e4:	7810      	ldrb	r0, [r2, #0]
    15e6:	2440      	movs	r4, #64	; 0x40
    15e8:	4320      	orrs	r0, r4
    15ea:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    15ec:	680a      	ldr	r2, [r1, #0]
    15ee:	6912      	ldr	r2, [r2, #16]
    15f0:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    15f2:	7810      	ldrb	r0, [r2, #0]
    15f4:	2420      	movs	r4, #32
    15f6:	43a0      	bics	r0, r4
    15f8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    15fa:	680a      	ldr	r2, [r1, #0]
    15fc:	6911      	ldr	r1, [r2, #16]
    15fe:	18cb      	adds	r3, r1, r3
    1600:	781a      	ldrb	r2, [r3, #0]
    1602:	2110      	movs	r1, #16
    1604:	438a      	bics	r2, r1
    1606:	701a      	strb	r2, [r3, #0]
    1608:	e6e3      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    160a:	4924      	ldr	r1, [pc, #144]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    160c:	680a      	ldr	r2, [r1, #0]
    160e:	6912      	ldr	r2, [r2, #16]
    1610:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1612:	7810      	ldrb	r0, [r2, #0]
    1614:	2440      	movs	r4, #64	; 0x40
    1616:	4320      	orrs	r0, r4
    1618:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    161a:	680a      	ldr	r2, [r1, #0]
    161c:	6912      	ldr	r2, [r2, #16]
    161e:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1620:	7810      	ldrb	r0, [r2, #0]
    1622:	2420      	movs	r4, #32
    1624:	43a0      	bics	r0, r4
    1626:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1628:	680a      	ldr	r2, [r1, #0]
    162a:	6911      	ldr	r1, [r2, #16]
    162c:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    162e:	781a      	ldrb	r2, [r3, #0]
    1630:	2110      	movs	r1, #16
    1632:	430a      	orrs	r2, r1
    1634:	701a      	strb	r2, [r3, #0]
    1636:	e6cc      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1638:	4918      	ldr	r1, [pc, #96]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    163a:	680a      	ldr	r2, [r1, #0]
    163c:	6912      	ldr	r2, [r2, #16]
    163e:	18d2      	adds	r2, r2, r3
    1640:	7810      	ldrb	r0, [r2, #0]
    1642:	2440      	movs	r4, #64	; 0x40
    1644:	4320      	orrs	r0, r4
    1646:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1648:	680a      	ldr	r2, [r1, #0]
    164a:	6912      	ldr	r2, [r2, #16]
    164c:	18d2      	adds	r2, r2, r3
    164e:	7810      	ldrb	r0, [r2, #0]
    1650:	2420      	movs	r4, #32
    1652:	4320      	orrs	r0, r4
    1654:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1656:	680a      	ldr	r2, [r1, #0]
    1658:	6911      	ldr	r1, [r2, #16]
    165a:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    165c:	781a      	ldrb	r2, [r3, #0]
    165e:	2110      	movs	r1, #16
    1660:	438a      	bics	r2, r1
    1662:	701a      	strb	r2, [r3, #0]
    1664:	e6b5      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1666:	490d      	ldr	r1, [pc, #52]	; (169c <eink_ac057tc1_set_pixel+0x34c>)
    1668:	680a      	ldr	r2, [r1, #0]
    166a:	6912      	ldr	r2, [r2, #16]
    166c:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    166e:	7810      	ldrb	r0, [r2, #0]
    1670:	2440      	movs	r4, #64	; 0x40
    1672:	4320      	orrs	r0, r4
    1674:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1676:	680a      	ldr	r2, [r1, #0]
    1678:	6912      	ldr	r2, [r2, #16]
    167a:	18d2      	adds	r2, r2, r3
    167c:	7810      	ldrb	r0, [r2, #0]
    167e:	2420      	movs	r4, #32
    1680:	4320      	orrs	r0, r4
    1682:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1684:	680a      	ldr	r2, [r1, #0]
    1686:	6911      	ldr	r1, [r2, #16]
    1688:	18cb      	adds	r3, r1, r3
    168a:	781a      	ldrb	r2, [r3, #0]
    168c:	2110      	movs	r1, #16
    168e:	430a      	orrs	r2, r1
    1690:	701a      	strb	r2, [r3, #0]
}
    1692:	e69e      	b.n	13d2 <eink_ac057tc1_set_pixel+0x82>
    1694:	20000408 	.word	0x20000408
    1698:	00005284 	.word	0x00005284
    169c:	20000434 	.word	0x20000434
    16a0:	000052a4 	.word	0x000052a4

000016a4 <eink_ac040tc1_set_pixel>:
{
    16a4:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    16a6:	4bd0      	ldr	r3, [pc, #832]	; (19e8 <eink_ac040tc1_set_pixel+0x344>)
    16a8:	889b      	ldrh	r3, [r3, #4]
    16aa:	b29b      	uxth	r3, r3
    16ac:	4283      	cmp	r3, r0
    16ae:	d93a      	bls.n	1726 <eink_ac040tc1_set_pixel+0x82>
    16b0:	4bcd      	ldr	r3, [pc, #820]	; (19e8 <eink_ac040tc1_set_pixel+0x344>)
    16b2:	88db      	ldrh	r3, [r3, #6]
    16b4:	b29b      	uxth	r3, r3
    16b6:	428b      	cmp	r3, r1
    16b8:	d935      	bls.n	1726 <eink_ac040tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    16ba:	4bcb      	ldr	r3, [pc, #812]	; (19e8 <eink_ac040tc1_set_pixel+0x344>)
    16bc:	785b      	ldrb	r3, [r3, #1]
    16be:	2b01      	cmp	r3, #1
    16c0:	d013      	beq.n	16ea <eink_ac040tc1_set_pixel+0x46>
    16c2:	4bc9      	ldr	r3, [pc, #804]	; (19e8 <eink_ac040tc1_set_pixel+0x344>)
    16c4:	785b      	ldrb	r3, [r3, #1]
    16c6:	2b03      	cmp	r3, #3
    16c8:	d00f      	beq.n	16ea <eink_ac040tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * y_set);
    16ca:	1043      	asrs	r3, r0, #1
    16cc:	008c      	lsls	r4, r1, #2
    16ce:	1861      	adds	r1, r4, r1
    16d0:	0189      	lsls	r1, r1, #6
    16d2:	185b      	adds	r3, r3, r1
            odd_even_bit = x_set % 2;
    16d4:	2101      	movs	r1, #1
    16d6:	4008      	ands	r0, r1
        if (odd_even_bit) {
    16d8:	2800      	cmp	r0, #0
    16da:	d100      	bne.n	16de <eink_ac040tc1_set_pixel+0x3a>
    16dc:	e0c5      	b.n	186a <eink_ac040tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    16de:	2a07      	cmp	r2, #7
    16e0:	d821      	bhi.n	1726 <eink_ac040tc1_set_pixel+0x82>
    16e2:	0092      	lsls	r2, r2, #2
    16e4:	49c1      	ldr	r1, [pc, #772]	; (19ec <eink_ac040tc1_set_pixel+0x348>)
    16e6:	588a      	ldr	r2, [r1, r2]
    16e8:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * x_set);
    16ea:	104b      	asrs	r3, r1, #1
    16ec:	0084      	lsls	r4, r0, #2
    16ee:	1820      	adds	r0, r4, r0
    16f0:	0180      	lsls	r0, r0, #6
    16f2:	181b      	adds	r3, r3, r0
           odd_even_bit = y_set % 2;
    16f4:	2001      	movs	r0, #1
    16f6:	4008      	ands	r0, r1
    16f8:	e7ee      	b.n	16d8 <eink_ac040tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    16fa:	49bd      	ldr	r1, [pc, #756]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    16fc:	680a      	ldr	r2, [r1, #0]
    16fe:	6912      	ldr	r2, [r2, #16]
    1700:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1702:	7810      	ldrb	r0, [r2, #0]
    1704:	2404      	movs	r4, #4
    1706:	43a0      	bics	r0, r4
    1708:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    170a:	680a      	ldr	r2, [r1, #0]
    170c:	6912      	ldr	r2, [r2, #16]
    170e:	18d2      	adds	r2, r2, r3
    1710:	7810      	ldrb	r0, [r2, #0]
    1712:	3c02      	subs	r4, #2
    1714:	43a0      	bics	r0, r4
    1716:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1718:	680a      	ldr	r2, [r1, #0]
    171a:	6911      	ldr	r1, [r2, #16]
    171c:	18cb      	adds	r3, r1, r3
    171e:	781a      	ldrb	r2, [r3, #0]
    1720:	2101      	movs	r1, #1
    1722:	438a      	bics	r2, r1
    1724:	701a      	strb	r2, [r3, #0]
}
    1726:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1728:	49b1      	ldr	r1, [pc, #708]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    172a:	680a      	ldr	r2, [r1, #0]
    172c:	6912      	ldr	r2, [r2, #16]
    172e:	18d2      	adds	r2, r2, r3
    1730:	7810      	ldrb	r0, [r2, #0]
    1732:	2404      	movs	r4, #4
    1734:	43a0      	bics	r0, r4
    1736:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1738:	680a      	ldr	r2, [r1, #0]
    173a:	6912      	ldr	r2, [r2, #16]
    173c:	18d2      	adds	r2, r2, r3
    173e:	7810      	ldrb	r0, [r2, #0]
    1740:	3c02      	subs	r4, #2
    1742:	43a0      	bics	r0, r4
    1744:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1746:	680a      	ldr	r2, [r1, #0]
    1748:	6911      	ldr	r1, [r2, #16]
    174a:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    174c:	781a      	ldrb	r2, [r3, #0]
    174e:	2101      	movs	r1, #1
    1750:	430a      	orrs	r2, r1
    1752:	701a      	strb	r2, [r3, #0]
    1754:	e7e7      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1756:	49a6      	ldr	r1, [pc, #664]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    1758:	680a      	ldr	r2, [r1, #0]
    175a:	6912      	ldr	r2, [r2, #16]
    175c:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    175e:	7810      	ldrb	r0, [r2, #0]
    1760:	2404      	movs	r4, #4
    1762:	43a0      	bics	r0, r4
    1764:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1766:	680a      	ldr	r2, [r1, #0]
    1768:	6912      	ldr	r2, [r2, #16]
    176a:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    176c:	7810      	ldrb	r0, [r2, #0]
    176e:	2402      	movs	r4, #2
    1770:	4320      	orrs	r0, r4
    1772:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1774:	680a      	ldr	r2, [r1, #0]
    1776:	6911      	ldr	r1, [r2, #16]
    1778:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    177a:	781a      	ldrb	r2, [r3, #0]
    177c:	2101      	movs	r1, #1
    177e:	438a      	bics	r2, r1
    1780:	701a      	strb	r2, [r3, #0]
    1782:	e7d0      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1784:	499a      	ldr	r1, [pc, #616]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    1786:	680a      	ldr	r2, [r1, #0]
    1788:	6912      	ldr	r2, [r2, #16]
    178a:	18d2      	adds	r2, r2, r3
    178c:	7810      	ldrb	r0, [r2, #0]
    178e:	2404      	movs	r4, #4
    1790:	43a0      	bics	r0, r4
    1792:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1794:	680a      	ldr	r2, [r1, #0]
    1796:	6912      	ldr	r2, [r2, #16]
    1798:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    179a:	7810      	ldrb	r0, [r2, #0]
    179c:	2402      	movs	r4, #2
    179e:	4320      	orrs	r0, r4
    17a0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    17a2:	680a      	ldr	r2, [r1, #0]
    17a4:	6911      	ldr	r1, [r2, #16]
    17a6:	18cb      	adds	r3, r1, r3
    17a8:	781a      	ldrb	r2, [r3, #0]
    17aa:	2101      	movs	r1, #1
    17ac:	430a      	orrs	r2, r1
    17ae:	701a      	strb	r2, [r3, #0]
    17b0:	e7b9      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    17b2:	498f      	ldr	r1, [pc, #572]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    17b4:	680a      	ldr	r2, [r1, #0]
    17b6:	6912      	ldr	r2, [r2, #16]
    17b8:	18d2      	adds	r2, r2, r3
    17ba:	7810      	ldrb	r0, [r2, #0]
    17bc:	2404      	movs	r4, #4
    17be:	4320      	orrs	r0, r4
    17c0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    17c2:	680a      	ldr	r2, [r1, #0]
    17c4:	6912      	ldr	r2, [r2, #16]
    17c6:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    17c8:	7810      	ldrb	r0, [r2, #0]
    17ca:	2402      	movs	r4, #2
    17cc:	43a0      	bics	r0, r4
    17ce:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    17d0:	680a      	ldr	r2, [r1, #0]
    17d2:	6911      	ldr	r1, [r2, #16]
    17d4:	18cb      	adds	r3, r1, r3
    17d6:	781a      	ldrb	r2, [r3, #0]
    17d8:	2101      	movs	r1, #1
    17da:	438a      	bics	r2, r1
    17dc:	701a      	strb	r2, [r3, #0]
    17de:	e7a2      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    17e0:	4983      	ldr	r1, [pc, #524]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    17e2:	680a      	ldr	r2, [r1, #0]
    17e4:	6912      	ldr	r2, [r2, #16]
    17e6:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    17e8:	7810      	ldrb	r0, [r2, #0]
    17ea:	2404      	movs	r4, #4
    17ec:	4320      	orrs	r0, r4
    17ee:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    17f0:	680a      	ldr	r2, [r1, #0]
    17f2:	6912      	ldr	r2, [r2, #16]
    17f4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    17f6:	7810      	ldrb	r0, [r2, #0]
    17f8:	2402      	movs	r4, #2
    17fa:	43a0      	bics	r0, r4
    17fc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    17fe:	680a      	ldr	r2, [r1, #0]
    1800:	6911      	ldr	r1, [r2, #16]
    1802:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1804:	781a      	ldrb	r2, [r3, #0]
    1806:	2101      	movs	r1, #1
    1808:	430a      	orrs	r2, r1
    180a:	701a      	strb	r2, [r3, #0]
    180c:	e78b      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    180e:	4978      	ldr	r1, [pc, #480]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    1810:	680a      	ldr	r2, [r1, #0]
    1812:	6912      	ldr	r2, [r2, #16]
    1814:	18d2      	adds	r2, r2, r3
    1816:	7810      	ldrb	r0, [r2, #0]
    1818:	2404      	movs	r4, #4
    181a:	4320      	orrs	r0, r4
    181c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    181e:	680a      	ldr	r2, [r1, #0]
    1820:	6912      	ldr	r2, [r2, #16]
    1822:	18d2      	adds	r2, r2, r3
    1824:	7810      	ldrb	r0, [r2, #0]
    1826:	2402      	movs	r4, #2
    1828:	4320      	orrs	r0, r4
    182a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    182c:	680a      	ldr	r2, [r1, #0]
    182e:	6911      	ldr	r1, [r2, #16]
    1830:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1832:	781a      	ldrb	r2, [r3, #0]
    1834:	2101      	movs	r1, #1
    1836:	438a      	bics	r2, r1
    1838:	701a      	strb	r2, [r3, #0]
    183a:	e774      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    183c:	496c      	ldr	r1, [pc, #432]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    183e:	680a      	ldr	r2, [r1, #0]
    1840:	6912      	ldr	r2, [r2, #16]
    1842:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1844:	7810      	ldrb	r0, [r2, #0]
    1846:	2404      	movs	r4, #4
    1848:	4320      	orrs	r0, r4
    184a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    184c:	680a      	ldr	r2, [r1, #0]
    184e:	6912      	ldr	r2, [r2, #16]
    1850:	18d2      	adds	r2, r2, r3
    1852:	7810      	ldrb	r0, [r2, #0]
    1854:	2402      	movs	r4, #2
    1856:	4320      	orrs	r0, r4
    1858:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    185a:	680a      	ldr	r2, [r1, #0]
    185c:	6911      	ldr	r1, [r2, #16]
    185e:	18cb      	adds	r3, r1, r3
    1860:	781a      	ldrb	r2, [r3, #0]
    1862:	2101      	movs	r1, #1
    1864:	430a      	orrs	r2, r1
    1866:	701a      	strb	r2, [r3, #0]
    1868:	e75d      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
            switch(pixel_colour) {
    186a:	2a07      	cmp	r2, #7
    186c:	d900      	bls.n	1870 <eink_ac040tc1_set_pixel+0x1cc>
    186e:	e75a      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
    1870:	0092      	lsls	r2, r2, #2
    1872:	4960      	ldr	r1, [pc, #384]	; (19f4 <eink_ac040tc1_set_pixel+0x350>)
    1874:	588a      	ldr	r2, [r1, r2]
    1876:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1878:	495d      	ldr	r1, [pc, #372]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    187a:	680a      	ldr	r2, [r1, #0]
    187c:	6912      	ldr	r2, [r2, #16]
    187e:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1880:	7810      	ldrb	r0, [r2, #0]
    1882:	2440      	movs	r4, #64	; 0x40
    1884:	43a0      	bics	r0, r4
    1886:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1888:	680a      	ldr	r2, [r1, #0]
    188a:	6912      	ldr	r2, [r2, #16]
    188c:	18d2      	adds	r2, r2, r3
    188e:	7810      	ldrb	r0, [r2, #0]
    1890:	3c20      	subs	r4, #32
    1892:	43a0      	bics	r0, r4
    1894:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1896:	680a      	ldr	r2, [r1, #0]
    1898:	6911      	ldr	r1, [r2, #16]
    189a:	18cb      	adds	r3, r1, r3
    189c:	781a      	ldrb	r2, [r3, #0]
    189e:	2110      	movs	r1, #16
    18a0:	438a      	bics	r2, r1
    18a2:	701a      	strb	r2, [r3, #0]
    18a4:	e73f      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    18a6:	4952      	ldr	r1, [pc, #328]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    18a8:	680a      	ldr	r2, [r1, #0]
    18aa:	6912      	ldr	r2, [r2, #16]
    18ac:	18d2      	adds	r2, r2, r3
    18ae:	7810      	ldrb	r0, [r2, #0]
    18b0:	2440      	movs	r4, #64	; 0x40
    18b2:	43a0      	bics	r0, r4
    18b4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    18b6:	680a      	ldr	r2, [r1, #0]
    18b8:	6912      	ldr	r2, [r2, #16]
    18ba:	18d2      	adds	r2, r2, r3
    18bc:	7810      	ldrb	r0, [r2, #0]
    18be:	3c20      	subs	r4, #32
    18c0:	43a0      	bics	r0, r4
    18c2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    18c4:	680a      	ldr	r2, [r1, #0]
    18c6:	6911      	ldr	r1, [r2, #16]
    18c8:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    18ca:	781a      	ldrb	r2, [r3, #0]
    18cc:	2110      	movs	r1, #16
    18ce:	430a      	orrs	r2, r1
    18d0:	701a      	strb	r2, [r3, #0]
    18d2:	e728      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    18d4:	4946      	ldr	r1, [pc, #280]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    18d6:	680a      	ldr	r2, [r1, #0]
    18d8:	6912      	ldr	r2, [r2, #16]
    18da:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    18dc:	7810      	ldrb	r0, [r2, #0]
    18de:	2440      	movs	r4, #64	; 0x40
    18e0:	43a0      	bics	r0, r4
    18e2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    18e4:	680a      	ldr	r2, [r1, #0]
    18e6:	6912      	ldr	r2, [r2, #16]
    18e8:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    18ea:	7810      	ldrb	r0, [r2, #0]
    18ec:	2420      	movs	r4, #32
    18ee:	4320      	orrs	r0, r4
    18f0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    18f2:	680a      	ldr	r2, [r1, #0]
    18f4:	6911      	ldr	r1, [r2, #16]
    18f6:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    18f8:	781a      	ldrb	r2, [r3, #0]
    18fa:	2110      	movs	r1, #16
    18fc:	438a      	bics	r2, r1
    18fe:	701a      	strb	r2, [r3, #0]
    1900:	e711      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1902:	493b      	ldr	r1, [pc, #236]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    1904:	680a      	ldr	r2, [r1, #0]
    1906:	6912      	ldr	r2, [r2, #16]
    1908:	18d2      	adds	r2, r2, r3
    190a:	7810      	ldrb	r0, [r2, #0]
    190c:	2440      	movs	r4, #64	; 0x40
    190e:	43a0      	bics	r0, r4
    1910:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1912:	680a      	ldr	r2, [r1, #0]
    1914:	6912      	ldr	r2, [r2, #16]
    1916:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1918:	7810      	ldrb	r0, [r2, #0]
    191a:	2420      	movs	r4, #32
    191c:	4320      	orrs	r0, r4
    191e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1920:	680a      	ldr	r2, [r1, #0]
    1922:	6911      	ldr	r1, [r2, #16]
    1924:	18cb      	adds	r3, r1, r3
    1926:	781a      	ldrb	r2, [r3, #0]
    1928:	2110      	movs	r1, #16
    192a:	430a      	orrs	r2, r1
    192c:	701a      	strb	r2, [r3, #0]
    192e:	e6fa      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1930:	492f      	ldr	r1, [pc, #188]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    1932:	680a      	ldr	r2, [r1, #0]
    1934:	6912      	ldr	r2, [r2, #16]
    1936:	18d2      	adds	r2, r2, r3
    1938:	7810      	ldrb	r0, [r2, #0]
    193a:	2440      	movs	r4, #64	; 0x40
    193c:	4320      	orrs	r0, r4
    193e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1940:	680a      	ldr	r2, [r1, #0]
    1942:	6912      	ldr	r2, [r2, #16]
    1944:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1946:	7810      	ldrb	r0, [r2, #0]
    1948:	2420      	movs	r4, #32
    194a:	43a0      	bics	r0, r4
    194c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    194e:	680a      	ldr	r2, [r1, #0]
    1950:	6911      	ldr	r1, [r2, #16]
    1952:	18cb      	adds	r3, r1, r3
    1954:	781a      	ldrb	r2, [r3, #0]
    1956:	2110      	movs	r1, #16
    1958:	438a      	bics	r2, r1
    195a:	701a      	strb	r2, [r3, #0]
    195c:	e6e3      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    195e:	4924      	ldr	r1, [pc, #144]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    1960:	680a      	ldr	r2, [r1, #0]
    1962:	6912      	ldr	r2, [r2, #16]
    1964:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1966:	7810      	ldrb	r0, [r2, #0]
    1968:	2440      	movs	r4, #64	; 0x40
    196a:	4320      	orrs	r0, r4
    196c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    196e:	680a      	ldr	r2, [r1, #0]
    1970:	6912      	ldr	r2, [r2, #16]
    1972:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1974:	7810      	ldrb	r0, [r2, #0]
    1976:	2420      	movs	r4, #32
    1978:	43a0      	bics	r0, r4
    197a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    197c:	680a      	ldr	r2, [r1, #0]
    197e:	6911      	ldr	r1, [r2, #16]
    1980:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1982:	781a      	ldrb	r2, [r3, #0]
    1984:	2110      	movs	r1, #16
    1986:	430a      	orrs	r2, r1
    1988:	701a      	strb	r2, [r3, #0]
    198a:	e6cc      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    198c:	4918      	ldr	r1, [pc, #96]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    198e:	680a      	ldr	r2, [r1, #0]
    1990:	6912      	ldr	r2, [r2, #16]
    1992:	18d2      	adds	r2, r2, r3
    1994:	7810      	ldrb	r0, [r2, #0]
    1996:	2440      	movs	r4, #64	; 0x40
    1998:	4320      	orrs	r0, r4
    199a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    199c:	680a      	ldr	r2, [r1, #0]
    199e:	6912      	ldr	r2, [r2, #16]
    19a0:	18d2      	adds	r2, r2, r3
    19a2:	7810      	ldrb	r0, [r2, #0]
    19a4:	2420      	movs	r4, #32
    19a6:	4320      	orrs	r0, r4
    19a8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    19aa:	680a      	ldr	r2, [r1, #0]
    19ac:	6911      	ldr	r1, [r2, #16]
    19ae:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    19b0:	781a      	ldrb	r2, [r3, #0]
    19b2:	2110      	movs	r1, #16
    19b4:	438a      	bics	r2, r1
    19b6:	701a      	strb	r2, [r3, #0]
    19b8:	e6b5      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    19ba:	490d      	ldr	r1, [pc, #52]	; (19f0 <eink_ac040tc1_set_pixel+0x34c>)
    19bc:	680a      	ldr	r2, [r1, #0]
    19be:	6912      	ldr	r2, [r2, #16]
    19c0:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    19c2:	7810      	ldrb	r0, [r2, #0]
    19c4:	2440      	movs	r4, #64	; 0x40
    19c6:	4320      	orrs	r0, r4
    19c8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    19ca:	680a      	ldr	r2, [r1, #0]
    19cc:	6912      	ldr	r2, [r2, #16]
    19ce:	18d2      	adds	r2, r2, r3
    19d0:	7810      	ldrb	r0, [r2, #0]
    19d2:	2420      	movs	r4, #32
    19d4:	4320      	orrs	r0, r4
    19d6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    19d8:	680a      	ldr	r2, [r1, #0]
    19da:	6911      	ldr	r1, [r2, #16]
    19dc:	18cb      	adds	r3, r1, r3
    19de:	781a      	ldrb	r2, [r3, #0]
    19e0:	2110      	movs	r1, #16
    19e2:	430a      	orrs	r2, r1
    19e4:	701a      	strb	r2, [r3, #0]
}
    19e6:	e69e      	b.n	1726 <eink_ac040tc1_set_pixel+0x82>
    19e8:	20000408 	.word	0x20000408
    19ec:	000052c4 	.word	0x000052c4
    19f0:	20000434 	.word	0x20000434
    19f4:	000052e4 	.word	0x000052e4

000019f8 <eink_hink_e0154a05_set_pixel>:
{    
    19f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch(ssd1608_global_instance.display_config.display_rotation)
    19fa:	4c2a      	ldr	r4, [pc, #168]	; (1aa4 <eink_hink_e0154a05_set_pixel+0xac>)
    19fc:	7824      	ldrb	r4, [r4, #0]
    19fe:	b2e4      	uxtb	r4, r4
    1a00:	2c01      	cmp	r4, #1
    1a02:	d014      	beq.n	1a2e <eink_hink_e0154a05_set_pixel+0x36>
    1a04:	2c00      	cmp	r4, #0
    1a06:	d008      	beq.n	1a1a <eink_hink_e0154a05_set_pixel+0x22>
    1a08:	2c02      	cmp	r4, #2
    1a0a:	d01c      	beq.n	1a46 <eink_hink_e0154a05_set_pixel+0x4e>
    1a0c:	2c03      	cmp	r4, #3
    1a0e:	d024      	beq.n	1a5a <eink_hink_e0154a05_set_pixel+0x62>
    if ( (x_set >= 0) && (x_set < max_x) && (y_set >= 0) && (y_set < max_y) ) {
    1a10:	42b3      	cmp	r3, r6
    1a12:	d201      	bcs.n	1a18 <eink_hink_e0154a05_set_pixel+0x20>
    1a14:	42bd      	cmp	r5, r7
    1a16:	d328      	bcc.n	1a6a <eink_hink_e0154a05_set_pixel+0x72>
}
    1a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
            x_set = ssd1608_global_instance.display_height - y;
    1a1a:	4c22      	ldr	r4, [pc, #136]	; (1aa4 <eink_hink_e0154a05_set_pixel+0xac>)
    1a1c:	88e3      	ldrh	r3, [r4, #6]
    1a1e:	1a5b      	subs	r3, r3, r1
    1a20:	b29b      	uxth	r3, r3
            max_x = ssd1608_global_instance.display_height;
    1a22:	88e6      	ldrh	r6, [r4, #6]
    1a24:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    1a26:	88a7      	ldrh	r7, [r4, #4]
    1a28:	b2bf      	uxth	r7, r7
            y_set = x;
    1a2a:	0005      	movs	r5, r0
            break;
    1a2c:	e7f0      	b.n	1a10 <eink_hink_e0154a05_set_pixel+0x18>
            x_set = ssd1608_global_instance.display_width - x;
    1a2e:	4c1d      	ldr	r4, [pc, #116]	; (1aa4 <eink_hink_e0154a05_set_pixel+0xac>)
    1a30:	88a3      	ldrh	r3, [r4, #4]
    1a32:	1a1b      	subs	r3, r3, r0
    1a34:	b29b      	uxth	r3, r3
            y_set = ssd1608_global_instance.display_height - y;
    1a36:	88e5      	ldrh	r5, [r4, #6]
    1a38:	1a6d      	subs	r5, r5, r1
    1a3a:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_width;
    1a3c:	88a6      	ldrh	r6, [r4, #4]
    1a3e:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1a40:	88e7      	ldrh	r7, [r4, #6]
    1a42:	b2bf      	uxth	r7, r7
            break;
    1a44:	e7e4      	b.n	1a10 <eink_hink_e0154a05_set_pixel+0x18>
            y_set = ssd1608_global_instance.display_width - x;
    1a46:	4c17      	ldr	r4, [pc, #92]	; (1aa4 <eink_hink_e0154a05_set_pixel+0xac>)
    1a48:	88a5      	ldrh	r5, [r4, #4]
    1a4a:	1a2d      	subs	r5, r5, r0
    1a4c:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_height;
    1a4e:	88e6      	ldrh	r6, [r4, #6]
    1a50:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    1a52:	88a7      	ldrh	r7, [r4, #4]
    1a54:	b2bf      	uxth	r7, r7
            x_set = y;
    1a56:	000b      	movs	r3, r1
            break;
    1a58:	e7da      	b.n	1a10 <eink_hink_e0154a05_set_pixel+0x18>
            max_x = ssd1608_global_instance.display_width;
    1a5a:	4b12      	ldr	r3, [pc, #72]	; (1aa4 <eink_hink_e0154a05_set_pixel+0xac>)
    1a5c:	889e      	ldrh	r6, [r3, #4]
    1a5e:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1a60:	88df      	ldrh	r7, [r3, #6]
    1a62:	b2bf      	uxth	r7, r7
            y_set = y;
    1a64:	000d      	movs	r5, r1
            x_set = x;
    1a66:	0003      	movs	r3, r0
            break;
    1a68:	e7d2      	b.n	1a10 <eink_hink_e0154a05_set_pixel+0x18>
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    1a6a:	490f      	ldr	r1, [pc, #60]	; (1aa8 <eink_hink_e0154a05_set_pixel+0xb0>)
    1a6c:	6809      	ldr	r1, [r1, #0]
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    1a6e:	3301      	adds	r3, #1
    1a70:	0098      	lsls	r0, r3, #2
    1a72:	181b      	adds	r3, r3, r0
    1a74:	0098      	lsls	r0, r3, #2
    1a76:	181b      	adds	r3, r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1a78:	10e8      	asrs	r0, r5, #3
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    1a7a:	1a1b      	subs	r3, r3, r0
    1a7c:	3b01      	subs	r3, #1
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    1a7e:	b29b      	uxth	r3, r3
    1a80:	6909      	ldr	r1, [r1, #16]
    1a82:	18cb      	adds	r3, r1, r3
    1a84:	2107      	movs	r1, #7
    1a86:	400d      	ands	r5, r1
    if (bit_value == 1) {
    1a88:	2a00      	cmp	r2, #0
    1a8a:	d105      	bne.n	1a98 <eink_hink_e0154a05_set_pixel+0xa0>
        *byte &= ~(1 << bit_number);
    1a8c:	2101      	movs	r1, #1
    1a8e:	40a9      	lsls	r1, r5
    1a90:	781a      	ldrb	r2, [r3, #0]
    1a92:	438a      	bics	r2, r1
    1a94:	701a      	strb	r2, [r3, #0]
}
    1a96:	e7bf      	b.n	1a18 <eink_hink_e0154a05_set_pixel+0x20>
        *byte |= 1 << bit_number;
    1a98:	3906      	subs	r1, #6
    1a9a:	40a9      	lsls	r1, r5
    1a9c:	781a      	ldrb	r2, [r3, #0]
    1a9e:	430a      	orrs	r2, r1
    1aa0:	701a      	strb	r2, [r3, #0]
    1aa2:	e7b9      	b.n	1a18 <eink_hink_e0154a05_set_pixel+0x20>
    1aa4:	200003b8 	.word	0x200003b8
    1aa8:	20000434 	.word	0x20000434

00001aac <eink_ed029tc1_set_pixel>:
{    
    1aac:	b570      	push	{r4, r5, r6, lr}
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    1aae:	4b38      	ldr	r3, [pc, #224]	; (1b90 <eink_ed029tc1_set_pixel+0xe4>)
    1ab0:	891e      	ldrh	r6, [r3, #8]
    1ab2:	b2b6      	uxth	r6, r6
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    1ab4:	88dc      	ldrh	r4, [r3, #6]
    1ab6:	b2a4      	uxth	r4, r4
    if ( (x_set >= 0) && (x_set < uc8151_global_instance.display_width) && (y_set >= 0) && (y_set < uc8151_global_instance.display_height) ) {
    1ab8:	88db      	ldrh	r3, [r3, #6]
    1aba:	b29b      	uxth	r3, r3
    1abc:	4283      	cmp	r3, r0
    1abe:	d924      	bls.n	1b0a <eink_ed029tc1_set_pixel+0x5e>
    1ac0:	4b33      	ldr	r3, [pc, #204]	; (1b90 <eink_ed029tc1_set_pixel+0xe4>)
    1ac2:	891d      	ldrh	r5, [r3, #8]
    1ac4:	b2ad      	uxth	r5, r5
    1ac6:	428d      	cmp	r5, r1
    1ac8:	d91f      	bls.n	1b0a <eink_ed029tc1_set_pixel+0x5e>
        if ( (uc8151_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8151_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    1aca:	78db      	ldrb	r3, [r3, #3]
    1acc:	2b01      	cmp	r3, #1
    1ace:	d01d      	beq.n	1b0c <eink_ed029tc1_set_pixel+0x60>
    1ad0:	4b2f      	ldr	r3, [pc, #188]	; (1b90 <eink_ed029tc1_set_pixel+0xe4>)
    1ad2:	78db      	ldrb	r3, [r3, #3]
    1ad4:	2b03      	cmp	r3, #3
    1ad6:	d019      	beq.n	1b0c <eink_ed029tc1_set_pixel+0x60>
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    1ad8:	3001      	adds	r0, #1
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    1ada:	08f6      	lsrs	r6, r6, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    1adc:	b2f3      	uxtb	r3, r6
    1ade:	4358      	muls	r0, r3
            y1_set = ((y_set - (y_set % 8)) / 8);
    1ae0:	10cb      	asrs	r3, r1, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    1ae2:	43db      	mvns	r3, r3
    1ae4:	18c3      	adds	r3, r0, r3
            bit_set = (y_set % 8);
    1ae6:	2007      	movs	r0, #7
    1ae8:	4001      	ands	r1, r0
        if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    1aea:	4829      	ldr	r0, [pc, #164]	; (1b90 <eink_ed029tc1_set_pixel+0xe4>)
    1aec:	7880      	ldrb	r0, [r0, #2]
    1aee:	2800      	cmp	r0, #0
    1af0:	d11d      	bne.n	1b2e <eink_ed029tc1_set_pixel+0x82>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);
    1af2:	4828      	ldr	r0, [pc, #160]	; (1b94 <eink_ed029tc1_set_pixel+0xe8>)
    1af4:	6800      	ldr	r0, [r0, #0]
    1af6:	6940      	ldr	r0, [r0, #20]
    1af8:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    1afa:	2a00      	cmp	r2, #0
    1afc:	d110      	bne.n	1b20 <eink_ed029tc1_set_pixel+0x74>
        *byte &= ~(1 << bit_number);
    1afe:	2201      	movs	r2, #1
    1b00:	408a      	lsls	r2, r1
    1b02:	0011      	movs	r1, r2
    1b04:	781a      	ldrb	r2, [r3, #0]
    1b06:	438a      	bics	r2, r1
    1b08:	701a      	strb	r2, [r3, #0]
}
    1b0a:	bd70      	pop	{r4, r5, r6, pc}
            byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1b0c:	1c4b      	adds	r3, r1, #1
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    1b0e:	08e4      	lsrs	r4, r4, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1b10:	b2e1      	uxtb	r1, r4
    1b12:	4359      	muls	r1, r3
            x1_set = 15 - ((x_set - (x_set % 8)) / 8);
    1b14:	10c3      	asrs	r3, r0, #3
    1b16:	18cb      	adds	r3, r1, r3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1b18:	3b10      	subs	r3, #16
            bit_set = 7 - (x_set % 8);
    1b1a:	2107      	movs	r1, #7
    1b1c:	4381      	bics	r1, r0
    1b1e:	e7e4      	b.n	1aea <eink_ed029tc1_set_pixel+0x3e>
        *byte |= 1 << bit_number;
    1b20:	2201      	movs	r2, #1
    1b22:	408a      	lsls	r2, r1
    1b24:	0011      	movs	r1, r2
    1b26:	781a      	ldrb	r2, [r3, #0]
    1b28:	430a      	orrs	r2, r1
    1b2a:	701a      	strb	r2, [r3, #0]
    1b2c:	e7ed      	b.n	1b0a <eink_ed029tc1_set_pixel+0x5e>
            if (pixel_colour == PIXEL_BLACK) {
    1b2e:	2a00      	cmp	r2, #0
    1b30:	d017      	beq.n	1b62 <eink_ed029tc1_set_pixel+0xb6>
            } else if(pixel_colour == PIXEL_WHITE) {
    1b32:	3a02      	subs	r2, #2
    1b34:	2a01      	cmp	r2, #1
    1b36:	d801      	bhi.n	1b3c <eink_ed029tc1_set_pixel+0x90>
                pixel_set_2 = 0;    
    1b38:	2600      	movs	r6, #0
    1b3a:	e013      	b.n	1b64 <eink_ed029tc1_set_pixel+0xb8>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1b3c:	4d15      	ldr	r5, [pc, #84]	; (1b94 <eink_ed029tc1_set_pixel+0xe8>)
    1b3e:	682a      	ldr	r2, [r5, #0]
    1b40:	6912      	ldr	r2, [r2, #16]
    1b42:	18d2      	adds	r2, r2, r3
    1b44:	2401      	movs	r4, #1
    1b46:	408c      	lsls	r4, r1
    1b48:	7810      	ldrb	r0, [r2, #0]
    1b4a:	4320      	orrs	r0, r4
    1b4c:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1b4e:	682a      	ldr	r2, [r5, #0]
    1b50:	6950      	ldr	r0, [r2, #20]
    1b52:	18c3      	adds	r3, r0, r3
    1b54:	2201      	movs	r2, #1
    1b56:	408a      	lsls	r2, r1
    1b58:	0011      	movs	r1, r2
    1b5a:	781a      	ldrb	r2, [r3, #0]
    1b5c:	430a      	orrs	r2, r1
    1b5e:	701a      	strb	r2, [r3, #0]
    1b60:	e7d3      	b.n	1b0a <eink_ed029tc1_set_pixel+0x5e>
                pixel_set_2 = 1;
    1b62:	2601      	movs	r6, #1
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1b64:	4d0b      	ldr	r5, [pc, #44]	; (1b94 <eink_ed029tc1_set_pixel+0xe8>)
    1b66:	682a      	ldr	r2, [r5, #0]
    1b68:	6912      	ldr	r2, [r2, #16]
    1b6a:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1b6c:	2401      	movs	r4, #1
    1b6e:	408c      	lsls	r4, r1
    1b70:	7810      	ldrb	r0, [r2, #0]
    1b72:	43a0      	bics	r0, r4
    1b74:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1b76:	682a      	ldr	r2, [r5, #0]
    1b78:	6950      	ldr	r0, [r2, #20]
    1b7a:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    1b7c:	2e00      	cmp	r6, #0
    1b7e:	d1e9      	bne.n	1b54 <eink_ed029tc1_set_pixel+0xa8>
        *byte &= ~(1 << bit_number);
    1b80:	2201      	movs	r2, #1
    1b82:	408a      	lsls	r2, r1
    1b84:	0011      	movs	r1, r2
    1b86:	781a      	ldrb	r2, [r3, #0]
    1b88:	438a      	bics	r2, r1
    1b8a:	701a      	strb	r2, [r3, #0]
}
    1b8c:	e7bd      	b.n	1b0a <eink_ed029tc1_set_pixel+0x5e>
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	200003f8 	.word	0x200003f8
    1b94:	20000434 	.word	0x20000434

00001b98 <eink_el026tr1_set_pixel>:
{    
    1b98:	b510      	push	{r4, lr}
    eink_ed029tc1_set_pixel(x_set, y_set, pixel_colour);
    1b9a:	4b01      	ldr	r3, [pc, #4]	; (1ba0 <eink_el026tr1_set_pixel+0x8>)
    1b9c:	4798      	blx	r3
}
    1b9e:	bd10      	pop	{r4, pc}
    1ba0:	00001aad 	.word	0x00001aad

00001ba4 <eink_ed013tc1_set_pixel>:
{    
    1ba4:	b510      	push	{r4, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1ba6:	4c16      	ldr	r4, [pc, #88]	; (1c00 <eink_ed013tc1_set_pixel+0x5c>)
    1ba8:	88e3      	ldrh	r3, [r4, #6]
    1baa:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1bac:	88a4      	ldrh	r4, [r4, #4]
    1bae:	b2a4      	uxth	r4, r4
    1bb0:	4284      	cmp	r4, r0
    1bb2:	d918      	bls.n	1be6 <eink_ed013tc1_set_pixel+0x42>
    1bb4:	4c12      	ldr	r4, [pc, #72]	; (1c00 <eink_ed013tc1_set_pixel+0x5c>)
    1bb6:	88e4      	ldrh	r4, [r4, #6]
    1bb8:	b2a4      	uxth	r4, r4
    1bba:	428c      	cmp	r4, r1
    1bbc:	d913      	bls.n	1be6 <eink_ed013tc1_set_pixel+0x42>
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1bbe:	08db      	lsrs	r3, r3, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1bc0:	b2db      	uxtb	r3, r3
    1bc2:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1bc4:	10c8      	asrs	r0, r1, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1bc6:	1a1b      	subs	r3, r3, r0
    1bc8:	3b01      	subs	r3, #1
        bit_set = (y_set % 8);
    1bca:	2007      	movs	r0, #7
    1bcc:	4001      	ands	r1, r0
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1bce:	2a00      	cmp	r2, #0
    1bd0:	d00a      	beq.n	1be8 <eink_ed013tc1_set_pixel+0x44>
		else eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 1);
    1bd2:	4a0c      	ldr	r2, [pc, #48]	; (1c04 <eink_ed013tc1_set_pixel+0x60>)
    1bd4:	6812      	ldr	r2, [r2, #0]
    1bd6:	6950      	ldr	r0, [r2, #20]
    1bd8:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
    1bda:	2201      	movs	r2, #1
    1bdc:	408a      	lsls	r2, r1
    1bde:	0011      	movs	r1, r2
    1be0:	781a      	ldrb	r2, [r3, #0]
    1be2:	430a      	orrs	r2, r1
    1be4:	701a      	strb	r2, [r3, #0]
}
    1be6:	bd10      	pop	{r4, pc}
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1be8:	4a06      	ldr	r2, [pc, #24]	; (1c04 <eink_ed013tc1_set_pixel+0x60>)
    1bea:	6812      	ldr	r2, [r2, #0]
    1bec:	6950      	ldr	r0, [r2, #20]
    1bee:	18c3      	adds	r3, r0, r3
        *byte &= ~(1 << bit_number);
    1bf0:	2201      	movs	r2, #1
    1bf2:	408a      	lsls	r2, r1
    1bf4:	0011      	movs	r1, r2
    1bf6:	781a      	ldrb	r2, [r3, #0]
    1bf8:	438a      	bics	r2, r1
    1bfa:	701a      	strb	r2, [r3, #0]
    1bfc:	e7f3      	b.n	1be6 <eink_ed013tc1_set_pixel+0x42>
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	20000390 	.word	0x20000390
    1c04:	20000434 	.word	0x20000434

00001c08 <eink_et011tt2_set_pixel_raw>:
{
    1c08:	b570      	push	{r4, r5, r6, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 4;
    1c0a:	4b3a      	ldr	r3, [pc, #232]	; (1cf4 <eink_et011tt2_set_pixel_raw+0xec>)
    1c0c:	88dc      	ldrh	r4, [r3, #6]
    1c0e:	b2a4      	uxth	r4, r4
    uint8_t width_bytes = uc8173_global_instance.display_width / 4;
    1c10:	889e      	ldrh	r6, [r3, #4]
    1c12:	b2b6      	uxth	r6, r6
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1c14:	889b      	ldrh	r3, [r3, #4]
    1c16:	b29b      	uxth	r3, r3
    1c18:	4283      	cmp	r3, r0
    1c1a:	d92b      	bls.n	1c74 <eink_et011tt2_set_pixel_raw+0x6c>
    1c1c:	4b35      	ldr	r3, [pc, #212]	; (1cf4 <eink_et011tt2_set_pixel_raw+0xec>)
    1c1e:	88dd      	ldrh	r5, [r3, #6]
    1c20:	b2ad      	uxth	r5, r5
    1c22:	428d      	cmp	r5, r1
    1c24:	d926      	bls.n	1c74 <eink_et011tt2_set_pixel_raw+0x6c>
		if ( (uc8173_global_instance.display_config.display_rotation == ROTATE_90) || (uc8173_global_instance.display_config.display_rotation == ROTATE_270) ) {
    1c26:	781b      	ldrb	r3, [r3, #0]
    1c28:	2b01      	cmp	r3, #1
    1c2a:	d024      	beq.n	1c76 <eink_et011tt2_set_pixel_raw+0x6e>
    1c2c:	4b31      	ldr	r3, [pc, #196]	; (1cf4 <eink_et011tt2_set_pixel_raw+0xec>)
    1c2e:	781b      	ldrb	r3, [r3, #0]
    1c30:	2b03      	cmp	r3, #3
    1c32:	d020      	beq.n	1c76 <eink_et011tt2_set_pixel_raw+0x6e>
    uint8_t height_bytes = uc8173_global_instance.display_height / 4;
    1c34:	08a4      	lsrs	r4, r4, #2
			byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1c36:	b2e4      	uxtb	r4, r4
    1c38:	4360      	muls	r0, r4
			y1_set = ((y_set - (y_set % 4)) / 4);
    1c3a:	108b      	asrs	r3, r1, #2
			byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1c3c:	1ac0      	subs	r0, r0, r3
    1c3e:	3801      	subs	r0, #1
			bit_set = (y_set % 4) * 2;
    1c40:	2303      	movs	r3, #3
    1c42:	4019      	ands	r1, r3
    1c44:	0049      	lsls	r1, r1, #1
			eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, (pixel_set & 0x1));
    1c46:	4b2c      	ldr	r3, [pc, #176]	; (1cf8 <eink_et011tt2_set_pixel_raw+0xf0>)
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	691b      	ldr	r3, [r3, #16]
    1c4c:	181b      	adds	r3, r3, r0
    if (bit_value == 1) {
    1c4e:	07d4      	lsls	r4, r2, #31
    1c50:	d444      	bmi.n	1cdc <eink_et011tt2_set_pixel_raw+0xd4>
        *byte &= ~(1 << bit_number);
    1c52:	2501      	movs	r5, #1
    1c54:	408d      	lsls	r5, r1
    1c56:	781c      	ldrb	r4, [r3, #0]
    1c58:	43ac      	bics	r4, r5
    1c5a:	701c      	strb	r4, [r3, #0]
			eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set+1, ((pixel_set >> 1) & 0x1));
    1c5c:	4b26      	ldr	r3, [pc, #152]	; (1cf8 <eink_et011tt2_set_pixel_raw+0xf0>)
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	691b      	ldr	r3, [r3, #16]
    1c62:	1818      	adds	r0, r3, r0
    1c64:	3101      	adds	r1, #1
    if (bit_value == 1) {
    1c66:	0793      	lsls	r3, r2, #30
    1c68:	d43e      	bmi.n	1ce8 <eink_et011tt2_set_pixel_raw+0xe0>
        *byte &= ~(1 << bit_number);
    1c6a:	2201      	movs	r2, #1
    1c6c:	408a      	lsls	r2, r1
    1c6e:	7803      	ldrb	r3, [r0, #0]
    1c70:	4393      	bics	r3, r2
    1c72:	7003      	strb	r3, [r0, #0]
}
    1c74:	bd70      	pop	{r4, r5, r6, pc}
			byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1c76:	3101      	adds	r1, #1
    uint8_t width_bytes = uc8173_global_instance.display_width / 4;
    1c78:	08b6      	lsrs	r6, r6, #2
			byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1c7a:	b2f3      	uxtb	r3, r6
    1c7c:	434b      	muls	r3, r1
			x1_set = 59 - ((x_set - (x_set % 4)) / 4);
    1c7e:	1081      	asrs	r1, r0, #2
    1c80:	185b      	adds	r3, r3, r1
			byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1c82:	3b3c      	subs	r3, #60	; 0x3c
			bit_set = 7 - ((x_set % 4) * 2);
    1c84:	2103      	movs	r1, #3
    1c86:	4008      	ands	r0, r1
    1c88:	0040      	lsls	r0, r0, #1
    1c8a:	2107      	movs	r1, #7
    1c8c:	1a09      	subs	r1, r1, r0
    1c8e:	b2c9      	uxtb	r1, r1
			eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, ((pixel_set >> 1) & 0x1));
    1c90:	4c19      	ldr	r4, [pc, #100]	; (1cf8 <eink_et011tt2_set_pixel_raw+0xf0>)
    1c92:	6824      	ldr	r4, [r4, #0]
    1c94:	6924      	ldr	r4, [r4, #16]
    1c96:	18e4      	adds	r4, r4, r3
    if (bit_value == 1) {
    1c98:	0795      	lsls	r5, r2, #30
    1c9a:	d413      	bmi.n	1cc4 <eink_et011tt2_set_pixel_raw+0xbc>
        *byte &= ~(1 << bit_number);
    1c9c:	2501      	movs	r5, #1
    1c9e:	408d      	lsls	r5, r1
    1ca0:	7821      	ldrb	r1, [r4, #0]
    1ca2:	43a9      	bics	r1, r5
    1ca4:	7021      	strb	r1, [r4, #0]
			eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set-1, (pixel_set & 0x1));
    1ca6:	4914      	ldr	r1, [pc, #80]	; (1cf8 <eink_et011tt2_set_pixel_raw+0xf0>)
    1ca8:	6809      	ldr	r1, [r1, #0]
    1caa:	6909      	ldr	r1, [r1, #16]
    1cac:	18cb      	adds	r3, r1, r3
    1cae:	2106      	movs	r1, #6
    1cb0:	1a08      	subs	r0, r1, r0
    1cb2:	b2c0      	uxtb	r0, r0
    if (bit_value == 1) {
    1cb4:	07d2      	lsls	r2, r2, #31
    1cb6:	d40b      	bmi.n	1cd0 <eink_et011tt2_set_pixel_raw+0xc8>
        *byte &= ~(1 << bit_number);
    1cb8:	2101      	movs	r1, #1
    1cba:	4081      	lsls	r1, r0
    1cbc:	781a      	ldrb	r2, [r3, #0]
    1cbe:	438a      	bics	r2, r1
    1cc0:	701a      	strb	r2, [r3, #0]
    1cc2:	e7d7      	b.n	1c74 <eink_et011tt2_set_pixel_raw+0x6c>
        *byte |= 1 << bit_number;
    1cc4:	2501      	movs	r5, #1
    1cc6:	408d      	lsls	r5, r1
    1cc8:	7821      	ldrb	r1, [r4, #0]
    1cca:	4329      	orrs	r1, r5
    1ccc:	7021      	strb	r1, [r4, #0]
    1cce:	e7ea      	b.n	1ca6 <eink_et011tt2_set_pixel_raw+0x9e>
    1cd0:	2101      	movs	r1, #1
    1cd2:	4081      	lsls	r1, r0
    1cd4:	781a      	ldrb	r2, [r3, #0]
    1cd6:	430a      	orrs	r2, r1
    1cd8:	701a      	strb	r2, [r3, #0]
    1cda:	e7cb      	b.n	1c74 <eink_et011tt2_set_pixel_raw+0x6c>
    1cdc:	2501      	movs	r5, #1
    1cde:	408d      	lsls	r5, r1
    1ce0:	781c      	ldrb	r4, [r3, #0]
    1ce2:	432c      	orrs	r4, r5
    1ce4:	701c      	strb	r4, [r3, #0]
    1ce6:	e7b9      	b.n	1c5c <eink_et011tt2_set_pixel_raw+0x54>
    1ce8:	2201      	movs	r2, #1
    1cea:	408a      	lsls	r2, r1
    1cec:	7803      	ldrb	r3, [r0, #0]
    1cee:	4313      	orrs	r3, r2
    1cf0:	7003      	strb	r3, [r0, #0]
    1cf2:	e7bf      	b.n	1c74 <eink_et011tt2_set_pixel_raw+0x6c>
    1cf4:	20000390 	.word	0x20000390
    1cf8:	20000434 	.word	0x20000434

00001cfc <eink_et011tt2_set_pixel>:
{    
    1cfc:	b510      	push	{r4, lr}
	switch(pixel_colour) {
    1cfe:	2a00      	cmp	r2, #0
    1d00:	d003      	beq.n	1d0a <eink_et011tt2_set_pixel+0xe>
            eink_et011tt2_set_pixel_raw(x_set, y_set, 0x3);
    1d02:	2203      	movs	r2, #3
    1d04:	4b02      	ldr	r3, [pc, #8]	; (1d10 <eink_et011tt2_set_pixel+0x14>)
    1d06:	4798      	blx	r3
}
    1d08:	bd10      	pop	{r4, pc}
            eink_et011tt2_set_pixel_raw(x_set, y_set, 0x0);
    1d0a:	4b01      	ldr	r3, [pc, #4]	; (1d10 <eink_et011tt2_set_pixel+0x14>)
    1d0c:	4798      	blx	r3
            break;
    1d0e:	e7fb      	b.n	1d08 <eink_et011tt2_set_pixel+0xc>
    1d10:	00001c09 	.word	0x00001c09

00001d14 <eink_et011tt2_graphics_load_2bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_et011tt2_graphics_load_2bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    1d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d16:	46de      	mov	lr, fp
    1d18:	4657      	mov	r7, sl
    1d1a:	464e      	mov	r6, r9
    1d1c:	4645      	mov	r5, r8
    1d1e:	b5e0      	push	{r5, r6, r7, lr}
    1d20:	b089      	sub	sp, #36	; 0x24
    1d22:	9004      	str	r0, [sp, #16]
    1d24:	4691      	mov	r9, r2
    1d26:	0019      	movs	r1, r3
    1d28:	9305      	str	r3, [sp, #20]
    1d2a:	ab12      	add	r3, sp, #72	; 0x48
    1d2c:	881a      	ldrh	r2, [r3, #0]
    1d2e:	9206      	str	r2, [sp, #24]
    1d30:	ab13      	add	r3, sp, #76	; 0x4c
    1d32:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value[4];
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    1d34:	464a      	mov	r2, r9
    1d36:	2a00      	cmp	r2, #0
    1d38:	d04a      	beq.n	1dd0 <eink_et011tt2_graphics_load_2bgrey_image+0xbc>
    1d3a:	2200      	movs	r2, #0
    1d3c:	4693      	mov	fp, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
    1d3e:	000a      	movs	r2, r1
    1d40:	3a01      	subs	r2, #1
    1d42:	b292      	uxth	r2, r2
    1d44:	9202      	str	r2, [sp, #8]
            /* Process each pixel in byte  */
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    1d46:	9307      	str	r3, [sp, #28]
            bit_value[1] = ((img_array[(i*image_height_bytes)+j] >> 2) & 0x3);
            bit_value[2] = ((img_array[(i*image_height_bytes)+j] >> 4) & 0x3);
            bit_value[3] = ((img_array[(i*image_height_bytes)+j] >> 6) & 0x3);
            /* Set the pixel in the display buffer */
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    1d48:	4f25      	ldr	r7, [pc, #148]	; (1de0 <eink_et011tt2_graphics_load_2bgrey_image+0xcc>)
    1d4a:	464b      	mov	r3, r9
    1d4c:	9303      	str	r3, [sp, #12]
        for (j = (image_height_bytes-1); j > 0; j--) {
    1d4e:	9a02      	ldr	r2, [sp, #8]
    1d50:	4691      	mov	r9, r2
    1d52:	2a00      	cmp	r2, #0
    1d54:	d035      	beq.n	1dc2 <eink_et011tt2_graphics_load_2bgrey_image+0xae>
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    1d56:	9e07      	ldr	r6, [sp, #28]
    1d58:	9b05      	ldr	r3, [sp, #20]
    1d5a:	465a      	mov	r2, fp
    1d5c:	4353      	muls	r3, r2
    1d5e:	9a04      	ldr	r2, [sp, #16]
    1d60:	4692      	mov	sl, r2
    1d62:	449a      	add	sl, r3
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    1d64:	9b06      	ldr	r3, [sp, #24]
    1d66:	445b      	add	r3, fp
    1d68:	b29b      	uxth	r3, r3
    1d6a:	9301      	str	r3, [sp, #4]
    1d6c:	464d      	mov	r5, r9
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    1d6e:	4653      	mov	r3, sl
    1d70:	5d5c      	ldrb	r4, [r3, r5]
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    1d72:	2303      	movs	r3, #3
    1d74:	4698      	mov	r8, r3
    1d76:	001a      	movs	r2, r3
    1d78:	4022      	ands	r2, r4
    1d7a:	43d2      	mvns	r2, r2
    1d7c:	b2d2      	uxtb	r2, r2
    1d7e:	0031      	movs	r1, r6
    1d80:	9801      	ldr	r0, [sp, #4]
    1d82:	47b8      	blx	r7
            bit_value[1] = ((img_array[(i*image_height_bytes)+j] >> 2) & 0x3);
    1d84:	08a2      	lsrs	r2, r4, #2
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value[1]));
    1d86:	4643      	mov	r3, r8
    1d88:	401a      	ands	r2, r3
    1d8a:	43d2      	mvns	r2, r2
    1d8c:	b2d2      	uxtb	r2, r2
    1d8e:	1c71      	adds	r1, r6, #1
    1d90:	b289      	uxth	r1, r1
    1d92:	9801      	ldr	r0, [sp, #4]
    1d94:	47b8      	blx	r7
            bit_value[2] = ((img_array[(i*image_height_bytes)+j] >> 4) & 0x3);
    1d96:	0922      	lsrs	r2, r4, #4
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+2), (~bit_value[2]));
    1d98:	4643      	mov	r3, r8
    1d9a:	401a      	ands	r2, r3
    1d9c:	43d2      	mvns	r2, r2
    1d9e:	b2d2      	uxtb	r2, r2
    1da0:	1cb1      	adds	r1, r6, #2
    1da2:	b289      	uxth	r1, r1
    1da4:	9801      	ldr	r0, [sp, #4]
    1da6:	47b8      	blx	r7
            bit_value[3] = ((img_array[(i*image_height_bytes)+j] >> 6) & 0x3);
    1da8:	09a4      	lsrs	r4, r4, #6
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+3), (~bit_value[3]));
    1daa:	43e2      	mvns	r2, r4
    1dac:	b2d2      	uxtb	r2, r2
    1dae:	1cf1      	adds	r1, r6, #3
    1db0:	b289      	uxth	r1, r1
    1db2:	9801      	ldr	r0, [sp, #4]
    1db4:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    1db6:	3d01      	subs	r5, #1
    1db8:	b2ad      	uxth	r5, r5
    1dba:	3604      	adds	r6, #4
    1dbc:	b2b6      	uxth	r6, r6
    1dbe:	2d00      	cmp	r5, #0
    1dc0:	d1d5      	bne.n	1d6e <eink_et011tt2_graphics_load_2bgrey_image+0x5a>
    for (i = 0; i < image_width_px; i++) {
    1dc2:	465b      	mov	r3, fp
    1dc4:	3301      	adds	r3, #1
    1dc6:	b29b      	uxth	r3, r3
    1dc8:	469b      	mov	fp, r3
    1dca:	9b03      	ldr	r3, [sp, #12]
    1dcc:	455b      	cmp	r3, fp
    1dce:	d8be      	bhi.n	1d4e <eink_et011tt2_graphics_load_2bgrey_image+0x3a>
            m += 4;
        }
    }
    return;
    1dd0:	b009      	add	sp, #36	; 0x24
    1dd2:	bc3c      	pop	{r2, r3, r4, r5}
    1dd4:	4690      	mov	r8, r2
    1dd6:	4699      	mov	r9, r3
    1dd8:	46a2      	mov	sl, r4
    1dda:	46ab      	mov	fp, r5
    1ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	00001c09 	.word	0x00001c09

00001de4 <eink_send_raw_byte>:
{    
    1de4:	b570      	push	{r4, r5, r6, lr}
    if(!f_send)
    1de6:	2900      	cmp	r1, #0
    1de8:	d103      	bne.n	1df2 <eink_send_raw_byte+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1dea:	2220      	movs	r2, #32
    1dec:	23c0      	movs	r3, #192	; 0xc0
    1dee:	05db      	lsls	r3, r3, #23
    1df0:	615a      	str	r2, [r3, #20]
{    
    1df2:	2308      	movs	r3, #8
    1df4:	22c0      	movs	r2, #192	; 0xc0
    1df6:	05d2      	lsls	r2, r2, #23
    1df8:	2610      	movs	r6, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1dfa:	2480      	movs	r4, #128	; 0x80
    1dfc:	e008      	b.n	1e10 <eink_send_raw_byte+0x2c>
    1dfe:	6196      	str	r6, [r2, #24]
    1e00:	6194      	str	r4, [r2, #24]
        send_byte=send_byte << 1;
    1e02:	0040      	lsls	r0, r0, #1
    1e04:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e06:	6154      	str	r4, [r2, #20]
    1e08:	3b01      	subs	r3, #1
    1e0a:	b2db      	uxtb	r3, r3
    for (i=0;i<8;i++) {
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	d004      	beq.n	1e1a <eink_send_raw_byte+0x36>
        if (send_byte & 0x80) {
    1e10:	b245      	sxtb	r5, r0
    1e12:	2d00      	cmp	r5, #0
    1e14:	dbf3      	blt.n	1dfe <eink_send_raw_byte+0x1a>
    1e16:	6156      	str	r6, [r2, #20]
    1e18:	e7f2      	b.n	1e00 <eink_send_raw_byte+0x1c>
    if(!f_send)
    1e1a:	2900      	cmp	r1, #0
    1e1c:	d103      	bne.n	1e26 <eink_send_raw_byte+0x42>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e1e:	2220      	movs	r2, #32
    1e20:	23c0      	movs	r3, #192	; 0xc0
    1e22:	05db      	lsls	r3, r3, #23
    1e24:	619a      	str	r2, [r3, #24]
}
    1e26:	bd70      	pop	{r4, r5, r6, pc}

00001e28 <eink_write_data>:
{    
    1e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e2a:	000c      	movs	r4, r1
    1e2c:	0015      	movs	r5, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e2e:	26c0      	movs	r6, #192	; 0xc0
    1e30:	05f6      	lsls	r6, r6, #23
    1e32:	2701      	movs	r7, #1
    1e34:	2394      	movs	r3, #148	; 0x94
    1e36:	50f7      	str	r7, [r6, r3]
    1e38:	3b74      	subs	r3, #116	; 0x74
    1e3a:	6173      	str	r3, [r6, #20]
    eink_send_raw_byte(command, f_send);
    1e3c:	2100      	movs	r1, #0
    1e3e:	4b07      	ldr	r3, [pc, #28]	; (1e5c <eink_write_data+0x34>)
    1e40:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e42:	2398      	movs	r3, #152	; 0x98
    1e44:	50f7      	str	r7, [r6, r3]
    if (data_bytes != 0) {
    1e46:	2d00      	cmp	r5, #0
    1e48:	d007      	beq.n	1e5a <eink_write_data+0x32>
    1e4a:	1965      	adds	r5, r4, r5
            eink_send_raw_byte(*data, f_send);
    1e4c:	4e03      	ldr	r6, [pc, #12]	; (1e5c <eink_write_data+0x34>)
    1e4e:	7820      	ldrb	r0, [r4, #0]
    1e50:	2100      	movs	r1, #0
    1e52:	47b0      	blx	r6
            data++;
    1e54:	3401      	adds	r4, #1
        for (i=0;i<data_bytes;i++) {
    1e56:	42a5      	cmp	r5, r4
    1e58:	d1f9      	bne.n	1e4e <eink_write_data+0x26>
}
    1e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e5c:	00001de5 	.word	0x00001de5

00001e60 <eink_et011tt2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_et011tt2_refresh_display_buffer(void)
{
    1e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e62:	b085      	sub	sp, #20
    /* Enable power to the display */   
    //eink_write_data(UC8173_PON, 0, 0);
    //uc8173_wait_for_busy_low();
    
	/* Upload update waveforms */
	if(uc8173_global_instance.display_config.update_mode == UPDATE_FAST)
    1e64:	4b2c      	ldr	r3, [pc, #176]	; (1f18 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1e66:	785b      	ldrb	r3, [r3, #1]
    1e68:	2b01      	cmp	r3, #1
    1e6a:	d03c      	beq.n	1ee6 <eink_et011tt2_refresh_display_buffer+0x86>
}

static inline void uc8173_send_et011tt2_a2_lut(void)
{
	/* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_A2)
    1e6c:	4b2a      	ldr	r3, [pc, #168]	; (1f18 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1e6e:	78db      	ldrb	r3, [r3, #3]
    1e70:	2b02      	cmp	r3, #2
    1e72:	d014      	beq.n	1e9e <eink_et011tt2_refresh_display_buffer+0x3e>
	{
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_A2;
    1e74:	2202      	movs	r2, #2
    1e76:	4b28      	ldr	r3, [pc, #160]	; (1f18 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1e78:	70da      	strb	r2, [r3, #3]
		
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_A2_LUT, 32);
    1e7a:	4c28      	ldr	r4, [pc, #160]	; (1f1c <eink_et011tt2_refresh_display_buffer+0xbc>)
    1e7c:	0021      	movs	r1, r4
    1e7e:	3120      	adds	r1, #32
    1e80:	321e      	adds	r2, #30
    1e82:	2020      	movs	r0, #32
    1e84:	4d26      	ldr	r5, [pc, #152]	; (1f20 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1e86:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_A2_LUT, 512);
    1e88:	0021      	movs	r1, r4
    1e8a:	3140      	adds	r1, #64	; 0x40
    1e8c:	2280      	movs	r2, #128	; 0x80
    1e8e:	0092      	lsls	r2, r2, #2
    1e90:	2022      	movs	r0, #34	; 0x22
    1e92:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    1e94:	2280      	movs	r2, #128	; 0x80
    1e96:	4923      	ldr	r1, [pc, #140]	; (1f24 <eink_et011tt2_refresh_display_buffer+0xc4>)
    1e98:	3120      	adds	r1, #32
    1e9a:	2026      	movs	r0, #38	; 0x26
    1e9c:	47a8      	blx	r5
    } else {
		uc8173_send_et011tt2_a2_lut();
    }
	
    /* Display Refresh */
    eink_data[0] = 0x00; /* GU2 Update Mode */
    1e9e:	a902      	add	r1, sp, #8
    1ea0:	2300      	movs	r3, #0
    1ea2:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1ea4:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1ea6:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1ea8:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0xEF; /* W = 249 */
    1eaa:	22ef      	movs	r2, #239	; 0xef
    1eac:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1eae:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xEF; /* H = 249 */
    1eb0:	718a      	strb	r2, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1eb2:	3ae8      	subs	r2, #232	; 0xe8
    1eb4:	2012      	movs	r0, #18
    1eb6:	4b1a      	ldr	r3, [pc, #104]	; (1f20 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1eb8:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1eba:	4f1b      	ldr	r7, [pc, #108]	; (1f28 <eink_et011tt2_refresh_display_buffer+0xc8>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    1ebc:	4e1b      	ldr	r6, [pc, #108]	; (1f2c <eink_et011tt2_refresh_display_buffer+0xcc>)
	CRITICAL_SECTION_ENTER();
    1ebe:	a801      	add	r0, sp, #4
    1ec0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1ec2:	23c0      	movs	r3, #192	; 0xc0
    1ec4:	05db      	lsls	r3, r3, #23
    1ec6:	2580      	movs	r5, #128	; 0x80
    1ec8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1eca:	22a0      	movs	r2, #160	; 0xa0
    1ecc:	4918      	ldr	r1, [pc, #96]	; (1f30 <eink_et011tt2_refresh_display_buffer+0xd0>)
    1ece:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ed0:	2190      	movs	r1, #144	; 0x90
    1ed2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ed4:	4053      	eors	r3, r2
    1ed6:	401c      	ands	r4, r3
    1ed8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1eda:	a801      	add	r0, sp, #4
    1edc:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1ede:	4225      	tst	r5, r4
    1ee0:	d0ed      	beq.n	1ebe <eink_et011tt2_refresh_display_buffer+0x5e>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    //eink_write_data(UC8173_POF, 0, 0);
    //uc8173_wait_for_busy_low();
}
    1ee2:	b005      	add	sp, #20
    1ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_GU)
    1ee6:	4b0c      	ldr	r3, [pc, #48]	; (1f18 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1ee8:	78db      	ldrb	r3, [r3, #3]
    1eea:	2b01      	cmp	r3, #1
    1eec:	d0d7      	beq.n	1e9e <eink_et011tt2_refresh_display_buffer+0x3e>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_GU;
    1eee:	2201      	movs	r2, #1
    1ef0:	4b09      	ldr	r3, [pc, #36]	; (1f18 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1ef2:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_GU_LUT, 32);
    1ef4:	4c0f      	ldr	r4, [pc, #60]	; (1f34 <eink_et011tt2_refresh_display_buffer+0xd4>)
    1ef6:	321f      	adds	r2, #31
    1ef8:	0021      	movs	r1, r4
    1efa:	2020      	movs	r0, #32
    1efc:	4d08      	ldr	r5, [pc, #32]	; (1f20 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1efe:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_GU_LUT, 512);
    1f00:	0021      	movs	r1, r4
    1f02:	3120      	adds	r1, #32
    1f04:	2280      	movs	r2, #128	; 0x80
    1f06:	0092      	lsls	r2, r2, #2
    1f08:	2022      	movs	r0, #34	; 0x22
    1f0a:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    1f0c:	2280      	movs	r2, #128	; 0x80
    1f0e:	4905      	ldr	r1, [pc, #20]	; (1f24 <eink_et011tt2_refresh_display_buffer+0xc4>)
    1f10:	3120      	adds	r1, #32
    1f12:	2026      	movs	r0, #38	; 0x26
    1f14:	47a8      	blx	r5
    1f16:	e7c2      	b.n	1e9e <eink_et011tt2_refresh_display_buffer+0x3e>
    1f18:	20000390 	.word	0x20000390
    1f1c:	00005844 	.word	0x00005844
    1f20:	00001e29 	.word	0x00001e29
    1f24:	000057c4 	.word	0x000057c4
    1f28:	0000034d 	.word	0x0000034d
    1f2c:	0000035b 	.word	0x0000035b
    1f30:	41004400 	.word	0x41004400
    1f34:	000055c4 	.word	0x000055c4

00001f38 <eink_ed013tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed013tc1_refresh_display_buffer(void)
{
    1f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3a:	b087      	sub	sp, #28
    uint8_t eink_data[7];
    
    /* Enable power to the display */   
    eink_write_data(UC8173_PON, 0, 0);
    1f3c:	2200      	movs	r2, #0
    1f3e:	2100      	movs	r1, #0
    1f40:	2004      	movs	r0, #4
    1f42:	4b35      	ldr	r3, [pc, #212]	; (2018 <STACK_SIZE+0x18>)
    1f44:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1f46:	4f35      	ldr	r7, [pc, #212]	; (201c <STACK_SIZE+0x1c>)
	CRITICAL_SECTION_LEAVE();
    1f48:	4e35      	ldr	r6, [pc, #212]	; (2020 <STACK_SIZE+0x20>)
	CRITICAL_SECTION_ENTER();
    1f4a:	a801      	add	r0, sp, #4
    1f4c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f4e:	23c0      	movs	r3, #192	; 0xc0
    1f50:	05db      	lsls	r3, r3, #23
    1f52:	2580      	movs	r5, #128	; 0x80
    1f54:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f56:	22a0      	movs	r2, #160	; 0xa0
    1f58:	4932      	ldr	r1, [pc, #200]	; (2024 <STACK_SIZE+0x24>)
    1f5a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f5c:	2190      	movs	r1, #144	; 0x90
    1f5e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f60:	4053      	eors	r3, r2
    1f62:	401c      	ands	r4, r3
    1f64:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f66:	a801      	add	r0, sp, #4
    1f68:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1f6a:	4225      	tst	r5, r4
    1f6c:	d0ed      	beq.n	1f4a <eink_ed013tc1_refresh_display_buffer+0x12>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ED013TC1_GC2)
    1f6e:	4b2e      	ldr	r3, [pc, #184]	; (2028 <STACK_SIZE+0x28>)
    1f70:	78db      	ldrb	r3, [r3, #3]
    1f72:	2b00      	cmp	r3, #0
    1f74:	d13e      	bne.n	1ff4 <eink_ed013tc1_refresh_display_buffer+0xbc>
    uc8173_wait_for_busy_low();
    
    uc8173_send_ed013tc1_gc2_lut();
	
    /* Display Refresh */
    eink_data[0] = 0x01; /* GU2 Update Mode */
    1f76:	a904      	add	r1, sp, #16
    1f78:	2301      	movs	r3, #1
    1f7a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1f7c:	2300      	movs	r3, #0
    1f7e:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1f80:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1f82:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    1f84:	227f      	movs	r2, #127	; 0x7f
    1f86:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1f88:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    1f8a:	33ff      	adds	r3, #255	; 0xff
    1f8c:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1f8e:	3a78      	subs	r2, #120	; 0x78
    1f90:	2012      	movs	r0, #18
    1f92:	4b21      	ldr	r3, [pc, #132]	; (2018 <STACK_SIZE+0x18>)
    1f94:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1f96:	4f21      	ldr	r7, [pc, #132]	; (201c <STACK_SIZE+0x1c>)
	CRITICAL_SECTION_LEAVE();
    1f98:	4e21      	ldr	r6, [pc, #132]	; (2020 <STACK_SIZE+0x20>)
	CRITICAL_SECTION_ENTER();
    1f9a:	a802      	add	r0, sp, #8
    1f9c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f9e:	23c0      	movs	r3, #192	; 0xc0
    1fa0:	05db      	lsls	r3, r3, #23
    1fa2:	2580      	movs	r5, #128	; 0x80
    1fa4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fa6:	22a0      	movs	r2, #160	; 0xa0
    1fa8:	491e      	ldr	r1, [pc, #120]	; (2024 <STACK_SIZE+0x24>)
    1faa:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fac:	2190      	movs	r1, #144	; 0x90
    1fae:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fb0:	4053      	eors	r3, r2
    1fb2:	401c      	ands	r4, r3
    1fb4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1fb6:	a802      	add	r0, sp, #8
    1fb8:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1fba:	4225      	tst	r5, r4
    1fbc:	d0ed      	beq.n	1f9a <eink_ed013tc1_refresh_display_buffer+0x62>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    eink_write_data(UC8173_POF, 0, 0);
    1fbe:	2200      	movs	r2, #0
    1fc0:	2100      	movs	r1, #0
    1fc2:	2002      	movs	r0, #2
    1fc4:	4b14      	ldr	r3, [pc, #80]	; (2018 <STACK_SIZE+0x18>)
    1fc6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1fc8:	4f14      	ldr	r7, [pc, #80]	; (201c <STACK_SIZE+0x1c>)
	CRITICAL_SECTION_LEAVE();
    1fca:	4e15      	ldr	r6, [pc, #84]	; (2020 <STACK_SIZE+0x20>)
	CRITICAL_SECTION_ENTER();
    1fcc:	a803      	add	r0, sp, #12
    1fce:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1fd0:	23c0      	movs	r3, #192	; 0xc0
    1fd2:	05db      	lsls	r3, r3, #23
    1fd4:	2580      	movs	r5, #128	; 0x80
    1fd6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fd8:	22a0      	movs	r2, #160	; 0xa0
    1fda:	4912      	ldr	r1, [pc, #72]	; (2024 <STACK_SIZE+0x24>)
    1fdc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fde:	2190      	movs	r1, #144	; 0x90
    1fe0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fe2:	4053      	eors	r3, r2
    1fe4:	401c      	ands	r4, r3
    1fe6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1fe8:	a803      	add	r0, sp, #12
    1fea:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    1fec:	4225      	tst	r5, r4
    1fee:	d1ed      	bne.n	1fcc <eink_ed013tc1_refresh_display_buffer+0x94>
    uc8173_wait_for_busy_high();
}
    1ff0:	b007      	add	sp, #28
    1ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ED013TC1_GC2;
    1ff4:	2200      	movs	r2, #0
    1ff6:	4b0c      	ldr	r3, [pc, #48]	; (2028 <STACK_SIZE+0x28>)
    1ff8:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    1ffa:	3220      	adds	r2, #32
    1ffc:	2155      	movs	r1, #85	; 0x55
    1ffe:	2020      	movs	r0, #32
    2000:	4c05      	ldr	r4, [pc, #20]	; (2018 <STACK_SIZE+0x18>)
    2002:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    2004:	2280      	movs	r2, #128	; 0x80
    2006:	0092      	lsls	r2, r2, #2
    2008:	2181      	movs	r1, #129	; 0x81
    200a:	2022      	movs	r0, #34	; 0x22
    200c:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);	
    200e:	2280      	movs	r2, #128	; 0x80
    2010:	2100      	movs	r1, #0
    2012:	2026      	movs	r0, #38	; 0x26
    2014:	47a0      	blx	r4
    2016:	e7ae      	b.n	1f76 <eink_ed013tc1_refresh_display_buffer+0x3e>
    2018:	00001e29 	.word	0x00001e29
    201c:	0000034d 	.word	0x0000034d
    2020:	0000035b 	.word	0x0000035b
    2024:	41004400 	.word	0x41004400
    2028:	20000390 	.word	0x20000390

0000202c <eink_ed029tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed029tc1_refresh_display_buffer(void)
{
    202c:	b5f0      	push	{r4, r5, r6, r7, lr}
    202e:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    2030:	2200      	movs	r2, #0
    2032:	2100      	movs	r1, #0
    2034:	2004      	movs	r0, #4
    2036:	4c1a      	ldr	r4, [pc, #104]	; (20a0 <eink_ed029tc1_refresh_display_buffer+0x74>)
    2038:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    203a:	2200      	movs	r2, #0
    203c:	2100      	movs	r1, #0
    203e:	2012      	movs	r0, #18
    2040:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2042:	4f18      	ldr	r7, [pc, #96]	; (20a4 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2044:	4e18      	ldr	r6, [pc, #96]	; (20a8 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    2046:	4668      	mov	r0, sp
    2048:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    204a:	23c0      	movs	r3, #192	; 0xc0
    204c:	05db      	lsls	r3, r3, #23
    204e:	2580      	movs	r5, #128	; 0x80
    2050:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2052:	22a0      	movs	r2, #160	; 0xa0
    2054:	4915      	ldr	r1, [pc, #84]	; (20ac <eink_ed029tc1_refresh_display_buffer+0x80>)
    2056:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2058:	2190      	movs	r1, #144	; 0x90
    205a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    205c:	4053      	eors	r3, r2
    205e:	401c      	ands	r4, r3
    2060:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2062:	4668      	mov	r0, sp
    2064:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8151_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    2066:	4225      	tst	r5, r4
    2068:	d0ed      	beq.n	2046 <eink_ed029tc1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    206a:	2200      	movs	r2, #0
    206c:	2100      	movs	r1, #0
    206e:	2002      	movs	r0, #2
    2070:	4b0b      	ldr	r3, [pc, #44]	; (20a0 <eink_ed029tc1_refresh_display_buffer+0x74>)
    2072:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2074:	4f0b      	ldr	r7, [pc, #44]	; (20a4 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2076:	4e0c      	ldr	r6, [pc, #48]	; (20a8 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    2078:	a801      	add	r0, sp, #4
    207a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    207c:	23c0      	movs	r3, #192	; 0xc0
    207e:	05db      	lsls	r3, r3, #23
    2080:	2580      	movs	r5, #128	; 0x80
    2082:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2084:	22a0      	movs	r2, #160	; 0xa0
    2086:	4909      	ldr	r1, [pc, #36]	; (20ac <eink_ed029tc1_refresh_display_buffer+0x80>)
    2088:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    208a:	2190      	movs	r1, #144	; 0x90
    208c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    208e:	4053      	eors	r3, r2
    2090:	401c      	ands	r4, r3
    2092:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2094:	a801      	add	r0, sp, #4
    2096:	47b0      	blx	r6
    2098:	4225      	tst	r5, r4
    209a:	d0ed      	beq.n	2078 <eink_ed029tc1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    209c:	b003      	add	sp, #12
    209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20a0:	00001e29 	.word	0x00001e29
    20a4:	0000034d 	.word	0x0000034d
    20a8:	0000035b 	.word	0x0000035b
    20ac:	41004400 	.word	0x41004400

000020b0 <eink_ed029tc1_put_display_buffer>:
{
    20b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20b2:	46c6      	mov	lr, r8
    20b4:	b500      	push	{lr}
    20b6:	b084      	sub	sp, #16
    20b8:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    20ba:	2200      	movs	r2, #0
    20bc:	2100      	movs	r1, #0
    20be:	2004      	movs	r0, #4
    20c0:	4c44      	ldr	r4, [pc, #272]	; (21d4 <eink_ed029tc1_put_display_buffer+0x124>)
    20c2:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    20c4:	4b44      	ldr	r3, [pc, #272]	; (21d8 <eink_ed029tc1_put_display_buffer+0x128>)
    20c6:	681b      	ldr	r3, [r3, #0]
    20c8:	6919      	ldr	r1, [r3, #16]
    20ca:	2294      	movs	r2, #148	; 0x94
    20cc:	0152      	lsls	r2, r2, #5
    20ce:	2010      	movs	r0, #16
    20d0:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    20d2:	2200      	movs	r2, #0
    20d4:	2100      	movs	r1, #0
    20d6:	2011      	movs	r0, #17
    20d8:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    20da:	4d40      	ldr	r5, [pc, #256]	; (21dc <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    20dc:	4f40      	ldr	r7, [pc, #256]	; (21e0 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    20de:	4668      	mov	r0, sp
    20e0:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20e2:	23c0      	movs	r3, #192	; 0xc0
    20e4:	05db      	lsls	r3, r3, #23
    20e6:	2680      	movs	r6, #128	; 0x80
    20e8:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20ea:	22a0      	movs	r2, #160	; 0xa0
    20ec:	493d      	ldr	r1, [pc, #244]	; (21e4 <eink_ed029tc1_put_display_buffer+0x134>)
    20ee:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20f0:	2190      	movs	r1, #144	; 0x90
    20f2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    20f4:	4053      	eors	r3, r2
    20f6:	401c      	ands	r4, r3
    20f8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    20fa:	4668      	mov	r0, sp
    20fc:	47b8      	blx	r7
    20fe:	4226      	tst	r6, r4
    2100:	d0ed      	beq.n	20de <eink_ed029tc1_put_display_buffer+0x2e>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    2102:	4b35      	ldr	r3, [pc, #212]	; (21d8 <eink_ed029tc1_put_display_buffer+0x128>)
    2104:	681b      	ldr	r3, [r3, #0]
    2106:	6959      	ldr	r1, [r3, #20]
    2108:	2294      	movs	r2, #148	; 0x94
    210a:	0152      	lsls	r2, r2, #5
    210c:	2013      	movs	r0, #19
    210e:	4c31      	ldr	r4, [pc, #196]	; (21d4 <eink_ed029tc1_put_display_buffer+0x124>)
    2110:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    2112:	2200      	movs	r2, #0
    2114:	2100      	movs	r1, #0
    2116:	2011      	movs	r0, #17
    2118:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    211a:	4d30      	ldr	r5, [pc, #192]	; (21dc <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    211c:	4f30      	ldr	r7, [pc, #192]	; (21e0 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    211e:	a801      	add	r0, sp, #4
    2120:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2122:	23c0      	movs	r3, #192	; 0xc0
    2124:	05db      	lsls	r3, r3, #23
    2126:	2680      	movs	r6, #128	; 0x80
    2128:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    212a:	22a0      	movs	r2, #160	; 0xa0
    212c:	492d      	ldr	r1, [pc, #180]	; (21e4 <eink_ed029tc1_put_display_buffer+0x134>)
    212e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2130:	2190      	movs	r1, #144	; 0x90
    2132:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2134:	4053      	eors	r3, r2
    2136:	401c      	ands	r4, r3
    2138:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    213a:	a801      	add	r0, sp, #4
    213c:	47b8      	blx	r7
    213e:	4226      	tst	r6, r4
    2140:	d0ed      	beq.n	211e <eink_ed029tc1_put_display_buffer+0x6e>
    if(refresh_display) {
    2142:	4643      	mov	r3, r8
    2144:	2b00      	cmp	r3, #0
    2146:	d12b      	bne.n	21a0 <eink_ed029tc1_put_display_buffer+0xf0>
    eink_write_data(UC8151_POF, 0, 0);
    2148:	2200      	movs	r2, #0
    214a:	2100      	movs	r1, #0
    214c:	2002      	movs	r0, #2
    214e:	4b21      	ldr	r3, [pc, #132]	; (21d4 <eink_ed029tc1_put_display_buffer+0x124>)
    2150:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2152:	4f22      	ldr	r7, [pc, #136]	; (21dc <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    2154:	4e22      	ldr	r6, [pc, #136]	; (21e0 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    2156:	a803      	add	r0, sp, #12
    2158:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    215a:	23c0      	movs	r3, #192	; 0xc0
    215c:	05db      	lsls	r3, r3, #23
    215e:	2580      	movs	r5, #128	; 0x80
    2160:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2162:	22a0      	movs	r2, #160	; 0xa0
    2164:	491f      	ldr	r1, [pc, #124]	; (21e4 <eink_ed029tc1_put_display_buffer+0x134>)
    2166:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2168:	2190      	movs	r1, #144	; 0x90
    216a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    216c:	4053      	eors	r3, r2
    216e:	401c      	ands	r4, r3
    2170:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2172:	a803      	add	r0, sp, #12
    2174:	47b0      	blx	r6
    2176:	4225      	tst	r5, r4
    2178:	d0ed      	beq.n	2156 <eink_ed029tc1_put_display_buffer+0xa6>
    if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    217a:	4b1b      	ldr	r3, [pc, #108]	; (21e8 <eink_ed029tc1_put_display_buffer+0x138>)
    217c:	789b      	ldrb	r3, [r3, #2]
    217e:	2b00      	cmp	r3, #0
    2180:	d10a      	bne.n	2198 <eink_ed029tc1_put_display_buffer+0xe8>
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2182:	4c15      	ldr	r4, [pc, #84]	; (21d8 <eink_ed029tc1_put_display_buffer+0x128>)
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    2184:	2094      	movs	r0, #148	; 0x94
    2186:	0140      	lsls	r0, r0, #5
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2188:	6822      	ldr	r2, [r4, #0]
    218a:	6951      	ldr	r1, [r2, #20]
    218c:	5cc9      	ldrb	r1, [r1, r3]
    218e:	6912      	ldr	r2, [r2, #16]
    2190:	54d1      	strb	r1, [r2, r3]
    2192:	3301      	adds	r3, #1
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    2194:	4283      	cmp	r3, r0
    2196:	d1f7      	bne.n	2188 <eink_ed029tc1_put_display_buffer+0xd8>
}
    2198:	b004      	add	sp, #16
    219a:	bc04      	pop	{r2}
    219c:	4690      	mov	r8, r2
    219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    21a0:	2200      	movs	r2, #0
    21a2:	2100      	movs	r1, #0
    21a4:	2012      	movs	r0, #18
    21a6:	4b0b      	ldr	r3, [pc, #44]	; (21d4 <eink_ed029tc1_put_display_buffer+0x124>)
    21a8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    21aa:	4f0c      	ldr	r7, [pc, #48]	; (21dc <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    21ac:	4e0c      	ldr	r6, [pc, #48]	; (21e0 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    21ae:	a802      	add	r0, sp, #8
    21b0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    21b2:	23c0      	movs	r3, #192	; 0xc0
    21b4:	05db      	lsls	r3, r3, #23
    21b6:	2580      	movs	r5, #128	; 0x80
    21b8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    21ba:	22a0      	movs	r2, #160	; 0xa0
    21bc:	4909      	ldr	r1, [pc, #36]	; (21e4 <eink_ed029tc1_put_display_buffer+0x134>)
    21be:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21c0:	2190      	movs	r1, #144	; 0x90
    21c2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21c4:	4053      	eors	r3, r2
    21c6:	401c      	ands	r4, r3
    21c8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    21ca:	a802      	add	r0, sp, #8
    21cc:	47b0      	blx	r6
    21ce:	4225      	tst	r5, r4
    21d0:	d0ed      	beq.n	21ae <eink_ed029tc1_put_display_buffer+0xfe>
    21d2:	e7b9      	b.n	2148 <eink_ed029tc1_put_display_buffer+0x98>
    21d4:	00001e29 	.word	0x00001e29
    21d8:	20000434 	.word	0x20000434
    21dc:	0000034d 	.word	0x0000034d
    21e0:	0000035b 	.word	0x0000035b
    21e4:	41004400 	.word	0x41004400
    21e8:	200003f8 	.word	0x200003f8

000021ec <eink_el026tr1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_el026tr1_refresh_display_buffer(void)
{
    21ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ee:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    21f0:	2200      	movs	r2, #0
    21f2:	2100      	movs	r1, #0
    21f4:	2004      	movs	r0, #4
    21f6:	4c1a      	ldr	r4, [pc, #104]	; (2260 <eink_el026tr1_refresh_display_buffer+0x74>)
    21f8:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    21fa:	2200      	movs	r2, #0
    21fc:	2100      	movs	r1, #0
    21fe:	2012      	movs	r0, #18
    2200:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2202:	4f18      	ldr	r7, [pc, #96]	; (2264 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2204:	4e18      	ldr	r6, [pc, #96]	; (2268 <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    2206:	4668      	mov	r0, sp
    2208:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    220a:	23c0      	movs	r3, #192	; 0xc0
    220c:	05db      	lsls	r3, r3, #23
    220e:	2580      	movs	r5, #128	; 0x80
    2210:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2212:	22a0      	movs	r2, #160	; 0xa0
    2214:	4915      	ldr	r1, [pc, #84]	; (226c <eink_el026tr1_refresh_display_buffer+0x80>)
    2216:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2218:	2190      	movs	r1, #144	; 0x90
    221a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    221c:	4053      	eors	r3, r2
    221e:	401c      	ands	r4, r3
    2220:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2222:	4668      	mov	r0, sp
    2224:	47b0      	blx	r6
    2226:	4225      	tst	r5, r4
    2228:	d0ed      	beq.n	2206 <eink_el026tr1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    222a:	2200      	movs	r2, #0
    222c:	2100      	movs	r1, #0
    222e:	2002      	movs	r0, #2
    2230:	4b0b      	ldr	r3, [pc, #44]	; (2260 <eink_el026tr1_refresh_display_buffer+0x74>)
    2232:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2234:	4f0b      	ldr	r7, [pc, #44]	; (2264 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2236:	4e0c      	ldr	r6, [pc, #48]	; (2268 <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    2238:	a801      	add	r0, sp, #4
    223a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    223c:	23c0      	movs	r3, #192	; 0xc0
    223e:	05db      	lsls	r3, r3, #23
    2240:	2580      	movs	r5, #128	; 0x80
    2242:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2244:	22a0      	movs	r2, #160	; 0xa0
    2246:	4909      	ldr	r1, [pc, #36]	; (226c <eink_el026tr1_refresh_display_buffer+0x80>)
    2248:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    224a:	2190      	movs	r1, #144	; 0x90
    224c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    224e:	4053      	eors	r3, r2
    2250:	401c      	ands	r4, r3
    2252:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2254:	a801      	add	r0, sp, #4
    2256:	47b0      	blx	r6
    2258:	4225      	tst	r5, r4
    225a:	d0ed      	beq.n	2238 <eink_el026tr1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    225c:	b003      	add	sp, #12
    225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2260:	00001e29 	.word	0x00001e29
    2264:	0000034d 	.word	0x0000034d
    2268:	0000035b 	.word	0x0000035b
    226c:	41004400 	.word	0x41004400

00002270 <eink_el026tr1_put_display_buffer>:
{
    2270:	b5f0      	push	{r4, r5, r6, r7, lr}
    2272:	46c6      	mov	lr, r8
    2274:	b500      	push	{lr}
    2276:	b084      	sub	sp, #16
    2278:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    227a:	2200      	movs	r2, #0
    227c:	2100      	movs	r1, #0
    227e:	2004      	movs	r0, #4
    2280:	4c3c      	ldr	r4, [pc, #240]	; (2374 <eink_el026tr1_put_display_buffer+0x104>)
    2282:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    2284:	4b3c      	ldr	r3, [pc, #240]	; (2378 <eink_el026tr1_put_display_buffer+0x108>)
    2286:	681b      	ldr	r3, [r3, #0]
    2288:	6919      	ldr	r1, [r3, #16]
    228a:	4a3c      	ldr	r2, [pc, #240]	; (237c <eink_el026tr1_put_display_buffer+0x10c>)
    228c:	2010      	movs	r0, #16
    228e:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    2290:	2200      	movs	r2, #0
    2292:	2100      	movs	r1, #0
    2294:	2011      	movs	r0, #17
    2296:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2298:	4d39      	ldr	r5, [pc, #228]	; (2380 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    229a:	4f3a      	ldr	r7, [pc, #232]	; (2384 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    229c:	4668      	mov	r0, sp
    229e:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22a0:	23c0      	movs	r3, #192	; 0xc0
    22a2:	05db      	lsls	r3, r3, #23
    22a4:	2680      	movs	r6, #128	; 0x80
    22a6:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22a8:	22a0      	movs	r2, #160	; 0xa0
    22aa:	4937      	ldr	r1, [pc, #220]	; (2388 <eink_el026tr1_put_display_buffer+0x118>)
    22ac:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22ae:	2190      	movs	r1, #144	; 0x90
    22b0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22b2:	4053      	eors	r3, r2
    22b4:	401c      	ands	r4, r3
    22b6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22b8:	4668      	mov	r0, sp
    22ba:	47b8      	blx	r7
    22bc:	4226      	tst	r6, r4
    22be:	d0ed      	beq.n	229c <eink_el026tr1_put_display_buffer+0x2c>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    22c0:	4b2d      	ldr	r3, [pc, #180]	; (2378 <eink_el026tr1_put_display_buffer+0x108>)
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	6959      	ldr	r1, [r3, #20]
    22c6:	4a2d      	ldr	r2, [pc, #180]	; (237c <eink_el026tr1_put_display_buffer+0x10c>)
    22c8:	2013      	movs	r0, #19
    22ca:	4c2a      	ldr	r4, [pc, #168]	; (2374 <eink_el026tr1_put_display_buffer+0x104>)
    22cc:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    22ce:	2200      	movs	r2, #0
    22d0:	2100      	movs	r1, #0
    22d2:	2011      	movs	r0, #17
    22d4:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    22d6:	4d2a      	ldr	r5, [pc, #168]	; (2380 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    22d8:	4f2a      	ldr	r7, [pc, #168]	; (2384 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    22da:	a801      	add	r0, sp, #4
    22dc:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22de:	23c0      	movs	r3, #192	; 0xc0
    22e0:	05db      	lsls	r3, r3, #23
    22e2:	2680      	movs	r6, #128	; 0x80
    22e4:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22e6:	22a0      	movs	r2, #160	; 0xa0
    22e8:	4927      	ldr	r1, [pc, #156]	; (2388 <eink_el026tr1_put_display_buffer+0x118>)
    22ea:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22ec:	2190      	movs	r1, #144	; 0x90
    22ee:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22f0:	4053      	eors	r3, r2
    22f2:	401c      	ands	r4, r3
    22f4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22f6:	a801      	add	r0, sp, #4
    22f8:	47b8      	blx	r7
    22fa:	4226      	tst	r6, r4
    22fc:	d0ed      	beq.n	22da <eink_el026tr1_put_display_buffer+0x6a>
    if(refresh_display) {
    22fe:	4643      	mov	r3, r8
    2300:	2b00      	cmp	r3, #0
    2302:	d11c      	bne.n	233e <eink_el026tr1_put_display_buffer+0xce>
    eink_write_data(UC8151_POF, 0, 0);
    2304:	2200      	movs	r2, #0
    2306:	2100      	movs	r1, #0
    2308:	2002      	movs	r0, #2
    230a:	4b1a      	ldr	r3, [pc, #104]	; (2374 <eink_el026tr1_put_display_buffer+0x104>)
    230c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    230e:	4f1c      	ldr	r7, [pc, #112]	; (2380 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    2310:	4e1c      	ldr	r6, [pc, #112]	; (2384 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    2312:	a803      	add	r0, sp, #12
    2314:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2316:	23c0      	movs	r3, #192	; 0xc0
    2318:	05db      	lsls	r3, r3, #23
    231a:	2580      	movs	r5, #128	; 0x80
    231c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    231e:	22a0      	movs	r2, #160	; 0xa0
    2320:	4919      	ldr	r1, [pc, #100]	; (2388 <eink_el026tr1_put_display_buffer+0x118>)
    2322:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2324:	2190      	movs	r1, #144	; 0x90
    2326:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2328:	4053      	eors	r3, r2
    232a:	401c      	ands	r4, r3
    232c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    232e:	a803      	add	r0, sp, #12
    2330:	47b0      	blx	r6
    2332:	4225      	tst	r5, r4
    2334:	d0ed      	beq.n	2312 <eink_el026tr1_put_display_buffer+0xa2>
}
    2336:	b004      	add	sp, #16
    2338:	bc04      	pop	{r2}
    233a:	4690      	mov	r8, r2
    233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    233e:	2200      	movs	r2, #0
    2340:	2100      	movs	r1, #0
    2342:	2012      	movs	r0, #18
    2344:	4b0b      	ldr	r3, [pc, #44]	; (2374 <eink_el026tr1_put_display_buffer+0x104>)
    2346:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2348:	4f0d      	ldr	r7, [pc, #52]	; (2380 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    234a:	4e0e      	ldr	r6, [pc, #56]	; (2384 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    234c:	a802      	add	r0, sp, #8
    234e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2350:	23c0      	movs	r3, #192	; 0xc0
    2352:	05db      	lsls	r3, r3, #23
    2354:	2580      	movs	r5, #128	; 0x80
    2356:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2358:	22a0      	movs	r2, #160	; 0xa0
    235a:	490b      	ldr	r1, [pc, #44]	; (2388 <eink_el026tr1_put_display_buffer+0x118>)
    235c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    235e:	2190      	movs	r1, #144	; 0x90
    2360:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2362:	4053      	eors	r3, r2
    2364:	401c      	ands	r4, r3
    2366:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2368:	a802      	add	r0, sp, #8
    236a:	47b0      	blx	r6
    236c:	4225      	tst	r5, r4
    236e:	d0ed      	beq.n	234c <eink_el026tr1_put_display_buffer+0xdc>
    2370:	e7c8      	b.n	2304 <eink_el026tr1_put_display_buffer+0x94>
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	00001e29 	.word	0x00001e29
    2378:	20000434 	.word	0x20000434
    237c:	000015f8 	.word	0x000015f8
    2380:	0000034d 	.word	0x0000034d
    2384:	0000035b 	.word	0x0000035b
    2388:	41004400 	.word	0x41004400

0000238c <eink_hink_e0154a05_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_hink_e0154a05_refresh_display_buffer(void)
{
    238c:	b5f0      	push	{r4, r5, r6, r7, lr}
    238e:	b085      	sub	sp, #20
    uint8_t eink_data[1];
    uint8_t temperature_value = 20;
    
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    2390:	4b23      	ldr	r3, [pc, #140]	; (2420 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    2392:	785b      	ldrb	r3, [r3, #1]
    2394:	2b01      	cmp	r3, #1
    2396:	d036      	beq.n	2406 <eink_hink_e0154a05_refresh_display_buffer+0x7a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
        else
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
        
    } else {
        eink_data[0] = 0xF7; /* Slow Update */
    2398:	22f7      	movs	r2, #247	; 0xf7
    239a:	ab03      	add	r3, sp, #12
    239c:	701a      	strb	r2, [r3, #0]
    }

    /* Display Update Control 2 */
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    239e:	2201      	movs	r2, #1
    23a0:	a903      	add	r1, sp, #12
    23a2:	2022      	movs	r0, #34	; 0x22
    23a4:	4b1f      	ldr	r3, [pc, #124]	; (2424 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    23a6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23a8:	4f1f      	ldr	r7, [pc, #124]	; (2428 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    23aa:	4e20      	ldr	r6, [pc, #128]	; (242c <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    23ac:	a801      	add	r0, sp, #4
    23ae:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23b0:	23c0      	movs	r3, #192	; 0xc0
    23b2:	05db      	lsls	r3, r3, #23
    23b4:	2580      	movs	r5, #128	; 0x80
    23b6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23b8:	22a0      	movs	r2, #160	; 0xa0
    23ba:	491d      	ldr	r1, [pc, #116]	; (2430 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    23bc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23be:	2190      	movs	r1, #144	; 0x90
    23c0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23c2:	4053      	eors	r3, r2
    23c4:	401c      	ands	r4, r3
    23c6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23c8:	a801      	add	r0, sp, #4
    23ca:	47b0      	blx	r6
 * hold the MCU until it returns LOW again.
 */
static inline void ssd1608_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(gpio_get_pin_level(EINK_BUSY));
    23cc:	4225      	tst	r5, r4
    23ce:	d1ed      	bne.n	23ac <eink_hink_e0154a05_refresh_display_buffer+0x20>
    ssd1608_wait_for_busy();
    
    /* Master Activation */
    eink_write_data(SSD1608_MA, 0, 0);
    23d0:	2200      	movs	r2, #0
    23d2:	2100      	movs	r1, #0
    23d4:	2020      	movs	r0, #32
    23d6:	4b13      	ldr	r3, [pc, #76]	; (2424 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    23d8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23da:	4f13      	ldr	r7, [pc, #76]	; (2428 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    23dc:	4e13      	ldr	r6, [pc, #76]	; (242c <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    23de:	a802      	add	r0, sp, #8
    23e0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23e2:	23c0      	movs	r3, #192	; 0xc0
    23e4:	05db      	lsls	r3, r3, #23
    23e6:	2580      	movs	r5, #128	; 0x80
    23e8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23ea:	22a0      	movs	r2, #160	; 0xa0
    23ec:	4910      	ldr	r1, [pc, #64]	; (2430 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    23ee:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23f0:	2190      	movs	r1, #144	; 0x90
    23f2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23f4:	4053      	eors	r3, r2
    23f6:	401c      	ands	r4, r3
    23f8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23fa:	a802      	add	r0, sp, #8
    23fc:	47b0      	blx	r6
    23fe:	4225      	tst	r5, r4
    2400:	d1ed      	bne.n	23de <eink_hink_e0154a05_refresh_display_buffer+0x52>
    ssd1608_wait_for_busy();
}
    2402:	b005      	add	sp, #20
    2404:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2406:	4b06      	ldr	r3, [pc, #24]	; (2420 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    2408:	789b      	ldrb	r3, [r3, #2]
    240a:	2b00      	cmp	r3, #0
    240c:	d103      	bne.n	2416 <eink_hink_e0154a05_refresh_display_buffer+0x8a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    240e:	22c7      	movs	r2, #199	; 0xc7
    2410:	ab03      	add	r3, sp, #12
    2412:	701a      	strb	r2, [r3, #0]
    2414:	e7c3      	b.n	239e <eink_hink_e0154a05_refresh_display_buffer+0x12>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    2416:	22ff      	movs	r2, #255	; 0xff
    2418:	ab03      	add	r3, sp, #12
    241a:	701a      	strb	r2, [r3, #0]
    241c:	e7bf      	b.n	239e <eink_hink_e0154a05_refresh_display_buffer+0x12>
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	200003b8 	.word	0x200003b8
    2424:	00001e29 	.word	0x00001e29
    2428:	0000034d 	.word	0x0000034d
    242c:	0000035b 	.word	0x0000035b
    2430:	41004400 	.word	0x41004400

00002434 <eink_ac040tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac040tc1_refresh_display_buffer(void)
{
    2434:	b5f0      	push	{r4, r5, r6, r7, lr}
    2436:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2438:	2200      	movs	r2, #0
    243a:	2100      	movs	r1, #0
    243c:	2004      	movs	r0, #4
    243e:	4b25      	ldr	r3, [pc, #148]	; (24d4 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    2440:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2442:	4f25      	ldr	r7, [pc, #148]	; (24d8 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2444:	4e25      	ldr	r6, [pc, #148]	; (24dc <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2446:	a801      	add	r0, sp, #4
    2448:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    244a:	23c0      	movs	r3, #192	; 0xc0
    244c:	05db      	lsls	r3, r3, #23
    244e:	2580      	movs	r5, #128	; 0x80
    2450:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2452:	22a0      	movs	r2, #160	; 0xa0
    2454:	4922      	ldr	r1, [pc, #136]	; (24e0 <eink_ac040tc1_refresh_display_buffer+0xac>)
    2456:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2458:	2190      	movs	r1, #144	; 0x90
    245a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    245c:	4053      	eors	r3, r2
    245e:	401c      	ands	r4, r3
    2460:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2462:	a801      	add	r0, sp, #4
    2464:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8159_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    2466:	4225      	tst	r5, r4
    2468:	d0ed      	beq.n	2446 <eink_ac040tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    246a:	2200      	movs	r2, #0
    246c:	2100      	movs	r1, #0
    246e:	2012      	movs	r0, #18
    2470:	4b18      	ldr	r3, [pc, #96]	; (24d4 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    2472:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2474:	4f18      	ldr	r7, [pc, #96]	; (24d8 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2476:	4e19      	ldr	r6, [pc, #100]	; (24dc <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2478:	a802      	add	r0, sp, #8
    247a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    247c:	23c0      	movs	r3, #192	; 0xc0
    247e:	05db      	lsls	r3, r3, #23
    2480:	2580      	movs	r5, #128	; 0x80
    2482:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2484:	22a0      	movs	r2, #160	; 0xa0
    2486:	4916      	ldr	r1, [pc, #88]	; (24e0 <eink_ac040tc1_refresh_display_buffer+0xac>)
    2488:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    248a:	2190      	movs	r1, #144	; 0x90
    248c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    248e:	4053      	eors	r3, r2
    2490:	401c      	ands	r4, r3
    2492:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2494:	a802      	add	r0, sp, #8
    2496:	47b0      	blx	r6
    2498:	4225      	tst	r5, r4
    249a:	d0ed      	beq.n	2478 <eink_ac040tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    249c:	2200      	movs	r2, #0
    249e:	2100      	movs	r1, #0
    24a0:	2002      	movs	r0, #2
    24a2:	4b0c      	ldr	r3, [pc, #48]	; (24d4 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    24a4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    24a6:	4f0c      	ldr	r7, [pc, #48]	; (24d8 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    24a8:	4e0c      	ldr	r6, [pc, #48]	; (24dc <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    24aa:	a803      	add	r0, sp, #12
    24ac:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    24ae:	23c0      	movs	r3, #192	; 0xc0
    24b0:	05db      	lsls	r3, r3, #23
    24b2:	2580      	movs	r5, #128	; 0x80
    24b4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    24b6:	22a0      	movs	r2, #160	; 0xa0
    24b8:	4909      	ldr	r1, [pc, #36]	; (24e0 <eink_ac040tc1_refresh_display_buffer+0xac>)
    24ba:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    24bc:	2190      	movs	r1, #144	; 0x90
    24be:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    24c0:	4053      	eors	r3, r2
    24c2:	401c      	ands	r4, r3
    24c4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    24c6:	a803      	add	r0, sp, #12
    24c8:	47b0      	blx	r6
    24ca:	4225      	tst	r5, r4
    24cc:	d0ed      	beq.n	24aa <eink_ac040tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    24ce:	b005      	add	sp, #20
    24d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	00001e29 	.word	0x00001e29
    24d8:	0000034d 	.word	0x0000034d
    24dc:	0000035b 	.word	0x0000035b
    24e0:	41004400 	.word	0x41004400

000024e4 <eink_ac040tc1_put_display_buffer>:
{
    24e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24e6:	46c6      	mov	lr, r8
    24e8:	b500      	push	{lr}
    24ea:	b084      	sub	sp, #16
    24ec:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC040TC1_DISPLAY_BUFFER_SIZE);
    24ee:	4b37      	ldr	r3, [pc, #220]	; (25cc <eink_ac040tc1_put_display_buffer+0xe8>)
    24f0:	681b      	ldr	r3, [r3, #0]
    24f2:	6919      	ldr	r1, [r3, #16]
    24f4:	228c      	movs	r2, #140	; 0x8c
    24f6:	0292      	lsls	r2, r2, #10
    24f8:	2010      	movs	r0, #16
    24fa:	4b35      	ldr	r3, [pc, #212]	; (25d0 <eink_ac040tc1_put_display_buffer+0xec>)
    24fc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    24fe:	4f35      	ldr	r7, [pc, #212]	; (25d4 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2500:	4e35      	ldr	r6, [pc, #212]	; (25d8 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2502:	4668      	mov	r0, sp
    2504:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2506:	23c0      	movs	r3, #192	; 0xc0
    2508:	05db      	lsls	r3, r3, #23
    250a:	2580      	movs	r5, #128	; 0x80
    250c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    250e:	22a0      	movs	r2, #160	; 0xa0
    2510:	4932      	ldr	r1, [pc, #200]	; (25dc <eink_ac040tc1_put_display_buffer+0xf8>)
    2512:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2514:	2190      	movs	r1, #144	; 0x90
    2516:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2518:	4053      	eors	r3, r2
    251a:	401c      	ands	r4, r3
    251c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    251e:	4668      	mov	r0, sp
    2520:	47b0      	blx	r6
    2522:	4225      	tst	r5, r4
    2524:	d0ed      	beq.n	2502 <eink_ac040tc1_put_display_buffer+0x1e>
    if(refresh_display) {
    2526:	4643      	mov	r3, r8
    2528:	2b00      	cmp	r3, #0
    252a:	d103      	bne.n	2534 <eink_ac040tc1_put_display_buffer+0x50>
}
    252c:	b004      	add	sp, #16
    252e:	bc04      	pop	{r2}
    2530:	4690      	mov	r8, r2
    2532:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    2534:	2200      	movs	r2, #0
    2536:	2100      	movs	r1, #0
    2538:	2004      	movs	r0, #4
    253a:	4b25      	ldr	r3, [pc, #148]	; (25d0 <eink_ac040tc1_put_display_buffer+0xec>)
    253c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    253e:	4f25      	ldr	r7, [pc, #148]	; (25d4 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2540:	4e25      	ldr	r6, [pc, #148]	; (25d8 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2542:	a801      	add	r0, sp, #4
    2544:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2546:	23c0      	movs	r3, #192	; 0xc0
    2548:	05db      	lsls	r3, r3, #23
    254a:	2580      	movs	r5, #128	; 0x80
    254c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    254e:	22a0      	movs	r2, #160	; 0xa0
    2550:	4922      	ldr	r1, [pc, #136]	; (25dc <eink_ac040tc1_put_display_buffer+0xf8>)
    2552:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2554:	2190      	movs	r1, #144	; 0x90
    2556:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2558:	4053      	eors	r3, r2
    255a:	401c      	ands	r4, r3
    255c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    255e:	a801      	add	r0, sp, #4
    2560:	47b0      	blx	r6
    2562:	4225      	tst	r5, r4
    2564:	d0ed      	beq.n	2542 <eink_ac040tc1_put_display_buffer+0x5e>
        eink_write_data(UC8159_DRF, 0, 0);
    2566:	2200      	movs	r2, #0
    2568:	2100      	movs	r1, #0
    256a:	2012      	movs	r0, #18
    256c:	4b18      	ldr	r3, [pc, #96]	; (25d0 <eink_ac040tc1_put_display_buffer+0xec>)
    256e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2570:	4f18      	ldr	r7, [pc, #96]	; (25d4 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2572:	4e19      	ldr	r6, [pc, #100]	; (25d8 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2574:	a802      	add	r0, sp, #8
    2576:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2578:	23c0      	movs	r3, #192	; 0xc0
    257a:	05db      	lsls	r3, r3, #23
    257c:	2580      	movs	r5, #128	; 0x80
    257e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2580:	22a0      	movs	r2, #160	; 0xa0
    2582:	4916      	ldr	r1, [pc, #88]	; (25dc <eink_ac040tc1_put_display_buffer+0xf8>)
    2584:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2586:	2190      	movs	r1, #144	; 0x90
    2588:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    258a:	4053      	eors	r3, r2
    258c:	401c      	ands	r4, r3
    258e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2590:	a802      	add	r0, sp, #8
    2592:	47b0      	blx	r6
    2594:	4225      	tst	r5, r4
    2596:	d0ed      	beq.n	2574 <eink_ac040tc1_put_display_buffer+0x90>
        eink_write_data(UC8159_POF, 0, 0);
    2598:	2200      	movs	r2, #0
    259a:	2100      	movs	r1, #0
    259c:	2002      	movs	r0, #2
    259e:	4b0c      	ldr	r3, [pc, #48]	; (25d0 <eink_ac040tc1_put_display_buffer+0xec>)
    25a0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    25a2:	4f0c      	ldr	r7, [pc, #48]	; (25d4 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    25a4:	4e0c      	ldr	r6, [pc, #48]	; (25d8 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    25a6:	a803      	add	r0, sp, #12
    25a8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25aa:	23c0      	movs	r3, #192	; 0xc0
    25ac:	05db      	lsls	r3, r3, #23
    25ae:	2580      	movs	r5, #128	; 0x80
    25b0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25b2:	22a0      	movs	r2, #160	; 0xa0
    25b4:	4909      	ldr	r1, [pc, #36]	; (25dc <eink_ac040tc1_put_display_buffer+0xf8>)
    25b6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25b8:	2190      	movs	r1, #144	; 0x90
    25ba:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    25bc:	4053      	eors	r3, r2
    25be:	401c      	ands	r4, r3
    25c0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    25c2:	a803      	add	r0, sp, #12
    25c4:	47b0      	blx	r6
    25c6:	4225      	tst	r5, r4
    25c8:	d0ed      	beq.n	25a6 <eink_ac040tc1_put_display_buffer+0xc2>
    25ca:	e7af      	b.n	252c <eink_ac040tc1_put_display_buffer+0x48>
    25cc:	20000434 	.word	0x20000434
    25d0:	00001e29 	.word	0x00001e29
    25d4:	0000034d 	.word	0x0000034d
    25d8:	0000035b 	.word	0x0000035b
    25dc:	41004400 	.word	0x41004400

000025e0 <eink_ac057tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac057tc1_refresh_display_buffer(void)
{
    25e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25e2:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    25e4:	2200      	movs	r2, #0
    25e6:	2100      	movs	r1, #0
    25e8:	2004      	movs	r0, #4
    25ea:	4b25      	ldr	r3, [pc, #148]	; (2680 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    25ec:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    25ee:	4f25      	ldr	r7, [pc, #148]	; (2684 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    25f0:	4e25      	ldr	r6, [pc, #148]	; (2688 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    25f2:	a801      	add	r0, sp, #4
    25f4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25f6:	23c0      	movs	r3, #192	; 0xc0
    25f8:	05db      	lsls	r3, r3, #23
    25fa:	2580      	movs	r5, #128	; 0x80
    25fc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25fe:	22a0      	movs	r2, #160	; 0xa0
    2600:	4922      	ldr	r1, [pc, #136]	; (268c <eink_ac057tc1_refresh_display_buffer+0xac>)
    2602:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2604:	2190      	movs	r1, #144	; 0x90
    2606:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2608:	4053      	eors	r3, r2
    260a:	401c      	ands	r4, r3
    260c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    260e:	a801      	add	r0, sp, #4
    2610:	47b0      	blx	r6
    2612:	4225      	tst	r5, r4
    2614:	d0ed      	beq.n	25f2 <eink_ac057tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    2616:	2200      	movs	r2, #0
    2618:	2100      	movs	r1, #0
    261a:	2012      	movs	r0, #18
    261c:	4b18      	ldr	r3, [pc, #96]	; (2680 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    261e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2620:	4f18      	ldr	r7, [pc, #96]	; (2684 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2622:	4e19      	ldr	r6, [pc, #100]	; (2688 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2624:	a802      	add	r0, sp, #8
    2626:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2628:	23c0      	movs	r3, #192	; 0xc0
    262a:	05db      	lsls	r3, r3, #23
    262c:	2580      	movs	r5, #128	; 0x80
    262e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2630:	22a0      	movs	r2, #160	; 0xa0
    2632:	4916      	ldr	r1, [pc, #88]	; (268c <eink_ac057tc1_refresh_display_buffer+0xac>)
    2634:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2636:	2190      	movs	r1, #144	; 0x90
    2638:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    263a:	4053      	eors	r3, r2
    263c:	401c      	ands	r4, r3
    263e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2640:	a802      	add	r0, sp, #8
    2642:	47b0      	blx	r6
    2644:	4225      	tst	r5, r4
    2646:	d0ed      	beq.n	2624 <eink_ac057tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    2648:	2200      	movs	r2, #0
    264a:	2100      	movs	r1, #0
    264c:	2002      	movs	r0, #2
    264e:	4b0c      	ldr	r3, [pc, #48]	; (2680 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    2650:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2652:	4f0c      	ldr	r7, [pc, #48]	; (2684 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2654:	4e0c      	ldr	r6, [pc, #48]	; (2688 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2656:	a803      	add	r0, sp, #12
    2658:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    265a:	23c0      	movs	r3, #192	; 0xc0
    265c:	05db      	lsls	r3, r3, #23
    265e:	2580      	movs	r5, #128	; 0x80
    2660:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2662:	22a0      	movs	r2, #160	; 0xa0
    2664:	4909      	ldr	r1, [pc, #36]	; (268c <eink_ac057tc1_refresh_display_buffer+0xac>)
    2666:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2668:	2190      	movs	r1, #144	; 0x90
    266a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    266c:	4053      	eors	r3, r2
    266e:	401c      	ands	r4, r3
    2670:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2672:	a803      	add	r0, sp, #12
    2674:	47b0      	blx	r6
    2676:	4225      	tst	r5, r4
    2678:	d0ed      	beq.n	2656 <eink_ac057tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    267a:	b005      	add	sp, #20
    267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	00001e29 	.word	0x00001e29
    2684:	0000034d 	.word	0x0000034d
    2688:	0000035b 	.word	0x0000035b
    268c:	41004400 	.word	0x41004400

00002690 <eink_ac057tc1_put_display_buffer>:
{
    2690:	b5f0      	push	{r4, r5, r6, r7, lr}
    2692:	46c6      	mov	lr, r8
    2694:	b500      	push	{lr}
    2696:	b084      	sub	sp, #16
    2698:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC057TC1_DISPLAY_BUFFER_SIZE);
    269a:	4b37      	ldr	r3, [pc, #220]	; (2778 <eink_ac057tc1_put_display_buffer+0xe8>)
    269c:	681b      	ldr	r3, [r3, #0]
    269e:	6919      	ldr	r1, [r3, #16]
    26a0:	4a36      	ldr	r2, [pc, #216]	; (277c <eink_ac057tc1_put_display_buffer+0xec>)
    26a2:	2010      	movs	r0, #16
    26a4:	4b36      	ldr	r3, [pc, #216]	; (2780 <eink_ac057tc1_put_display_buffer+0xf0>)
    26a6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    26a8:	4f36      	ldr	r7, [pc, #216]	; (2784 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    26aa:	4e37      	ldr	r6, [pc, #220]	; (2788 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    26ac:	4668      	mov	r0, sp
    26ae:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26b0:	23c0      	movs	r3, #192	; 0xc0
    26b2:	05db      	lsls	r3, r3, #23
    26b4:	2580      	movs	r5, #128	; 0x80
    26b6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26b8:	22a0      	movs	r2, #160	; 0xa0
    26ba:	4934      	ldr	r1, [pc, #208]	; (278c <eink_ac057tc1_put_display_buffer+0xfc>)
    26bc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26be:	2190      	movs	r1, #144	; 0x90
    26c0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    26c2:	4053      	eors	r3, r2
    26c4:	401c      	ands	r4, r3
    26c6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    26c8:	4668      	mov	r0, sp
    26ca:	47b0      	blx	r6
    26cc:	4225      	tst	r5, r4
    26ce:	d0ed      	beq.n	26ac <eink_ac057tc1_put_display_buffer+0x1c>
    if(refresh_display) {
    26d0:	4643      	mov	r3, r8
    26d2:	2b00      	cmp	r3, #0
    26d4:	d103      	bne.n	26de <eink_ac057tc1_put_display_buffer+0x4e>
}
    26d6:	b004      	add	sp, #16
    26d8:	bc04      	pop	{r2}
    26da:	4690      	mov	r8, r2
    26dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    26de:	2200      	movs	r2, #0
    26e0:	2100      	movs	r1, #0
    26e2:	2004      	movs	r0, #4
    26e4:	4b26      	ldr	r3, [pc, #152]	; (2780 <eink_ac057tc1_put_display_buffer+0xf0>)
    26e6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    26e8:	4f26      	ldr	r7, [pc, #152]	; (2784 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    26ea:	4e27      	ldr	r6, [pc, #156]	; (2788 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    26ec:	a801      	add	r0, sp, #4
    26ee:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26f0:	23c0      	movs	r3, #192	; 0xc0
    26f2:	05db      	lsls	r3, r3, #23
    26f4:	2580      	movs	r5, #128	; 0x80
    26f6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26f8:	22a0      	movs	r2, #160	; 0xa0
    26fa:	4924      	ldr	r1, [pc, #144]	; (278c <eink_ac057tc1_put_display_buffer+0xfc>)
    26fc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26fe:	2190      	movs	r1, #144	; 0x90
    2700:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2702:	4053      	eors	r3, r2
    2704:	401c      	ands	r4, r3
    2706:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2708:	a801      	add	r0, sp, #4
    270a:	47b0      	blx	r6
    270c:	4225      	tst	r5, r4
    270e:	d0ed      	beq.n	26ec <eink_ac057tc1_put_display_buffer+0x5c>
        eink_write_data(UC8159_DRF, 0, 0);
    2710:	2200      	movs	r2, #0
    2712:	2100      	movs	r1, #0
    2714:	2012      	movs	r0, #18
    2716:	4b1a      	ldr	r3, [pc, #104]	; (2780 <eink_ac057tc1_put_display_buffer+0xf0>)
    2718:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    271a:	4f1a      	ldr	r7, [pc, #104]	; (2784 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    271c:	4e1a      	ldr	r6, [pc, #104]	; (2788 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    271e:	a802      	add	r0, sp, #8
    2720:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2722:	23c0      	movs	r3, #192	; 0xc0
    2724:	05db      	lsls	r3, r3, #23
    2726:	2580      	movs	r5, #128	; 0x80
    2728:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    272a:	22a0      	movs	r2, #160	; 0xa0
    272c:	4917      	ldr	r1, [pc, #92]	; (278c <eink_ac057tc1_put_display_buffer+0xfc>)
    272e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2730:	2190      	movs	r1, #144	; 0x90
    2732:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2734:	4053      	eors	r3, r2
    2736:	401c      	ands	r4, r3
    2738:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    273a:	a802      	add	r0, sp, #8
    273c:	47b0      	blx	r6
    273e:	4225      	tst	r5, r4
    2740:	d0ed      	beq.n	271e <eink_ac057tc1_put_display_buffer+0x8e>
        eink_write_data(UC8159_POF, 0, 0);
    2742:	2200      	movs	r2, #0
    2744:	2100      	movs	r1, #0
    2746:	2002      	movs	r0, #2
    2748:	4b0d      	ldr	r3, [pc, #52]	; (2780 <eink_ac057tc1_put_display_buffer+0xf0>)
    274a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    274c:	4f0d      	ldr	r7, [pc, #52]	; (2784 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    274e:	4e0e      	ldr	r6, [pc, #56]	; (2788 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    2750:	a803      	add	r0, sp, #12
    2752:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2754:	23c0      	movs	r3, #192	; 0xc0
    2756:	05db      	lsls	r3, r3, #23
    2758:	2580      	movs	r5, #128	; 0x80
    275a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    275c:	22a0      	movs	r2, #160	; 0xa0
    275e:	490b      	ldr	r1, [pc, #44]	; (278c <eink_ac057tc1_put_display_buffer+0xfc>)
    2760:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2762:	2190      	movs	r1, #144	; 0x90
    2764:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2766:	4053      	eors	r3, r2
    2768:	401c      	ands	r4, r3
    276a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    276c:	a803      	add	r0, sp, #12
    276e:	47b0      	blx	r6
    2770:	4225      	tst	r5, r4
    2772:	d0ed      	beq.n	2750 <eink_ac057tc1_put_display_buffer+0xc0>
    2774:	e7af      	b.n	26d6 <eink_ac057tc1_put_display_buffer+0x46>
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	20000434 	.word	0x20000434
    277c:	00020d00 	.word	0x00020d00
    2780:	00001e29 	.word	0x00001e29
    2784:	0000034d 	.word	0x0000034d
    2788:	0000035b 	.word	0x0000035b
    278c:	41004400 	.word	0x41004400

00002790 <eink_ed057tc2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed057tc2_refresh_display_buffer(void)
{
    2790:	b5f0      	push	{r4, r5, r6, r7, lr}
    2792:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2794:	2200      	movs	r2, #0
    2796:	2100      	movs	r1, #0
    2798:	2004      	movs	r0, #4
    279a:	4c1a      	ldr	r4, [pc, #104]	; (2804 <eink_ed057tc2_refresh_display_buffer+0x74>)
    279c:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    279e:	2200      	movs	r2, #0
    27a0:	2100      	movs	r1, #0
    27a2:	2012      	movs	r0, #18
    27a4:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    27a6:	4f18      	ldr	r7, [pc, #96]	; (2808 <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    27a8:	4e18      	ldr	r6, [pc, #96]	; (280c <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    27aa:	4668      	mov	r0, sp
    27ac:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    27ae:	23c0      	movs	r3, #192	; 0xc0
    27b0:	05db      	lsls	r3, r3, #23
    27b2:	2580      	movs	r5, #128	; 0x80
    27b4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    27b6:	22a0      	movs	r2, #160	; 0xa0
    27b8:	4915      	ldr	r1, [pc, #84]	; (2810 <eink_ed057tc2_refresh_display_buffer+0x80>)
    27ba:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    27bc:	2190      	movs	r1, #144	; 0x90
    27be:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    27c0:	4053      	eors	r3, r2
    27c2:	401c      	ands	r4, r3
    27c4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    27c6:	4668      	mov	r0, sp
    27c8:	47b0      	blx	r6
    27ca:	4225      	tst	r5, r4
    27cc:	d0ed      	beq.n	27aa <eink_ed057tc2_refresh_display_buffer+0x1a>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    27ce:	2200      	movs	r2, #0
    27d0:	2100      	movs	r1, #0
    27d2:	2002      	movs	r0, #2
    27d4:	4b0b      	ldr	r3, [pc, #44]	; (2804 <eink_ed057tc2_refresh_display_buffer+0x74>)
    27d6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    27d8:	4f0b      	ldr	r7, [pc, #44]	; (2808 <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    27da:	4e0c      	ldr	r6, [pc, #48]	; (280c <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    27dc:	a801      	add	r0, sp, #4
    27de:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    27e0:	23c0      	movs	r3, #192	; 0xc0
    27e2:	05db      	lsls	r3, r3, #23
    27e4:	2580      	movs	r5, #128	; 0x80
    27e6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    27e8:	22a0      	movs	r2, #160	; 0xa0
    27ea:	4909      	ldr	r1, [pc, #36]	; (2810 <eink_ed057tc2_refresh_display_buffer+0x80>)
    27ec:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    27ee:	2190      	movs	r1, #144	; 0x90
    27f0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    27f2:	4053      	eors	r3, r2
    27f4:	401c      	ands	r4, r3
    27f6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    27f8:	a801      	add	r0, sp, #4
    27fa:	47b0      	blx	r6
    27fc:	4225      	tst	r5, r4
    27fe:	d0ed      	beq.n	27dc <eink_ed057tc2_refresh_display_buffer+0x4c>
    uc8159_wait_for_busy();
}
    2800:	b003      	add	sp, #12
    2802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2804:	00001e29 	.word	0x00001e29
    2808:	0000034d 	.word	0x0000034d
    280c:	0000035b 	.word	0x0000035b
    2810:	41004400 	.word	0x41004400

00002814 <eink_ed057tc2_put_display_buffer>:
{
    2814:	b5f0      	push	{r4, r5, r6, r7, lr}
    2816:	46c6      	mov	lr, r8
    2818:	b500      	push	{lr}
    281a:	b084      	sub	sp, #16
    281c:	4680      	mov	r8, r0
    eink_write_data(UC8159_PON, 0, 0);
    281e:	2200      	movs	r2, #0
    2820:	2100      	movs	r1, #0
    2822:	2004      	movs	r0, #4
    2824:	4c2c      	ldr	r4, [pc, #176]	; (28d8 <eink_ed057tc2_put_display_buffer+0xc4>)
    2826:	47a0      	blx	r4
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED057TC2_DISPLAY_BUFFER_SIZE);
    2828:	4b2c      	ldr	r3, [pc, #176]	; (28dc <eink_ed057tc2_put_display_buffer+0xc8>)
    282a:	681b      	ldr	r3, [r3, #0]
    282c:	6919      	ldr	r1, [r3, #16]
    282e:	4a2c      	ldr	r2, [pc, #176]	; (28e0 <eink_ed057tc2_put_display_buffer+0xcc>)
    2830:	2010      	movs	r0, #16
    2832:	47a0      	blx	r4
    eink_write_data(UC8159_DSP, 0, 0);
    2834:	2200      	movs	r2, #0
    2836:	2100      	movs	r1, #0
    2838:	2011      	movs	r0, #17
    283a:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    283c:	4f29      	ldr	r7, [pc, #164]	; (28e4 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    283e:	4e2a      	ldr	r6, [pc, #168]	; (28e8 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2840:	a801      	add	r0, sp, #4
    2842:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2844:	23c0      	movs	r3, #192	; 0xc0
    2846:	05db      	lsls	r3, r3, #23
    2848:	2580      	movs	r5, #128	; 0x80
    284a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    284c:	22a0      	movs	r2, #160	; 0xa0
    284e:	4927      	ldr	r1, [pc, #156]	; (28ec <eink_ed057tc2_put_display_buffer+0xd8>)
    2850:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2852:	2190      	movs	r1, #144	; 0x90
    2854:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2856:	4053      	eors	r3, r2
    2858:	401c      	ands	r4, r3
    285a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    285c:	a801      	add	r0, sp, #4
    285e:	47b0      	blx	r6
    2860:	4225      	tst	r5, r4
    2862:	d0ed      	beq.n	2840 <eink_ed057tc2_put_display_buffer+0x2c>
    if(refresh_display) {
    2864:	4643      	mov	r3, r8
    2866:	2b00      	cmp	r3, #0
    2868:	d11c      	bne.n	28a4 <eink_ed057tc2_put_display_buffer+0x90>
    eink_write_data(UC8159_POF, 0, 0);
    286a:	2200      	movs	r2, #0
    286c:	2100      	movs	r1, #0
    286e:	2002      	movs	r0, #2
    2870:	4b19      	ldr	r3, [pc, #100]	; (28d8 <eink_ed057tc2_put_display_buffer+0xc4>)
    2872:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2874:	4f1b      	ldr	r7, [pc, #108]	; (28e4 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    2876:	4e1c      	ldr	r6, [pc, #112]	; (28e8 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2878:	a803      	add	r0, sp, #12
    287a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    287c:	23c0      	movs	r3, #192	; 0xc0
    287e:	05db      	lsls	r3, r3, #23
    2880:	2580      	movs	r5, #128	; 0x80
    2882:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2884:	22a0      	movs	r2, #160	; 0xa0
    2886:	4919      	ldr	r1, [pc, #100]	; (28ec <eink_ed057tc2_put_display_buffer+0xd8>)
    2888:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    288a:	2190      	movs	r1, #144	; 0x90
    288c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    288e:	4053      	eors	r3, r2
    2890:	401c      	ands	r4, r3
    2892:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2894:	a803      	add	r0, sp, #12
    2896:	47b0      	blx	r6
    2898:	4225      	tst	r5, r4
    289a:	d0ed      	beq.n	2878 <eink_ed057tc2_put_display_buffer+0x64>
}
    289c:	b004      	add	sp, #16
    289e:	bc04      	pop	{r2}
    28a0:	4690      	mov	r8, r2
    28a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_DRF, 0, 0);
    28a4:	2200      	movs	r2, #0
    28a6:	2100      	movs	r1, #0
    28a8:	2012      	movs	r0, #18
    28aa:	4b0b      	ldr	r3, [pc, #44]	; (28d8 <eink_ed057tc2_put_display_buffer+0xc4>)
    28ac:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    28ae:	4f0d      	ldr	r7, [pc, #52]	; (28e4 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    28b0:	4e0d      	ldr	r6, [pc, #52]	; (28e8 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    28b2:	a802      	add	r0, sp, #8
    28b4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    28b6:	23c0      	movs	r3, #192	; 0xc0
    28b8:	05db      	lsls	r3, r3, #23
    28ba:	2580      	movs	r5, #128	; 0x80
    28bc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    28be:	22a0      	movs	r2, #160	; 0xa0
    28c0:	490a      	ldr	r1, [pc, #40]	; (28ec <eink_ed057tc2_put_display_buffer+0xd8>)
    28c2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    28c4:	2190      	movs	r1, #144	; 0x90
    28c6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    28c8:	4053      	eors	r3, r2
    28ca:	401c      	ands	r4, r3
    28cc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    28ce:	a802      	add	r0, sp, #8
    28d0:	47b0      	blx	r6
    28d2:	4225      	tst	r5, r4
    28d4:	d0ed      	beq.n	28b2 <eink_ed057tc2_put_display_buffer+0x9e>
    28d6:	e7c8      	b.n	286a <eink_ed057tc2_put_display_buffer+0x56>
    28d8:	00001e29 	.word	0x00001e29
    28dc:	20000434 	.word	0x20000434
    28e0:	00020d00 	.word	0x00020d00
    28e4:	0000034d 	.word	0x0000034d
    28e8:	0000035b 	.word	0x0000035b
    28ec:	41004400 	.word	0x41004400

000028f0 <eink_ed028tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed028tc1_refresh_display_buffer(void)
{
    28f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f2:	b087      	sub	sp, #28
    uint8_t eink_data[9];
    
    /* Enable power to the display */
    eink_write_data(UC8177_PON, 0, 0);
    28f4:	2200      	movs	r2, #0
    28f6:	2100      	movs	r1, #0
    28f8:	2004      	movs	r0, #4
    28fa:	4b22      	ldr	r3, [pc, #136]	; (2984 <eink_ed028tc1_refresh_display_buffer+0x94>)
    28fc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    28fe:	4f22      	ldr	r7, [pc, #136]	; (2988 <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    2900:	4e22      	ldr	r6, [pc, #136]	; (298c <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    2902:	a801      	add	r0, sp, #4
    2904:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2906:	23c0      	movs	r3, #192	; 0xc0
    2908:	05db      	lsls	r3, r3, #23
    290a:	2580      	movs	r5, #128	; 0x80
    290c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    290e:	22a0      	movs	r2, #160	; 0xa0
    2910:	491f      	ldr	r1, [pc, #124]	; (2990 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    2912:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2914:	2190      	movs	r1, #144	; 0x90
    2916:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2918:	4053      	eors	r3, r2
    291a:	401c      	ands	r4, r3
    291c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    291e:	a801      	add	r0, sp, #4
    2920:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8177_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    2922:	4225      	tst	r5, r4
    2924:	d0ed      	beq.n	2902 <eink_ed028tc1_refresh_display_buffer+0x12>
    
    uc8177_wait_for_busy_low();
    
    /* Display Refresh */
    eink_data[0] = 0x18; /* Update Mode 1 */
    2926:	a903      	add	r1, sp, #12
    2928:	2318      	movs	r3, #24
    292a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    292c:	2300      	movs	r3, #0
    292e:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2930:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2932:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    2934:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    2936:	3302      	adds	r3, #2
    2938:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    293a:	3356      	adds	r3, #86	; 0x56
    293c:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    293e:	3b57      	subs	r3, #87	; 0x57
    2940:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    2942:	33df      	adds	r3, #223	; 0xdf
    2944:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    2946:	2209      	movs	r2, #9
    2948:	2012      	movs	r0, #18
    294a:	4c0e      	ldr	r4, [pc, #56]	; (2984 <eink_ed028tc1_refresh_display_buffer+0x94>)
    294c:	47a0      	blx	r4
    
    /* Disable power to the display */
    eink_write_data(UC8177_POF, 0, 0);
    294e:	2200      	movs	r2, #0
    2950:	2100      	movs	r1, #0
    2952:	2002      	movs	r0, #2
    2954:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2956:	4f0c      	ldr	r7, [pc, #48]	; (2988 <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    2958:	4e0c      	ldr	r6, [pc, #48]	; (298c <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    295a:	a802      	add	r0, sp, #8
    295c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    295e:	23c0      	movs	r3, #192	; 0xc0
    2960:	05db      	lsls	r3, r3, #23
    2962:	2580      	movs	r5, #128	; 0x80
    2964:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2966:	22a0      	movs	r2, #160	; 0xa0
    2968:	4909      	ldr	r1, [pc, #36]	; (2990 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    296a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    296c:	2190      	movs	r1, #144	; 0x90
    296e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2970:	4053      	eors	r3, r2
    2972:	401c      	ands	r4, r3
    2974:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2976:	a802      	add	r0, sp, #8
    2978:	47b0      	blx	r6
    297a:	4225      	tst	r5, r4
    297c:	d0ed      	beq.n	295a <eink_ed028tc1_refresh_display_buffer+0x6a>
    uc8177_wait_for_busy_low();
}
    297e:	b007      	add	sp, #28
    2980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	00001e29 	.word	0x00001e29
    2988:	0000034d 	.word	0x0000034d
    298c:	0000035b 	.word	0x0000035b
    2990:	41004400 	.word	0x41004400

00002994 <eink_ed037tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed037tc1_refresh_display_buffer(void)
{
    2994:	b5f0      	push	{r4, r5, r6, r7, lr}
    2996:	b083      	sub	sp, #12
	uint8_t eink_data[1];
	
    /* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
    if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    2998:	4b18      	ldr	r3, [pc, #96]	; (29fc <eink_ed037tc1_refresh_display_buffer+0x68>)
    299a:	78db      	ldrb	r3, [r3, #3]
    299c:	2b00      	cmp	r3, #0
    299e:	d126      	bne.n	29ee <eink_ed037tc1_refresh_display_buffer+0x5a>
    {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    29a0:	2269      	movs	r2, #105	; 0x69
    29a2:	4917      	ldr	r1, [pc, #92]	; (2a00 <eink_ed037tc1_refresh_display_buffer+0x6c>)
    29a4:	3140      	adds	r1, #64	; 0x40
    29a6:	2032      	movs	r0, #50	; 0x32
    29a8:	4b16      	ldr	r3, [pc, #88]	; (2a04 <eink_ed037tc1_refresh_display_buffer+0x70>)
    29aa:	4798      	blx	r3
    } else {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    }
    
    eink_data[0] = 0xCF;
    29ac:	a901      	add	r1, sp, #4
    29ae:	23cf      	movs	r3, #207	; 0xcf
    29b0:	700b      	strb	r3, [r1, #0]
    eink_write_data(SSD1677_DSP_SEQ, eink_data, 1);
    29b2:	2201      	movs	r2, #1
    29b4:	2022      	movs	r0, #34	; 0x22
    29b6:	4c13      	ldr	r4, [pc, #76]	; (2a04 <eink_ed037tc1_refresh_display_buffer+0x70>)
    29b8:	47a0      	blx	r4
	
    /* Display Update */
    eink_write_data(SSD1677_DSP_ACT, 0, 0);
    29ba:	2200      	movs	r2, #0
    29bc:	2100      	movs	r1, #0
    29be:	2020      	movs	r0, #32
    29c0:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    29c2:	4f11      	ldr	r7, [pc, #68]	; (2a08 <eink_ed037tc1_refresh_display_buffer+0x74>)
	CRITICAL_SECTION_LEAVE();
    29c4:	4e11      	ldr	r6, [pc, #68]	; (2a0c <eink_ed037tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_ENTER();
    29c6:	4668      	mov	r0, sp
    29c8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    29ca:	23c0      	movs	r3, #192	; 0xc0
    29cc:	05db      	lsls	r3, r3, #23
    29ce:	2580      	movs	r5, #128	; 0x80
    29d0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    29d2:	22a0      	movs	r2, #160	; 0xa0
    29d4:	490e      	ldr	r1, [pc, #56]	; (2a10 <eink_ed037tc1_refresh_display_buffer+0x7c>)
    29d6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    29d8:	2190      	movs	r1, #144	; 0x90
    29da:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    29dc:	4053      	eors	r3, r2
    29de:	401c      	ands	r4, r3
    29e0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    29e2:	4668      	mov	r0, sp
    29e4:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void ssd1677_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(gpio_get_pin_level(EINK_BUSY));
    29e6:	4225      	tst	r5, r4
    29e8:	d1ed      	bne.n	29c6 <eink_ed037tc1_refresh_display_buffer+0x32>
	ssd1677_wait_for_busy();
}
    29ea:	b003      	add	sp, #12
    29ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    29ee:	2269      	movs	r2, #105	; 0x69
    29f0:	4908      	ldr	r1, [pc, #32]	; (2a14 <eink_ed037tc1_refresh_display_buffer+0x80>)
    29f2:	312c      	adds	r1, #44	; 0x2c
    29f4:	2032      	movs	r0, #50	; 0x32
    29f6:	4b03      	ldr	r3, [pc, #12]	; (2a04 <eink_ed037tc1_refresh_display_buffer+0x70>)
    29f8:	4798      	blx	r3
    29fa:	e7d7      	b.n	29ac <eink_ed037tc1_refresh_display_buffer+0x18>
    29fc:	20000414 	.word	0x20000414
    2a00:	00005a44 	.word	0x00005a44
    2a04:	00001e29 	.word	0x00001e29
    2a08:	0000034d 	.word	0x0000034d
    2a0c:	0000035b 	.word	0x0000035b
    2a10:	41004400 	.word	0x41004400
    2a14:	00005ac4 	.word	0x00005ac4

00002a18 <eink_ed037tc1_put_display_buffer>:
{
    2a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a1a:	46c6      	mov	lr, r8
    2a1c:	b500      	push	{lr}
    2a1e:	b082      	sub	sp, #8
    2a20:	4680      	mov	r8, r0
    eink_data[0] = 0x00;
    2a22:	ac01      	add	r4, sp, #4
    2a24:	2500      	movs	r5, #0
    2a26:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    2a28:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    2a2a:	2202      	movs	r2, #2
    2a2c:	0021      	movs	r1, r4
    2a2e:	204e      	movs	r0, #78	; 0x4e
    2a30:	4e2a      	ldr	r6, [pc, #168]	; (2adc <eink_ed037tc1_put_display_buffer+0xc4>)
    2a32:	47b0      	blx	r6
    eink_data[0] = 0x00;
    2a34:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    2a36:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    2a38:	2202      	movs	r2, #2
    2a3a:	0021      	movs	r1, r4
    2a3c:	204f      	movs	r0, #79	; 0x4f
    2a3e:	47b0      	blx	r6
    eink_write_data(SSD1677_RAM_BW, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED037TC1_DISPLAY_BUFFER_SIZE);
    2a40:	4f27      	ldr	r7, [pc, #156]	; (2ae0 <eink_ed037tc1_put_display_buffer+0xc8>)
    2a42:	683b      	ldr	r3, [r7, #0]
    2a44:	6919      	ldr	r1, [r3, #16]
    2a46:	4a27      	ldr	r2, [pc, #156]	; (2ae4 <eink_ed037tc1_put_display_buffer+0xcc>)
    2a48:	2024      	movs	r0, #36	; 0x24
    2a4a:	47b0      	blx	r6
    eink_data[0] = 0x00;
    2a4c:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    2a4e:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    2a50:	2202      	movs	r2, #2
    2a52:	0021      	movs	r1, r4
    2a54:	204e      	movs	r0, #78	; 0x4e
    2a56:	47b0      	blx	r6
    eink_data[0] = 0x00;
    2a58:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    2a5a:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    2a5c:	2202      	movs	r2, #2
    2a5e:	0021      	movs	r1, r4
    2a60:	204f      	movs	r0, #79	; 0x4f
    2a62:	47b0      	blx	r6
    eink_write_data(SSD1677_RAM_RED, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED037TC1_DISPLAY_BUFFER_SIZE);
    2a64:	683b      	ldr	r3, [r7, #0]
    2a66:	6959      	ldr	r1, [r3, #20]
    2a68:	4a1e      	ldr	r2, [pc, #120]	; (2ae4 <eink_ed037tc1_put_display_buffer+0xcc>)
    2a6a:	2026      	movs	r0, #38	; 0x26
    2a6c:	47b0      	blx	r6
    if(refresh_display) {
    2a6e:	4643      	mov	r3, r8
    2a70:	2b00      	cmp	r3, #0
    2a72:	d028      	beq.n	2ac6 <eink_ed037tc1_put_display_buffer+0xae>
        if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    2a74:	4b1c      	ldr	r3, [pc, #112]	; (2ae8 <eink_ed037tc1_put_display_buffer+0xd0>)
    2a76:	78db      	ldrb	r3, [r3, #3]
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d128      	bne.n	2ace <eink_ed037tc1_put_display_buffer+0xb6>
            eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    2a7c:	2269      	movs	r2, #105	; 0x69
    2a7e:	491b      	ldr	r1, [pc, #108]	; (2aec <eink_ed037tc1_put_display_buffer+0xd4>)
    2a80:	3140      	adds	r1, #64	; 0x40
    2a82:	2032      	movs	r0, #50	; 0x32
    2a84:	4b15      	ldr	r3, [pc, #84]	; (2adc <eink_ed037tc1_put_display_buffer+0xc4>)
    2a86:	4798      	blx	r3
        eink_data[0] = 0xCF;
    2a88:	a901      	add	r1, sp, #4
    2a8a:	23cf      	movs	r3, #207	; 0xcf
    2a8c:	700b      	strb	r3, [r1, #0]
        eink_write_data(SSD1677_DSP_SEQ, eink_data, 1);
    2a8e:	2201      	movs	r2, #1
    2a90:	2022      	movs	r0, #34	; 0x22
    2a92:	4c12      	ldr	r4, [pc, #72]	; (2adc <eink_ed037tc1_put_display_buffer+0xc4>)
    2a94:	47a0      	blx	r4
        eink_write_data(SSD1677_DSP_ACT, 0, 0);
    2a96:	2200      	movs	r2, #0
    2a98:	2100      	movs	r1, #0
    2a9a:	2020      	movs	r0, #32
    2a9c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2a9e:	4f14      	ldr	r7, [pc, #80]	; (2af0 <eink_ed037tc1_put_display_buffer+0xd8>)
	CRITICAL_SECTION_LEAVE();
    2aa0:	4e14      	ldr	r6, [pc, #80]	; (2af4 <eink_ed037tc1_put_display_buffer+0xdc>)
	CRITICAL_SECTION_ENTER();
    2aa2:	4668      	mov	r0, sp
    2aa4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2aa6:	23c0      	movs	r3, #192	; 0xc0
    2aa8:	05db      	lsls	r3, r3, #23
    2aaa:	2580      	movs	r5, #128	; 0x80
    2aac:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2aae:	22a0      	movs	r2, #160	; 0xa0
    2ab0:	4911      	ldr	r1, [pc, #68]	; (2af8 <eink_ed037tc1_put_display_buffer+0xe0>)
    2ab2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2ab4:	2190      	movs	r1, #144	; 0x90
    2ab6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2ab8:	4053      	eors	r3, r2
    2aba:	401c      	ands	r4, r3
    2abc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2abe:	4668      	mov	r0, sp
    2ac0:	47b0      	blx	r6
    2ac2:	4225      	tst	r5, r4
    2ac4:	d1ed      	bne.n	2aa2 <eink_ed037tc1_put_display_buffer+0x8a>
}
    2ac6:	b002      	add	sp, #8
    2ac8:	bc04      	pop	{r2}
    2aca:	4690      	mov	r8, r2
    2acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    2ace:	2269      	movs	r2, #105	; 0x69
    2ad0:	490a      	ldr	r1, [pc, #40]	; (2afc <eink_ed037tc1_put_display_buffer+0xe4>)
    2ad2:	312c      	adds	r1, #44	; 0x2c
    2ad4:	2032      	movs	r0, #50	; 0x32
    2ad6:	4b01      	ldr	r3, [pc, #4]	; (2adc <eink_ed037tc1_put_display_buffer+0xc4>)
    2ad8:	4798      	blx	r3
    2ada:	e7d5      	b.n	2a88 <eink_ed037tc1_put_display_buffer+0x70>
    2adc:	00001e29 	.word	0x00001e29
    2ae0:	20000434 	.word	0x20000434
    2ae4:	000041a0 	.word	0x000041a0
    2ae8:	20000414 	.word	0x20000414
    2aec:	00005a44 	.word	0x00005a44
    2af0:	0000034d 	.word	0x0000034d
    2af4:	0000035b 	.word	0x0000035b
    2af8:	41004400 	.word	0x41004400
    2afc:	00005ac4 	.word	0x00005ac4

00002b00 <eink_ed037tc1_put_partial_display_buffer>:
{
    2b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b02:	46de      	mov	lr, fp
    2b04:	4657      	mov	r7, sl
    2b06:	464e      	mov	r6, r9
    2b08:	4645      	mov	r5, r8
    2b0a:	b5e0      	push	{r5, r6, r7, lr}
    2b0c:	b085      	sub	sp, #20
    2b0e:	4681      	mov	r9, r0
    2b10:	000c      	movs	r4, r1
	if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
    2b12:	4940      	ldr	r1, [pc, #256]	; (2c14 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2b14:	7809      	ldrb	r1, [r1, #0]
    2b16:	2901      	cmp	r1, #1
    2b18:	d050      	beq.n	2bbc <eink_ed037tc1_put_partial_display_buffer+0xbc>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
    2b1a:	493e      	ldr	r1, [pc, #248]	; (2c14 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2b1c:	7809      	ldrb	r1, [r1, #0]
    2b1e:	2902      	cmp	r1, #2
    2b20:	d068      	beq.n	2bf4 <eink_ed037tc1_put_partial_display_buffer+0xf4>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
    2b22:	493c      	ldr	r1, [pc, #240]	; (2c14 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2b24:	7809      	ldrb	r1, [r1, #0]
    2b26:	2903      	cmp	r1, #3
    2b28:	d06c      	beq.n	2c04 <eink_ed037tc1_put_partial_display_buffer+0x104>
        x1_set = (start_x - (start_x % 8)) / 8;
    2b2a:	10c6      	asrs	r6, r0, #3
        byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * start_y);
    2b2c:	00a1      	lsls	r1, r4, #2
    2b2e:	1909      	adds	r1, r1, r4
    2b30:	00c8      	lsls	r0, r1, #3
    2b32:	1a41      	subs	r1, r0, r1
    2b34:	1876      	adds	r6, r6, r1
        mod_calc_x = (start_x - (start_x % 8));
    2b36:	2107      	movs	r1, #7
    2b38:	4648      	mov	r0, r9
    2b3a:	4388      	bics	r0, r1
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    2b3c:	b2c0      	uxtb	r0, r0
    2b3e:	1880      	adds	r0, r0, r2
        mod_calc_w = 8 - (window_w % 8);
    2b40:	2507      	movs	r5, #7
    2b42:	402a      	ands	r2, r5
    2b44:	2508      	movs	r5, #8
    2b46:	1aaa      	subs	r2, r5, r2
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    2b48:	b2d2      	uxtb	r2, r2
    2b4a:	1882      	adds	r2, r0, r2
    2b4c:	17d0      	asrs	r0, r2, #31
    2b4e:	4001      	ands	r1, r0
    2b50:	1889      	adds	r1, r1, r2
    2b52:	10c9      	asrs	r1, r1, #3
    2b54:	b28a      	uxth	r2, r1
    2b56:	9201      	str	r2, [sp, #4]
    display_buffer = (uint8_t*) ptr_eink_gfx_config->display_buffer_1_ptr;
    2b58:	4a2f      	ldr	r2, [pc, #188]	; (2c18 <eink_ed037tc1_put_partial_display_buffer+0x118>)
    2b5a:	6812      	ldr	r2, [r2, #0]
    2b5c:	6912      	ldr	r2, [r2, #16]
    display_buffer += byte_set;
    2b5e:	1996      	adds	r6, r2, r6
    for(i=0; i<window_set_h; i++)
    2b60:	2b00      	cmp	r3, #0
    2b62:	d024      	beq.n	2bae <eink_ed037tc1_put_partial_display_buffer+0xae>
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    2b64:	464a      	mov	r2, r9
    2b66:	0592      	lsls	r2, r2, #22
    2b68:	0f92      	lsrs	r2, r2, #30
    2b6a:	4692      	mov	sl, r2
    2b6c:	18e3      	adds	r3, r4, r3
    2b6e:	b29b      	uxth	r3, r3
    2b70:	4698      	mov	r8, r3
	    eink_data[0] = (window_set_x & 0xFF);
    2b72:	ad03      	add	r5, sp, #12
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    2b74:	4f29      	ldr	r7, [pc, #164]	; (2c1c <eink_ed037tc1_put_partial_display_buffer+0x11c>)
	    eink_data[1] = (temp_y >> 8) & 0x3;
    2b76:	2303      	movs	r3, #3
    2b78:	469b      	mov	fp, r3
	    eink_data[0] = (window_set_x & 0xFF);
    2b7a:	464b      	mov	r3, r9
    2b7c:	702b      	strb	r3, [r5, #0]
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    2b7e:	4653      	mov	r3, sl
    2b80:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    2b82:	2202      	movs	r2, #2
    2b84:	0029      	movs	r1, r5
    2b86:	204e      	movs	r0, #78	; 0x4e
    2b88:	47b8      	blx	r7
	    eink_data[0] = (temp_y & 0xFF);
    2b8a:	702c      	strb	r4, [r5, #0]
	    eink_data[1] = (temp_y >> 8) & 0x3;
    2b8c:	0a23      	lsrs	r3, r4, #8
    2b8e:	465a      	mov	r2, fp
    2b90:	4013      	ands	r3, r2
    2b92:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    2b94:	2202      	movs	r2, #2
    2b96:	0029      	movs	r1, r5
    2b98:	204f      	movs	r0, #79	; 0x4f
    2b9a:	47b8      	blx	r7
	    display_buffer += (GFX_ED037TC1_MAX_WIDTH / 8);
    2b9c:	3623      	adds	r6, #35	; 0x23
	    eink_write_data(SSD1677_RAM_BW, display_buffer, window_set_w);
    2b9e:	9a01      	ldr	r2, [sp, #4]
    2ba0:	0031      	movs	r1, r6
    2ba2:	2024      	movs	r0, #36	; 0x24
    2ba4:	47b8      	blx	r7
    2ba6:	3401      	adds	r4, #1
    2ba8:	b2a4      	uxth	r4, r4
    for(i=0; i<window_set_h; i++)
    2baa:	4544      	cmp	r4, r8
    2bac:	d1e5      	bne.n	2b7a <eink_ed037tc1_put_partial_display_buffer+0x7a>
}
    2bae:	b005      	add	sp, #20
    2bb0:	bc3c      	pop	{r2, r3, r4, r5}
    2bb2:	4690      	mov	r8, r2
    2bb4:	4699      	mov	r9, r3
    2bb6:	46a2      	mov	sl, r4
    2bb8:	46ab      	mov	fp, r5
    2bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - (((start_y + window_h) - ((start_y + window_h) % 8)) / 8);
    2bbc:	18e6      	adds	r6, r4, r3
    2bbe:	3106      	adds	r1, #6
    2bc0:	438e      	bics	r6, r1
    2bc2:	0031      	movs	r1, r6
    2bc4:	17f0      	asrs	r0, r6, #31
    2bc6:	2607      	movs	r6, #7
    2bc8:	4006      	ands	r6, r0
    2bca:	1876      	adds	r6, r6, r1
    2bcc:	10f6      	asrs	r6, r6, #3
    2bce:	4276      	negs	r6, r6
    2bd0:	3622      	adds	r6, #34	; 0x22
		byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (start_x));
    2bd2:	4649      	mov	r1, r9
    2bd4:	0089      	lsls	r1, r1, #2
    2bd6:	4449      	add	r1, r9
    2bd8:	00c8      	lsls	r0, r1, #3
    2bda:	1a41      	subs	r1, r0, r1
    2bdc:	1876      	adds	r6, r6, r1
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    2bde:	218c      	movs	r1, #140	; 0x8c
    2be0:	0049      	lsls	r1, r1, #1
    2be2:	1ac9      	subs	r1, r1, r3
    2be4:	1b09      	subs	r1, r1, r4
		window_set_w = window_h / 8;
    2be6:	08db      	lsrs	r3, r3, #3
    2be8:	9301      	str	r3, [sp, #4]
		window_set_h = window_w;
    2bea:	0013      	movs	r3, r2
		window_set_y = start_x;
    2bec:	464c      	mov	r4, r9
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    2bee:	b28a      	uxth	r2, r1
    2bf0:	4691      	mov	r9, r2
    2bf2:	e7b1      	b.n	2b58 <eink_ed037tc1_put_partial_display_buffer+0x58>
        x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((start_x - (start_x % 8)) / 8);
    2bf4:	10c6      	asrs	r6, r0, #3
    2bf6:	490a      	ldr	r1, [pc, #40]	; (2c20 <eink_ed037tc1_put_partial_display_buffer+0x120>)
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
    2bf8:	1b89      	subs	r1, r1, r6
    2bfa:	2623      	movs	r6, #35	; 0x23
    2bfc:	4276      	negs	r6, r6
    2bfe:	4366      	muls	r6, r4
    2c00:	198e      	adds	r6, r1, r6
    2c02:	e7a9      	b.n	2b58 <eink_ed037tc1_put_partial_display_buffer+0x58>
        y1_set = (start_y - (start_y % 8)) / 8;
    2c04:	10e2      	asrs	r2, r4, #3
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
    2c06:	3926      	subs	r1, #38	; 0x26
    2c08:	4361      	muls	r1, r4
    2c0a:	1856      	adds	r6, r2, r1
    2c0c:	4a05      	ldr	r2, [pc, #20]	; (2c24 <eink_ed037tc1_put_partial_display_buffer+0x124>)
    2c0e:	4694      	mov	ip, r2
    2c10:	4466      	add	r6, ip
    2c12:	e7a1      	b.n	2b58 <eink_ed037tc1_put_partial_display_buffer+0x58>
    2c14:	20000414 	.word	0x20000414
    2c18:	20000434 	.word	0x20000434
    2c1c:	00001e29 	.word	0x00001e29
    2c20:	00004294 	.word	0x00004294
    2c24:	0000417d 	.word	0x0000417d

00002c28 <eink_et011tt2_put_display_buffer>:
{
    2c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2a:	b087      	sub	sp, #28
    2c2c:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2c2e:	a904      	add	r1, sp, #16
    2c30:	2300      	movs	r3, #0
    2c32:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2c34:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2c36:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0xEF; /* W = 239 */
    2c38:	22ef      	movs	r2, #239	; 0xef
    2c3a:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2c3c:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xEF; /* H = 239 */
    2c3e:	714a      	strb	r2, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2c40:	3ae9      	subs	r2, #233	; 0xe9
    2c42:	2014      	movs	r0, #20
    2c44:	4c32      	ldr	r4, [pc, #200]	; (2d10 <eink_et011tt2_put_display_buffer+0xe8>)
    2c46:	47a0      	blx	r4
    eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    2c48:	4b32      	ldr	r3, [pc, #200]	; (2d14 <eink_et011tt2_put_display_buffer+0xec>)
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	6919      	ldr	r1, [r3, #16]
    2c4e:	22e1      	movs	r2, #225	; 0xe1
    2c50:	0192      	lsls	r2, r2, #6
    2c52:	2013      	movs	r0, #19
    2c54:	47a0      	blx	r4
    if(refresh_display) {
    2c56:	2d00      	cmp	r5, #0
    2c58:	d101      	bne.n	2c5e <eink_et011tt2_put_display_buffer+0x36>
}
    2c5a:	b007      	add	sp, #28
    2c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(uc8173_global_instance.display_config.update_mode == UPDATE_FAST)
    2c5e:	4b2e      	ldr	r3, [pc, #184]	; (2d18 <eink_et011tt2_put_display_buffer+0xf0>)
    2c60:	785b      	ldrb	r3, [r3, #1]
    2c62:	2b01      	cmp	r3, #1
    2c64:	d03b      	beq.n	2cde <eink_et011tt2_put_display_buffer+0xb6>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_A2)
    2c66:	4b2c      	ldr	r3, [pc, #176]	; (2d18 <eink_et011tt2_put_display_buffer+0xf0>)
    2c68:	78db      	ldrb	r3, [r3, #3]
    2c6a:	2b02      	cmp	r3, #2
    2c6c:	d014      	beq.n	2c98 <eink_et011tt2_put_display_buffer+0x70>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_A2;
    2c6e:	2202      	movs	r2, #2
    2c70:	4b29      	ldr	r3, [pc, #164]	; (2d18 <eink_et011tt2_put_display_buffer+0xf0>)
    2c72:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_A2_LUT, 32);
    2c74:	4c29      	ldr	r4, [pc, #164]	; (2d1c <eink_et011tt2_put_display_buffer+0xf4>)
    2c76:	0021      	movs	r1, r4
    2c78:	3120      	adds	r1, #32
    2c7a:	321e      	adds	r2, #30
    2c7c:	2020      	movs	r0, #32
    2c7e:	4d24      	ldr	r5, [pc, #144]	; (2d10 <eink_et011tt2_put_display_buffer+0xe8>)
    2c80:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_A2_LUT, 512);
    2c82:	0021      	movs	r1, r4
    2c84:	3140      	adds	r1, #64	; 0x40
    2c86:	2280      	movs	r2, #128	; 0x80
    2c88:	0092      	lsls	r2, r2, #2
    2c8a:	2022      	movs	r0, #34	; 0x22
    2c8c:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    2c8e:	2280      	movs	r2, #128	; 0x80
    2c90:	4923      	ldr	r1, [pc, #140]	; (2d20 <eink_et011tt2_put_display_buffer+0xf8>)
    2c92:	3120      	adds	r1, #32
    2c94:	2026      	movs	r0, #38	; 0x26
    2c96:	47a8      	blx	r5
    eink_data[0] = 0x00; /* GU2 Update Mode */
    2c98:	a902      	add	r1, sp, #8
    2c9a:	2300      	movs	r3, #0
    2c9c:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2c9e:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2ca0:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2ca2:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0xEF; /* W = 249 */
    2ca4:	22ef      	movs	r2, #239	; 0xef
    2ca6:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2ca8:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xEF; /* H = 249 */
    2caa:	718a      	strb	r2, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2cac:	3ae8      	subs	r2, #232	; 0xe8
    2cae:	2012      	movs	r0, #18
    2cb0:	4b17      	ldr	r3, [pc, #92]	; (2d10 <eink_et011tt2_put_display_buffer+0xe8>)
    2cb2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2cb4:	4f1b      	ldr	r7, [pc, #108]	; (2d24 <eink_et011tt2_put_display_buffer+0xfc>)
	CRITICAL_SECTION_LEAVE();
    2cb6:	4e1c      	ldr	r6, [pc, #112]	; (2d28 <eink_et011tt2_put_display_buffer+0x100>)
	CRITICAL_SECTION_ENTER();
    2cb8:	a801      	add	r0, sp, #4
    2cba:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2cbc:	23c0      	movs	r3, #192	; 0xc0
    2cbe:	05db      	lsls	r3, r3, #23
    2cc0:	2580      	movs	r5, #128	; 0x80
    2cc2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2cc4:	22a0      	movs	r2, #160	; 0xa0
    2cc6:	4919      	ldr	r1, [pc, #100]	; (2d2c <eink_et011tt2_put_display_buffer+0x104>)
    2cc8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2cca:	2190      	movs	r1, #144	; 0x90
    2ccc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2cce:	4053      	eors	r3, r2
    2cd0:	401c      	ands	r4, r3
    2cd2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2cd4:	a801      	add	r0, sp, #4
    2cd6:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2cd8:	4225      	tst	r5, r4
    2cda:	d0ed      	beq.n	2cb8 <eink_et011tt2_put_display_buffer+0x90>
    2cdc:	e7bd      	b.n	2c5a <eink_et011tt2_put_display_buffer+0x32>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_GU)
    2cde:	4b0e      	ldr	r3, [pc, #56]	; (2d18 <eink_et011tt2_put_display_buffer+0xf0>)
    2ce0:	78db      	ldrb	r3, [r3, #3]
    2ce2:	2b01      	cmp	r3, #1
    2ce4:	d0d8      	beq.n	2c98 <eink_et011tt2_put_display_buffer+0x70>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_GU;
    2ce6:	2201      	movs	r2, #1
    2ce8:	4b0b      	ldr	r3, [pc, #44]	; (2d18 <eink_et011tt2_put_display_buffer+0xf0>)
    2cea:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_GU_LUT, 32);
    2cec:	4c10      	ldr	r4, [pc, #64]	; (2d30 <eink_et011tt2_put_display_buffer+0x108>)
    2cee:	321f      	adds	r2, #31
    2cf0:	0021      	movs	r1, r4
    2cf2:	2020      	movs	r0, #32
    2cf4:	4d06      	ldr	r5, [pc, #24]	; (2d10 <eink_et011tt2_put_display_buffer+0xe8>)
    2cf6:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_GU_LUT, 512);
    2cf8:	0021      	movs	r1, r4
    2cfa:	3120      	adds	r1, #32
    2cfc:	2280      	movs	r2, #128	; 0x80
    2cfe:	0092      	lsls	r2, r2, #2
    2d00:	2022      	movs	r0, #34	; 0x22
    2d02:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    2d04:	2280      	movs	r2, #128	; 0x80
    2d06:	4906      	ldr	r1, [pc, #24]	; (2d20 <eink_et011tt2_put_display_buffer+0xf8>)
    2d08:	3120      	adds	r1, #32
    2d0a:	2026      	movs	r0, #38	; 0x26
    2d0c:	47a8      	blx	r5
    2d0e:	e7c3      	b.n	2c98 <eink_et011tt2_put_display_buffer+0x70>
    2d10:	00001e29 	.word	0x00001e29
    2d14:	20000434 	.word	0x20000434
    2d18:	20000390 	.word	0x20000390
    2d1c:	00005844 	.word	0x00005844
    2d20:	000057c4 	.word	0x000057c4
    2d24:	0000034d 	.word	0x0000034d
    2d28:	0000035b 	.word	0x0000035b
    2d2c:	41004400 	.word	0x41004400
    2d30:	000055c4 	.word	0x000055c4

00002d34 <eink_hink_e0154a05_put_display_buffer>:
{
    2d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d36:	46c6      	mov	lr, r8
    2d38:	b500      	push	{lr}
    2d3a:	b086      	sub	sp, #24
    2d3c:	4680      	mov	r8, r0
    eink_data[0] = 0x7D;
    2d3e:	ac05      	add	r4, sp, #20
    2d40:	237d      	movs	r3, #125	; 0x7d
    2d42:	7023      	strb	r3, [r4, #0]
    eink_write_data(SSD1608_WVCOM, eink_data, 1);
    2d44:	2201      	movs	r2, #1
    2d46:	0021      	movs	r1, r4
    2d48:	202c      	movs	r0, #44	; 0x2c
    2d4a:	4d3e      	ldr	r5, [pc, #248]	; (2e44 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2d4c:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2d4e:	2718      	movs	r7, #24
    2d50:	7027      	strb	r7, [r4, #0]
    eink_data[1] = 0x00;
    2d52:	2600      	movs	r6, #0
    2d54:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RXAS, eink_data, 2);
    2d56:	2202      	movs	r2, #2
    2d58:	0021      	movs	r1, r4
    2d5a:	2044      	movs	r0, #68	; 0x44
    2d5c:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2d5e:	7027      	strb	r7, [r4, #0]
    eink_write_data(SSD1608_RXC, eink_data, 1);
    2d60:	2201      	movs	r2, #1
    2d62:	0021      	movs	r1, r4
    2d64:	204e      	movs	r0, #78	; 0x4e
    2d66:	47a8      	blx	r5
    eink_data[0] = 0xC7;
    2d68:	23c7      	movs	r3, #199	; 0xc7
    2d6a:	7023      	strb	r3, [r4, #0]
    eink_data[1] = 0x00;
    2d6c:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RYC, eink_data, 2);
    2d6e:	2202      	movs	r2, #2
    2d70:	0021      	movs	r1, r4
    2d72:	204f      	movs	r0, #79	; 0x4f
    2d74:	47a8      	blx	r5
    eink_write_data(SSD1608_WR, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_HINK_E0154A05_DISPLAY_BUFFER_SIZE);
    2d76:	4b34      	ldr	r3, [pc, #208]	; (2e48 <eink_hink_e0154a05_put_display_buffer+0x114>)
    2d78:	681b      	ldr	r3, [r3, #0]
    2d7a:	6919      	ldr	r1, [r3, #16]
    2d7c:	4a33      	ldr	r2, [pc, #204]	; (2e4c <eink_hink_e0154a05_put_display_buffer+0x118>)
    2d7e:	2024      	movs	r0, #36	; 0x24
    2d80:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    2d82:	4f33      	ldr	r7, [pc, #204]	; (2e50 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2d84:	4e33      	ldr	r6, [pc, #204]	; (2e54 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2d86:	a802      	add	r0, sp, #8
    2d88:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2d8a:	23c0      	movs	r3, #192	; 0xc0
    2d8c:	05db      	lsls	r3, r3, #23
    2d8e:	2580      	movs	r5, #128	; 0x80
    2d90:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d92:	22a0      	movs	r2, #160	; 0xa0
    2d94:	4930      	ldr	r1, [pc, #192]	; (2e58 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2d96:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d98:	2190      	movs	r1, #144	; 0x90
    2d9a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d9c:	4053      	eors	r3, r2
    2d9e:	401c      	ands	r4, r3
    2da0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2da2:	a802      	add	r0, sp, #8
    2da4:	47b0      	blx	r6
    2da6:	4225      	tst	r5, r4
    2da8:	d1ed      	bne.n	2d86 <eink_hink_e0154a05_put_display_buffer+0x52>
    if(refresh_display) {
    2daa:	4643      	mov	r3, r8
    2dac:	2b00      	cmp	r3, #0
    2dae:	d103      	bne.n	2db8 <eink_hink_e0154a05_put_display_buffer+0x84>
}
    2db0:	b006      	add	sp, #24
    2db2:	bc04      	pop	{r2}
    2db4:	4690      	mov	r8, r2
    2db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    2db8:	4b28      	ldr	r3, [pc, #160]	; (2e5c <eink_hink_e0154a05_put_display_buffer+0x128>)
    2dba:	785b      	ldrb	r3, [r3, #1]
    2dbc:	2b01      	cmp	r3, #1
    2dbe:	d035      	beq.n	2e2c <eink_hink_e0154a05_put_display_buffer+0xf8>
        eink_data[0] = 0xF7; /* Slow Update */
    2dc0:	22f7      	movs	r2, #247	; 0xf7
    2dc2:	ab01      	add	r3, sp, #4
    2dc4:	701a      	strb	r2, [r3, #0]
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    2dc6:	2201      	movs	r2, #1
    2dc8:	a901      	add	r1, sp, #4
    2dca:	2022      	movs	r0, #34	; 0x22
    2dcc:	4b1d      	ldr	r3, [pc, #116]	; (2e44 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2dce:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2dd0:	4f1f      	ldr	r7, [pc, #124]	; (2e50 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2dd2:	4e20      	ldr	r6, [pc, #128]	; (2e54 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2dd4:	a803      	add	r0, sp, #12
    2dd6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2dd8:	23c0      	movs	r3, #192	; 0xc0
    2dda:	05db      	lsls	r3, r3, #23
    2ddc:	2580      	movs	r5, #128	; 0x80
    2dde:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2de0:	22a0      	movs	r2, #160	; 0xa0
    2de2:	491d      	ldr	r1, [pc, #116]	; (2e58 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2de4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2de6:	2190      	movs	r1, #144	; 0x90
    2de8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2dea:	4053      	eors	r3, r2
    2dec:	401c      	ands	r4, r3
    2dee:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2df0:	a803      	add	r0, sp, #12
    2df2:	47b0      	blx	r6
    2df4:	4225      	tst	r5, r4
    2df6:	d1ed      	bne.n	2dd4 <eink_hink_e0154a05_put_display_buffer+0xa0>
    eink_write_data(SSD1608_MA, 0, 0);
    2df8:	2200      	movs	r2, #0
    2dfa:	2100      	movs	r1, #0
    2dfc:	2020      	movs	r0, #32
    2dfe:	4b11      	ldr	r3, [pc, #68]	; (2e44 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2e00:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2e02:	4f13      	ldr	r7, [pc, #76]	; (2e50 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2e04:	4e13      	ldr	r6, [pc, #76]	; (2e54 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2e06:	a804      	add	r0, sp, #16
    2e08:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2e0a:	23c0      	movs	r3, #192	; 0xc0
    2e0c:	05db      	lsls	r3, r3, #23
    2e0e:	2580      	movs	r5, #128	; 0x80
    2e10:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2e12:	22a0      	movs	r2, #160	; 0xa0
    2e14:	4910      	ldr	r1, [pc, #64]	; (2e58 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2e16:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2e18:	2190      	movs	r1, #144	; 0x90
    2e1a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2e1c:	4053      	eors	r3, r2
    2e1e:	401c      	ands	r4, r3
    2e20:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2e22:	a804      	add	r0, sp, #16
    2e24:	47b0      	blx	r6
    2e26:	4225      	tst	r5, r4
    2e28:	d1ed      	bne.n	2e06 <eink_hink_e0154a05_put_display_buffer+0xd2>
    2e2a:	e7c1      	b.n	2db0 <eink_hink_e0154a05_put_display_buffer+0x7c>
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2e2c:	4b0b      	ldr	r3, [pc, #44]	; (2e5c <eink_hink_e0154a05_put_display_buffer+0x128>)
    2e2e:	789b      	ldrb	r3, [r3, #2]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d103      	bne.n	2e3c <eink_hink_e0154a05_put_display_buffer+0x108>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    2e34:	22c7      	movs	r2, #199	; 0xc7
    2e36:	ab01      	add	r3, sp, #4
    2e38:	701a      	strb	r2, [r3, #0]
    2e3a:	e7c4      	b.n	2dc6 <eink_hink_e0154a05_put_display_buffer+0x92>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    2e3c:	22ff      	movs	r2, #255	; 0xff
    2e3e:	ab01      	add	r3, sp, #4
    2e40:	701a      	strb	r2, [r3, #0]
    2e42:	e7c0      	b.n	2dc6 <eink_hink_e0154a05_put_display_buffer+0x92>
    2e44:	00001e29 	.word	0x00001e29
    2e48:	20000434 	.word	0x20000434
    2e4c:	00001388 	.word	0x00001388
    2e50:	0000034d 	.word	0x0000034d
    2e54:	0000035b 	.word	0x0000035b
    2e58:	41004400 	.word	0x41004400
    2e5c:	200003b8 	.word	0x200003b8

00002e60 <eink_ed028tc1_put_display_buffer>:
{
    2e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e62:	b089      	sub	sp, #36	; 0x24
    2e64:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2e66:	a906      	add	r1, sp, #24
    2e68:	2300      	movs	r3, #0
    2e6a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2e6c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2e6e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00;
    2e70:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x02; /* W = 600 */
    2e72:	3302      	adds	r3, #2
    2e74:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x58;
    2e76:	3356      	adds	r3, #86	; 0x56
    2e78:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x01; /* H = 480 */
    2e7a:	3b57      	subs	r3, #87	; 0x57
    2e7c:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0xE0;
    2e7e:	33df      	adds	r3, #223	; 0xdf
    2e80:	71cb      	strb	r3, [r1, #7]
    eink_write_data(UC8177_DTMW, eink_data, 8);
    2e82:	2208      	movs	r2, #8
    2e84:	2083      	movs	r0, #131	; 0x83
    2e86:	4c33      	ldr	r4, [pc, #204]	; (2f54 <eink_ed028tc1_put_display_buffer+0xf4>)
    2e88:	47a0      	blx	r4
    eink_write_data(UC8177_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED028TC1_DISPLAY_BUFFER_SIZE);
    2e8a:	4b33      	ldr	r3, [pc, #204]	; (2f58 <eink_ed028tc1_put_display_buffer+0xf8>)
    2e8c:	681b      	ldr	r3, [r3, #0]
    2e8e:	6919      	ldr	r1, [r3, #16]
    2e90:	4a32      	ldr	r2, [pc, #200]	; (2f5c <eink_ed028tc1_put_display_buffer+0xfc>)
    2e92:	2010      	movs	r0, #16
    2e94:	47a0      	blx	r4
    if((uc8177_global_instance.display_config.display_rotation == ROTATE_90) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180)) {
    2e96:	4b32      	ldr	r3, [pc, #200]	; (2f60 <eink_ed028tc1_put_display_buffer+0x100>)
    2e98:	781b      	ldrb	r3, [r3, #0]
    2e9a:	2b01      	cmp	r3, #1
    2e9c:	d00f      	beq.n	2ebe <eink_ed028tc1_put_display_buffer+0x5e>
    2e9e:	4b30      	ldr	r3, [pc, #192]	; (2f60 <eink_ed028tc1_put_display_buffer+0x100>)
    2ea0:	781b      	ldrb	r3, [r3, #0]
    2ea2:	2b02      	cmp	r3, #2
    2ea4:	d00b      	beq.n	2ebe <eink_ed028tc1_put_display_buffer+0x5e>
        eink_data[0] = 0x02;
    2ea6:	2202      	movs	r2, #2
    2ea8:	ab06      	add	r3, sp, #24
    2eaa:	701a      	strb	r2, [r3, #0]
    eink_write_data(UC8177_GDOS, eink_data, 1);
    2eac:	2201      	movs	r2, #1
    2eae:	a906      	add	r1, sp, #24
    2eb0:	20e0      	movs	r0, #224	; 0xe0
    2eb2:	4b28      	ldr	r3, [pc, #160]	; (2f54 <eink_ed028tc1_put_display_buffer+0xf4>)
    2eb4:	4798      	blx	r3
    if(refresh_display) {
    2eb6:	2d00      	cmp	r5, #0
    2eb8:	d105      	bne.n	2ec6 <eink_ed028tc1_put_display_buffer+0x66>
}
    2eba:	b009      	add	sp, #36	; 0x24
    2ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_data[0] = 0x03;
    2ebe:	2203      	movs	r2, #3
    2ec0:	ab06      	add	r3, sp, #24
    2ec2:	701a      	strb	r2, [r3, #0]
    2ec4:	e7f2      	b.n	2eac <eink_ed028tc1_put_display_buffer+0x4c>
    eink_write_data(UC8177_PON, 0, 0);
    2ec6:	2200      	movs	r2, #0
    2ec8:	2100      	movs	r1, #0
    2eca:	2004      	movs	r0, #4
    2ecc:	4b21      	ldr	r3, [pc, #132]	; (2f54 <eink_ed028tc1_put_display_buffer+0xf4>)
    2ece:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2ed0:	4f24      	ldr	r7, [pc, #144]	; (2f64 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2ed2:	4e25      	ldr	r6, [pc, #148]	; (2f68 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2ed4:	a801      	add	r0, sp, #4
    2ed6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2ed8:	23c0      	movs	r3, #192	; 0xc0
    2eda:	05db      	lsls	r3, r3, #23
    2edc:	2580      	movs	r5, #128	; 0x80
    2ede:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2ee0:	22a0      	movs	r2, #160	; 0xa0
    2ee2:	4922      	ldr	r1, [pc, #136]	; (2f6c <eink_ed028tc1_put_display_buffer+0x10c>)
    2ee4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2ee6:	2190      	movs	r1, #144	; 0x90
    2ee8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2eea:	4053      	eors	r3, r2
    2eec:	401c      	ands	r4, r3
    2eee:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2ef0:	a801      	add	r0, sp, #4
    2ef2:	47b0      	blx	r6
    2ef4:	4225      	tst	r5, r4
    2ef6:	d0ed      	beq.n	2ed4 <eink_ed028tc1_put_display_buffer+0x74>
    eink_data[0] = 0x18; /* Update Mode 1 */
    2ef8:	a903      	add	r1, sp, #12
    2efa:	2318      	movs	r3, #24
    2efc:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2efe:	2300      	movs	r3, #0
    2f00:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2f02:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2f04:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    2f06:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    2f08:	3302      	adds	r3, #2
    2f0a:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    2f0c:	3356      	adds	r3, #86	; 0x56
    2f0e:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    2f10:	3b57      	subs	r3, #87	; 0x57
    2f12:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    2f14:	33df      	adds	r3, #223	; 0xdf
    2f16:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    2f18:	2209      	movs	r2, #9
    2f1a:	2012      	movs	r0, #18
    2f1c:	4c0d      	ldr	r4, [pc, #52]	; (2f54 <eink_ed028tc1_put_display_buffer+0xf4>)
    2f1e:	47a0      	blx	r4
    eink_write_data(UC8177_POF, 0, 0);
    2f20:	2200      	movs	r2, #0
    2f22:	2100      	movs	r1, #0
    2f24:	2002      	movs	r0, #2
    2f26:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2f28:	4f0e      	ldr	r7, [pc, #56]	; (2f64 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2f2a:	4e0f      	ldr	r6, [pc, #60]	; (2f68 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2f2c:	a802      	add	r0, sp, #8
    2f2e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2f30:	23c0      	movs	r3, #192	; 0xc0
    2f32:	05db      	lsls	r3, r3, #23
    2f34:	2580      	movs	r5, #128	; 0x80
    2f36:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2f38:	22a0      	movs	r2, #160	; 0xa0
    2f3a:	490c      	ldr	r1, [pc, #48]	; (2f6c <eink_ed028tc1_put_display_buffer+0x10c>)
    2f3c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2f3e:	2190      	movs	r1, #144	; 0x90
    2f40:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2f42:	4053      	eors	r3, r2
    2f44:	401c      	ands	r4, r3
    2f46:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2f48:	a802      	add	r0, sp, #8
    2f4a:	47b0      	blx	r6
    2f4c:	4225      	tst	r5, r4
    2f4e:	d0ed      	beq.n	2f2c <eink_ed028tc1_put_display_buffer+0xcc>
    2f50:	e7b3      	b.n	2eba <eink_ed028tc1_put_display_buffer+0x5a>
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	00001e29 	.word	0x00001e29
    2f58:	20000434 	.word	0x20000434
    2f5c:	00023280 	.word	0x00023280
    2f60:	200003b0 	.word	0x200003b0
    2f64:	0000034d 	.word	0x0000034d
    2f68:	0000035b 	.word	0x0000035b
    2f6c:	41004400 	.word	0x41004400

00002f70 <eink_ed013tc1_put_display_buffer>:
{
    2f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f72:	b089      	sub	sp, #36	; 0x24
    2f74:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2f76:	a906      	add	r1, sp, #24
    2f78:	2300      	movs	r3, #0
    2f7a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2f7c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2f7e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x7F; /* W = 127 */
    2f80:	227f      	movs	r2, #127	; 0x7f
    2f82:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2f84:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xFF; /* H = 255 */
    2f86:	33ff      	adds	r3, #255	; 0xff
    2f88:	714b      	strb	r3, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2f8a:	3a79      	subs	r2, #121	; 0x79
    2f8c:	2014      	movs	r0, #20
    2f8e:	4c43      	ldr	r4, [pc, #268]	; (309c <eink_ed013tc1_put_display_buffer+0x12c>)
    2f90:	47a0      	blx	r4
    eink_write_data(UC8173_DTM4, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    2f92:	4b43      	ldr	r3, [pc, #268]	; (30a0 <eink_ed013tc1_put_display_buffer+0x130>)
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	6959      	ldr	r1, [r3, #20]
    2f98:	2280      	movs	r2, #128	; 0x80
    2f9a:	0152      	lsls	r2, r2, #5
    2f9c:	2016      	movs	r0, #22
    2f9e:	47a0      	blx	r4
    if(refresh_display) {
    2fa0:	2d00      	cmp	r5, #0
    2fa2:	d10d      	bne.n	2fc0 <eink_ed013tc1_put_display_buffer+0x50>
{
    2fa4:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2fa6:	4c3e      	ldr	r4, [pc, #248]	; (30a0 <eink_ed013tc1_put_display_buffer+0x130>)
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2fa8:	2080      	movs	r0, #128	; 0x80
    2faa:	0140      	lsls	r0, r0, #5
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2fac:	6822      	ldr	r2, [r4, #0]
    2fae:	6951      	ldr	r1, [r2, #20]
    2fb0:	5cc9      	ldrb	r1, [r1, r3]
    2fb2:	6912      	ldr	r2, [r2, #16]
    2fb4:	54d1      	strb	r1, [r2, r3]
    2fb6:	3301      	adds	r3, #1
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2fb8:	4283      	cmp	r3, r0
    2fba:	d1f7      	bne.n	2fac <eink_ed013tc1_put_display_buffer+0x3c>
}
    2fbc:	b009      	add	sp, #36	; 0x24
    2fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_write_data(UC8173_PON, 0, 0);
    2fc0:	2200      	movs	r2, #0
    2fc2:	2100      	movs	r1, #0
    2fc4:	2004      	movs	r0, #4
    2fc6:	4b35      	ldr	r3, [pc, #212]	; (309c <eink_ed013tc1_put_display_buffer+0x12c>)
    2fc8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2fca:	4f36      	ldr	r7, [pc, #216]	; (30a4 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    2fcc:	4e36      	ldr	r6, [pc, #216]	; (30a8 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    2fce:	a801      	add	r0, sp, #4
    2fd0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2fd2:	23c0      	movs	r3, #192	; 0xc0
    2fd4:	05db      	lsls	r3, r3, #23
    2fd6:	2580      	movs	r5, #128	; 0x80
    2fd8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2fda:	22a0      	movs	r2, #160	; 0xa0
    2fdc:	4933      	ldr	r1, [pc, #204]	; (30ac <eink_ed013tc1_put_display_buffer+0x13c>)
    2fde:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2fe0:	2190      	movs	r1, #144	; 0x90
    2fe2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2fe4:	4053      	eors	r3, r2
    2fe6:	401c      	ands	r4, r3
    2fe8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2fea:	a801      	add	r0, sp, #4
    2fec:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2fee:	4225      	tst	r5, r4
    2ff0:	d0ed      	beq.n	2fce <eink_ed013tc1_put_display_buffer+0x5e>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ED013TC1_GC2)
    2ff2:	4b2f      	ldr	r3, [pc, #188]	; (30b0 <eink_ed013tc1_put_display_buffer+0x140>)
    2ff4:	78db      	ldrb	r3, [r3, #3]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d13d      	bne.n	3076 <eink_ed013tc1_put_display_buffer+0x106>
    eink_data[0] = 0x01; /* GU2 Update Mode */
    2ffa:	a904      	add	r1, sp, #16
    2ffc:	2301      	movs	r3, #1
    2ffe:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    3000:	2300      	movs	r3, #0
    3002:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    3004:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    3006:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    3008:	227f      	movs	r2, #127	; 0x7f
    300a:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    300c:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    300e:	33ff      	adds	r3, #255	; 0xff
    3010:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    3012:	3a78      	subs	r2, #120	; 0x78
    3014:	2012      	movs	r0, #18
    3016:	4b21      	ldr	r3, [pc, #132]	; (309c <eink_ed013tc1_put_display_buffer+0x12c>)
    3018:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    301a:	4f22      	ldr	r7, [pc, #136]	; (30a4 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    301c:	4e22      	ldr	r6, [pc, #136]	; (30a8 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    301e:	a802      	add	r0, sp, #8
    3020:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3022:	23c0      	movs	r3, #192	; 0xc0
    3024:	05db      	lsls	r3, r3, #23
    3026:	2580      	movs	r5, #128	; 0x80
    3028:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    302a:	22a0      	movs	r2, #160	; 0xa0
    302c:	491f      	ldr	r1, [pc, #124]	; (30ac <eink_ed013tc1_put_display_buffer+0x13c>)
    302e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3030:	2190      	movs	r1, #144	; 0x90
    3032:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3034:	4053      	eors	r3, r2
    3036:	401c      	ands	r4, r3
    3038:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    303a:	a802      	add	r0, sp, #8
    303c:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    303e:	4225      	tst	r5, r4
    3040:	d0ed      	beq.n	301e <eink_ed013tc1_put_display_buffer+0xae>
    eink_write_data(UC8173_POF, 0, 0);
    3042:	2200      	movs	r2, #0
    3044:	2100      	movs	r1, #0
    3046:	2002      	movs	r0, #2
    3048:	4b14      	ldr	r3, [pc, #80]	; (309c <eink_ed013tc1_put_display_buffer+0x12c>)
    304a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    304c:	4f15      	ldr	r7, [pc, #84]	; (30a4 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    304e:	4e16      	ldr	r6, [pc, #88]	; (30a8 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    3050:	a803      	add	r0, sp, #12
    3052:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3054:	23c0      	movs	r3, #192	; 0xc0
    3056:	05db      	lsls	r3, r3, #23
    3058:	2580      	movs	r5, #128	; 0x80
    305a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    305c:	22a0      	movs	r2, #160	; 0xa0
    305e:	4913      	ldr	r1, [pc, #76]	; (30ac <eink_ed013tc1_put_display_buffer+0x13c>)
    3060:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3062:	2190      	movs	r1, #144	; 0x90
    3064:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3066:	4053      	eors	r3, r2
    3068:	401c      	ands	r4, r3
    306a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    306c:	a803      	add	r0, sp, #12
    306e:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    3070:	4225      	tst	r5, r4
    3072:	d1ed      	bne.n	3050 <eink_ed013tc1_put_display_buffer+0xe0>
    3074:	e796      	b.n	2fa4 <eink_ed013tc1_put_display_buffer+0x34>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ED013TC1_GC2;
    3076:	2200      	movs	r2, #0
    3078:	4b0d      	ldr	r3, [pc, #52]	; (30b0 <eink_ed013tc1_put_display_buffer+0x140>)
    307a:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    307c:	3220      	adds	r2, #32
    307e:	2155      	movs	r1, #85	; 0x55
    3080:	2020      	movs	r0, #32
    3082:	4c06      	ldr	r4, [pc, #24]	; (309c <eink_ed013tc1_put_display_buffer+0x12c>)
    3084:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    3086:	2280      	movs	r2, #128	; 0x80
    3088:	0092      	lsls	r2, r2, #2
    308a:	2181      	movs	r1, #129	; 0x81
    308c:	2022      	movs	r0, #34	; 0x22
    308e:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);	
    3090:	2280      	movs	r2, #128	; 0x80
    3092:	2100      	movs	r1, #0
    3094:	2026      	movs	r0, #38	; 0x26
    3096:	47a0      	blx	r4
    3098:	e7af      	b.n	2ffa <eink_ed013tc1_put_display_buffer+0x8a>
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	00001e29 	.word	0x00001e29
    30a0:	20000434 	.word	0x20000434
    30a4:	0000034d 	.word	0x0000034d
    30a8:	0000035b 	.word	0x0000035b
    30ac:	41004400 	.word	0x41004400
    30b0:	20000390 	.word	0x20000390

000030b4 <_eink_ite_write_data>:
void _eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes,
        uint8_t fast_write)
{   
    30b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30b6:	0004      	movs	r4, r0
    30b8:	0015      	movs	r5, r2
    uint32_t i, j, sendWords_m, sendWords_r;
    
    eink_ite_wait_for_hrdy();
    30ba:	4b12      	ldr	r3, [pc, #72]	; (3104 <_eink_ite_write_data+0x50>)
    30bc:	4798      	blx	r3
    if (command != 0) {
    30be:	2c00      	cmp	r4, #0
    30c0:	d11d      	bne.n	30fe <_eink_ite_write_data+0x4a>
        /* Set CSB LOW to enable communication to the display */
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
    }
    
    eink_ite_wait_for_hrdy();
    30c2:	4b10      	ldr	r3, [pc, #64]	; (3104 <_eink_ite_write_data+0x50>)
    30c4:	4798      	blx	r3
    if (data_bytes != 0) {
    30c6:	2d00      	cmp	r5, #0
    30c8:	d018      	beq.n	30fc <_eink_ite_write_data+0x48>
        /* Data burst must be sent 1024 words at a time */
        sendWords_r = data_bytes % 2048;
    30ca:	056e      	lsls	r6, r5, #21
    30cc:	0d76      	lsrs	r6, r6, #21
        sendWords_m = (data_bytes - sendWords_r) / 2048;
    30ce:	1bad      	subs	r5, r5, r6
    30d0:	0aed      	lsrs	r5, r5, #11
        
        /* If we have more than 1024 words, start sending them in bursts */
        for(j=0; j<sendWords_m; j++)
    30d2:	2400      	movs	r4, #0
    30d4:	2d00      	cmp	r5, #0
    30d6:	d009      	beq.n	30ec <_eink_ite_write_data+0x38>
            }           
            /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
            gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
            eink_ite_wait_for_hrdy();
    30d8:	4f0a      	ldr	r7, [pc, #40]	; (3104 <_eink_ite_write_data+0x50>)
{   
    30da:	2380      	movs	r3, #128	; 0x80
    30dc:	011b      	lsls	r3, r3, #4
    30de:	3b01      	subs	r3, #1
            for (i=0; i<2048; i++)
    30e0:	2b00      	cmp	r3, #0
    30e2:	d1fc      	bne.n	30de <_eink_ite_write_data+0x2a>
            eink_ite_wait_for_hrdy();
    30e4:	47b8      	blx	r7
        for(j=0; j<sendWords_m; j++)
    30e6:	3401      	adds	r4, #1
    30e8:	42a5      	cmp	r5, r4
    30ea:	d1f6      	bne.n	30da <_eink_ite_write_data+0x26>
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 0);
#endif
        eink_ite_send_raw_hword(0x0000);
        /* Send the remaining data (or all the data if there was less than 1024 words */
        for (i=0; i<sendWords_r; i++) {
    30ec:	2e00      	cmp	r6, #0
    30ee:	d003      	beq.n	30f8 <_eink_ite_write_data+0x44>
    30f0:	2300      	movs	r3, #0
    30f2:	3301      	adds	r3, #1
    30f4:	429e      	cmp	r6, r3
    30f6:	d1fc      	bne.n	30f2 <_eink_ite_write_data+0x3e>
        }
        /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
        eink_ite_wait_for_hrdy();
    30f8:	4b02      	ldr	r3, [pc, #8]	; (3104 <_eink_ite_write_data+0x50>)
    30fa:	4798      	blx	r3
    }
}
    30fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eink_ite_wait_for_hrdy();
    30fe:	4b01      	ldr	r3, [pc, #4]	; (3104 <_eink_ite_write_data+0x50>)
    3100:	4798      	blx	r3
    3102:	e7de      	b.n	30c2 <_eink_ite_write_data+0xe>
    3104:	00000575 	.word	0x00000575

00003108 <eink_ite_write_data>:
 */
void eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    3108:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 0);
    310a:	2300      	movs	r3, #0
    310c:	4c01      	ldr	r4, [pc, #4]	; (3114 <eink_ite_write_data+0xc>)
    310e:	47a0      	blx	r4
}
    3110:	bd10      	pop	{r4, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	000030b5 	.word	0x000030b5

00003118 <eink_it8951_refresh_partial_display>:
    eink_coordinate show_x,
    eink_coordinate show_y,
    eink_coordinate show_w,
    eink_coordinate show_h,
    uint8_t update_mode)
{
    3118:	b5f0      	push	{r4, r5, r6, r7, lr}
    311a:	b085      	sub	sp, #20
    311c:	ac0a      	add	r4, sp, #40	; 0x28
    311e:	7825      	ldrb	r5, [r4, #0]
    uint16_t eink_data[5];
    switch(it8951_global_instance.display_rotation)
    3120:	2430      	movs	r4, #48	; 0x30
    3122:	4e26      	ldr	r6, [pc, #152]	; (31bc <eink_it8951_refresh_partial_display+0xa4>)
    3124:	5d34      	ldrb	r4, [r6, r4]
    3126:	b2e4      	uxtb	r4, r4
    3128:	2c01      	cmp	r4, #1
    312a:	d025      	beq.n	3178 <eink_it8951_refresh_partial_display+0x60>
    312c:	2c00      	cmp	r4, #0
    312e:	d01d      	beq.n	316c <eink_it8951_refresh_partial_display+0x54>
    3130:	2c02      	cmp	r4, #2
    3132:	d02b      	beq.n	318c <eink_it8951_refresh_partial_display+0x74>
    3134:	2c03      	cmp	r4, #3
    3136:	d036      	beq.n	31a6 <eink_it8951_refresh_partial_display+0x8e>
            eink_data[1] = (uint16_t) show_y;
            eink_data[2] = (uint16_t) show_w;
            eink_data[3] = (uint16_t) show_h;
            break;
    }
    eink_data[4] = (uint16_t) update_mode;
    3138:	a901      	add	r1, sp, #4
    313a:	810d      	strh	r5, [r1, #8]
    /* Send I80 Display Command */
    eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    313c:	2201      	movs	r2, #1
    313e:	2034      	movs	r0, #52	; 0x34
    3140:	4c1f      	ldr	r4, [pc, #124]	; (31c0 <eink_it8951_refresh_partial_display+0xa8>)
    3142:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[1], 1);
    3144:	2201      	movs	r2, #1
    3146:	466b      	mov	r3, sp
    3148:	1d99      	adds	r1, r3, #6
    314a:	2000      	movs	r0, #0
    314c:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[2], 1);
    314e:	2201      	movs	r2, #1
    3150:	a902      	add	r1, sp, #8
    3152:	2000      	movs	r0, #0
    3154:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[3], 1);
    3156:	2201      	movs	r2, #1
    3158:	210a      	movs	r1, #10
    315a:	4469      	add	r1, sp
    315c:	2000      	movs	r0, #0
    315e:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[4], 1);
    3160:	2201      	movs	r2, #1
    3162:	a903      	add	r1, sp, #12
    3164:	2000      	movs	r0, #0
    3166:	47a0      	blx	r4
}
    3168:	b005      	add	sp, #20
    316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_data[0] = (uint16_t) show_y;
    316c:	ac01      	add	r4, sp, #4
    316e:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) show_x;
    3170:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    3172:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    3174:	80e2      	strh	r2, [r4, #6]
            break;
    3176:	e7df      	b.n	3138 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) show_x;
    3178:	ac01      	add	r4, sp, #4
    317a:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_y-show_h;
    317c:	480f      	ldr	r0, [pc, #60]	; (31bc <eink_it8951_refresh_partial_display+0xa4>)
    317e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    3180:	1a41      	subs	r1, r0, r1
    3182:	1ac9      	subs	r1, r1, r3
    3184:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    3186:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    3188:	80e3      	strh	r3, [r4, #6]
            break;
    318a:	e7d5      	b.n	3138 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_y-show_h;
    318c:	4f0b      	ldr	r7, [pc, #44]	; (31bc <eink_it8951_refresh_partial_display+0xa4>)
    318e:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
    3190:	ac01      	add	r4, sp, #4
    3192:	1a71      	subs	r1, r6, r1
    3194:	1ac9      	subs	r1, r1, r3
    3196:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_x-show_w;
    3198:	8d39      	ldrh	r1, [r7, #40]	; 0x28
    319a:	1a08      	subs	r0, r1, r0
    319c:	1a80      	subs	r0, r0, r2
    319e:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    31a0:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    31a2:	80e2      	strh	r2, [r4, #6]
            break;
    31a4:	e7c8      	b.n	3138 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_x-show_w;
    31a6:	4c05      	ldr	r4, [pc, #20]	; (31bc <eink_it8951_refresh_partial_display+0xa4>)
    31a8:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
    31aa:	ac01      	add	r4, sp, #4
    31ac:	1a30      	subs	r0, r6, r0
    31ae:	1a80      	subs	r0, r0, r2
    31b0:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) show_y;
    31b2:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    31b4:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    31b6:	80e3      	strh	r3, [r4, #6]
            break;
    31b8:	e7be      	b.n	3138 <eink_it8951_refresh_partial_display+0x20>
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	200003c0 	.word	0x200003c0
    31c0:	00003109 	.word	0x00003109

000031c4 <eink_it8951_refresh_display_mode>:
{
    31c4:	b510      	push	{r4, lr}
    31c6:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    31c8:	a901      	add	r1, sp, #4
    31ca:	2300      	movs	r3, #0
    31cc:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    31ce:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    31d0:	4b0e      	ldr	r3, [pc, #56]	; (320c <eink_it8951_refresh_display_mode+0x48>)
    31d2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    31d4:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    31d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    31d8:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    31da:	8108      	strh	r0, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    31dc:	2201      	movs	r2, #1
    31de:	2034      	movs	r0, #52	; 0x34
    31e0:	4c0b      	ldr	r4, [pc, #44]	; (3210 <eink_it8951_refresh_display_mode+0x4c>)
    31e2:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    31e4:	2201      	movs	r2, #1
    31e6:	466b      	mov	r3, sp
    31e8:	1d99      	adds	r1, r3, #6
    31ea:	2000      	movs	r0, #0
    31ec:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    31ee:	2201      	movs	r2, #1
    31f0:	a902      	add	r1, sp, #8
    31f2:	2000      	movs	r0, #0
    31f4:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    31f6:	2201      	movs	r2, #1
    31f8:	210a      	movs	r1, #10
    31fa:	4469      	add	r1, sp
    31fc:	2000      	movs	r0, #0
    31fe:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    3200:	2201      	movs	r2, #1
    3202:	a903      	add	r1, sp, #12
    3204:	2000      	movs	r0, #0
    3206:	47a0      	blx	r4
 }
    3208:	b004      	add	sp, #16
    320a:	bd10      	pop	{r4, pc}
    320c:	200003c0 	.word	0x200003c0
    3210:	00003109 	.word	0x00003109

00003214 <eink_it8951_put_partial_display_buffer>:
 * \param start_y starting Y coordinate start of the display buffer to send
 * \param window_w width of the display buffer to send
 * \param window_h height of the display buffer to send
 */
void eink_it8951_put_partial_display_buffer(eink_coordinate start_x, eink_coordinate start_y, eink_coordinate window_w, eink_coordinate window_h)
{
    3214:	b5f0      	push	{r4, r5, r6, r7, lr}
    3216:	46de      	mov	lr, fp
    3218:	4657      	mov	r7, sl
    321a:	464e      	mov	r6, r9
    321c:	4645      	mov	r5, r8
    321e:	b5e0      	push	{r5, r6, r7, lr}
    3220:	b087      	sub	sp, #28
    3222:	0004      	movs	r4, r0
    3224:	000d      	movs	r5, r1
    3226:	9201      	str	r2, [sp, #4]
    3228:	001f      	movs	r7, r3
    uint16_t eink_data[5], rotation = 0;
    uint16_t* display_buffer;
    uint32_t i, j, k;

    /* Get pointer to Display Buffer */
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    322a:	4b45      	ldr	r3, [pc, #276]	; (3340 <eink_it8951_put_partial_display_buffer+0x12c>)
    322c:	681b      	ldr	r3, [r3, #0]
    322e:	4698      	mov	r8, r3
        
    /* Set Image Buffer Base address (IT8951) */
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    3230:	4e44      	ldr	r6, [pc, #272]	; (3344 <eink_it8951_put_partial_display_buffer+0x130>)
    3232:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    3234:	6b72      	ldr	r2, [r6, #52]	; 0x34
    3236:	4692      	mov	sl, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    3238:	4a43      	ldr	r2, [pc, #268]	; (3348 <eink_it8951_put_partial_display_buffer+0x134>)
    323a:	a902      	add	r1, sp, #8
    323c:	800a      	strh	r2, [r1, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    323e:	0c1b      	lsrs	r3, r3, #16
    3240:	804b      	strh	r3, [r1, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    3242:	2202      	movs	r2, #2
    3244:	2011      	movs	r0, #17
    3246:	4b41      	ldr	r3, [pc, #260]	; (334c <eink_it8951_put_partial_display_buffer+0x138>)
    3248:	469b      	mov	fp, r3
    324a:	4798      	blx	r3
    uint16_t data_send[2] = {reg_addr, reg_value};
    324c:	2382      	movs	r3, #130	; 0x82
    324e:	009b      	lsls	r3, r3, #2
    3250:	aa02      	add	r2, sp, #8
    3252:	8013      	strh	r3, [r2, #0]
    3254:	0013      	movs	r3, r2
    3256:	4652      	mov	r2, sl
    3258:	805a      	strh	r2, [r3, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    325a:	2202      	movs	r2, #2
    325c:	0019      	movs	r1, r3
    325e:	2011      	movs	r0, #17
    3260:	47d8      	blx	fp
    it8951_write_reg(LISAR + 2, usWordH);
    it8951_write_reg(LISAR, usWordL);
    
    /* Set arguments for Load Image Start */
    switch(it8951_global_instance.display_rotation)
    3262:	2330      	movs	r3, #48	; 0x30
    3264:	5cf3      	ldrb	r3, [r6, r3]
    3266:	b2db      	uxtb	r3, r3
    3268:	2b02      	cmp	r3, #2
    326a:	d022      	beq.n	32b2 <eink_it8951_put_partial_display_buffer+0x9e>
    326c:	2b03      	cmp	r3, #3
    326e:	d022      	beq.n	32b6 <eink_it8951_put_partial_display_buffer+0xa2>
    uint16_t eink_data[5], rotation = 0;
    3270:	3b01      	subs	r3, #1
    3272:	425a      	negs	r2, r3
    3274:	4153      	adcs	r3, r2
        case ROTATE_0: rotation = 0; break;
        case ROTATE_90: rotation = 1; break;
        case ROTATE_180: rotation = 2; break;
        case ROTATE_270: rotation = 3; break;
    }
    eink_data[0] = (0 << 8) | (2 << 4) | (rotation);
    3276:	a903      	add	r1, sp, #12
    3278:	2220      	movs	r2, #32
    327a:	4313      	orrs	r3, r2
    327c:	800b      	strh	r3, [r1, #0]
    eink_data[1] = start_y;
    327e:	804d      	strh	r5, [r1, #2]
    eink_data[2] = start_x;
    3280:	808c      	strh	r4, [r1, #4]
    eink_data[3] = window_h;
    3282:	80cf      	strh	r7, [r1, #6]
    eink_data[4] = window_w;
    3284:	466b      	mov	r3, sp
    3286:	889b      	ldrh	r3, [r3, #4]
    3288:	810b      	strh	r3, [r1, #8]
    eink_ite_write_data(IT8951_I80_LD_IMG_AREA, eink_data, 5);
    328a:	2205      	movs	r2, #5
    328c:	2021      	movs	r0, #33	; 0x21
    328e:	4b2f      	ldr	r3, [pc, #188]	; (334c <eink_it8951_put_partial_display_buffer+0x138>)
    3290:	4798      	blx	r3
    
    /* Move to start of the window within the display buffer */
    if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    3292:	2330      	movs	r3, #48	; 0x30
    3294:	4a2b      	ldr	r2, [pc, #172]	; (3344 <eink_it8951_put_partial_display_buffer+0x130>)
    3296:	5cd3      	ldrb	r3, [r2, r3]
    3298:	2b00      	cmp	r3, #0
    329a:	d00e      	beq.n	32ba <eink_it8951_put_partial_display_buffer+0xa6>
    329c:	2330      	movs	r3, #48	; 0x30
    329e:	5cd3      	ldrb	r3, [r2, r3]
    32a0:	2b02      	cmp	r3, #2
    32a2:	d00a      	beq.n	32ba <eink_it8951_put_partial_display_buffer+0xa6>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    else
        display_buffer += (it8951_global_instance.display_width / 4) * (start_x);
    32a4:	4b27      	ldr	r3, [pc, #156]	; (3344 <eink_it8951_put_partial_display_buffer+0x130>)
    32a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    32a8:	089b      	lsrs	r3, r3, #2
    32aa:	435c      	muls	r4, r3
    32ac:	0064      	lsls	r4, r4, #1
    32ae:	4444      	add	r4, r8
    32b0:	e009      	b.n	32c6 <eink_it8951_put_partial_display_buffer+0xb2>
        case ROTATE_180: rotation = 2; break;
    32b2:	2302      	movs	r3, #2
    32b4:	e7df      	b.n	3276 <eink_it8951_put_partial_display_buffer+0x62>
        case ROTATE_270: rotation = 3; break;
    32b6:	2303      	movs	r3, #3
    32b8:	e7dd      	b.n	3276 <eink_it8951_put_partial_display_buffer+0x62>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    32ba:	4b22      	ldr	r3, [pc, #136]	; (3344 <eink_it8951_put_partial_display_buffer+0x130>)
    32bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    32be:	089b      	lsrs	r3, r3, #2
    32c0:	435c      	muls	r4, r3
    32c2:	0064      	lsls	r4, r4, #1
    32c4:	4444      	add	r4, r8
    display_buffer += (start_y / 4);
    32c6:	08ad      	lsrs	r5, r5, #2
    32c8:	006d      	lsls	r5, r5, #1
    32ca:	1964      	adds	r4, r4, r5
    
    /* Loop through window sending the display buffer */
    for(j = 0; j < window_w; j++)
    32cc:	9e01      	ldr	r6, [sp, #4]
    32ce:	2e00      	cmp	r6, #0
    32d0:	d02a      	beq.n	3328 <eink_it8951_put_partial_display_buffer+0x114>
    {
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    32d2:	08bb      	lsrs	r3, r7, #2
    32d4:	9301      	str	r3, [sp, #4]
        display_buffer += (window_h / 4);
    32d6:	005a      	lsls	r2, r3, #1
    32d8:	4691      	mov	r9, r2
        
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
        else
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    32da:	469a      	mov	sl, r3
    32dc:	2500      	movs	r5, #0
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    32de:	4b1b      	ldr	r3, [pc, #108]	; (334c <eink_it8951_put_partial_display_buffer+0x138>)
    32e0:	4698      	mov	r8, r3
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    32e2:	4f18      	ldr	r7, [pc, #96]	; (3344 <eink_it8951_put_partial_display_buffer+0x130>)
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
    32e4:	46bb      	mov	fp, r7
    32e6:	e009      	b.n	32fc <eink_it8951_put_partial_display_buffer+0xe8>
    32e8:	465b      	mov	r3, fp
    32ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    32ec:	089b      	lsrs	r3, r3, #2
    32ee:	4652      	mov	r2, sl
    32f0:	1a9b      	subs	r3, r3, r2
    32f2:	005b      	lsls	r3, r3, #1
    32f4:	18e4      	adds	r4, r4, r3
    for(j = 0; j < window_w; j++)
    32f6:	3501      	adds	r5, #1
    32f8:	42b5      	cmp	r5, r6
    32fa:	d215      	bcs.n	3328 <eink_it8951_put_partial_display_buffer+0x114>
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    32fc:	9a01      	ldr	r2, [sp, #4]
    32fe:	0021      	movs	r1, r4
    3300:	2000      	movs	r0, #0
    3302:	47c0      	blx	r8
        display_buffer += (window_h / 4);
    3304:	444c      	add	r4, r9
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    3306:	2330      	movs	r3, #48	; 0x30
    3308:	5cfb      	ldrb	r3, [r7, r3]
    330a:	2b00      	cmp	r3, #0
    330c:	d0ec      	beq.n	32e8 <eink_it8951_put_partial_display_buffer+0xd4>
    330e:	2330      	movs	r3, #48	; 0x30
    3310:	4a0c      	ldr	r2, [pc, #48]	; (3344 <eink_it8951_put_partial_display_buffer+0x130>)
    3312:	5cd3      	ldrb	r3, [r2, r3]
    3314:	2b02      	cmp	r3, #2
    3316:	d0e7      	beq.n	32e8 <eink_it8951_put_partial_display_buffer+0xd4>
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    3318:	4b0a      	ldr	r3, [pc, #40]	; (3344 <eink_it8951_put_partial_display_buffer+0x130>)
    331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    331c:	089b      	lsrs	r3, r3, #2
    331e:	4652      	mov	r2, sl
    3320:	1a9b      	subs	r3, r3, r2
    3322:	005b      	lsls	r3, r3, #1
    3324:	18e4      	adds	r4, r4, r3
    3326:	e7e6      	b.n	32f6 <eink_it8951_put_partial_display_buffer+0xe2>
    }
    
    /* Send Load Img End Command */
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    3328:	2200      	movs	r2, #0
    332a:	2100      	movs	r1, #0
    332c:	2022      	movs	r0, #34	; 0x22
    332e:	4b07      	ldr	r3, [pc, #28]	; (334c <eink_it8951_put_partial_display_buffer+0x138>)
    3330:	4798      	blx	r3
}
    3332:	b007      	add	sp, #28
    3334:	bc3c      	pop	{r2, r3, r4, r5}
    3336:	4690      	mov	r8, r2
    3338:	4699      	mov	r9, r3
    333a:	46a2      	mov	sl, r4
    333c:	46ab      	mov	fp, r5
    333e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3340:	200003a4 	.word	0x200003a4
    3344:	200003c0 	.word	0x200003c0
    3348:	0000020a 	.word	0x0000020a
    334c:	00003109 	.word	0x00003109

00003350 <eink_it8951_refresh_display>:
{
    3350:	b510      	push	{r4, lr}
    3352:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    3354:	a901      	add	r1, sp, #4
    3356:	2300      	movs	r3, #0
    3358:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    335a:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    335c:	4b0f      	ldr	r3, [pc, #60]	; (339c <eink_it8951_refresh_display+0x4c>)
    335e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    3360:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    3362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3364:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    3366:	2302      	movs	r3, #2
    3368:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    336a:	2201      	movs	r2, #1
    336c:	2034      	movs	r0, #52	; 0x34
    336e:	4c0c      	ldr	r4, [pc, #48]	; (33a0 <eink_it8951_refresh_display+0x50>)
    3370:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    3372:	2201      	movs	r2, #1
    3374:	466b      	mov	r3, sp
    3376:	1d99      	adds	r1, r3, #6
    3378:	2000      	movs	r0, #0
    337a:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    337c:	2201      	movs	r2, #1
    337e:	a902      	add	r1, sp, #8
    3380:	2000      	movs	r0, #0
    3382:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    3384:	2201      	movs	r2, #1
    3386:	210a      	movs	r1, #10
    3388:	4469      	add	r1, sp
    338a:	2000      	movs	r0, #0
    338c:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    338e:	2201      	movs	r2, #1
    3390:	a903      	add	r1, sp, #12
    3392:	2000      	movs	r0, #0
    3394:	47a0      	blx	r4
}
    3396:	b004      	add	sp, #16
    3398:	bd10      	pop	{r4, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	200003c0 	.word	0x200003c0
    33a0:	00003109 	.word	0x00003109

000033a4 <eink_ite_write_data_fast>:
 */
void eink_ite_write_data_fast(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    33a4:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 1);
    33a6:	2301      	movs	r3, #1
    33a8:	4c01      	ldr	r4, [pc, #4]	; (33b0 <eink_ite_write_data_fast+0xc>)
    33aa:	47a0      	blx	r4
}
    33ac:	bd10      	pop	{r4, pc}
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	000030b5 	.word	0x000030b5

000033b4 <eink_it8951_put_display_buffer>:
{
    33b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33b6:	46c6      	mov	lr, r8
    33b8:	b500      	push	{lr}
    33ba:	b084      	sub	sp, #16
    33bc:	0005      	movs	r5, r0
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    33be:	4e31      	ldr	r6, [pc, #196]	; (3484 <eink_it8951_put_display_buffer+0xd0>)
    33c0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    33c2:	6b72      	ldr	r2, [r6, #52]	; 0x34
    33c4:	4690      	mov	r8, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    33c6:	ac01      	add	r4, sp, #4
    33c8:	4a2f      	ldr	r2, [pc, #188]	; (3488 <eink_it8951_put_display_buffer+0xd4>)
    33ca:	8022      	strh	r2, [r4, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    33cc:	0c1b      	lsrs	r3, r3, #16
    33ce:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    33d0:	2202      	movs	r2, #2
    33d2:	0021      	movs	r1, r4
    33d4:	2011      	movs	r0, #17
    33d6:	4f2d      	ldr	r7, [pc, #180]	; (348c <eink_it8951_put_display_buffer+0xd8>)
    33d8:	47b8      	blx	r7
    uint16_t data_send[2] = {reg_addr, reg_value};
    33da:	2382      	movs	r3, #130	; 0x82
    33dc:	009b      	lsls	r3, r3, #2
    33de:	8023      	strh	r3, [r4, #0]
    33e0:	4643      	mov	r3, r8
    33e2:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    33e4:	2202      	movs	r2, #2
    33e6:	0021      	movs	r1, r4
    33e8:	2011      	movs	r0, #17
    33ea:	47b8      	blx	r7
    switch(it8951_global_instance.display_rotation)
    33ec:	2330      	movs	r3, #48	; 0x30
    33ee:	5cf3      	ldrb	r3, [r6, r3]
    33f0:	b2db      	uxtb	r3, r3
    33f2:	2b02      	cmp	r3, #2
    33f4:	d01f      	beq.n	3436 <eink_it8951_put_display_buffer+0x82>
    33f6:	2b03      	cmp	r3, #3
    33f8:	d01f      	beq.n	343a <eink_it8951_put_display_buffer+0x86>
    uint16_t eink_data, rotation = 0;
    33fa:	3b01      	subs	r3, #1
    33fc:	425a      	negs	r2, r3
    33fe:	4153      	adcs	r3, r2
    eink_data = (0 << 8) | (2 << 4) | (rotation);
    3400:	210e      	movs	r1, #14
    3402:	4469      	add	r1, sp
    3404:	2220      	movs	r2, #32
    3406:	4313      	orrs	r3, r2
    3408:	800b      	strh	r3, [r1, #0]
    eink_ite_write_data(IT8951_I80_LD_IMG, &eink_data, 1);
    340a:	2201      	movs	r2, #1
    340c:	2020      	movs	r0, #32
    340e:	4c1f      	ldr	r4, [pc, #124]	; (348c <eink_it8951_put_display_buffer+0xd8>)
    3410:	47a0      	blx	r4
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    3412:	4b1c      	ldr	r3, [pc, #112]	; (3484 <eink_it8951_put_display_buffer+0xd0>)
    3414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3416:	0852      	lsrs	r2, r2, #1
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    3418:	4b1d      	ldr	r3, [pc, #116]	; (3490 <eink_it8951_put_display_buffer+0xdc>)
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    341a:	6819      	ldr	r1, [r3, #0]
    341c:	2000      	movs	r0, #0
    341e:	4b1d      	ldr	r3, [pc, #116]	; (3494 <eink_it8951_put_display_buffer+0xe0>)
    3420:	4798      	blx	r3
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    3422:	2200      	movs	r2, #0
    3424:	2100      	movs	r1, #0
    3426:	2022      	movs	r0, #34	; 0x22
    3428:	47a0      	blx	r4
    if(refresh_display) eink_it8951_refresh_display();
    342a:	2d00      	cmp	r5, #0
    342c:	d107      	bne.n	343e <eink_it8951_put_display_buffer+0x8a>
}
    342e:	b004      	add	sp, #16
    3430:	bc04      	pop	{r2}
    3432:	4690      	mov	r8, r2
    3434:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case ROTATE_180: rotation = 2; break;
    3436:	2302      	movs	r3, #2
    3438:	e7e2      	b.n	3400 <eink_it8951_put_display_buffer+0x4c>
        case ROTATE_270: rotation = 3; break;
    343a:	2303      	movs	r3, #3
    343c:	e7e0      	b.n	3400 <eink_it8951_put_display_buffer+0x4c>
     eink_data[0] = (uint16_t) 0;
    343e:	a901      	add	r1, sp, #4
    3440:	2300      	movs	r3, #0
    3442:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    3444:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    3446:	4b0f      	ldr	r3, [pc, #60]	; (3484 <eink_it8951_put_display_buffer+0xd0>)
    3448:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    344a:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    344e:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    3450:	2302      	movs	r3, #2
    3452:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    3454:	2201      	movs	r2, #1
    3456:	2034      	movs	r0, #52	; 0x34
    3458:	4c0c      	ldr	r4, [pc, #48]	; (348c <eink_it8951_put_display_buffer+0xd8>)
    345a:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    345c:	2201      	movs	r2, #1
    345e:	466b      	mov	r3, sp
    3460:	1d99      	adds	r1, r3, #6
    3462:	2000      	movs	r0, #0
    3464:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    3466:	2201      	movs	r2, #1
    3468:	a902      	add	r1, sp, #8
    346a:	2000      	movs	r0, #0
    346c:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    346e:	2201      	movs	r2, #1
    3470:	210a      	movs	r1, #10
    3472:	4469      	add	r1, sp
    3474:	2000      	movs	r0, #0
    3476:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    3478:	2201      	movs	r2, #1
    347a:	a903      	add	r1, sp, #12
    347c:	2000      	movs	r0, #0
    347e:	47a0      	blx	r4
}
    3480:	e7d5      	b.n	342e <eink_it8951_put_display_buffer+0x7a>
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	200003c0 	.word	0x200003c0
    3488:	0000020a 	.word	0x0000020a
    348c:	00003109 	.word	0x00003109
    3490:	200003a4 	.word	0x200003a4
    3494:	000033a5 	.word	0x000033a5

00003498 <eink_ite_set_bit>:
 * \param bit_value Bit value.
 */
void eink_ite_set_bit(uint8_t *byte, uint8_t bit_number, bool bit_value)
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
    3498:	2a00      	cmp	r2, #0
    349a:	d105      	bne.n	34a8 <eink_ite_set_bit+0x10>
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
    349c:	2201      	movs	r2, #1
    349e:	408a      	lsls	r2, r1
    34a0:	7803      	ldrb	r3, [r0, #0]
    34a2:	4393      	bics	r3, r2
    34a4:	7003      	strb	r3, [r0, #0]
    }
    34a6:	4770      	bx	lr
        *byte |= 1 << bit_number;
    34a8:	2201      	movs	r2, #1
    34aa:	408a      	lsls	r2, r1
    34ac:	7803      	ldrb	r3, [r0, #0]
    34ae:	4313      	orrs	r3, r2
    34b0:	7003      	strb	r3, [r0, #0]
    34b2:	e7f8      	b.n	34a6 <eink_ite_set_bit+0xe>

000034b4 <eink_it8951_set_pixel_raw>:
 * \param x_set X coordinate of the pixel to set.
 * \param y_set Y coordinate of the pixel to set.
 * \param pixel_value Greyscale value to set the pixel to.
 */
void eink_it8951_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value)
{
    34b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34b6:	46c6      	mov	lr, r8
    34b8:	b500      	push	{lr}
    34ba:	0015      	movs	r5, r2
    eink_coordinate x1_set, y1_set, odd_even_bit;
    uint32_t byte_set;
    
    /* Ignore any pixels being set outside of the display window */
    if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    34bc:	4b34      	ldr	r3, [pc, #208]	; (3590 <eink_it8951_set_pixel_raw+0xdc>)
    34be:	681f      	ldr	r7, [r3, #0]
    34c0:	887b      	ldrh	r3, [r7, #2]
    34c2:	4283      	cmp	r3, r0
    34c4:	d93f      	bls.n	3546 <eink_it8951_set_pixel_raw+0x92>
    34c6:	88bb      	ldrh	r3, [r7, #4]
    34c8:	428b      	cmp	r3, r1
    34ca:	d93c      	bls.n	3546 <eink_it8951_set_pixel_raw+0x92>
        
        if ( (it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180) ) {
    34cc:	2330      	movs	r3, #48	; 0x30
    34ce:	4a31      	ldr	r2, [pc, #196]	; (3594 <eink_it8951_set_pixel_raw+0xe0>)
    34d0:	5cd3      	ldrb	r3, [r2, r3]
    34d2:	2b00      	cmp	r3, #0
    34d4:	d00c      	beq.n	34f0 <eink_it8951_set_pixel_raw+0x3c>
    34d6:	2330      	movs	r3, #48	; 0x30
    34d8:	5cd3      	ldrb	r3, [r2, r3]
    34da:	2b02      	cmp	r3, #2
    34dc:	d008      	beq.n	34f0 <eink_it8951_set_pixel_raw+0x3c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
            odd_even_bit = y_set % 2;
        } else {
            /* Calculate which byte the pixel in question is contained in */
            y1_set = (y_set - (y_set % 2)) / 2;
            byte_set = y1_set + ((it8951_global_instance.display_config.display_height / 2) * x_set);
    34de:	4b2d      	ldr	r3, [pc, #180]	; (3594 <eink_it8951_set_pixel_raw+0xe0>)
    34e0:	885c      	ldrh	r4, [r3, #2]
    34e2:	0864      	lsrs	r4, r4, #1
    34e4:	4360      	muls	r0, r4
    34e6:	104c      	asrs	r4, r1, #1
    34e8:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    34ea:	2301      	movs	r3, #1
    34ec:	4019      	ands	r1, r3
    34ee:	e007      	b.n	3500 <eink_it8951_set_pixel_raw+0x4c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
    34f0:	4b28      	ldr	r3, [pc, #160]	; (3594 <eink_it8951_set_pixel_raw+0xe0>)
    34f2:	881c      	ldrh	r4, [r3, #0]
    34f4:	0864      	lsrs	r4, r4, #1
    34f6:	4360      	muls	r0, r4
    34f8:	104c      	asrs	r4, r1, #1
    34fa:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    34fc:	2301      	movs	r3, #1
    34fe:	4019      	ands	r1, r3
        }
        
        if (!odd_even_bit) {
    3500:	2900      	cmp	r1, #0
    3502:	d023      	beq.n	354c <eink_it8951_set_pixel_raw+0x98>
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
        } else {
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_value >> 3) & 0x1));
    3504:	08ea      	lsrs	r2, r5, #3
    3506:	2601      	movs	r6, #1
    3508:	4032      	ands	r2, r6
    350a:	6938      	ldr	r0, [r7, #16]
    350c:	1900      	adds	r0, r0, r4
    350e:	2107      	movs	r1, #7
    3510:	4f21      	ldr	r7, [pc, #132]	; (3598 <eink_it8951_set_pixel_raw+0xe4>)
    3512:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_value >> 2) & 0x1));
    3514:	08aa      	lsrs	r2, r5, #2
    3516:	4032      	ands	r2, r6
    3518:	4b1d      	ldr	r3, [pc, #116]	; (3590 <eink_it8951_set_pixel_raw+0xdc>)
    351a:	4698      	mov	r8, r3
    351c:	681b      	ldr	r3, [r3, #0]
    351e:	6918      	ldr	r0, [r3, #16]
    3520:	1900      	adds	r0, r0, r4
    3522:	2106      	movs	r1, #6
    3524:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_value >> 1) & 0x1));
    3526:	086a      	lsrs	r2, r5, #1
    3528:	4032      	ands	r2, r6
    352a:	4643      	mov	r3, r8
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	6918      	ldr	r0, [r3, #16]
    3530:	1900      	adds	r0, r0, r4
    3532:	2105      	movs	r1, #5
    3534:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_value & 0x1));
    3536:	0032      	movs	r2, r6
    3538:	402a      	ands	r2, r5
    353a:	4643      	mov	r3, r8
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	6918      	ldr	r0, [r3, #16]
    3540:	1900      	adds	r0, r0, r4
    3542:	2104      	movs	r1, #4
    3544:	47b8      	blx	r7
        }
    }
}
    3546:	bc04      	pop	{r2}
    3548:	4690      	mov	r8, r2
    354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
    354c:	08ea      	lsrs	r2, r5, #3
    354e:	2601      	movs	r6, #1
    3550:	4032      	ands	r2, r6
    3552:	6938      	ldr	r0, [r7, #16]
    3554:	1900      	adds	r0, r0, r4
    3556:	3103      	adds	r1, #3
    3558:	4f0f      	ldr	r7, [pc, #60]	; (3598 <eink_it8951_set_pixel_raw+0xe4>)
    355a:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
    355c:	08aa      	lsrs	r2, r5, #2
    355e:	4032      	ands	r2, r6
    3560:	4b0b      	ldr	r3, [pc, #44]	; (3590 <eink_it8951_set_pixel_raw+0xdc>)
    3562:	4698      	mov	r8, r3
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	6918      	ldr	r0, [r3, #16]
    3568:	1900      	adds	r0, r0, r4
    356a:	2102      	movs	r1, #2
    356c:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
    356e:	086a      	lsrs	r2, r5, #1
    3570:	4032      	ands	r2, r6
    3572:	4643      	mov	r3, r8
    3574:	681b      	ldr	r3, [r3, #0]
    3576:	6918      	ldr	r0, [r3, #16]
    3578:	1900      	adds	r0, r0, r4
    357a:	2101      	movs	r1, #1
    357c:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
    357e:	0032      	movs	r2, r6
    3580:	402a      	ands	r2, r5
    3582:	4643      	mov	r3, r8
    3584:	681b      	ldr	r3, [r3, #0]
    3586:	6918      	ldr	r0, [r3, #16]
    3588:	1900      	adds	r0, r0, r4
    358a:	2100      	movs	r1, #0
    358c:	47b8      	blx	r7
    358e:	e7da      	b.n	3546 <eink_it8951_set_pixel_raw+0x92>
    3590:	20000434 	.word	0x20000434
    3594:	200003c0 	.word	0x200003c0
    3598:	00003499 	.word	0x00003499

0000359c <eink_it8951_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_it8951_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    359c:	b5f0      	push	{r4, r5, r6, r7, lr}
    359e:	46de      	mov	lr, fp
    35a0:	4657      	mov	r7, sl
    35a2:	464e      	mov	r6, r9
    35a4:	4645      	mov	r5, r8
    35a6:	b5e0      	push	{r5, r6, r7, lr}
    35a8:	b087      	sub	sp, #28
    35aa:	9000      	str	r0, [sp, #0]
    35ac:	0011      	movs	r1, r2
    35ae:	9201      	str	r2, [sp, #4]
    35b0:	4699      	mov	r9, r3
    35b2:	ab10      	add	r3, sp, #64	; 0x40
    35b4:	881b      	ldrh	r3, [r3, #0]
    35b6:	469a      	mov	sl, r3
    35b8:	ab11      	add	r3, sp, #68	; 0x44
    35ba:	881b      	ldrh	r3, [r3, #0]
    35bc:	469b      	mov	fp, r3
    volatile uint16_t buffer_index, i, j;
    volatile uint16_t k, l, m, bit_value_1, bit_value_2;
    eink_coordinate x_set, y_set;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    35be:	230e      	movs	r3, #14
    35c0:	aa02      	add	r2, sp, #8
    35c2:	4694      	mov	ip, r2
    35c4:	4463      	add	r3, ip
    35c6:	2200      	movs	r2, #0
    35c8:	801a      	strh	r2, [r3, #0]
    35ca:	881b      	ldrh	r3, [r3, #0]
    35cc:	b29b      	uxth	r3, r3
    35ce:	4299      	cmp	r1, r3
    35d0:	d966      	bls.n	36a0 <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    35d2:	260a      	movs	r6, #10
    35d4:	4466      	add	r6, ip
        for (j = 0; j < image_height_bytes; j++) {
            x_set = x_place+i;
            y_set = y_place+m;
            
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    35d6:	4f36      	ldr	r7, [pc, #216]	; (36b0 <eink_it8951_graphics_load_4bgrey_image+0x114>)
    35d8:	464d      	mov	r5, r9
    35da:	46d1      	mov	r9, sl
    35dc:	e054      	b.n	3688 <eink_it8951_graphics_load_4bgrey_image+0xec>
                /* Set the pixel in the display buffer */
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
            }

        m += 2;
    35de:	8833      	ldrh	r3, [r6, #0]
    35e0:	3302      	adds	r3, #2
    35e2:	b29b      	uxth	r3, r3
    35e4:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    35e6:	8823      	ldrh	r3, [r4, #0]
    35e8:	3301      	adds	r3, #1
    35ea:	b29b      	uxth	r3, r3
    35ec:	8023      	strh	r3, [r4, #0]
    35ee:	8823      	ldrh	r3, [r4, #0]
    35f0:	b29b      	uxth	r3, r3
    35f2:	42ab      	cmp	r3, r5
    35f4:	d23a      	bcs.n	366c <eink_it8951_graphics_load_4bgrey_image+0xd0>
            x_set = x_place+i;
    35f6:	230e      	movs	r3, #14
    35f8:	aa02      	add	r2, sp, #8
    35fa:	4694      	mov	ip, r2
    35fc:	4463      	add	r3, ip
    35fe:	881b      	ldrh	r3, [r3, #0]
    3600:	444b      	add	r3, r9
    3602:	b29b      	uxth	r3, r3
    3604:	4698      	mov	r8, r3
            y_set = y_place+m;
    3606:	8833      	ldrh	r3, [r6, #0]
    3608:	b29b      	uxth	r3, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    360a:	683a      	ldr	r2, [r7, #0]
    360c:	8851      	ldrh	r1, [r2, #2]
    360e:	4541      	cmp	r1, r8
    3610:	d9e5      	bls.n	35de <eink_it8951_graphics_load_4bgrey_image+0x42>
            y_set = y_place+m;
    3612:	4453      	add	r3, sl
    3614:	b29b      	uxth	r3, r3
    3616:	469b      	mov	fp, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3618:	8893      	ldrh	r3, [r2, #4]
    361a:	455b      	cmp	r3, fp
    361c:	d9df      	bls.n	35de <eink_it8951_graphics_load_4bgrey_image+0x42>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    361e:	210e      	movs	r1, #14
    3620:	4461      	add	r1, ip
    3622:	880b      	ldrh	r3, [r1, #0]
    3624:	8822      	ldrh	r2, [r4, #0]
    3626:	436b      	muls	r3, r5
    3628:	9800      	ldr	r0, [sp, #0]
    362a:	4684      	mov	ip, r0
    362c:	4462      	add	r2, ip
    362e:	5cd2      	ldrb	r2, [r2, r3]
    3630:	230f      	movs	r3, #15
    3632:	4013      	ands	r3, r2
    3634:	aa04      	add	r2, sp, #16
    3636:	8013      	strh	r3, [r2, #0]
                bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    3638:	880b      	ldrh	r3, [r1, #0]
    363a:	8821      	ldrh	r1, [r4, #0]
    363c:	436b      	muls	r3, r5
    363e:	4461      	add	r1, ip
    3640:	5ccb      	ldrb	r3, [r1, r3]
    3642:	091b      	lsrs	r3, r3, #4
    3644:	a902      	add	r1, sp, #8
    3646:	80cb      	strh	r3, [r1, #6]
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
    3648:	8812      	ldrh	r2, [r2, #0]
    364a:	43d2      	mvns	r2, r2
    364c:	b2d2      	uxtb	r2, r2
    364e:	465b      	mov	r3, fp
    3650:	1c59      	adds	r1, r3, #1
    3652:	b289      	uxth	r1, r1
    3654:	4640      	mov	r0, r8
    3656:	4b17      	ldr	r3, [pc, #92]	; (36b4 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    3658:	4798      	blx	r3
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
    365a:	ab02      	add	r3, sp, #8
    365c:	88da      	ldrh	r2, [r3, #6]
    365e:	43d2      	mvns	r2, r2
    3660:	b2d2      	uxtb	r2, r2
    3662:	4659      	mov	r1, fp
    3664:	4640      	mov	r0, r8
    3666:	4b13      	ldr	r3, [pc, #76]	; (36b4 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    3668:	4798      	blx	r3
    366a:	e7b8      	b.n	35de <eink_it8951_graphics_load_4bgrey_image+0x42>
    366c:	46d3      	mov	fp, sl
    for (i = 0; i < image_width_px; i++) {
    366e:	220e      	movs	r2, #14
    3670:	ab02      	add	r3, sp, #8
    3672:	469c      	mov	ip, r3
    3674:	4462      	add	r2, ip
    3676:	8813      	ldrh	r3, [r2, #0]
    3678:	3301      	adds	r3, #1
    367a:	b29b      	uxth	r3, r3
    367c:	8013      	strh	r3, [r2, #0]
    367e:	8813      	ldrh	r3, [r2, #0]
    3680:	b29b      	uxth	r3, r3
    3682:	9a01      	ldr	r2, [sp, #4]
    3684:	4293      	cmp	r3, r2
    3686:	d20b      	bcs.n	36a0 <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    3688:	2300      	movs	r3, #0
    368a:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    368c:	ab05      	add	r3, sp, #20
    368e:	2200      	movs	r2, #0
    3690:	801a      	strh	r2, [r3, #0]
    3692:	881b      	ldrh	r3, [r3, #0]
    3694:	b29b      	uxth	r3, r3
    3696:	429d      	cmp	r5, r3
    3698:	d9e9      	bls.n	366e <eink_it8951_graphics_load_4bgrey_image+0xd2>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    369a:	ac05      	add	r4, sp, #20
    369c:	46da      	mov	sl, fp
    369e:	e7aa      	b.n	35f6 <eink_it8951_graphics_load_4bgrey_image+0x5a>
        }
    }
    36a0:	b007      	add	sp, #28
    36a2:	bc3c      	pop	{r2, r3, r4, r5}
    36a4:	4690      	mov	r8, r2
    36a6:	4699      	mov	r9, r3
    36a8:	46a2      	mov	sl, r4
    36aa:	46ab      	mov	fp, r5
    36ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	20000434 	.word	0x20000434
    36b4:	000034b5 	.word	0x000034b5

000036b8 <uc8173_init>:
 *
 * Call this function to initialize the hardware interface and the UC8173 display
 * driver. When initialization is done the display is ready to receive data.
 */
void uc8173_init(void)
{
    36b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ba:	b083      	sub	sp, #12
    /* Initialize delay routine */
    delay_init(SysTick);
    36bc:	4812      	ldr	r0, [pc, #72]	; (3708 <uc8173_init+0x50>)
    36be:	4b13      	ldr	r3, [pc, #76]	; (370c <uc8173_init+0x54>)
    36c0:	4798      	blx	r3

    /* Initialize the interface */
    eink_interface_init(0);
    36c2:	2000      	movs	r0, #0
    36c4:	4b12      	ldr	r3, [pc, #72]	; (3710 <uc8173_init+0x58>)
    36c6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36c8:	25c0      	movs	r5, #192	; 0xc0
    36ca:	05ed      	lsls	r5, r5, #23
    36cc:	2640      	movs	r6, #64	; 0x40
    36ce:	616e      	str	r6, [r5, #20]
    delay_ms(1);
    36d0:	2001      	movs	r0, #1
    36d2:	4c10      	ldr	r4, [pc, #64]	; (3714 <uc8173_init+0x5c>)
    36d4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36d6:	61ae      	str	r6, [r5, #24]
    delay_ms(1);
    36d8:	2001      	movs	r0, #1
    36da:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    36dc:	4f0e      	ldr	r7, [pc, #56]	; (3718 <uc8173_init+0x60>)
	CRITICAL_SECTION_LEAVE();
    36de:	4e0f      	ldr	r6, [pc, #60]	; (371c <uc8173_init+0x64>)
	CRITICAL_SECTION_ENTER();
    36e0:	a801      	add	r0, sp, #4
    36e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    36e4:	23c0      	movs	r3, #192	; 0xc0
    36e6:	05db      	lsls	r3, r3, #23
    36e8:	2580      	movs	r5, #128	; 0x80
    36ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    36ec:	22a0      	movs	r2, #160	; 0xa0
    36ee:	490c      	ldr	r1, [pc, #48]	; (3720 <uc8173_init+0x68>)
    36f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    36f2:	2190      	movs	r1, #144	; 0x90
    36f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    36f6:	4053      	eors	r3, r2
    36f8:	401c      	ands	r4, r3
    36fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    36fc:	a801      	add	r0, sp, #4
    36fe:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    3700:	4225      	tst	r5, r4
    3702:	d0ed      	beq.n	36e0 <uc8173_init+0x28>
    /* Reset display */
    uc8173_hard_reset();
    
    /* Wait for BUSY output to return HIGH */
    uc8173_wait_for_busy_low();
}
    3704:	b003      	add	sp, #12
    3706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3708:	e000e010 	.word	0xe000e010
    370c:	00000369 	.word	0x00000369
    3710:	00000dcd 	.word	0x00000dcd
    3714:	0000037d 	.word	0x0000037d
    3718:	0000034d 	.word	0x0000034d
    371c:	0000035b 	.word	0x0000035b
    3720:	41004400 	.word	0x41004400

00003724 <uc8173_set_config>:
 *
 * \param *config The configuration to write to the display driver.
 */
void uc8173_set_config(
        struct uc8173_config *const config)
{
    3724:	b5f0      	push	{r4, r5, r6, r7, lr}
    3726:	46c6      	mov	lr, r8
    3728:	b500      	push	{lr}
    372a:	b084      	sub	sp, #16
    372c:	4680      	mov	r8, r0
    uint8_t eink_data[5];
    
    uc8173_global_instance.display_config = *config;
    372e:	2204      	movs	r2, #4
    3730:	0001      	movs	r1, r0
    3732:	4886      	ldr	r0, [pc, #536]	; (394c <uc8173_set_config+0x228>)
    3734:	4b86      	ldr	r3, [pc, #536]	; (3950 <uc8173_set_config+0x22c>)
    3736:	4798      	blx	r3
    
    if(config->uc8173_display == UC8173_ET011TT2) {
    3738:	4643      	mov	r3, r8
    373a:	789b      	ldrb	r3, [r3, #2]
    373c:	2b01      	cmp	r3, #1
    373e:	d00f      	beq.n	3760 <uc8173_set_config+0x3c>
    	uc8173_global_instance.display_width   = 240;
		uc8173_global_instance.display_height  = 240;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    3740:	2b00      	cmp	r3, #0
    3742:	d11e      	bne.n	3782 <uc8173_set_config+0x5e>
		if((config->display_rotation == ROTATE_90) || (config->display_rotation == ROTATE_270)) {
    3744:	4643      	mov	r3, r8
    3746:	781b      	ldrb	r3, [r3, #0]
    3748:	2202      	movs	r2, #2
    374a:	4393      	bics	r3, r2
    374c:	2b01      	cmp	r3, #1
    374e:	d100      	bne.n	3752 <uc8173_set_config+0x2e>
    3750:	e0c8      	b.n	38e4 <uc8173_set_config+0x1c0>
			uc8173_global_instance.display_width   = 128;
			uc8173_global_instance.display_height  = 256;
		} else {
			uc8173_global_instance.display_width   = 256;
    3752:	4b7e      	ldr	r3, [pc, #504]	; (394c <uc8173_set_config+0x228>)
    3754:	2280      	movs	r2, #128	; 0x80
    3756:	0052      	lsls	r2, r2, #1
    3758:	809a      	strh	r2, [r3, #4]
			uc8173_global_instance.display_height  = 128;
    375a:	3a80      	subs	r2, #128	; 0x80
    375c:	80da      	strh	r2, [r3, #6]
    375e:	e003      	b.n	3768 <uc8173_set_config+0x44>
    	uc8173_global_instance.display_width   = 240;
    3760:	4b7a      	ldr	r3, [pc, #488]	; (394c <uc8173_set_config+0x228>)
    3762:	22f0      	movs	r2, #240	; 0xf0
    3764:	809a      	strh	r2, [r3, #4]
		uc8173_global_instance.display_height  = 240;
    3766:	80da      	strh	r2, [r3, #6]
		}
	}
	
    /* Booster Soft Start Control */
    if(config->uc8173_display == UC8173_ET011TT2) {
    3768:	4643      	mov	r3, r8
    376a:	789b      	ldrb	r3, [r3, #2]
    376c:	2b01      	cmp	r3, #1
    376e:	d100      	bne.n	3772 <uc8173_set_config+0x4e>
    3770:	e0be      	b.n	38f0 <uc8173_set_config+0x1cc>
    	eink_data[0] = 0x17;
		eink_data[1] = 0x97;
		eink_data[2] = 0x20;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    3772:	2b00      	cmp	r3, #0
    3774:	d105      	bne.n	3782 <uc8173_set_config+0x5e>
	    eink_data[0] = 0x17;
    3776:	ab02      	add	r3, sp, #8
    3778:	2217      	movs	r2, #23
    377a:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x17;
    377c:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x26;
    377e:	320f      	adds	r2, #15
    3780:	709a      	strb	r2, [r3, #2]
	}
	eink_write_data(UC8173_BTST, eink_data, 3);
    3782:	ac02      	add	r4, sp, #8
    3784:	2203      	movs	r2, #3
    3786:	0021      	movs	r1, r4
    3788:	2006      	movs	r0, #6
    378a:	4d72      	ldr	r5, [pc, #456]	; (3954 <uc8173_set_config+0x230>)
    378c:	47a8      	blx	r5
	
    /* Power Settings */
	eink_data[0] = 0x03;
    378e:	2303      	movs	r3, #3
    3790:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
    3792:	2300      	movs	r3, #0
    3794:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x2B;
    3796:	332b      	adds	r3, #43	; 0x2b
    3798:	70a3      	strb	r3, [r4, #2]
	eink_data[3] = 0x2B;
    379a:	70e3      	strb	r3, [r4, #3]
	eink_data[4] = 0x08;
    379c:	3b23      	subs	r3, #35	; 0x23
    379e:	7123      	strb	r3, [r4, #4]
	eink_write_data(UC8173_PWR, eink_data, 5);
    37a0:	2205      	movs	r2, #5
    37a2:	0021      	movs	r1, r4
    37a4:	2001      	movs	r0, #1
    37a6:	47a8      	blx	r5
	
	eink_write_data(UC8173_PON, 0, 0);
    37a8:	2200      	movs	r2, #0
    37aa:	2100      	movs	r1, #0
    37ac:	2004      	movs	r0, #4
    37ae:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    37b0:	4f69      	ldr	r7, [pc, #420]	; (3958 <uc8173_set_config+0x234>)
	CRITICAL_SECTION_LEAVE();
    37b2:	4e6a      	ldr	r6, [pc, #424]	; (395c <uc8173_set_config+0x238>)
	CRITICAL_SECTION_ENTER();
    37b4:	a801      	add	r0, sp, #4
    37b6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    37b8:	23c0      	movs	r3, #192	; 0xc0
    37ba:	05db      	lsls	r3, r3, #23
    37bc:	2580      	movs	r5, #128	; 0x80
    37be:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    37c0:	22a0      	movs	r2, #160	; 0xa0
    37c2:	4967      	ldr	r1, [pc, #412]	; (3960 <uc8173_set_config+0x23c>)
    37c4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    37c6:	2190      	movs	r1, #144	; 0x90
    37c8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    37ca:	4053      	eors	r3, r2
    37cc:	401c      	ands	r4, r3
    37ce:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    37d0:	a801      	add	r0, sp, #4
    37d2:	47b0      	blx	r6
    37d4:	4225      	tst	r5, r4
    37d6:	d0ed      	beq.n	37b4 <uc8173_set_config+0x90>
	uc8173_wait_for_busy_low();
	
    /* Panel Settings */
    if(config->uc8173_display == UC8173_ET011TT2) {
    37d8:	4643      	mov	r3, r8
    37da:	789b      	ldrb	r3, [r3, #2]
    37dc:	2b01      	cmp	r3, #1
    37de:	d100      	bne.n	37e2 <uc8173_set_config+0xbe>
    37e0:	e08e      	b.n	3900 <uc8173_set_config+0x1dc>
    		eink_data[0] = 0xF; //0xF
		} else {
			eink_data[0] = 0x0B;
		}
		eink_data[1] = 0x86;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    37e2:	2b00      	cmp	r3, #0
    37e4:	d104      	bne.n	37f0 <uc8173_set_config+0xcc>
		eink_data[0] = 0x03;
    37e6:	ab02      	add	r3, sp, #8
    37e8:	2203      	movs	r2, #3
    37ea:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    37ec:	3283      	adds	r2, #131	; 0x83
    37ee:	705a      	strb	r2, [r3, #1]
	}
	eink_write_data(UC8173_PSR, eink_data, 2);
    37f0:	ac02      	add	r4, sp, #8
    37f2:	2202      	movs	r2, #2
    37f4:	0021      	movs	r1, r4
    37f6:	2000      	movs	r0, #0
    37f8:	4d56      	ldr	r5, [pc, #344]	; (3954 <uc8173_set_config+0x230>)
    37fa:	47a8      	blx	r5

    /* Power OFF Sequence Settings */
	eink_data[0] = 0x00;
    37fc:	2300      	movs	r3, #0
    37fe:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_PFS, eink_data, 1);
    3800:	2201      	movs	r2, #1
    3802:	0021      	movs	r1, r4
    3804:	2003      	movs	r0, #3
    3806:	47a8      	blx	r5
	
    /* PLL Control */
	if(config->uc8173_display == UC8173_ET011TT2) {
    3808:	4643      	mov	r3, r8
    380a:	789b      	ldrb	r3, [r3, #2]
    380c:	2b01      	cmp	r3, #1
    380e:	d100      	bne.n	3812 <uc8173_set_config+0xee>
    3810:	e086      	b.n	3920 <uc8173_set_config+0x1fc>
		eink_data[0] = 0x25;
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    3812:	2b00      	cmp	r3, #0
    3814:	d102      	bne.n	381c <uc8173_set_config+0xf8>
		eink_data[0] = 0x48;
    3816:	2248      	movs	r2, #72	; 0x48
    3818:	ab02      	add	r3, sp, #8
    381a:	701a      	strb	r2, [r3, #0]
	}
	eink_write_data(UC8173_LPRD, eink_data, 1);
    381c:	ac02      	add	r4, sp, #8
    381e:	2201      	movs	r2, #1
    3820:	0021      	movs	r1, r4
    3822:	2030      	movs	r0, #48	; 0x30
    3824:	4d4b      	ldr	r5, [pc, #300]	; (3954 <uc8173_set_config+0x230>)
    3826:	47a8      	blx	r5

    /* Temperature Sensor Enable */
	eink_data[0] = 0x00; /* Internal Sensor Enabled */
    3828:	2300      	movs	r3, #0
    382a:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_TSE, eink_data, 1);
    382c:	2201      	movs	r2, #1
    382e:	0021      	movs	r1, r4
    3830:	2041      	movs	r0, #65	; 0x41
    3832:	47a8      	blx	r5

    /* VCOM & DI Settings */
	eink_data[0] = 0xE1;
    3834:	23e1      	movs	r3, #225	; 0xe1
    3836:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x20;
    3838:	3bc1      	subs	r3, #193	; 0xc1
    383a:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x10;
    383c:	3b10      	subs	r3, #16
    383e:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_CDI, eink_data, 3);
    3840:	2203      	movs	r2, #3
    3842:	0021      	movs	r1, r4
    3844:	2050      	movs	r0, #80	; 0x50
    3846:	47a8      	blx	r5

    /* Resolution Settings */
    if(config->uc8173_display == UC8173_ET011TT2) {
    3848:	4643      	mov	r3, r8
    384a:	789b      	ldrb	r3, [r3, #2]
    384c:	2b01      	cmp	r3, #1
    384e:	d06b      	beq.n	3928 <uc8173_set_config+0x204>
		eink_data[0] = 0xEF; /* H = 239 */
		eink_data[1] = 0x00;
		eink_data[2] = 0xEF; /* W = 239 */
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    3850:	2b00      	cmp	r3, #0
    3852:	d106      	bne.n	3862 <uc8173_set_config+0x13e>
		eink_data[0] = 0x7F; /* H = 127 */
    3854:	ab02      	add	r3, sp, #8
    3856:	227f      	movs	r2, #127	; 0x7f
    3858:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x00;
    385a:	2200      	movs	r2, #0
    385c:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0xFF; /* W = 255 */
    385e:	32ff      	adds	r2, #255	; 0xff
    3860:	709a      	strb	r2, [r3, #2]
	}
	eink_write_data(UC8173_TRES, eink_data, 3);
    3862:	2203      	movs	r2, #3
    3864:	a902      	add	r1, sp, #8
    3866:	2061      	movs	r0, #97	; 0x61
    3868:	4b3a      	ldr	r3, [pc, #232]	; (3954 <uc8173_set_config+0x230>)
    386a:	4798      	blx	r3
	
	/* Gate Group Setting */
	if(config->uc8173_display == UC8173_ET011TT2) {
    386c:	4643      	mov	r3, r8
    386e:	789b      	ldrb	r3, [r3, #2]
    3870:	2b01      	cmp	r3, #1
    3872:	d060      	beq.n	3936 <uc8173_set_config+0x212>
		eink_data[0] = 0xA9;
		eink_data[1] = 0xA9;
		eink_data[2] = 0xEB;
		eink_data[3] = 0xEB;
		eink_data[4] = 0x02;
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    3874:	2b00      	cmp	r3, #0
    3876:	d109      	bne.n	388c <uc8173_set_config+0x168>
		eink_data[0] = 0xCF;
    3878:	ab02      	add	r3, sp, #8
    387a:	22cf      	movs	r2, #207	; 0xcf
    387c:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0xAF;
    387e:	3a20      	subs	r2, #32
    3880:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x00;
    3882:	2200      	movs	r2, #0
    3884:	709a      	strb	r2, [r3, #2]
		eink_data[3] = 0x00;
    3886:	70da      	strb	r2, [r3, #3]
		eink_data[4] = 0x03;
    3888:	3203      	adds	r2, #3
    388a:	711a      	strb	r2, [r3, #4]
	}
	eink_write_data(UC8173_GDS, eink_data, 5);
    388c:	ac02      	add	r4, sp, #8
    388e:	2205      	movs	r2, #5
    3890:	0021      	movs	r1, r4
    3892:	2062      	movs	r0, #98	; 0x62
    3894:	4d2f      	ldr	r5, [pc, #188]	; (3954 <uc8173_set_config+0x230>)
    3896:	47a8      	blx	r5
  
	//uc8173_measure_vcom();
	/* Set's VCOM value automatically for demo purposes, but should be read from display */
	eink_data[0] = 0x26;
    3898:	2326      	movs	r3, #38	; 0x26
    389a:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_VDCS, eink_data, 1);
    389c:	2201      	movs	r2, #1
    389e:	0021      	movs	r1, r4
    38a0:	2082      	movs	r0, #130	; 0x82
    38a2:	47a8      	blx	r5
	eink_write_data(UC8173_VBDS, eink_data, 1);
    38a4:	2201      	movs	r2, #1
    38a6:	0021      	movs	r1, r4
    38a8:	2084      	movs	r0, #132	; 0x84
    38aa:	47a8      	blx	r5

	eink_data[0] = 0x02;
    38ac:	2602      	movs	r6, #2
    38ae:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_LVSEL, eink_data, 1);
    38b0:	2201      	movs	r2, #1
    38b2:	0021      	movs	r1, r4
    38b4:	20e4      	movs	r0, #228	; 0xe4
    38b6:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
    38b8:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    38ba:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GBS, eink_data, 2);
    38bc:	2202      	movs	r2, #2
    38be:	0021      	movs	r1, r4
    38c0:	2063      	movs	r0, #99	; 0x63
    38c2:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
    38c4:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    38c6:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GSS, eink_data, 2);
    38c8:	2202      	movs	r2, #2
    38ca:	0021      	movs	r1, r4
    38cc:	2064      	movs	r0, #100	; 0x64
    38ce:	47a8      	blx	r5
	
	eink_data[0] = 0x1F;
    38d0:	231f      	movs	r3, #31
    38d2:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_DF, eink_data, 1);
    38d4:	2201      	movs	r2, #1
    38d6:	0021      	movs	r1, r4
    38d8:	20df      	movs	r0, #223	; 0xdf
    38da:	47a8      	blx	r5
	
	//eink_write_data(UC8173_POF, 0, 0);
	//uc8173_wait_for_busy_high();
}
    38dc:	b004      	add	sp, #16
    38de:	bc04      	pop	{r2}
    38e0:	4690      	mov	r8, r2
    38e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uc8173_global_instance.display_width   = 128;
    38e4:	4b19      	ldr	r3, [pc, #100]	; (394c <uc8173_set_config+0x228>)
    38e6:	327e      	adds	r2, #126	; 0x7e
    38e8:	809a      	strh	r2, [r3, #4]
			uc8173_global_instance.display_height  = 256;
    38ea:	3280      	adds	r2, #128	; 0x80
    38ec:	80da      	strh	r2, [r3, #6]
    38ee:	e73b      	b.n	3768 <uc8173_set_config+0x44>
    	eink_data[0] = 0x17;
    38f0:	ab02      	add	r3, sp, #8
    38f2:	2217      	movs	r2, #23
    38f4:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x97;
    38f6:	3280      	adds	r2, #128	; 0x80
    38f8:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x20;
    38fa:	3a77      	subs	r2, #119	; 0x77
    38fc:	709a      	strb	r2, [r3, #2]
    38fe:	e740      	b.n	3782 <uc8173_set_config+0x5e>
		if((config->display_rotation == ROTATE_180) || (config->display_rotation == ROTATE_270)) {
    3900:	4643      	mov	r3, r8
    3902:	781b      	ldrb	r3, [r3, #0]
    3904:	3b02      	subs	r3, #2
    3906:	2b01      	cmp	r3, #1
    3908:	d906      	bls.n	3918 <uc8173_set_config+0x1f4>
			eink_data[0] = 0x0B;
    390a:	220b      	movs	r2, #11
    390c:	ab02      	add	r3, sp, #8
    390e:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    3910:	2286      	movs	r2, #134	; 0x86
    3912:	ab02      	add	r3, sp, #8
    3914:	705a      	strb	r2, [r3, #1]
    3916:	e76b      	b.n	37f0 <uc8173_set_config+0xcc>
    		eink_data[0] = 0xF; //0xF
    3918:	220f      	movs	r2, #15
    391a:	ab02      	add	r3, sp, #8
    391c:	701a      	strb	r2, [r3, #0]
    391e:	e7f7      	b.n	3910 <uc8173_set_config+0x1ec>
		eink_data[0] = 0x25;
    3920:	2225      	movs	r2, #37	; 0x25
    3922:	ab02      	add	r3, sp, #8
    3924:	701a      	strb	r2, [r3, #0]
    3926:	e779      	b.n	381c <uc8173_set_config+0xf8>
		eink_data[0] = 0xEF; /* H = 239 */
    3928:	ab02      	add	r3, sp, #8
    392a:	22ef      	movs	r2, #239	; 0xef
    392c:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x00;
    392e:	2100      	movs	r1, #0
    3930:	7059      	strb	r1, [r3, #1]
		eink_data[2] = 0xEF; /* W = 239 */
    3932:	709a      	strb	r2, [r3, #2]
    3934:	e795      	b.n	3862 <uc8173_set_config+0x13e>
		eink_data[0] = 0xA9;
    3936:	ab02      	add	r3, sp, #8
    3938:	22a9      	movs	r2, #169	; 0xa9
    393a:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0xA9;
    393c:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0xEB;
    393e:	3242      	adds	r2, #66	; 0x42
    3940:	709a      	strb	r2, [r3, #2]
		eink_data[3] = 0xEB;
    3942:	70da      	strb	r2, [r3, #3]
		eink_data[4] = 0x02;
    3944:	3ae9      	subs	r2, #233	; 0xe9
    3946:	711a      	strb	r2, [r3, #4]
    3948:	e7a0      	b.n	388c <uc8173_set_config+0x168>
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	20000390 	.word	0x20000390
    3950:	00004a41 	.word	0x00004a41
    3954:	00001e29 	.word	0x00001e29
    3958:	0000034d 	.word	0x0000034d
    395c:	0000035b 	.word	0x0000035b
    3960:	41004400 	.word	0x41004400

00003964 <eink_et011tt2_init>:
{    
    3964:	b5f0      	push	{r4, r5, r6, r7, lr}
    3966:	46c6      	mov	lr, r8
    3968:	b500      	push	{lr}
    396a:	b082      	sub	sp, #8
    396c:	0006      	movs	r6, r0
    396e:	4688      	mov	r8, r1
    et011tt2_dtm2_display_buffer = (uint8_t*) malloc (malloc_size);
    3970:	20e1      	movs	r0, #225	; 0xe1
    3972:	0180      	lsls	r0, r0, #6
    3974:	4b26      	ldr	r3, [pc, #152]	; (3a10 <eink_et011tt2_init+0xac>)
    3976:	4798      	blx	r3
    3978:	4b26      	ldr	r3, [pc, #152]	; (3a14 <eink_et011tt2_init+0xb0>)
    397a:	6018      	str	r0, [r3, #0]
    eink_gfx_et011tt2_config.display_buffer_1_ptr = et011tt2_dtm2_display_buffer;
    397c:	4c26      	ldr	r4, [pc, #152]	; (3a18 <eink_et011tt2_init+0xb4>)
    397e:	6120      	str	r0, [r4, #16]
    uc8173_init();
    3980:	4b26      	ldr	r3, [pc, #152]	; (3a1c <eink_et011tt2_init+0xb8>)
    3982:	4798      	blx	r3
    config->uc8173_display = UC8173_ET011TT2;
    3984:	2301      	movs	r3, #1
    3986:	70b3      	strb	r3, [r6, #2]
    uc8173_set_config(config);
    3988:	0030      	movs	r0, r6
    398a:	4b25      	ldr	r3, [pc, #148]	; (3a20 <eink_et011tt2_init+0xbc>)
    398c:	4798      	blx	r3
    eink_gfx_et011tt2_config.display_rotation = config->display_rotation;
    398e:	7833      	ldrb	r3, [r6, #0]
    3990:	7323      	strb	r3, [r4, #12]
    ptr_eink_gfx_config = (struct eink_gfx_config*) &eink_gfx_et011tt2_config;
    3992:	4b24      	ldr	r3, [pc, #144]	; (3a24 <eink_et011tt2_init+0xc0>)
    3994:	601c      	str	r4, [r3, #0]
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    3996:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    3998:	4c22      	ldr	r4, [pc, #136]	; (3a24 <eink_et011tt2_init+0xc0>)
    399a:	20ff      	movs	r0, #255	; 0xff
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    399c:	21e1      	movs	r1, #225	; 0xe1
    399e:	0189      	lsls	r1, r1, #6
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    39a0:	6822      	ldr	r2, [r4, #0]
    39a2:	6912      	ldr	r2, [r2, #16]
    39a4:	54d0      	strb	r0, [r2, r3]
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    39a6:	3301      	adds	r3, #1
    39a8:	428b      	cmp	r3, r1
    39aa:	d1f9      	bne.n	39a0 <eink_et011tt2_init+0x3c>
    eink_data[0] = 0x00;
    39ac:	2400      	movs	r4, #0
    39ae:	466b      	mov	r3, sp
    39b0:	701c      	strb	r4, [r3, #0]
    eink_data[1] = 0x00;
    39b2:	705c      	strb	r4, [r3, #1]
    eink_data[2] = 0x00;
    39b4:	709c      	strb	r4, [r3, #2]
    eink_data[3] = 0xEF;
    39b6:	25ef      	movs	r5, #239	; 0xef
    39b8:	70dd      	strb	r5, [r3, #3]
    eink_data[4] = 0x00;
    39ba:	711c      	strb	r4, [r3, #4]
    eink_data[5] = 0xEF;
    39bc:	715d      	strb	r5, [r3, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    39be:	2206      	movs	r2, #6
    39c0:	4669      	mov	r1, sp
    39c2:	2014      	movs	r0, #20
    39c4:	4e18      	ldr	r6, [pc, #96]	; (3a28 <eink_et011tt2_init+0xc4>)
    39c6:	47b0      	blx	r6
	eink_write_data(UC8173_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    39c8:	4f16      	ldr	r7, [pc, #88]	; (3a24 <eink_et011tt2_init+0xc0>)
    39ca:	683b      	ldr	r3, [r7, #0]
    39cc:	6919      	ldr	r1, [r3, #16]
    39ce:	22e1      	movs	r2, #225	; 0xe1
    39d0:	0192      	lsls	r2, r2, #6
    39d2:	2010      	movs	r0, #16
    39d4:	47b0      	blx	r6
	eink_data[0] = 0x00;
    39d6:	466b      	mov	r3, sp
    39d8:	701c      	strb	r4, [r3, #0]
	eink_data[1] = 0x00;
    39da:	705c      	strb	r4, [r3, #1]
	eink_data[2] = 0x00;
    39dc:	709c      	strb	r4, [r3, #2]
	eink_data[3] = 0xEF;
    39de:	70dd      	strb	r5, [r3, #3]
	eink_data[4] = 0x00;
    39e0:	711c      	strb	r4, [r3, #4]
	eink_data[5] = 0xEF;
    39e2:	715d      	strb	r5, [r3, #5]
	eink_write_data(UC8173_DTMW, eink_data, 6);
    39e4:	2206      	movs	r2, #6
    39e6:	4669      	mov	r1, sp
    39e8:	2014      	movs	r0, #20
    39ea:	47b0      	blx	r6
	eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    39ec:	683b      	ldr	r3, [r7, #0]
    39ee:	6919      	ldr	r1, [r3, #16]
    39f0:	22e1      	movs	r2, #225	; 0xe1
    39f2:	0192      	lsls	r2, r2, #6
    39f4:	2013      	movs	r0, #19
    39f6:	47b0      	blx	r6
    if(clear_display) eink_et011tt2_put_display_buffer(true);
    39f8:	4643      	mov	r3, r8
    39fa:	2b00      	cmp	r3, #0
    39fc:	d103      	bne.n	3a06 <eink_et011tt2_init+0xa2>
}
    39fe:	b002      	add	sp, #8
    3a00:	bc04      	pop	{r2}
    3a02:	4690      	mov	r8, r2
    3a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(clear_display) eink_et011tt2_put_display_buffer(true);
    3a06:	2001      	movs	r0, #1
    3a08:	4b08      	ldr	r3, [pc, #32]	; (3a2c <eink_et011tt2_init+0xc8>)
    3a0a:	4798      	blx	r3
}
    3a0c:	e7f7      	b.n	39fe <eink_et011tt2_init+0x9a>
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	00004a2d 	.word	0x00004a2d
    3a14:	20000388 	.word	0x20000388
    3a18:	20000000 	.word	0x20000000
    3a1c:	000036b9 	.word	0x000036b9
    3a20:	00003725 	.word	0x00003725
    3a24:	20000434 	.word	0x20000434
    3a28:	00001e29 	.word	0x00001e29
    3a2c:	00002c29 	.word	0x00002c29

00003a30 <uc8151_set_psr_config>:
 *
 * \param *psr_config The PSR structure to write to the PSR register.
 */
void uc8151_set_psr_config(
        const struct uc8151_panel_settings *psr_config)
{    
    3a30:	b510      	push	{r4, lr}
    3a32:	b082      	sub	sp, #8
    3a34:	0004      	movs	r4, r0
    /* Copy configuration into UC8151 instance */
    uc8151_global_instance.panel_settings = *psr_config;
    3a36:	2205      	movs	r2, #5
    3a38:	0001      	movs	r1, r0
    3a3a:	4859      	ldr	r0, [pc, #356]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3a3c:	4b59      	ldr	r3, [pc, #356]	; (3ba4 <uc8151_set_psr_config+0x174>)
    3a3e:	4798      	blx	r3
    
    /* Save display resolution into UC8151 instance */
    switch (psr_config->display_resolution) {
    3a40:	7823      	ldrb	r3, [r4, #0]
    3a42:	2b01      	cmp	r3, #1
    3a44:	d066      	beq.n	3b14 <uc8151_set_psr_config+0xe4>
    3a46:	2b00      	cmp	r3, #0
    3a48:	d053      	beq.n	3af2 <uc8151_set_psr_config+0xc2>
    3a4a:	2b02      	cmp	r3, #2
    3a4c:	d100      	bne.n	3a50 <uc8151_set_psr_config+0x20>
    3a4e:	e072      	b.n	3b36 <uc8151_set_psr_config+0x106>
    3a50:	2b03      	cmp	r3, #3
    3a52:	d100      	bne.n	3a56 <uc8151_set_psr_config+0x26>
    3a54:	e081      	b.n	3b5a <uc8151_set_psr_config+0x12a>
    }
    
    uint8_t eink_data[5];

    /* Translate the panel settings structure to the required bytes to be sent to the display */
    switch (psr_config->display_resolution) {
    3a56:	7823      	ldrb	r3, [r4, #0]
    3a58:	2b01      	cmp	r3, #1
    3a5a:	d100      	bne.n	3a5e <uc8151_set_psr_config+0x2e>
    3a5c:	e093      	b.n	3b86 <uc8151_set_psr_config+0x156>
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d100      	bne.n	3a64 <uc8151_set_psr_config+0x34>
    3a62:	e08c      	b.n	3b7e <uc8151_set_psr_config+0x14e>
    3a64:	2b02      	cmp	r3, #2
    3a66:	d100      	bne.n	3a6a <uc8151_set_psr_config+0x3a>
    3a68:	e091      	b.n	3b8e <uc8151_set_psr_config+0x15e>
    3a6a:	2b03      	cmp	r3, #3
    3a6c:	d100      	bne.n	3a70 <uc8151_set_psr_config+0x40>
    3a6e:	e092      	b.n	3b96 <uc8151_set_psr_config+0x166>
        case RES_96x230:                eink_data[0] = 0x00; break;
        case RES_96x252:                eink_data[0] = 0x01; break;
        case RES_128x296:               eink_data[0] = 0x02; break;
        case RES_160x296:               eink_data[0] = 0x03; break;
    }
    eink_data[0] = eink_data[0] << 1;
    3a70:	466b      	mov	r3, sp
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	005b      	lsls	r3, r3, #1
    3a76:	b2db      	uxtb	r3, r3
    3a78:	466a      	mov	r2, sp
    3a7a:	7013      	strb	r3, [r2, #0]
    switch (psr_config->lut_selection) {
    3a7c:	7862      	ldrb	r2, [r4, #1]
    3a7e:	2a01      	cmp	r2, #1
    3a80:	d102      	bne.n	3a88 <uc8151_set_psr_config+0x58>
        case LUT_FROM_OTP:              eink_data[0] |= 0x00; break;
        case LUT_FROM_REGISTER:         eink_data[0] |= 0x01; break;
    3a82:	4313      	orrs	r3, r2
    3a84:	466a      	mov	r2, sp
    3a86:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    3a88:	466b      	mov	r3, sp
    3a8a:	781b      	ldrb	r3, [r3, #0]
    3a8c:	005b      	lsls	r3, r3, #1
    3a8e:	b2db      	uxtb	r3, r3
    3a90:	466a      	mov	r2, sp
    3a92:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_colours) {
    3a94:	78a2      	ldrb	r2, [r4, #2]
    3a96:	2a00      	cmp	r2, #0
    3a98:	d103      	bne.n	3aa2 <uc8151_set_psr_config+0x72>
        case B_W_R_PIXELS:              eink_data[0] |= 0x00; break;
        case B_W_PIXELS:                eink_data[0] |= 0x01; break;
    3a9a:	2201      	movs	r2, #1
    3a9c:	4313      	orrs	r3, r2
    3a9e:	466a      	mov	r2, sp
    3aa0:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 2;
    3aa2:	466b      	mov	r3, sp
    3aa4:	781b      	ldrb	r3, [r3, #0]
    3aa6:	009b      	lsls	r3, r3, #2
    3aa8:	b2db      	uxtb	r3, r3
    3aaa:	466a      	mov	r2, sp
    3aac:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_rotation) {
    3aae:	78e2      	ldrb	r2, [r4, #3]
    3ab0:	3a01      	subs	r2, #1
    3ab2:	2a01      	cmp	r2, #1
    3ab4:	d803      	bhi.n	3abe <uc8151_set_psr_config+0x8e>
        case ROTATE_0:
        case ROTATE_270:                 eink_data[0] |= 0b00; break;
        case ROTATE_180:
        case ROTATE_90:                  eink_data[0] |= 0b11; break;
    3ab6:	2203      	movs	r2, #3
    3ab8:	4313      	orrs	r3, r2
    3aba:	466a      	mov	r2, sp
    3abc:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    3abe:	466b      	mov	r3, sp
    3ac0:	781b      	ldrb	r3, [r3, #0]
    3ac2:	005b      	lsls	r3, r3, #1
    3ac4:	b2db      	uxtb	r3, r3
    3ac6:	466a      	mov	r2, sp
    3ac8:	7013      	strb	r3, [r2, #0]
    switch (psr_config->booster_switch) {
    3aca:	7922      	ldrb	r2, [r4, #4]
    3acc:	2a01      	cmp	r2, #1
    3ace:	d102      	bne.n	3ad6 <uc8151_set_psr_config+0xa6>
        case BOOSTER_OFF:               eink_data[0] |= 0x00; break;
        case BOOSTER_ON:                eink_data[0] |= 0x01; break;
    3ad0:	4313      	orrs	r3, r2
    3ad2:	466a      	mov	r2, sp
    3ad4:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    3ad6:	466b      	mov	r3, sp
    3ad8:	781b      	ldrb	r3, [r3, #0]
    3ada:	005b      	lsls	r3, r3, #1
    /* Add the soft reset bit */
    eink_data[0] |= 0x01;
    3adc:	2201      	movs	r2, #1
    3ade:	4313      	orrs	r3, r2
    3ae0:	466a      	mov	r2, sp
    3ae2:	7013      	strb	r3, [r2, #0]
    /* Send the PSR register to the display */
    eink_write_data(UC8151_PSR, eink_data, 1);
    3ae4:	2201      	movs	r2, #1
    3ae6:	4669      	mov	r1, sp
    3ae8:	2000      	movs	r0, #0
    3aea:	4b2f      	ldr	r3, [pc, #188]	; (3ba8 <uc8151_set_psr_config+0x178>)
    3aec:	4798      	blx	r3
    3aee:	b002      	add	sp, #8
    3af0:	bd10      	pop	{r4, pc}
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    3af2:	78e3      	ldrb	r3, [r4, #3]
    3af4:	2202      	movs	r2, #2
    3af6:	4393      	bics	r3, r2
    3af8:	2b01      	cmp	r3, #1
    3afa:	d005      	beq.n	3b08 <uc8151_set_psr_config+0xd8>
                uc8151_global_instance.display_width   = 230;
    3afc:	4b28      	ldr	r3, [pc, #160]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3afe:	22e6      	movs	r2, #230	; 0xe6
    3b00:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    3b02:	3a86      	subs	r2, #134	; 0x86
    3b04:	811a      	strh	r2, [r3, #8]
    3b06:	e7a6      	b.n	3a56 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    3b08:	4b25      	ldr	r3, [pc, #148]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3b0a:	325e      	adds	r2, #94	; 0x5e
    3b0c:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 230;
    3b0e:	3286      	adds	r2, #134	; 0x86
    3b10:	811a      	strh	r2, [r3, #8]
    3b12:	e7a0      	b.n	3a56 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    3b14:	78e3      	ldrb	r3, [r4, #3]
    3b16:	2202      	movs	r2, #2
    3b18:	4393      	bics	r3, r2
    3b1a:	2b01      	cmp	r3, #1
    3b1c:	d005      	beq.n	3b2a <uc8151_set_psr_config+0xfa>
                uc8151_global_instance.display_width   = 252;
    3b1e:	4b20      	ldr	r3, [pc, #128]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3b20:	22fc      	movs	r2, #252	; 0xfc
    3b22:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    3b24:	3a9c      	subs	r2, #156	; 0x9c
    3b26:	811a      	strh	r2, [r3, #8]
    3b28:	e795      	b.n	3a56 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    3b2a:	4b1d      	ldr	r3, [pc, #116]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3b2c:	325e      	adds	r2, #94	; 0x5e
    3b2e:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 252;
    3b30:	329c      	adds	r2, #156	; 0x9c
    3b32:	811a      	strh	r2, [r3, #8]
    3b34:	e78f      	b.n	3a56 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    3b36:	78e3      	ldrb	r3, [r4, #3]
    3b38:	2202      	movs	r2, #2
    3b3a:	4393      	bics	r3, r2
    3b3c:	2b01      	cmp	r3, #1
    3b3e:	d006      	beq.n	3b4e <uc8151_set_psr_config+0x11e>
                uc8151_global_instance.display_width   = 296;
    3b40:	4b17      	ldr	r3, [pc, #92]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3b42:	2294      	movs	r2, #148	; 0x94
    3b44:	0052      	lsls	r2, r2, #1
    3b46:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 128;
    3b48:	3aa8      	subs	r2, #168	; 0xa8
    3b4a:	811a      	strh	r2, [r3, #8]
    3b4c:	e783      	b.n	3a56 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 128;
    3b4e:	4b14      	ldr	r3, [pc, #80]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3b50:	327e      	adds	r2, #126	; 0x7e
    3b52:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    3b54:	32a8      	adds	r2, #168	; 0xa8
    3b56:	811a      	strh	r2, [r3, #8]
    3b58:	e77d      	b.n	3a56 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    3b5a:	78e3      	ldrb	r3, [r4, #3]
    3b5c:	2202      	movs	r2, #2
    3b5e:	4393      	bics	r3, r2
    3b60:	2b01      	cmp	r3, #1
    3b62:	d006      	beq.n	3b72 <uc8151_set_psr_config+0x142>
                uc8151_global_instance.display_width   = 296;
    3b64:	4b0e      	ldr	r3, [pc, #56]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3b66:	2294      	movs	r2, #148	; 0x94
    3b68:	0052      	lsls	r2, r2, #1
    3b6a:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 160;
    3b6c:	3a88      	subs	r2, #136	; 0x88
    3b6e:	811a      	strh	r2, [r3, #8]
    3b70:	e771      	b.n	3a56 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 160;
    3b72:	4b0b      	ldr	r3, [pc, #44]	; (3ba0 <uc8151_set_psr_config+0x170>)
    3b74:	329e      	adds	r2, #158	; 0x9e
    3b76:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    3b78:	3288      	adds	r2, #136	; 0x88
    3b7a:	811a      	strh	r2, [r3, #8]
    3b7c:	e76b      	b.n	3a56 <uc8151_set_psr_config+0x26>
        case RES_96x230:                eink_data[0] = 0x00; break;
    3b7e:	2300      	movs	r3, #0
    3b80:	466a      	mov	r2, sp
    3b82:	7013      	strb	r3, [r2, #0]
    3b84:	e774      	b.n	3a70 <uc8151_set_psr_config+0x40>
        case RES_96x252:                eink_data[0] = 0x01; break;
    3b86:	2301      	movs	r3, #1
    3b88:	466a      	mov	r2, sp
    3b8a:	7013      	strb	r3, [r2, #0]
    3b8c:	e770      	b.n	3a70 <uc8151_set_psr_config+0x40>
        case RES_128x296:               eink_data[0] = 0x02; break;
    3b8e:	2302      	movs	r3, #2
    3b90:	466a      	mov	r2, sp
    3b92:	7013      	strb	r3, [r2, #0]
    3b94:	e76c      	b.n	3a70 <uc8151_set_psr_config+0x40>
        case RES_160x296:               eink_data[0] = 0x03; break;
    3b96:	2303      	movs	r3, #3
    3b98:	466a      	mov	r2, sp
    3b9a:	7013      	strb	r3, [r2, #0]
    3b9c:	e768      	b.n	3a70 <uc8151_set_psr_config+0x40>
    3b9e:	46c0      	nop			; (mov r8, r8)
    3ba0:	200003f8 	.word	0x200003f8
    3ba4:	00004a41 	.word	0x00004a41
    3ba8:	00001e29 	.word	0x00001e29

00003bac <uc8151_set_config>:
{        
    3bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bae:	46c6      	mov	lr, r8
    3bb0:	b500      	push	{lr}
    3bb2:	b086      	sub	sp, #24
    3bb4:	0004      	movs	r4, r0
    switch(config->power_settings.source_power) {
    3bb6:	7943      	ldrb	r3, [r0, #5]
    3bb8:	2b00      	cmp	r3, #0
    3bba:	d020      	beq.n	3bfe <uc8151_set_config+0x52>
    3bbc:	2b01      	cmp	r3, #1
    3bbe:	d022      	beq.n	3c06 <uc8151_set_config+0x5a>
    eink_data[0] = eink_data[0] << 1;
    3bc0:	aa04      	add	r2, sp, #16
    3bc2:	7813      	ldrb	r3, [r2, #0]
    3bc4:	005b      	lsls	r3, r3, #1
    3bc6:	b2db      	uxtb	r3, r3
    3bc8:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.gate_power) {
    3bca:	79a2      	ldrb	r2, [r4, #6]
    3bcc:	2a01      	cmp	r2, #1
    3bce:	d102      	bne.n	3bd6 <uc8151_set_config+0x2a>
        case GATE_INTERNAL_DC_DC:       eink_data[0] |= 0x01; break;
    3bd0:	4313      	orrs	r3, r2
    3bd2:	aa04      	add	r2, sp, #16
    3bd4:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.vcom_voltage_level) {
    3bd6:	79e3      	ldrb	r3, [r4, #7]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d018      	beq.n	3c0e <uc8151_set_config+0x62>
    3bdc:	2b01      	cmp	r3, #1
    3bde:	d01a      	beq.n	3c16 <uc8151_set_config+0x6a>
    eink_data[1] = eink_data[1] << 2;
    3be0:	aa04      	add	r2, sp, #16
    3be2:	7853      	ldrb	r3, [r2, #1]
    3be4:	009b      	lsls	r3, r3, #2
    3be6:	b2db      	uxtb	r3, r3
    3be8:	7053      	strb	r3, [r2, #1]
    switch (config->power_settings.vg_voltage_level) {
    3bea:	7a22      	ldrb	r2, [r4, #8]
    3bec:	2a06      	cmp	r2, #6
    3bee:	d05b      	beq.n	3ca8 <uc8151_set_config+0xfc>
    3bf0:	2a07      	cmp	r2, #7
    3bf2:	d05e      	beq.n	3cb2 <uc8151_set_config+0x106>
    3bf4:	2a05      	cmp	r2, #5
    3bf6:	d012      	beq.n	3c1e <uc8151_set_config+0x72>
    if( (config->power_settings.vg_voltage_level == VGx_17V) | (config->power_settings.vg_voltage_level == VGx_18V) | (config->power_settings.vg_voltage_level == VGx_19V) | (config->power_settings.vg_voltage_level == VGx_20V) )
    3bf8:	2a03      	cmp	r2, #3
    3bfa:	d814      	bhi.n	3c26 <uc8151_set_config+0x7a>
    3bfc:	e7fe      	b.n	3bfc <uc8151_set_config+0x50>
        case SOURCE_EXTERNAL_POWER:     eink_data[0] = 0x00; break;
    3bfe:	2200      	movs	r2, #0
    3c00:	ab04      	add	r3, sp, #16
    3c02:	701a      	strb	r2, [r3, #0]
    3c04:	e7dc      	b.n	3bc0 <uc8151_set_config+0x14>
        case SOURCE_INTERNAL_DC_DC:     eink_data[0] = 0x01; break;
    3c06:	2201      	movs	r2, #1
    3c08:	ab04      	add	r3, sp, #16
    3c0a:	701a      	strb	r2, [r3, #0]
    3c0c:	e7d8      	b.n	3bc0 <uc8151_set_config+0x14>
        case VCOMx_VDx_DC_VCOMD:        eink_data[1] = 0x00; break;
    3c0e:	2200      	movs	r2, #0
    3c10:	ab04      	add	r3, sp, #16
    3c12:	705a      	strb	r2, [r3, #1]
    3c14:	e7e4      	b.n	3be0 <uc8151_set_config+0x34>
        case VCOMx_VGx:                 eink_data[1] = 0x01; break;
    3c16:	2201      	movs	r2, #1
    3c18:	ab04      	add	r3, sp, #16
    3c1a:	705a      	strb	r2, [r3, #1]
    3c1c:	e7e0      	b.n	3be0 <uc8151_set_config+0x34>
        case VGx_15V:                   eink_data[1] |= 0x01; break;
    3c1e:	2201      	movs	r2, #1
    3c20:	4313      	orrs	r3, r2
    3c22:	aa04      	add	r2, sp, #16
    3c24:	7053      	strb	r3, [r2, #1]
    eink_data[2] = config->power_settings.pwr_vdh_level;
    3c26:	a904      	add	r1, sp, #16
    3c28:	7a63      	ldrb	r3, [r4, #9]
    3c2a:	708b      	strb	r3, [r1, #2]
    eink_data[3] = config->power_settings.pwr_vdl_level;
    3c2c:	7aa3      	ldrb	r3, [r4, #10]
    3c2e:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = config->power_settings.pwr_vdhr_level;
    3c30:	7ae3      	ldrb	r3, [r4, #11]
    3c32:	710b      	strb	r3, [r1, #4]
    eink_write_data(UC8151_PWR, eink_data, 5);
    3c34:	2205      	movs	r2, #5
    3c36:	2001      	movs	r0, #1
    3c38:	4dd8      	ldr	r5, [pc, #864]	; (3f9c <uc8151_set_config+0x3f0>)
    3c3a:	47a8      	blx	r5
    psr_config = config->panel_settings;
    3c3c:	2205      	movs	r2, #5
    3c3e:	0021      	movs	r1, r4
    3c40:	a802      	add	r0, sp, #8
    3c42:	4bd7      	ldr	r3, [pc, #860]	; (3fa0 <uc8151_set_config+0x3f4>)
    3c44:	4798      	blx	r3
    uc8151_set_psr_config(&psr_config);
    3c46:	a802      	add	r0, sp, #8
    3c48:	4bd6      	ldr	r3, [pc, #856]	; (3fa4 <uc8151_set_config+0x3f8>)
    3c4a:	4798      	blx	r3
    eink_write_data(UC8151_PON, 0, 0);
    3c4c:	2200      	movs	r2, #0
    3c4e:	2100      	movs	r1, #0
    3c50:	2004      	movs	r0, #4
    3c52:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    3c54:	4bd4      	ldr	r3, [pc, #848]	; (3fa8 <uc8151_set_config+0x3fc>)
    3c56:	4698      	mov	r8, r3
	CRITICAL_SECTION_LEAVE();
    3c58:	4fd4      	ldr	r7, [pc, #848]	; (3fac <uc8151_set_config+0x400>)
	CRITICAL_SECTION_ENTER();
    3c5a:	4668      	mov	r0, sp
    3c5c:	47c0      	blx	r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3c5e:	23c0      	movs	r3, #192	; 0xc0
    3c60:	05db      	lsls	r3, r3, #23
    3c62:	2680      	movs	r6, #128	; 0x80
    3c64:	599d      	ldr	r5, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3c66:	22a0      	movs	r2, #160	; 0xa0
    3c68:	49d1      	ldr	r1, [pc, #836]	; (3fb0 <uc8151_set_config+0x404>)
    3c6a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3c6c:	2190      	movs	r1, #144	; 0x90
    3c6e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3c70:	4053      	eors	r3, r2
    3c72:	401d      	ands	r5, r3
    3c74:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    3c76:	4668      	mov	r0, sp
    3c78:	47b8      	blx	r7
    3c7a:	422e      	tst	r6, r5
    3c7c:	d0ed      	beq.n	3c5a <uc8151_set_config+0xae>
    switch (config->booster_soft_start.a_soft_start_period) {
    3c7e:	7b20      	ldrb	r0, [r4, #12]
    3c80:	2801      	cmp	r0, #1
    3c82:	d01f      	beq.n	3cc4 <uc8151_set_config+0x118>
    3c84:	2800      	cmp	r0, #0
    3c86:	d019      	beq.n	3cbc <uc8151_set_config+0x110>
    3c88:	2802      	cmp	r0, #2
    3c8a:	d01f      	beq.n	3ccc <uc8151_set_config+0x120>
    3c8c:	2803      	cmp	r0, #3
    3c8e:	d021      	beq.n	3cd4 <uc8151_set_config+0x128>
    eink_data[0] = eink_data[0] << 3;
    3c90:	aa04      	add	r2, sp, #16
    3c92:	7813      	ldrb	r3, [r2, #0]
    3c94:	00db      	lsls	r3, r3, #3
    3c96:	b2db      	uxtb	r3, r3
    3c98:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_drive_strength) {
    3c9a:	7b61      	ldrb	r1, [r4, #13]
    3c9c:	2907      	cmp	r1, #7
    3c9e:	d821      	bhi.n	3ce4 <uc8151_set_config+0x138>
    3ca0:	008a      	lsls	r2, r1, #2
    3ca2:	4dc4      	ldr	r5, [pc, #784]	; (3fb4 <uc8151_set_config+0x408>)
    3ca4:	58aa      	ldr	r2, [r5, r2]
    3ca6:	4697      	mov	pc, r2
        case VGx_14V:                   eink_data[1] |= 0x02; break;
    3ca8:	2202      	movs	r2, #2
    3caa:	4313      	orrs	r3, r2
    3cac:	aa04      	add	r2, sp, #16
    3cae:	7053      	strb	r3, [r2, #1]
    3cb0:	e7b9      	b.n	3c26 <uc8151_set_config+0x7a>
        case VGx_13V:                   eink_data[1] |= 0x03; break;
    3cb2:	2203      	movs	r2, #3
    3cb4:	4313      	orrs	r3, r2
    3cb6:	aa04      	add	r2, sp, #16
    3cb8:	7053      	strb	r3, [r2, #1]
    3cba:	e7b4      	b.n	3c26 <uc8151_set_config+0x7a>
        case SS_PERIOD_10MS:            eink_data[0] = 0x00; break;
    3cbc:	2200      	movs	r2, #0
    3cbe:	ab04      	add	r3, sp, #16
    3cc0:	701a      	strb	r2, [r3, #0]
    3cc2:	e7e5      	b.n	3c90 <uc8151_set_config+0xe4>
        case SS_PERIOD_20MS:            eink_data[0] = 0x01; break;
    3cc4:	2201      	movs	r2, #1
    3cc6:	ab04      	add	r3, sp, #16
    3cc8:	701a      	strb	r2, [r3, #0]
    3cca:	e7e1      	b.n	3c90 <uc8151_set_config+0xe4>
        case SS_PERIOD_30MS:            eink_data[0] = 0x02; break;
    3ccc:	2202      	movs	r2, #2
    3cce:	ab04      	add	r3, sp, #16
    3cd0:	701a      	strb	r2, [r3, #0]
    3cd2:	e7dd      	b.n	3c90 <uc8151_set_config+0xe4>
        case SS_PERIOD_40MS:            eink_data[0] = 0x03; break;
    3cd4:	2203      	movs	r2, #3
    3cd6:	ab04      	add	r3, sp, #16
    3cd8:	701a      	strb	r2, [r3, #0]
    3cda:	e7d9      	b.n	3c90 <uc8151_set_config+0xe4>
        case STRENGTH_2:                eink_data[0] |= 0x01; break;
    3cdc:	2201      	movs	r2, #1
    3cde:	4313      	orrs	r3, r2
    3ce0:	aa04      	add	r2, sp, #16
    3ce2:	7013      	strb	r3, [r2, #0]
    eink_data[0] = eink_data[0] << 3;
    3ce4:	aa04      	add	r2, sp, #16
    3ce6:	7813      	ldrb	r3, [r2, #0]
    3ce8:	00db      	lsls	r3, r3, #3
    3cea:	b2db      	uxtb	r3, r3
    3cec:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_min_off_time) {
    3cee:	7ba2      	ldrb	r2, [r4, #14]
    3cf0:	2a07      	cmp	r2, #7
    3cf2:	d825      	bhi.n	3d40 <uc8151_set_config+0x194>
    3cf4:	0095      	lsls	r5, r2, #2
    3cf6:	4eb0      	ldr	r6, [pc, #704]	; (3fb8 <uc8151_set_config+0x40c>)
    3cf8:	5975      	ldr	r5, [r6, r5]
    3cfa:	46af      	mov	pc, r5
        case STRENGTH_3:                eink_data[0] |= 0x02; break;
    3cfc:	2202      	movs	r2, #2
    3cfe:	4313      	orrs	r3, r2
    3d00:	aa04      	add	r2, sp, #16
    3d02:	7013      	strb	r3, [r2, #0]
    3d04:	e7ee      	b.n	3ce4 <uc8151_set_config+0x138>
        case STRENGTH_4:                eink_data[0] |= 0x03; break;
    3d06:	2203      	movs	r2, #3
    3d08:	4313      	orrs	r3, r2
    3d0a:	aa04      	add	r2, sp, #16
    3d0c:	7013      	strb	r3, [r2, #0]
    3d0e:	e7e9      	b.n	3ce4 <uc8151_set_config+0x138>
        case STRENGTH_5:                eink_data[0] |= 0x04; break;
    3d10:	2204      	movs	r2, #4
    3d12:	4313      	orrs	r3, r2
    3d14:	aa04      	add	r2, sp, #16
    3d16:	7013      	strb	r3, [r2, #0]
    3d18:	e7e4      	b.n	3ce4 <uc8151_set_config+0x138>
        case STRENGTH_6:                eink_data[0] |= 0x05; break;
    3d1a:	2205      	movs	r2, #5
    3d1c:	4313      	orrs	r3, r2
    3d1e:	aa04      	add	r2, sp, #16
    3d20:	7013      	strb	r3, [r2, #0]
    3d22:	e7df      	b.n	3ce4 <uc8151_set_config+0x138>
        case STRENGTH_7:                eink_data[0] |= 0x06; break;
    3d24:	2206      	movs	r2, #6
    3d26:	4313      	orrs	r3, r2
    3d28:	aa04      	add	r2, sp, #16
    3d2a:	7013      	strb	r3, [r2, #0]
    3d2c:	e7da      	b.n	3ce4 <uc8151_set_config+0x138>
        case STRENGTH_8:                eink_data[0] |= 0x07; break;
    3d2e:	2207      	movs	r2, #7
    3d30:	4313      	orrs	r3, r2
    3d32:	aa04      	add	r2, sp, #16
    3d34:	7013      	strb	r3, [r2, #0]
    3d36:	e7d5      	b.n	3ce4 <uc8151_set_config+0x138>
        case MIN_OFF_TIME_340_NS:       eink_data[0] |= 0x01; break;
    3d38:	2501      	movs	r5, #1
    3d3a:	432b      	orrs	r3, r5
    3d3c:	ad04      	add	r5, sp, #16
    3d3e:	702b      	strb	r3, [r5, #0]
    switch (config->booster_soft_start.a_soft_start_period) {
    3d40:	2801      	cmp	r0, #1
    3d42:	d030      	beq.n	3da6 <uc8151_set_config+0x1fa>
    3d44:	2800      	cmp	r0, #0
    3d46:	d02a      	beq.n	3d9e <uc8151_set_config+0x1f2>
    3d48:	2802      	cmp	r0, #2
    3d4a:	d030      	beq.n	3dae <uc8151_set_config+0x202>
    3d4c:	2803      	cmp	r0, #3
    3d4e:	d032      	beq.n	3db6 <uc8151_set_config+0x20a>
    eink_data[1] = eink_data[1] << 3;
    3d50:	ab04      	add	r3, sp, #16
    3d52:	785b      	ldrb	r3, [r3, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d54:	2907      	cmp	r1, #7
    3d56:	d900      	bls.n	3d5a <uc8151_set_config+0x1ae>
    3d58:	e08c      	b.n	3e74 <uc8151_set_config+0x2c8>
    3d5a:	0088      	lsls	r0, r1, #2
    3d5c:	4d97      	ldr	r5, [pc, #604]	; (3fbc <uc8151_set_config+0x410>)
    3d5e:	5828      	ldr	r0, [r5, r0]
    3d60:	4687      	mov	pc, r0
        case MIN_OFF_TIME_400_NS:       eink_data[0] |= 0x02; break;
    3d62:	2502      	movs	r5, #2
    3d64:	432b      	orrs	r3, r5
    3d66:	ad04      	add	r5, sp, #16
    3d68:	702b      	strb	r3, [r5, #0]
    3d6a:	e7e9      	b.n	3d40 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_540_NS:       eink_data[0] |= 0x03; break;
    3d6c:	2503      	movs	r5, #3
    3d6e:	432b      	orrs	r3, r5
    3d70:	ad04      	add	r5, sp, #16
    3d72:	702b      	strb	r3, [r5, #0]
    3d74:	e7e4      	b.n	3d40 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_800_NS:       eink_data[0] |= 0x04; break;
    3d76:	2504      	movs	r5, #4
    3d78:	432b      	orrs	r3, r5
    3d7a:	ad04      	add	r5, sp, #16
    3d7c:	702b      	strb	r3, [r5, #0]
    3d7e:	e7df      	b.n	3d40 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_1540_NS:      eink_data[0] |= 0x05; break;
    3d80:	2505      	movs	r5, #5
    3d82:	432b      	orrs	r3, r5
    3d84:	ad04      	add	r5, sp, #16
    3d86:	702b      	strb	r3, [r5, #0]
    3d88:	e7da      	b.n	3d40 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_3340_NS:      eink_data[0] |= 0x06; break;
    3d8a:	2506      	movs	r5, #6
    3d8c:	432b      	orrs	r3, r5
    3d8e:	ad04      	add	r5, sp, #16
    3d90:	702b      	strb	r3, [r5, #0]
    3d92:	e7d5      	b.n	3d40 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_6580_NS:      eink_data[0] |= 0x07; break;
    3d94:	2507      	movs	r5, #7
    3d96:	432b      	orrs	r3, r5
    3d98:	ad04      	add	r5, sp, #16
    3d9a:	702b      	strb	r3, [r5, #0]
    3d9c:	e7d0      	b.n	3d40 <uc8151_set_config+0x194>
        case SS_PERIOD_10MS:            eink_data[1] = 0x00; break;
    3d9e:	2000      	movs	r0, #0
    3da0:	ab04      	add	r3, sp, #16
    3da2:	7058      	strb	r0, [r3, #1]
    3da4:	e7d4      	b.n	3d50 <uc8151_set_config+0x1a4>
        case SS_PERIOD_20MS:            eink_data[1] = 0x01; break;
    3da6:	2001      	movs	r0, #1
    3da8:	ab04      	add	r3, sp, #16
    3daa:	7058      	strb	r0, [r3, #1]
    3dac:	e7d0      	b.n	3d50 <uc8151_set_config+0x1a4>
        case SS_PERIOD_30MS:            eink_data[1] = 0x02; break;
    3dae:	2002      	movs	r0, #2
    3db0:	ab04      	add	r3, sp, #16
    3db2:	7058      	strb	r0, [r3, #1]
    3db4:	e7cc      	b.n	3d50 <uc8151_set_config+0x1a4>
        case SS_PERIOD_40MS:            eink_data[1] = 0x03; break;
    3db6:	2003      	movs	r0, #3
    3db8:	ab04      	add	r3, sp, #16
    3dba:	7058      	strb	r0, [r3, #1]
    3dbc:	e7c8      	b.n	3d50 <uc8151_set_config+0x1a4>
    eink_data[1] = eink_data[1] << 3;
    3dbe:	019b      	lsls	r3, r3, #6
    3dc0:	2008      	movs	r0, #8
    3dc2:	4303      	orrs	r3, r0
    3dc4:	b2db      	uxtb	r3, r3
    3dc6:	a804      	add	r0, sp, #16
    3dc8:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3dca:	2a07      	cmp	r2, #7
    3dcc:	d900      	bls.n	3dd0 <uc8151_set_config+0x224>
    3dce:	e0bd      	b.n	3f4c <uc8151_set_config+0x3a0>
    3dd0:	0090      	lsls	r0, r2, #2
    3dd2:	4d7b      	ldr	r5, [pc, #492]	; (3fc0 <uc8151_set_config+0x414>)
    3dd4:	5828      	ldr	r0, [r5, r0]
    3dd6:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3dd8:	019b      	lsls	r3, r3, #6
    3dda:	2010      	movs	r0, #16
    3ddc:	4303      	orrs	r3, r0
    3dde:	b2db      	uxtb	r3, r3
    3de0:	a804      	add	r0, sp, #16
    3de2:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3de4:	2a07      	cmp	r2, #7
    3de6:	d900      	bls.n	3dea <uc8151_set_config+0x23e>
    3de8:	e0b4      	b.n	3f54 <uc8151_set_config+0x3a8>
    3dea:	0090      	lsls	r0, r2, #2
    3dec:	4d75      	ldr	r5, [pc, #468]	; (3fc4 <uc8151_set_config+0x418>)
    3dee:	5828      	ldr	r0, [r5, r0]
    3df0:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3df2:	019b      	lsls	r3, r3, #6
    3df4:	2018      	movs	r0, #24
    3df6:	4303      	orrs	r3, r0
    3df8:	b2db      	uxtb	r3, r3
    3dfa:	a804      	add	r0, sp, #16
    3dfc:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3dfe:	2a07      	cmp	r2, #7
    3e00:	d900      	bls.n	3e04 <uc8151_set_config+0x258>
    3e02:	e0ab      	b.n	3f5c <uc8151_set_config+0x3b0>
    3e04:	0090      	lsls	r0, r2, #2
    3e06:	4d70      	ldr	r5, [pc, #448]	; (3fc8 <uc8151_set_config+0x41c>)
    3e08:	5828      	ldr	r0, [r5, r0]
    3e0a:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3e0c:	019b      	lsls	r3, r3, #6
    3e0e:	2020      	movs	r0, #32
    3e10:	4303      	orrs	r3, r0
    3e12:	b2db      	uxtb	r3, r3
    3e14:	a804      	add	r0, sp, #16
    3e16:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3e18:	2a07      	cmp	r2, #7
    3e1a:	d900      	bls.n	3e1e <uc8151_set_config+0x272>
    3e1c:	e0a2      	b.n	3f64 <uc8151_set_config+0x3b8>
    3e1e:	0090      	lsls	r0, r2, #2
    3e20:	4d6a      	ldr	r5, [pc, #424]	; (3fcc <uc8151_set_config+0x420>)
    3e22:	5828      	ldr	r0, [r5, r0]
    3e24:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3e26:	019b      	lsls	r3, r3, #6
    3e28:	2028      	movs	r0, #40	; 0x28
    3e2a:	4303      	orrs	r3, r0
    3e2c:	b2db      	uxtb	r3, r3
    3e2e:	a804      	add	r0, sp, #16
    3e30:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3e32:	2a07      	cmp	r2, #7
    3e34:	d900      	bls.n	3e38 <uc8151_set_config+0x28c>
    3e36:	e099      	b.n	3f6c <uc8151_set_config+0x3c0>
    3e38:	0090      	lsls	r0, r2, #2
    3e3a:	4d65      	ldr	r5, [pc, #404]	; (3fd0 <uc8151_set_config+0x424>)
    3e3c:	5828      	ldr	r0, [r5, r0]
    3e3e:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3e40:	019b      	lsls	r3, r3, #6
    3e42:	2030      	movs	r0, #48	; 0x30
    3e44:	4303      	orrs	r3, r0
    3e46:	b2db      	uxtb	r3, r3
    3e48:	a804      	add	r0, sp, #16
    3e4a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3e4c:	2a07      	cmp	r2, #7
    3e4e:	d900      	bls.n	3e52 <uc8151_set_config+0x2a6>
    3e50:	e090      	b.n	3f74 <uc8151_set_config+0x3c8>
    3e52:	0090      	lsls	r0, r2, #2
    3e54:	4d5f      	ldr	r5, [pc, #380]	; (3fd4 <uc8151_set_config+0x428>)
    3e56:	5828      	ldr	r0, [r5, r0]
    3e58:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3e5a:	019b      	lsls	r3, r3, #6
    3e5c:	2038      	movs	r0, #56	; 0x38
    3e5e:	4303      	orrs	r3, r0
    3e60:	b2db      	uxtb	r3, r3
    3e62:	a804      	add	r0, sp, #16
    3e64:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3e66:	2a07      	cmp	r2, #7
    3e68:	d900      	bls.n	3e6c <uc8151_set_config+0x2c0>
    3e6a:	e087      	b.n	3f7c <uc8151_set_config+0x3d0>
    3e6c:	0090      	lsls	r0, r2, #2
    3e6e:	4d5a      	ldr	r5, [pc, #360]	; (3fd8 <uc8151_set_config+0x42c>)
    3e70:	5828      	ldr	r0, [r5, r0]
    3e72:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3e74:	019b      	lsls	r3, r3, #6
    3e76:	b2db      	uxtb	r3, r3
    3e78:	a804      	add	r0, sp, #16
    3e7a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3e7c:	2a07      	cmp	r2, #7
    3e7e:	d850      	bhi.n	3f22 <uc8151_set_config+0x376>
    3e80:	0090      	lsls	r0, r2, #2
    3e82:	4d56      	ldr	r5, [pc, #344]	; (3fdc <uc8151_set_config+0x430>)
    3e84:	5828      	ldr	r0, [r5, r0]
    3e86:	4687      	mov	pc, r0
        case MIN_OFF_TIME_340_NS:       eink_data[1] |= 0x01; break;
    3e88:	2001      	movs	r0, #1
    3e8a:	4303      	orrs	r3, r0
    3e8c:	a804      	add	r0, sp, #16
    3e8e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3e90:	2907      	cmp	r1, #7
    3e92:	d900      	bls.n	3e96 <uc8151_set_config+0x2ea>
    3e94:	e0d7      	b.n	4046 <uc8151_set_config+0x49a>
    3e96:	0089      	lsls	r1, r1, #2
    3e98:	4b51      	ldr	r3, [pc, #324]	; (3fe0 <uc8151_set_config+0x434>)
    3e9a:	585b      	ldr	r3, [r3, r1]
    3e9c:	469f      	mov	pc, r3
        case MIN_OFF_TIME_400_NS:       eink_data[1] |= 0x02; break;
    3e9e:	2002      	movs	r0, #2
    3ea0:	4303      	orrs	r3, r0
    3ea2:	a804      	add	r0, sp, #16
    3ea4:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3ea6:	2907      	cmp	r1, #7
    3ea8:	d900      	bls.n	3eac <uc8151_set_config+0x300>
    3eaa:	e12c      	b.n	4106 <uc8151_set_config+0x55a>
    3eac:	0089      	lsls	r1, r1, #2
    3eae:	4b4d      	ldr	r3, [pc, #308]	; (3fe4 <uc8151_set_config+0x438>)
    3eb0:	585b      	ldr	r3, [r3, r1]
    3eb2:	469f      	mov	pc, r3
        case MIN_OFF_TIME_540_NS:       eink_data[1] |= 0x03; break;
    3eb4:	2003      	movs	r0, #3
    3eb6:	4303      	orrs	r3, r0
    3eb8:	a804      	add	r0, sp, #16
    3eba:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3ebc:	2907      	cmp	r1, #7
    3ebe:	d900      	bls.n	3ec2 <uc8151_set_config+0x316>
    3ec0:	e12a      	b.n	4118 <uc8151_set_config+0x56c>
    3ec2:	0089      	lsls	r1, r1, #2
    3ec4:	4b48      	ldr	r3, [pc, #288]	; (3fe8 <uc8151_set_config+0x43c>)
    3ec6:	585b      	ldr	r3, [r3, r1]
    3ec8:	469f      	mov	pc, r3
        case MIN_OFF_TIME_800_NS:       eink_data[1] |= 0x04; break;
    3eca:	2004      	movs	r0, #4
    3ecc:	4303      	orrs	r3, r0
    3ece:	a804      	add	r0, sp, #16
    3ed0:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3ed2:	2907      	cmp	r1, #7
    3ed4:	d900      	bls.n	3ed8 <uc8151_set_config+0x32c>
    3ed6:	e128      	b.n	412a <uc8151_set_config+0x57e>
    3ed8:	0089      	lsls	r1, r1, #2
    3eda:	4b44      	ldr	r3, [pc, #272]	; (3fec <uc8151_set_config+0x440>)
    3edc:	585b      	ldr	r3, [r3, r1]
    3ede:	469f      	mov	pc, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[1] |= 0x05; break;
    3ee0:	2005      	movs	r0, #5
    3ee2:	4303      	orrs	r3, r0
    3ee4:	a804      	add	r0, sp, #16
    3ee6:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3ee8:	2907      	cmp	r1, #7
    3eea:	d900      	bls.n	3eee <uc8151_set_config+0x342>
    3eec:	e126      	b.n	413c <uc8151_set_config+0x590>
    3eee:	0089      	lsls	r1, r1, #2
    3ef0:	4b3f      	ldr	r3, [pc, #252]	; (3ff0 <uc8151_set_config+0x444>)
    3ef2:	585b      	ldr	r3, [r3, r1]
    3ef4:	469f      	mov	pc, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[1] |= 0x06; break;
    3ef6:	2006      	movs	r0, #6
    3ef8:	4303      	orrs	r3, r0
    3efa:	a804      	add	r0, sp, #16
    3efc:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3efe:	2907      	cmp	r1, #7
    3f00:	d900      	bls.n	3f04 <uc8151_set_config+0x358>
    3f02:	e124      	b.n	414e <uc8151_set_config+0x5a2>
    3f04:	0089      	lsls	r1, r1, #2
    3f06:	4b3b      	ldr	r3, [pc, #236]	; (3ff4 <uc8151_set_config+0x448>)
    3f08:	585b      	ldr	r3, [r3, r1]
    3f0a:	469f      	mov	pc, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[1] |= 0x07; break;
    3f0c:	2007      	movs	r0, #7
    3f0e:	4303      	orrs	r3, r0
    3f10:	a804      	add	r0, sp, #16
    3f12:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3f14:	2907      	cmp	r1, #7
    3f16:	d900      	bls.n	3f1a <uc8151_set_config+0x36e>
    3f18:	e122      	b.n	4160 <uc8151_set_config+0x5b4>
    3f1a:	0089      	lsls	r1, r1, #2
    3f1c:	4b36      	ldr	r3, [pc, #216]	; (3ff8 <uc8151_set_config+0x44c>)
    3f1e:	585b      	ldr	r3, [r3, r1]
    3f20:	469f      	mov	pc, r3
    3f22:	2907      	cmp	r1, #7
    3f24:	d806      	bhi.n	3f34 <uc8151_set_config+0x388>
    3f26:	0089      	lsls	r1, r1, #2
    3f28:	4b34      	ldr	r3, [pc, #208]	; (3ffc <uc8151_set_config+0x450>)
    3f2a:	585b      	ldr	r3, [r3, r1]
    3f2c:	469f      	mov	pc, r3
        case STRENGTH_1:                eink_data[2] = 0x00; break;
    3f2e:	2100      	movs	r1, #0
    3f30:	ab04      	add	r3, sp, #16
    3f32:	7099      	strb	r1, [r3, #2]
    eink_data[2] = eink_data[2] << 3;
    3f34:	a904      	add	r1, sp, #16
    3f36:	788b      	ldrb	r3, [r1, #2]
    3f38:	00db      	lsls	r3, r3, #3
    3f3a:	b2db      	uxtb	r3, r3
    3f3c:	708b      	strb	r3, [r1, #2]
    switch (config->booster_soft_start.a_min_off_time) {
    3f3e:	2a07      	cmp	r2, #7
    3f40:	d900      	bls.n	3f44 <uc8151_set_config+0x398>
    3f42:	e088      	b.n	4056 <uc8151_set_config+0x4aa>
    3f44:	0092      	lsls	r2, r2, #2
    3f46:	492e      	ldr	r1, [pc, #184]	; (4000 <uc8151_set_config+0x454>)
    3f48:	588a      	ldr	r2, [r1, r2]
    3f4a:	4697      	mov	pc, r2
        case STRENGTH_2:                eink_data[2] = 0x01; break;
    3f4c:	2101      	movs	r1, #1
    3f4e:	ab04      	add	r3, sp, #16
    3f50:	7099      	strb	r1, [r3, #2]
    3f52:	e7ef      	b.n	3f34 <uc8151_set_config+0x388>
        case STRENGTH_3:                eink_data[2] = 0x02; break;
    3f54:	2102      	movs	r1, #2
    3f56:	ab04      	add	r3, sp, #16
    3f58:	7099      	strb	r1, [r3, #2]
    3f5a:	e7eb      	b.n	3f34 <uc8151_set_config+0x388>
        case STRENGTH_4:                eink_data[2] = 0x03; break;
    3f5c:	2103      	movs	r1, #3
    3f5e:	ab04      	add	r3, sp, #16
    3f60:	7099      	strb	r1, [r3, #2]
    3f62:	e7e7      	b.n	3f34 <uc8151_set_config+0x388>
        case STRENGTH_5:                eink_data[2] = 0x04; break;
    3f64:	2104      	movs	r1, #4
    3f66:	ab04      	add	r3, sp, #16
    3f68:	7099      	strb	r1, [r3, #2]
    3f6a:	e7e3      	b.n	3f34 <uc8151_set_config+0x388>
        case STRENGTH_6:                eink_data[2] = 0x05; break;
    3f6c:	2105      	movs	r1, #5
    3f6e:	ab04      	add	r3, sp, #16
    3f70:	7099      	strb	r1, [r3, #2]
    3f72:	e7df      	b.n	3f34 <uc8151_set_config+0x388>
        case STRENGTH_7:                eink_data[2] = 0x06; break;
    3f74:	2106      	movs	r1, #6
    3f76:	ab04      	add	r3, sp, #16
    3f78:	7099      	strb	r1, [r3, #2]
    3f7a:	e7db      	b.n	3f34 <uc8151_set_config+0x388>
        case STRENGTH_8:                eink_data[2] = 0x07; break;
    3f7c:	2107      	movs	r1, #7
    3f7e:	ab04      	add	r3, sp, #16
    3f80:	7099      	strb	r1, [r3, #2]
    3f82:	e7d7      	b.n	3f34 <uc8151_set_config+0x388>
        case PFS_1_FRAME:               eink_data[0] = 0x00; break;
    3f84:	2200      	movs	r2, #0
    3f86:	ab04      	add	r3, sp, #16
    3f88:	701a      	strb	r2, [r3, #0]
    3f8a:	e072      	b.n	4072 <uc8151_set_config+0x4c6>
        case PFS_2_FRAMES:              eink_data[0] = 0x10; break;
    3f8c:	2210      	movs	r2, #16
    3f8e:	ab04      	add	r3, sp, #16
    3f90:	701a      	strb	r2, [r3, #0]
    3f92:	e06e      	b.n	4072 <uc8151_set_config+0x4c6>
        case PFS_3_FRAMES:              eink_data[0] = 0x20; break;
    3f94:	2220      	movs	r2, #32
    3f96:	ab04      	add	r3, sp, #16
    3f98:	701a      	strb	r2, [r3, #0]
    3f9a:	e06a      	b.n	4072 <uc8151_set_config+0x4c6>
    3f9c:	00001e29 	.word	0x00001e29
    3fa0:	00004a41 	.word	0x00004a41
    3fa4:	00003a31 	.word	0x00003a31
    3fa8:	0000034d 	.word	0x0000034d
    3fac:	0000035b 	.word	0x0000035b
    3fb0:	41004400 	.word	0x41004400
    3fb4:	00005304 	.word	0x00005304
    3fb8:	00005324 	.word	0x00005324
    3fbc:	00005344 	.word	0x00005344
    3fc0:	00005364 	.word	0x00005364
    3fc4:	00005384 	.word	0x00005384
    3fc8:	000053a4 	.word	0x000053a4
    3fcc:	000053c4 	.word	0x000053c4
    3fd0:	000053e4 	.word	0x000053e4
    3fd4:	00005404 	.word	0x00005404
    3fd8:	00005424 	.word	0x00005424
    3fdc:	00005444 	.word	0x00005444
    3fe0:	00005464 	.word	0x00005464
    3fe4:	00005484 	.word	0x00005484
    3fe8:	000054a4 	.word	0x000054a4
    3fec:	000054c4 	.word	0x000054c4
    3ff0:	000054e4 	.word	0x000054e4
    3ff4:	00005504 	.word	0x00005504
    3ff8:	00005524 	.word	0x00005524
    3ffc:	00005544 	.word	0x00005544
    4000:	00005564 	.word	0x00005564
        case PFS_4_FRAMES:              eink_data[0] = 0x30; break;
    4004:	2230      	movs	r2, #48	; 0x30
    4006:	ab04      	add	r3, sp, #16
    4008:	701a      	strb	r2, [r3, #0]
    400a:	e032      	b.n	4072 <uc8151_set_config+0x4c6>
        case INTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x0; break;
    400c:	2200      	movs	r2, #0
    400e:	ab04      	add	r3, sp, #16
    4010:	701a      	strb	r2, [r3, #0]
    4012:	e038      	b.n	4086 <uc8151_set_config+0x4da>
        case EXTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x1; break;
    4014:	2201      	movs	r2, #1
    4016:	ab04      	add	r3, sp, #16
    4018:	701a      	strb	r2, [r3, #0]
    401a:	e034      	b.n	4086 <uc8151_set_config+0x4da>
    } else if((config->temperature_sensor_settings.temperature_offset <= 7) && (config->temperature_sensor_settings.temperature_offset >= 0)) {
    401c:	b2d1      	uxtb	r1, r2
    401e:	2907      	cmp	r1, #7
    4020:	d803      	bhi.n	402a <uc8151_set_config+0x47e>
        eink_data[0] |= config->temperature_sensor_settings.temperature_offset;
    4022:	4313      	orrs	r3, r2
    4024:	aa04      	add	r2, sp, #16
    4026:	7013      	strb	r3, [r2, #0]
    4028:	e039      	b.n	409e <uc8151_set_config+0x4f2>
    } else if(config->temperature_sensor_settings.temperature_offset < -8) {
    402a:	0011      	movs	r1, r2
    402c:	3108      	adds	r1, #8
    402e:	da04      	bge.n	403a <uc8151_set_config+0x48e>
        eink_data[0] |= 0x8;
    4030:	2208      	movs	r2, #8
    4032:	4313      	orrs	r3, r2
    4034:	aa04      	add	r2, sp, #16
    4036:	7013      	strb	r3, [r2, #0]
    4038:	e031      	b.n	409e <uc8151_set_config+0x4f2>
        eink_data[0] |= (config->temperature_sensor_settings.temperature_offset & 0x0F);
    403a:	210f      	movs	r1, #15
    403c:	400a      	ands	r2, r1
    403e:	4313      	orrs	r3, r2
    4040:	aa04      	add	r2, sp, #16
    4042:	7013      	strb	r3, [r2, #0]
    4044:	e02b      	b.n	409e <uc8151_set_config+0x4f2>
    eink_data[2] = eink_data[2] << 3;
    4046:	ab04      	add	r3, sp, #16
    4048:	789b      	ldrb	r3, [r3, #2]
    404a:	00db      	lsls	r3, r3, #3
    404c:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_340_NS:       eink_data[2] |= 0x01; break;
    404e:	2201      	movs	r2, #1
    4050:	4313      	orrs	r3, r2
    4052:	aa04      	add	r2, sp, #16
    4054:	7093      	strb	r3, [r2, #2]
    eink_write_data(UC8151_BTST, eink_data, 3);
    4056:	2203      	movs	r2, #3
    4058:	a904      	add	r1, sp, #16
    405a:	2006      	movs	r0, #6
    405c:	4b45      	ldr	r3, [pc, #276]	; (4174 <uc8151_set_config+0x5c8>)
    405e:	4798      	blx	r3
    switch (config->power_off_sequence) {
    4060:	7d23      	ldrb	r3, [r4, #20]
    4062:	2b01      	cmp	r3, #1
    4064:	d092      	beq.n	3f8c <uc8151_set_config+0x3e0>
    4066:	2b00      	cmp	r3, #0
    4068:	d08c      	beq.n	3f84 <uc8151_set_config+0x3d8>
    406a:	2b02      	cmp	r3, #2
    406c:	d092      	beq.n	3f94 <uc8151_set_config+0x3e8>
    406e:	2b03      	cmp	r3, #3
    4070:	d0c8      	beq.n	4004 <uc8151_set_config+0x458>
    eink_write_data(UC8151_PFS, eink_data, 1);
    4072:	2201      	movs	r2, #1
    4074:	a904      	add	r1, sp, #16
    4076:	2003      	movs	r0, #3
    4078:	4b3e      	ldr	r3, [pc, #248]	; (4174 <uc8151_set_config+0x5c8>)
    407a:	4798      	blx	r3
    switch (config->temperature_sensor_settings.sensor_select) {
    407c:	7d63      	ldrb	r3, [r4, #21]
    407e:	2b00      	cmp	r3, #0
    4080:	d0c4      	beq.n	400c <uc8151_set_config+0x460>
    4082:	2b01      	cmp	r3, #1
    4084:	d0c6      	beq.n	4014 <uc8151_set_config+0x468>
    eink_data[0] = eink_data[0] << 4;
    4086:	ab04      	add	r3, sp, #16
    4088:	781b      	ldrb	r3, [r3, #0]
    408a:	011b      	lsls	r3, r3, #4
    408c:	b2db      	uxtb	r3, r3
    if (config->temperature_sensor_settings.temperature_offset > 7) {
    408e:	2216      	movs	r2, #22
    4090:	56a2      	ldrsb	r2, [r4, r2]
    4092:	2a07      	cmp	r2, #7
    4094:	ddc2      	ble.n	401c <uc8151_set_config+0x470>
        eink_data[0] |= 0x7;
    4096:	2207      	movs	r2, #7
    4098:	4313      	orrs	r3, r2
    409a:	aa04      	add	r2, sp, #16
    409c:	7013      	strb	r3, [r2, #0]
    eink_write_data(UC8151_TSE, eink_data, 1);
    409e:	ad04      	add	r5, sp, #16
    40a0:	2201      	movs	r2, #1
    40a2:	0029      	movs	r1, r5
    40a4:	2041      	movs	r0, #65	; 0x41
    40a6:	4c33      	ldr	r4, [pc, #204]	; (4174 <uc8151_set_config+0x5c8>)
    40a8:	47a0      	blx	r4
    eink_data[0] = 0x77;
    40aa:	2377      	movs	r3, #119	; 0x77
    40ac:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    40ae:	2201      	movs	r2, #1
    40b0:	0029      	movs	r1, r5
    40b2:	2050      	movs	r0, #80	; 0x50
    40b4:	47a0      	blx	r4
    eink_data[0] = 0x22;
    40b6:	2322      	movs	r3, #34	; 0x22
    40b8:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_TCON, eink_data, 1);
    40ba:	2201      	movs	r2, #1
    40bc:	0029      	movs	r1, r5
    40be:	2060      	movs	r0, #96	; 0x60
    40c0:	47a0      	blx	r4
    eink_data[0] = 0x3C;
    40c2:	233c      	movs	r3, #60	; 0x3c
    40c4:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    40c6:	2201      	movs	r2, #1
    40c8:	0029      	movs	r1, r5
    40ca:	2050      	movs	r0, #80	; 0x50
    40cc:	47a0      	blx	r4
    eink_write_data(UC8151_POF, 0, 0);
    40ce:	2200      	movs	r2, #0
    40d0:	2100      	movs	r1, #0
    40d2:	2002      	movs	r0, #2
    40d4:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    40d6:	4f28      	ldr	r7, [pc, #160]	; (4178 <uc8151_set_config+0x5cc>)
	CRITICAL_SECTION_LEAVE();
    40d8:	4e28      	ldr	r6, [pc, #160]	; (417c <uc8151_set_config+0x5d0>)
	CRITICAL_SECTION_ENTER();
    40da:	a801      	add	r0, sp, #4
    40dc:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    40de:	23c0      	movs	r3, #192	; 0xc0
    40e0:	05db      	lsls	r3, r3, #23
    40e2:	2580      	movs	r5, #128	; 0x80
    40e4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    40e6:	22a0      	movs	r2, #160	; 0xa0
    40e8:	4925      	ldr	r1, [pc, #148]	; (4180 <uc8151_set_config+0x5d4>)
    40ea:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    40ec:	2190      	movs	r1, #144	; 0x90
    40ee:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    40f0:	4053      	eors	r3, r2
    40f2:	401c      	ands	r4, r3
    40f4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    40f6:	a801      	add	r0, sp, #4
    40f8:	47b0      	blx	r6
    40fa:	4225      	tst	r5, r4
    40fc:	d0ed      	beq.n	40da <uc8151_set_config+0x52e>
}
    40fe:	b006      	add	sp, #24
    4100:	bc04      	pop	{r2}
    4102:	4690      	mov	r8, r2
    4104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_data[2] = eink_data[2] << 3;
    4106:	ab04      	add	r3, sp, #16
    4108:	789b      	ldrb	r3, [r3, #2]
    410a:	00db      	lsls	r3, r3, #3
    410c:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_400_NS:       eink_data[2] |= 0x02; break;
    410e:	2202      	movs	r2, #2
    4110:	4313      	orrs	r3, r2
    4112:	aa04      	add	r2, sp, #16
    4114:	7093      	strb	r3, [r2, #2]
    4116:	e79e      	b.n	4056 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    4118:	ab04      	add	r3, sp, #16
    411a:	789b      	ldrb	r3, [r3, #2]
    411c:	00db      	lsls	r3, r3, #3
    411e:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_540_NS:       eink_data[2] |= 0x03; break;
    4120:	2203      	movs	r2, #3
    4122:	4313      	orrs	r3, r2
    4124:	aa04      	add	r2, sp, #16
    4126:	7093      	strb	r3, [r2, #2]
    4128:	e795      	b.n	4056 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    412a:	ab04      	add	r3, sp, #16
    412c:	789b      	ldrb	r3, [r3, #2]
    412e:	00db      	lsls	r3, r3, #3
    4130:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_800_NS:       eink_data[2] |= 0x04; break;
    4132:	2204      	movs	r2, #4
    4134:	4313      	orrs	r3, r2
    4136:	aa04      	add	r2, sp, #16
    4138:	7093      	strb	r3, [r2, #2]
    413a:	e78c      	b.n	4056 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    413c:	ab04      	add	r3, sp, #16
    413e:	789b      	ldrb	r3, [r3, #2]
    4140:	00db      	lsls	r3, r3, #3
    4142:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[2] |= 0x05; break;
    4144:	2205      	movs	r2, #5
    4146:	4313      	orrs	r3, r2
    4148:	aa04      	add	r2, sp, #16
    414a:	7093      	strb	r3, [r2, #2]
    414c:	e783      	b.n	4056 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    414e:	ab04      	add	r3, sp, #16
    4150:	789b      	ldrb	r3, [r3, #2]
    4152:	00db      	lsls	r3, r3, #3
    4154:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[2] |= 0x06; break;
    4156:	2206      	movs	r2, #6
    4158:	4313      	orrs	r3, r2
    415a:	aa04      	add	r2, sp, #16
    415c:	7093      	strb	r3, [r2, #2]
    415e:	e77a      	b.n	4056 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    4160:	ab04      	add	r3, sp, #16
    4162:	789b      	ldrb	r3, [r3, #2]
    4164:	00db      	lsls	r3, r3, #3
    4166:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[2] |= 0x07; break;
    4168:	2207      	movs	r2, #7
    416a:	4313      	orrs	r3, r2
    416c:	aa04      	add	r2, sp, #16
    416e:	7093      	strb	r3, [r2, #2]
    4170:	e771      	b.n	4056 <uc8151_set_config+0x4aa>
    4172:	46c0      	nop			; (mov r8, r8)
    4174:	00001e29 	.word	0x00001e29
    4178:	0000034d 	.word	0x0000034d
    417c:	0000035b 	.word	0x0000035b
    4180:	41004400 	.word	0x41004400

00004184 <gfx_eink_graphics_fill_screen_raw>:
 * \brief Fill display buffers with a single color
 *
 * \param fill_value The pixel value to fill the display buffer with.
 */
void gfx_eink_graphics_fill_screen_raw(uint8_t fill_value)
{
    4184:	b5f0      	push	{r4, r5, r6, r7, lr}
    4186:	46d6      	mov	lr, sl
    4188:	b500      	push	{lr}
    418a:	b082      	sub	sp, #8
    418c:	9001      	str	r0, [sp, #4]
    /* Fill entire display buffer. */
    eink_coordinate dx, width_fill;
    eink_coordinate dy, height_fill;
    
    width_fill = ptr_eink_gfx_config->display_width;
    418e:	4b0f      	ldr	r3, [pc, #60]	; (41cc <gfx_eink_graphics_fill_screen_raw+0x48>)
    4190:	681b      	ldr	r3, [r3, #0]
    4192:	885a      	ldrh	r2, [r3, #2]
    4194:	4692      	mov	sl, r2
    height_fill = ptr_eink_gfx_config->display_height;
    4196:	889e      	ldrh	r6, [r3, #4]
    
    for(dx = 0; dx < width_fill; dx++) {
    4198:	2500      	movs	r5, #0
    419a:	2a00      	cmp	r2, #0
    419c:	d011      	beq.n	41c2 <gfx_eink_graphics_fill_screen_raw+0x3e>
        for(dy = 0; dy < height_fill; dy++) {
            gfx_eink_set_pixel_raw(dx, dy, fill_value);
    419e:	4f0c      	ldr	r7, [pc, #48]	; (41d0 <gfx_eink_graphics_fill_screen_raw+0x4c>)
    41a0:	e00b      	b.n	41ba <gfx_eink_graphics_fill_screen_raw+0x36>
    41a2:	9a01      	ldr	r2, [sp, #4]
    41a4:	0021      	movs	r1, r4
    41a6:	0028      	movs	r0, r5
    41a8:	47b8      	blx	r7
        for(dy = 0; dy < height_fill; dy++) {
    41aa:	3401      	adds	r4, #1
    41ac:	b2a4      	uxth	r4, r4
    41ae:	42a6      	cmp	r6, r4
    41b0:	d1f7      	bne.n	41a2 <gfx_eink_graphics_fill_screen_raw+0x1e>
    for(dx = 0; dx < width_fill; dx++) {
    41b2:	3501      	adds	r5, #1
    41b4:	b2ad      	uxth	r5, r5
    41b6:	45aa      	cmp	sl, r5
    41b8:	d003      	beq.n	41c2 <gfx_eink_graphics_fill_screen_raw+0x3e>
        for(dy = 0; dy < height_fill; dy++) {
    41ba:	2400      	movs	r4, #0
    41bc:	2e00      	cmp	r6, #0
    41be:	d1f0      	bne.n	41a2 <gfx_eink_graphics_fill_screen_raw+0x1e>
    41c0:	e7f7      	b.n	41b2 <gfx_eink_graphics_fill_screen_raw+0x2e>
        }
    }
}
    41c2:	b002      	add	sp, #8
    41c4:	bc04      	pop	{r2}
    41c6:	4692      	mov	sl, r2
    41c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41ca:	46c0      	nop			; (mov r8, r8)
    41cc:	20000434 	.word	0x20000434
    41d0:	000005a5 	.word	0x000005a5

000041d4 <gfx_eink_graphics_fill_screen>:
 * \param fill_type Selects the color to fill the display buffer with.
 * 
 * \note Selecting FILL_NONE as the color will be ignored.
 */
void gfx_eink_graphics_fill_screen(enum eink_fill_colour fill_color)
{
    41d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41d6:	46ce      	mov	lr, r9
    41d8:	4647      	mov	r7, r8
    41da:	b580      	push	{r7, lr}
    41dc:	0006      	movs	r6, r0
    eink_coordinate dx, width_fill;
    eink_coordinate dy, height_fill;
    
    width_fill = ptr_eink_gfx_config->display_width;
    41de:	4b37      	ldr	r3, [pc, #220]	; (42bc <gfx_eink_graphics_fill_screen+0xe8>)
    41e0:	681b      	ldr	r3, [r3, #0]
    41e2:	885a      	ldrh	r2, [r3, #2]
    41e4:	4691      	mov	r9, r2
    height_fill = ptr_eink_gfx_config->display_height;
    41e6:	889f      	ldrh	r7, [r3, #4]
    
    for(dx = 0; dx < width_fill; dx++) {
    41e8:	2500      	movs	r5, #0
    41ea:	2a00      	cmp	r2, #0
    41ec:	d062      	beq.n	42b4 <gfx_eink_graphics_fill_screen+0xe0>
        for(dy = 0; dy < height_fill; dy++) {
            if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
            {
                switch (fill_color) {
    41ee:	0083      	lsls	r3, r0, #2
    41f0:	4a33      	ldr	r2, [pc, #204]	; (42c0 <gfx_eink_graphics_fill_screen+0xec>)
    41f2:	4690      	mov	r8, r2
    41f4:	4498      	add	r8, r3
    41f6:	e059      	b.n	42ac <gfx_eink_graphics_fill_screen+0xd8>
    41f8:	2e07      	cmp	r6, #7
    41fa:	d837      	bhi.n	426c <gfx_eink_graphics_fill_screen+0x98>
    41fc:	4643      	mov	r3, r8
    41fe:	681b      	ldr	r3, [r3, #0]
    4200:	469f      	mov	pc, r3
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    4202:	2200      	movs	r2, #0
    4204:	0021      	movs	r1, r4
    4206:	0028      	movs	r0, r5
    4208:	4b2e      	ldr	r3, [pc, #184]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    420a:	4798      	blx	r3
    420c:	e02e      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    420e:	2201      	movs	r2, #1
    4210:	0021      	movs	r1, r4
    4212:	0028      	movs	r0, r5
    4214:	4b2b      	ldr	r3, [pc, #172]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    4216:	4798      	blx	r3
    4218:	e028      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_YELLOW: gfx_eink_set_pixel(dx, dy, PIXEL_YELLOW); break;
    421a:	2203      	movs	r2, #3
    421c:	0021      	movs	r1, r4
    421e:	0028      	movs	r0, r5
    4220:	4b28      	ldr	r3, [pc, #160]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    4222:	4798      	blx	r3
    4224:	e022      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    4226:	2202      	movs	r2, #2
    4228:	0021      	movs	r1, r4
    422a:	0028      	movs	r0, r5
    422c:	4b25      	ldr	r3, [pc, #148]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    422e:	4798      	blx	r3
    4230:	e01c      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_GREEN:  gfx_eink_set_pixel(dx, dy, PIXEL_GREEN); break;
    4232:	2204      	movs	r2, #4
    4234:	0021      	movs	r1, r4
    4236:	0028      	movs	r0, r5
    4238:	4b22      	ldr	r3, [pc, #136]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    423a:	4798      	blx	r3
    423c:	e016      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_BLUE:   gfx_eink_set_pixel(dx, dy, PIXEL_BLUE); break;
    423e:	2205      	movs	r2, #5
    4240:	0021      	movs	r1, r4
    4242:	0028      	movs	r0, r5
    4244:	4b1f      	ldr	r3, [pc, #124]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    4246:	4798      	blx	r3
    4248:	e010      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_ORANGE: gfx_eink_set_pixel(dx, dy, PIXEL_ORANGE); break;
    424a:	2206      	movs	r2, #6
    424c:	0021      	movs	r1, r4
    424e:	0028      	movs	r0, r5
    4250:	4b1c      	ldr	r3, [pc, #112]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    4252:	4798      	blx	r3
    4254:	e00a      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_CLEAN:  gfx_eink_set_pixel(dx, dy, PIXEL_CLEAN); break;
    4256:	2207      	movs	r2, #7
    4258:	0021      	movs	r1, r4
    425a:	0028      	movs	r0, r5
    425c:	4b19      	ldr	r3, [pc, #100]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    425e:	4798      	blx	r3
    4260:	e004      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                }
            } else {
                switch (fill_color) {
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    4262:	2200      	movs	r2, #0
    4264:	0021      	movs	r1, r4
    4266:	0028      	movs	r0, r5
    4268:	4b16      	ldr	r3, [pc, #88]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    426a:	4798      	blx	r3
        for(dy = 0; dy < height_fill; dy++) {
    426c:	3401      	adds	r4, #1
    426e:	b2a4      	uxth	r4, r4
    4270:	42a7      	cmp	r7, r4
    4272:	d017      	beq.n	42a4 <gfx_eink_graphics_fill_screen+0xd0>
            if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    4274:	4b11      	ldr	r3, [pc, #68]	; (42bc <gfx_eink_graphics_fill_screen+0xe8>)
    4276:	681b      	ldr	r3, [r3, #0]
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	3b06      	subs	r3, #6
    427c:	2b01      	cmp	r3, #1
    427e:	d9bb      	bls.n	41f8 <gfx_eink_graphics_fill_screen+0x24>
                switch (fill_color) {
    4280:	2e01      	cmp	r6, #1
    4282:	d009      	beq.n	4298 <gfx_eink_graphics_fill_screen+0xc4>
    4284:	2e00      	cmp	r6, #0
    4286:	d0ec      	beq.n	4262 <gfx_eink_graphics_fill_screen+0x8e>
    4288:	2e03      	cmp	r6, #3
    428a:	d8ef      	bhi.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
                    case FILL_YELLOW:
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    428c:	2202      	movs	r2, #2
    428e:	0021      	movs	r1, r4
    4290:	0028      	movs	r0, r5
    4292:	4b0c      	ldr	r3, [pc, #48]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    4294:	4798      	blx	r3
    4296:	e7e9      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    4298:	2201      	movs	r2, #1
    429a:	0021      	movs	r1, r4
    429c:	0028      	movs	r0, r5
    429e:	4b09      	ldr	r3, [pc, #36]	; (42c4 <gfx_eink_graphics_fill_screen+0xf0>)
    42a0:	4798      	blx	r3
    42a2:	e7e3      	b.n	426c <gfx_eink_graphics_fill_screen+0x98>
    for(dx = 0; dx < width_fill; dx++) {
    42a4:	3501      	adds	r5, #1
    42a6:	b2ad      	uxth	r5, r5
    42a8:	45a9      	cmp	r9, r5
    42aa:	d003      	beq.n	42b4 <gfx_eink_graphics_fill_screen+0xe0>
        for(dy = 0; dy < height_fill; dy++) {
    42ac:	2400      	movs	r4, #0
    42ae:	2f00      	cmp	r7, #0
    42b0:	d1e0      	bne.n	4274 <gfx_eink_graphics_fill_screen+0xa0>
    42b2:	e7f7      	b.n	42a4 <gfx_eink_graphics_fill_screen+0xd0>
                }
            }
        }
    }
}
    42b4:	bc0c      	pop	{r2, r3}
    42b6:	4690      	mov	r8, r2
    42b8:	4699      	mov	r9, r3
    42ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42bc:	20000434 	.word	0x20000434
    42c0:	00005584 	.word	0x00005584
    42c4:	00000595 	.word	0x00000595

000042c8 <gfx_eink_graphics_draw_rect>:
 * \param fill_type Color of the rectangle fill.
 *
 * \note Both the border and the fill can be set to blank should you want a border-less or empty rectangle.
 */
void gfx_eink_graphics_draw_rect(eink_coordinate x0, eink_coordinate y0, eink_coordinate width, eink_coordinate height, enum eink_pixel_colour line_colour, enum eink_fill_colour fill_colour)
{
    42c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ca:	46de      	mov	lr, fp
    42cc:	4657      	mov	r7, sl
    42ce:	464e      	mov	r6, r9
    42d0:	4645      	mov	r5, r8
    42d2:	b5e0      	push	{r5, r6, r7, lr}
    42d4:	b085      	sub	sp, #20
    42d6:	0007      	movs	r7, r0
    42d8:	9001      	str	r0, [sp, #4]
    42da:	4688      	mov	r8, r1
    42dc:	9203      	str	r2, [sp, #12]
    42de:	469b      	mov	fp, r3
    42e0:	ab0e      	add	r3, sp, #56	; 0x38
    42e2:	781e      	ldrb	r6, [r3, #0]
    42e4:	ab0f      	add	r3, sp, #60	; 0x3c
    42e6:	781c      	ldrb	r4, [r3, #0]
    eink_coordinate i, j;
    
    /* Draw rectangle borders first */
    for (i = x0; i < (x0+width); i++) {
    42e8:	4691      	mov	r9, r2
    42ea:	4684      	mov	ip, r0
    42ec:	44e1      	add	r9, ip
    42ee:	4548      	cmp	r0, r9
    42f0:	da1b      	bge.n	432a <gfx_eink_graphics_draw_rect+0x62>
        gfx_eink_set_pixel(i, y0, line_colour);
    42f2:	4d5a      	ldr	r5, [pc, #360]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    42f4:	465b      	mov	r3, fp
    42f6:	3b01      	subs	r3, #1
    42f8:	4443      	add	r3, r8
    42fa:	b29b      	uxth	r3, r3
    42fc:	9302      	str	r3, [sp, #8]
    42fe:	9600      	str	r6, [sp, #0]
    4300:	464e      	mov	r6, r9
    4302:	0023      	movs	r3, r4
    4304:	000c      	movs	r4, r1
    4306:	4698      	mov	r8, r3
        gfx_eink_set_pixel(i, y0, line_colour);
    4308:	9a00      	ldr	r2, [sp, #0]
    430a:	0021      	movs	r1, r4
    430c:	0038      	movs	r0, r7
    430e:	47a8      	blx	r5
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    4310:	9a00      	ldr	r2, [sp, #0]
    4312:	9902      	ldr	r1, [sp, #8]
    4314:	0038      	movs	r0, r7
    4316:	47a8      	blx	r5
    for (i = x0; i < (x0+width); i++) {
    4318:	3701      	adds	r7, #1
    431a:	b2bf      	uxth	r7, r7
    431c:	42b7      	cmp	r7, r6
    431e:	dbf3      	blt.n	4308 <gfx_eink_graphics_draw_rect+0x40>
    4320:	46b1      	mov	r9, r6
    4322:	9e00      	ldr	r6, [sp, #0]
    4324:	4643      	mov	r3, r8
    4326:	46a0      	mov	r8, r4
    4328:	001c      	movs	r4, r3
    }
    for (i = y0; i < (y0+height); i++) {
    432a:	46da      	mov	sl, fp
    432c:	44c2      	add	sl, r8
    432e:	45d0      	cmp	r8, sl
    4330:	da1a      	bge.n	4368 <gfx_eink_graphics_draw_rect+0xa0>
    4332:	4645      	mov	r5, r8
        gfx_eink_set_pixel(x0, i, line_colour);
    4334:	4f49      	ldr	r7, [pc, #292]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    4336:	9b03      	ldr	r3, [sp, #12]
    4338:	3b01      	subs	r3, #1
    433a:	9a01      	ldr	r2, [sp, #4]
    433c:	4694      	mov	ip, r2
    433e:	4463      	add	r3, ip
    4340:	b29b      	uxth	r3, r3
    4342:	9300      	str	r3, [sp, #0]
    4344:	0023      	movs	r3, r4
    4346:	4654      	mov	r4, sl
    4348:	469a      	mov	sl, r3
        gfx_eink_set_pixel(x0, i, line_colour);
    434a:	0032      	movs	r2, r6
    434c:	0029      	movs	r1, r5
    434e:	9801      	ldr	r0, [sp, #4]
    4350:	47b8      	blx	r7
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    4352:	0032      	movs	r2, r6
    4354:	0029      	movs	r1, r5
    4356:	9800      	ldr	r0, [sp, #0]
    4358:	47b8      	blx	r7
    for (i = y0; i < (y0+height); i++) {
    435a:	3501      	adds	r5, #1
    435c:	b2ad      	uxth	r5, r5
    435e:	42a5      	cmp	r5, r4
    4360:	dbf3      	blt.n	434a <gfx_eink_graphics_draw_rect+0x82>
    4362:	4653      	mov	r3, sl
    4364:	46a2      	mov	sl, r4
    4366:	001c      	movs	r4, r3
    }
    
    /* Add a fill if necessary */
    if (fill_colour != FILL_NONE) {
    4368:	2c08      	cmp	r4, #8
    436a:	d06f      	beq.n	444c <gfx_eink_graphics_draw_rect+0x184>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    436c:	9d01      	ldr	r5, [sp, #4]
    436e:	3501      	adds	r5, #1
    4370:	b2ad      	uxth	r5, r5
    4372:	2301      	movs	r3, #1
    4374:	425b      	negs	r3, r3
    4376:	469c      	mov	ip, r3
    4378:	44e1      	add	r9, ip
    437a:	454d      	cmp	r5, r9
    437c:	da66      	bge.n	444c <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
                {
                    switch (fill_colour) {
    437e:	00a3      	lsls	r3, r4, #2
    4380:	4a37      	ldr	r2, [pc, #220]	; (4460 <gfx_eink_graphics_draw_rect+0x198>)
    4382:	4693      	mov	fp, r2
    4384:	449b      	add	fp, r3
    4386:	e059      	b.n	443c <gfx_eink_graphics_draw_rect+0x174>
    4388:	2c07      	cmp	r4, #7
    438a:	d837      	bhi.n	43fc <gfx_eink_graphics_draw_rect+0x134>
    438c:	465b      	mov	r3, fp
    438e:	681b      	ldr	r3, [r3, #0]
    4390:	469f      	mov	pc, r3
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    4392:	2200      	movs	r2, #0
    4394:	0031      	movs	r1, r6
    4396:	0028      	movs	r0, r5
    4398:	4b30      	ldr	r3, [pc, #192]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    439a:	4798      	blx	r3
    439c:	e02e      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    439e:	2201      	movs	r2, #1
    43a0:	0031      	movs	r1, r6
    43a2:	0028      	movs	r0, r5
    43a4:	4b2d      	ldr	r3, [pc, #180]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    43a6:	4798      	blx	r3
    43a8:	e028      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_YELLOW: gfx_eink_set_pixel(i, j, PIXEL_YELLOW); break;
    43aa:	2203      	movs	r2, #3
    43ac:	0031      	movs	r1, r6
    43ae:	0028      	movs	r0, r5
    43b0:	4b2a      	ldr	r3, [pc, #168]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    43b2:	4798      	blx	r3
    43b4:	e022      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    43b6:	2202      	movs	r2, #2
    43b8:	0031      	movs	r1, r6
    43ba:	0028      	movs	r0, r5
    43bc:	4b27      	ldr	r3, [pc, #156]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    43be:	4798      	blx	r3
    43c0:	e01c      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_GREEN:  gfx_eink_set_pixel(i, j, PIXEL_GREEN); break;
    43c2:	2204      	movs	r2, #4
    43c4:	0031      	movs	r1, r6
    43c6:	0028      	movs	r0, r5
    43c8:	4b24      	ldr	r3, [pc, #144]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    43ca:	4798      	blx	r3
    43cc:	e016      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_BLUE:   gfx_eink_set_pixel(i, j, PIXEL_BLUE); break;
    43ce:	2205      	movs	r2, #5
    43d0:	0031      	movs	r1, r6
    43d2:	0028      	movs	r0, r5
    43d4:	4b21      	ldr	r3, [pc, #132]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    43d6:	4798      	blx	r3
    43d8:	e010      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_ORANGE: gfx_eink_set_pixel(i, j, PIXEL_ORANGE); break;
    43da:	2206      	movs	r2, #6
    43dc:	0031      	movs	r1, r6
    43de:	0028      	movs	r0, r5
    43e0:	4b1e      	ldr	r3, [pc, #120]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    43e2:	4798      	blx	r3
    43e4:	e00a      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_CLEAN:  gfx_eink_set_pixel(i, j, PIXEL_CLEAN); break;
    43e6:	2207      	movs	r2, #7
    43e8:	0031      	movs	r1, r6
    43ea:	0028      	movs	r0, r5
    43ec:	4b1b      	ldr	r3, [pc, #108]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    43ee:	4798      	blx	r3
    43f0:	e004      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                    }
                } else {
                    switch (fill_colour) {
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    43f2:	2200      	movs	r2, #0
    43f4:	0031      	movs	r1, r6
    43f6:	0028      	movs	r0, r5
    43f8:	4b18      	ldr	r3, [pc, #96]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    43fa:	4798      	blx	r3
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    43fc:	3601      	adds	r6, #1
    43fe:	b2b6      	uxth	r6, r6
    4400:	42be      	cmp	r6, r7
    4402:	da17      	bge.n	4434 <gfx_eink_graphics_draw_rect+0x16c>
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    4404:	4b17      	ldr	r3, [pc, #92]	; (4464 <gfx_eink_graphics_draw_rect+0x19c>)
    4406:	681b      	ldr	r3, [r3, #0]
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	3b06      	subs	r3, #6
    440c:	2b01      	cmp	r3, #1
    440e:	d9bb      	bls.n	4388 <gfx_eink_graphics_draw_rect+0xc0>
                    switch (fill_colour) {
    4410:	2c01      	cmp	r4, #1
    4412:	d009      	beq.n	4428 <gfx_eink_graphics_draw_rect+0x160>
    4414:	2c00      	cmp	r4, #0
    4416:	d0ec      	beq.n	43f2 <gfx_eink_graphics_draw_rect+0x12a>
    4418:	2c03      	cmp	r4, #3
    441a:	d8ef      	bhi.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
                        case FILL_YELLOW:
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    441c:	2202      	movs	r2, #2
    441e:	0031      	movs	r1, r6
    4420:	0028      	movs	r0, r5
    4422:	4b0e      	ldr	r3, [pc, #56]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    4424:	4798      	blx	r3
    4426:	e7e9      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    4428:	2201      	movs	r2, #1
    442a:	0031      	movs	r1, r6
    442c:	0028      	movs	r0, r5
    442e:	4b0b      	ldr	r3, [pc, #44]	; (445c <gfx_eink_graphics_draw_rect+0x194>)
    4430:	4798      	blx	r3
    4432:	e7e3      	b.n	43fc <gfx_eink_graphics_draw_rect+0x134>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    4434:	3501      	adds	r5, #1
    4436:	b2ad      	uxth	r5, r5
    4438:	454d      	cmp	r5, r9
    443a:	da07      	bge.n	444c <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    443c:	4643      	mov	r3, r8
    443e:	1c5e      	adds	r6, r3, #1
    4440:	b2b6      	uxth	r6, r6
    4442:	4653      	mov	r3, sl
    4444:	1e5f      	subs	r7, r3, #1
    4446:	42be      	cmp	r6, r7
    4448:	dbdc      	blt.n	4404 <gfx_eink_graphics_draw_rect+0x13c>
    444a:	e7f3      	b.n	4434 <gfx_eink_graphics_draw_rect+0x16c>
                    }
                }
            }
        }
    }
}
    444c:	b005      	add	sp, #20
    444e:	bc3c      	pop	{r2, r3, r4, r5}
    4450:	4690      	mov	r8, r2
    4452:	4699      	mov	r9, r3
    4454:	46a2      	mov	sl, r4
    4456:	46ab      	mov	fp, r5
    4458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	00000595 	.word	0x00000595
    4460:	000055a4 	.word	0x000055a4
    4464:	20000434 	.word	0x20000434

00004468 <_gfx_eink_text_write_character>:
 * \param text_colour Color of character.
 * \param text_colour_value Pixel value of character.
 * \param eink_font Font structure to use. 
 */
void _gfx_eink_text_write_character(char character, eink_coordinate start_x, eink_coordinate start_y, uint8_t colour_raw, enum eink_pixel_colour text_colour, uint8_t text_colour_value, struct gfx_eink_font eink_font)
{
    4468:	b5f0      	push	{r4, r5, r6, r7, lr}
    446a:	46de      	mov	lr, fp
    446c:	4657      	mov	r7, sl
    446e:	464e      	mov	r6, r9
    4470:	4645      	mov	r5, r8
    4472:	b5e0      	push	{r5, r6, r7, lr}
    4474:	b08f      	sub	sp, #60	; 0x3c
    4476:	4694      	mov	ip, r2
    4478:	9202      	str	r2, [sp, #8]
    447a:	4698      	mov	r8, r3
    447c:	ab18      	add	r3, sp, #96	; 0x60
    447e:	781b      	ldrb	r3, [r3, #0]
    4480:	9300      	str	r3, [sp, #0]
    4482:	ab19      	add	r3, sp, #100	; 0x64
    4484:	781b      	ldrb	r3, [r3, #0]
    4486:	9301      	str	r3, [sp, #4]
    4488:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    448a:	ab1a      	add	r3, sp, #104	; 0x68
    448c:	7b5d      	ldrb	r5, [r3, #13]
    448e:	7b9e      	ldrb	r6, [r3, #14]
    4490:	46b1      	mov	r9, r6
    4492:	7bde      	ldrb	r6, [r3, #15]
    volatile eink_coordinate current_y, send_y;
    
    uint8_t *font_character_size_map_ptr;
    uint8_t *font_array_ptr;
    
    current_x = start_x;
    4494:	af04      	add	r7, sp, #16
    4496:	80f9      	strh	r1, [r7, #6]
    current_y = start_y;
    4498:	1cba      	adds	r2, r7, #2
    449a:	4661      	mov	r1, ip
    449c:	8011      	strh	r1, [r2, #0]
    
    /* Get the index of the start of the character in the font array */
    start_font_index = 0;
    449e:	2200      	movs	r2, #0
    44a0:	920a      	str	r2, [sp, #40]	; 0x28
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    current_char_index = character - eink_font.font_starting_ascii_char;
    44a2:	7b1b      	ldrb	r3, [r3, #12]
    44a4:	1ac0      	subs	r0, r0, r3
    44a6:	900b      	str	r0, [sp, #44]	; 0x2c
    for(i = 0; i < current_char_index; i++) {
    44a8:	9208      	str	r2, [sp, #32]
    44aa:	9a08      	ldr	r2, [sp, #32]
    44ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44ae:	429a      	cmp	r2, r3
    44b0:	d237      	bcs.n	4522 <_gfx_eink_text_write_character+0xba>
    44b2:	0021      	movs	r1, r4
        start_font_index += (*font_character_size_map_ptr * eink_font.font_height_bytes);
    44b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    44b6:	780b      	ldrb	r3, [r1, #0]
    44b8:	436b      	muls	r3, r5
    44ba:	189b      	adds	r3, r3, r2
    44bc:	930a      	str	r3, [sp, #40]	; 0x28
        font_character_size_map_ptr++;
    44be:	3101      	adds	r1, #1
    for(i = 0; i < current_char_index; i++) {
    44c0:	9b08      	ldr	r3, [sp, #32]
    44c2:	3301      	adds	r3, #1
    44c4:	9308      	str	r3, [sp, #32]
    44c6:	9a08      	ldr	r2, [sp, #32]
    44c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44ca:	429a      	cmp	r2, r3
    44cc:	d3f2      	bcc.n	44b4 <_gfx_eink_text_write_character+0x4c>
    }
    
    /* Ensure the chosen character is still in the font array */
    if( (start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) ) < (eink_font.font_array_size + (eink_font.font_character_size_map_ptr[current_char_index] * eink_font.font_height_bytes) )) {
    44ce:	780a      	ldrb	r2, [r1, #0]
    44d0:	436a      	muls	r2, r5
    44d2:	990a      	ldr	r1, [sp, #40]	; 0x28
    44d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44d6:	1851      	adds	r1, r2, r1
    44d8:	5ce3      	ldrb	r3, [r4, r3]
    44da:	436b      	muls	r3, r5
    44dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
    44de:	4684      	mov	ip, r0
    44e0:	4463      	add	r3, ip
    44e2:	4299      	cmp	r1, r3
    44e4:	d300      	bcc.n	44e8 <_gfx_eink_text_write_character+0x80>
    44e6:	e0ea      	b.n	46be <_gfx_eink_text_write_character+0x256>
        
        /* Move the pointer to the character starting byte */
        font_array_ptr = (uint8_t*) eink_font.font_array_ptr;
    44e8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
        if(ptr_eink_gfx_config->gfx_display == GFX_IT8951)
    44ea:	4b78      	ldr	r3, [pc, #480]	; (46cc <_gfx_eink_text_write_character+0x264>)
    44ec:	681b      	ldr	r3, [r3, #0]
    44ee:	781b      	ldrb	r3, [r3, #0]
    44f0:	2b0a      	cmp	r3, #10
    44f2:	d018      	beq.n	4526 <_gfx_eink_text_write_character+0xbe>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
        else
            font_array_ptr += start_font_index;
    44f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    44f6:	18e4      	adds	r4, r4, r3
    
       /**
        * Loop horizontally through the columns of the font first,
        * then loop vertically through each row of the font (bit by bit)
        */
        j = 0;
    44f8:	2300      	movs	r3, #0
    44fa:	9307      	str	r3, [sp, #28]
        end_font_index = start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) - 1;
    44fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    44fe:	3b01      	subs	r3, #1
    4500:	189a      	adds	r2, r3, r2
    4502:	9209      	str	r2, [sp, #36]	; 0x24
        for (i = start_font_index; i <= end_font_index; i++) {
    4504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4506:	9308      	str	r3, [sp, #32]
    4508:	9a08      	ldr	r2, [sp, #32]
    450a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    450c:	429a      	cmp	r2, r3
    450e:	d900      	bls.n	4512 <_gfx_eink_text_write_character+0xaa>
    4510:	e0d5      	b.n	46be <_gfx_eink_text_write_character+0x256>
            j++;
            current_y += 8;
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
            else font_array_ptr += sizeof(uint8_t);
            
            if(j == eink_font.font_height_bytes) {
    4512:	46aa      	mov	sl, r5
                j = 0;
                current_y = start_y;
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    4514:	006b      	lsls	r3, r5, #1
    4516:	9303      	str	r3, [sp, #12]
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    4518:	4b6d      	ldr	r3, [pc, #436]	; (46d0 <_gfx_eink_text_write_character+0x268>)
    451a:	469b      	mov	fp, r3
                    send_y = (current_y + (m));
    451c:	ab04      	add	r3, sp, #16
    451e:	1c9d      	adds	r5, r3, #2
    4520:	e0a3      	b.n	466a <_gfx_eink_text_write_character+0x202>
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    4522:	0021      	movs	r1, r4
    4524:	e7d3      	b.n	44ce <_gfx_eink_text_write_character+0x66>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
    4526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4528:	3b01      	subs	r3, #1
    452a:	195b      	adds	r3, r3, r5
    452c:	18e4      	adds	r4, r4, r3
    452e:	e7e3      	b.n	44f8 <_gfx_eink_text_write_character+0x90>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    4530:	464b      	mov	r3, r9
    4532:	2b01      	cmp	r3, #1
    4534:	d009      	beq.n	454a <_gfx_eink_text_write_character+0xe2>
                m = 0;
    4536:	2300      	movs	r3, #0
    4538:	9306      	str	r3, [sp, #24]
                for (k = 8; k > 0; k--) {
    453a:	3308      	adds	r3, #8
    453c:	930d      	str	r3, [sp, #52]	; 0x34
    453e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4540:	2b00      	cmp	r3, #0
    4542:	d100      	bne.n	4546 <_gfx_eink_text_write_character+0xde>
    4544:	e07a      	b.n	463c <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    4546:	2701      	movs	r7, #1
    4548:	e051      	b.n	45ee <_gfx_eink_text_write_character+0x186>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    454a:	4b60      	ldr	r3, [pc, #384]	; (46cc <_gfx_eink_text_write_character+0x264>)
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	781b      	ldrb	r3, [r3, #0]
    4550:	2b0a      	cmp	r3, #10
    4552:	d1f0      	bne.n	4536 <_gfx_eink_text_write_character+0xce>
    4554:	e093      	b.n	467e <_gfx_eink_text_write_character+0x216>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    4556:	2e00      	cmp	r6, #0
    4558:	d125      	bne.n	45a6 <_gfx_eink_text_write_character+0x13e>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    455a:	4643      	mov	r3, r8
    455c:	2b00      	cmp	r3, #0
    455e:	d128      	bne.n	45b2 <_gfx_eink_text_write_character+0x14a>
    4560:	ab05      	add	r3, sp, #20
    4562:	8818      	ldrh	r0, [r3, #0]
    4564:	b280      	uxth	r0, r0
    4566:	ab04      	add	r3, sp, #16
    4568:	8819      	ldrh	r1, [r3, #0]
    456a:	b289      	uxth	r1, r1
    456c:	9a00      	ldr	r2, [sp, #0]
    456e:	4b59      	ldr	r3, [pc, #356]	; (46d4 <_gfx_eink_text_write_character+0x26c>)
    4570:	4798      	blx	r3
                for (k = 0; k < 8; k++) {
    4572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4574:	3301      	adds	r3, #1
    4576:	930d      	str	r3, [sp, #52]	; 0x34
    4578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    457a:	2b07      	cmp	r3, #7
    457c:	d85e      	bhi.n	463c <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    457e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4580:	7823      	ldrb	r3, [r4, #0]
    4582:	4113      	asrs	r3, r2
    4584:	403b      	ands	r3, r7
    4586:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    4588:	ab04      	add	r3, sp, #16
    458a:	3306      	adds	r3, #6
    458c:	881b      	ldrh	r3, [r3, #0]
    458e:	b29b      	uxth	r3, r3
    4590:	aa05      	add	r2, sp, #20
    4592:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + k);
    4594:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4596:	882b      	ldrh	r3, [r5, #0]
    4598:	189b      	adds	r3, r3, r2
    459a:	b29b      	uxth	r3, r3
    459c:	aa04      	add	r2, sp, #16
    459e:	8013      	strh	r3, [r2, #0]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    45a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    45a2:	2b01      	cmp	r3, #1
    45a4:	d0d7      	beq.n	4556 <_gfx_eink_text_write_character+0xee>
    45a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    45a8:	2b00      	cmp	r3, #0
    45aa:	d1e2      	bne.n	4572 <_gfx_eink_text_write_character+0x10a>
    45ac:	2e01      	cmp	r6, #1
    45ae:	d1e0      	bne.n	4572 <_gfx_eink_text_write_character+0x10a>
    45b0:	e7d3      	b.n	455a <_gfx_eink_text_write_character+0xf2>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    45b2:	ab05      	add	r3, sp, #20
    45b4:	8818      	ldrh	r0, [r3, #0]
    45b6:	b280      	uxth	r0, r0
    45b8:	ab04      	add	r3, sp, #16
    45ba:	8819      	ldrh	r1, [r3, #0]
    45bc:	b289      	uxth	r1, r1
    45be:	9a01      	ldr	r2, [sp, #4]
    45c0:	4b43      	ldr	r3, [pc, #268]	; (46d0 <_gfx_eink_text_write_character+0x268>)
    45c2:	4798      	blx	r3
    45c4:	e7d5      	b.n	4572 <_gfx_eink_text_write_character+0x10a>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    45c6:	2e00      	cmp	r6, #0
    45c8:	d129      	bne.n	461e <_gfx_eink_text_write_character+0x1b6>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    45ca:	4643      	mov	r3, r8
    45cc:	2b00      	cmp	r3, #0
    45ce:	d12c      	bne.n	462a <_gfx_eink_text_write_character+0x1c2>
    45d0:	ab05      	add	r3, sp, #20
    45d2:	8818      	ldrh	r0, [r3, #0]
    45d4:	b280      	uxth	r0, r0
    45d6:	ab04      	add	r3, sp, #16
    45d8:	8819      	ldrh	r1, [r3, #0]
    45da:	b289      	uxth	r1, r1
    45dc:	9a00      	ldr	r2, [sp, #0]
    45de:	4b3d      	ldr	r3, [pc, #244]	; (46d4 <_gfx_eink_text_write_character+0x26c>)
    45e0:	4798      	blx	r3
                for (k = 8; k > 0; k--) {
    45e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    45e4:	3b01      	subs	r3, #1
    45e6:	930d      	str	r3, [sp, #52]	; 0x34
    45e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    45ea:	2b00      	cmp	r3, #0
    45ec:	d026      	beq.n	463c <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    45ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    45f0:	7823      	ldrb	r3, [r4, #0]
    45f2:	3a01      	subs	r2, #1
    45f4:	4113      	asrs	r3, r2
    45f6:	403b      	ands	r3, r7
    45f8:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    45fa:	ab04      	add	r3, sp, #16
    45fc:	3306      	adds	r3, #6
    45fe:	881b      	ldrh	r3, [r3, #0]
    4600:	b29b      	uxth	r3, r3
    4602:	aa05      	add	r2, sp, #20
    4604:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + (m));
    4606:	9a06      	ldr	r2, [sp, #24]
    4608:	882b      	ldrh	r3, [r5, #0]
    460a:	189b      	adds	r3, r3, r2
    460c:	b29b      	uxth	r3, r3
    460e:	aa04      	add	r2, sp, #16
    4610:	8013      	strh	r3, [r2, #0]
                    m++;
    4612:	9b06      	ldr	r3, [sp, #24]
    4614:	3301      	adds	r3, #1
    4616:	9306      	str	r3, [sp, #24]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    4618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    461a:	2b01      	cmp	r3, #1
    461c:	d0d3      	beq.n	45c6 <_gfx_eink_text_write_character+0x15e>
    461e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4620:	2b00      	cmp	r3, #0
    4622:	d1de      	bne.n	45e2 <_gfx_eink_text_write_character+0x17a>
    4624:	2e01      	cmp	r6, #1
    4626:	d1dc      	bne.n	45e2 <_gfx_eink_text_write_character+0x17a>
    4628:	e7cf      	b.n	45ca <_gfx_eink_text_write_character+0x162>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    462a:	ab05      	add	r3, sp, #20
    462c:	8818      	ldrh	r0, [r3, #0]
    462e:	b280      	uxth	r0, r0
    4630:	ab04      	add	r3, sp, #16
    4632:	8819      	ldrh	r1, [r3, #0]
    4634:	b289      	uxth	r1, r1
    4636:	9a01      	ldr	r2, [sp, #4]
    4638:	47d8      	blx	fp
    463a:	e7d2      	b.n	45e2 <_gfx_eink_text_write_character+0x17a>
            j++;
    463c:	9b07      	ldr	r3, [sp, #28]
    463e:	3301      	adds	r3, #1
    4640:	9307      	str	r3, [sp, #28]
            current_y += 8;
    4642:	882b      	ldrh	r3, [r5, #0]
    4644:	3308      	adds	r3, #8
    4646:	b29b      	uxth	r3, r3
    4648:	802b      	strh	r3, [r5, #0]
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    464a:	4b20      	ldr	r3, [pc, #128]	; (46cc <_gfx_eink_text_write_character+0x264>)
    464c:	681b      	ldr	r3, [r3, #0]
    464e:	781b      	ldrb	r3, [r3, #0]
    4650:	2b0a      	cmp	r3, #10
    4652:	d01b      	beq.n	468c <_gfx_eink_text_write_character+0x224>
            else font_array_ptr += sizeof(uint8_t);
    4654:	3401      	adds	r4, #1
            if(j == eink_font.font_height_bytes) {
    4656:	9b07      	ldr	r3, [sp, #28]
    4658:	459a      	cmp	sl, r3
    465a:	d024      	beq.n	46a6 <_gfx_eink_text_write_character+0x23e>
        for (i = start_font_index; i <= end_font_index; i++) {
    465c:	9b08      	ldr	r3, [sp, #32]
    465e:	3301      	adds	r3, #1
    4660:	9308      	str	r3, [sp, #32]
    4662:	9a08      	ldr	r2, [sp, #32]
    4664:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4666:	429a      	cmp	r2, r3
    4668:	d829      	bhi.n	46be <_gfx_eink_text_write_character+0x256>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    466a:	464b      	mov	r3, r9
    466c:	2b00      	cmp	r3, #0
    466e:	d000      	beq.n	4672 <_gfx_eink_text_write_character+0x20a>
    4670:	e75e      	b.n	4530 <_gfx_eink_text_write_character+0xc8>
    4672:	4b16      	ldr	r3, [pc, #88]	; (46cc <_gfx_eink_text_write_character+0x264>)
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	781b      	ldrb	r3, [r3, #0]
    4678:	2b0a      	cmp	r3, #10
    467a:	d100      	bne.n	467e <_gfx_eink_text_write_character+0x216>
    467c:	e75b      	b.n	4536 <_gfx_eink_text_write_character+0xce>
                for (k = 0; k < 8; k++) {
    467e:	2300      	movs	r3, #0
    4680:	930d      	str	r3, [sp, #52]	; 0x34
    4682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4684:	2b07      	cmp	r3, #7
    4686:	d8d9      	bhi.n	463c <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    4688:	2701      	movs	r7, #1
    468a:	e778      	b.n	457e <_gfx_eink_text_write_character+0x116>
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    468c:	3c01      	subs	r4, #1
            if(j == eink_font.font_height_bytes) {
    468e:	9b07      	ldr	r3, [sp, #28]
    4690:	459a      	cmp	sl, r3
    4692:	d1e3      	bne.n	465c <_gfx_eink_text_write_character+0x1f4>
                j = 0;
    4694:	2300      	movs	r3, #0
    4696:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    4698:	466b      	mov	r3, sp
    469a:	891b      	ldrh	r3, [r3, #8]
    469c:	802b      	strh	r3, [r5, #0]
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    469e:	9b03      	ldr	r3, [sp, #12]
    46a0:	469c      	mov	ip, r3
    46a2:	4464      	add	r4, ip
    46a4:	e004      	b.n	46b0 <_gfx_eink_text_write_character+0x248>
                j = 0;
    46a6:	2300      	movs	r3, #0
    46a8:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    46aa:	466b      	mov	r3, sp
    46ac:	891b      	ldrh	r3, [r3, #8]
    46ae:	802b      	strh	r3, [r5, #0]
                
                current_x++;
    46b0:	ab04      	add	r3, sp, #16
    46b2:	1d9a      	adds	r2, r3, #6
    46b4:	88db      	ldrh	r3, [r3, #6]
    46b6:	3301      	adds	r3, #1
    46b8:	b29b      	uxth	r3, r3
    46ba:	8013      	strh	r3, [r2, #0]
    46bc:	e7ce      	b.n	465c <_gfx_eink_text_write_character+0x1f4>
            }
        }
    }
}
    46be:	b00f      	add	sp, #60	; 0x3c
    46c0:	bc3c      	pop	{r2, r3, r4, r5}
    46c2:	4690      	mov	r8, r2
    46c4:	4699      	mov	r9, r3
    46c6:	46a2      	mov	sl, r4
    46c8:	46ab      	mov	fp, r5
    46ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46cc:	20000434 	.word	0x20000434
    46d0:	000005a5 	.word	0x000005a5
    46d4:	00000595 	.word	0x00000595

000046d8 <gfx_eink_text_write_string_raw>:
 * \param start_y Y coordinate to start writing.
 * \param text_colour_value Pixel value of character.
 * \param eink_font Font structure to use.
 */
void gfx_eink_text_write_string_raw(char *char_array, eink_coordinate start_x, eink_coordinate start_y, uint8_t text_colour_value, struct gfx_eink_font eink_font)
{
    46d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46da:	46de      	mov	lr, fp
    46dc:	4657      	mov	r7, sl
    46de:	464e      	mov	r6, r9
    46e0:	4645      	mov	r5, r8
    46e2:	b5e0      	push	{r5, r6, r7, lr}
    46e4:	b089      	sub	sp, #36	; 0x24
    46e6:	4680      	mov	r8, r0
    46e8:	000c      	movs	r4, r1
    46ea:	9206      	str	r2, [sp, #24]
    46ec:	4699      	mov	r9, r3
    uint8_t i = 0;
    eink_coordinate x_send = start_x;
    
    while(char_array[i] != '\0')
    46ee:	7800      	ldrb	r0, [r0, #0]
    46f0:	2800      	cmp	r0, #0
    46f2:	d027      	beq.n	4744 <gfx_eink_text_write_string_raw+0x6c>
    46f4:	4647      	mov	r7, r8
    46f6:	2500      	movs	r5, #0
    {
        _gfx_eink_text_write_character(char_array[i], x_send, start_y, 1, 0, text_colour_value, eink_font);
    46f8:	ae02      	add	r6, sp, #8
    46fa:	2300      	movs	r3, #0
    46fc:	469b      	mov	fp, r3
    46fe:	4b15      	ldr	r3, [pc, #84]	; (4754 <gfx_eink_text_write_string_raw+0x7c>)
    4700:	469a      	mov	sl, r3
    4702:	4684      	mov	ip, r0
    4704:	9607      	str	r6, [sp, #28]
    4706:	9b07      	ldr	r3, [sp, #28]
    4708:	aa12      	add	r2, sp, #72	; 0x48
    470a:	ca43      	ldmia	r2!, {r0, r1, r6}
    470c:	c343      	stmia	r3!, {r0, r1, r6}
    470e:	6812      	ldr	r2, [r2, #0]
    4710:	601a      	str	r2, [r3, #0]
    4712:	464b      	mov	r3, r9
    4714:	9301      	str	r3, [sp, #4]
    4716:	465b      	mov	r3, fp
    4718:	9300      	str	r3, [sp, #0]
    471a:	2301      	movs	r3, #1
    471c:	9a06      	ldr	r2, [sp, #24]
    471e:	0021      	movs	r1, r4
    4720:	4660      	mov	r0, ip
    4722:	47d0      	blx	sl
            
        x_send += eink_font.font_character_size_map_ptr[char_array[i]-eink_font.font_starting_ascii_char];
    4724:	783b      	ldrb	r3, [r7, #0]
    4726:	aa12      	add	r2, sp, #72	; 0x48
    4728:	7b12      	ldrb	r2, [r2, #12]
    472a:	1a9b      	subs	r3, r3, r2
    472c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    472e:	5cd3      	ldrb	r3, [r2, r3]
    4730:	18e4      	adds	r4, r4, r3
    4732:	b2a4      	uxth	r4, r4
        i++;        
    4734:	3501      	adds	r5, #1
    4736:	b2ed      	uxtb	r5, r5
    while(char_array[i] != '\0')
    4738:	4643      	mov	r3, r8
    473a:	195f      	adds	r7, r3, r5
    473c:	783b      	ldrb	r3, [r7, #0]
    473e:	469c      	mov	ip, r3
    4740:	2b00      	cmp	r3, #0
    4742:	d1e0      	bne.n	4706 <gfx_eink_text_write_string_raw+0x2e>
    }
    4744:	b009      	add	sp, #36	; 0x24
    4746:	bc3c      	pop	{r2, r3, r4, r5}
    4748:	4690      	mov	r8, r2
    474a:	4699      	mov	r9, r3
    474c:	46a2      	mov	sl, r4
    474e:	46ab      	mov	fp, r5
    4750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	00004469 	.word	0x00004469

00004758 <eink_init_display>:
	
	gpio_set_pin_level(EINK_X_LED_0_PIN, 1);	
}

void eink_init_display(void)
{
    4758:	b500      	push	{lr}
    475a:	b083      	sub	sp, #12
    config->update_mode = UPDATE_SLOW;
    475c:	a801      	add	r0, sp, #4
    475e:	2300      	movs	r3, #0
    4760:	7043      	strb	r3, [r0, #1]
    config->uc8173_display = UC8173_ED013TC1;
    4762:	7083      	strb	r3, [r0, #2]
    config->uc8173_current_lut = UC8173_LUT_NONE;
    4764:	3303      	adds	r3, #3
    4766:	70c3      	strb	r3, [r0, #3]
	struct uc8173_config eink_conf;
	
	uc8173_get_config_defaults(&eink_conf);
	eink_conf.display_rotation = ROTATE_90;
    4768:	3b02      	subs	r3, #2
    476a:	7003      	strb	r3, [r0, #0]
	eink_conf.update_mode = UPDATE_SLOW;
	eink_et011tt2_init(&eink_conf, false);
    476c:	2100      	movs	r1, #0
    476e:	4b02      	ldr	r3, [pc, #8]	; (4778 <eink_init_display+0x20>)
    4770:	4798      	blx	r3
    4772:	b003      	add	sp, #12
    4774:	bd00      	pop	{pc}
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	00003965 	.word	0x00003965

0000477c <main>:
{
    477c:	b5f0      	push	{r4, r5, r6, r7, lr}
    477e:	46d6      	mov	lr, sl
    4780:	464f      	mov	r7, r9
    4782:	b580      	push	{r7, lr}
    4784:	b089      	sub	sp, #36	; 0x24
	system_init();
    4786:	4b43      	ldr	r3, [pc, #268]	; (4894 <main+0x118>)
    4788:	4798      	blx	r3
	eink_init_display();
    478a:	4b43      	ldr	r3, [pc, #268]	; (4898 <main+0x11c>)
    478c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    478e:	2180      	movs	r1, #128	; 0x80
    4790:	05c9      	lsls	r1, r1, #23
    4792:	2398      	movs	r3, #152	; 0x98
    4794:	22c0      	movs	r2, #192	; 0xc0
    4796:	05d2      	lsls	r2, r2, #23
    4798:	50d1      	str	r1, [r2, r3]
	gfx_eink_graphics_fill_screen_raw(0xFF);
    479a:	20ff      	movs	r0, #255	; 0xff
    479c:	4c3f      	ldr	r4, [pc, #252]	; (489c <main+0x120>)
    479e:	47a0      	blx	r4
	uc8173_global_instance.display_config.update_mode = UPDATE_SLOW;
    47a0:	4f3f      	ldr	r7, [pc, #252]	; (48a0 <main+0x124>)
    47a2:	2300      	movs	r3, #0
    47a4:	4699      	mov	r9, r3
    47a6:	707b      	strb	r3, [r7, #1]
	gfx_eink_put_display_buffer(true);
    47a8:	2001      	movs	r0, #1
    47aa:	4d3e      	ldr	r5, [pc, #248]	; (48a4 <main+0x128>)
    47ac:	47a8      	blx	r5
	delay_ms(1000);
    47ae:	20fa      	movs	r0, #250	; 0xfa
    47b0:	0080      	lsls	r0, r0, #2
    47b2:	4e3d      	ldr	r6, [pc, #244]	; (48a8 <main+0x12c>)
    47b4:	47b0      	blx	r6

/**
 * \brief Load 4-bit Greyscale Image function.
 */                         
static void gfx_eink_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place) {
    ptr_eink_gfx_config->load_4bgrey_image(img_array, array_size, image_width_px, image_height_bytes, x_place, y_place);
    47b6:	4b3d      	ldr	r3, [pc, #244]	; (48ac <main+0x130>)
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	2244      	movs	r2, #68	; 0x44
    47bc:	9201      	str	r2, [sp, #4]
    47be:	3a1c      	subs	r2, #28
    47c0:	9200      	str	r2, [sp, #0]
    47c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47c4:	469a      	mov	sl, r3
    47c6:	231a      	movs	r3, #26
    47c8:	3278      	adds	r2, #120	; 0x78
    47ca:	2182      	movs	r1, #130	; 0x82
    47cc:	0149      	lsls	r1, r1, #5
    47ce:	4838      	ldr	r0, [pc, #224]	; (48b0 <main+0x134>)
    47d0:	301c      	adds	r0, #28
    47d2:	47d0      	blx	sl
	uc8173_global_instance.display_config.update_mode = UPDATE_SLOW;
    47d4:	464b      	mov	r3, r9
    47d6:	707b      	strb	r3, [r7, #1]
	gfx_eink_put_display_buffer(true);
    47d8:	2001      	movs	r0, #1
    47da:	47a8      	blx	r5
	delay_ms(1000);
    47dc:	20fa      	movs	r0, #250	; 0xfa
    47de:	0080      	lsls	r0, r0, #2
    47e0:	47b0      	blx	r6
	gfx_eink_graphics_fill_screen_raw(0xFF);
    47e2:	20ff      	movs	r0, #255	; 0xff
    47e4:	47a0      	blx	r4
	gfx_eink_text_write_string_raw("Counter", 70, 35, 0x1, ArvoBold_18pt);
    47e6:	4c33      	ldr	r4, [pc, #204]	; (48b4 <main+0x138>)
    47e8:	0023      	movs	r3, r4
    47ea:	3354      	adds	r3, #84	; 0x54
    47ec:	466f      	mov	r7, sp
    47ee:	cb07      	ldmia	r3!, {r0, r1, r2}
    47f0:	c707      	stmia	r7!, {r0, r1, r2}
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	603b      	str	r3, [r7, #0]
    47f6:	2301      	movs	r3, #1
    47f8:	2223      	movs	r2, #35	; 0x23
    47fa:	2146      	movs	r1, #70	; 0x46
    47fc:	482e      	ldr	r0, [pc, #184]	; (48b8 <main+0x13c>)
    47fe:	4e2f      	ldr	r6, [pc, #188]	; (48bc <main+0x140>)
    4800:	47b0      	blx	r6
	sprintf(writeText, "%d", i);
    4802:	220a      	movs	r2, #10
    4804:	492e      	ldr	r1, [pc, #184]	; (48c0 <main+0x144>)
    4806:	a804      	add	r0, sp, #16
    4808:	4b2e      	ldr	r3, [pc, #184]	; (48c4 <main+0x148>)
    480a:	4798      	blx	r3
	gfx_eink_text_write_string_raw(writeText, 62, 52, 0x0, RobotoBold_76pt);
    480c:	3464      	adds	r4, #100	; 0x64
    480e:	466b      	mov	r3, sp
    4810:	cc07      	ldmia	r4!, {r0, r1, r2}
    4812:	c307      	stmia	r3!, {r0, r1, r2}
    4814:	6823      	ldr	r3, [r4, #0]
    4816:	603b      	str	r3, [r7, #0]
    4818:	2300      	movs	r3, #0
    481a:	2234      	movs	r2, #52	; 0x34
    481c:	213e      	movs	r1, #62	; 0x3e
    481e:	a804      	add	r0, sp, #16
    4820:	47b0      	blx	r6
	gfx_eink_put_display_buffer(true);
    4822:	2001      	movs	r0, #1
    4824:	47a8      	blx	r5
    4826:	240b      	movs	r4, #11
		gfx_eink_graphics_draw_rect(50, 70, 140, 100, PIXEL_NONE, FILL_WHITE);
    4828:	2601      	movs	r6, #1
    482a:	4f27      	ldr	r7, [pc, #156]	; (48c8 <main+0x14c>)
    482c:	9601      	str	r6, [sp, #4]
    482e:	2308      	movs	r3, #8
    4830:	9300      	str	r3, [sp, #0]
    4832:	335c      	adds	r3, #92	; 0x5c
    4834:	228c      	movs	r2, #140	; 0x8c
    4836:	2146      	movs	r1, #70	; 0x46
    4838:	2032      	movs	r0, #50	; 0x32
    483a:	47b8      	blx	r7
		sprintf(writeText, "%d", i);
    483c:	0022      	movs	r2, r4
    483e:	4920      	ldr	r1, [pc, #128]	; (48c0 <main+0x144>)
    4840:	a804      	add	r0, sp, #16
    4842:	4b20      	ldr	r3, [pc, #128]	; (48c4 <main+0x148>)
    4844:	4798      	blx	r3
		gfx_eink_text_write_string_raw(writeText, 62, 52, 0x0, RobotoBold_76pt);
    4846:	4b1b      	ldr	r3, [pc, #108]	; (48b4 <main+0x138>)
    4848:	3364      	adds	r3, #100	; 0x64
    484a:	466a      	mov	r2, sp
    484c:	cb23      	ldmia	r3!, {r0, r1, r5}
    484e:	c223      	stmia	r2!, {r0, r1, r5}
    4850:	681b      	ldr	r3, [r3, #0]
    4852:	6013      	str	r3, [r2, #0]
    4854:	2300      	movs	r3, #0
    4856:	2234      	movs	r2, #52	; 0x34
    4858:	213e      	movs	r1, #62	; 0x3e
    485a:	a804      	add	r0, sp, #16
    485c:	4d17      	ldr	r5, [pc, #92]	; (48bc <main+0x140>)
    485e:	47a8      	blx	r5
		uc8173_global_instance.display_config.update_mode = UPDATE_FAST;
    4860:	4b0f      	ldr	r3, [pc, #60]	; (48a0 <main+0x124>)
    4862:	705e      	strb	r6, [r3, #1]
		gfx_eink_put_display_buffer(true);
    4864:	0030      	movs	r0, r6
    4866:	4b0f      	ldr	r3, [pc, #60]	; (48a4 <main+0x128>)
    4868:	4798      	blx	r3
    486a:	3401      	adds	r4, #1
	for(uint8_t i = 11; i < 20; i++)
    486c:	2c14      	cmp	r4, #20
    486e:	d1dd      	bne.n	482c <main+0xb0>
	uc8173_global_instance.display_config.update_mode = UPDATE_SLOW;
    4870:	2200      	movs	r2, #0
    4872:	4b0b      	ldr	r3, [pc, #44]	; (48a0 <main+0x124>)
    4874:	705a      	strb	r2, [r3, #1]
	gfx_eink_put_display_buffer(true);
    4876:	2001      	movs	r0, #1
    4878:	4b0a      	ldr	r3, [pc, #40]	; (48a4 <main+0x128>)
    487a:	4798      	blx	r3
    487c:	2180      	movs	r1, #128	; 0x80
    487e:	05c9      	lsls	r1, r1, #23
    4880:	2398      	movs	r3, #152	; 0x98
    4882:	22c0      	movs	r2, #192	; 0xc0
    4884:	05d2      	lsls	r2, r2, #23
    4886:	50d1      	str	r1, [r2, r3]
}
    4888:	2000      	movs	r0, #0
    488a:	b009      	add	sp, #36	; 0x24
    488c:	bc0c      	pop	{r2, r3}
    488e:	4691      	mov	r9, r2
    4890:	469a      	mov	sl, r3
    4892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4894:	00000211 	.word	0x00000211
    4898:	00004759 	.word	0x00004759
    489c:	00004185 	.word	0x00004185
    48a0:	20000390 	.word	0x20000390
    48a4:	00000585 	.word	0x00000585
    48a8:	0000037d 	.word	0x0000037d
    48ac:	20000434 	.word	0x20000434
    48b0:	00006744 	.word	0x00006744
    48b4:	20000280 	.word	0x20000280
    48b8:	0001c4d0 	.word	0x0001c4d0
    48bc:	000046d9 	.word	0x000046d9
    48c0:	0001c4d8 	.word	0x0001c4d8
    48c4:	00004bc9 	.word	0x00004bc9
    48c8:	000042c9 	.word	0x000042c9

000048cc <__udivsi3>:
    48cc:	2200      	movs	r2, #0
    48ce:	0843      	lsrs	r3, r0, #1
    48d0:	428b      	cmp	r3, r1
    48d2:	d374      	bcc.n	49be <__udivsi3+0xf2>
    48d4:	0903      	lsrs	r3, r0, #4
    48d6:	428b      	cmp	r3, r1
    48d8:	d35f      	bcc.n	499a <__udivsi3+0xce>
    48da:	0a03      	lsrs	r3, r0, #8
    48dc:	428b      	cmp	r3, r1
    48de:	d344      	bcc.n	496a <__udivsi3+0x9e>
    48e0:	0b03      	lsrs	r3, r0, #12
    48e2:	428b      	cmp	r3, r1
    48e4:	d328      	bcc.n	4938 <__udivsi3+0x6c>
    48e6:	0c03      	lsrs	r3, r0, #16
    48e8:	428b      	cmp	r3, r1
    48ea:	d30d      	bcc.n	4908 <__udivsi3+0x3c>
    48ec:	22ff      	movs	r2, #255	; 0xff
    48ee:	0209      	lsls	r1, r1, #8
    48f0:	ba12      	rev	r2, r2
    48f2:	0c03      	lsrs	r3, r0, #16
    48f4:	428b      	cmp	r3, r1
    48f6:	d302      	bcc.n	48fe <__udivsi3+0x32>
    48f8:	1212      	asrs	r2, r2, #8
    48fa:	0209      	lsls	r1, r1, #8
    48fc:	d065      	beq.n	49ca <__udivsi3+0xfe>
    48fe:	0b03      	lsrs	r3, r0, #12
    4900:	428b      	cmp	r3, r1
    4902:	d319      	bcc.n	4938 <__udivsi3+0x6c>
    4904:	e000      	b.n	4908 <__udivsi3+0x3c>
    4906:	0a09      	lsrs	r1, r1, #8
    4908:	0bc3      	lsrs	r3, r0, #15
    490a:	428b      	cmp	r3, r1
    490c:	d301      	bcc.n	4912 <__udivsi3+0x46>
    490e:	03cb      	lsls	r3, r1, #15
    4910:	1ac0      	subs	r0, r0, r3
    4912:	4152      	adcs	r2, r2
    4914:	0b83      	lsrs	r3, r0, #14
    4916:	428b      	cmp	r3, r1
    4918:	d301      	bcc.n	491e <__udivsi3+0x52>
    491a:	038b      	lsls	r3, r1, #14
    491c:	1ac0      	subs	r0, r0, r3
    491e:	4152      	adcs	r2, r2
    4920:	0b43      	lsrs	r3, r0, #13
    4922:	428b      	cmp	r3, r1
    4924:	d301      	bcc.n	492a <__udivsi3+0x5e>
    4926:	034b      	lsls	r3, r1, #13
    4928:	1ac0      	subs	r0, r0, r3
    492a:	4152      	adcs	r2, r2
    492c:	0b03      	lsrs	r3, r0, #12
    492e:	428b      	cmp	r3, r1
    4930:	d301      	bcc.n	4936 <__udivsi3+0x6a>
    4932:	030b      	lsls	r3, r1, #12
    4934:	1ac0      	subs	r0, r0, r3
    4936:	4152      	adcs	r2, r2
    4938:	0ac3      	lsrs	r3, r0, #11
    493a:	428b      	cmp	r3, r1
    493c:	d301      	bcc.n	4942 <__udivsi3+0x76>
    493e:	02cb      	lsls	r3, r1, #11
    4940:	1ac0      	subs	r0, r0, r3
    4942:	4152      	adcs	r2, r2
    4944:	0a83      	lsrs	r3, r0, #10
    4946:	428b      	cmp	r3, r1
    4948:	d301      	bcc.n	494e <__udivsi3+0x82>
    494a:	028b      	lsls	r3, r1, #10
    494c:	1ac0      	subs	r0, r0, r3
    494e:	4152      	adcs	r2, r2
    4950:	0a43      	lsrs	r3, r0, #9
    4952:	428b      	cmp	r3, r1
    4954:	d301      	bcc.n	495a <__udivsi3+0x8e>
    4956:	024b      	lsls	r3, r1, #9
    4958:	1ac0      	subs	r0, r0, r3
    495a:	4152      	adcs	r2, r2
    495c:	0a03      	lsrs	r3, r0, #8
    495e:	428b      	cmp	r3, r1
    4960:	d301      	bcc.n	4966 <__udivsi3+0x9a>
    4962:	020b      	lsls	r3, r1, #8
    4964:	1ac0      	subs	r0, r0, r3
    4966:	4152      	adcs	r2, r2
    4968:	d2cd      	bcs.n	4906 <__udivsi3+0x3a>
    496a:	09c3      	lsrs	r3, r0, #7
    496c:	428b      	cmp	r3, r1
    496e:	d301      	bcc.n	4974 <__udivsi3+0xa8>
    4970:	01cb      	lsls	r3, r1, #7
    4972:	1ac0      	subs	r0, r0, r3
    4974:	4152      	adcs	r2, r2
    4976:	0983      	lsrs	r3, r0, #6
    4978:	428b      	cmp	r3, r1
    497a:	d301      	bcc.n	4980 <__udivsi3+0xb4>
    497c:	018b      	lsls	r3, r1, #6
    497e:	1ac0      	subs	r0, r0, r3
    4980:	4152      	adcs	r2, r2
    4982:	0943      	lsrs	r3, r0, #5
    4984:	428b      	cmp	r3, r1
    4986:	d301      	bcc.n	498c <__udivsi3+0xc0>
    4988:	014b      	lsls	r3, r1, #5
    498a:	1ac0      	subs	r0, r0, r3
    498c:	4152      	adcs	r2, r2
    498e:	0903      	lsrs	r3, r0, #4
    4990:	428b      	cmp	r3, r1
    4992:	d301      	bcc.n	4998 <__udivsi3+0xcc>
    4994:	010b      	lsls	r3, r1, #4
    4996:	1ac0      	subs	r0, r0, r3
    4998:	4152      	adcs	r2, r2
    499a:	08c3      	lsrs	r3, r0, #3
    499c:	428b      	cmp	r3, r1
    499e:	d301      	bcc.n	49a4 <__udivsi3+0xd8>
    49a0:	00cb      	lsls	r3, r1, #3
    49a2:	1ac0      	subs	r0, r0, r3
    49a4:	4152      	adcs	r2, r2
    49a6:	0883      	lsrs	r3, r0, #2
    49a8:	428b      	cmp	r3, r1
    49aa:	d301      	bcc.n	49b0 <__udivsi3+0xe4>
    49ac:	008b      	lsls	r3, r1, #2
    49ae:	1ac0      	subs	r0, r0, r3
    49b0:	4152      	adcs	r2, r2
    49b2:	0843      	lsrs	r3, r0, #1
    49b4:	428b      	cmp	r3, r1
    49b6:	d301      	bcc.n	49bc <__udivsi3+0xf0>
    49b8:	004b      	lsls	r3, r1, #1
    49ba:	1ac0      	subs	r0, r0, r3
    49bc:	4152      	adcs	r2, r2
    49be:	1a41      	subs	r1, r0, r1
    49c0:	d200      	bcs.n	49c4 <__udivsi3+0xf8>
    49c2:	4601      	mov	r1, r0
    49c4:	4152      	adcs	r2, r2
    49c6:	4610      	mov	r0, r2
    49c8:	4770      	bx	lr
    49ca:	e7ff      	b.n	49cc <__udivsi3+0x100>
    49cc:	b501      	push	{r0, lr}
    49ce:	2000      	movs	r0, #0
    49d0:	f000 f806 	bl	49e0 <__aeabi_idiv0>
    49d4:	bd02      	pop	{r1, pc}
    49d6:	46c0      	nop			; (mov r8, r8)

000049d8 <__aeabi_uidivmod>:
    49d8:	2900      	cmp	r1, #0
    49da:	d0f7      	beq.n	49cc <__udivsi3+0x100>
    49dc:	e776      	b.n	48cc <__udivsi3>
    49de:	4770      	bx	lr

000049e0 <__aeabi_idiv0>:
    49e0:	4770      	bx	lr
    49e2:	46c0      	nop			; (mov r8, r8)

000049e4 <__libc_init_array>:
    49e4:	b570      	push	{r4, r5, r6, lr}
    49e6:	2600      	movs	r6, #0
    49e8:	4d0c      	ldr	r5, [pc, #48]	; (4a1c <__libc_init_array+0x38>)
    49ea:	4c0d      	ldr	r4, [pc, #52]	; (4a20 <__libc_init_array+0x3c>)
    49ec:	1b64      	subs	r4, r4, r5
    49ee:	10a4      	asrs	r4, r4, #2
    49f0:	42a6      	cmp	r6, r4
    49f2:	d109      	bne.n	4a08 <__libc_init_array+0x24>
    49f4:	2600      	movs	r6, #0
    49f6:	f017 fdbb 	bl	1c570 <_init>
    49fa:	4d0a      	ldr	r5, [pc, #40]	; (4a24 <__libc_init_array+0x40>)
    49fc:	4c0a      	ldr	r4, [pc, #40]	; (4a28 <__libc_init_array+0x44>)
    49fe:	1b64      	subs	r4, r4, r5
    4a00:	10a4      	asrs	r4, r4, #2
    4a02:	42a6      	cmp	r6, r4
    4a04:	d105      	bne.n	4a12 <__libc_init_array+0x2e>
    4a06:	bd70      	pop	{r4, r5, r6, pc}
    4a08:	00b3      	lsls	r3, r6, #2
    4a0a:	58eb      	ldr	r3, [r5, r3]
    4a0c:	4798      	blx	r3
    4a0e:	3601      	adds	r6, #1
    4a10:	e7ee      	b.n	49f0 <__libc_init_array+0xc>
    4a12:	00b3      	lsls	r3, r6, #2
    4a14:	58eb      	ldr	r3, [r5, r3]
    4a16:	4798      	blx	r3
    4a18:	3601      	adds	r6, #1
    4a1a:	e7f2      	b.n	4a02 <__libc_init_array+0x1e>
    4a1c:	0001c57c 	.word	0x0001c57c
    4a20:	0001c57c 	.word	0x0001c57c
    4a24:	0001c57c 	.word	0x0001c57c
    4a28:	0001c580 	.word	0x0001c580

00004a2c <malloc>:
    4a2c:	b510      	push	{r4, lr}
    4a2e:	4b03      	ldr	r3, [pc, #12]	; (4a3c <malloc+0x10>)
    4a30:	0001      	movs	r1, r0
    4a32:	6818      	ldr	r0, [r3, #0]
    4a34:	f000 f858 	bl	4ae8 <_malloc_r>
    4a38:	bd10      	pop	{r4, pc}
    4a3a:	46c0      	nop			; (mov r8, r8)
    4a3c:	200002f4 	.word	0x200002f4

00004a40 <memcpy>:
    4a40:	2300      	movs	r3, #0
    4a42:	b510      	push	{r4, lr}
    4a44:	429a      	cmp	r2, r3
    4a46:	d100      	bne.n	4a4a <memcpy+0xa>
    4a48:	bd10      	pop	{r4, pc}
    4a4a:	5ccc      	ldrb	r4, [r1, r3]
    4a4c:	54c4      	strb	r4, [r0, r3]
    4a4e:	3301      	adds	r3, #1
    4a50:	e7f8      	b.n	4a44 <memcpy+0x4>
	...

00004a54 <_free_r>:
    4a54:	b570      	push	{r4, r5, r6, lr}
    4a56:	0005      	movs	r5, r0
    4a58:	2900      	cmp	r1, #0
    4a5a:	d010      	beq.n	4a7e <_free_r+0x2a>
    4a5c:	1f0c      	subs	r4, r1, #4
    4a5e:	6823      	ldr	r3, [r4, #0]
    4a60:	2b00      	cmp	r3, #0
    4a62:	da00      	bge.n	4a66 <_free_r+0x12>
    4a64:	18e4      	adds	r4, r4, r3
    4a66:	0028      	movs	r0, r5
    4a68:	f000 f8d0 	bl	4c0c <__malloc_lock>
    4a6c:	4a1d      	ldr	r2, [pc, #116]	; (4ae4 <_free_r+0x90>)
    4a6e:	6813      	ldr	r3, [r2, #0]
    4a70:	2b00      	cmp	r3, #0
    4a72:	d105      	bne.n	4a80 <_free_r+0x2c>
    4a74:	6063      	str	r3, [r4, #4]
    4a76:	6014      	str	r4, [r2, #0]
    4a78:	0028      	movs	r0, r5
    4a7a:	f000 f8c8 	bl	4c0e <__malloc_unlock>
    4a7e:	bd70      	pop	{r4, r5, r6, pc}
    4a80:	42a3      	cmp	r3, r4
    4a82:	d909      	bls.n	4a98 <_free_r+0x44>
    4a84:	6821      	ldr	r1, [r4, #0]
    4a86:	1860      	adds	r0, r4, r1
    4a88:	4283      	cmp	r3, r0
    4a8a:	d1f3      	bne.n	4a74 <_free_r+0x20>
    4a8c:	6818      	ldr	r0, [r3, #0]
    4a8e:	685b      	ldr	r3, [r3, #4]
    4a90:	1841      	adds	r1, r0, r1
    4a92:	6021      	str	r1, [r4, #0]
    4a94:	e7ee      	b.n	4a74 <_free_r+0x20>
    4a96:	0013      	movs	r3, r2
    4a98:	685a      	ldr	r2, [r3, #4]
    4a9a:	2a00      	cmp	r2, #0
    4a9c:	d001      	beq.n	4aa2 <_free_r+0x4e>
    4a9e:	42a2      	cmp	r2, r4
    4aa0:	d9f9      	bls.n	4a96 <_free_r+0x42>
    4aa2:	6819      	ldr	r1, [r3, #0]
    4aa4:	1858      	adds	r0, r3, r1
    4aa6:	42a0      	cmp	r0, r4
    4aa8:	d10b      	bne.n	4ac2 <_free_r+0x6e>
    4aaa:	6820      	ldr	r0, [r4, #0]
    4aac:	1809      	adds	r1, r1, r0
    4aae:	1858      	adds	r0, r3, r1
    4ab0:	6019      	str	r1, [r3, #0]
    4ab2:	4282      	cmp	r2, r0
    4ab4:	d1e0      	bne.n	4a78 <_free_r+0x24>
    4ab6:	6810      	ldr	r0, [r2, #0]
    4ab8:	6852      	ldr	r2, [r2, #4]
    4aba:	1841      	adds	r1, r0, r1
    4abc:	6019      	str	r1, [r3, #0]
    4abe:	605a      	str	r2, [r3, #4]
    4ac0:	e7da      	b.n	4a78 <_free_r+0x24>
    4ac2:	42a0      	cmp	r0, r4
    4ac4:	d902      	bls.n	4acc <_free_r+0x78>
    4ac6:	230c      	movs	r3, #12
    4ac8:	602b      	str	r3, [r5, #0]
    4aca:	e7d5      	b.n	4a78 <_free_r+0x24>
    4acc:	6821      	ldr	r1, [r4, #0]
    4ace:	1860      	adds	r0, r4, r1
    4ad0:	4282      	cmp	r2, r0
    4ad2:	d103      	bne.n	4adc <_free_r+0x88>
    4ad4:	6810      	ldr	r0, [r2, #0]
    4ad6:	6852      	ldr	r2, [r2, #4]
    4ad8:	1841      	adds	r1, r0, r1
    4ada:	6021      	str	r1, [r4, #0]
    4adc:	6062      	str	r2, [r4, #4]
    4ade:	605c      	str	r4, [r3, #4]
    4ae0:	e7ca      	b.n	4a78 <_free_r+0x24>
    4ae2:	46c0      	nop			; (mov r8, r8)
    4ae4:	2000037c 	.word	0x2000037c

00004ae8 <_malloc_r>:
    4ae8:	2303      	movs	r3, #3
    4aea:	b570      	push	{r4, r5, r6, lr}
    4aec:	1ccd      	adds	r5, r1, #3
    4aee:	439d      	bics	r5, r3
    4af0:	3508      	adds	r5, #8
    4af2:	0006      	movs	r6, r0
    4af4:	2d0c      	cmp	r5, #12
    4af6:	d21e      	bcs.n	4b36 <_malloc_r+0x4e>
    4af8:	250c      	movs	r5, #12
    4afa:	42a9      	cmp	r1, r5
    4afc:	d81d      	bhi.n	4b3a <_malloc_r+0x52>
    4afe:	0030      	movs	r0, r6
    4b00:	f000 f884 	bl	4c0c <__malloc_lock>
    4b04:	4a25      	ldr	r2, [pc, #148]	; (4b9c <_malloc_r+0xb4>)
    4b06:	6814      	ldr	r4, [r2, #0]
    4b08:	0021      	movs	r1, r4
    4b0a:	2900      	cmp	r1, #0
    4b0c:	d119      	bne.n	4b42 <_malloc_r+0x5a>
    4b0e:	4c24      	ldr	r4, [pc, #144]	; (4ba0 <_malloc_r+0xb8>)
    4b10:	6823      	ldr	r3, [r4, #0]
    4b12:	2b00      	cmp	r3, #0
    4b14:	d103      	bne.n	4b1e <_malloc_r+0x36>
    4b16:	0030      	movs	r0, r6
    4b18:	f000 f844 	bl	4ba4 <_sbrk_r>
    4b1c:	6020      	str	r0, [r4, #0]
    4b1e:	0029      	movs	r1, r5
    4b20:	0030      	movs	r0, r6
    4b22:	f000 f83f 	bl	4ba4 <_sbrk_r>
    4b26:	1c43      	adds	r3, r0, #1
    4b28:	d12c      	bne.n	4b84 <_malloc_r+0x9c>
    4b2a:	230c      	movs	r3, #12
    4b2c:	0030      	movs	r0, r6
    4b2e:	6033      	str	r3, [r6, #0]
    4b30:	f000 f86d 	bl	4c0e <__malloc_unlock>
    4b34:	e003      	b.n	4b3e <_malloc_r+0x56>
    4b36:	2d00      	cmp	r5, #0
    4b38:	dadf      	bge.n	4afa <_malloc_r+0x12>
    4b3a:	230c      	movs	r3, #12
    4b3c:	6033      	str	r3, [r6, #0]
    4b3e:	2000      	movs	r0, #0
    4b40:	bd70      	pop	{r4, r5, r6, pc}
    4b42:	680b      	ldr	r3, [r1, #0]
    4b44:	1b5b      	subs	r3, r3, r5
    4b46:	d41a      	bmi.n	4b7e <_malloc_r+0x96>
    4b48:	2b0b      	cmp	r3, #11
    4b4a:	d903      	bls.n	4b54 <_malloc_r+0x6c>
    4b4c:	600b      	str	r3, [r1, #0]
    4b4e:	18cc      	adds	r4, r1, r3
    4b50:	6025      	str	r5, [r4, #0]
    4b52:	e003      	b.n	4b5c <_malloc_r+0x74>
    4b54:	428c      	cmp	r4, r1
    4b56:	d10e      	bne.n	4b76 <_malloc_r+0x8e>
    4b58:	6863      	ldr	r3, [r4, #4]
    4b5a:	6013      	str	r3, [r2, #0]
    4b5c:	0030      	movs	r0, r6
    4b5e:	f000 f856 	bl	4c0e <__malloc_unlock>
    4b62:	0020      	movs	r0, r4
    4b64:	2207      	movs	r2, #7
    4b66:	300b      	adds	r0, #11
    4b68:	1d23      	adds	r3, r4, #4
    4b6a:	4390      	bics	r0, r2
    4b6c:	1ac3      	subs	r3, r0, r3
    4b6e:	d0e7      	beq.n	4b40 <_malloc_r+0x58>
    4b70:	425a      	negs	r2, r3
    4b72:	50e2      	str	r2, [r4, r3]
    4b74:	e7e4      	b.n	4b40 <_malloc_r+0x58>
    4b76:	684b      	ldr	r3, [r1, #4]
    4b78:	6063      	str	r3, [r4, #4]
    4b7a:	000c      	movs	r4, r1
    4b7c:	e7ee      	b.n	4b5c <_malloc_r+0x74>
    4b7e:	000c      	movs	r4, r1
    4b80:	6849      	ldr	r1, [r1, #4]
    4b82:	e7c2      	b.n	4b0a <_malloc_r+0x22>
    4b84:	2303      	movs	r3, #3
    4b86:	1cc4      	adds	r4, r0, #3
    4b88:	439c      	bics	r4, r3
    4b8a:	42a0      	cmp	r0, r4
    4b8c:	d0e0      	beq.n	4b50 <_malloc_r+0x68>
    4b8e:	1a21      	subs	r1, r4, r0
    4b90:	0030      	movs	r0, r6
    4b92:	f000 f807 	bl	4ba4 <_sbrk_r>
    4b96:	1c43      	adds	r3, r0, #1
    4b98:	d1da      	bne.n	4b50 <_malloc_r+0x68>
    4b9a:	e7c6      	b.n	4b2a <_malloc_r+0x42>
    4b9c:	2000037c 	.word	0x2000037c
    4ba0:	20000380 	.word	0x20000380

00004ba4 <_sbrk_r>:
    4ba4:	2300      	movs	r3, #0
    4ba6:	b570      	push	{r4, r5, r6, lr}
    4ba8:	4c06      	ldr	r4, [pc, #24]	; (4bc4 <_sbrk_r+0x20>)
    4baa:	0005      	movs	r5, r0
    4bac:	0008      	movs	r0, r1
    4bae:	6023      	str	r3, [r4, #0]
    4bb0:	f7fb fbf4 	bl	39c <_sbrk>
    4bb4:	1c43      	adds	r3, r0, #1
    4bb6:	d103      	bne.n	4bc0 <_sbrk_r+0x1c>
    4bb8:	6823      	ldr	r3, [r4, #0]
    4bba:	2b00      	cmp	r3, #0
    4bbc:	d000      	beq.n	4bc0 <_sbrk_r+0x1c>
    4bbe:	602b      	str	r3, [r5, #0]
    4bc0:	bd70      	pop	{r4, r5, r6, pc}
    4bc2:	46c0      	nop			; (mov r8, r8)
    4bc4:	20000438 	.word	0x20000438

00004bc8 <siprintf>:
    4bc8:	b40e      	push	{r1, r2, r3}
    4bca:	b510      	push	{r4, lr}
    4bcc:	b09d      	sub	sp, #116	; 0x74
    4bce:	a902      	add	r1, sp, #8
    4bd0:	9002      	str	r0, [sp, #8]
    4bd2:	6108      	str	r0, [r1, #16]
    4bd4:	480b      	ldr	r0, [pc, #44]	; (4c04 <siprintf+0x3c>)
    4bd6:	2482      	movs	r4, #130	; 0x82
    4bd8:	6088      	str	r0, [r1, #8]
    4bda:	6148      	str	r0, [r1, #20]
    4bdc:	2001      	movs	r0, #1
    4bde:	4240      	negs	r0, r0
    4be0:	ab1f      	add	r3, sp, #124	; 0x7c
    4be2:	81c8      	strh	r0, [r1, #14]
    4be4:	4808      	ldr	r0, [pc, #32]	; (4c08 <siprintf+0x40>)
    4be6:	cb04      	ldmia	r3!, {r2}
    4be8:	00a4      	lsls	r4, r4, #2
    4bea:	6800      	ldr	r0, [r0, #0]
    4bec:	9301      	str	r3, [sp, #4]
    4bee:	818c      	strh	r4, [r1, #12]
    4bf0:	f000 f870 	bl	4cd4 <_svfiprintf_r>
    4bf4:	2300      	movs	r3, #0
    4bf6:	9a02      	ldr	r2, [sp, #8]
    4bf8:	7013      	strb	r3, [r2, #0]
    4bfa:	b01d      	add	sp, #116	; 0x74
    4bfc:	bc10      	pop	{r4}
    4bfe:	bc08      	pop	{r3}
    4c00:	b003      	add	sp, #12
    4c02:	4718      	bx	r3
    4c04:	7fffffff 	.word	0x7fffffff
    4c08:	200002f4 	.word	0x200002f4

00004c0c <__malloc_lock>:
    4c0c:	4770      	bx	lr

00004c0e <__malloc_unlock>:
    4c0e:	4770      	bx	lr

00004c10 <__ssputs_r>:
    4c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c12:	688e      	ldr	r6, [r1, #8]
    4c14:	b085      	sub	sp, #20
    4c16:	0007      	movs	r7, r0
    4c18:	000c      	movs	r4, r1
    4c1a:	9203      	str	r2, [sp, #12]
    4c1c:	9301      	str	r3, [sp, #4]
    4c1e:	429e      	cmp	r6, r3
    4c20:	d839      	bhi.n	4c96 <__ssputs_r+0x86>
    4c22:	2390      	movs	r3, #144	; 0x90
    4c24:	898a      	ldrh	r2, [r1, #12]
    4c26:	00db      	lsls	r3, r3, #3
    4c28:	421a      	tst	r2, r3
    4c2a:	d034      	beq.n	4c96 <__ssputs_r+0x86>
    4c2c:	2503      	movs	r5, #3
    4c2e:	6909      	ldr	r1, [r1, #16]
    4c30:	6823      	ldr	r3, [r4, #0]
    4c32:	1a5b      	subs	r3, r3, r1
    4c34:	9302      	str	r3, [sp, #8]
    4c36:	6963      	ldr	r3, [r4, #20]
    4c38:	9802      	ldr	r0, [sp, #8]
    4c3a:	435d      	muls	r5, r3
    4c3c:	0feb      	lsrs	r3, r5, #31
    4c3e:	195d      	adds	r5, r3, r5
    4c40:	9b01      	ldr	r3, [sp, #4]
    4c42:	106d      	asrs	r5, r5, #1
    4c44:	3301      	adds	r3, #1
    4c46:	181b      	adds	r3, r3, r0
    4c48:	42ab      	cmp	r3, r5
    4c4a:	d900      	bls.n	4c4e <__ssputs_r+0x3e>
    4c4c:	001d      	movs	r5, r3
    4c4e:	0553      	lsls	r3, r2, #21
    4c50:	d532      	bpl.n	4cb8 <__ssputs_r+0xa8>
    4c52:	0029      	movs	r1, r5
    4c54:	0038      	movs	r0, r7
    4c56:	f7ff ff47 	bl	4ae8 <_malloc_r>
    4c5a:	1e06      	subs	r6, r0, #0
    4c5c:	d109      	bne.n	4c72 <__ssputs_r+0x62>
    4c5e:	230c      	movs	r3, #12
    4c60:	603b      	str	r3, [r7, #0]
    4c62:	2340      	movs	r3, #64	; 0x40
    4c64:	2001      	movs	r0, #1
    4c66:	89a2      	ldrh	r2, [r4, #12]
    4c68:	4240      	negs	r0, r0
    4c6a:	4313      	orrs	r3, r2
    4c6c:	81a3      	strh	r3, [r4, #12]
    4c6e:	b005      	add	sp, #20
    4c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c72:	9a02      	ldr	r2, [sp, #8]
    4c74:	6921      	ldr	r1, [r4, #16]
    4c76:	f7ff fee3 	bl	4a40 <memcpy>
    4c7a:	89a3      	ldrh	r3, [r4, #12]
    4c7c:	4a14      	ldr	r2, [pc, #80]	; (4cd0 <__ssputs_r+0xc0>)
    4c7e:	401a      	ands	r2, r3
    4c80:	2380      	movs	r3, #128	; 0x80
    4c82:	4313      	orrs	r3, r2
    4c84:	81a3      	strh	r3, [r4, #12]
    4c86:	9b02      	ldr	r3, [sp, #8]
    4c88:	6126      	str	r6, [r4, #16]
    4c8a:	18f6      	adds	r6, r6, r3
    4c8c:	6026      	str	r6, [r4, #0]
    4c8e:	6165      	str	r5, [r4, #20]
    4c90:	9e01      	ldr	r6, [sp, #4]
    4c92:	1aed      	subs	r5, r5, r3
    4c94:	60a5      	str	r5, [r4, #8]
    4c96:	9b01      	ldr	r3, [sp, #4]
    4c98:	42b3      	cmp	r3, r6
    4c9a:	d200      	bcs.n	4c9e <__ssputs_r+0x8e>
    4c9c:	001e      	movs	r6, r3
    4c9e:	0032      	movs	r2, r6
    4ca0:	9903      	ldr	r1, [sp, #12]
    4ca2:	6820      	ldr	r0, [r4, #0]
    4ca4:	f000 faad 	bl	5202 <memmove>
    4ca8:	68a3      	ldr	r3, [r4, #8]
    4caa:	2000      	movs	r0, #0
    4cac:	1b9b      	subs	r3, r3, r6
    4cae:	60a3      	str	r3, [r4, #8]
    4cb0:	6823      	ldr	r3, [r4, #0]
    4cb2:	199e      	adds	r6, r3, r6
    4cb4:	6026      	str	r6, [r4, #0]
    4cb6:	e7da      	b.n	4c6e <__ssputs_r+0x5e>
    4cb8:	002a      	movs	r2, r5
    4cba:	0038      	movs	r0, r7
    4cbc:	f000 fab3 	bl	5226 <_realloc_r>
    4cc0:	1e06      	subs	r6, r0, #0
    4cc2:	d1e0      	bne.n	4c86 <__ssputs_r+0x76>
    4cc4:	6921      	ldr	r1, [r4, #16]
    4cc6:	0038      	movs	r0, r7
    4cc8:	f7ff fec4 	bl	4a54 <_free_r>
    4ccc:	e7c7      	b.n	4c5e <__ssputs_r+0x4e>
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	fffffb7f 	.word	0xfffffb7f

00004cd4 <_svfiprintf_r>:
    4cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cd6:	b09f      	sub	sp, #124	; 0x7c
    4cd8:	9002      	str	r0, [sp, #8]
    4cda:	9305      	str	r3, [sp, #20]
    4cdc:	898b      	ldrh	r3, [r1, #12]
    4cde:	000f      	movs	r7, r1
    4ce0:	0016      	movs	r6, r2
    4ce2:	061b      	lsls	r3, r3, #24
    4ce4:	d511      	bpl.n	4d0a <_svfiprintf_r+0x36>
    4ce6:	690b      	ldr	r3, [r1, #16]
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d10e      	bne.n	4d0a <_svfiprintf_r+0x36>
    4cec:	2140      	movs	r1, #64	; 0x40
    4cee:	f7ff fefb 	bl	4ae8 <_malloc_r>
    4cf2:	6038      	str	r0, [r7, #0]
    4cf4:	6138      	str	r0, [r7, #16]
    4cf6:	2800      	cmp	r0, #0
    4cf8:	d105      	bne.n	4d06 <_svfiprintf_r+0x32>
    4cfa:	230c      	movs	r3, #12
    4cfc:	9a02      	ldr	r2, [sp, #8]
    4cfe:	3801      	subs	r0, #1
    4d00:	6013      	str	r3, [r2, #0]
    4d02:	b01f      	add	sp, #124	; 0x7c
    4d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d06:	2340      	movs	r3, #64	; 0x40
    4d08:	617b      	str	r3, [r7, #20]
    4d0a:	2300      	movs	r3, #0
    4d0c:	ad06      	add	r5, sp, #24
    4d0e:	616b      	str	r3, [r5, #20]
    4d10:	3320      	adds	r3, #32
    4d12:	766b      	strb	r3, [r5, #25]
    4d14:	3310      	adds	r3, #16
    4d16:	76ab      	strb	r3, [r5, #26]
    4d18:	0034      	movs	r4, r6
    4d1a:	7823      	ldrb	r3, [r4, #0]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d147      	bne.n	4db0 <_svfiprintf_r+0xdc>
    4d20:	1ba3      	subs	r3, r4, r6
    4d22:	9304      	str	r3, [sp, #16]
    4d24:	d00d      	beq.n	4d42 <_svfiprintf_r+0x6e>
    4d26:	1ba3      	subs	r3, r4, r6
    4d28:	0032      	movs	r2, r6
    4d2a:	0039      	movs	r1, r7
    4d2c:	9802      	ldr	r0, [sp, #8]
    4d2e:	f7ff ff6f 	bl	4c10 <__ssputs_r>
    4d32:	1c43      	adds	r3, r0, #1
    4d34:	d100      	bne.n	4d38 <_svfiprintf_r+0x64>
    4d36:	e0b5      	b.n	4ea4 <_svfiprintf_r+0x1d0>
    4d38:	696a      	ldr	r2, [r5, #20]
    4d3a:	9b04      	ldr	r3, [sp, #16]
    4d3c:	4694      	mov	ip, r2
    4d3e:	4463      	add	r3, ip
    4d40:	616b      	str	r3, [r5, #20]
    4d42:	7823      	ldrb	r3, [r4, #0]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d100      	bne.n	4d4a <_svfiprintf_r+0x76>
    4d48:	e0ac      	b.n	4ea4 <_svfiprintf_r+0x1d0>
    4d4a:	2201      	movs	r2, #1
    4d4c:	2300      	movs	r3, #0
    4d4e:	4252      	negs	r2, r2
    4d50:	606a      	str	r2, [r5, #4]
    4d52:	a902      	add	r1, sp, #8
    4d54:	3254      	adds	r2, #84	; 0x54
    4d56:	1852      	adds	r2, r2, r1
    4d58:	3401      	adds	r4, #1
    4d5a:	602b      	str	r3, [r5, #0]
    4d5c:	60eb      	str	r3, [r5, #12]
    4d5e:	60ab      	str	r3, [r5, #8]
    4d60:	7013      	strb	r3, [r2, #0]
    4d62:	65ab      	str	r3, [r5, #88]	; 0x58
    4d64:	4e58      	ldr	r6, [pc, #352]	; (4ec8 <_svfiprintf_r+0x1f4>)
    4d66:	2205      	movs	r2, #5
    4d68:	7821      	ldrb	r1, [r4, #0]
    4d6a:	0030      	movs	r0, r6
    4d6c:	f000 fa3e 	bl	51ec <memchr>
    4d70:	1c62      	adds	r2, r4, #1
    4d72:	2800      	cmp	r0, #0
    4d74:	d120      	bne.n	4db8 <_svfiprintf_r+0xe4>
    4d76:	6829      	ldr	r1, [r5, #0]
    4d78:	06cb      	lsls	r3, r1, #27
    4d7a:	d504      	bpl.n	4d86 <_svfiprintf_r+0xb2>
    4d7c:	2353      	movs	r3, #83	; 0x53
    4d7e:	ae02      	add	r6, sp, #8
    4d80:	3020      	adds	r0, #32
    4d82:	199b      	adds	r3, r3, r6
    4d84:	7018      	strb	r0, [r3, #0]
    4d86:	070b      	lsls	r3, r1, #28
    4d88:	d504      	bpl.n	4d94 <_svfiprintf_r+0xc0>
    4d8a:	2353      	movs	r3, #83	; 0x53
    4d8c:	202b      	movs	r0, #43	; 0x2b
    4d8e:	ae02      	add	r6, sp, #8
    4d90:	199b      	adds	r3, r3, r6
    4d92:	7018      	strb	r0, [r3, #0]
    4d94:	7823      	ldrb	r3, [r4, #0]
    4d96:	2b2a      	cmp	r3, #42	; 0x2a
    4d98:	d016      	beq.n	4dc8 <_svfiprintf_r+0xf4>
    4d9a:	2000      	movs	r0, #0
    4d9c:	210a      	movs	r1, #10
    4d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4da0:	7822      	ldrb	r2, [r4, #0]
    4da2:	3a30      	subs	r2, #48	; 0x30
    4da4:	2a09      	cmp	r2, #9
    4da6:	d955      	bls.n	4e54 <_svfiprintf_r+0x180>
    4da8:	2800      	cmp	r0, #0
    4daa:	d015      	beq.n	4dd8 <_svfiprintf_r+0x104>
    4dac:	9309      	str	r3, [sp, #36]	; 0x24
    4dae:	e013      	b.n	4dd8 <_svfiprintf_r+0x104>
    4db0:	2b25      	cmp	r3, #37	; 0x25
    4db2:	d0b5      	beq.n	4d20 <_svfiprintf_r+0x4c>
    4db4:	3401      	adds	r4, #1
    4db6:	e7b0      	b.n	4d1a <_svfiprintf_r+0x46>
    4db8:	2301      	movs	r3, #1
    4dba:	1b80      	subs	r0, r0, r6
    4dbc:	4083      	lsls	r3, r0
    4dbe:	6829      	ldr	r1, [r5, #0]
    4dc0:	0014      	movs	r4, r2
    4dc2:	430b      	orrs	r3, r1
    4dc4:	602b      	str	r3, [r5, #0]
    4dc6:	e7cd      	b.n	4d64 <_svfiprintf_r+0x90>
    4dc8:	9b05      	ldr	r3, [sp, #20]
    4dca:	1d18      	adds	r0, r3, #4
    4dcc:	681b      	ldr	r3, [r3, #0]
    4dce:	9005      	str	r0, [sp, #20]
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	db39      	blt.n	4e48 <_svfiprintf_r+0x174>
    4dd4:	9309      	str	r3, [sp, #36]	; 0x24
    4dd6:	0014      	movs	r4, r2
    4dd8:	7823      	ldrb	r3, [r4, #0]
    4dda:	2b2e      	cmp	r3, #46	; 0x2e
    4ddc:	d10b      	bne.n	4df6 <_svfiprintf_r+0x122>
    4dde:	7863      	ldrb	r3, [r4, #1]
    4de0:	1c62      	adds	r2, r4, #1
    4de2:	2b2a      	cmp	r3, #42	; 0x2a
    4de4:	d13e      	bne.n	4e64 <_svfiprintf_r+0x190>
    4de6:	9b05      	ldr	r3, [sp, #20]
    4de8:	3402      	adds	r4, #2
    4dea:	1d1a      	adds	r2, r3, #4
    4dec:	681b      	ldr	r3, [r3, #0]
    4dee:	9205      	str	r2, [sp, #20]
    4df0:	2b00      	cmp	r3, #0
    4df2:	db34      	blt.n	4e5e <_svfiprintf_r+0x18a>
    4df4:	9307      	str	r3, [sp, #28]
    4df6:	4e35      	ldr	r6, [pc, #212]	; (4ecc <_svfiprintf_r+0x1f8>)
    4df8:	7821      	ldrb	r1, [r4, #0]
    4dfa:	2203      	movs	r2, #3
    4dfc:	0030      	movs	r0, r6
    4dfe:	f000 f9f5 	bl	51ec <memchr>
    4e02:	2800      	cmp	r0, #0
    4e04:	d006      	beq.n	4e14 <_svfiprintf_r+0x140>
    4e06:	2340      	movs	r3, #64	; 0x40
    4e08:	1b80      	subs	r0, r0, r6
    4e0a:	4083      	lsls	r3, r0
    4e0c:	682a      	ldr	r2, [r5, #0]
    4e0e:	3401      	adds	r4, #1
    4e10:	4313      	orrs	r3, r2
    4e12:	602b      	str	r3, [r5, #0]
    4e14:	7821      	ldrb	r1, [r4, #0]
    4e16:	2206      	movs	r2, #6
    4e18:	482d      	ldr	r0, [pc, #180]	; (4ed0 <_svfiprintf_r+0x1fc>)
    4e1a:	1c66      	adds	r6, r4, #1
    4e1c:	7629      	strb	r1, [r5, #24]
    4e1e:	f000 f9e5 	bl	51ec <memchr>
    4e22:	2800      	cmp	r0, #0
    4e24:	d046      	beq.n	4eb4 <_svfiprintf_r+0x1e0>
    4e26:	4b2b      	ldr	r3, [pc, #172]	; (4ed4 <_svfiprintf_r+0x200>)
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d12f      	bne.n	4e8c <_svfiprintf_r+0x1b8>
    4e2c:	6829      	ldr	r1, [r5, #0]
    4e2e:	9b05      	ldr	r3, [sp, #20]
    4e30:	2207      	movs	r2, #7
    4e32:	05c9      	lsls	r1, r1, #23
    4e34:	d528      	bpl.n	4e88 <_svfiprintf_r+0x1b4>
    4e36:	189b      	adds	r3, r3, r2
    4e38:	4393      	bics	r3, r2
    4e3a:	3308      	adds	r3, #8
    4e3c:	9305      	str	r3, [sp, #20]
    4e3e:	696b      	ldr	r3, [r5, #20]
    4e40:	9a03      	ldr	r2, [sp, #12]
    4e42:	189b      	adds	r3, r3, r2
    4e44:	616b      	str	r3, [r5, #20]
    4e46:	e767      	b.n	4d18 <_svfiprintf_r+0x44>
    4e48:	425b      	negs	r3, r3
    4e4a:	60eb      	str	r3, [r5, #12]
    4e4c:	2302      	movs	r3, #2
    4e4e:	430b      	orrs	r3, r1
    4e50:	602b      	str	r3, [r5, #0]
    4e52:	e7c0      	b.n	4dd6 <_svfiprintf_r+0x102>
    4e54:	434b      	muls	r3, r1
    4e56:	3401      	adds	r4, #1
    4e58:	189b      	adds	r3, r3, r2
    4e5a:	2001      	movs	r0, #1
    4e5c:	e7a0      	b.n	4da0 <_svfiprintf_r+0xcc>
    4e5e:	2301      	movs	r3, #1
    4e60:	425b      	negs	r3, r3
    4e62:	e7c7      	b.n	4df4 <_svfiprintf_r+0x120>
    4e64:	2300      	movs	r3, #0
    4e66:	0014      	movs	r4, r2
    4e68:	200a      	movs	r0, #10
    4e6a:	001a      	movs	r2, r3
    4e6c:	606b      	str	r3, [r5, #4]
    4e6e:	7821      	ldrb	r1, [r4, #0]
    4e70:	3930      	subs	r1, #48	; 0x30
    4e72:	2909      	cmp	r1, #9
    4e74:	d903      	bls.n	4e7e <_svfiprintf_r+0x1aa>
    4e76:	2b00      	cmp	r3, #0
    4e78:	d0bd      	beq.n	4df6 <_svfiprintf_r+0x122>
    4e7a:	9207      	str	r2, [sp, #28]
    4e7c:	e7bb      	b.n	4df6 <_svfiprintf_r+0x122>
    4e7e:	4342      	muls	r2, r0
    4e80:	3401      	adds	r4, #1
    4e82:	1852      	adds	r2, r2, r1
    4e84:	2301      	movs	r3, #1
    4e86:	e7f2      	b.n	4e6e <_svfiprintf_r+0x19a>
    4e88:	3307      	adds	r3, #7
    4e8a:	e7d5      	b.n	4e38 <_svfiprintf_r+0x164>
    4e8c:	ab05      	add	r3, sp, #20
    4e8e:	9300      	str	r3, [sp, #0]
    4e90:	003a      	movs	r2, r7
    4e92:	4b11      	ldr	r3, [pc, #68]	; (4ed8 <_svfiprintf_r+0x204>)
    4e94:	0029      	movs	r1, r5
    4e96:	9802      	ldr	r0, [sp, #8]
    4e98:	e000      	b.n	4e9c <_svfiprintf_r+0x1c8>
    4e9a:	bf00      	nop
    4e9c:	9003      	str	r0, [sp, #12]
    4e9e:	9b03      	ldr	r3, [sp, #12]
    4ea0:	3301      	adds	r3, #1
    4ea2:	d1cc      	bne.n	4e3e <_svfiprintf_r+0x16a>
    4ea4:	89bb      	ldrh	r3, [r7, #12]
    4ea6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4ea8:	065b      	lsls	r3, r3, #25
    4eaa:	d400      	bmi.n	4eae <_svfiprintf_r+0x1da>
    4eac:	e729      	b.n	4d02 <_svfiprintf_r+0x2e>
    4eae:	2001      	movs	r0, #1
    4eb0:	4240      	negs	r0, r0
    4eb2:	e726      	b.n	4d02 <_svfiprintf_r+0x2e>
    4eb4:	ab05      	add	r3, sp, #20
    4eb6:	9300      	str	r3, [sp, #0]
    4eb8:	003a      	movs	r2, r7
    4eba:	4b07      	ldr	r3, [pc, #28]	; (4ed8 <_svfiprintf_r+0x204>)
    4ebc:	0029      	movs	r1, r5
    4ebe:	9802      	ldr	r0, [sp, #8]
    4ec0:	f000 f87a 	bl	4fb8 <_printf_i>
    4ec4:	e7ea      	b.n	4e9c <_svfiprintf_r+0x1c8>
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	0001c53c 	.word	0x0001c53c
    4ecc:	0001c542 	.word	0x0001c542
    4ed0:	0001c546 	.word	0x0001c546
    4ed4:	00000000 	.word	0x00000000
    4ed8:	00004c11 	.word	0x00004c11

00004edc <_printf_common>:
    4edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ede:	0015      	movs	r5, r2
    4ee0:	9301      	str	r3, [sp, #4]
    4ee2:	688a      	ldr	r2, [r1, #8]
    4ee4:	690b      	ldr	r3, [r1, #16]
    4ee6:	9000      	str	r0, [sp, #0]
    4ee8:	000c      	movs	r4, r1
    4eea:	4293      	cmp	r3, r2
    4eec:	da00      	bge.n	4ef0 <_printf_common+0x14>
    4eee:	0013      	movs	r3, r2
    4ef0:	0022      	movs	r2, r4
    4ef2:	602b      	str	r3, [r5, #0]
    4ef4:	3243      	adds	r2, #67	; 0x43
    4ef6:	7812      	ldrb	r2, [r2, #0]
    4ef8:	2a00      	cmp	r2, #0
    4efa:	d001      	beq.n	4f00 <_printf_common+0x24>
    4efc:	3301      	adds	r3, #1
    4efe:	602b      	str	r3, [r5, #0]
    4f00:	6823      	ldr	r3, [r4, #0]
    4f02:	069b      	lsls	r3, r3, #26
    4f04:	d502      	bpl.n	4f0c <_printf_common+0x30>
    4f06:	682b      	ldr	r3, [r5, #0]
    4f08:	3302      	adds	r3, #2
    4f0a:	602b      	str	r3, [r5, #0]
    4f0c:	2706      	movs	r7, #6
    4f0e:	6823      	ldr	r3, [r4, #0]
    4f10:	401f      	ands	r7, r3
    4f12:	d027      	beq.n	4f64 <_printf_common+0x88>
    4f14:	0023      	movs	r3, r4
    4f16:	3343      	adds	r3, #67	; 0x43
    4f18:	781b      	ldrb	r3, [r3, #0]
    4f1a:	1e5a      	subs	r2, r3, #1
    4f1c:	4193      	sbcs	r3, r2
    4f1e:	6822      	ldr	r2, [r4, #0]
    4f20:	0692      	lsls	r2, r2, #26
    4f22:	d430      	bmi.n	4f86 <_printf_common+0xaa>
    4f24:	0022      	movs	r2, r4
    4f26:	9901      	ldr	r1, [sp, #4]
    4f28:	3243      	adds	r2, #67	; 0x43
    4f2a:	9800      	ldr	r0, [sp, #0]
    4f2c:	9e08      	ldr	r6, [sp, #32]
    4f2e:	47b0      	blx	r6
    4f30:	1c43      	adds	r3, r0, #1
    4f32:	d025      	beq.n	4f80 <_printf_common+0xa4>
    4f34:	2306      	movs	r3, #6
    4f36:	6820      	ldr	r0, [r4, #0]
    4f38:	682a      	ldr	r2, [r5, #0]
    4f3a:	68e1      	ldr	r1, [r4, #12]
    4f3c:	4003      	ands	r3, r0
    4f3e:	2500      	movs	r5, #0
    4f40:	2b04      	cmp	r3, #4
    4f42:	d103      	bne.n	4f4c <_printf_common+0x70>
    4f44:	1a8d      	subs	r5, r1, r2
    4f46:	43eb      	mvns	r3, r5
    4f48:	17db      	asrs	r3, r3, #31
    4f4a:	401d      	ands	r5, r3
    4f4c:	68a3      	ldr	r3, [r4, #8]
    4f4e:	6922      	ldr	r2, [r4, #16]
    4f50:	4293      	cmp	r3, r2
    4f52:	dd01      	ble.n	4f58 <_printf_common+0x7c>
    4f54:	1a9b      	subs	r3, r3, r2
    4f56:	18ed      	adds	r5, r5, r3
    4f58:	2700      	movs	r7, #0
    4f5a:	42bd      	cmp	r5, r7
    4f5c:	d120      	bne.n	4fa0 <_printf_common+0xc4>
    4f5e:	2000      	movs	r0, #0
    4f60:	e010      	b.n	4f84 <_printf_common+0xa8>
    4f62:	3701      	adds	r7, #1
    4f64:	68e3      	ldr	r3, [r4, #12]
    4f66:	682a      	ldr	r2, [r5, #0]
    4f68:	1a9b      	subs	r3, r3, r2
    4f6a:	429f      	cmp	r7, r3
    4f6c:	dad2      	bge.n	4f14 <_printf_common+0x38>
    4f6e:	0022      	movs	r2, r4
    4f70:	2301      	movs	r3, #1
    4f72:	3219      	adds	r2, #25
    4f74:	9901      	ldr	r1, [sp, #4]
    4f76:	9800      	ldr	r0, [sp, #0]
    4f78:	9e08      	ldr	r6, [sp, #32]
    4f7a:	47b0      	blx	r6
    4f7c:	1c43      	adds	r3, r0, #1
    4f7e:	d1f0      	bne.n	4f62 <_printf_common+0x86>
    4f80:	2001      	movs	r0, #1
    4f82:	4240      	negs	r0, r0
    4f84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4f86:	2030      	movs	r0, #48	; 0x30
    4f88:	18e1      	adds	r1, r4, r3
    4f8a:	3143      	adds	r1, #67	; 0x43
    4f8c:	7008      	strb	r0, [r1, #0]
    4f8e:	0021      	movs	r1, r4
    4f90:	1c5a      	adds	r2, r3, #1
    4f92:	3145      	adds	r1, #69	; 0x45
    4f94:	7809      	ldrb	r1, [r1, #0]
    4f96:	18a2      	adds	r2, r4, r2
    4f98:	3243      	adds	r2, #67	; 0x43
    4f9a:	3302      	adds	r3, #2
    4f9c:	7011      	strb	r1, [r2, #0]
    4f9e:	e7c1      	b.n	4f24 <_printf_common+0x48>
    4fa0:	0022      	movs	r2, r4
    4fa2:	2301      	movs	r3, #1
    4fa4:	321a      	adds	r2, #26
    4fa6:	9901      	ldr	r1, [sp, #4]
    4fa8:	9800      	ldr	r0, [sp, #0]
    4faa:	9e08      	ldr	r6, [sp, #32]
    4fac:	47b0      	blx	r6
    4fae:	1c43      	adds	r3, r0, #1
    4fb0:	d0e6      	beq.n	4f80 <_printf_common+0xa4>
    4fb2:	3701      	adds	r7, #1
    4fb4:	e7d1      	b.n	4f5a <_printf_common+0x7e>
	...

00004fb8 <_printf_i>:
    4fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fba:	b08b      	sub	sp, #44	; 0x2c
    4fbc:	9206      	str	r2, [sp, #24]
    4fbe:	000a      	movs	r2, r1
    4fc0:	3243      	adds	r2, #67	; 0x43
    4fc2:	9307      	str	r3, [sp, #28]
    4fc4:	9005      	str	r0, [sp, #20]
    4fc6:	9204      	str	r2, [sp, #16]
    4fc8:	7e0a      	ldrb	r2, [r1, #24]
    4fca:	000c      	movs	r4, r1
    4fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4fce:	2a6e      	cmp	r2, #110	; 0x6e
    4fd0:	d100      	bne.n	4fd4 <_printf_i+0x1c>
    4fd2:	e08f      	b.n	50f4 <_printf_i+0x13c>
    4fd4:	d817      	bhi.n	5006 <_printf_i+0x4e>
    4fd6:	2a63      	cmp	r2, #99	; 0x63
    4fd8:	d02c      	beq.n	5034 <_printf_i+0x7c>
    4fda:	d808      	bhi.n	4fee <_printf_i+0x36>
    4fdc:	2a00      	cmp	r2, #0
    4fde:	d100      	bne.n	4fe2 <_printf_i+0x2a>
    4fe0:	e099      	b.n	5116 <_printf_i+0x15e>
    4fe2:	2a58      	cmp	r2, #88	; 0x58
    4fe4:	d054      	beq.n	5090 <_printf_i+0xd8>
    4fe6:	0026      	movs	r6, r4
    4fe8:	3642      	adds	r6, #66	; 0x42
    4fea:	7032      	strb	r2, [r6, #0]
    4fec:	e029      	b.n	5042 <_printf_i+0x8a>
    4fee:	2a64      	cmp	r2, #100	; 0x64
    4ff0:	d001      	beq.n	4ff6 <_printf_i+0x3e>
    4ff2:	2a69      	cmp	r2, #105	; 0x69
    4ff4:	d1f7      	bne.n	4fe6 <_printf_i+0x2e>
    4ff6:	6821      	ldr	r1, [r4, #0]
    4ff8:	681a      	ldr	r2, [r3, #0]
    4ffa:	0608      	lsls	r0, r1, #24
    4ffc:	d523      	bpl.n	5046 <_printf_i+0x8e>
    4ffe:	1d11      	adds	r1, r2, #4
    5000:	6019      	str	r1, [r3, #0]
    5002:	6815      	ldr	r5, [r2, #0]
    5004:	e025      	b.n	5052 <_printf_i+0x9a>
    5006:	2a73      	cmp	r2, #115	; 0x73
    5008:	d100      	bne.n	500c <_printf_i+0x54>
    500a:	e088      	b.n	511e <_printf_i+0x166>
    500c:	d808      	bhi.n	5020 <_printf_i+0x68>
    500e:	2a6f      	cmp	r2, #111	; 0x6f
    5010:	d029      	beq.n	5066 <_printf_i+0xae>
    5012:	2a70      	cmp	r2, #112	; 0x70
    5014:	d1e7      	bne.n	4fe6 <_printf_i+0x2e>
    5016:	2220      	movs	r2, #32
    5018:	6809      	ldr	r1, [r1, #0]
    501a:	430a      	orrs	r2, r1
    501c:	6022      	str	r2, [r4, #0]
    501e:	e003      	b.n	5028 <_printf_i+0x70>
    5020:	2a75      	cmp	r2, #117	; 0x75
    5022:	d020      	beq.n	5066 <_printf_i+0xae>
    5024:	2a78      	cmp	r2, #120	; 0x78
    5026:	d1de      	bne.n	4fe6 <_printf_i+0x2e>
    5028:	0022      	movs	r2, r4
    502a:	2178      	movs	r1, #120	; 0x78
    502c:	3245      	adds	r2, #69	; 0x45
    502e:	7011      	strb	r1, [r2, #0]
    5030:	4a6c      	ldr	r2, [pc, #432]	; (51e4 <_printf_i+0x22c>)
    5032:	e030      	b.n	5096 <_printf_i+0xde>
    5034:	000e      	movs	r6, r1
    5036:	681a      	ldr	r2, [r3, #0]
    5038:	3642      	adds	r6, #66	; 0x42
    503a:	1d11      	adds	r1, r2, #4
    503c:	6019      	str	r1, [r3, #0]
    503e:	6813      	ldr	r3, [r2, #0]
    5040:	7033      	strb	r3, [r6, #0]
    5042:	2301      	movs	r3, #1
    5044:	e079      	b.n	513a <_printf_i+0x182>
    5046:	0649      	lsls	r1, r1, #25
    5048:	d5d9      	bpl.n	4ffe <_printf_i+0x46>
    504a:	1d11      	adds	r1, r2, #4
    504c:	6019      	str	r1, [r3, #0]
    504e:	2300      	movs	r3, #0
    5050:	5ed5      	ldrsh	r5, [r2, r3]
    5052:	2d00      	cmp	r5, #0
    5054:	da03      	bge.n	505e <_printf_i+0xa6>
    5056:	232d      	movs	r3, #45	; 0x2d
    5058:	9a04      	ldr	r2, [sp, #16]
    505a:	426d      	negs	r5, r5
    505c:	7013      	strb	r3, [r2, #0]
    505e:	4b62      	ldr	r3, [pc, #392]	; (51e8 <_printf_i+0x230>)
    5060:	270a      	movs	r7, #10
    5062:	9303      	str	r3, [sp, #12]
    5064:	e02f      	b.n	50c6 <_printf_i+0x10e>
    5066:	6820      	ldr	r0, [r4, #0]
    5068:	6819      	ldr	r1, [r3, #0]
    506a:	0605      	lsls	r5, r0, #24
    506c:	d503      	bpl.n	5076 <_printf_i+0xbe>
    506e:	1d08      	adds	r0, r1, #4
    5070:	6018      	str	r0, [r3, #0]
    5072:	680d      	ldr	r5, [r1, #0]
    5074:	e005      	b.n	5082 <_printf_i+0xca>
    5076:	0640      	lsls	r0, r0, #25
    5078:	d5f9      	bpl.n	506e <_printf_i+0xb6>
    507a:	680d      	ldr	r5, [r1, #0]
    507c:	1d08      	adds	r0, r1, #4
    507e:	6018      	str	r0, [r3, #0]
    5080:	b2ad      	uxth	r5, r5
    5082:	4b59      	ldr	r3, [pc, #356]	; (51e8 <_printf_i+0x230>)
    5084:	2708      	movs	r7, #8
    5086:	9303      	str	r3, [sp, #12]
    5088:	2a6f      	cmp	r2, #111	; 0x6f
    508a:	d018      	beq.n	50be <_printf_i+0x106>
    508c:	270a      	movs	r7, #10
    508e:	e016      	b.n	50be <_printf_i+0x106>
    5090:	3145      	adds	r1, #69	; 0x45
    5092:	700a      	strb	r2, [r1, #0]
    5094:	4a54      	ldr	r2, [pc, #336]	; (51e8 <_printf_i+0x230>)
    5096:	9203      	str	r2, [sp, #12]
    5098:	681a      	ldr	r2, [r3, #0]
    509a:	6821      	ldr	r1, [r4, #0]
    509c:	1d10      	adds	r0, r2, #4
    509e:	6018      	str	r0, [r3, #0]
    50a0:	6815      	ldr	r5, [r2, #0]
    50a2:	0608      	lsls	r0, r1, #24
    50a4:	d522      	bpl.n	50ec <_printf_i+0x134>
    50a6:	07cb      	lsls	r3, r1, #31
    50a8:	d502      	bpl.n	50b0 <_printf_i+0xf8>
    50aa:	2320      	movs	r3, #32
    50ac:	4319      	orrs	r1, r3
    50ae:	6021      	str	r1, [r4, #0]
    50b0:	2710      	movs	r7, #16
    50b2:	2d00      	cmp	r5, #0
    50b4:	d103      	bne.n	50be <_printf_i+0x106>
    50b6:	2320      	movs	r3, #32
    50b8:	6822      	ldr	r2, [r4, #0]
    50ba:	439a      	bics	r2, r3
    50bc:	6022      	str	r2, [r4, #0]
    50be:	0023      	movs	r3, r4
    50c0:	2200      	movs	r2, #0
    50c2:	3343      	adds	r3, #67	; 0x43
    50c4:	701a      	strb	r2, [r3, #0]
    50c6:	6863      	ldr	r3, [r4, #4]
    50c8:	60a3      	str	r3, [r4, #8]
    50ca:	2b00      	cmp	r3, #0
    50cc:	db5c      	blt.n	5188 <_printf_i+0x1d0>
    50ce:	2204      	movs	r2, #4
    50d0:	6821      	ldr	r1, [r4, #0]
    50d2:	4391      	bics	r1, r2
    50d4:	6021      	str	r1, [r4, #0]
    50d6:	2d00      	cmp	r5, #0
    50d8:	d158      	bne.n	518c <_printf_i+0x1d4>
    50da:	9e04      	ldr	r6, [sp, #16]
    50dc:	2b00      	cmp	r3, #0
    50de:	d064      	beq.n	51aa <_printf_i+0x1f2>
    50e0:	0026      	movs	r6, r4
    50e2:	9b03      	ldr	r3, [sp, #12]
    50e4:	3642      	adds	r6, #66	; 0x42
    50e6:	781b      	ldrb	r3, [r3, #0]
    50e8:	7033      	strb	r3, [r6, #0]
    50ea:	e05e      	b.n	51aa <_printf_i+0x1f2>
    50ec:	0648      	lsls	r0, r1, #25
    50ee:	d5da      	bpl.n	50a6 <_printf_i+0xee>
    50f0:	b2ad      	uxth	r5, r5
    50f2:	e7d8      	b.n	50a6 <_printf_i+0xee>
    50f4:	6809      	ldr	r1, [r1, #0]
    50f6:	681a      	ldr	r2, [r3, #0]
    50f8:	0608      	lsls	r0, r1, #24
    50fa:	d505      	bpl.n	5108 <_printf_i+0x150>
    50fc:	1d11      	adds	r1, r2, #4
    50fe:	6019      	str	r1, [r3, #0]
    5100:	6813      	ldr	r3, [r2, #0]
    5102:	6962      	ldr	r2, [r4, #20]
    5104:	601a      	str	r2, [r3, #0]
    5106:	e006      	b.n	5116 <_printf_i+0x15e>
    5108:	0649      	lsls	r1, r1, #25
    510a:	d5f7      	bpl.n	50fc <_printf_i+0x144>
    510c:	1d11      	adds	r1, r2, #4
    510e:	6019      	str	r1, [r3, #0]
    5110:	6813      	ldr	r3, [r2, #0]
    5112:	8aa2      	ldrh	r2, [r4, #20]
    5114:	801a      	strh	r2, [r3, #0]
    5116:	2300      	movs	r3, #0
    5118:	9e04      	ldr	r6, [sp, #16]
    511a:	6123      	str	r3, [r4, #16]
    511c:	e054      	b.n	51c8 <_printf_i+0x210>
    511e:	681a      	ldr	r2, [r3, #0]
    5120:	1d11      	adds	r1, r2, #4
    5122:	6019      	str	r1, [r3, #0]
    5124:	6816      	ldr	r6, [r2, #0]
    5126:	2100      	movs	r1, #0
    5128:	6862      	ldr	r2, [r4, #4]
    512a:	0030      	movs	r0, r6
    512c:	f000 f85e 	bl	51ec <memchr>
    5130:	2800      	cmp	r0, #0
    5132:	d001      	beq.n	5138 <_printf_i+0x180>
    5134:	1b80      	subs	r0, r0, r6
    5136:	6060      	str	r0, [r4, #4]
    5138:	6863      	ldr	r3, [r4, #4]
    513a:	6123      	str	r3, [r4, #16]
    513c:	2300      	movs	r3, #0
    513e:	9a04      	ldr	r2, [sp, #16]
    5140:	7013      	strb	r3, [r2, #0]
    5142:	e041      	b.n	51c8 <_printf_i+0x210>
    5144:	6923      	ldr	r3, [r4, #16]
    5146:	0032      	movs	r2, r6
    5148:	9906      	ldr	r1, [sp, #24]
    514a:	9805      	ldr	r0, [sp, #20]
    514c:	9d07      	ldr	r5, [sp, #28]
    514e:	47a8      	blx	r5
    5150:	1c43      	adds	r3, r0, #1
    5152:	d043      	beq.n	51dc <_printf_i+0x224>
    5154:	6823      	ldr	r3, [r4, #0]
    5156:	2500      	movs	r5, #0
    5158:	079b      	lsls	r3, r3, #30
    515a:	d40f      	bmi.n	517c <_printf_i+0x1c4>
    515c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    515e:	68e0      	ldr	r0, [r4, #12]
    5160:	4298      	cmp	r0, r3
    5162:	da3d      	bge.n	51e0 <_printf_i+0x228>
    5164:	0018      	movs	r0, r3
    5166:	e03b      	b.n	51e0 <_printf_i+0x228>
    5168:	0022      	movs	r2, r4
    516a:	2301      	movs	r3, #1
    516c:	3219      	adds	r2, #25
    516e:	9906      	ldr	r1, [sp, #24]
    5170:	9805      	ldr	r0, [sp, #20]
    5172:	9e07      	ldr	r6, [sp, #28]
    5174:	47b0      	blx	r6
    5176:	1c43      	adds	r3, r0, #1
    5178:	d030      	beq.n	51dc <_printf_i+0x224>
    517a:	3501      	adds	r5, #1
    517c:	68e3      	ldr	r3, [r4, #12]
    517e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5180:	1a9b      	subs	r3, r3, r2
    5182:	429d      	cmp	r5, r3
    5184:	dbf0      	blt.n	5168 <_printf_i+0x1b0>
    5186:	e7e9      	b.n	515c <_printf_i+0x1a4>
    5188:	2d00      	cmp	r5, #0
    518a:	d0a9      	beq.n	50e0 <_printf_i+0x128>
    518c:	9e04      	ldr	r6, [sp, #16]
    518e:	0028      	movs	r0, r5
    5190:	0039      	movs	r1, r7
    5192:	f7ff fc21 	bl	49d8 <__aeabi_uidivmod>
    5196:	9b03      	ldr	r3, [sp, #12]
    5198:	3e01      	subs	r6, #1
    519a:	5c5b      	ldrb	r3, [r3, r1]
    519c:	0028      	movs	r0, r5
    519e:	7033      	strb	r3, [r6, #0]
    51a0:	0039      	movs	r1, r7
    51a2:	f7ff fb93 	bl	48cc <__udivsi3>
    51a6:	1e05      	subs	r5, r0, #0
    51a8:	d1f1      	bne.n	518e <_printf_i+0x1d6>
    51aa:	2f08      	cmp	r7, #8
    51ac:	d109      	bne.n	51c2 <_printf_i+0x20a>
    51ae:	6823      	ldr	r3, [r4, #0]
    51b0:	07db      	lsls	r3, r3, #31
    51b2:	d506      	bpl.n	51c2 <_printf_i+0x20a>
    51b4:	6863      	ldr	r3, [r4, #4]
    51b6:	6922      	ldr	r2, [r4, #16]
    51b8:	4293      	cmp	r3, r2
    51ba:	dc02      	bgt.n	51c2 <_printf_i+0x20a>
    51bc:	2330      	movs	r3, #48	; 0x30
    51be:	3e01      	subs	r6, #1
    51c0:	7033      	strb	r3, [r6, #0]
    51c2:	9b04      	ldr	r3, [sp, #16]
    51c4:	1b9b      	subs	r3, r3, r6
    51c6:	6123      	str	r3, [r4, #16]
    51c8:	9b07      	ldr	r3, [sp, #28]
    51ca:	aa09      	add	r2, sp, #36	; 0x24
    51cc:	9300      	str	r3, [sp, #0]
    51ce:	0021      	movs	r1, r4
    51d0:	9b06      	ldr	r3, [sp, #24]
    51d2:	9805      	ldr	r0, [sp, #20]
    51d4:	f7ff fe82 	bl	4edc <_printf_common>
    51d8:	1c43      	adds	r3, r0, #1
    51da:	d1b3      	bne.n	5144 <_printf_i+0x18c>
    51dc:	2001      	movs	r0, #1
    51de:	4240      	negs	r0, r0
    51e0:	b00b      	add	sp, #44	; 0x2c
    51e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51e4:	0001c55e 	.word	0x0001c55e
    51e8:	0001c54d 	.word	0x0001c54d

000051ec <memchr>:
    51ec:	b2c9      	uxtb	r1, r1
    51ee:	1882      	adds	r2, r0, r2
    51f0:	4290      	cmp	r0, r2
    51f2:	d101      	bne.n	51f8 <memchr+0xc>
    51f4:	2000      	movs	r0, #0
    51f6:	4770      	bx	lr
    51f8:	7803      	ldrb	r3, [r0, #0]
    51fa:	428b      	cmp	r3, r1
    51fc:	d0fb      	beq.n	51f6 <memchr+0xa>
    51fe:	3001      	adds	r0, #1
    5200:	e7f6      	b.n	51f0 <memchr+0x4>

00005202 <memmove>:
    5202:	b510      	push	{r4, lr}
    5204:	4288      	cmp	r0, r1
    5206:	d902      	bls.n	520e <memmove+0xc>
    5208:	188b      	adds	r3, r1, r2
    520a:	4298      	cmp	r0, r3
    520c:	d308      	bcc.n	5220 <memmove+0x1e>
    520e:	2300      	movs	r3, #0
    5210:	429a      	cmp	r2, r3
    5212:	d007      	beq.n	5224 <memmove+0x22>
    5214:	5ccc      	ldrb	r4, [r1, r3]
    5216:	54c4      	strb	r4, [r0, r3]
    5218:	3301      	adds	r3, #1
    521a:	e7f9      	b.n	5210 <memmove+0xe>
    521c:	5c8b      	ldrb	r3, [r1, r2]
    521e:	5483      	strb	r3, [r0, r2]
    5220:	3a01      	subs	r2, #1
    5222:	d2fb      	bcs.n	521c <memmove+0x1a>
    5224:	bd10      	pop	{r4, pc}

00005226 <_realloc_r>:
    5226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5228:	0007      	movs	r7, r0
    522a:	000d      	movs	r5, r1
    522c:	0016      	movs	r6, r2
    522e:	2900      	cmp	r1, #0
    5230:	d105      	bne.n	523e <_realloc_r+0x18>
    5232:	0011      	movs	r1, r2
    5234:	f7ff fc58 	bl	4ae8 <_malloc_r>
    5238:	0004      	movs	r4, r0
    523a:	0020      	movs	r0, r4
    523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    523e:	2a00      	cmp	r2, #0
    5240:	d103      	bne.n	524a <_realloc_r+0x24>
    5242:	f7ff fc07 	bl	4a54 <_free_r>
    5246:	0034      	movs	r4, r6
    5248:	e7f7      	b.n	523a <_realloc_r+0x14>
    524a:	f000 f812 	bl	5272 <_malloc_usable_size_r>
    524e:	002c      	movs	r4, r5
    5250:	4286      	cmp	r6, r0
    5252:	d9f2      	bls.n	523a <_realloc_r+0x14>
    5254:	0031      	movs	r1, r6
    5256:	0038      	movs	r0, r7
    5258:	f7ff fc46 	bl	4ae8 <_malloc_r>
    525c:	1e04      	subs	r4, r0, #0
    525e:	d0ec      	beq.n	523a <_realloc_r+0x14>
    5260:	0029      	movs	r1, r5
    5262:	0032      	movs	r2, r6
    5264:	f7ff fbec 	bl	4a40 <memcpy>
    5268:	0029      	movs	r1, r5
    526a:	0038      	movs	r0, r7
    526c:	f7ff fbf2 	bl	4a54 <_free_r>
    5270:	e7e3      	b.n	523a <_realloc_r+0x14>

00005272 <_malloc_usable_size_r>:
    5272:	1f0b      	subs	r3, r1, #4
    5274:	681b      	ldr	r3, [r3, #0]
    5276:	1f18      	subs	r0, r3, #4
    5278:	2b00      	cmp	r3, #0
    527a:	da01      	bge.n	5280 <_malloc_usable_size_r+0xe>
    527c:	580b      	ldr	r3, [r1, r0]
    527e:	18c0      	adds	r0, r0, r3
    5280:	4770      	bx	lr
    5282:	0000      	movs	r0, r0
    5284:	000013a6 	.word	0x000013a6
    5288:	000013d4 	.word	0x000013d4
    528c:	0000145e 	.word	0x0000145e
    5290:	0000148c 	.word	0x0000148c
    5294:	00001402 	.word	0x00001402
    5298:	00001430 	.word	0x00001430
    529c:	000014ba 	.word	0x000014ba
    52a0:	000014e8 	.word	0x000014e8
    52a4:	00001524 	.word	0x00001524
    52a8:	00001552 	.word	0x00001552
    52ac:	000015dc 	.word	0x000015dc
    52b0:	0000160a 	.word	0x0000160a
    52b4:	00001580 	.word	0x00001580
    52b8:	000015ae 	.word	0x000015ae
    52bc:	00001638 	.word	0x00001638
    52c0:	00001666 	.word	0x00001666
    52c4:	000016fa 	.word	0x000016fa
    52c8:	00001728 	.word	0x00001728
    52cc:	000017b2 	.word	0x000017b2
    52d0:	000017e0 	.word	0x000017e0
    52d4:	00001756 	.word	0x00001756
    52d8:	00001784 	.word	0x00001784
    52dc:	0000180e 	.word	0x0000180e
    52e0:	0000183c 	.word	0x0000183c
    52e4:	00001878 	.word	0x00001878
    52e8:	000018a6 	.word	0x000018a6
    52ec:	00001930 	.word	0x00001930
    52f0:	0000195e 	.word	0x0000195e
    52f4:	000018d4 	.word	0x000018d4
    52f8:	00001902 	.word	0x00001902
    52fc:	0000198c 	.word	0x0000198c
    5300:	000019ba 	.word	0x000019ba
    5304:	00003ce4 	.word	0x00003ce4
    5308:	00003cdc 	.word	0x00003cdc
    530c:	00003cfc 	.word	0x00003cfc
    5310:	00003d06 	.word	0x00003d06
    5314:	00003d10 	.word	0x00003d10
    5318:	00003d1a 	.word	0x00003d1a
    531c:	00003d24 	.word	0x00003d24
    5320:	00003d2e 	.word	0x00003d2e
    5324:	00003d40 	.word	0x00003d40
    5328:	00003d38 	.word	0x00003d38
    532c:	00003d62 	.word	0x00003d62
    5330:	00003d6c 	.word	0x00003d6c
    5334:	00003d76 	.word	0x00003d76
    5338:	00003d80 	.word	0x00003d80
    533c:	00003d8a 	.word	0x00003d8a
    5340:	00003d94 	.word	0x00003d94
    5344:	00003e74 	.word	0x00003e74
    5348:	00003dbe 	.word	0x00003dbe
    534c:	00003dd8 	.word	0x00003dd8
    5350:	00003df2 	.word	0x00003df2
    5354:	00003e0c 	.word	0x00003e0c
    5358:	00003e26 	.word	0x00003e26
    535c:	00003e40 	.word	0x00003e40
    5360:	00003e5a 	.word	0x00003e5a
    5364:	00003f4c 	.word	0x00003f4c
    5368:	00003e88 	.word	0x00003e88
    536c:	00003e9e 	.word	0x00003e9e
    5370:	00003eb4 	.word	0x00003eb4
    5374:	00003eca 	.word	0x00003eca
    5378:	00003ee0 	.word	0x00003ee0
    537c:	00003ef6 	.word	0x00003ef6
    5380:	00003f0c 	.word	0x00003f0c
    5384:	00003f54 	.word	0x00003f54
    5388:	00003e88 	.word	0x00003e88
    538c:	00003e9e 	.word	0x00003e9e
    5390:	00003eb4 	.word	0x00003eb4
    5394:	00003eca 	.word	0x00003eca
    5398:	00003ee0 	.word	0x00003ee0
    539c:	00003ef6 	.word	0x00003ef6
    53a0:	00003f0c 	.word	0x00003f0c
    53a4:	00003f5c 	.word	0x00003f5c
    53a8:	00003e88 	.word	0x00003e88
    53ac:	00003e9e 	.word	0x00003e9e
    53b0:	00003eb4 	.word	0x00003eb4
    53b4:	00003eca 	.word	0x00003eca
    53b8:	00003ee0 	.word	0x00003ee0
    53bc:	00003ef6 	.word	0x00003ef6
    53c0:	00003f0c 	.word	0x00003f0c
    53c4:	00003f64 	.word	0x00003f64
    53c8:	00003e88 	.word	0x00003e88
    53cc:	00003e9e 	.word	0x00003e9e
    53d0:	00003eb4 	.word	0x00003eb4
    53d4:	00003eca 	.word	0x00003eca
    53d8:	00003ee0 	.word	0x00003ee0
    53dc:	00003ef6 	.word	0x00003ef6
    53e0:	00003f0c 	.word	0x00003f0c
    53e4:	00003f6c 	.word	0x00003f6c
    53e8:	00003e88 	.word	0x00003e88
    53ec:	00003e9e 	.word	0x00003e9e
    53f0:	00003eb4 	.word	0x00003eb4
    53f4:	00003eca 	.word	0x00003eca
    53f8:	00003ee0 	.word	0x00003ee0
    53fc:	00003ef6 	.word	0x00003ef6
    5400:	00003f0c 	.word	0x00003f0c
    5404:	00003f74 	.word	0x00003f74
    5408:	00003e88 	.word	0x00003e88
    540c:	00003e9e 	.word	0x00003e9e
    5410:	00003eb4 	.word	0x00003eb4
    5414:	00003eca 	.word	0x00003eca
    5418:	00003ee0 	.word	0x00003ee0
    541c:	00003ef6 	.word	0x00003ef6
    5420:	00003f0c 	.word	0x00003f0c
    5424:	00003f7c 	.word	0x00003f7c
    5428:	00003e88 	.word	0x00003e88
    542c:	00003e9e 	.word	0x00003e9e
    5430:	00003eb4 	.word	0x00003eb4
    5434:	00003eca 	.word	0x00003eca
    5438:	00003ee0 	.word	0x00003ee0
    543c:	00003ef6 	.word	0x00003ef6
    5440:	00003f0c 	.word	0x00003f0c
    5444:	00003f22 	.word	0x00003f22
    5448:	00003e88 	.word	0x00003e88
    544c:	00003e9e 	.word	0x00003e9e
    5450:	00003eb4 	.word	0x00003eb4
    5454:	00003eca 	.word	0x00003eca
    5458:	00003ee0 	.word	0x00003ee0
    545c:	00003ef6 	.word	0x00003ef6
    5460:	00003f0c 	.word	0x00003f0c
    5464:	00003f2e 	.word	0x00003f2e
    5468:	00003f4c 	.word	0x00003f4c
    546c:	00003f54 	.word	0x00003f54
    5470:	00003f5c 	.word	0x00003f5c
    5474:	00003f64 	.word	0x00003f64
    5478:	00003f6c 	.word	0x00003f6c
    547c:	00003f74 	.word	0x00003f74
    5480:	00003f7c 	.word	0x00003f7c
    5484:	00003f2e 	.word	0x00003f2e
    5488:	00003f4c 	.word	0x00003f4c
    548c:	00003f54 	.word	0x00003f54
    5490:	00003f5c 	.word	0x00003f5c
    5494:	00003f64 	.word	0x00003f64
    5498:	00003f6c 	.word	0x00003f6c
    549c:	00003f74 	.word	0x00003f74
    54a0:	00003f7c 	.word	0x00003f7c
    54a4:	00003f2e 	.word	0x00003f2e
    54a8:	00003f4c 	.word	0x00003f4c
    54ac:	00003f54 	.word	0x00003f54
    54b0:	00003f5c 	.word	0x00003f5c
    54b4:	00003f64 	.word	0x00003f64
    54b8:	00003f6c 	.word	0x00003f6c
    54bc:	00003f74 	.word	0x00003f74
    54c0:	00003f7c 	.word	0x00003f7c
    54c4:	00003f2e 	.word	0x00003f2e
    54c8:	00003f4c 	.word	0x00003f4c
    54cc:	00003f54 	.word	0x00003f54
    54d0:	00003f5c 	.word	0x00003f5c
    54d4:	00003f64 	.word	0x00003f64
    54d8:	00003f6c 	.word	0x00003f6c
    54dc:	00003f74 	.word	0x00003f74
    54e0:	00003f7c 	.word	0x00003f7c
    54e4:	00003f2e 	.word	0x00003f2e
    54e8:	00003f4c 	.word	0x00003f4c
    54ec:	00003f54 	.word	0x00003f54
    54f0:	00003f5c 	.word	0x00003f5c
    54f4:	00003f64 	.word	0x00003f64
    54f8:	00003f6c 	.word	0x00003f6c
    54fc:	00003f74 	.word	0x00003f74
    5500:	00003f7c 	.word	0x00003f7c
    5504:	00003f2e 	.word	0x00003f2e
    5508:	00003f4c 	.word	0x00003f4c
    550c:	00003f54 	.word	0x00003f54
    5510:	00003f5c 	.word	0x00003f5c
    5514:	00003f64 	.word	0x00003f64
    5518:	00003f6c 	.word	0x00003f6c
    551c:	00003f74 	.word	0x00003f74
    5520:	00003f7c 	.word	0x00003f7c
    5524:	00003f2e 	.word	0x00003f2e
    5528:	00003f4c 	.word	0x00003f4c
    552c:	00003f54 	.word	0x00003f54
    5530:	00003f5c 	.word	0x00003f5c
    5534:	00003f64 	.word	0x00003f64
    5538:	00003f6c 	.word	0x00003f6c
    553c:	00003f74 	.word	0x00003f74
    5540:	00003f7c 	.word	0x00003f7c
    5544:	00003f2e 	.word	0x00003f2e
    5548:	00003f4c 	.word	0x00003f4c
    554c:	00003f54 	.word	0x00003f54
    5550:	00003f5c 	.word	0x00003f5c
    5554:	00003f64 	.word	0x00003f64
    5558:	00003f6c 	.word	0x00003f6c
    555c:	00003f74 	.word	0x00003f74
    5560:	00003f7c 	.word	0x00003f7c
    5564:	00004056 	.word	0x00004056
    5568:	0000404e 	.word	0x0000404e
    556c:	0000410e 	.word	0x0000410e
    5570:	00004120 	.word	0x00004120
    5574:	00004132 	.word	0x00004132
    5578:	00004144 	.word	0x00004144
    557c:	00004156 	.word	0x00004156
    5580:	00004168 	.word	0x00004168
    5584:	00004202 	.word	0x00004202
    5588:	0000420e 	.word	0x0000420e
    558c:	00004226 	.word	0x00004226
    5590:	0000421a 	.word	0x0000421a
    5594:	00004232 	.word	0x00004232
    5598:	0000423e 	.word	0x0000423e
    559c:	0000424a 	.word	0x0000424a
    55a0:	00004256 	.word	0x00004256
    55a4:	00004392 	.word	0x00004392
    55a8:	0000439e 	.word	0x0000439e
    55ac:	000043b6 	.word	0x000043b6
    55b0:	000043aa 	.word	0x000043aa
    55b4:	000043c2 	.word	0x000043c2
    55b8:	000043ce 	.word	0x000043ce
    55bc:	000043da 	.word	0x000043da
    55c0:	000043e6 	.word	0x000043e6

000055c4 <ET011TT2_KWVCOM_GU_LUT>:
	...
    55d0:	0c000000 00000000 00000000 00000000     ................
    55e0:	00000000                                ....

000055e4 <ET011TT2_KW_GU_LUT>:
    55e4:	80000001 80000001 80000001 80000001     ................
    55f4:	80000001 80000001 80000001 80000001     ................
    5604:	80000001 80000001 40000002 40000002     ...........@...@
    5614:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5624:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5634:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5644:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5654:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5664:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5674:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5684:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5694:	40000002 40000002 40000002 40000002     ...@...@...@...@
    56a4:	40000002 40000002 40000002 40000002     ...@...@...@...@
    56b4:	40000002 40000002 40000002 40000002     ...@...@...@...@
    56c4:	40000002 40000002 40000002 40000002     ...@...@...@...@
    56d4:	00000000 ffffffff 00000000 00000000     ................
	...

000057e4 <ET011TT2_FT_LUT>:
	...

00005864 <ET011TT2_KWVCOM_A2_LUT>:
	...
    586c:	000000c0 00000000 00000000 00000000     ................
	...

00005884 <ET011TT2_KW_A2_LUT>:
    5884:	a9a9a9a9 a9a9a9a9 a9a9a9a9 a9a9a9a9     ................
    5894:	a9a9a9a9 a9a9a9a9 a1a9a9a9 a129a9a9     ..............).
    58a4:	8121a9a8 8105a9a8 0505a1a8 150580a8     ..!.............
    58b4:	54150088 54040480 54145482 54145642     ...T...T.T.TBV.T
    58c4:	54565646 54565646 56565656 56565656     FVVTFVVTVVVVVVVV
    58d4:	52525656 52525656 52525656 52525256     VVRRVVRRVVRRVRRR
    58e4:	52525256 42525252 42525252 4a4a4a5a     VRRRRRRBRRRBZJJJ
    58f4:	6a6a6a6a 6a6a6a6a 00000000 ffffffff     jjjjjjjj........
	...

00005a84 <ED037TC1_A2_LUT>:
    5a84:	0015062a 00000000 06280000 00000014     *.........(.....
    5a94:	00000000 00100620 00000000 06140000     .... ...........
    5aa4:	00000028 00000000 00000000 00000000     (...............
    5ab4:	02000000 00000a02 02080800 0a020200     ................
	...
    5ae8:	22222222 00000022                       """""...

00005af0 <ED037TC1_DU_LUT>:
	...
    5af8:	2a010000 00000000 00000000 0000550a     ...*.........U..
	...
    5b24:	05000505 00050503 00000000 00000000     ................
	...
    5b54:	22222222 00000022                       """""...

00005b5c <SSD1608_A45_IU_LUT>:
    5b5c:	18181824 10181800 00000008 00000000     $...............
    5b6c:	00000000 11111141 00000001 00000000     ....A...........

00005b7c <SSD1608_A05_IU_LUT>:
    5b7c:	28181810 18181818 00000008 00000000     ...(............
    5b8c:	00000000 13221233 00000011 00000000     ....3.".........

00005b9c <ED028TC1_WF_LUT>:
    5b9c:	0011042e 00000000 00000000 00000000     ................
    5bac:	00000010 00000100 00000100 10040100     ................
    5bbc:	00440100 00400000 00000000 00400000     ..D...@.......@.
    5bcc:	00000000 10400100 10400500 00000000     ......@...@.....
    5bdc:	00511400 00000000 00000000 00000010     ..Q.............
    5bec:	00000010 00400100 00401100 10040100     ......@...@.....
    5bfc:	00440100 00400000 00000000 10440100     ..D...@.......D.
    5c0c:	00000100 10400100 10400500 00000100     ......@...@.....
    5c1c:	00511500 00100000 00000010 00000010     ..Q.............
    5c2c:	00000010 00400100 10401100 10040100     ......@...@.....
    5c3c:	00441100 00400100 10400000 10444100     ..D...@...@..AD.
    5c4c:	00000100 10441500 10444500 00040100     ......D..ED.....
    5c5c:	00511500 00100000 00000010 00000010     ..Q.............
    5c6c:	00000010 00440100 10401100 10040100     ......D...@.....
    5c7c:	00441100 00404100 10400000 10444500     ..D..A@...@..ED.
    5c8c:	10400100 10441500 10444500 10440500     ..@...D..ED...D.
    5c9c:	00512500 00100004 00000010 00400010     .%Q...........@.
    5cac:	00400010 10440100 10401500 10040500     ..@...D...@.....
    5cbc:	10441100 00404100 10401100 10444500     ..D..A@...@..ED.
    5ccc:	10440100 10441500 10444500 10440500     ..D...D..ED...D.
    5cdc:	00512500 00541104 00400010 00400110     .%Q...T...@...@.
    5cec:	00444110 10440100 10405500 10044504     .AD...D..U@..E..
    5cfc:	10445500 00444500 10401100 10444500     .UD..ED...@..ED.
    5d0c:	10440100 10441500 10444500 10540500     ..D...D..ED...T.
    5d1c:	00512500 00541104 00400110 00400110     .%Q...T...@...@.
    5d2c:	00444110 10440500 14445500 10544504     .AD...D..UD..ET.
    5d3c:	10445500 10444500 10441100 10444500     .UD..ED...D..ED.
    5d4c:	10440500 14545500 14544500 10540500     ..D..UT..ET...T.
    5d5c:	00512500 10545504 00500114 10445110     .%Q..UT...P..QD.
    5d6c:	10444114 10544500 14445504 10544504     .AD..ET..UD..ET.
    5d7c:	10445500 10444500 10445500 14544500     .UD..ED..UD..ET.
    5d8c:	14441500 14545500 14554500 14540500     ..D..UT..EU...T.
    5d9c:	00512900 10545504 10500114 10545110     .)Q..UT...P..QT.
    5dac:	10444114 10545500 14445504 14544504     .AD..UT..UD..ET.
    5dbc:	14445500 14544510 10445500 14544500     .UD..ET..UD..ET.
    5dcc:	14541500 14545500 14554500 14540500     ..T..UT..EU...T.
    5ddc:	00512900 10545514 10500114 14545510     .)Q..UT...P..UT.
    5dec:	10444114 10545510 14545504 14544504     .AD..UT..UT..ET.
    5dfc:	14445500 14544510 10545504 14544500     .UD..ET..UT..ET.
    5e0c:	14541500 14545500 14555500 14540500     ..T..UT..UU...T.
    5e1c:	00a12900 10545514 14500114 14545510     .)...UT...P..UT.
    5e2c:	10544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    5e3c:	14445510 14544510 14545504 14544500     .UD..ET..UT..ET.
    5e4c:	14541500 14555500 14555511 14540511     ..T..UU..UU...T.
    5e5c:	00a22a00 14545518 14500114 14545510     .*...UT...P..UT.
    5e6c:	14544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    5e7c:	14545510 14544510 14545504 14544500     .UT..ET..UT..ET.
    5e8c:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    5e9c:	00a26a10 14555518 14544514 14545510     .j...UU..ET..UT.
    5eac:	14544114 14545514 14555514 14554515     .AT..UT..UU..EU.
    5ebc:	14545511 14544511 14545515 14544501     .UT..ET..UT..ET.
    5ecc:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    5edc:	00a6aa10 14555518 14544515 14545510     .....UU..ET..UT.
    5eec:	14544514 14545514 15555514 15554515     .ET..UT..UU..EU.
    5efc:	14545515 14544515 14545515 14544501     .UT..ET..UT..ET.
    5f0c:	14541511 14555511 15555511 14550511     ..T..UU..UU...U.
    5f1c:	10a6aa11 15556518 14554515 14545514     .....eU..EU..UT.
    5f2c:	14544514 14545514 15555515 15554515     .ET..UT..UU..EU.
    5f3c:	14546515 14544515 14545515 14555511     .eT..ET..UT..UU.
    5f4c:	14545511 14555511 15555511 14550511     .UT..UU..UU...U.
    5f5c:	10a6aa11 55a9a518 14554555 14545514     .......UUEU..UT.
    5f6c:	14558515 15995515 15556515 15594515     ..U..U...eU..EY.
    5f7c:	14596515 15558515 14555515 14559511     .eY...U..UU...U.
    5f8c:	14545511 14555511 15555511 55550551     .UT..UU..UU.Q.UU
    5f9c:	10aaaa51 55a9a518 15555559 1555a515     Q......UYUU...U.
    5fac:	14998555 15995615 55556515 55595515     U....V...eUU.UYU
    5fbc:	55996515 15959515 14956515 14559511     .e.U.....e....U.
    5fcc:	14545611 54556511 55959551 55551551     .VT..eUTQ..UQ.UU
    5fdc:	10aaaa51 55a9aa28 15955569 1595a525     Q...(..UiU..%...
    5fec:	14998569 15999615 5595aa15 55599a15     i..........U..YU
    5ffc:	5599a655 55999515 1495a515 14999511     U..U...U........
    600c:	14956611 55996911 55959951 55591551     .f...i.UQ..UQ.YU
    601c:	54aaaa55 55a9aa28 55a59669 5599a625     U..T(..Ui..U%..U
    602c:	54998669 5599aa19 5595aa15 65999a55     i..T...U...UU..e
    603c:	5599aa55 55999a15 1499a555 14999615     U..U...UU.......
    604c:	14996651 5599aa11 5595aa55 55991551     Qf.....UU..UQ..U
    605c:	64aaaa55 65a9aa28 55a59669 55a9aa25     U..d(..ei..U%..U
    606c:	54999669 65a9aa19 6595aa19 65999a59     i..T...e...eY..e
    607c:	5599aa55 55999a15 2499aa55 25999a15     U..U...UU..$...%
    608c:	14996a55 6599aa11 65a9aa55 55991a51     Uj.....eU..eQ..U
    609c:	a5aaaa55 65a9aa28 65a5aa69 65a9aa69     U...(..ei..ei..e
    60ac:	64a99669 65a9aa59 65a9aa59 65a99a59     i..dY..eY..eY..e
    60bc:	6599aa55 55999a55 6499aa55 65999a55     U..eU..UU..dU..e
    60cc:	24996a55 6599aa15 65a9aa55 55a91a51     Uj.$...eU..eQ..U
    60dc:	a5aaaa55 a5aaaa68 65a9aa69 65a9aa69     U...h...i..ei..e
    60ec:	65a99a69 65a9aa59 65a9aa59 65a99a59     i..eY..eY..eY..e
    60fc:	65a9aa55 65a99a55 64a9aa59 65a9aa55     U..eU..eY..dU..e
    610c:	24a9aa55 65a9aa15 65a9aa55 65a91a51     U..$...eU..eQ..e
    611c:	aaaaaa55 aaaaaa68 69aaaa68 69a9aa69     U...h...h..ii..i
    612c:	65a99a69 65a9aa69 69aaaa59 65aaaa59     i..ei..eY..iY..e
    613c:	65a9aa55 65a9aa55 65a9aa59 65a9aa55     U..eU..eY..eU..e
    614c:	64a9aa55 65a9aa55 65aaaa55 65a92a55     U..dU..eU..eU*.e
    615c:	aaaaaa55 aaaaaaa8 6aaaaaa8 69a9aa69     U..........ji..i
    616c:	69aaaa69 69a9aa69 69aaaa59 69aaaa59     i..ii..iY..iY..i
    617c:	69a9aa59 69a9aa69 65aaaa59 69a9aa55     Y..ii..iY..eU..i
    618c:	69a9aa55 69aaaa55 69aaaa55 65aa2a55     U..iU..iU..iU*.e
    619c:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    61ac:	a9aaaa68 6aaaaa68 aaaaaa68 6aaaaa68     h...h..jh...h..j
    61bc:	69a9aa68 69aaaa68 69aaaa58 69aaaa54     h..ih..iX..iT..i
    61cc:	69a9aa54 69aaaa54 6aaaaa54 69aa2a54     T..iT..iT..jT*.i
    61dc:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    61ec:	a9aaaaa8 aaaaaa68 aaaaaa68 aaaaaa68     ....h...h...h...
    61fc:	a9aaaa68 aaaaaa68 69aaaa68 69aaaa58     h...h...h..iX..i
    620c:	69aaaa64 a9aaaa54 aaaaaa64 69aa2a64     d..iT...d...d*.i
    621c:	aaaa9a59 aaaaaaaa aaaaaaaa aaaaaa6a     Y...........j...
    622c:	aaaaaaaa aaaaaa6a aaaaaa6a aaaaaa6a     ....j...j...j...
    623c:	aaaaaa6a aaaaaa6a 69aaaa6a 69aaaa6a     j...j...j..ij..i
    624c:	69aaaa6a a9aaaa6a aaaaaa6a aaaa2aa6     j..ij...j....*..
    625c:	aaaaaa68 aaaaaaaa aaaaaaaa aaaaaaaa     h...............
    626c:	aaaaaaaa aaaaaaaa aaaaaa6a aaaaaa6a     ........j...j...
    627c:	aaaaaaaa aaaaaa6a a9aaaaaa aaaaaa6a     ....j.......j...
    628c:	69aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ...ij........*..
    629c:	aaaa4aa8 aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    62ac:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    62bc:	aaaaaaaa aaaaaa6a aaaaaaaa aaaaaaaa     ....j...........
    62cc:	a9aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ....j........*..
    62dc:	aaaa4aaa aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    62ec:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    62fc:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    630c:	aaaaaaaa aaaaaa6a aaaa9aaa aaaa1aaa     ....j...........
    631c:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    632c:	aaaa6aaa aaaaaaaa aaaaaaaa aaaaaaaa     .j..............
    633c:	aaaa9aaa aaaa6aaa aaaa6aaa aaaa6aaa     .....j...j...j..
    634c:	aaaa5aaa aaaaaaaa aaaaaaaa aaaa2aaa     .Z...........*..
    635c:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    636c:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa6aaa     .j...j...j...j..
    637c:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa5aaa     .j...j...j...Z..
    638c:	aaaa6aaa aaaa6aaa aaaa4aaa aaaa4aaa     .j...j...J...J..
    639c:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa5aaa     .J...Z...Z...Z..
    63ac:	aaaa6aaa aaaa6aa6 aaaa6aaa aaaa5aaa     .j...j...j...Z..
    63bc:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa6aaa     .J...Z...Z...j..
    63cc:	aaaa49aa aaaa5aaa aa9a4aaa aaaa4aaa     .I...Z...J...J..
    63dc:	aaaa52aa aa2a6aa6 aaaa6aa6 aaaa6aa6     .R...j*..j...j..
    63ec:	aaaa6aa6 aaa26aaa aa9a52aa aa2a62aa     .j...j...R...b*.
    63fc:	aa9a4aaa aaa26aaa aa2a6aaa aaaa4aaa     .J...j...j*..J..
    640c:	aa2a4aaa aaaa62aa aa2a4aaa aa224aaa     .J*..b...J*..J".
    641c:	aaaa12a6 6a224aaa aaaa4aaa aaaa4aaa     .....J"j.J...J..
    642c:	aa225aaa aa225aa2 6aaa62aa aa2242aa     .Z"..Z"..b.j.B".
    643c:	aaa242aa aaa242aa aa2042aa aaaa4aaa     .B...B...B ..J..
    644c:	aa2a40aa 6aa242a6 6a0a4aaa aa124aaa     .@*..B.j.J.j.J..
    645c:	aa5215aa aa1242a2 aa9a42a2 6a9a42a2     ..R..B...B...B.j
    646c:	6a1262a2 aa1262a2 aa8842aa aa2042aa     .b.j.b...B...B .
    647c:	aa0242aa 6a2242aa aa1042aa 6aaa4aa6     .B...B"j.B...J.j
    648c:	6a1040a6 aa2242aa aa0a42a6 aa2042aa     .@.j.B"..B...B .
    649c:	6a6216a2 2a6211a2 696a11a2 aa6211a2     ..bj..b*..ji..b.
    64ac:	a96211a2 6a6251a2 2a4851a6 6a5051a6     ..b..Qbj.QH*.QPj
    64bc:	6a4251a6 aa5051a6 696051a6 a95059aa     .QBj.QP..Q`i.YP.
    64cc:	a96050aa 2a5251a2 2a4a51aa 694051aa     .P`..QR*.QJ*.Q@i
    64dc:	aa5215a2 294216a2 aa4816a2 294216a2     ..R...B)..H...B)
    64ec:	2a4016a2 a94216a2 294816aa a96016aa     ..@*..B...H)..`.
    64fc:	aa4216aa 296016aa aa4016aa 2a6016a2     ..B...`)..@...`*
    650c:	2a401422 296056a2 294a56a2 aa405626     ".@*.V`).VJ)&V@.
    651c:	195555a2 1a5455a2 18545522 1a5455a2     .UU..UT."UT..UT.
    652c:	185455a2 1a5455a2 1a5455a2 1a5455a2     .UT..UT..UT..UT.
    653c:	195455a2 1a5455a2 18545522 18545522     .UT..UT."UT."UT.
    654c:	18545522 1a5455a2 1a545522 1854552a     "UT..UT."UT.*UT.
    655c:	2a555522 28555526 28555526 285555a6     "UU*&UU(&UU(.UU(
    656c:	28555526 28555526 285555a6 285555a6     &UU(&UU(.UU(.UU(
    657c:	2a555526 285555a6 28555526 28555526     &UU*.UU(&UU(&UU(
    658c:	28555526 28555526 28555526 28555526     &UU(&UU(&UU(&UU(
    659c:	54555526 54555506 54555506 54555506     &UUT.UUT.UUT.UUT
    65ac:	54555506 54555526 54555526 54555526     .UUT&UUT&UUT&UUT
    65bc:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    65cc:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    65dc:	55555526 55555554 55555554 55555554     &UUUTUUUTUUUTUUU
    65ec:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    65fc:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    660c:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    661c:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    662c:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    663c:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    664c:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    665c:	aaaa5454 aaaa54a8 aaaa54a8 aaaa54a8     TT...T...T...T..
    666c:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    667c:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    668c:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    669c:	000050a8 00005008 00005008 00005008     .P...P...P...P..
    66ac:	00005008 00005008 00005008 00005008     .P...P...P...P..
    66bc:	00005008 00005008 00005008 00005008     .P...P...P...P..
    66cc:	00005008 00005008 00005008 00005008     .P...P...P...P..
    66dc:	00004008 00004008 00004008 00004008     .@...@...@...@..
    66ec:	00004008 00004008 00004008 00004008     .@...@...@...@..
    66fc:	00004008 00004008 00004008 00004008     .@...@...@...@..
    670c:	00004008 00004008 00004008 00004008     .@...@...@...@..
    671c:	00000008 00000000 00000000 00000000     ................
	...

00006760 <eink_GSephElecLogo_2bGrey>:
	...
    67b4:	ff030000 ffffffff 80ffffff 00000000     ................
	...
    67d0:	aaaaaa1e aaaaaaaa 0000f0aa 00000000     ................
	...
    67e8:	aa3a0000 aaaaaaaa a8aaaaaa 00000000     ..:.............
	...
    6804:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    681c:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    6838:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    6850:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    686c:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    6884:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    68a0:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    68b8:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    68d4:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    68ec:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    6908:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
    6918:	01000000 55555555 aa7a5555 aaaaaaaa     ....UUUUUUz.....
    6928:	adaaaaaa 55555555 00405555 ffff1600     ....UUUUUU@.....
    6938:	ffffffff aaaaaafa aaaaaaaa ffffafaa     ................
    6948:	ffffffff 6f000094 ffffffff aaaaaaea     .......o........
    6958:	aaaaaaaa aaaaaaaa aaaaaaaa 00f9afaa     ................
    6968:	ffffff01 aaaafeff aaaaaaaa aaaaaaaa     ................
    6978:	aaaaaaaa afaaaaaa ff0740ff faffffff     .........@......
    6988:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6998:	d0ffafaa ffffff0b aaaaeaff aaaaaaaa     ................
    69a8:	aaaaaaaa aaaaaaaa afaaaaaa ff0fe0ff     ................
    69b8:	aaffffff aaaaaaaa aaaaaaaa aaaaaaaa     ................
    69c8:	aaaaaaaa f0ffafaa ffffff1f aaaaaafe     ................
    69d8:	aaaaaaaa aaaaaaaa aaaaaaaa afaaaaaa     ................
    69e8:	ff1ff4ff aafaffff aaaaaaaa aaaaaaaa     ................
    69f8:	aaaaaaaa aaaaaaaa f8ffafaa ffffff2f     ............/...
    6a08:	aaaaaaea aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6a18:	afaaaaaa ff2ff8ff aaaaffff aaaaaaaa     ....../.........
    6a28:	aaaaaaaa aaaaaaaa aaaaaaaa f8ffafaa     ................
    6a38:	feffff2f aaaaaaaa aaaaaaaa aaaaaaaa     /...............
    6a48:	aaaaaaaa afaaaaaa ff2ff8ff aaaafaff     ........../.....
    6a58:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6a68:	f8ffafaa eaffff2f aaaaaaaa aaaaaaaa     ..../...........
    6a78:	aaaaaaaa aaaaaaaa afaaaaaa ff2ff8ff     ............../.
    6a88:	aaaaeaff aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6a98:	aaaaaaaa f8ffafaa aaffff2f aaaaaaaa     ......../.......
    6aa8:	55aaaaaa 55555555 56555555 afaaaaaa     ...UUUUUUUUV....
    6ab8:	ff2ff8ff aaaaaaff aaaaaaaa 000000aa     ../.............
    6ac8:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    6ad8:	aaaaaaaa 00aaaaaa 00000000 05000000     ................
    6ae8:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    6af8:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    6b08:	aafeff2f aaaaaaaa 00aaaaaa 00000000     /...............
    6b18:	05000000 afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    6b28:	aaaaaaaa 000000aa 00000000 aaaa0500     ................
    6b38:	f8ffafaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    6b48:	00000000 05000000 afaaaaaa ff2ff8ff     ............../.
    6b58:	aaaaaafe aaaaaaaa 000000aa 00000000     ................
    6b68:	aaaa0500 f8ffafaa aafeff2f aaaaaaaa     ......../.......
    6b78:	00aaaaaa 00000000 05000000 afaaaaaa     ................
    6b88:	ff2ff8ff aaaaaafe aaaaaaaa 000000aa     ../.............
    6b98:	00005501 aaaa0500 f8ffafaa aafeff2f     .U........../...
    6ba8:	aaaaaaaa 00aaaaaa fe5a0100 05000094     ..........Z.....
    6bb8:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    6bc8:	160000aa 80feffff aaaa0500 f8ffafaa     ................
    6bd8:	aafeff2f aaaaaaaa 00aaaaaa ffff6f00     /............o..
    6be8:	0500d4ff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    6bf8:	aaaaaaaa bf0100aa fdffffff aaaa0500     ................
    6c08:	f8ffafaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    6c18:	ffffff07 0540ffff afaaaaaa ff2ff8ff     ......@......./.
    6c28:	aaaaaafe aaaaaaaa ff1f00aa ffffffff     ................
    6c38:	aaaa05d0 f8ffafaa aafeff2f aaaaaaaa     ......../.......
    6c48:	00aaaaaa ffffff6f 05f4ffff afaaaaaa     ....o...........
    6c58:	ff2ff8ff aaaaaafe aaaaaaaa ffbf01aa     ../.............
    6c68:	ffffffff aaaa05f8 f8ffafaa aafeff2f     ............/...
    6c78:	aaaaaaaa 01aaaaaa ffffffff 05fdffff     ................
    6c88:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    6c98:	ffff06aa ffffffff aaaa05ff f8ffafaa     ................
    6ca8:	aafeff2f aaaaaaaa 06aaaaaa ffffffff     /...............
    6cb8:	45ffffff afaaaaaa ff2ff8ff aaaaaafe     ...E....../.....
    6cc8:	aaaaaaaa ffff07aa ffffffff aaaa85ff     ................
    6cd8:	f8ffafaa aafeff2f aaaaaaaa 1baaaaaa     ..../...........
    6ce8:	ffffffff c5ffffff afaaaaaa ff2ff8ff     ............../.
    6cf8:	aaaaaafe aaaaaaaa ffff1baa ffebffff     ................
    6d08:	aaaac5ff f8ffafaa aafeff2f abaaaaaa     ......../.......
    6d18:	1baaaafa f9ffffff c5ff7f55 afaaaaaa     ........U.......
    6d28:	ff2ff8ff aaaaaafe aafeffbf ffff1baa     ../.............
    6d38:	1f00e4ff aaaac5ff f8ffafaa aafeff2f     ............/...
    6d48:	ffffffab 1baaaafa 90ffffff c5ff0700     ................
    6d58:	afaaaaaa ff2ff8ff ffafaafe aaaaaaff     ....../.........
    6d68:	ffff1baa 010080ff aaaac5ff f8ffafaa     ................
    6d78:	aafeff2f aabefeaf 17aaaaaa 40ffffff     /..............@
    6d88:	85ff0000 afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    6d98:	aaaaaabe ffff06aa 000040ff aaaa45ff     .........@...E..
    6da8:	f8ffafaa aafeff2f aabeaaaa 06aaaaaa     ..../...........
    6db8:	40ffffff 05ff0000 afaaaaaa ff2ff8ff     ...@........../.
    6dc8:	aaaaaafe aaaaaafe ffff01aa 020040ff     .............@..
    6dd8:	aaaa05fe f8ffafaa aafeff2f aafeaaaa     ......../.......
    6de8:	01aaaaaa d0ffffbf 05fc0300 afaaaaaa     ................
    6df8:	ff2ff8ff aaaaaafe aaaaaafe ff7f00aa     ../.............
    6e08:	0f00e4ff aaaa05f4 f8ffafaa aafeff2f     ............/...
    6e18:	aafeaaaa 00aaaaaa fdffff1f 05e07f00     ................
    6e28:	afaaaaaa ff2ff8ff aaaaaafe aaaaaafe     ....../.........
    6e38:	ff1b00aa ffffffff aaaa05c0 f8ffafaa     ................
    6e48:	aafeff2f aafeaaaa 00aaaaaa ffffff06     /...............
    6e58:	0500ffff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    6e68:	aaaaaafe 7f0000aa f8ffffff aaaa0500     ................
    6e78:	f8ffafaa aafeff2f aafaaaaa 00aaaaaa     ..../...........
    6e88:	ffff1b00 0500c0ff afaaaaaa ff2ff8ff     ............../.
    6e98:	aaaaaafe aaaaaafa 010000aa 40f9ffbf     ...............@
    6ea8:	aaaa0500 f8ffafaa aafeff2f aafaaaaa     ......../.......
    6eb8:	00aaaaaa 55050000 05000050 afaaaaaa     .......UP.......
    6ec8:	ff2ff8ff aaaaaafe aaaaaafa 000000aa     ../.............
    6ed8:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    6ee8:	aafaabaa 00aaaaaa 00000000 05000000     ................
    6ef8:	afaaaaaa ff2ff8ff abaaaafe aaaaaafa     ....../.........
    6f08:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    6f18:	aafeff2f aafaabaa 00aaaaaa 00000000     /...............
    6f28:	05000000 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    6f38:	aaaaaafa 000000aa 00000000 aaaa0500     ................
    6f48:	f8ffafaa aafeff2f aafaabaa 00aaaaaa     ..../...........
    6f58:	00000000 05000000 afaaaaaa ff2ff8ff     ............../.
    6f68:	abaaaafe aaaaaafa 000000aa 00000000     ................
    6f78:	aaaa0500 f8ffafaa aafeff2f aafaabaa     ......../.......
    6f88:	00aaaaaa 00000000 05000000 afaaaaaa     ................
    6f98:	ff2ff8ff abaaaafe aaaaaafa 000000aa     ../.............
    6fa8:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    6fb8:	aafaabaa 00aaaaaa 00000000 05000000     ................
    6fc8:	afaaaaaa ff2ff8ff abaaaafe aaaaaafa     ....../.........
    6fd8:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    6fe8:	aafeff2f aafaabaa 00aaaaaa 00000000     /...............
    6ff8:	05000000 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    7008:	aaaaaafa 000000aa 00000000 aaaa0500     ................
    7018:	f8ffafaa aafeff2f aafaaaaa 00aaaaaa     ..../...........
    7028:	54050000 05000000 afaaaaaa ff2ff8ff     ...T........../.
    7038:	aaaaaafe aaaaaafa 010000aa 40f9ffbf     ...............@
    7048:	aaaa0500 f8ffafaa aafeff2f aafaaaaa     ......../.......
    7058:	00aaaaaa ffff1b00 0500c0ff afaaaaaa     ................
    7068:	ff2ff8ff aaaaaafe aaaaaafa 7f0000aa     ../.............
    7078:	f8ffffff aaaa0500 f8ffafaa aafeff2f     ............/...
    7088:	aafeaaaa 00aaaaaa ffffff06 0500ffff     ................
    7098:	afaaaaaa ff2ff8ff aaaaaafe aaaaaafe     ....../.........
    70a8:	ff1b00aa ffffffff aaaa05c0 f8ffafaa     ................
    70b8:	aafeff2f aafeaaaa 00aaaaaa ffffff1f     /...............
    70c8:	05e0ffff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    70d8:	aaaaaafe ff7f00aa ffffffff aaaa05f4     ................
    70e8:	f8ffafaa aafeff2f aafeaaaa 01aaaaaa     ..../...........
    70f8:	ffffffbf 05fcffff afaaaaaa ff2ff8ff     ............../.
    7108:	aaaaaafe aaaaaafe ffff01aa ffffffff     ................
    7118:	aaaa05fe f8ffafaa aafeff2f aafeaaaa     ......../.......
    7128:	06aaaaaa ffffffff 05ffffff afaaaaaa     ................
    7138:	ff2ff8ff aaaaaafe aaaaaabe ffff06aa     ../.............
    7148:	ffffffff aaaa45ff f8ffafaa aafeff2f     .....E....../...
    7158:	aabeeaab 17aaaaaa ffffffff 85ffffff     ................
    7168:	afaaaaaa ff2ff8ff ffafaafe aaaaaaff     ....../.........
    7178:	ffff1baa ffffffff aaaac5ff f8ffafaa     ................
    7188:	aafeff2f ffffffab 1baaaaea feffffff     /...............
    7198:	c5ffbf95 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    71a8:	aafaffff ffff1baa 1f00f4ff aaaac5ff     ................
    71b8:	f8ffafaa aafeff2f bfaaaaaa 1baaaafa     ..../...........
    71c8:	d0ffffff c5ff0700 afaaaaaa ff2ff8ff     ............../.
    71d8:	aaaaaafe aaaaaaaa ffff1baa 030090ff     ................
    71e8:	aaaac5ff f8ffafaa aafeff2f aaaaaaaa     ......../.......
    71f8:	1baaaaaa 40ffffff c5ff0100 afaaaaaa     .......@........
    7208:	ff2ff8ff aaaaaafe aaaaaaaa ffff07aa     ../.............
    7218:	000040ff aaaa85ff f8ffafaa aafeff2f     .@........../...
    7228:	aaaaaaaa 06aaaaaa 40ffffff 05ff0000     ...........@....
    7238:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    7248:	ffff06aa 010040ff aaaa05ff f8ffbfaa     .....@..........
    7258:	aafeff2f aaaaaaaa 01aaaaaa 90ffffff     /...............
    7268:	05fd0300 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    7278:	aaaaaaaa ffbf01aa 0b00d0ff aaaa05f8     ................
    7288:	f8ffbfaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    7298:	f8ffff6f 05f42f00 bfaaaaaa ff2ff8ff     o..../......../.
    72a8:	aaaaaafe aaaaaaaa ff1f00aa bfaafeff     ................
    72b8:	aaaa05d0 f8ffbfaa aafeff2f aaaaaaaa     ......../.......
    72c8:	00aaaaaa ffffff07 0540ffff bfaaaaaa     ..........@.....
    72d8:	ff2ff8ff aaaaaafe aaaaaaaa bf0100aa     ../.............
    72e8:	fdffffff aaaa0500 f8ffbfaa aafeff2f     ............/...
    72f8:	aaaaaaaa 00aaaaaa ffff6f00 0500d4ff     .........o......
    7308:	bfaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    7318:	160000aa 80feffff aaaa0500 f8ffbfaa     ................
    7328:	aafeff2f aaaaaaaa 00aaaaaa fe5a0100     /.............Z.
    7338:	05000094 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    7348:	aaaaaaaa 000000aa 00005501 aaaa0500     .........U......
    7358:	f8ffbfaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    7368:	00000000 05000000 bfaaaaaa ff2ff8ff     ............../.
    7378:	aaaaaafe aaaaaaaa 000000aa 00000000     ................
    7388:	aaaa0500 f8ffbfaa aafeff2f aaaaaaaa     ......../.......
    7398:	00aaaaaa 00000000 05000000 bfaaaaaa     ................
    73a8:	ff2ff8ff aaaaaafe aaaaaaaa 000000aa     ../.............
    73b8:	00000000 aaaa0500 f8ffbfaa aafeff2f     ............/...
    73c8:	aaaaaaaa 00aaaaaa 00000000 05000000     ................
    73d8:	bfaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    73e8:	000000aa 00000000 aaaa0500 f8ffbfaa     ................
    73f8:	aafeff2f aaaaaaaa 00aaaaaa 00000000     /...............
    7408:	05000000 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    7418:	aaaaaaaa 000000aa 00000000 aaaa0500     ................
    7428:	f8ffbfaa aafeff2f aaaaaaaa 55aaaaaa     ..../..........U
    7438:	55555555 56555555 ffaaaaaa ff2ff8ff     UUUUUUUV....../.
    7448:	aaaaaafe aaaaaaaa aaaaaaaa aaaaaaaa     ................
    7458:	aaaaaaaa f8ffffaa aafeff2f aaaaaaaa     ......../.......
    7468:	aaaaaaaa aaaaaaaa aaaaaaaa ffabaaaa     ................
    7478:	ff2ff8ff aaaaaafe aaaaaaaa aaaaaaaa     ../.............
    7488:	aaaaaaaa aaaaaaaa f8ffffab aafeff2f     ............/...
    7498:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    74a8:	ffafaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    74b8:	aaaaaaaa aaaaaaaa aaaaaaaa f8ffffbf     ................
    74c8:	aafeff2f aaaaaaaa aaaaaaaa aaaaaaaa     /...............
    74d8:	aaaaaaaa ffffaaaa ff2ff8ff aaaaaafe     ........../.....
    74e8:	aaaaaaaa aaaaaaaa aaaaaaaa abaaaaaa     ................
    74f8:	f8ffffff aafeff1f aaaaaaaa aaaaaaaa     ................
    7508:	aaaaaaaa aaaaaaaa ffffafaa ff0ff4ff     ................
    7518:	aaaaaafe aaaaaaaa aaaaaaaa aaaaaaaa     ................
    7528:	bfaaaaaa f0ffffff aafeff0b aaaaaaaa     ................
    7538:	aaaaaaaa aaaaaaaa aaaaaaaa ffffffaa     ................
    7548:	ff07e0ff aaaaaafe aaaaaaaa aaaaaaaa     ................
    7558:	aaaaaaaa ffabaaaa d0ffffff aafeff01     ................
    7568:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    7578:	ffffffaf 6f0040ff aaaaaaff aaaaaaaa     .....@.o........
    7588:	aaaaaaaa aaaaaaaa ffffabaa 00f9ffff     ................
    7598:	ffff1600 ffffffff aaaaaafa aaaaaaaa     ................
    75a8:	ffffafaa ffffffff 010000d4 55555555     ............UUUU
    75b8:	aa7a5555 aaaaaaaa adaaaaaa 55555555     UUz.........UUUU
    75c8:	00405555 00000000 00000000 aaaaaa7a     UU@.........z...
    75d8:	aaaaaaaa 0000acaa 00000000 00000000     ................
    75e8:	00000000 aa7a0000 aaaaaaaa acaaaaaa     ......z.........
	...
    7608:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    7620:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    763c:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    7654:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    7670:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    7688:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    76a4:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    76bc:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    76d8:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    76f0:	aa3a0000 aaaaaaaa bcaaaaaa 00000000     ..:.............
	...
    770c:	aaaaaa1e aaaaaaaa 0000f0aa 00000000     ................
	...
    7724:	ff030000 ffffffff c0ffffff 00000000     ................
	...

000077a0 <RobotoBold_76pt_CharCount>:
    77a0:	3c201b19 10424b3a 372e2423 261d2719     .. <:KB.#$.7.'.&
    77b0:	3a3a3a3a 3a3a3a3a 1a1d3a3a 32343a33     ::::::::::..3:42
    77c0:	4240445a 45373942 40381d47 46475837     ZD@BB97EG.8@7XGF
    77d0:	3e404641 5842423e 1c3d3e40 2d2c1c2b     AF@>>BBX@>=.+.,-
    77e0:	35393621 3a243739 361a1b39 3939571b     !69597$:9..6.W99
    77f0:	34253939 4a333922 21333333 0042211a     99%4"93J333!.!B.

00007800 <RobotoBold_76pt_Table>:
	...
    79f0:	80000000 000000ff e0000000 0000000f     ................
    7a00:	80000000 ffffffff f000001f 0000001f     ................
    7a10:	80000000 ffffffff f801ffff 0000003f     ............?...
    7a20:	80000000 ffffffff fc01ffff 0000007f     ................
    7a30:	80000000 ffffffff fc01ffff 0000007f     ................
    7a40:	80000000 ffffffff fe01ffff 000000ff     ................
    7a50:	80000000 ffffffff fe01ffff 000000ff     ................
    7a60:	80000000 ffffffff fe01ffff 000000ff     ................
    7a70:	80000000 ffffffff fe01ffff 000000ff     ................
    7a80:	80000000 ffffffff fe01ffff 000000ff     ................
    7a90:	80000000 ffffffff fe01ffff 000000ff     ................
    7aa0:	80000000 ffffffff fc01ffff 0000007f     ................
    7ab0:	80000000 ffffffff fc01ffff 0000007f     ................
    7ac0:	80000000 ffffffff f801ffff 0000003f     ............?...
    7ad0:	80000000 03ffffff f0000000 0000001f     ................
	...
    7ae8:	c0000000 00000007 00000000 00000000     ................
	...
    7b70:	f8000000 003fffff 00000000 00000000     ......?.........
    7b80:	f8000000 003fffff 00000000 00000000     ......?.........
    7b90:	f8000000 003fffff 00000000 00000000     ......?.........
    7ba0:	f8000000 003fffff 00000000 00000000     ......?.........
    7bb0:	f8000000 003fffff 00000000 00000000     ......?.........
    7bc0:	f8000000 003fffff 00000000 00000000     ......?.........
    7bd0:	f8000000 003fffff 00000000 00000000     ......?.........
    7be0:	f8000000 003fffff 00000000 00000000     ......?.........
    7bf0:	f8000000 0001ffff 00000000 00000000     ................
    7c00:	f8000000 0000003f 00000000 00000000     ....?...........
	...
    7c70:	f8000000 003fffff 00000000 00000000     ......?.........
    7c80:	f8000000 003fffff 00000000 00000000     ......?.........
    7c90:	f8000000 003fffff 00000000 00000000     ......?.........
    7ca0:	f8000000 003fffff 00000000 00000000     ......?.........
    7cb0:	f8000000 003fffff 00000000 00000000     ......?.........
    7cc0:	f8000000 003fffff 00000000 00000000     ......?.........
    7cd0:	f8000000 003fffff 00000000 00000000     ......?.........
    7ce0:	f8000000 003fffff 00000000 00000000     ......?.........
    7cf0:	f8000000 0001ffff 00000000 00000000     ................
    7d00:	f8000000 0000007f 00000000 00000000     ................
	...
    7d78:	0003fc00 00000000 00000000 00000000     ................
    7d88:	0003fc00 00000000 00000000 00000000     ................
    7d98:	0003fc00 00000000 00000000 00000000     ................
    7da8:	0003fc00 00000000 00000000 07f80000     ................
    7db8:	0003fc00 00000000 00000000 07f80000     ................
    7dc8:	0003fc00 00000000 00000000 07f80000     ................
    7dd8:	0003fc00 00000000 00000000 07f80000     ................
    7de8:	0003fc00 00000000 00000000 07f80000     ................
    7df8:	0003fc00 0000007c 00000000 07f80000     ....|...........
    7e08:	e003fc00 0000007f 00000000 07f80000     ................
    7e18:	ff83fc00 0000007f 00000000 07f80000     ................
    7e28:	fffffc00 0000007f 00000000 07f80000     ................
    7e38:	fffffc00 0000007f 00000000 07f80000     ................
    7e48:	ffffffc0 0000007f 00000000 87f80000     ................
    7e58:	ffffffff 0000007f 00000000 fff80000     ................
    7e68:	ffffffff 0000007f 00000000 fff80000     ................
    7e78:	ffffffff 0000007f 00000000 ffff8000     ................
    7e88:	ffffffff 00000007 00000000 fffffe00     ................
    7e98:	1fffffff 00000000 00000000 fffffff0     ................
    7ea8:	007fffff 00000000 80000000 ffffffff     ................
    7eb8:	0003ffff 00000000 80000000 ffffffff     ................
    7ec8:	0003ffff 00000000 80000000 ffffffff     ................
    7ed8:	0003fc3f 00000000 80000000 7fffffff     ?...............
    7ee8:	0003fc00 00000000 80000000 07ffffff     ................
    7ef8:	0003fc00 00000000 80000000 07ffffff     ................
    7f08:	0003fc00 00000000 80000000 07f87fff     ................
    7f18:	0003fc00 00000040 80000000 07f801ff     ....@...........
    7f28:	0003fc00 0000007f 80000000 07f8000f     ................
    7f38:	fc03fc00 0000007f 00000000 07f80000     ................
    7f48:	fff3fc00 0000007f 00000000 07f80000     ................
    7f58:	fffffc00 0000007f 00000000 07f80000     ................
    7f68:	fffffe00 0000007f 00000000 07f80000     ................
    7f78:	fffffff8 0000007f 00000000 e7f80000     ................
    7f88:	ffffffff 0000007f 00000000 fff80000     ................
    7f98:	ffffffff 0000007f 00000000 fffc0000     ................
    7fa8:	ffffffff 0000003f 00000000 fffff000     ....?...........
    7fb8:	ffffffff 00000000 00000000 ffffff80     ................
    7fc8:	03ffffff 00000000 00000000 fffffffe     ................
    7fd8:	000fffff 00000000 80000000 ffffffff     ................
    7fe8:	0003ffff 00000000 80000000 ffffffff     ................
    7ff8:	0003fdff 00000000 80000000 ffffffff     ................
    8008:	0003fc07 00000000 80000000 1fffffff     ................
    8018:	0003fc00 00000000 80000000 07ffffff     ................
    8028:	0003fc00 00000000 80000000 07fbffff     ................
    8038:	0003fc00 00000000 80000000 07f81fff     ................
    8048:	0003fc00 00000000 80000000 07f8007f     ................
    8058:	0003fc00 00000000 80000000 07f80001     ................
    8068:	0003fc00 00000000 00000000 07f80000     ................
    8078:	0003fc00 00000000 00000000 07f80000     ................
    8088:	0003fc00 00000000 00000000 07f80000     ................
    8098:	0003fc00 00000000 00000000 07f80000     ................
	...
    80b4:	07f80000 00000000 00000000 00000000     ................
    80c4:	07f80000 00000000 00000000 00000000     ................
    80d4:	07f80000 00000000 00000000 00000000     ................
	...
    8158:	00ff0000 00000000 00000000 00000000     ................
    8168:	07ff0000 00000000 00000000 003f8000     ..............?.
    8178:	1fff0000 00000000 00000000 03fff800     ................
    8188:	7fff0000 00000000 00000000 0fffff00     ................
    8198:	ffff0000 00000000 00000000 1fffff80     ................
    81a8:	ffff0000 00000001 00000000 7fffffe0     ................
    81b8:	ffff0000 00000003 00000000 fffffff0     ................
    81c8:	ffff0000 00000007 00000000 fffffff8     ................
    81d8:	ffff0001 0000000f 00000000 fffffff8     ................
    81e8:	ffff0003 0000000f 00000000 fffffffc     ................
    81f8:	ffff0007 0000001f 00000000 fffffffe     ................
    8208:	ffff0007 0000003f 00000000 fffffffe     ....?...........
    8218:	ffff000f 0000003f 00000000 ffffffff     ....?...........
    8228:	ffff000f 0000003f 00000000 ffffffff     ....?...........
    8238:	ffc0001f 0000007f 80000000 ffffffff     ................
    8248:	ff00003f 0000007f 80000000 ffffffff     ?...............
    8258:	fc00003f 0000007f 80000000 ff801fff     ?...............
    8268:	f800003f 000000ff 80000000 fe000fff     ?...............
    8278:	f800007f 000000ff c0000000 fc0007ff     ................
    8288:	f000007f 000000ff c0000000 fc0003ff     ................
    8298:	f00000ff 000000ff c0000000 f80003ff     ................
    82a8:	e00000ff 0003ffff fff80000 f00001ff     ................
    82b8:	e00001ff 0003ffff fff80000 f00001ff     ................
    82c8:	e00001ff 0003ffff fff80000 e00001ff     ................
    82d8:	e00001ff 0003ffff fff80000 e00001ff     ................
    82e8:	e00003ff 0003ffff fff80000 c00001ff     ................
    82f8:	e00003ff 0003ffff fff80000 c00001ff     ................
    8308:	e00007ff 0003ffff fff80000 800003ff     ................
    8318:	f00007ff 0003ffff fff80000 800003ff     ................
    8328:	f0000fff 000000ff c0000000 800007ff     ................
    8338:	f8001fff 000000ff c0000000 00000fff     ................
    8348:	f8001fff 000000ff 80000000 00003fff     .............?..
    8358:	fe007fff 0000007f 80000000 0000ffff     ................
    8368:	ff81fffe 0000007f 80000000 001fffff     ................
    8378:	fffffffe 0000007f 00000000 001fffff     ................
    8388:	fffffffc 0000007f 00000000 001fffff     ................
    8398:	fffffffc 0000003f 00000000 001ffffe     ....?...........
    83a8:	fffffff8 0000003f 00000000 001ffffe     ....?...........
    83b8:	fffffff0 0000001f 00000000 001ffffc     ................
    83c8:	fffffff0 0000001f 00000000 001ffff8     ................
    83d8:	ffffffe0 0000000f 00000000 001ffff0     ................
    83e8:	ffffffc0 00000007 00000000 001fffe0     ................
    83f8:	ffffff80 00000003 00000000 001fffc0     ................
    8408:	ffffff00 00000001 00000000 001fff80     ................
    8418:	fffffe00 00000000 00000000 001ffe00     ................
    8428:	7ffffc00 00000000 00000000 001ff800     ................
    8438:	1ffff000 00000000 00000000 001fc000     ................
    8448:	03ff8000 00000000 00000000 00000000     ................
	...
    84f4:	001fff00 00000000 00000000 00000000     ................
    8504:	007fffc0 00000000 00000000 00000000     ................
    8514:	01fffff0 00000000 00000000 00000000     ................
    8524:	03fffff8 00000000 00000000 00000000     ................
    8534:	07fffffc 00000000 00000000 00000000     ................
    8544:	0ffffffe 00000000 00000000 00000000     ................
    8554:	1fffffff 00000000 00000000 00000000     ................
    8564:	1fffffff 00000000 00000000 80000000     ................
    8574:	3fffffff 00000000 00000000 80000000     ...?............
    8584:	3ffe0fff 00000000 00000000 80000000     ...?............
    8594:	3ff001ff 00000000 00000000 c0000000     ...?............
    85a4:	7fc0007f 40000000 00000000 c0000000     .......@........
    85b4:	7fc0007f 60000000 00000000 c0000000     .......`........
    85c4:	7f80003f 78000000 00000000 c0000000     ?......x........
    85d4:	7f80003f fe000000 00000000 c0000000     ?...............
    85e4:	7f80003f ff000000 00000000 c0000000     ?...............
    85f4:	7f80003f ffc00000 00000001 c0000000     ?...............
    8604:	7f80003f ffe00000 00000003 c0000000     ?...............
    8614:	7fc0007f fff80000 00000003 c0000000     ................
    8624:	7fc0007f fffe0000 00000000 80000000     ................
    8634:	3fe000ff 7fff0000 00000000 80000000     ...?............
    8644:	3ffc07ff 1fffc000 00000000 80000000     ...?............
    8654:	3fffffff 07ffe000 00000000 00000000     ...?............
    8664:	1fffffff 03fff800 00000000 00000000     ................
    8674:	1fffffff 00fffe00 00000000 00000000     ................
    8684:	0ffffffe 007fff00 00000000 00000000     ................
    8694:	07fffffc 001fffc0 00000000 00000000     ................
    86a4:	03fffff8 0007ffe0 00000000 00000000     ................
    86b4:	01fffff0 0003fff8 00000000 00000000     ................
    86c4:	00ffffc0 0000fffe 00000000 00000000     ................
    86d4:	001fff00 00007fff 00000000 00000000     ................
    86e4:	c0000000 00001fff 00000000 00000000     ................
    86f4:	e0000000 000007ff 00000000 00000000     ................
    8704:	f8000000 000003ff 00000000 00000000     ................
    8714:	fe000000 0ff800ff 00000000 00000000     ................
    8724:	ff000000 ffff807f 00000000 00000000     ................
    8734:	ffc00000 ffffc01f 00000001 00000000     ................
    8744:	fff00000 fffff007 00000007 00000000     ................
    8754:	fff80000 fffff803 0000000f 00000000     ................
    8764:	fffe0000 fffffc00 0000001f 00000000     ................
    8774:	7fff0000 fffffc00 0000001f 00000000     ................
    8784:	1fffc000 fffffe00 0000003f 00000000     ........?.......
    8794:	07fff000 ffffff00 0000007f 00000000     ................
    87a4:	03fff800 ffffff00 0000007f 00000000     ................
    87b4:	00fffe00 e003ff00 0000007f 00000000     ................
    87c4:	007fff00 c001ff80 000000ff 00000000     ................
    87d4:	001fffc0 8000ff80 000000ff 00000000     ................
    87e4:	0007ff80 80007f80 000000ff 00000000     ................
    87f4:	0003ff80 00007f80 000000ff 00000000     ................
    8804:	0000ff00 00007f80 000000ff 00000000     ................
    8814:	00007f00 00007f80 000000ff 00000000     ................
    8824:	00001e00 00007f80 000000ff 00000000     ................
    8834:	00000600 00007f80 000000ff 00000000     ................
    8844:	00000000 8000ff80 000000ff 00000000     ................
    8854:	00000000 c001ff80 000000ff 00000000     ................
    8864:	00000000 e007ff00 0000007f 00000000     ................
    8874:	00000000 ffffff00 0000007f 00000000     ................
    8884:	00000000 fffffe00 0000007f 00000000     ................
    8894:	00000000 fffffe00 0000003f 00000000     ........?.......
    88a4:	00000000 fffffc00 0000001f 00000000     ................
    88b4:	00000000 fffffc00 0000001f 00000000     ................
    88c4:	00000000 fffff800 0000000f 00000000     ................
    88d4:	00000000 fffff000 00000007 00000000     ................
    88e4:	00000000 ffffc000 00000001 00000000     ................
    88f4:	00000000 7fff0000 00000000 00000000     ................
    8904:	00000000 03e00000 00000000 00000000     ................
	...
    8988:	003e0000 00000000 00000000 00000000     ..>.............
    8998:	07ffc000 00000000 00000000 00000000     ................
    89a8:	1ffff800 00000000 00000000 00000000     ................
    89b8:	7ffffc00 00000000 00000000 00000000     ................
    89c8:	fffffe00 00000000 00000000 00000000     ................
    89d8:	ffffff80 00000001 00000000 00000000     ................
    89e8:	ffffffc0 00000003 00000000 007ffc00     ................
    89f8:	ffffffc0 00000007 00000000 01ffff00     ................
    8a08:	ffffffe0 0000000f 00000000 07ffffc0     ................
    8a18:	fffffff0 0000000f 00000000 1fffffe0     ................
    8a28:	fffffff8 0000001f 00000000 3ffffff0     ...............?
    8a38:	fffffffc 0000001f 00000000 fffffff8     ................
    8a48:	fffffffc 0000003f 00000000 fffffffc     ....?...........
    8a58:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    8a68:	ffffffff 0000007f 00000000 ffffffff     ................
    8a78:	ff807fff 0000007f 00000000 ffffffff     ................
    8a88:	fe001fff 0000007f 00000000 ffffffff     ................
    8a98:	fc000fff 0000007f 80000000 ffffffff     ................
    8aa8:	f80003ff 000000ff 80000000 fffc3fff     .............?..
    8ab8:	f00003ff 000000ff 80000000 ffe00fff     ................
    8ac8:	f00003ff 000000ff c0000000 ff8007ff     ................
    8ad8:	e00007ff 000000ff c0000000 ff0003ff     ................
    8ae8:	e0000fff 000000ff c0000000 fc0001ff     ................
    8af8:	e0001fff 000000ff c0000000 fc0001ff     ................
    8b08:	e0003fff 000000ff c0000000 fe0001ff     .?..............
    8b18:	e000ffff 000000ff c0000000 ff0001ff     ................
    8b28:	e001ffff 000000ff c0000000 ff8001ff     ................
    8b38:	e003ffff 000000ff c0000000 ff8001ff     ................
    8b48:	e007ffff 000000ff c0000000 ffc003ff     ................
    8b58:	f00fffff 000000ff c0000000 ffe007ff     ................
    8b68:	f03fffff 0000007f 80000000 fff00fff     ..?.............
    8b78:	f07ffff9 0000007f 80000000 ffff3fff     .............?..
    8b88:	f8ffffe0 0000007f 80000000 ffffffff     ................
    8b98:	f9ffffc0 0000007f 00000000 7fffffff     ................
    8ba8:	ffffff80 0000003f 00000000 3fffffff     ....?..........?
    8bb8:	ffffff00 0000003f 00000000 1ffffffe     ....?...........
    8bc8:	fffffe00 0000003f 00000000 1ffffffe     ....?...........
    8bd8:	fffffc00 0000001f 00000000 0ffffffc     ................
    8be8:	fffff000 0000001f 00000000 07fffff8     ................
    8bf8:	ffffe000 0000000f 00000000 01fffff0     ................
    8c08:	ffffc000 0000000f 00000000 00ffffe0     ................
    8c18:	ffff8000 00000007 00000000 003fff80     ..............?.
    8c28:	ffff0000 00000007 00000000 000ffe00     ................
    8c38:	ffffc000 0000000f 00000000 00000000     ................
    8c48:	fffff000 0000003f 00000000 00000000     ....?...........
    8c58:	ffffffe0 0000007f 00000000 00000000     ................
    8c68:	fffffff0 0000007f 00000000 00000000     ................
    8c78:	fffffff0 0000007f 00000000 00000000     ................
    8c88:	fffffff0 0000007f 00000000 00000000     ................
    8c98:	fffffff0 0000007f 00000000 00000000     ................
    8ca8:	fffffff0 0000007f 00000000 00000000     ................
    8cb8:	fbfffff0 0000007f 00000000 00000000     ................
    8cc8:	f1fffff0 0000007f 00000000 00000000     ................
    8cd8:	e07ffff0 0000007f 00000000 00000000     ................
    8ce8:	c01ffff0 0000007f 00000000 00000000     ................
    8cf8:	8003fff0 0000007f 00000000 00000000     ................
    8d08:	00007ff0 0000007e 00000000 00000000     ....~...........
    8d18:	000000f0 0000007c 00000000 00000000     ....|...........
    8d28:	00000000 00000078 00000000 00000000     ....x...........
    8d38:	00000000 00000070 00000000 00000000     ....p...........
    8d48:	00000000 00000060 00000000 00000000     ....`...........
    8d58:	00000000 00000040 00000000 00000000     ....@...........
	...
    8da0:	f8000000 003fffff 00000000 00000000     ......?.........
    8db0:	f8000000 003fffff 00000000 00000000     ......?.........
    8dc0:	f8000000 003fffff 00000000 00000000     ......?.........
    8dd0:	f8000000 003fffff 00000000 00000000     ......?.........
    8de0:	f8000000 003fffff 00000000 00000000     ......?.........
    8df0:	f8000000 003fffff 00000000 00000000     ......?.........
    8e00:	f8000000 003fffff 00000000 00000000     ......?.........
    8e10:	f8000000 003fffff 00000000 00000000     ......?.........
    8e20:	f8000000 003fffff 00000000 00000000     ......?.........
    8e30:	f8000000 00003fff 00000000 00000000     .....?..........
	...
    8ed4:	80000000 001fffff 00000000 00000000     ................
    8ee4:	fe000000 03ffffff 00000000 00000000     ................
    8ef4:	ffe00000 7fffffff 00000000 00000000     ................
    8f04:	fffc0000 ffffffff 00000003 00000000     ................
    8f14:	ffff8000 ffffffff 0000001f 00000000     ................
    8f24:	ffffe000 ffffffff 0000007f 00000000     ................
    8f34:	fffff800 ffffffff 000001ff 00000000     ................
    8f44:	fffffe00 ffffffff 000007ff 00000000     ................
    8f54:	ffffff80 ffffffff 00001fff 00000000     ................
    8f64:	ffffffe0 ffffffff 00007fff 00000000     ................
    8f74:	fffffff0 ffffffff 0000ffff 00000000     ................
    8f84:	fffffffc ffffffff 0003ffff 00000000     ................
    8f94:	7ffffffe ffe00000 0007ffff 00000000     ................
    8fa4:	00ffffff f0000000 000fffff 80000000     ................
    8fb4:	000fffff 00000000 001fffff e0000000     ................
    8fc4:	0001ffff 00000000 003ffff8 e0000000     ..........?.....
    8fd4:	00003fff 00000000 007fffc0 f0000000     .?..............
    8fe4:	000007ff 00000000 00fffe00 f8000000     ................
    8ff4:	000001ff 00000000 01fff800 fc000000     ................
    9004:	000000ff 00000000 03fff000 fe000000     ................
    9014:	0000003f 00000000 07ffc000 fe000000     ?...............
    9024:	0000001f 00000000 07ff0000 ff000000     ................
    9034:	00000007 00000000 0ffe0000 ff800000     ................
    9044:	00000003 00000000 1ffc0000 ff800000     ................
    9054:	00000001 00000000 1ff80000 fc000000     ................
	...
    906c:	03f00000 60000000 00000000 00000000     .......`........
    907c:	00e00000 00000000 00000000 00000000     ................
	...
    90c0:	40000000 00000000 00000000 00200000     ...@.......... .
    90d0:	f8000000 00000000 00000000 01f00000     ................
    90e0:	ff000000 00000001 00000000 0ff80000     ................
    90f0:	ff800000 00000003 00000000 1ffc0000     ................
    9100:	ff000000 00000007 00000000 0ffe0000     ................
    9110:	ff000000 0000000f 00000000 0fff0000     ................
    9120:	fe000000 0000001f 00000000 07ff8000     ................
    9130:	fc000000 0000007f 00000000 03ffe000     ................
    9140:	fc000000 000001ff 00000000 03fff800     ................
    9150:	f8000000 000007ff 00000000 01fffe00     ................
    9160:	f0000000 00001fff 00000000 00ffff80     ................
    9170:	e0000000 0000ffff 00000000 007ffff0     ................
    9180:	c0000000 0007ffff 00000000 003ffffe     ..............?.
    9190:	80000000 007fffff e0000000 001fffff     ................
    91a0:	00000000 0fffffff ff000000 000fffff     ................
    91b0:	00000000 fffffffe ffffffff 0007ffff     ................
    91c0:	00000000 fffffff8 ffffffff 0001ffff     ................
    91d0:	00000000 fffffff0 ffffffff 0000ffff     ................
    91e0:	00000000 ffffffc0 ffffffff 00003fff     .............?..
    91f0:	00000000 ffffff80 ffffffff 00001fff     ................
    9200:	00000000 fffffe00 ffffffff 000007ff     ................
    9210:	00000000 fffff800 ffffffff 000001ff     ................
    9220:	00000000 ffffe000 ffffffff 0000007f     ................
    9230:	00000000 ffff0000 ffffffff 0000000f     ................
    9240:	00000000 fffc0000 ffffffff 00000003     ................
    9250:	00000000 ffc00000 3fffffff 00000000     ...........?....
    9260:	00000000 fc000000 03ffffff 00000000     ................
    9270:	00000000 80000000 001fffff 00000000     ................
	...
    92f4:	00080000 00000000 00000000 00000000     ................
    9304:	00078000 00000000 00000000 00000000     ................
    9314:	000ff000 00000000 00000000 00000000     ................
    9324:	000ffc00 00000000 00000000 00000000     ................
    9334:	000ff800 00000000 00000000 00000000     ................
    9344:	001ff800 00000020 00000000 00000000     .... ...........
    9354:	001ff800 00000030 00000000 00000000     ....0...........
    9364:	001ff000 0000007c 00000000 00000000     ....|...........
    9374:	001ff000 000000fe 00000000 00000000     ................
    9384:	003fe000 000000ff 00000000 00000000     ..?.............
    9394:	c03fe000 000001ff 00000000 00000000     ..?.............
    93a4:	e03fe000 000003ff 00000000 00000000     ..?.............
    93b4:	f07fc000 000007ff 00000000 00000000     ................
    93c4:	f87fc000 000003ff 00000000 00000000     ................
    93d4:	fe7f8000 000000ff 00000000 00000000     ................
    93e4:	ff7f8000 0000007f 00000000 00000000     ................
    93f4:	ffff8000 0000001f 00000000 00000000     ................
    9404:	ffff0000 0000000f 00000000 80000000     ................
    9414:	ffff7fff 00000003 00000000 80000000     ................
    9424:	ffffffff 00000001 00000000 80000000     ................
    9434:	7fffffff 00000000 00000000 80000000     ................
    9444:	1fffffff 00000000 00000000 80000000     ................
    9454:	3fffffff 00000000 00000000 80000000     ...?............
    9464:	7fffffff 00000000 00000000 80000000     ................
    9474:	ffffffff 00000001 00000000 80000000     ................
    9484:	ffffffff 00000007 00000000 80000000     ................
    9494:	fffe1fff 0000000f 00000000 00000000     ................
    94a4:	ffff0000 0000003f 00000000 00000000     ....?...........
    94b4:	feff0000 0000007f 00000000 00000000     ................
    94c4:	fcff0000 000001ff 00000000 00000000     ................
    94d4:	f8ff8000 000007ff 00000000 00000000     ................
    94e4:	f0ff8000 000007ff 00000000 00000000     ................
    94f4:	c07fc000 000003ff 00000000 00000000     ................
    9504:	807fc000 000001ff 00000000 00000000     ................
    9514:	007fc000 000001ff 00000000 00000000     ................
    9524:	003fe000 000000fc 00000000 00000000     ..?.............
    9534:	003fe000 00000078 00000000 00000000     ..?.x...........
    9544:	003ff000 00000030 00000000 00000000     ..?.0...........
    9554:	003ff000 00000020 00000000 00000000     ..?. ...........
    9564:	001ff800 00000000 00000000 00000000     ................
    9574:	001ff800 00000000 00000000 00000000     ................
    9584:	001ff000 00000000 00000000 00000000     ................
    9594:	000f8000 00000000 00000000 00000000     ................
    95a4:	000c0000 00000000 00000000 00000000     ................
	...
    95f4:	80000000 00000fff 00000000 00000000     ................
    9604:	80000000 00000fff 00000000 00000000     ................
    9614:	80000000 00000fff 00000000 00000000     ................
    9624:	80000000 00000fff 00000000 00000000     ................
    9634:	80000000 00000fff 00000000 00000000     ................
    9644:	80000000 00000fff 00000000 00000000     ................
    9654:	80000000 00000fff 00000000 00000000     ................
    9664:	80000000 00000fff 00000000 00000000     ................
    9674:	80000000 00000fff 00000000 00000000     ................
    9684:	80000000 00000fff 00000000 00000000     ................
    9694:	80000000 00000fff 00000000 00000000     ................
    96a4:	80000000 00000fff 00000000 00000000     ................
    96b4:	80000000 00000fff 00000000 00000000     ................
    96c4:	80000000 00000fff 00000000 00000000     ................
    96d4:	80000000 00000fff 00000000 00000000     ................
    96e4:	80000000 00000fff 00000000 00000000     ................
    96f4:	80000000 00000fff 00000000 00000000     ................
    9704:	80000000 00000fff 00000000 00000000     ................
    9714:	fffff000 ffffffff 00000000 00000000     ................
    9724:	fffff000 ffffffff 00000000 00000000     ................
    9734:	fffff000 ffffffff 00000000 00000000     ................
    9744:	fffff000 ffffffff 00000000 00000000     ................
    9754:	fffff000 ffffffff 00000000 00000000     ................
    9764:	fffff000 ffffffff 00000000 00000000     ................
    9774:	fffff000 ffffffff 00000000 00000000     ................
    9784:	fffff000 ffffffff 00000000 00000000     ................
    9794:	fffff000 ffffffff 00000000 00000000     ................
    97a4:	fffff000 ffffffff 00000000 00000000     ................
    97b4:	fffff000 ffffffff 00000000 00000000     ................
    97c4:	fffff000 ffffffff 00000000 00000000     ................
    97d4:	fffff000 ffffffff 00000000 00000000     ................
    97e4:	80000000 00000fff 00000000 00000000     ................
    97f4:	80000000 00000fff 00000000 00000000     ................
    9804:	80000000 00000fff 00000000 00000000     ................
    9814:	80000000 00000fff 00000000 00000000     ................
    9824:	80000000 00000fff 00000000 00000000     ................
    9834:	80000000 00000fff 00000000 00000000     ................
    9844:	80000000 00000fff 00000000 00000000     ................
    9854:	80000000 00000fff 00000000 00000000     ................
    9864:	80000000 00000fff 00000000 00000000     ................
    9874:	80000000 00000fff 00000000 00000000     ................
    9884:	80000000 00000fff 00000000 00000000     ................
    9894:	80000000 00000fff 00000000 00000000     ................
    98a4:	80000000 00000fff 00000000 00000000     ................
    98b4:	80000000 00000fff 00000000 00000000     ................
    98c4:	80000000 00000fff 00000000 00000000     ................
    98d4:	80000000 00000fff 00000000 00000000     ................
    98e4:	80000000 00000fff 00000000 00000000     ................
    98f4:	80000000 00000fff 00000000 00000000     ................
	...
    995c:	00100000 00000000 00000000 00000000     ................
    996c:	003c0000 00000000 00000000 00000000     ..<.............
    997c:	003f0000 00000000 00000000 00000000     ..?.............
    998c:	007fc000 00000000 00000000 00000000     ................
    999c:	00fff800 00000000 00000000 f8000000     ................
    99ac:	00ffffff 00000000 00000000 f8000000     ................
    99bc:	01ffffff 00000000 00000000 f8000000     ................
    99cc:	01ffffff 00000000 00000000 f8000000     ................
    99dc:	00ffffff 00000000 00000000 f8000000     ................
    99ec:	007fffff 00000000 00000000 f8000000     ................
    99fc:	003fffff 00000000 00000000 f8000000     ..?.............
    9a0c:	000fffff 00000000 00000000 f8000000     ................
    9a1c:	0007ffff 00000000 00000000 f8000000     ................
    9a2c:	0001ffff 00000000 00000000 f8000000     ................
    9a3c:	00007fff 00000000 00000000 f8000000     ................
    9a4c:	00001fff 00000000 00000000 f8000000     ................
    9a5c:	000003ff 00000000 00000000 00000000     ................
	...
    9b18:	00001ffc 00000000 00000000 00000000     ................
    9b28:	00001ffc 00000000 00000000 00000000     ................
    9b38:	00001ffc 00000000 00000000 00000000     ................
    9b48:	00001ffc 00000000 00000000 00000000     ................
    9b58:	00001ffc 00000000 00000000 00000000     ................
    9b68:	00001ffc 00000000 00000000 00000000     ................
    9b78:	00001ffc 00000000 00000000 00000000     ................
    9b88:	00001ffc 00000000 00000000 00000000     ................
    9b98:	00001ffc 00000000 00000000 00000000     ................
    9ba8:	00001ffc 00000000 00000000 00000000     ................
    9bb8:	00001ffc 00000000 00000000 00000000     ................
    9bc8:	00001ffc 00000000 00000000 00000000     ................
    9bd8:	00001ffc 00000000 00000000 00000000     ................
    9be8:	00001ffc 00000000 00000000 00000000     ................
    9bf8:	00001ffc 00000000 00000000 00000000     ................
    9c08:	00001ffc 00000000 00000000 00000000     ................
    9c18:	00001ffc 00000000 00000000 00000000     ................
    9c28:	00001ffc 00000000 00000000 00000000     ................
    9c38:	00001ffc 00000000 00000000 00000000     ................
    9c48:	00001ffc 00000000 00000000 00000000     ................
    9c58:	00001ffc 00000000 00000000 00000000     ................
    9c68:	00001ffc 00000000 00000000 00000000     ................
    9c78:	00001ffc 00000000 00000000 00000000     ................
    9c88:	00001ffc 00000000 00000000 00000000     ................
    9c98:	00001ffc 00000000 00000000 00000000     ................
    9ca8:	00001ffc 00000000 00000000 00000000     ................
    9cb8:	00001ffc 00000000 00000000 00000000     ................
    9cc8:	00001ffc 00000000 00000000 00000000     ................
	...
    9d98:	c0000000 00000007 00000000 00000000     ................
    9da8:	f0000000 0000001f 00000000 00000000     ................
    9db8:	f8000000 0000003f 00000000 00000000     ....?...........
    9dc8:	fc000000 0000007f 00000000 00000000     ................
    9dd8:	fc000000 0000007f 00000000 00000000     ................
    9de8:	fe000000 000000ff 00000000 00000000     ................
    9df8:	fe000000 000000ff 00000000 00000000     ................
    9e08:	fe000000 000000ff 00000000 00000000     ................
    9e18:	fe000000 000000ff 00000000 00000000     ................
    9e28:	fe000000 000000ff 00000000 00000000     ................
    9e38:	fe000000 000000ff 00000000 00000000     ................
    9e48:	fc000000 0000007f 00000000 00000000     ................
    9e58:	fc000000 0000007f 00000000 00000000     ................
    9e68:	f8000000 0000003f 00000000 00000000     ....?...........
    9e78:	f0000000 0000001f 00000000 00000000     ................
    9e88:	e0000000 0000000f 00000000 00000000     ................
	...
    9f0c:	00001c00 00000000 00000000 00000000     ................
    9f1c:	00001f80 00000000 00000000 00000000     ................
    9f2c:	00001ff0 00000000 00000000 00000000     ................
    9f3c:	00001ffe 00000000 00000000 c0000000     ................
    9f4c:	00001fff 00000000 00000000 f8000000     ................
    9f5c:	00001fff 00000000 00000000 ff000000     ................
    9f6c:	00001fff 00000000 00000000 ffe00000     ................
    9f7c:	00001fff 00000000 00000000 fffc0000     ................
    9f8c:	00001fff 00000000 00000000 ffff8000     ................
    9f9c:	00001fff 00000000 00000000 fffff000     ................
    9fac:	000007ff 00000000 00000000 fffffe00     ................
    9fbc:	000000ff 00000000 00000000 ffffffc0     ................
    9fcc:	0000003f 00000000 00000000 fffffff8     ?...............
    9fdc:	00000007 00000000 00000000 ffffffff     ................
	...
    9ff4:	e0000000 1fffffff 00000000 00000000     ................
    a004:	fc000000 03ffffff 00000000 00000000     ................
    a014:	ff800000 007fffff 00000000 00000000     ................
    a024:	ffe00000 000fffff 00000000 00000000     ................
    a034:	fffc0000 0001ffff 00000000 00000000     ................
    a044:	ffff8000 00003fff 00000000 00000000     .....?..........
    a054:	fffff000 000007ff 00000000 00000000     ................
    a064:	fffffe00 000000ff 00000000 00000000     ................
    a074:	ffffffc0 0000001f 00000000 00000000     ................
    a084:	fffffff8 00000003 00000000 00000000     ................
    a094:	7fffffff 00000000 00000000 80000000     ................
    a0a4:	0fffffff 00000000 00000000 80000000     ................
    a0b4:	01ffffff 00000000 00000000 80000000     ................
    a0c4:	003fffff 00000000 00000000 80000000     ..?.............
    a0d4:	0007ffff 00000000 00000000 80000000     ................
    a0e4:	0000ffff 00000000 00000000 80000000     ................
    a0f4:	00001fff 00000000 00000000 80000000     ................
    a104:	000003ff 00000000 00000000 80000000     ................
    a114:	000000ff 00000000 00000000 80000000     ................
    a124:	0000001f 00000000 00000000 80000000     ................
    a134:	00000003 00000000 00000000 00000000     ................
	...
    a1b4:	fff80000 0007ffff 00000000 00000000     ................
    a1c4:	ffff8000 007fffff 00000000 00000000     ................
    a1d4:	fffff000 03ffffff 00000000 00000000     ................
    a1e4:	fffffc00 0fffffff 00000000 00000000     ................
    a1f4:	ffffff00 3fffffff 00000000 00000000     .......?........
    a204:	ffffffc0 7fffffff 00000000 00000000     ................
    a214:	ffffffe0 ffffffff 00000001 00000000     ................
    a224:	fffffff0 ffffffff 00000003 00000000     ................
    a234:	fffffff8 ffffffff 00000007 00000000     ................
    a244:	fffffffc ffffffff 0000000f 00000000     ................
    a254:	fffffffc ffffffff 0000000f 00000000     ................
    a264:	fffffffe ffffffff 0000001f 00000000     ................
    a274:	ffffffff ffffffff 0000003f 00000000     ........?.......
    a284:	ffffffff ffffffff 0000003f 00000000     ........?.......
    a294:	0007ffff fff80000 0000003f 80000000     ........?.......
    a2a4:	00007fff ff800000 0000007f 80000000     ................
    a2b4:	00001fff fe000000 0000007f 80000000     ................
    a2c4:	00000fff fc000000 0000007f c0000000     ................
    a2d4:	000007ff f8000000 000000ff c0000000     ................
    a2e4:	000003ff f0000000 000000ff c0000000     ................
    a2f4:	000003ff f0000000 000000ff c0000000     ................
    a304:	000001ff e0000000 000000ff c0000000     ................
    a314:	000001ff e0000000 000000ff c0000000     ................
    a324:	000001ff e0000000 000000ff c0000000     ................
    a334:	000001ff e0000000 000000ff c0000000     ................
    a344:	000001ff e0000000 000000ff c0000000     ................
    a354:	000001ff e0000000 000000ff c0000000     ................
    a364:	000003ff f0000000 000000ff c0000000     ................
    a374:	000003ff f0000000 000000ff c0000000     ................
    a384:	000007ff f8000000 000000ff 80000000     ................
    a394:	00000fff fc000000 0000007f 80000000     ................
    a3a4:	00001fff fe000000 0000007f 80000000     ................
    a3b4:	00007fff ff800000 0000007f 00000000     ................
    a3c4:	0007ffff fff80000 0000003f 00000000     ........?.......
    a3d4:	ffffffff ffffffff 0000003f 00000000     ........?.......
    a3e4:	ffffffff ffffffff 0000003f 00000000     ........?.......
    a3f4:	fffffffe ffffffff 0000001f 00000000     ................
    a404:	fffffffc ffffffff 0000000f 00000000     ................
    a414:	fffffffc ffffffff 0000000f 00000000     ................
    a424:	fffffff8 ffffffff 00000007 00000000     ................
    a434:	fffffff0 ffffffff 00000003 00000000     ................
    a444:	ffffffe0 ffffffff 00000001 00000000     ................
    a454:	ffffff80 ffffffff 00000000 00000000     ................
    a464:	ffffff00 3fffffff 00000000 00000000     .......?........
    a474:	fffffc00 0fffffff 00000000 00000000     ................
    a484:	fffff000 03ffffff 00000000 00000000     ................
    a494:	ffff8000 007fffff 00000000 00000000     ................
    a4a4:	fff80000 0007ffff 00000000 00000000     ................
	...
    a584:	001ffc00 00000000 00000000 00000000     ................
    a594:	001ffc00 00000000 00000000 00000000     ................
    a5a4:	000ffe00 00000000 00000000 00000000     ................
    a5b4:	000ffe00 00000000 00000000 00000000     ................
    a5c4:	000fff00 00000000 00000000 00000000     ................
    a5d4:	0007ff00 00000000 00000000 00000000     ................
    a5e4:	0007ff00 00000000 00000000 00000000     ................
    a5f4:	0007ff80 00000000 00000000 00000000     ................
    a604:	0003ff80 00000000 00000000 00000000     ................
    a614:	0003ff80 00000000 00000000 00000000     ................
    a624:	0003ffc0 00000000 00000000 00000000     ................
    a634:	0003ffc0 00000000 00000000 00000000     ................
    a644:	0001ffe0 00000000 00000000 00000000     ................
    a654:	0001ffe0 00000000 00000000 00000000     ................
    a664:	0001ffe0 00000000 00000000 00000000     ................
    a674:	0000fff0 00000000 00000000 00000000     ................
    a684:	0000fff0 00000000 00000000 00000000     ................
    a694:	fffffff0 ffffffff 0000007f 00000000     ................
    a6a4:	fffffff8 ffffffff 0000007f 00000000     ................
    a6b4:	fffffff8 ffffffff 0000007f 00000000     ................
    a6c4:	fffffff8 ffffffff 0000007f 00000000     ................
    a6d4:	fffffffc ffffffff 0000007f 00000000     ................
    a6e4:	fffffffc ffffffff 0000007f 00000000     ................
    a6f4:	fffffffe ffffffff 0000007f 00000000     ................
    a704:	fffffffe ffffffff 0000007f 00000000     ................
    a714:	fffffffe ffffffff 0000007f 00000000     ................
    a724:	ffffffff ffffffff 0000007f 00000000     ................
    a734:	ffffffff ffffffff 0000007f 00000000     ................
    a744:	ffffffff ffffffff 0000007f 80000000     ................
    a754:	ffffffff ffffffff 0000007f 80000000     ................
    a764:	ffffffff ffffffff 0000007f 80000000     ................
    a774:	ffffffff ffffffff 0000007f 00000000     ................
	...
    a8d4:	00200000 00000000 00000000 00000000     .. .............
    a8e4:	003f8000 00000000 00000000 00000000     ..?.............
    a8f4:	003ff000 e0000000 0000007f 00000000     ..?.............
    a904:	003ffc00 f0000000 0000007f 00000000     ..?.............
    a914:	003fff00 f8000000 0000007f 00000000     ..?.............
    a924:	003fff80 fc000000 0000007f 00000000     ..?.............
    a934:	003fffc0 fe000000 0000007f 00000000     ..?.............
    a944:	003fffe0 ff000000 0000007f 00000000     ..?.............
    a954:	003ffff0 ffc00000 0000007f 00000000     ..?.............
    a964:	003ffff8 ffe00000 0000007f 00000000     ..?.............
    a974:	003ffffc fff00000 0000007f 00000000     ..?.............
    a984:	003ffffc fff80000 0000007f 00000000     ..?.............
    a994:	003ffffe fffc0000 0000007f 00000000     ..?.............
    a9a4:	003ffffe fffe0000 0000007f 00000000     ..?.............
    a9b4:	003fffff ffff0000 0000007f 00000000     ..?.............
    a9c4:	0000ffff ffff8000 0000007f 80000000     ................
    a9d4:	00003fff ffffc000 0000007f 80000000     .?..............
    a9e4:	00001fff ffffe000 0000007f 80000000     ................
    a9f4:	000007ff fffff000 0000007f 80000000     ................
    aa04:	000007ff fffff800 0000007f c0000000     ................
    aa14:	000003ff fffffe00 0000007f c0000000     ................
    aa24:	000003ff f7ffff00 0000007f c0000000     ................
    aa34:	000001ff f3ffff80 0000007f c0000000     ................
    aa44:	000001ff f1ffffc0 0000007f c0000000     ................
    aa54:	000001ff f07fffe0 0000007f c0000000     ................
    aa64:	000001ff f03ffff0 0000007f c0000000     ......?.........
    aa74:	000001ff f01ffff8 0000007f c0000000     ................
    aa84:	000001ff f00ffffc 0000007f c0000000     ................
    aa94:	000001ff f007ffff 0000007f c0000000     ................
    aaa4:	800003ff f003ffff 0000007f c0000000     ................
    aab4:	c00003ff f001ffff 0000007f c0000000     ................
    aac4:	f00007ff f000ffff 0000007f 80000000     ................
    aad4:	f8000fff f0007fff 0000007f 80000000     ................
    aae4:	ff003fff f0003fff 0000007f 80000000     .?...?..........
    aaf4:	fff7ffff f0001fff 0000007f 80000000     ................
    ab04:	ffffffff f0000fff 0000007f 00000000     ................
    ab14:	ffffffff f00003ff 0000007f 00000000     ................
    ab24:	ffffffff f00001ff 0000007f 00000000     ................
    ab34:	fffffffe f00000ff 0000007f 00000000     ................
    ab44:	fffffffe f000007f 0000007f 00000000     ................
    ab54:	fffffffc f000003f 0000007f 00000000     ....?...........
    ab64:	fffffffc f000000f 0000007f 00000000     ................
    ab74:	fffffff8 f0000007 0000007f 00000000     ................
    ab84:	fffffff0 f0000003 0000007f 00000000     ................
    ab94:	ffffffe0 f0000000 0000007f 00000000     ................
    aba4:	3fffffc0 f0000000 0000007f 00000000     ...?............
    abb4:	0fffff00 f0000000 0000007f 00000000     ................
    abc4:	03fffc00 f0000000 0000007f 00000000     ................
    abd4:	003fc000 f0000000 0000007f 00000000     ..?.............
    abe4:	00000000 f0000000 0000007f 00000000     ................
    abf4:	00000000 f0000000 0000007f 00000000     ................
	...
    ac78:	00780000 00000000 00000000 0003c000     ..x.............
    ac88:	07f80000 00000000 00000000 0003fc00     ................
    ac98:	1ff80000 00000000 00000000 0003ff00     ................
    aca8:	7ff80000 00000000 00000000 0003ff80     ................
    acb8:	fff80000 00000000 00000000 0003ffc0     ................
    acc8:	fff80000 00000001 00000000 0003ffe0     ................
    acd8:	fff80000 00000003 00000000 0003fff0     ................
    ace8:	fff80000 00000007 00000000 0003fff8     ................
    acf8:	fff80000 00000007 00000000 0003fffc     ................
    ad08:	fff80000 0000000f 00000000 0003fffc     ................
    ad18:	fff80000 0000001f 00000000 0003fffe     ................
    ad28:	fff80000 0000001f 00000000 0003fffe     ................
    ad38:	fff80000 0000003f 00000000 0003ffff     ....?...........
    ad48:	fff80000 0000003f 00000000 0003ffff     ....?...........
    ad58:	fff00000 0000003f 80000000 0000ffff     ....?...........
    ad68:	ff000000 0000007f 80000000 e0001fff     ................
    ad78:	fe0000ff 0000007f 80000000 e0000fff     ................
    ad88:	fc0000ff 0000007f 80000000 e00007ff     ................
    ad98:	f80000ff 0000007f c0000000 e00003ff     ................
    ada8:	f00000ff 000000ff c0000000 e00003ff     ................
    adb8:	f00000ff 000000ff c0000000 e00001ff     ................
    adc8:	e00000ff 000000ff c0000000 e00001ff     ................
    add8:	e00000ff 000000ff c0000000 e00001ff     ................
    ade8:	e00000ff 000000ff c0000000 e00001ff     ................
    adf8:	e00000ff 000000ff c0000000 e00001ff     ................
    ae08:	e00000ff 000000ff c0000000 e00001ff     ................
    ae18:	e00000ff 000000ff c0000000 e00001ff     ................
    ae28:	e00000ff 000000ff c0000000 f00001ff     ................
    ae38:	e00001ff 000000ff c0000000 f00003ff     ................
    ae48:	f00001ff 000000ff c0000000 f80003ff     ................
    ae58:	f00001ff 000000ff 80000000 f80007ff     ................
    ae68:	f80003ff 0000007f 80000000 fc000fff     ................
    ae78:	f80003ff 0000007f 80000000 ff001fff     ................
    ae88:	fc0007ff 0000007f 80000000 ffe0ffff     ................
    ae98:	ff001fff 0000007f 00000000 ffffffff     ................
    aea8:	ffc0ffff 0000003f 00000000 ffffffff     ....?...........
    aeb8:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    aec8:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    aed8:	ffffffff 0000001f 00000000 fffffffe     ................
    aee8:	fffffffb 0000001f 00000000 fffffffc     ................
    aef8:	fffffff9 0000000f 00000000 fffffff8     ................
    af08:	fffffff0 00000007 00000000 7ffffff0     ................
    af18:	fffffff0 00000007 00000000 7ffffff0     ................
    af28:	ffffffe0 00000003 00000000 3fffffc0     ...............?
    af38:	ffffffc0 00000001 00000000 0fffff80     ................
    af48:	ffffff80 00000000 00000000 07ffff00     ................
    af58:	7fffff00 00000000 00000000 01fff800     ................
    af68:	1ffffe00 00000000 00000000 003fc000     ..............?.
    af78:	07fff800 00000000 00000000 00000000     ................
    af88:	00ffc000 00000000 00000000 00000000     ................
	...
    b018:	007fe000 00000000 00000000 00000000     ................
    b028:	007ff000 00000000 00000000 00000000     ................
    b038:	007ffc00 00000000 00000000 00000000     ................
    b048:	007fff00 00000000 00000000 00000000     ................
    b058:	007fff80 00000000 00000000 00000000     ................
    b068:	007fffe0 00000000 00000000 00000000     ................
    b078:	007ffff0 00000000 00000000 00000000     ................
    b088:	007ffffc 00000000 00000000 00000000     ................
    b098:	007fffff 00000000 00000000 80000000     ................
    b0a8:	007fffff 00000000 00000000 e0000000     ................
    b0b8:	007fffff 00000000 00000000 f0000000     ................
    b0c8:	007fffff 00000000 00000000 fc000000     ................
    b0d8:	007fffff 00000000 00000000 fe000000     ................
    b0e8:	007fffff 00000000 00000000 ff800000     ................
    b0f8:	007ff7ff 00000000 00000000 ffe00000     ................
    b108:	007ff1ff 00000000 00000000 fff00000     ................
    b118:	007ff0ff 00000000 00000000 fffc0000     ................
    b128:	007ff03f 00000000 00000000 fffe0000     ?...............
    b138:	007ff01f 00000000 00000000 ffff8000     ................
    b148:	007ff007 00000000 00000000 ffffe000     ................
    b158:	007ff001 00000000 00000000 fffff000     ................
    b168:	007ff000 00000000 00000000 3ffffc00     ...............?
    b178:	007ff000 00000000 00000000 1ffffe00     ................
    b188:	007ff000 00000000 00000000 07ffff80     ................
    b198:	007ff000 00000000 00000000 01ffffc0     ................
    b1a8:	007ff000 00000000 00000000 00fffff0     ................
    b1b8:	007ff000 00000000 00000000 003ffffc     ..............?.
    b1c8:	007ff000 00000000 00000000 001ffffe     ................
    b1d8:	007ff000 00000000 80000000 0007ffff     ................
    b1e8:	007ff000 00000000 80000000 ffffffff     ................
    b1f8:	ffffffff 0000007f 80000000 ffffffff     ................
    b208:	ffffffff 0000007f 80000000 ffffffff     ................
    b218:	ffffffff 0000007f 80000000 ffffffff     ................
    b228:	ffffffff 0000007f 80000000 ffffffff     ................
    b238:	ffffffff 0000007f 80000000 ffffffff     ................
    b248:	ffffffff 0000007f 80000000 ffffffff     ................
    b258:	ffffffff 0000007f 80000000 ffffffff     ................
    b268:	ffffffff 0000007f 80000000 ffffffff     ................
    b278:	ffffffff 0000007f 80000000 ffffffff     ................
    b288:	ffffffff 0000007f 80000000 ffffffff     ................
    b298:	ffffffff 0000007f 80000000 ffffffff     ................
    b2a8:	ffffffff 0000007f 80000000 ffffffff     ................
    b2b8:	ffffffff 0000007f 80000000 ffffffff     ................
    b2c8:	ffffffff 0000007f 00000000 00000000     ................
    b2d8:	007ff000 00000000 00000000 00000000     ................
    b2e8:	007ff000 00000000 00000000 00000000     ................
    b2f8:	007ff000 00000000 00000000 00000000     ................
    b308:	007ff000 00000000 00000000 00000000     ................
    b318:	007ff000 00000000 00000000 00000000     ................
    b328:	007ff000 00000000 00000000 00000000     ................
    b338:	007ff000 00000000 00000000 00000000     ................
    b348:	007ff000 00000000 00000000 00000000     ................
	...
    b3d8:	00300000 00000000 00000000 00000000     ..0.............
    b3e8:	03f00000 00000000 00000000 00000000     ................
    b3f8:	0ff0000f 00000000 00000000 ff800000     ................
    b408:	3ff0000f 00000000 00000000 ffffc000     ...?............
    b418:	7ff0001f 00000000 00000000 ffffffe0     ................
    b428:	fff0001f 00000000 80000000 ffffffff     ................
    b438:	fff0001f 00000001 80000000 ffffffff     ................
    b448:	fff0001f 00000003 80000000 ffffffff     ................
    b458:	fff0003f 00000007 80000000 ffffffff     ?...............
    b468:	fff0003f 0000000f 80000000 ffffffff     ?...............
    b478:	fff0003f 0000000f 80000000 ffffffff     ?...............
    b488:	fff0003f 0000001f 80000000 ffffffff     ?...............
    b498:	fff0007f 0000001f 80000000 ffffffff     ................
    b4a8:	fff0007f 0000003f 80000000 ffffffff     ....?...........
    b4b8:	ffe0003f 0000003f 80000000 ffffffff     ?...?...........
    b4c8:	ff00001f 0000007f 80000000 f87fffff     ................
    b4d8:	fe00000f 0000007f 80000000 fc001fff     ................
    b4e8:	f800000f 0000007f 80000000 fc0003ff     ................
    b4f8:	f800000f 0000007f 80000000 fe0003ff     ................
    b508:	f0000007 000000ff 80000000 fe0003ff     ................
    b518:	f0000007 000000ff 80000000 fe0003ff     ................
    b528:	e0000007 000000ff 80000000 ff0003ff     ................
    b538:	e0000007 000000ff 80000000 ff0003ff     ................
    b548:	e0000007 000000ff 80000000 ff0003ff     ................
    b558:	e0000007 000000ff 80000000 ff0003ff     ................
    b568:	e0000007 000000ff 80000000 ff0003ff     ................
    b578:	e0000007 000000ff 80000000 ff0003ff     ................
    b588:	e000000f 000000ff 80000000 ff0003ff     ................
    b598:	f000000f 000000ff 80000000 ff0003ff     ................
    b5a8:	f000001f 000000ff 80000000 ff0003ff     ................
    b5b8:	f800001f 0000007f 80000000 ff0003ff     ................
    b5c8:	fc00003f 0000007f 80000000 fe0003ff     ?...............
    b5d8:	fe0000ff 0000007f 80000000 fe0003ff     ................
    b5e8:	ff8001ff 0000007f 80000000 fe0003ff     ................
    b5f8:	fffe3fff 0000003f 80000000 fe0003ff     .?..?...........
    b608:	ffffffff 0000003f 80000000 fc0003ff     ....?...........
    b618:	ffffffff 0000001f 80000000 fc0003ff     ................
    b628:	ffffffff 0000001f 80000000 f80003ff     ................
    b638:	ffffffff 0000000f 80000000 f80003ff     ................
    b648:	ffffffff 0000000f 80000000 f00003ff     ................
    b658:	ffffffff 00000007 80000000 e00003ff     ................
    b668:	ffffffff 00000003 80000000 c00003ff     ................
    b678:	ffffffff 00000001 80000000 800003ff     ................
    b688:	ffffffff 00000000 80000000 000003ff     ................
    b698:	7fffffff 00000000 80000000 000003ff     ................
    b6a8:	1ffffffc 00000000 00000000 00000000     ................
    b6b8:	07fffff0 00000000 00000000 00000000     ................
    b6c8:	01ffffc0 00000000 00000000 00000000     ................
    b6d8:	000ff800 00000000 00000000 00000000     ................
	...
    b774:	c0000000 0003ffff 00000000 00000000     ................
    b784:	fe000000 003fffff 00000000 00000000     ......?.........
    b794:	ffc00000 01ffffff 00000000 00000000     ................
    b7a4:	fff80000 07ffffff 00000000 00000000     ................
    b7b4:	fffe0000 1fffffff 00000000 00000000     ................
    b7c4:	ffff8000 3fffffff 00000000 00000000     .......?........
    b7d4:	ffffe000 ffffffff 00000000 00000000     ................
    b7e4:	fffff000 ffffffff 00000001 00000000     ................
    b7f4:	fffffc00 ffffffff 00000003 00000000     ................
    b804:	fffffe00 ffffffff 00000007 00000000     ................
    b814:	ffffff00 ffffffff 00000007 00000000     ................
    b824:	ffffff80 ffffffff 0000000f 00000000     ................
    b834:	ffffffc0 ffffffff 0000001f 00000000     ................
    b844:	ffffffe0 ffffffff 0000001f 00000000     ................
    b854:	ffffffe0 fffe00ff 0000003f 00000000     ........?.......
    b864:	f0fffff0 ffc0007f 0000003f 00000000     ........?.......
    b874:	f83ffff8 ff00001f 0000007f 00000000     ..?.............
    b884:	fc0ffff8 fe00001f 0000007f 00000000     ................
    b894:	fc03fffc f800000f 0000007f 00000000     ................
    b8a4:	fe01fffc f8000007 0000007f 00000000     ................
    b8b4:	fe00fffe f0000007 000000ff 00000000     ................
    b8c4:	ff007ffe f0000003 000000ff 00000000     ................
    b8d4:	ff003fff e0000003 000000ff 00000000     .?..............
    b8e4:	ff001fff e0000003 000000ff 00000000     ................
    b8f4:	ff800fff e0000003 000000ff 80000000     ................
    b904:	ff800fff e0000003 000000ff 80000000     ................
    b914:	ff8007ff e0000003 000000ff 80000000     ................
    b924:	ff8007ff e0000003 000000ff 80000000     ................
    b934:	ff8003ff f0000007 000000ff 80000000     ................
    b944:	ff8003ff f0000007 000000ff c0000000     ................
    b954:	ff8003ff f800000f 000000ff c0000000     ................
    b964:	ff8003ff fc00001f 0000007f c0000000     ................
    b974:	ff8001ff fe00003f 0000007f c0000000     ....?...........
    b984:	ff8001ff ff8000ff 0000007f c0000000     ................
    b994:	ff0001ff ffe003ff 0000003f c0000000     ........?.......
    b9a4:	ff0001ff ffffffff 0000003f c0000000     ........?.......
    b9b4:	ff0001ff ffffffff 0000003f c0000000     ........?.......
    b9c4:	fe0001ff ffffffff 0000001f c0000000     ................
    b9d4:	fe0001ff ffffffff 0000000f 00000000     ................
    b9e4:	fc000000 ffffffff 0000000f 00000000     ................
    b9f4:	fc000000 ffffffff 00000007 00000000     ................
    ba04:	f8000000 ffffffff 00000003 00000000     ................
    ba14:	f0000000 ffffffff 00000001 00000000     ................
    ba24:	e0000000 ffffffff 00000000 00000000     ................
    ba34:	c0000000 7fffffff 00000000 00000000     ................
    ba44:	00000000 3fffffff 00000000 00000000     .......?........
    ba54:	00000000 0ffffffc 00000000 00000000     ................
    ba64:	00000000 03fffff0 00000000 00000000     ................
    ba74:	00000000 007fff80 00000000 00000000     ................
	...
    baf0:	80000000 000003ff 00000000 00000000     ................
    bb00:	80000000 000003ff 00000000 00000000     ................
    bb10:	80000000 000003ff 00000000 00000000     ................
    bb20:	80000000 000003ff 00000000 00000000     ................
    bb30:	80000000 000003ff 00000000 00000000     ................
    bb40:	80000000 000003ff 00000000 00000000     ................
    bb50:	80000000 000003ff 00000000 00000000     ................
    bb60:	80000000 000003ff 00000000 00000000     ................
    bb70:	80000000 000003ff 00000000 00000040     ............@...
    bb80:	80000000 000003ff 00000000 00000070     ............p...
    bb90:	80000000 000003ff 00000000 0000007e     ............~...
    bba0:	80000000 000003ff 80000000 0000007f     ................
    bbb0:	80000000 000003ff e0000000 0000007f     ................
    bbc0:	80000000 000003ff f8000000 0000007f     ................
    bbd0:	80000000 000003ff fe000000 0000007f     ................
    bbe0:	80000000 000003ff ffc00000 0000007f     ................
    bbf0:	80000000 000003ff fff00000 0000007f     ................
    bc00:	80000000 000003ff fffc0000 0000007f     ................
    bc10:	80000000 000003ff ffff0000 0000007f     ................
    bc20:	80000000 000003ff ffffc000 0000007f     ................
    bc30:	80000000 000003ff fffff800 0000007f     ................
    bc40:	80000000 000003ff fffffe00 0000007f     ................
    bc50:	80000000 000003ff ffffff80 0000007f     ................
    bc60:	80000000 000003ff ffffffe0 0000003f     ............?...
    bc70:	80000000 000003ff fffffff8 00000007     ................
    bc80:	80000000 000003ff ffffffff 00000001     ................
    bc90:	80000000 c00003ff 7fffffff 00000000     ................
    bca0:	80000000 f00003ff 0fffffff 00000000     ................
    bcb0:	80000000 fc0003ff 03ffffff 00000000     ................
    bcc0:	80000000 ff0003ff 00ffffff 00000000     ................
    bcd0:	80000000 ffe003ff 001fffff 00000000     ................
    bce0:	80000000 fff803ff 0007ffff 00000000     ................
    bcf0:	80000000 fffe03ff 0001ffff 00000000     ................
    bd00:	80000000 ffff83ff 00007fff 00000000     ................
    bd10:	80000000 ffffe3ff 00000fff 00000000     ................
    bd20:	80000000 ffffffff 000003ff 00000000     ................
    bd30:	80000000 ffffffff 000000ff 00000000     ................
    bd40:	80000000 ffffffff 0000001f 00000000     ................
    bd50:	80000000 ffffffff 00000007 00000000     ................
    bd60:	80000000 ffffffff 00000001 00000000     ................
    bd70:	80000000 3fffffff 00000000 00000000     .......?........
    bd80:	80000000 0fffffff 00000000 00000000     ................
    bd90:	80000000 03ffffff 00000000 00000000     ................
    bda0:	80000000 007fffff 00000000 00000000     ................
    bdb0:	80000000 001fffff 00000000 00000000     ................
    bdc0:	80000000 0007ffff 00000000 00000000     ................
    bdd0:	80000000 0000ffff 00000000 00000000     ................
    bde0:	80000000 00003fff 00000000 00000000     .....?..........
    bdf0:	80000000 00000fff 00000000 00000000     ................
    be00:	80000000 000001ff 00000000 00000000     ................
    be10:	80000000 0000007f 00000000 00000000     ................
	...
    beb8:	01ffe000 00000000 00000000 001fc000     ................
    bec8:	0ffff800 00000000 00000000 00fffc00     ................
    bed8:	3ffffe00 00000000 00000000 03ffff00     ...?............
    bee8:	7fffff80 00000000 00000000 0fffff80     ................
    bef8:	ffffffc0 00000001 00000000 1fffffe0     ................
    bf08:	ffffffe0 00000003 00000000 3ffffff0     ...............?
    bf18:	fffffff0 00000007 00000000 7ffffff8     ................
    bf28:	fffffff8 00000007 00000000 fffffffc     ................
    bf38:	fffffff8 0000000f 00000000 fffffffc     ................
    bf48:	fffffffc 0000001f 00000000 fffffffe     ................
    bf58:	fffffffd 0000001f 00000000 fffffffe     ................
    bf68:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    bf78:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    bf88:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    bf98:	ffc03fff 0000007f 80000000 ffffffff     .?..............
    bfa8:	ff000fff 0000007f 80000000 ff801fff     ................
    bfb8:	fc0003ff 0000007f 80000000 fe000fff     ................
    bfc8:	f80001ff 0000007f c0000000 fc0007ff     ................
    bfd8:	f00000ff 000000ff c0000000 f80003ff     ................
    bfe8:	f00000ff 000000ff c0000000 f80003ff     ................
    bff8:	f00000ff 000000ff c0000000 f00001ff     ................
    c008:	e000007f 000000ff c0000000 f00001ff     ................
    c018:	e000007f 000000ff c0000000 f00001ff     ................
    c028:	e000007f 000000ff c0000000 f00001ff     ................
    c038:	e000007f 000000ff c0000000 f00001ff     ................
    c048:	e000007f 000000ff c0000000 f00001ff     ................
    c058:	e000007f 000000ff c0000000 f80003ff     ................
    c068:	e00000ff 000000ff c0000000 f80003ff     ................
    c078:	f00000ff 000000ff c0000000 fc0007ff     ................
    c088:	f00001ff 000000ff 80000000 fe000fff     ................
    c098:	f80001ff 0000007f 80000000 ff803fff     .............?..
    c0a8:	fc0003ff 0000007f 80000000 ffffffff     ................
    c0b8:	ff000fff 0000007f 80000000 ffffffff     ................
    c0c8:	ffc03fff 0000007f 00000000 ffffffff     .?..............
    c0d8:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    c0e8:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    c0f8:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    c108:	fffffffd 0000001f 00000000 fffffffc     ................
    c118:	fffffffc 0000001f 00000000 fffffffc     ................
    c128:	fffffff8 0000000f 00000000 7ffffff8     ................
    c138:	fffffff8 00000007 00000000 3ffffff0     ...............?
    c148:	fffffff0 00000007 00000000 1fffffe0     ................
    c158:	ffffffe0 00000003 00000000 0fffff80     ................
    c168:	ffffffc0 00000001 00000000 03ffff00     ................
    c178:	7fffff80 00000000 00000000 00fffc00     ................
    c188:	3ffffe00 00000000 00000000 001f8000     ...?............
    c198:	0ffff800 00000000 00000000 00000000     ................
    c1a8:	01ffe000 00000000 00000000 00000000     ................
	...
    c244:	07f80000 00000000 00000000 00000000     ................
    c254:	ffff8000 00000000 00000000 00000000     ................
    c264:	fffff000 00000007 00000000 00000000     ................
    c274:	fffffc00 0000001f 00000000 00000000     ................
    c284:	ffffff00 0000007f 00000000 00000000     ................
    c294:	ffffff80 000000ff 00000000 00000000     ................
    c2a4:	ffffffc0 000001ff 00000000 00000000     ................
    c2b4:	ffffffe0 000003ff 00000000 00000000     ................
    c2c4:	fffffff0 000007ff 00000000 00000000     ................
    c2d4:	fffffff8 00000fff 00000000 00000000     ................
    c2e4:	fffffffc 00000fff 00000000 00000000     ................
    c2f4:	fffffffc e0001fff 000000ff 00000000     ................
    c304:	fffffffe e0001fff 000000ff 00000000     ................
    c314:	ffffffff e0003fff 000000ff 00000000     .....?..........
    c324:	ff1fffff e0003fff 000000ff 00000000     .....?..........
    c334:	e000ffff e0003fff 000000ff 80000000     .....?..........
    c344:	80003fff e0007fff 000000ff 80000000     .?..............
    c354:	00001fff e0007ffe 000000ff 80000000     ................
    c364:	000007ff f0007ffc 000000ff c0000000     ................
    c374:	000007ff f0007ff8 0000007f c0000000     ................
    c384:	000003ff f0007ff8 0000007f c0000000     ................
    c394:	000001ff f0007ff0 0000007f c0000000     ................
    c3a4:	000001ff f8007ff0 0000007f c0000000     ................
    c3b4:	000001ff f8007ff0 0000007f c0000000     ................
    c3c4:	000001ff fc007ff0 0000003f c0000000     ........?.......
    c3d4:	000001ff fc007ff0 0000003f c0000000     ........?.......
    c3e4:	000001ff fe003ff0 0000003f c0000000     .....?..?.......
    c3f4:	000003ff ff003ff0 0000001f c0000000     .....?..........
    c404:	000003ff ff003ff8 0000001f 80000000     .....?..........
    c414:	000007ff ffc01ff8 0000001f 80000000     ................
    c424:	00000fff ffe00ffc 0000000f 80000000     ................
    c434:	00001fff fff00ffc 0000000f 80000000     ................
    c444:	00003fff fffe07fe 00000007 00000000     .?..............
    c454:	0001ffff ffffc3ff 00000003 00000000     ................
    c464:	ffffffff ffffffff 00000003 00000000     ................
    c474:	fffffffe ffffffff 00000001 00000000     ................
    c484:	fffffffe ffffffff 00000000 00000000     ................
    c494:	fffffffc 7fffffff 00000000 00000000     ................
    c4a4:	fffffff8 3fffffff 00000000 00000000     .......?........
    c4b4:	fffffff8 1fffffff 00000000 00000000     ................
    c4c4:	fffffff0 0fffffff 00000000 00000000     ................
    c4d4:	ffffffe0 07ffffff 00000000 00000000     ................
    c4e4:	ffffff80 01ffffff 00000000 00000000     ................
    c4f4:	ffffff00 00ffffff 00000000 00000000     ................
    c504:	fffffc00 003fffff 00000000 00000000     ......?.........
    c514:	fffff000 0007ffff 00000000 00000000     ................
    c524:	ffffc000 0001ffff 00000000 00000000     ................
    c534:	fffe0000 00001fff 00000000 00000000     ................
    c544:	ff800000 0000003f 00000000 00000000     ....?...........
	...
    c604:	07c00000 c0000000 00000007 00000000     ................
    c614:	1ff00000 f0000000 0000001f 00000000     ................
    c624:	3ff80000 f8000000 0000003f 00000000     ...?....?.......
    c634:	7ffc0000 fc000000 0000007f 00000000     ................
    c644:	7ffc0000 fc000000 0000007f 00000000     ................
    c654:	fffe0000 fe000000 000000ff 00000000     ................
    c664:	fffe0000 fe000000 000000ff 00000000     ................
    c674:	fffe0000 fe000000 000000ff 00000000     ................
    c684:	fffe0000 fe000000 000000ff 00000000     ................
    c694:	fffe0000 fe000000 000000ff 00000000     ................
    c6a4:	fffe0000 fe000000 000000ff 00000000     ................
    c6b4:	7ffc0000 fc000000 0000007f 00000000     ................
    c6c4:	7ffc0000 fc000000 0000007f 00000000     ................
    c6d4:	3ff80000 f8000000 0000003f 00000000     ...?....?.......
    c6e4:	1ff00000 f0000000 0000001f 00000000     ................
    c6f4:	0fe00000 e0000000 0000000f 00000000     ................
	...
    c7ac:	00100000 00000000 00000000 00000000     ................
    c7bc:	003c0000 00000000 07c00000 00000000     ..<.............
    c7cc:	003f0000 00000000 1ff00000 00000000     ..?.............
    c7dc:	007fc000 00000000 3ff80000 00000000     ...........?....
    c7ec:	00fff800 00000000 7ffc0000 f8000000     ................
    c7fc:	00ffffff 00000000 7ffc0000 f8000000     ................
    c80c:	01ffffff 00000000 fffe0000 f8000000     ................
    c81c:	01ffffff 00000000 fffe0000 f8000000     ................
    c82c:	00ffffff 00000000 fffe0000 f8000000     ................
    c83c:	007fffff 00000000 fffe0000 f8000000     ................
    c84c:	003fffff 00000000 fffe0000 f8000000     ..?.............
    c85c:	000fffff 00000000 fffe0000 f8000000     ................
    c86c:	0007ffff 00000000 7ffc0000 f8000000     ................
    c87c:	0001ffff 00000000 7ffc0000 f8000000     ................
    c88c:	00007fff 00000000 3ff80000 f8000000     ...........?....
    c89c:	00001fff 00000000 1ff00000 f8000000     ................
    c8ac:	000003ff 00000000 0fe00000 00000000     ................
	...
    c948:	00007ff8 00000000 00000000 00000000     ................
    c958:	0000fffc 00000000 00000000 00000000     ................
    c968:	0000fffc 00000000 00000000 00000000     ................
    c978:	0001fffe 00000000 00000000 00000000     ................
    c988:	0001fffe 00000000 00000000 00000000     ................
    c998:	0001fffe 00000000 00000000 00000000     ................
    c9a8:	0003ffff 00000000 00000000 00000000     ................
    c9b8:	0003ffff 00000000 00000000 80000000     ................
    c9c8:	0007ffff 00000000 00000000 80000000     ................
    c9d8:	0007ffff 00000000 00000000 80000000     ................
    c9e8:	0007ffff 00000000 00000000 c0000000     ................
    c9f8:	000fffff 00000000 00000000 c0000000     ................
    ca08:	000fffff 00000000 00000000 e0000000     ................
    ca18:	001fffff 00000000 00000000 e0000000     ................
    ca28:	001fffff 00000000 00000000 f0000000     ................
    ca38:	003ffdff 00000000 00000000 f0000000     ..?.............
    ca48:	003ffcff 00000000 00000000 f0000000     ..?.............
    ca58:	003ffcff 00000000 00000000 f8000000     ..?.............
    ca68:	007ff87f 00000000 00000000 f8000000     ................
    ca78:	007ff87f 00000000 00000000 fc000000     ................
    ca88:	00fff87f 00000000 00000000 fc000000     ................
    ca98:	00fff03f 00000000 00000000 fe000000     ?...............
    caa8:	01fff03f 00000000 00000000 fe000000     ?...............
    cab8:	01fff03f 00000000 00000000 fe000000     ?...............
    cac8:	01ffe01f 00000000 00000000 ff000000     ................
    cad8:	03ffe01f 00000000 00000000 ff000000     ................
    cae8:	03ffc01f 00000000 00000000 ff800000     ................
    caf8:	07ffc00f 00000000 00000000 ff800000     ................
    cb08:	07ffc00f 00000000 00000000 ffc00000     ................
    cb18:	0fff8007 00000000 00000000 ffc00000     ................
    cb28:	0fff8007 00000000 00000000 ffc00000     ................
    cb38:	0fff8007 00000000 00000000 ffe00000     ................
    cb48:	1fff0003 00000000 00000000 ffe00000     ................
    cb58:	1fff0003 00000000 00000000 fff00000     ................
    cb68:	3fff0003 00000000 00000000 fff00000     ...?............
    cb78:	3ffe0001 00000000 00000000 fff80000     ...?............
    cb88:	7ffe0001 00000000 00000000 fff80000     ................
    cb98:	7ffe0001 00000000 00000000 fff80000     ................
    cba8:	7ffc0000 00000000 00000000 fffc0000     ................
    cbb8:	fffc0000 00000000 00000000 7ffc0000     ................
    cbc8:	fff80000 00000000 00000000 7ffe0000     ................
    cbd8:	fff80000 00000001 00000000 00000000     ................
	...
    ccb4:	ff800000 007ff003 00000000 00000000     ................
    ccc4:	ff800000 007ff003 00000000 00000000     ................
    ccd4:	ff800000 007ff003 00000000 00000000     ................
    cce4:	ff800000 007ff003 00000000 00000000     ................
    ccf4:	ff800000 007ff003 00000000 00000000     ................
    cd04:	ff800000 007ff003 00000000 00000000     ................
    cd14:	ff800000 007ff003 00000000 00000000     ................
    cd24:	ff800000 007ff003 00000000 00000000     ................
    cd34:	ff800000 007ff003 00000000 00000000     ................
    cd44:	ff800000 007ff003 00000000 00000000     ................
    cd54:	ff800000 007ff003 00000000 00000000     ................
    cd64:	ff800000 007ff003 00000000 00000000     ................
    cd74:	ff800000 007ff003 00000000 00000000     ................
    cd84:	ff800000 007ff003 00000000 00000000     ................
    cd94:	ff800000 007ff003 00000000 00000000     ................
    cda4:	ff800000 007ff003 00000000 00000000     ................
    cdb4:	ff800000 007ff003 00000000 00000000     ................
    cdc4:	ff800000 007ff003 00000000 00000000     ................
    cdd4:	ff800000 007ff003 00000000 00000000     ................
    cde4:	ff800000 007ff003 00000000 00000000     ................
    cdf4:	ff800000 007ff003 00000000 00000000     ................
    ce04:	ff800000 007ff003 00000000 00000000     ................
    ce14:	ff800000 007ff003 00000000 00000000     ................
    ce24:	ff800000 007ff003 00000000 00000000     ................
    ce34:	ff800000 007ff003 00000000 00000000     ................
    ce44:	ff800000 007ff003 00000000 00000000     ................
    ce54:	ff800000 007ff003 00000000 00000000     ................
    ce64:	ff800000 007ff003 00000000 00000000     ................
    ce74:	ff800000 007ff003 00000000 00000000     ................
    ce84:	ff800000 007ff003 00000000 00000000     ................
    ce94:	ff800000 007ff003 00000000 00000000     ................
    cea4:	ff800000 007ff003 00000000 00000000     ................
    ceb4:	ff800000 007ff003 00000000 00000000     ................
    cec4:	ff800000 007ff003 00000000 00000000     ................
    ced4:	ff800000 007ff003 00000000 00000000     ................
    cee4:	ff800000 007ff003 00000000 00000000     ................
    cef4:	ff800000 007ff003 00000000 00000000     ................
    cf04:	ff800000 007ff003 00000000 00000000     ................
    cf14:	ff800000 007ff003 00000000 00000000     ................
    cf24:	ff800000 007ff003 00000000 00000000     ................
    cf34:	ff800000 007ff003 00000000 00000000     ................
    cf44:	ff800000 007ff003 00000000 00000000     ................
    cf54:	ff800000 007ff003 00000000 00000000     ................
    cf64:	ff800000 007ff003 00000000 00000000     ................
	...
    d044:	7ffe0000 fff80000 00000001 00000000     ................
    d054:	7ffc0000 fff80000 00000000 00000000     ................
    d064:	fffc0000 fffc0000 00000000 00000000     ................
    d074:	fff80000 7ffc0000 00000000 00000000     ................
    d084:	fff80000 7ffc0000 00000000 00000000     ................
    d094:	fff80000 7ffe0001 00000000 00000000     ................
    d0a4:	fff00000 3ffe0001 00000000 00000000     .......?........
    d0b4:	fff00000 3fff0001 00000000 00000000     .......?........
    d0c4:	ffe00000 1fff0003 00000000 00000000     ................
    d0d4:	ffe00000 1fff0003 00000000 00000000     ................
    d0e4:	ffe00000 1fff8007 00000000 00000000     ................
    d0f4:	ffc00000 0fff8007 00000000 00000000     ................
    d104:	ffc00000 0fff8007 00000000 00000000     ................
    d114:	ff800000 07ffc00f 00000000 00000000     ................
    d124:	ff800000 07ffc00f 00000000 00000000     ................
    d134:	ff000000 03ffc00f 00000000 00000000     ................
    d144:	ff000000 03ffe01f 00000000 00000000     ................
    d154:	ff000000 03ffe01f 00000000 00000000     ................
    d164:	fe000000 01ffe01f 00000000 00000000     ................
    d174:	fe000000 01fff03f 00000000 00000000     ....?...........
    d184:	fc000000 00fff03f 00000000 00000000     ....?...........
    d194:	fc000000 00fff83f 00000000 00000000     ....?...........
    d1a4:	f8000000 007ff87f 00000000 00000000     ................
    d1b4:	f8000000 007ff87f 00000000 00000000     ................
    d1c4:	f8000000 007ffc7f 00000000 00000000     ................
    d1d4:	f0000000 003ffcff 00000000 00000000     ......?.........
    d1e4:	f0000000 003ffcff 00000000 00000000     ......?.........
    d1f4:	e0000000 001fffff 00000000 00000000     ................
    d204:	e0000000 001fffff 00000000 00000000     ................
    d214:	e0000000 000fffff 00000000 00000000     ................
    d224:	c0000000 000fffff 00000000 00000000     ................
    d234:	c0000000 000fffff 00000000 00000000     ................
    d244:	80000000 0007ffff 00000000 00000000     ................
    d254:	80000000 0007ffff 00000000 00000000     ................
    d264:	00000000 0003ffff 00000000 00000000     ................
    d274:	00000000 0003ffff 00000000 00000000     ................
    d284:	00000000 0003ffff 00000000 00000000     ................
    d294:	00000000 0001fffe 00000000 00000000     ................
    d2a4:	00000000 0001fffe 00000000 00000000     ................
    d2b4:	00000000 0000fffc 00000000 00000000     ................
    d2c4:	00000000 0000fffc 00000000 00000000     ................
    d2d4:	00000000 00007ff8 00000000 00000000     ................
    d2e4:	00000000 00007ff8 00000000 00000000     ................
	...
    d344:	0003c000 00000000 00000000 00000000     ................
    d354:	0003fc00 00000000 00000000 00000000     ................
    d364:	0003ff00 00000000 00000000 00000000     ................
    d374:	0003ffc0 00000000 00000000 00000000     ................
    d384:	0003ffe0 00000000 00000000 00000000     ................
    d394:	0003fff0 00000000 00000000 00000000     ................
    d3a4:	0003fff8 00000000 00000000 00000000     ................
    d3b4:	0003fffc 00000000 00000000 00000000     ................
    d3c4:	0003fffc 00000000 00000000 00000000     ................
    d3d4:	0003fffe 00000000 00000000 00000000     ................
    d3e4:	0003ffff 00000000 00000000 00000000     ................
    d3f4:	0003ffff 00000000 00000000 00000000     ................
    d404:	0003ffff 00000000 00000000 80000000     ................
    d414:	0003ffff 00000000 00000000 80000000     ................
    d424:	0001ffff e0000000 0000000f 80000000     ................
    d434:	00001fff f801fc00 0000003f 80000000     ........?.......
    d444:	00000fff f801ffc0 0000007f c0000000     ................
    d454:	000007ff fc01fff0 0000007f c0000000     ................
    d464:	000003ff fe01fff8 000000ff c0000000     ................
    d474:	000003ff fe01fffe 000000ff c0000000     ................
    d484:	000001ff fe01ffff 000000ff c0000000     ................
    d494:	800001ff fe01ffff 000000ff c0000000     ................
    d4a4:	c00001ff fe01ffff 000000ff c0000000     ................
    d4b4:	e00001ff fe01ffff 000000ff c0000000     ................
    d4c4:	f00001ff fe01ffff 000000ff c0000000     ................
    d4d4:	f80001ff fc01ffff 0000007f c0000000     ................
    d4e4:	fc0003ff fc01ffff 0000007f c0000000     ................
    d4f4:	fe0003ff f801ffff 0000003f c0000000     ........?.......
    d504:	ff0007ff e00007ff 0000000f 80000000     ................
    d514:	ffc01fff 000001ff 00000001 80000000     ................
    d524:	ffffffff 0000007f 00000000 80000000     ................
    d534:	ffffffff 0000003f 00000000 80000000     ....?...........
    d544:	ffffffff 0000001f 00000000 00000000     ................
    d554:	ffffffff 0000000f 00000000 00000000     ................
    d564:	ffffffff 00000007 00000000 00000000     ................
    d574:	fffffffe 00000003 00000000 00000000     ................
    d584:	fffffffe 00000001 00000000 00000000     ................
    d594:	fffffffc 00000000 00000000 00000000     ................
    d5a4:	7ffffff8 00000000 00000000 00000000     ................
    d5b4:	3ffffff0 00000000 00000000 00000000     ...?............
    d5c4:	1fffffe0 00000000 00000000 00000000     ................
    d5d4:	07ffffc0 00000000 00000000 00000000     ................
    d5e4:	03ffff00 00000000 00000000 00000000     ................
    d5f4:	007ffc00 00000000 00000000 00000000     ................
    d604:	00070000 00000000 00000000 00000000     ................
	...
    d688:	07fff800 00000000 00000000 00000000     ................
    d698:	ffffffe0 00000001 00000000 00000000     ................
    d6a8:	fffffffe 0000000f 00000000 c0000000     ................
    d6b8:	ffffffff 0000007f 00000000 f8000000     ................
    d6c8:	ffffffff 000001ff 00000000 fe000000     ................
    d6d8:	ffffffff 000007ff 00000000 ff800000     ................
    d6e8:	ffffffff 00001fff 00000000 ffe00000     ................
    d6f8:	ffffffff 00003fff 00000000 fff00000     .....?..........
    d708:	ffffffff 0000ffff 00000000 fffc0000     ................
    d718:	ffffffff 0001ffff 00000000 fffe0000     ................
    d728:	e00001ff 0003ffff 00000000 ffff0000     ................
    d738:	0000000f 0007fffe 00000000 ffff8000     ................
    d748:	00000001 000ffff0 00000000 3fffe000     ...............?
    d758:	00000000 001fffc0 00000000 0ffff000     ................
    d768:	00000000 003fff00 00000000 03fff800     ......?.........
    d778:	00000000 003ffc00 00000000 00fff800     ......?.........
    d788:	00000000 007ff800 00000000 007ffc00     ................
    d798:	00000000 00fff000 00000000 001ffe00     ................
    d7a8:	00000000 00ffe000 00000000 000fff00     ................
    d7b8:	00000000 01ffc000 00000000 0007ff00     ................
    d7c8:	00000000 01ff8000 00000000 0003ff80     ................
    d7d8:	01fc0000 03ff0000 00000000 0001ffc0     ................
    d7e8:	3ffff000 03fe0000 00000000 0000ffc0     ...?............
    d7f8:	ffffff00 03fe0000 00000000 00007fe0     ................
    d808:	ffffffc0 07fc0003 00000000 00003fe0     .............?..
    d818:	fffffff0 07fc0007 00000000 00003ff0     .............?..
    d828:	fffffffc 07f8000f 00000000 00001ff0     ................
    d838:	ffffffff 0ff8001f 00000000 80001ff0     ................
    d848:	ffffffff 0ff8003f 00000000 e0000ff8     ....?...........
    d858:	ffffffff 0ff0007f 00000000 f0000ff8     ................
    d868:	ffffffff 0ff0007f 00000000 f80007f8     ................
    d878:	ffffffff 0ff0007f 00000000 fc0007fc     ................
    d888:	ff03ffff 1ff000ff 00000000 fc0003fc     ................
    d898:	f00007ff 1fe000ff 00000000 fe0003fc     ................
    d8a8:	c00000ff 1fe000ff 00000000 ff0003fc     ................
    d8b8:	8000001f 1fe000ff 00000000 ff0003fc     ................
    d8c8:	80000007 1fe000ff 00000000 ff8001fe     ................
    d8d8:	00000003 1fe000ff 00000000 ff8001fe     ................
    d8e8:	00000001 1fe000ff 00000000 ff8001fe     ................
    d8f8:	00000000 1fe000ff 00000000 7fc001fe     ................
    d908:	00000000 1fe0007f 00000000 7fc001fe     ................
    d918:	80000000 1fe0007f 00000000 3fc001fe     ...............?
    d928:	80000000 1fe0007f 00000000 3fc001fe     ...............?
    d938:	c0000000 1fe0003f 00000000 3fc001fe     ....?..........?
    d948:	e0000000 1fe0001f 00000000 3fc001fe     ...............?
    d958:	f8000000 1fe0001f 00000000 3fc001fe     ...............?
    d968:	fe000000 1ff0000f 00000000 3fc001fe     ...............?
    d978:	fff00000 0ff00007 00000000 3fc001fe     ...............?
    d988:	ffffff00 0ff00003 00000000 ffc001fe     ................
    d998:	ffffffff 0ff00007 00000000 ff8003fe     ................
    d9a8:	ffffffff 0ff0000f 00000000 ff8003fc     ................
    d9b8:	ffffffff 0ff8001f 00000000 ff8003fc     ................
    d9c8:	ffffffff 07f8003f 00000000 ff0003fc     ....?...........
    d9d8:	ffffffff 07f8007f 00000000 ff0007fc     ................
    d9e8:	ffffffff 07fc007f 00000000 fe0007fc     ................
    d9f8:	ffffffff 03fc007f 00000000 fe0007f8     ................
    da08:	ffffffff 03fc00ff 00000000 fc000ff8     ................
    da18:	c00fffff 01c000ff 00000000 f8000ff8     ................
    da28:	000001ff 000000ff 00000000 18001ff0     ................
    da38:	00000000 000000ff 00000000 00001ff0     ................
    da48:	00000000 000000fe 00000000 00003fe0     .............?..
    da58:	00000000 000000fe 00000000 00007fe0     ................
    da68:	00000000 000000fe 00000000 0000ffc0     ................
    da78:	00000000 000000fe 00000000 0000ffc0     ................
    da88:	00000000 000000fe 00000000 0003ff80     ................
    da98:	00000000 000000ff 00000000 0007ff80     ................
    daa8:	00000000 0000007f 00000000 000fff00     ................
    dab8:	80000000 0000007f 00000000 003ffe00     ..............?.
    dac8:	c0000000 0000007f 00000000 007ffc00     ................
    dad8:	f0000000 0000003f 00000000 03fff800     ....?...........
    dae8:	fc000000 0000003f 00000000 0ffff000     ....?...........
    daf8:	ff000000 0000001f 00000000 ffffe000     ................
    db08:	fff00001 0000000f 00000000 ffffc000     ................
    db18:	ffffffff 00000007 00000000 ffff8000     ................
    db28:	ffffffff 00000003 00000000 fffe0000     ................
    db38:	ffffffff 00000001 00000000 fffc0000     ................
    db48:	ffffffff 00000000 00000000 fff00000     ................
    db58:	3fffffff 00000000 00000000 ffc00000     ...?............
    db68:	0fffffff 00000000 00000000 fe000000     ................
    db78:	03ffffff 00000000 00000000 f0000000     ................
    db88:	007fffff 00000000 00000000 00000000     ................
    db98:	0003fffe 00000000 00000000 00000000     ................
	...
    dbec:	00000040 00000000 00000000 00000000     @...............
    dbfc:	00000070 00000000 00000000 00000000     p...............
    dc0c:	0000007e 00000000 00000000 c0000000     ~...............
    dc1c:	0000007f 00000000 00000000 f0000000     ................
    dc2c:	0000007f 00000000 00000000 fe000000     ................
    dc3c:	0000007f 00000000 00000000 ffc00000     ................
    dc4c:	0000007f 00000000 00000000 fff00000     ................
    dc5c:	0000007f 00000000 00000000 fffe0000     ................
    dc6c:	0000007f 00000000 00000000 ffffc000     ................
    dc7c:	0000007f 00000000 00000000 fffff000     ................
    dc8c:	0000007f 00000000 00000000 fffffe00     ................
    dc9c:	0000007f 00000000 00000000 ffffffc0     ................
    dcac:	0000007f 00000000 00000000 fffffff0     ................
    dcbc:	0000007f 00000000 00000000 fffffffe     ................
    dccc:	0000007f 00000000 c0000000 ffffffff     ................
    dcdc:	0000007f 00000000 f8000000 ffffffff     ................
    dcec:	0000003f 00000000 fe000000 ffffffff     ?...............
    dcfc:	00000003 00000000 ffc00000 7fffffff     ................
	...
    dd14:	fff80000 0fffffff 00000000 00000000     ................
    dd24:	fffe0000 01ffffff 00000000 00000000     ................
    dd34:	ffffc000 007fffff 00000000 00000000     ................
    dd44:	fffff800 007fffff 00000000 00000000     ................
    dd54:	fffffe00 007fffff 00000000 00000000     ................
    dd64:	ffffffc0 007fffff 00000000 00000000     ................
    dd74:	fffffff8 007ff7ff 00000000 00000000     ................
    dd84:	fffffffe 007ff0ff 00000000 80000000     ................
    dd94:	ffffffff 007ff01f 00000000 80000000     ................
    dda4:	ffffffff 007ff003 00000000 80000000     ................
    ddb4:	7fffffff 007ff000 00000000 80000000     ................
    ddc4:	0fffffff 007ff000 00000000 80000000     ................
    ddd4:	01ffffff 007ff000 00000000 80000000     ................
    dde4:	003fffff 007ff000 00000000 80000000     ..?.............
    ddf4:	0007ffff 007ff000 00000000 80000000     ................
    de04:	0007ffff 007ff000 00000000 80000000     ................
    de14:	003fffff 007ff000 00000000 80000000     ..?.............
    de24:	01ffffff 007ff000 00000000 80000000     ................
    de34:	0fffffff 007ff000 00000000 80000000     ................
    de44:	7fffffff 007ff000 00000000 80000000     ................
    de54:	ffffffff 007ff003 00000000 80000000     ................
    de64:	ffffffff 007ff01f 00000000 00000000     ................
    de74:	fffffffe 007ff0ff 00000000 00000000     ................
    de84:	fffffff0 007ff7ff 00000000 00000000     ................
    de94:	ffffffc0 007fffff 00000000 00000000     ................
    dea4:	fffffe00 007fffff 00000000 00000000     ................
    deb4:	fffff000 007fffff 00000000 00000000     ................
    dec4:	ffffc000 007fffff 00000000 00000000     ................
    ded4:	fffe0000 01ffffff 00000000 00000000     ................
    dee4:	fff00000 0fffffff 00000000 00000000     ................
    def4:	ffc00000 7fffffff 00000000 00000000     ................
    df04:	fe000000 ffffffff 00000003 00000000     ................
    df14:	f0000000 ffffffff 0000003f 00000000     ........?.......
    df24:	c0000000 ffffffff 0000007f 00000000     ................
    df34:	00000000 fffffffe 0000007f 00000000     ................
    df44:	00000000 fffffff0 0000007f 00000000     ................
    df54:	00000000 ffffffc0 0000007f 00000000     ................
    df64:	00000000 fffffe00 0000007f 00000000     ................
    df74:	00000000 fffff000 0000007f 00000000     ................
    df84:	00000000 ffffc000 0000007f 00000000     ................
    df94:	00000000 fffe0000 0000007f 00000000     ................
    dfa4:	00000000 fff00000 0000007f 00000000     ................
    dfb4:	00000000 ff800000 0000007f 00000000     ................
    dfc4:	00000000 fe000000 0000007f 00000000     ................
    dfd4:	00000000 f0000000 0000007f 00000000     ................
    dfe4:	00000000 80000000 0000007f 00000000     ................
	...
    dffc:	0000007e 00000000 00000000 00000000     ~...............
    e00c:	00000070 00000000 00000000 00000000     p...............
    e01c:	00000040 00000000 00000000 00000000     @...............
	...
    e080:	80000000 ffffffff ffffffff 0000007f     ................
    e090:	80000000 ffffffff ffffffff 0000007f     ................
    e0a0:	80000000 ffffffff ffffffff 0000007f     ................
    e0b0:	80000000 ffffffff ffffffff 0000007f     ................
    e0c0:	80000000 ffffffff ffffffff 0000007f     ................
    e0d0:	80000000 ffffffff ffffffff 0000007f     ................
    e0e0:	80000000 ffffffff ffffffff 0000007f     ................
    e0f0:	80000000 ffffffff ffffffff 0000007f     ................
    e100:	80000000 ffffffff ffffffff 0000007f     ................
    e110:	80000000 ffffffff ffffffff 0000007f     ................
    e120:	80000000 ffffffff ffffffff 0000007f     ................
    e130:	80000000 ffffffff ffffffff 0000007f     ................
    e140:	80000000 ffffffff ffffffff 0000007f     ................
    e150:	80000000 ffffffff ffffffff 0000007f     ................
    e160:	80000000 ffffffff ffffffff 0000007f     ................
    e170:	80000000 e00003ff f00000ff 0000007f     ................
    e180:	80000000 e00003ff f00000ff 0000007f     ................
    e190:	80000000 e00003ff f00000ff 0000007f     ................
    e1a0:	80000000 e00003ff f00000ff 0000007f     ................
    e1b0:	80000000 e00003ff f00000ff 0000007f     ................
    e1c0:	80000000 e00003ff f00000ff 0000007f     ................
    e1d0:	80000000 e00003ff f00000ff 0000007f     ................
    e1e0:	80000000 e00003ff f00000ff 0000007f     ................
    e1f0:	80000000 e00003ff f00000ff 0000007f     ................
    e200:	80000000 e00003ff f00000ff 0000007f     ................
    e210:	80000000 e00003ff f00000ff 0000007f     ................
    e220:	80000000 e00003ff f00000ff 0000007f     ................
    e230:	80000000 e00003ff f00000ff 0000007f     ................
    e240:	80000000 e00003ff f00000ff 0000007f     ................
    e250:	80000000 e00003ff f00000ff 0000007f     ................
    e260:	80000000 f00007ff f00000ff 0000007f     ................
    e270:	80000000 f00007ff f00000ff 0000007f     ................
    e280:	80000000 f00007ff f80001ff 0000007f     ................
    e290:	00000000 f8000fff f80001ff 0000007f     ................
    e2a0:	00000000 fc000fff fc0001ff 0000007f     ................
    e2b0:	00000000 fe003fff fc0003ff 0000003f     .....?......?...
    e2c0:	00000000 ff807fff fe0007ff 0000003f     ............?...
    e2d0:	00000000 ffffffff ff800fff 0000003f     ............?...
    e2e0:	00000000 fffffffe ffe07fff 0000003f     ............?...
    e2f0:	00000000 fffffffe ffffffff 0000001f     ................
    e300:	00000000 fffffffe ffffffff 0000001f     ................
    e310:	00000000 fffffffc ffffffff 0000001f     ................
    e320:	00000000 fffffffc ffffffff 0000000f     ................
    e330:	00000000 fffffff8 fffffff9 0000000f     ................
    e340:	00000000 fffffff0 fffffff9 00000007     ................
    e350:	00000000 fffffff0 fffffff8 00000007     ................
    e360:	00000000 7fffffe0 fffffff0 00000003     ................
    e370:	00000000 3fffffc0 ffffffe0 00000001     .......?........
    e380:	00000000 1fffff80 ffffffc0 00000000     ................
    e390:	00000000 0ffffe00 7fffff80 00000000     ................
    e3a0:	00000000 03fff800 3fffff00 00000000     ...........?....
    e3b0:	00000000 007fc000 0ffffe00 00000000     ................
	...
    e3c8:	01fff000 00000000 00000000 00000000     ................
    e3d8:	00060000 00000000 00000000 00000000     ................
	...
    e464:	f8000000 000007ff 00000000 00000000     ................
    e474:	ffe00000 0001ffff 00000000 00000000     ................
    e484:	fffc0000 001fffff 00000000 00000000     ................
    e494:	ffff8000 007fffff 00000000 00000000     ................
    e4a4:	ffffe000 01ffffff 00000000 00000000     ................
    e4b4:	fffff800 07ffffff 00000000 00000000     ................
    e4c4:	fffffc00 1fffffff 00000000 00000000     ................
    e4d4:	ffffff00 3fffffff 00000000 00000000     .......?........
    e4e4:	ffffff80 7fffffff 00000000 00000000     ................
    e4f4:	ffffffc0 ffffffff 00000000 00000000     ................
    e504:	ffffffe0 ffffffff 00000001 00000000     ................
    e514:	fffffff0 ffffffff 00000003 00000000     ................
    e524:	fffffff8 ffffffff 00000007 00000000     ................
    e534:	fffffff8 ffffffff 00000007 00000000     ................
    e544:	fffffffc ffffffff 0000000f 00000000     ................
    e554:	07fffffc fffff000 0000001f 00000000     ................
    e564:	001ffffe fffe0000 0000001f 00000000     ................
    e574:	0003fffe fff00000 0000003f 00000000     ........?.......
    e584:	0000ffff ffc00000 0000003f 00000000     ........?.......
    e594:	00007fff ff000000 0000003f 80000000     ........?.......
    e5a4:	00003fff fe000000 0000007f 80000000     .?..............
    e5b4:	00001fff fc000000 0000007f 80000000     ................
    e5c4:	00000fff fc000000 0000007f 80000000     ................
    e5d4:	000007ff f8000000 0000007f c0000000     ................
    e5e4:	000007ff f8000000 000000ff c0000000     ................
    e5f4:	000007ff f8000000 000000ff c0000000     ................
    e604:	000003ff f0000000 000000ff c0000000     ................
    e614:	000003ff f0000000 000000ff c0000000     ................
    e624:	000003ff f0000000 000000ff c0000000     ................
    e634:	000003ff f0000000 000000ff c0000000     ................
    e644:	000003ff f0000000 000000ff c0000000     ................
    e654:	000003ff f0000000 000000ff c0000000     ................
    e664:	000003ff f0000000 000000ff c0000000     ................
    e674:	000003ff f0000000 000000ff c0000000     ................
    e684:	000003ff f0000000 000000ff c0000000     ................
    e694:	000007ff f8000000 000000ff c0000000     ................
    e6a4:	000007ff f8000000 0000007f 80000000     ................
    e6b4:	000007ff f8000000 0000007f 80000000     ................
    e6c4:	00000fff fc000000 0000007f 80000000     ................
    e6d4:	00001fff fe000000 0000007f 80000000     ................
    e6e4:	00001fff ff000000 0000007f 00000000     ................
    e6f4:	00007fff ff800000 0000003f 00000000     ........?.......
    e704:	0000ffff ffe00000 0000003f 00000000     ........?.......
    e714:	0007fffe fffc0000 0000003f 00000000     ........?.......
    e724:	007ffffe ffff8000 0000001f 00000000     ................
    e734:	007ffffe ffff8000 0000001f 00000000     ................
    e744:	007ffffc ffff8000 0000000f 00000000     ................
    e754:	007ffff8 ffff8000 00000007 00000000     ................
    e764:	007ffff8 ffff8000 00000007 00000000     ................
    e774:	007ffff0 ffff8000 00000003 00000000     ................
    e784:	007fffe0 ffff8000 00000001 00000000     ................
    e794:	007fffc0 ffff8000 00000000 00000000     ................
    e7a4:	007fff80 7fff8000 00000000 00000000     ................
    e7b4:	007fff00 3fff8000 00000000 00000000     .......?........
    e7c4:	007ffc00 1fff8000 00000000 00000000     ................
    e7d4:	007ff800 07ff8000 00000000 00000000     ................
    e7e4:	007fc000 01ff8000 00000000 00000000     ................
    e7f4:	007f0000 003f8000 00000000 00000000     ......?.........
    e804:	00600000 00038000 00000000 00000000     ..`.............
	...
    e8a0:	80000000 ffffffff ffffffff 0000007f     ................
    e8b0:	80000000 ffffffff ffffffff 0000007f     ................
    e8c0:	80000000 ffffffff ffffffff 0000007f     ................
    e8d0:	80000000 ffffffff ffffffff 0000007f     ................
    e8e0:	80000000 ffffffff ffffffff 0000007f     ................
    e8f0:	80000000 ffffffff ffffffff 0000007f     ................
    e900:	80000000 ffffffff ffffffff 0000007f     ................
    e910:	80000000 ffffffff ffffffff 0000007f     ................
    e920:	80000000 ffffffff ffffffff 0000007f     ................
    e930:	80000000 ffffffff ffffffff 0000007f     ................
    e940:	80000000 ffffffff ffffffff 0000007f     ................
    e950:	80000000 ffffffff ffffffff 0000007f     ................
    e960:	80000000 ffffffff ffffffff 0000007f     ................
    e970:	80000000 ffffffff ffffffff 0000007f     ................
    e980:	80000000 ffffffff ffffffff 0000007f     ................
    e990:	80000000 000003ff f0000000 0000007f     ................
    e9a0:	80000000 000003ff f0000000 0000007f     ................
    e9b0:	80000000 000003ff f0000000 0000007f     ................
    e9c0:	80000000 000003ff f0000000 0000007f     ................
    e9d0:	80000000 000003ff f0000000 0000007f     ................
    e9e0:	80000000 000003ff f0000000 0000007f     ................
    e9f0:	80000000 000003ff f0000000 0000007f     ................
    ea00:	80000000 000003ff f0000000 0000007f     ................
    ea10:	80000000 000003ff f0000000 0000007f     ................
    ea20:	80000000 000003ff f0000000 0000007f     ................
    ea30:	80000000 000003ff f0000000 0000007f     ................
    ea40:	80000000 000003ff f0000000 0000007f     ................
    ea50:	80000000 000007ff f8000000 0000007f     ................
    ea60:	80000000 000007ff f8000000 0000007f     ................
    ea70:	00000000 000007ff f8000000 0000003f     ............?...
    ea80:	00000000 00000fff fc000000 0000003f     ............?...
    ea90:	00000000 00000fff fc000000 0000003f     ............?...
    eaa0:	00000000 00001fff fe000000 0000003f     ............?...
    eab0:	00000000 00003ffe ff000000 0000001f     .....?..........
    eac0:	00000000 00003ffe ff800000 0000001f     .....?..........
    ead0:	00000000 0000fffe ffc00000 0000001f     ................
    eae0:	00000000 0001fffc ffe00000 0000000f     ................
    eaf0:	00000000 0007fffc fff80000 0000000f     ................
    eb00:	00000000 001ffff8 fffe0000 00000007     ................
    eb10:	00000000 01fffff8 ffffe000 00000007     ................
    eb20:	00000000 fffffff0 ffffffff 00000003     ................
    eb30:	00000000 ffffffe0 ffffffff 00000001     ................
    eb40:	00000000 ffffffe0 ffffffff 00000001     ................
    eb50:	00000000 ffffffc0 ffffffff 00000000     ................
    eb60:	00000000 ffffff80 7fffffff 00000000     ................
    eb70:	00000000 ffffff00 3fffffff 00000000     ...........?....
    eb80:	00000000 fffffe00 1fffffff 00000000     ................
    eb90:	00000000 fffffc00 0fffffff 00000000     ................
    eba0:	00000000 fffff800 07ffffff 00000000     ................
    ebb0:	00000000 ffffe000 01ffffff 00000000     ................
    ebc0:	00000000 ffffc000 00ffffff 00000000     ................
    ebd0:	00000000 ffff0000 003fffff 00000000     ..........?.....
    ebe0:	00000000 fffc0000 000fffff 00000000     ................
    ebf0:	00000000 ffe00000 0001ffff 00000000     ................
    ec00:	00000000 fe000000 00001fff 00000000     ................
	...
    ecc0:	80000000 ffffffff ffffffff 0000007f     ................
    ecd0:	80000000 ffffffff ffffffff 0000007f     ................
    ece0:	80000000 ffffffff ffffffff 0000007f     ................
    ecf0:	80000000 ffffffff ffffffff 0000007f     ................
    ed00:	80000000 ffffffff ffffffff 0000007f     ................
    ed10:	80000000 ffffffff ffffffff 0000007f     ................
    ed20:	80000000 ffffffff ffffffff 0000007f     ................
    ed30:	80000000 ffffffff ffffffff 0000007f     ................
    ed40:	80000000 ffffffff ffffffff 0000007f     ................
    ed50:	80000000 ffffffff ffffffff 0000007f     ................
    ed60:	80000000 ffffffff ffffffff 0000007f     ................
    ed70:	80000000 ffffffff ffffffff 0000007f     ................
    ed80:	80000000 ffffffff ffffffff 0000007f     ................
    ed90:	80000000 ffffffff ffffffff 0000007f     ................
    eda0:	80000000 ffffffff ffffffff 0000007f     ................
    edb0:	80000000 f00003ff f000007f 0000007f     ................
    edc0:	80000000 f00003ff f000007f 0000007f     ................
    edd0:	80000000 f00003ff f000007f 0000007f     ................
    ede0:	80000000 f00003ff f000007f 0000007f     ................
    edf0:	80000000 f00003ff f000007f 0000007f     ................
    ee00:	80000000 f00003ff f000007f 0000007f     ................
    ee10:	80000000 f00003ff f000007f 0000007f     ................
    ee20:	80000000 f00003ff f000007f 0000007f     ................
    ee30:	80000000 f00003ff f000007f 0000007f     ................
    ee40:	80000000 f00003ff f000007f 0000007f     ................
    ee50:	80000000 f00003ff f000007f 0000007f     ................
    ee60:	80000000 f00003ff f000007f 0000007f     ................
    ee70:	80000000 f00003ff f000007f 0000007f     ................
    ee80:	80000000 f00003ff f000007f 0000007f     ................
    ee90:	80000000 f00003ff f000007f 0000007f     ................
    eea0:	80000000 f00003ff f000007f 0000007f     ................
    eeb0:	80000000 f00003ff f000007f 0000007f     ................
    eec0:	80000000 f00003ff f000007f 0000007f     ................
    eed0:	80000000 f00003ff f000007f 0000007f     ................
    eee0:	80000000 f00003ff f000007f 0000007f     ................
    eef0:	80000000 f00003ff f000007f 0000007f     ................
    ef00:	80000000 f00003ff f000007f 0000007f     ................
    ef10:	80000000 f00003ff f000007f 0000007f     ................
    ef20:	80000000 f00003ff f000007f 0000007f     ................
    ef30:	80000000 f00003ff f000007f 0000007f     ................
    ef40:	80000000 f00003ff f000007f 0000007f     ................
    ef50:	80000000 f00003ff f000007f 0000007f     ................
    ef60:	80000000 f00003ff f000007f 0000007f     ................
    ef70:	80000000 f00003ff f000007f 0000007f     ................
    ef80:	80000000 000003ff f0000000 0000007f     ................
    ef90:	80000000 000003ff f0000000 0000007f     ................
    efa0:	80000000 000003ff f0000000 0000007f     ................
    efb0:	80000000 000003ff f0000000 0000007f     ................
	...
    efc8:	f0000000 0000007f 00000000 00000000     ................
	...
    f050:	80000000 ffffffff ffffffff 0000007f     ................
    f060:	80000000 ffffffff ffffffff 0000007f     ................
    f070:	80000000 ffffffff ffffffff 0000007f     ................
    f080:	80000000 ffffffff ffffffff 0000007f     ................
    f090:	80000000 ffffffff ffffffff 0000007f     ................
    f0a0:	80000000 ffffffff ffffffff 0000007f     ................
    f0b0:	80000000 ffffffff ffffffff 0000007f     ................
    f0c0:	80000000 ffffffff ffffffff 0000007f     ................
    f0d0:	80000000 ffffffff ffffffff 0000007f     ................
    f0e0:	80000000 ffffffff ffffffff 0000007f     ................
    f0f0:	80000000 ffffffff ffffffff 0000007f     ................
    f100:	80000000 ffffffff ffffffff 0000007f     ................
    f110:	80000000 ffffffff ffffffff 0000007f     ................
    f120:	80000000 ffffffff ffffffff 0000007f     ................
    f130:	80000000 ffffffff ffffffff 0000007f     ................
    f140:	80000000 c00003ff 000001ff 00000000     ................
    f150:	80000000 c00003ff 000001ff 00000000     ................
    f160:	80000000 c00003ff 000001ff 00000000     ................
    f170:	80000000 c00003ff 000001ff 00000000     ................
    f180:	80000000 c00003ff 000001ff 00000000     ................
    f190:	80000000 c00003ff 000001ff 00000000     ................
    f1a0:	80000000 c00003ff 000001ff 00000000     ................
    f1b0:	80000000 c00003ff 000001ff 00000000     ................
    f1c0:	80000000 c00003ff 000001ff 00000000     ................
    f1d0:	80000000 c00003ff 000001ff 00000000     ................
    f1e0:	80000000 c00003ff 000001ff 00000000     ................
    f1f0:	80000000 c00003ff 000001ff 00000000     ................
    f200:	80000000 c00003ff 000001ff 00000000     ................
    f210:	80000000 c00003ff 000001ff 00000000     ................
    f220:	80000000 c00003ff 000001ff 00000000     ................
    f230:	80000000 c00003ff 000001ff 00000000     ................
    f240:	80000000 c00003ff 000001ff 00000000     ................
    f250:	80000000 c00003ff 000001ff 00000000     ................
    f260:	80000000 c00003ff 000001ff 00000000     ................
    f270:	80000000 c00003ff 000001ff 00000000     ................
    f280:	80000000 c00003ff 000001ff 00000000     ................
    f290:	80000000 c00003ff 000001ff 00000000     ................
    f2a0:	80000000 c00003ff 000001ff 00000000     ................
    f2b0:	80000000 c00003ff 000001ff 00000000     ................
    f2c0:	80000000 c00003ff 000001ff 00000000     ................
    f2d0:	80000000 c00003ff 000001ff 00000000     ................
    f2e0:	80000000 c00003ff 000001ff 00000000     ................
    f2f0:	80000000 c00003ff 000001ff 00000000     ................
    f300:	80000000 c00003ff 000001ff 00000000     ................
    f310:	80000000 000003ff 00000000 00000000     ................
    f320:	80000000 000003ff 00000000 00000000     ................
    f330:	80000000 000003ff 00000000 00000000     ................
	...
    f3b4:	ff000000 00003fff 00000000 00000000     .....?..........
    f3c4:	fff80000 0003ffff 00000000 00000000     ................
    f3d4:	ffff0000 001fffff 00000000 00000000     ................
    f3e4:	ffffc000 00ffffff 00000000 00000000     ................
    f3f4:	fffff000 03ffffff 00000000 00000000     ................
    f404:	fffffc00 07ffffff 00000000 00000000     ................
    f414:	fffffe00 1fffffff 00000000 00000000     ................
    f424:	ffffff00 3fffffff 00000000 00000000     .......?........
    f434:	ffffff80 7fffffff 00000000 00000000     ................
    f444:	ffffffc0 ffffffff 00000000 00000000     ................
    f454:	ffffffe0 ffffffff 00000001 00000000     ................
    f464:	fffffff0 ffffffff 00000003 00000000     ................
    f474:	fffffff8 ffffffff 00000007 00000000     ................
    f484:	fffffffc ffffffff 00000007 00000000     ................
    f494:	fffffffc ffffffff 0000000f 00000000     ................
    f4a4:	00fffffe ffffc000 0000000f 00000000     ................
    f4b4:	000ffffe fffc0000 0000001f 00000000     ................
    f4c4:	0001ffff fff00000 0000001f 00000000     ................
    f4d4:	00007fff ffc00000 0000003f 00000000     ........?.......
    f4e4:	00003fff ff000000 0000003f 80000000     .?......?.......
    f4f4:	00001fff fe000000 0000007f 80000000     ................
    f504:	00000fff fc000000 0000007f 80000000     ................
    f514:	000007ff fc000000 0000007f 80000000     ................
    f524:	000007ff f8000000 0000007f c0000000     ................
    f534:	000003ff f0000000 0000007f c0000000     ................
    f544:	000003ff f0000000 000000ff c0000000     ................
    f554:	000001ff f0000000 000000ff c0000000     ................
    f564:	000001ff e0000000 000000ff c0000000     ................
    f574:	000001ff e0000000 000000ff c0000000     ................
    f584:	000001ff e0000000 000000ff c0000000     ................
    f594:	000001ff e0000ffe 000000ff c0000000     ................
    f5a4:	000001ff e0000ffe 000000ff c0000000     ................
    f5b4:	000001ff e0000ffe 000000ff c0000000     ................
    f5c4:	000001ff e0000ffe 000000ff c0000000     ................
    f5d4:	000001ff e0000ffe 000000ff c0000000     ................
    f5e4:	000003ff e0000ffe 000000ff c0000000     ................
    f5f4:	000003ff e0000ffe 000000ff 80000000     ................
    f604:	000007ff f0000ffe 000000ff 80000000     ................
    f614:	000007ff f0000ffe 0000007f 80000000     ................
    f624:	00000fff f0000ffe 0000007f 80000000     ................
    f634:	00001fff f8000ffe 0000007f 00000000     ................
    f644:	00003fff f8000ffe 0000007f 00000000     .?..............
    f654:	0000ffff fc000ffe 0000007f 00000000     ................
    f664:	0007ffff fe000ffe 0000003f 00000000     ........?.......
    f674:	003ffffe fffffffe 0000003f 00000000     ..?.....?.......
    f684:	003ffffe fffffffe 0000003f 00000000     ..?.....?.......
    f694:	003ffffc fffffffe 0000003f 00000000     ..?.....?.......
    f6a4:	003ffffc fffffffe 0000001f 00000000     ..?.............
    f6b4:	003ffff8 fffffffe 0000001f 00000000     ..?.............
    f6c4:	003ffff0 fffffffe 0000000f 00000000     ..?.............
    f6d4:	003fffe0 fffffffe 0000000f 00000000     ..?.............
    f6e4:	003fffc0 fffffffe 00000007 00000000     ..?.............
    f6f4:	003fff80 fffffffe 00000007 00000000     ..?.............
    f704:	003fff00 fffffffe 00000003 00000000     ..?.............
    f714:	003ffc00 fffffffe 00000001 00000000     ..?.............
    f724:	003ff800 fffffffe 00000001 00000000     ..?.............
    f734:	003fc000 fffffffe 00000000 00000000     ..?.............
    f744:	003e0000 7ffffffe 00000000 00000000     ..>.............
	...
    f810:	80000000 ffffffff ffffffff 0000007f     ................
    f820:	80000000 ffffffff ffffffff 0000007f     ................
    f830:	80000000 ffffffff ffffffff 0000007f     ................
    f840:	80000000 ffffffff ffffffff 0000007f     ................
    f850:	80000000 ffffffff ffffffff 0000007f     ................
    f860:	80000000 ffffffff ffffffff 0000007f     ................
    f870:	80000000 ffffffff ffffffff 0000007f     ................
    f880:	80000000 ffffffff ffffffff 0000007f     ................
    f890:	80000000 ffffffff ffffffff 0000007f     ................
    f8a0:	80000000 ffffffff ffffffff 0000007f     ................
    f8b0:	80000000 ffffffff ffffffff 0000007f     ................
    f8c0:	80000000 ffffffff ffffffff 0000007f     ................
    f8d0:	80000000 ffffffff ffffffff 0000007f     ................
    f8e0:	80000000 ffffffff ffffffff 0000007f     ................
    f8f0:	80000000 ffffffff ffffffff 0000007f     ................
    f900:	00000000 f0000000 0000007f 00000000     ................
    f910:	00000000 f0000000 0000007f 00000000     ................
    f920:	00000000 f0000000 0000007f 00000000     ................
    f930:	00000000 f0000000 0000007f 00000000     ................
    f940:	00000000 f0000000 0000007f 00000000     ................
    f950:	00000000 f0000000 0000007f 00000000     ................
    f960:	00000000 f0000000 0000007f 00000000     ................
    f970:	00000000 f0000000 0000007f 00000000     ................
    f980:	00000000 f0000000 0000007f 00000000     ................
    f990:	00000000 f0000000 0000007f 00000000     ................
    f9a0:	00000000 f0000000 0000007f 00000000     ................
    f9b0:	00000000 f0000000 0000007f 00000000     ................
    f9c0:	00000000 f0000000 0000007f 00000000     ................
    f9d0:	00000000 f0000000 0000007f 00000000     ................
    f9e0:	00000000 f0000000 0000007f 00000000     ................
    f9f0:	00000000 f0000000 0000007f 00000000     ................
    fa00:	00000000 f0000000 0000007f 00000000     ................
    fa10:	00000000 f0000000 0000007f 00000000     ................
    fa20:	00000000 f0000000 0000007f 00000000     ................
    fa30:	00000000 f0000000 0000007f 00000000     ................
    fa40:	00000000 f0000000 0000007f 00000000     ................
    fa50:	00000000 f0000000 0000007f 00000000     ................
    fa60:	00000000 f0000000 0000007f 00000000     ................
    fa70:	00000000 f0000000 0000007f 00000000     ................
    fa80:	00000000 f0000000 0000007f 00000000     ................
    fa90:	00000000 f0000000 0000007f 00000000     ................
    faa0:	00000000 f0000000 0000007f 00000000     ................
    fab0:	00000000 f0000000 0000007f 00000000     ................
    fac0:	00000000 f0000000 0000007f 00000000     ................
    fad0:	80000000 ffffffff ffffffff 0000007f     ................
    fae0:	80000000 ffffffff ffffffff 0000007f     ................
    faf0:	80000000 ffffffff ffffffff 0000007f     ................
    fb00:	80000000 ffffffff ffffffff 0000007f     ................
    fb10:	80000000 ffffffff ffffffff 0000007f     ................
    fb20:	80000000 ffffffff ffffffff 0000007f     ................
    fb30:	80000000 ffffffff ffffffff 0000007f     ................
    fb40:	80000000 ffffffff ffffffff 0000007f     ................
    fb50:	80000000 ffffffff ffffffff 0000007f     ................
    fb60:	80000000 ffffffff ffffffff 0000007f     ................
    fb70:	80000000 ffffffff ffffffff 0000007f     ................
    fb80:	80000000 ffffffff ffffffff 0000007f     ................
    fb90:	80000000 ffffffff ffffffff 0000007f     ................
    fba0:	80000000 ffffffff ffffffff 0000007f     ................
    fbb0:	80000000 ffffffff ffffffff 0000007f     ................
	...
    fc90:	80000000 ffffffff ffffffff 0000007f     ................
    fca0:	80000000 ffffffff ffffffff 0000007f     ................
    fcb0:	80000000 ffffffff ffffffff 0000007f     ................
    fcc0:	80000000 ffffffff ffffffff 0000007f     ................
    fcd0:	80000000 ffffffff ffffffff 0000007f     ................
    fce0:	80000000 ffffffff ffffffff 0000007f     ................
    fcf0:	80000000 ffffffff ffffffff 0000007f     ................
    fd00:	80000000 ffffffff ffffffff 0000007f     ................
    fd10:	80000000 ffffffff ffffffff 0000007f     ................
    fd20:	80000000 ffffffff ffffffff 0000007f     ................
    fd30:	80000000 ffffffff ffffffff 0000007f     ................
    fd40:	80000000 ffffffff ffffffff 0000007f     ................
    fd50:	80000000 ffffffff ffffffff 0000007f     ................
    fd60:	80000000 ffffffff ffffffff 0000007f     ................
    fd70:	80000000 ffffffff ffffffff 0000007f     ................
	...
    fe18:	01f80000 00000000 00000000 00000000     ................
    fe28:	0ff80000 00000000 00000000 00000000     ................
    fe38:	3ff80000 00000000 00000000 00000000     ...?............
    fe48:	fff80000 00000000 00000000 00000000     ................
    fe58:	fff80000 00000001 00000000 00000000     ................
    fe68:	fff80000 00000003 00000000 00000000     ................
    fe78:	fff80000 00000007 00000000 00000000     ................
    fe88:	fff80000 0000000f 00000000 00000000     ................
    fe98:	fff80000 0000000f 00000000 00000000     ................
    fea8:	fff80000 0000001f 00000000 00000000     ................
    feb8:	fff80000 0000001f 00000000 00000000     ................
    fec8:	fff80000 0000003f 00000000 00000000     ....?...........
    fed8:	fff80000 0000003f 00000000 00000000     ....?...........
    fee8:	fff80000 0000007f 00000000 00000000     ................
    fef8:	fff80000 0000007f 00000000 00000000     ................
    ff08:	ff000000 0000007f 00000000 00000000     ................
    ff18:	fc000000 0000007f 00000000 00000000     ................
    ff28:	f8000000 000000ff 00000000 00000000     ................
    ff38:	f0000000 000000ff 00000000 00000000     ................
    ff48:	f0000000 000000ff 00000000 00000000     ................
    ff58:	e0000000 000000ff 00000000 00000000     ................
    ff68:	e0000000 000000ff 00000000 00000000     ................
    ff78:	e0000000 000000ff 00000000 00000000     ................
    ff88:	e0000000 000000ff 00000000 00000000     ................
    ff98:	e0000000 000000ff 00000000 00000000     ................
    ffa8:	e0000000 000000ff 00000000 00000000     ................
    ffb8:	e0000000 000000ff 00000000 00000000     ................
    ffc8:	f0000000 000000ff 00000000 00000000     ................
    ffd8:	f0000000 000000ff 00000000 00000000     ................
    ffe8:	f8000000 0000007f 00000000 00000000     ................
    fff8:	fc000000 0000007f 00000000 00000000     ................
   10008:	fe000000 0000007f 00000000 00000000     ................
   10018:	ff800000 0000007f 80000000 ffffffff     ................
   10028:	ffffffff 0000003f 80000000 ffffffff     ....?...........
   10038:	ffffffff 0000003f 80000000 ffffffff     ....?...........
   10048:	ffffffff 0000003f 80000000 ffffffff     ....?...........
   10058:	ffffffff 0000001f 80000000 ffffffff     ................
   10068:	ffffffff 0000001f 80000000 ffffffff     ................
   10078:	ffffffff 0000000f 80000000 ffffffff     ................
   10088:	ffffffff 00000007 80000000 ffffffff     ................
   10098:	ffffffff 00000003 80000000 ffffffff     ................
   100a8:	ffffffff 00000001 80000000 ffffffff     ................
   100b8:	ffffffff 00000000 80000000 ffffffff     ................
   100c8:	7fffffff 00000000 80000000 ffffffff     ................
   100d8:	3fffffff 00000000 80000000 ffffffff     ...?............
   100e8:	0fffffff 00000000 80000000 ffffffff     ................
   100f8:	03ffffff 00000000 80000000 ffffffff     ................
   10108:	003fffff 00000000 00000000 00000000     ..?.............
	...
   101d0:	80000000 ffffffff ffffffff 0000007f     ................
   101e0:	80000000 ffffffff ffffffff 0000007f     ................
   101f0:	80000000 ffffffff ffffffff 0000007f     ................
   10200:	80000000 ffffffff ffffffff 0000007f     ................
   10210:	80000000 ffffffff ffffffff 0000007f     ................
   10220:	80000000 ffffffff ffffffff 0000007f     ................
   10230:	80000000 ffffffff ffffffff 0000007f     ................
   10240:	80000000 ffffffff ffffffff 0000007f     ................
   10250:	80000000 ffffffff ffffffff 0000007f     ................
   10260:	80000000 ffffffff ffffffff 0000007f     ................
   10270:	80000000 ffffffff ffffffff 0000007f     ................
   10280:	80000000 ffffffff ffffffff 0000007f     ................
   10290:	80000000 ffffffff ffffffff 0000007f     ................
   102a0:	80000000 ffffffff ffffffff 0000007f     ................
   102b0:	80000000 ffffffff ffffffff 0000007f     ................
   102c0:	00000000 80000000 0003ffff 00000000     ................
   102d0:	00000000 c0000000 0001ffff 00000000     ................
   102e0:	00000000 f0000000 0000ffff 00000000     ................
   102f0:	00000000 f8000000 00007fff 00000000     ................
   10300:	00000000 fc000000 00003fff 00000000     .........?......
   10310:	00000000 ff000000 00001fff 00000000     ................
   10320:	00000000 ff800000 00000fff 00000000     ................
   10330:	00000000 ffc00000 000003ff 00000000     ................
   10340:	00000000 fff00000 000007ff 00000000     ................
   10350:	00000000 fff80000 00001fff 00000000     ................
   10360:	00000000 fffc0000 00003fff 00000000     .........?......
   10370:	00000000 ffff0000 0000ffff 00000000     ................
   10380:	00000000 ffff8000 0001ffff 00000000     ................
   10390:	00000000 ffffc000 0007ffff 00000000     ................
   103a0:	00000000 ffffe000 001fffff 00000000     ................
   103b0:	00000000 fffff800 003fffff 00000000     ..........?.....
   103c0:	00000000 fffffc00 00ffffff 00000000     ................
   103d0:	00000000 fffffe00 01ffffff 00000000     ................
   103e0:	00000000 3fffff80 07ffffff 00000000     .......?........
   103f0:	00000000 1fffffc0 0ffffffc 00000000     ................
   10400:	00000000 07ffffe0 3ffffff8 00000000     ...........?....
   10410:	00000000 03fffff8 ffffffe0 00000000     ................
   10420:	00000000 01fffffc ffffffc0 00000001     ................
   10430:	00000000 00fffffe ffffff00 00000007     ................
   10440:	00000000 003fffff fffffe00 0000000f     ......?.........
   10450:	80000000 001fffff fffff800 0000003f     ............?...
   10460:	80000000 000fffff fffff000 0000007f     ................
   10470:	80000000 0007ffff ffffc000 0000007f     ................
   10480:	80000000 0001ffff ffff0000 0000007f     ................
   10490:	80000000 0000ffff fffe0000 0000007f     ................
   104a0:	80000000 00007fff fff80000 0000007f     ................
   104b0:	80000000 00003fff fff00000 0000007f     .....?..........
   104c0:	80000000 00000fff ffc00000 0000007f     ................
   104d0:	80000000 000007ff ff800000 0000007f     ................
   104e0:	80000000 000003ff fe000000 0000007f     ................
   104f0:	80000000 000001ff fc000000 0000007f     ................
   10500:	80000000 0000007f f0000000 0000007f     ................
   10510:	80000000 0000003f e0000000 0000007f     ....?...........
   10520:	80000000 0000001f 80000000 0000007f     ................
   10530:	80000000 0000000f 00000000 0000007f     ................
   10540:	80000000 00000003 00000000 0000007c     ............|...
   10550:	80000000 00000001 00000000 00000078     ............x...
   10560:	80000000 00000000 00000000 00000060     ............`...
	...
   105d0:	80000000 ffffffff ffffffff 0000007f     ................
   105e0:	80000000 ffffffff ffffffff 0000007f     ................
   105f0:	80000000 ffffffff ffffffff 0000007f     ................
   10600:	80000000 ffffffff ffffffff 0000007f     ................
   10610:	80000000 ffffffff ffffffff 0000007f     ................
   10620:	80000000 ffffffff ffffffff 0000007f     ................
   10630:	80000000 ffffffff ffffffff 0000007f     ................
   10640:	80000000 ffffffff ffffffff 0000007f     ................
   10650:	80000000 ffffffff ffffffff 0000007f     ................
   10660:	80000000 ffffffff ffffffff 0000007f     ................
   10670:	80000000 ffffffff ffffffff 0000007f     ................
   10680:	80000000 ffffffff ffffffff 0000007f     ................
   10690:	80000000 ffffffff ffffffff 0000007f     ................
   106a0:	80000000 ffffffff ffffffff 0000007f     ................
   106b0:	80000000 ffffffff ffffffff 0000007f     ................
	...
   106c8:	f0000000 0000007f 00000000 00000000     ................
   106d8:	f0000000 0000007f 00000000 00000000     ................
   106e8:	f0000000 0000007f 00000000 00000000     ................
   106f8:	f0000000 0000007f 00000000 00000000     ................
   10708:	f0000000 0000007f 00000000 00000000     ................
   10718:	f0000000 0000007f 00000000 00000000     ................
   10728:	f0000000 0000007f 00000000 00000000     ................
   10738:	f0000000 0000007f 00000000 00000000     ................
   10748:	f0000000 0000007f 00000000 00000000     ................
   10758:	f0000000 0000007f 00000000 00000000     ................
   10768:	f0000000 0000007f 00000000 00000000     ................
   10778:	f0000000 0000007f 00000000 00000000     ................
   10788:	f0000000 0000007f 00000000 00000000     ................
   10798:	f0000000 0000007f 00000000 00000000     ................
   107a8:	f0000000 0000007f 00000000 00000000     ................
   107b8:	f0000000 0000007f 00000000 00000000     ................
   107c8:	f0000000 0000007f 00000000 00000000     ................
   107d8:	f0000000 0000007f 00000000 00000000     ................
   107e8:	f0000000 0000007f 00000000 00000000     ................
   107f8:	f0000000 0000007f 00000000 00000000     ................
   10808:	f0000000 0000007f 00000000 00000000     ................
   10818:	f0000000 0000007f 00000000 00000000     ................
   10828:	f0000000 0000007f 00000000 00000000     ................
   10838:	f0000000 0000007f 00000000 00000000     ................
   10848:	f0000000 0000007f 00000000 00000000     ................
   10858:	f0000000 0000007f 00000000 00000000     ................
   10868:	f0000000 0000007f 00000000 00000000     ................
   10878:	f0000000 0000007f 00000000 00000000     ................
   10888:	f0000000 0000007f 00000000 00000000     ................
   10898:	f0000000 0000007f 00000000 00000000     ................
   108a8:	f0000000 0000007f 00000000 00000000     ................
   108b8:	f0000000 0000007f 00000000 00000000     ................
	...
   10940:	80000000 ffffffff ffffffff 0000007f     ................
   10950:	80000000 ffffffff ffffffff 0000007f     ................
   10960:	80000000 ffffffff ffffffff 0000007f     ................
   10970:	80000000 ffffffff ffffffff 0000007f     ................
   10980:	80000000 ffffffff ffffffff 0000007f     ................
   10990:	80000000 ffffffff ffffffff 0000007f     ................
   109a0:	80000000 ffffffff ffffffff 0000007f     ................
   109b0:	80000000 ffffffff ffffffff 0000007f     ................
   109c0:	80000000 ffffffff ffffffff 0000007f     ................
   109d0:	80000000 ffffffff ffffffff 0000007f     ................
   109e0:	80000000 ffffffff ffffffff 0000007f     ................
   109f0:	80000000 ffffffff ffffffff 0000007f     ................
   10a00:	80000000 ffffffff ffffffff 0000007f     ................
   10a10:	80000000 ffffffff ffffffff 0000007f     ................
   10a20:	80000000 000fffff fffffff8 0000007f     ................
   10a30:	80000000 003fffff 00000000 00000000     ......?.........
   10a40:	80000000 01ffffff 00000000 00000000     ................
   10a50:	80000000 0fffffff 00000000 00000000     ................
   10a60:	80000000 7fffffff 00000000 00000000     ................
   10a70:	80000000 ffffffff 00000001 00000000     ................
   10a80:	00000000 fffffffe 0000000f 00000000     ................
   10a90:	00000000 fffffff0 0000007f 00000000     ................
   10aa0:	00000000 ffffff80 000003ff 00000000     ................
   10ab0:	00000000 fffffc00 00000fff 00000000     ................
   10ac0:	00000000 fffff000 00007fff 00000000     ................
   10ad0:	00000000 ffff8000 0003ffff 00000000     ................
   10ae0:	00000000 fffc0000 001fffff 00000000     ................
   10af0:	00000000 ffe00000 00ffffff 00000000     ................
   10b00:	00000000 ff000000 03ffffff 00000000     ................
   10b10:	00000000 f8000000 1fffffff 00000000     ................
   10b20:	00000000 e0000000 ffffffff 00000000     ................
	...
   10b38:	ffffffff 00000007 00000000 00000000     ................
   10b48:	fffffff8 0000001f 00000000 00000000     ................
   10b58:	ffffffc0 0000007f 00000000 00000000     ................
   10b68:	fffffe00 0000007f 00000000 00000000     ................
   10b78:	fffff000 0000007f 00000000 00000000     ................
   10b88:	ffffc000 0000007f 00000000 00000000     ................
   10b98:	fffe0000 0000007f 00000000 00000000     ................
   10ba8:	fffc0000 0000007f 00000000 00000000     ................
   10bb8:	ffff8000 0000007f 00000000 00000000     ................
   10bc8:	ffffe000 0000007f 00000000 00000000     ................
   10bd8:	fffffc00 0000007f 00000000 00000000     ................
   10be8:	ffffff80 0000007f 00000000 00000000     ................
   10bf8:	fffffff0 0000003f 00000000 00000000     ....?...........
   10c08:	fffffffe 00000007 00000000 c0000000     ................
   10c18:	ffffffff 00000001 00000000 f0000000     ................
   10c28:	3fffffff 00000000 00000000 fe000000     ...?............
   10c38:	07ffffff 00000000 00000000 ffc00000     ................
   10c48:	00ffffff 00000000 00000000 fff80000     ................
   10c58:	003fffff 00000000 00000000 ffff0000     ..?.............
   10c68:	0007ffff 00000000 00000000 ffffe000     ................
   10c78:	0000ffff 00000000 00000000 fffffc00     ................
   10c88:	00001fff 00000000 00000000 ffffff00     ................
   10c98:	000007ff 00000000 00000000 ffffffe0     ................
   10ca8:	000000ff 00000000 00000000 fffffffc     ................
   10cb8:	0000001f 00000000 80000000 ffffffff     ................
   10cc8:	00000003 00000000 80000000 7fffffff     ................
	...
   10ce0:	80000000 1fffffff 00000000 00000000     ................
   10cf0:	80000000 03ffffff 00000000 00000000     ................
   10d00:	80000000 007fffff 00000000 00000000     ................
   10d10:	80000000 000fffff fffff800 0000007f     ................
   10d20:	80000000 fff3ffff ffffffff 0000007f     ................
   10d30:	80000000 ffffffff ffffffff 0000007f     ................
   10d40:	80000000 ffffffff ffffffff 0000007f     ................
   10d50:	80000000 ffffffff ffffffff 0000007f     ................
   10d60:	80000000 ffffffff ffffffff 0000007f     ................
   10d70:	80000000 ffffffff ffffffff 0000007f     ................
   10d80:	80000000 ffffffff ffffffff 0000007f     ................
   10d90:	80000000 ffffffff ffffffff 0000007f     ................
   10da0:	80000000 ffffffff ffffffff 0000007f     ................
   10db0:	80000000 ffffffff ffffffff 0000007f     ................
   10dc0:	80000000 ffffffff ffffffff 0000007f     ................
   10dd0:	80000000 ffffffff ffffffff 0000007f     ................
   10de0:	80000000 ffffffff ffffffff 0000007f     ................
   10df0:	80000000 ffffffff ffffffff 0000007f     ................
	...
   10ec0:	80000000 ffffffff ffffffff 0000007f     ................
   10ed0:	80000000 ffffffff ffffffff 0000007f     ................
   10ee0:	80000000 ffffffff ffffffff 0000007f     ................
   10ef0:	80000000 ffffffff ffffffff 0000007f     ................
   10f00:	80000000 ffffffff ffffffff 0000007f     ................
   10f10:	80000000 ffffffff ffffffff 0000007f     ................
   10f20:	80000000 ffffffff ffffffff 0000007f     ................
   10f30:	80000000 ffffffff ffffffff 0000007f     ................
   10f40:	80000000 ffffffff ffffffff 0000007f     ................
   10f50:	80000000 ffffffff ffffffff 0000007f     ................
   10f60:	80000000 ffffffff ffffffff 0000007f     ................
   10f70:	80000000 ffffffff ffffffff 0000007f     ................
   10f80:	80000000 ffffffff ffffffff 0000007f     ................
   10f90:	80000000 ffffffff ffffffff 0000007f     ................
   10fa0:	80000000 ffffffff ffffffff 0000007f     ................
   10fb0:	00000000 00ffffff 00000000 00000000     ................
   10fc0:	00000000 03fffffe 00000000 00000000     ................
   10fd0:	00000000 0ffffff8 00000000 00000000     ................
   10fe0:	00000000 1fffffe0 00000000 00000000     ................
   10ff0:	00000000 7fffffc0 00000000 00000000     ................
   11000:	00000000 ffffff00 00000001 00000000     ................
   11010:	00000000 fffffc00 00000003 00000000     ................
   11020:	00000000 fffff800 0000000f 00000000     ................
   11030:	00000000 ffffe000 0000003f 00000000     ........?.......
   11040:	00000000 ffff8000 0000007f 00000000     ................
   11050:	00000000 ffff0000 000001ff 00000000     ................
   11060:	00000000 fffc0000 000007ff 00000000     ................
   11070:	00000000 fff00000 00000fff 00000000     ................
   11080:	00000000 ffe00000 00003fff 00000000     .........?......
   11090:	00000000 ff800000 0000ffff 00000000     ................
   110a0:	00000000 fe000000 0001ffff 00000000     ................
   110b0:	00000000 fc000000 0007ffff 00000000     ................
   110c0:	00000000 f0000000 000fffff 00000000     ................
   110d0:	00000000 e0000000 003fffff 00000000     ..........?.....
   110e0:	00000000 80000000 00ffffff 00000000     ................
	...
   110f8:	01fffffe 00000000 00000000 00000000     ................
   11108:	07fffffc 00000000 00000000 00000000     ................
   11118:	1ffffff0 00000000 00000000 00000000     ................
   11128:	3fffffc0 00000000 00000000 00000000     ...?............
   11138:	ffffff80 00000000 00000000 00000000     ................
   11148:	fffffe00 00000003 00000000 00000000     ................
   11158:	fffff800 00000007 00000000 00000000     ................
   11168:	fffff000 0000001f 00000000 00000000     ................
   11178:	ffffc000 0000007f 80000000 ffffffff     ................
   11188:	ffffffff 0000007f 80000000 ffffffff     ................
   11198:	ffffffff 0000007f 80000000 ffffffff     ................
   111a8:	ffffffff 0000007f 80000000 ffffffff     ................
   111b8:	ffffffff 0000007f 80000000 ffffffff     ................
   111c8:	ffffffff 0000007f 80000000 ffffffff     ................
   111d8:	ffffffff 0000007f 80000000 ffffffff     ................
   111e8:	ffffffff 0000007f 80000000 ffffffff     ................
   111f8:	ffffffff 0000007f 80000000 ffffffff     ................
   11208:	ffffffff 0000007f 80000000 ffffffff     ................
   11218:	ffffffff 0000007f 80000000 ffffffff     ................
   11228:	ffffffff 0000007f 80000000 ffffffff     ................
   11238:	ffffffff 0000007f 80000000 ffffffff     ................
   11248:	ffffffff 0000007f 80000000 ffffffff     ................
   11258:	ffffffff 0000007f 80000000 ffffffff     ................
   11268:	ffffffff 0000007f 00000000 00000000     ................
	...
   11314:	e0000000 000000ff 00000000 00000000     ................
   11324:	ff800000 00007fff 00000000 00000000     ................
   11334:	fff80000 0007ffff 00000000 00000000     ................
   11344:	ffff0000 003fffff 00000000 00000000     ......?.........
   11354:	ffffc000 00ffffff 00000000 00000000     ................
   11364:	fffff000 03ffffff 00000000 00000000     ................
   11374:	fffff800 07ffffff 00000000 00000000     ................
   11384:	fffffe00 1fffffff 00000000 00000000     ................
   11394:	ffffff00 3fffffff 00000000 00000000     .......?........
   113a4:	ffffff80 7fffffff 00000000 00000000     ................
   113b4:	ffffffc0 ffffffff 00000000 00000000     ................
   113c4:	ffffffe0 ffffffff 00000001 00000000     ................
   113d4:	fffffff0 ffffffff 00000003 00000000     ................
   113e4:	fffffff8 ffffffff 00000007 00000000     ................
   113f4:	fffffff8 ffffffff 00000007 00000000     ................
   11404:	1ffffffc ffffff00 0000000f 00000000     ................
   11414:	007ffffe ffff8000 0000000f 00000000     ................
   11424:	000ffffe fffc0000 0000001f 00000000     ................
   11434:	0001ffff fff00000 0000001f 00000000     ................
   11444:	0000ffff ffc00000 0000003f 00000000     ........?.......
   11454:	00007fff ff800000 0000003f 80000000     ........?.......
   11464:	00001fff ff000000 0000007f 80000000     ................
   11474:	00001fff fe000000 0000007f 80000000     ................
   11484:	00000fff fc000000 0000007f 80000000     ................
   11494:	000007ff f8000000 0000007f c0000000     ................
   114a4:	000007ff f8000000 000000ff c0000000     ................
   114b4:	000007ff f8000000 000000ff c0000000     ................
   114c4:	000003ff f0000000 000000ff c0000000     ................
   114d4:	000003ff f0000000 000000ff c0000000     ................
   114e4:	000003ff f0000000 000000ff c0000000     ................
   114f4:	000003ff f0000000 000000ff c0000000     ................
   11504:	000003ff f0000000 000000ff c0000000     ................
   11514:	000003ff f0000000 000000ff c0000000     ................
   11524:	000003ff f0000000 000000ff c0000000     ................
   11534:	000003ff f0000000 000000ff c0000000     ................
   11544:	000007ff f8000000 000000ff c0000000     ................
   11554:	000007ff f8000000 000000ff 80000000     ................
   11564:	000007ff f8000000 0000007f 80000000     ................
   11574:	00000fff fc000000 0000007f 80000000     ................
   11584:	00001fff fe000000 0000007f 80000000     ................
   11594:	00003fff ff000000 0000007f 00000000     .?..............
   115a4:	00007fff ff800000 0000003f 00000000     ........?.......
   115b4:	0000ffff ffc00000 0000003f 00000000     ........?.......
   115c4:	0003fffe fff00000 0000003f 00000000     ........?.......
   115d4:	000ffffe fffc0000 0000001f 00000000     ................
   115e4:	007ffffc ffff8000 0000001f 00000000     ................
   115f4:	7ffffffc ffffff80 0000000f 00000000     ................
   11604:	fffffff8 ffffffff 00000007 00000000     ................
   11614:	fffffff8 ffffffff 00000007 00000000     ................
   11624:	fffffff0 ffffffff 00000003 00000000     ................
   11634:	ffffffe0 ffffffff 00000001 00000000     ................
   11644:	ffffffc0 ffffffff 00000000 00000000     ................
   11654:	ffffff80 7fffffff 00000000 00000000     ................
   11664:	ffffff00 3fffffff 00000000 00000000     .......?........
   11674:	fffffe00 1fffffff 00000000 00000000     ................
   11684:	fffff800 07ffffff 00000000 00000000     ................
   11694:	fffff000 03ffffff 00000000 00000000     ................
   116a4:	ffffc000 00ffffff 00000000 00000000     ................
   116b4:	fffe0000 003fffff 00000000 00000000     ......?.........
   116c4:	fff80000 0007ffff 00000000 00000000     ................
   116d4:	ff800000 00007fff 00000000 00000000     ................
   116e4:	00000000 0000007e 00000000 00000000     ....~...........
	...
   11790:	80000000 ffffffff ffffffff 0000007f     ................
   117a0:	80000000 ffffffff ffffffff 0000007f     ................
   117b0:	80000000 ffffffff ffffffff 0000007f     ................
   117c0:	80000000 ffffffff ffffffff 0000007f     ................
   117d0:	80000000 ffffffff ffffffff 0000007f     ................
   117e0:	80000000 ffffffff ffffffff 0000007f     ................
   117f0:	80000000 ffffffff ffffffff 0000007f     ................
   11800:	80000000 ffffffff ffffffff 0000007f     ................
   11810:	80000000 ffffffff ffffffff 0000007f     ................
   11820:	80000000 ffffffff ffffffff 0000007f     ................
   11830:	80000000 ffffffff ffffffff 0000007f     ................
   11840:	80000000 ffffffff ffffffff 0000007f     ................
   11850:	80000000 ffffffff ffffffff 0000007f     ................
   11860:	80000000 ffffffff ffffffff 0000007f     ................
   11870:	80000000 ffffffff ffffffff 0000007f     ................
   11880:	80000000 000003ff 00001ffc 00000000     ................
   11890:	80000000 000003ff 00001ffc 00000000     ................
   118a0:	80000000 000003ff 00001ffc 00000000     ................
   118b0:	80000000 000003ff 00001ffc 00000000     ................
   118c0:	80000000 000003ff 00001ffc 00000000     ................
   118d0:	80000000 000003ff 00001ffc 00000000     ................
   118e0:	80000000 000003ff 00001ffc 00000000     ................
   118f0:	80000000 000003ff 00001ffc 00000000     ................
   11900:	80000000 000003ff 00001ffc 00000000     ................
   11910:	80000000 000003ff 00001ffc 00000000     ................
   11920:	80000000 000003ff 00001ffc 00000000     ................
   11930:	80000000 000003ff 00001ffc 00000000     ................
   11940:	80000000 000003ff 00001ffc 00000000     ................
   11950:	80000000 000003ff 00001ffc 00000000     ................
   11960:	80000000 000003ff 00001ffc 00000000     ................
   11970:	80000000 000003ff 00001ffc 00000000     ................
   11980:	80000000 000003ff 00001ffc 00000000     ................
   11990:	80000000 000007ff 00001ffc 00000000     ................
   119a0:	80000000 000007ff 00001ffe 00000000     ................
   119b0:	80000000 000007ff 00001ffe 00000000     ................
   119c0:	00000000 00000fff 00000fff 00000000     ................
   119d0:	00000000 00001fff 00000fff 00000000     ................
   119e0:	00000000 80003fff 00000fff 00000000     .....?..........
   119f0:	00000000 c0007fff 00000fff 00000000     ................
   11a00:	00000000 f001fffe 000007ff 00000000     ................
   11a10:	00000000 fffffffe 000007ff 00000000     ................
   11a20:	00000000 fffffffe 000007ff 00000000     ................
   11a30:	00000000 fffffffc 000003ff 00000000     ................
   11a40:	00000000 fffffffc 000003ff 00000000     ................
   11a50:	00000000 fffffff8 000001ff 00000000     ................
   11a60:	00000000 fffffff0 000001ff 00000000     ................
   11a70:	00000000 fffffff0 000000ff 00000000     ................
   11a80:	00000000 ffffffe0 0000007f 00000000     ................
   11a90:	00000000 ffffffc0 0000007f 00000000     ................
   11aa0:	00000000 ffffff80 0000003f 00000000     ........?.......
   11ab0:	00000000 ffffff00 0000001f 00000000     ................
   11ac0:	00000000 fffffe00 00000007 00000000     ................
   11ad0:	00000000 fffff800 00000003 00000000     ................
   11ae0:	00000000 ffffe000 00000000 00000000     ................
   11af0:	00000000 1fff0000 00000000 00000000     ................
	...
   11b84:	e0000000 000003ff 00000000 00000000     ................
   11b94:	ffc00000 0000ffff 00000000 00000000     ................
   11ba4:	fff80000 0007ffff 00000000 00000000     ................
   11bb4:	ffff0000 003fffff 00000000 00000000     ......?.........
   11bc4:	ffffc000 00ffffff 00000000 00000000     ................
   11bd4:	fffff000 03ffffff 00000000 00000000     ................
   11be4:	fffffc00 07ffffff 00000000 00000000     ................
   11bf4:	fffffe00 1fffffff 00000000 00000000     ................
   11c04:	ffffff00 3fffffff 00000000 00000000     .......?........
   11c14:	ffffff80 7fffffff 00000000 00000000     ................
   11c24:	ffffffc0 ffffffff 00000000 00000000     ................
   11c34:	ffffffe0 ffffffff 00000001 00000000     ................
   11c44:	fffffff0 ffffffff 00000003 00000000     ................
   11c54:	fffffff8 ffffffff 00000007 00000000     ................
   11c64:	fffffff8 ffffffff 00000007 00000000     ................
   11c74:	0ffffffc fffffe00 0000000f 00000000     ................
   11c84:	003ffffe ffff8000 0000001f 00000000     ..?.............
   11c94:	0007fffe fffc0000 0000001f 00000000     ................
   11ca4:	0001ffff fff00000 0000003f 00000000     ........?.......
   11cb4:	0000ffff ffc00000 0000003f 00000000     ........?.......
   11cc4:	00003fff ff800000 0000003f 80000000     .?......?.......
   11cd4:	00001fff ff000000 0000007f 80000000     ................
   11ce4:	00001fff fe000000 0000007f 80000000     ................
   11cf4:	00000fff fc000000 0000007f 80000000     ................
   11d04:	000007ff f8000000 0000007f c0000000     ................
   11d14:	000007ff f8000000 000000ff c0000000     ................
   11d24:	000007ff f8000000 000000ff c0000000     ................
   11d34:	000003ff f0000000 000000ff c0000000     ................
   11d44:	000003ff f0000000 000000ff c0000000     ................
   11d54:	000003ff f0000000 000000ff c0000000     ................
   11d64:	000003ff f0000000 000000ff c0000000     ................
   11d74:	000003ff f0000000 000000ff c0000000     ................
   11d84:	000003ff f0000000 000000ff c0000000     ................
   11d94:	000003ff f0000000 000000ff c0000000     ................
   11da4:	000003ff f0000000 000000ff c0000000     ................
   11db4:	000007ff f8000000 000000ff c0000000     ................
   11dc4:	000007ff f8000000 000000ff 80000000     ................
   11dd4:	000007ff f8000000 000000ff 80000000     ................
   11de4:	00000fff fc000000 000001ff 80000000     ................
   11df4:	00001fff fe000000 000003ff 80000000     ................
   11e04:	00003fff ff000000 000007ff 00000000     .?..............
   11e14:	00007fff ff800000 00000fff 00000000     ................
   11e24:	0000ffff ffc00000 00000fff 00000000     ................
   11e34:	0003fffe fff00000 00001fff 00000000     ................
   11e44:	000ffffe fffc0000 00003fff 00000000     .........?......
   11e54:	00fffffc ffffc000 00007fff 00000000     ................
   11e64:	fffffffc ffffffff 0000ffff 00000000     ................
   11e74:	fffffff8 ffffffff 0000ffff 00000000     ................
   11e84:	fffffff8 ffffffff 0001ffff 00000000     ................
   11e94:	fffffff0 ffffffff 0003ffff 00000000     ................
   11ea4:	ffffffe0 ffffffff 0007fff9 00000000     ................
   11eb4:	ffffffc0 ffffffff 000ffff0 00000000     ................
   11ec4:	ffffff80 7fffffff 0007ffe0 00000000     ................
   11ed4:	ffffff00 3fffffff 0003ffc0 00000000     .......?........
   11ee4:	fffffe00 1fffffff 0001ffc0 00000000     ................
   11ef4:	fffff800 07ffffff 0000ff80 00000000     ................
   11f04:	ffffe000 03ffffff 0000ff00 00000000     ................
   11f14:	ffffc000 00ffffff 00007e00 00000000     .........~......
   11f24:	fffe0000 001fffff 00003e00 00000000     .........>......
   11f34:	fff00000 0007ffff 00001c00 00000000     ................
   11f44:	ff000000 00007fff 00000800 00000000     ................
	...
   12000:	80000000 ffffffff ffffffff 0000007f     ................
   12010:	80000000 ffffffff ffffffff 0000007f     ................
   12020:	80000000 ffffffff ffffffff 0000007f     ................
   12030:	80000000 ffffffff ffffffff 0000007f     ................
   12040:	80000000 ffffffff ffffffff 0000007f     ................
   12050:	80000000 ffffffff ffffffff 0000007f     ................
   12060:	80000000 ffffffff ffffffff 0000007f     ................
   12070:	80000000 ffffffff ffffffff 0000007f     ................
   12080:	80000000 ffffffff ffffffff 0000007f     ................
   12090:	80000000 ffffffff ffffffff 0000007f     ................
   120a0:	80000000 ffffffff ffffffff 0000007f     ................
   120b0:	80000000 ffffffff ffffffff 0000007f     ................
   120c0:	80000000 ffffffff ffffffff 0000007f     ................
   120d0:	80000000 ffffffff ffffffff 0000007f     ................
   120e0:	80000000 ffffffff ffffffff 0000007f     ................
   120f0:	80000000 000003ff 00000ffe 00000000     ................
   12100:	80000000 000003ff 00000ffe 00000000     ................
   12110:	80000000 000003ff 00000ffe 00000000     ................
   12120:	80000000 000003ff 00000ffe 00000000     ................
   12130:	80000000 000003ff 00000ffe 00000000     ................
   12140:	80000000 000003ff 00000ffe 00000000     ................
   12150:	80000000 000003ff 00000ffe 00000000     ................
   12160:	80000000 000003ff 00000ffe 00000000     ................
   12170:	80000000 000003ff 00000ffe 00000000     ................
   12180:	80000000 000003ff 00000ffe 00000000     ................
   12190:	80000000 000003ff 00000ffe 00000000     ................
   121a0:	80000000 000003ff 00000ffe 00000000     ................
   121b0:	80000000 000003ff 00001ffe 00000000     ................
   121c0:	80000000 000003ff 00007ffe 00000000     ................
   121d0:	80000000 000003ff 0001fffe 00000000     ................
   121e0:	80000000 000003ff 0007fffe 00000000     ................
   121f0:	80000000 000007ff 003fffff 00000000     ..........?.....
   12200:	80000000 000007ff 00ffffff 00000000     ................
   12210:	80000000 000007ff 03ffffff 00000000     ................
   12220:	00000000 80000fff 0fffffff 00000000     ................
   12230:	00000000 c0001fff 3fffffff 00000000     ...........?....
   12240:	00000000 e0003fff ffffffff 00000000     .....?..........
   12250:	00000000 f800ffff ffffffff 00000003     ................
   12260:	00000000 ff8ffffe ffffffff 0000000f     ................
   12270:	00000000 fffffffe ffffffff 0000003f     ............?...
   12280:	00000000 fffffffe ffffffff 0000007f     ................
   12290:	00000000 fffffffc fffffcff 0000007f     ................
   122a0:	00000000 fffffffc fffff07f 0000007f     ................
   122b0:	00000000 fffffff8 ffffc07f 0000007f     ................
   122c0:	00000000 fffffff8 ffff003f 0000007f     ........?.......
   122d0:	00000000 fffffff0 fffc001f 0000007f     ................
   122e0:	00000000 ffffffe0 fff0001f 0000007f     ................
   122f0:	00000000 ffffffe0 ffc0000f 0000007f     ................
   12300:	00000000 ffffff80 ff000007 0000007f     ................
   12310:	00000000 ffffff00 fc000003 0000007f     ................
   12320:	00000000 fffffe00 f8000000 0000007f     ................
   12330:	00000000 3ffff800 e0000000 0000007f     .......?........
   12340:	00000000 07ffc000 80000000 0000007f     ................
	...
   1235c:	0000007e 00000000 00000000 00000000     ~...............
   1236c:	00000078 00000000 00000000 00000000     x...............
   1237c:	00000060 00000000 00000000 00000000     `...............
	...
   123d8:	00070000 00000000 00000000 00000000     ................
   123e8:	00ff0000 00000000 00000000 00000000     ................
   123f8:	03ff0000 00000000 00000000 00fff000     ................
   12408:	0fff0000 00000000 00000000 03fffc00     ................
   12418:	1fff0000 00000000 00000000 0fffff00     ................
   12428:	7fff0000 00000000 00000000 1fffff80     ................
   12438:	ffff0000 00000000 00000000 7fffffc0     ................
   12448:	ffff0000 00000001 00000000 ffffffe0     ................
   12458:	ffff0000 00000003 00000000 fffffff0     ................
   12468:	ffff0000 00000003 00000000 fffffff8     ................
   12478:	ffff0001 00000007 00000000 fffffff8     ................
   12488:	ffff0003 0000000f 00000000 fffffffc     ................
   12498:	ffff0007 0000000f 00000000 fffffffe     ................
   124a8:	ffff0007 0000001f 00000000 fffffffe     ................
   124b8:	ffff000f 0000001f 00000000 ffffffff     ................
   124c8:	fff0000f 0000001f 00000000 ffffffff     ................
   124d8:	ff80001f 0000003f 00000000 fff1ffff     ....?...........
   124e8:	ff00001f 0000003f 80000000 ffc03fff     ....?........?..
   124f8:	fc00003f 0000003f 80000000 ff000fff     ?...?...........
   12508:	fc00003f 0000007f 80000000 ff0007ff     ?...............
   12518:	f800007f 0000007f 80000000 fe0007ff     ................
   12528:	f000007f 0000007f 80000000 fc0003ff     ................
   12538:	f000007f 0000007f c0000000 fc0003ff     ................
   12548:	f00000ff 000000ff c0000000 f80001ff     ................
   12558:	e00000ff 000000ff c0000000 f80001ff     ................
   12568:	e00000ff 000000ff c0000000 f00001ff     ................
   12578:	e00001ff 000000ff c0000000 f00001ff     ................
   12588:	e00001ff 000000ff c0000000 e00001ff     ................
   12598:	e00003ff 000000ff c0000000 e00001ff     ................
   125a8:	e00003ff 000000ff c0000000 e00001ff     ................
   125b8:	e00003ff 000000ff c0000000 c00001ff     ................
   125c8:	e00007ff 000000ff c0000000 c00001ff     ................
   125d8:	e00007ff 000000ff c0000000 c00003ff     ................
   125e8:	e00007ff 000000ff c0000000 c00003ff     ................
   125f8:	f0000fff 000000ff 80000000 800003ff     ................
   12608:	f0001fff 000000ff 80000000 800007ff     ................
   12618:	f8001fff 0000007f 80000000 00000fff     ................
   12628:	f8003fff 0000007f 80000000 00001fff     .?..............
   12638:	fc007fff 0000007f 00000000 00007fff     ................
   12648:	fe00ffff 0000007f 00000000 0003ffff     ................
   12658:	ffc7fffe 0000007f 00000000 000fffff     ................
   12668:	fffffffe 0000003f 00000000 000ffffe     ....?...........
   12678:	fffffffc 0000003f 00000000 000ffffe     ....?...........
   12688:	fffffffc 0000003f 00000000 000ffffc     ....?...........
   12698:	fffffff8 0000001f 00000000 000ffffc     ................
   126a8:	fffffff8 0000001f 00000000 000ffff8     ................
   126b8:	fffffff0 0000000f 00000000 000ffff0     ................
   126c8:	ffffffe0 00000007 00000000 000fffe0     ................
   126d8:	ffffffc0 00000007 00000000 000fffe0     ................
   126e8:	ffffff80 00000003 00000000 000fff80     ................
   126f8:	ffffff00 00000001 00000000 000fff00     ................
   12708:	fffffe00 00000000 00000000 000ffe00     ................
   12718:	7ffffc00 00000000 00000000 000ff800     ................
   12728:	1ffff000 00000000 00000000 000fc000     ................
   12738:	07ffc000 00000000 00000000 00000000     ................
	...
   127a0:	80000000 000003ff 00000000 00000000     ................
   127b0:	80000000 000003ff 00000000 00000000     ................
   127c0:	80000000 000003ff 00000000 00000000     ................
   127d0:	80000000 000003ff 00000000 00000000     ................
   127e0:	80000000 000003ff 00000000 00000000     ................
   127f0:	80000000 000003ff 00000000 00000000     ................
   12800:	80000000 000003ff 00000000 00000000     ................
   12810:	80000000 000003ff 00000000 00000000     ................
   12820:	80000000 000003ff 00000000 00000000     ................
   12830:	80000000 000003ff 00000000 00000000     ................
   12840:	80000000 000003ff 00000000 00000000     ................
   12850:	80000000 000003ff 00000000 00000000     ................
   12860:	80000000 000003ff 00000000 00000000     ................
   12870:	80000000 000003ff 00000000 00000000     ................
   12880:	80000000 000003ff 00000000 00000000     ................
   12890:	80000000 000003ff 00000000 00000000     ................
   128a0:	80000000 000003ff 00000000 00000000     ................
   128b0:	80000000 000003ff 00000000 00000000     ................
   128c0:	80000000 000003ff 00000000 00000000     ................
   128d0:	80000000 000003ff 00000000 00000000     ................
   128e0:	80000000 000003ff 00000000 00000000     ................
   128f0:	80000000 000003ff 00000000 00000000     ................
   12900:	80000000 ffffffff ffffffff 0000007f     ................
   12910:	80000000 ffffffff ffffffff 0000007f     ................
   12920:	80000000 ffffffff ffffffff 0000007f     ................
   12930:	80000000 ffffffff ffffffff 0000007f     ................
   12940:	80000000 ffffffff ffffffff 0000007f     ................
   12950:	80000000 ffffffff ffffffff 0000007f     ................
   12960:	80000000 ffffffff ffffffff 0000007f     ................
   12970:	80000000 ffffffff ffffffff 0000007f     ................
   12980:	80000000 ffffffff ffffffff 0000007f     ................
   12990:	80000000 ffffffff ffffffff 0000007f     ................
   129a0:	80000000 ffffffff ffffffff 0000007f     ................
   129b0:	80000000 ffffffff ffffffff 0000007f     ................
   129c0:	80000000 ffffffff ffffffff 0000007f     ................
   129d0:	80000000 ffffffff ffffffff 0000007f     ................
   129e0:	80000000 000003ff 00000000 00000000     ................
   129f0:	80000000 000003ff 00000000 00000000     ................
   12a00:	80000000 000003ff 00000000 00000000     ................
   12a10:	80000000 000003ff 00000000 00000000     ................
   12a20:	80000000 000003ff 00000000 00000000     ................
   12a30:	80000000 000003ff 00000000 00000000     ................
   12a40:	80000000 000003ff 00000000 00000000     ................
   12a50:	80000000 000003ff 00000000 00000000     ................
   12a60:	80000000 000003ff 00000000 00000000     ................
   12a70:	80000000 000003ff 00000000 00000000     ................
   12a80:	80000000 000003ff 00000000 00000000     ................
   12a90:	80000000 000003ff 00000000 00000000     ................
   12aa0:	80000000 000003ff 00000000 00000000     ................
   12ab0:	80000000 000003ff 00000000 00000000     ................
   12ac0:	80000000 000003ff 00000000 00000000     ................
   12ad0:	80000000 000003ff 00000000 00000000     ................
   12ae0:	80000000 000003ff 00000000 00000000     ................
   12af0:	80000000 000003ff 00000000 00000000     ................
   12b00:	80000000 000003ff 00000000 00000000     ................
   12b10:	80000000 000003ff 00000000 00000000     ................
   12b20:	80000000 000003ff 00000000 00000000     ................
   12b30:	80000000 000003ff 00000000 00000000     ................
	...
   12bb0:	80000000 ffffffff 0000ffff 00000000     ................
   12bc0:	80000000 ffffffff 007fffff 00000000     ................
   12bd0:	80000000 ffffffff 03ffffff 00000000     ................
   12be0:	80000000 ffffffff 0fffffff 00000000     ................
   12bf0:	80000000 ffffffff 1fffffff 00000000     ................
   12c00:	80000000 ffffffff 7fffffff 00000000     ................
   12c10:	80000000 ffffffff ffffffff 00000000     ................
   12c20:	80000000 ffffffff ffffffff 00000001     ................
   12c30:	80000000 ffffffff ffffffff 00000003     ................
   12c40:	80000000 ffffffff ffffffff 00000007     ................
   12c50:	80000000 ffffffff ffffffff 00000007     ................
   12c60:	80000000 ffffffff ffffffff 0000000f     ................
   12c70:	80000000 ffffffff ffffffff 0000000f     ................
   12c80:	80000000 ffffffff ffffffff 0000001f     ................
   12c90:	80000000 ffffffff ffffffff 0000001f     ................
	...
   12ca8:	fff80000 0000003f 00000000 00000000     ....?...........
   12cb8:	ffc00000 0000003f 00000000 00000000     ....?...........
   12cc8:	ff000000 0000007f 00000000 00000000     ................
   12cd8:	fc000000 0000007f 00000000 00000000     ................
   12ce8:	fc000000 0000007f 00000000 00000000     ................
   12cf8:	f8000000 0000007f 00000000 00000000     ................
   12d08:	f0000000 0000007f 00000000 00000000     ................
   12d18:	f0000000 000000ff 00000000 00000000     ................
   12d28:	f0000000 000000ff 00000000 00000000     ................
   12d38:	e0000000 000000ff 00000000 00000000     ................
   12d48:	e0000000 000000ff 00000000 00000000     ................
   12d58:	e0000000 000000ff 00000000 00000000     ................
   12d68:	e0000000 000000ff 00000000 00000000     ................
   12d78:	e0000000 000000ff 00000000 00000000     ................
   12d88:	e0000000 000000ff 00000000 00000000     ................
   12d98:	e0000000 000000ff 00000000 00000000     ................
   12da8:	e0000000 000000ff 00000000 00000000     ................
   12db8:	f0000000 000000ff 00000000 00000000     ................
   12dc8:	f0000000 000000ff 00000000 00000000     ................
   12dd8:	f0000000 000000ff 00000000 00000000     ................
   12de8:	f8000000 0000007f 00000000 00000000     ................
   12df8:	f8000000 0000007f 00000000 00000000     ................
   12e08:	fc000000 0000007f 00000000 00000000     ................
   12e18:	ff000000 0000007f 00000000 00000000     ................
   12e28:	ffc00000 0000003f 00000000 00000000     ....?...........
   12e38:	fffc0000 0000003f 80000000 ffffffff     ....?...........
   12e48:	ffffffff 0000001f 80000000 ffffffff     ................
   12e58:	ffffffff 0000001f 80000000 ffffffff     ................
   12e68:	ffffffff 0000000f 80000000 ffffffff     ................
   12e78:	ffffffff 0000000f 80000000 ffffffff     ................
   12e88:	ffffffff 00000007 80000000 ffffffff     ................
   12e98:	ffffffff 00000007 80000000 ffffffff     ................
   12ea8:	ffffffff 00000003 80000000 ffffffff     ................
   12eb8:	ffffffff 00000001 80000000 ffffffff     ................
   12ec8:	ffffffff 00000000 80000000 ffffffff     ................
   12ed8:	7fffffff 00000000 80000000 ffffffff     ................
   12ee8:	1fffffff 00000000 80000000 ffffffff     ................
   12ef8:	0fffffff 00000000 80000000 ffffffff     ................
   12f08:	01ffffff 00000000 80000000 ffffffff     ................
   12f18:	007fffff 00000000 80000000 ffffffff     ................
   12f28:	0000ffff 00000000 00000000 00000000     ................
	...
   12f80:	80000000 00000000 00000000 00000000     ................
   12f90:	80000000 00000003 00000000 00000000     ................
   12fa0:	80000000 0000001f 00000000 00000000     ................
   12fb0:	80000000 000000ff 00000000 00000000     ................
   12fc0:	80000000 000007ff 00000000 00000000     ................
   12fd0:	80000000 00003fff 00000000 00000000     .....?..........
   12fe0:	80000000 0001ffff 00000000 00000000     ................
   12ff0:	80000000 000fffff 00000000 00000000     ................
   13000:	80000000 007fffff 00000000 00000000     ................
   13010:	80000000 03ffffff 00000000 00000000     ................
   13020:	80000000 0fffffff 00000000 00000000     ................
   13030:	80000000 7fffffff 00000000 00000000     ................
   13040:	80000000 ffffffff 00000003 00000000     ................
   13050:	80000000 ffffffff 0000001f 00000000     ................
   13060:	80000000 ffffffff 000000ff 00000000     ................
   13070:	80000000 ffffffff 000007ff 00000000     ................
   13080:	80000000 ffffffff 00003fff 00000000     .........?......
   13090:	00000000 fffffffc 0001ffff 00000000     ................
   130a0:	00000000 ffffffe0 000fffff 00000000     ................
   130b0:	00000000 ffffff00 003fffff 00000000     ..........?.....
   130c0:	00000000 fffff000 01ffffff 00000000     ................
   130d0:	00000000 ffff8000 0fffffff 00000000     ................
   130e0:	00000000 fffc0000 7fffffff 00000000     ................
   130f0:	00000000 ffc00000 ffffffff 00000003     ................
   13100:	00000000 fe000000 ffffffff 0000001f     ................
   13110:	00000000 f0000000 ffffffff 0000007f     ................
	...
   13128:	ffffffff 0000007f 00000000 00000000     ................
   13138:	fffffff8 0000007f 00000000 00000000     ................
   13148:	ffffffc0 0000007f 00000000 00000000     ................
   13158:	fffffc00 0000007f 00000000 00000000     ................
   13168:	ffffe000 0000007f 00000000 00000000     ................
   13178:	ffff0000 0000007f 00000000 00000000     ................
   13188:	fff00000 0000007f 00000000 00000000     ................
   13198:	fff80000 0000007f 00000000 00000000     ................
   131a8:	ffff0000 0000007f 00000000 00000000     ................
   131b8:	ffffe000 0000007f 00000000 00000000     ................
   131c8:	fffffe00 0000007f 00000000 00000000     ................
   131d8:	ffffffc0 0000007f 00000000 00000000     ................
   131e8:	fffffff8 0000007f 00000000 80000000     ................
   131f8:	ffffffff 0000007f 00000000 f0000000     ................
   13208:	ffffffff 0000007f 00000000 fe000000     ................
   13218:	ffffffff 0000001f 00000000 ffe00000     ................
   13228:	ffffffff 00000003 00000000 fffc0000     ................
   13238:	7fffffff 00000000 00000000 ffff8000     ................
   13248:	0fffffff 00000000 00000000 fffff800     ................
   13258:	01ffffff 00000000 00000000 ffffff00     ................
   13268:	003fffff 00000000 00000000 ffffffe0     ..?.............
   13278:	0007ffff 00000000 00000000 fffffffe     ................
   13288:	0000ffff 00000000 80000000 ffffffff     ................
   13298:	00003fff 00000000 80000000 ffffffff     .?..............
   132a8:	000007ff 00000000 80000000 ffffffff     ................
   132b8:	000000ff 00000000 80000000 ffffffff     ................
   132c8:	0000001f 00000000 80000000 ffffffff     ................
   132d8:	00000003 00000000 80000000 7fffffff     ................
	...
   132f0:	80000000 0fffffff 00000000 00000000     ................
   13300:	80000000 01ffffff 00000000 00000000     ................
   13310:	80000000 007fffff 00000000 00000000     ................
   13320:	80000000 000fffff 00000000 00000000     ................
   13330:	80000000 0001ffff 00000000 00000000     ................
   13340:	80000000 00003fff 00000000 00000000     .....?..........
   13350:	80000000 000007ff 00000000 00000000     ................
   13360:	80000000 000000ff 00000000 00000000     ................
   13370:	80000000 0000001f 00000000 00000000     ................
   13380:	80000000 00000003 00000000 00000000     ................
   13390:	80000000 00000000 00000000 00000000     ................
	...
   133c0:	80000000 00000007 00000000 00000000     ................
   133d0:	80000000 000000ff 00000000 00000000     ................
   133e0:	80000000 00000fff 00000000 00000000     ................
   133f0:	80000000 0001ffff 00000000 00000000     ................
   13400:	80000000 001fffff 00000000 00000000     ................
   13410:	80000000 03ffffff 00000000 00000000     ................
   13420:	80000000 3fffffff 00000000 00000000     .......?........
   13430:	80000000 ffffffff 00000007 00000000     ................
   13440:	80000000 ffffffff 0000007f 00000000     ................
   13450:	80000000 ffffffff 00000fff 00000000     ................
   13460:	80000000 ffffffff 0000ffff 00000000     ................
   13470:	80000000 ffffffff 001fffff 00000000     ................
   13480:	80000000 ffffffff 01ffffff 00000000     ................
   13490:	80000000 ffffffff 3fffffff 00000000     ...........?....
   134a0:	00000000 ffffffff ffffffff 00000003     ................
   134b0:	00000000 ffffffe0 ffffffff 0000007f     ................
   134c0:	00000000 fffff800 ffffffff 0000007f     ................
   134d0:	00000000 ffff0000 ffffffff 0000007f     ................
   134e0:	00000000 ffe00000 ffffffff 0000007f     ................
   134f0:	00000000 fc000000 ffffffff 0000007f     ................
	...
   13508:	ffffffff 0000007f 00000000 00000000     ................
   13518:	ffffffe0 0000007f 00000000 00000000     ................
   13528:	fffffc00 0000007f 00000000 00000000     ................
   13538:	ffff8000 0000007f 00000000 00000000     ................
   13548:	ffff0000 0000007f 00000000 00000000     ................
   13558:	fffff000 0000007f 00000000 00000000     ................
   13568:	ffffff80 0000007f 00000000 00000000     ................
   13578:	fffffff8 0000007f 00000000 80000000     ................
   13588:	ffffffff 0000007f 00000000 fc000000     ................
   13598:	ffffffff 0000007f 00000000 ffc00000     ................
   135a8:	ffffffff 0000007f 00000000 fffc0000     ................
   135b8:	ffffffff 00000003 00000000 ffffc000     ................
   135c8:	3fffffff 00000000 00000000 fffffe00     ...?............
   135d8:	03ffffff 00000000 00000000 ffffffe0     ................
   135e8:	003fffff 00000000 00000000 fffffffe     ..?.............
   135f8:	0003ffff 00000000 80000000 ffffffff     ................
   13608:	00003fff 00000000 80000000 ffffffff     .?..............
   13618:	000003ff 00000000 80000000 ffffffff     ................
   13628:	0000003f 00000000 80000000 ffffffff     ?...............
   13638:	00000001 00000000 80000000 1fffffff     ................
	...
   13650:	80000000 01ffffff 00000000 00000000     ................
   13660:	80000000 01ffffff 00000000 00000000     ................
   13670:	80000000 1fffffff 00000000 00000000     ................
   13680:	80000000 ffffffff 00000001 00000000     ................
   13690:	80000000 ffffffff 0000001f 00000000     ................
   136a0:	80000000 ffffffff 000001ff 00000000     ................
   136b0:	80000000 ffffffff 00001fff 00000000     ................
   136c0:	80000000 ffffffff 0001ffff 00000000     ................
   136d0:	00000000 fffffff0 001fffff 00000000     ................
   136e0:	00000000 ffffff00 03ffffff 00000000     ................
   136f0:	00000000 ffffe000 3fffffff 00000000     ...........?....
   13700:	00000000 fffe0000 ffffffff 00000003     ................
   13710:	00000000 ffe00000 ffffffff 0000003f     ............?...
   13720:	00000000 fc000000 ffffffff 0000007f     ................
   13730:	00000000 c0000000 ffffffff 0000007f     ................
	...
   13748:	fffffffc 0000007f 00000000 00000000     ................
   13758:	ffffff80 0000007f 00000000 00000000     ................
   13768:	fffff800 0000007f 00000000 00000000     ................
   13778:	ffff8000 0000007f 00000000 00000000     ................
   13788:	fffe0000 0000007f 00000000 00000000     ................
   13798:	fffff800 0000007f 00000000 00000000     ................
   137a8:	ffffffc0 0000007f 00000000 00000000     ................
   137b8:	fffffffe 0000007f 00000000 f8000000     ................
   137c8:	ffffffff 0000007f 00000000 ffc00000     ................
   137d8:	ffffffff 0000007f 00000000 fffe0000     ................
   137e8:	ffffffff 0000007f 00000000 fffff800     ................
   137f8:	ffffffff 0000007f 00000000 ffffffc0     ................
   13808:	ffffffff 0000007f 00000000 fffffffe     ................
   13818:	ffffffff 00000007 80000000 ffffffff     ................
   13828:	7fffffff 00000000 80000000 ffffffff     ................
   13838:	03ffffff 00000000 80000000 ffffffff     ................
   13848:	003fffff 00000000 80000000 ffffffff     ..?.............
   13858:	0001ffff 00000000 80000000 ffffffff     ................
   13868:	00001fff 00000000 80000000 ffffffff     ................
   13878:	000000ff 00000000 80000000 ffffffff     ................
   13888:	0000000f 00000000 80000000 7fffffff     ................
	...
   138a0:	80000000 07ffffff 00000000 00000000     ................
   138b0:	80000000 003fffff 00000000 00000000     ......?.........
   138c0:	80000000 0001ffff 00000000 00000000     ................
   138d0:	80000000 00001fff 00000000 00000000     ................
   138e0:	80000000 000000ff 00000000 00000000     ................
   138f0:	80000000 0000000f 00000000 00000000     ................
   13900:	80000000 00000000 00000000 00000000     ................
	...
   1393c:	00000040 80000000 00000000 00000000     @...............
   1394c:	00000060 80000000 00000003 00000000     `...............
   1395c:	00000078 80000000 0000000f 00000000     x...............
   1396c:	0000007e 80000000 0000003f 00000000     ~.......?.......
   1397c:	0000007f 80000000 0000007f c0000000     ................
   1398c:	0000007f 80000000 000001ff f0000000     ................
   1399c:	0000007f 80000000 000007ff fc000000     ................
   139ac:	0000007f 80000000 00000fff fe000000     ................
   139bc:	0000007f 80000000 00003fff ff800000     .........?......
   139cc:	0000007f 80000000 0000ffff ffe00000     ................
   139dc:	0000007f 80000000 0003ffff fff00000     ................
   139ec:	0000007f 80000000 0007ffff fffc0000     ................
   139fc:	0000007f 80000000 001fffff ffff0000     ................
   13a0c:	0000007f 80000000 007fffff ffff8000     ................
   13a1c:	0000007f 80000000 00ffffff ffffe000     ................
   13a2c:	0000007f 80000000 03ffffff fffff800     ................
   13a3c:	0000007f 80000000 0fffffff fffffc00     ................
   13a4c:	0000007f 00000000 3ffffffe ffffff00     ...........?....
   13a5c:	0000001f 00000000 7ffffffc ffffffc0     ................
   13a6c:	00000007 00000000 fffffff0 fffffff1     ................
   13a7c:	00000001 00000000 ffffffc0 7fffffff     ................
	...
   13a94:	ffffff00 3fffffff 00000000 00000000     .......?........
   13aa4:	fffffc00 0fffffff 00000000 00000000     ................
   13ab4:	fffff000 03ffffff 00000000 00000000     ................
   13ac4:	ffffe000 00ffffff 00000000 00000000     ................
   13ad4:	ffff8000 003fffff 00000000 00000000     ......?.........
   13ae4:	fffe0000 000fffff 00000000 00000000     ................
   13af4:	fff80000 0007ffff 00000000 00000000     ................
   13b04:	ffe00000 0001ffff 00000000 00000000     ................
   13b14:	ff800000 00007fff 00000000 00000000     ................
   13b24:	ff800000 00003fff 00000000 00000000     .....?..........
   13b34:	ffe00000 0000ffff 00000000 00000000     ................
   13b44:	fff80000 0003ffff 00000000 00000000     ................
   13b54:	fffc0000 000fffff 00000000 00000000     ................
   13b64:	ffff0000 003fffff 00000000 00000000     ......?.........
   13b74:	ffffc000 00ffffff 00000000 00000000     ................
   13b84:	fffff000 01ffffff 00000000 00000000     ................
   13b94:	fffffc00 07ffffff 00000000 00000000     ................
   13ba4:	ffffff00 1fffffff 00000000 00000000     ................
   13bb4:	ffffffc0 7fffffff 00000000 00000000     ................
   13bc4:	ffffffe0 fffffff1 00000001 00000000     ................
   13bd4:	fffffff8 ffffffc0 00000007 00000000     ................
   13be4:	3ffffffe ffffff80 0000000f 80000000     ...?............
   13bf4:	0fffffff fffffe00 0000003f 80000000     ........?.......
   13c04:	03ffffff fffff800 0000007f 80000000     ................
   13c14:	01ffffff ffffe000 0000007f 80000000     ................
   13c24:	007fffff ffffc000 0000007f 80000000     ................
   13c34:	001fffff ffff0000 0000007f 80000000     ................
   13c44:	000fffff fffc0000 0000007f 80000000     ................
   13c54:	0003ffff fff80000 0000007f 80000000     ................
   13c64:	0000ffff ffe00000 0000007f 80000000     ................
   13c74:	00007fff ff800000 0000007f 80000000     ................
   13c84:	00001fff ff000000 0000007f 80000000     ................
   13c94:	000007ff fc000000 0000007f 80000000     ................
   13ca4:	000001ff f0000000 0000007f 80000000     ................
   13cb4:	000000ff e0000000 0000007f 80000000     ................
   13cc4:	0000003f 80000000 0000007f 80000000     ?...............
   13cd4:	0000000f 00000000 0000007e 80000000     ........~.......
   13ce4:	00000007 00000000 00000078 80000000     ........x.......
   13cf4:	00000001 00000000 00000070 80000000     ........p.......
	...
   13d0c:	00000040 00000000 00000000 00000000     @...............
   13d1c:	00000000 80000000 00000000 00000000     ................
   13d2c:	00000000 80000000 00000003 00000000     ................
   13d3c:	00000000 80000000 0000000f 00000000     ................
   13d4c:	00000000 80000000 0000003f 00000000     ........?.......
   13d5c:	00000000 80000000 000000ff 00000000     ................
   13d6c:	00000000 80000000 000003ff 00000000     ................
   13d7c:	00000000 80000000 000007ff 00000000     ................
   13d8c:	00000000 80000000 00001fff 00000000     ................
   13d9c:	00000000 80000000 00007fff 00000000     ................
   13dac:	00000000 80000000 0001ffff 00000000     ................
   13dbc:	00000000 80000000 0007ffff 00000000     ................
   13dcc:	00000000 80000000 001fffff 00000000     ................
   13ddc:	00000000 80000000 007fffff 00000000     ................
   13dec:	00000000 80000000 01ffffff 00000000     ................
   13dfc:	00000000 80000000 07ffffff 00000000     ................
   13e0c:	00000000 80000000 1fffffff 00000000     ................
   13e1c:	00000000 80000000 7fffffff 00000000     ................
	...
   13e34:	fffffffc 00000001 00000000 00000000     ................
   13e44:	fffffff0 00000007 00000000 00000000     ................
   13e54:	ffffffc0 0000001f 00000000 00000000     ................
   13e64:	ffffff00 0000007f 00000000 00000000     ................
   13e74:	fffffc00 000001ff 00000000 00000000     ................
   13e84:	fffff000 000007ff 00000000 00000000     ................
   13e94:	ffff8000 00001fff 00000000 00000000     ................
   13ea4:	fffe0000 ffffffff 0000007f 00000000     ................
   13eb4:	fff80000 ffffffff 0000007f 00000000     ................
   13ec4:	ffe00000 ffffffff 0000007f 00000000     ................
   13ed4:	ff800000 ffffffff 0000007f 00000000     ................
   13ee4:	fc000000 ffffffff 0000007f 00000000     ................
   13ef4:	f0000000 ffffffff 0000007f 00000000     ................
   13f04:	c0000000 ffffffff 0000007f 00000000     ................
   13f14:	80000000 ffffffff 0000007f 00000000     ................
   13f24:	e0000000 ffffffff 0000007f 00000000     ................
   13f34:	fc000000 ffffffff 0000007f 00000000     ................
   13f44:	ff000000 ffffffff 0000007f 00000000     ................
   13f54:	ffc00000 ffffffff 0000007f 00000000     ................
   13f64:	fff00000 ffffffff 0000007f 00000000     ................
   13f74:	fffc0000 ffffffff 0000007f 00000000     ................
   13f84:	ffff0000 ffffffff 0000007f 00000000     ................
   13f94:	ffffe000 000007ff 00000000 00000000     ................
   13fa4:	fffff800 000001ff 00000000 00000000     ................
   13fb4:	fffffe00 0000007f 00000000 00000000     ................
   13fc4:	ffffff80 0000003f 00000000 00000000     ....?...........
   13fd4:	ffffffe0 0000000f 00000000 00000000     ................
   13fe4:	fffffffc 00000003 00000000 00000000     ................
   13ff4:	ffffffff 00000000 00000000 80000000     ................
   14004:	3fffffff 00000000 00000000 80000000     ...?............
   14014:	0fffffff 00000000 00000000 80000000     ................
   14024:	03ffffff 00000000 00000000 80000000     ................
   14034:	00ffffff 00000000 00000000 80000000     ................
   14044:	003fffff 00000000 00000000 80000000     ..?.............
   14054:	000fffff 00000000 00000000 80000000     ................
   14064:	0003ffff 00000000 00000000 80000000     ................
   14074:	0000ffff 00000000 00000000 80000000     ................
   14084:	00003fff 00000000 00000000 80000000     .?..............
   14094:	00000fff 00000000 00000000 80000000     ................
   140a4:	000003ff 00000000 00000000 80000000     ................
   140b4:	000000ff 00000000 00000000 80000000     ................
   140c4:	0000003f 00000000 00000000 80000000     ?...............
   140d4:	0000000f 00000000 00000000 80000000     ................
   140e4:	00000003 00000000 00000000 80000000     ................
   140f4:	00000001 00000000 00000000 00000000     ................
	...
   14140:	80000000 000003ff c0000000 0000007f     ................
   14150:	80000000 000003ff f0000000 0000007f     ................
   14160:	80000000 000003ff f8000000 0000007f     ................
   14170:	80000000 000003ff fe000000 0000007f     ................
   14180:	80000000 000003ff ff000000 0000007f     ................
   14190:	80000000 000003ff ffc00000 0000007f     ................
   141a0:	80000000 000003ff ffe00000 0000007f     ................
   141b0:	80000000 000003ff fff80000 0000007f     ................
   141c0:	80000000 000003ff fffc0000 0000007f     ................
   141d0:	80000000 000003ff ffff0000 0000007f     ................
   141e0:	80000000 000003ff ffff8000 0000007f     ................
   141f0:	80000000 000003ff ffffe000 0000007f     ................
   14200:	80000000 000003ff fffff000 0000007f     ................
   14210:	80000000 000003ff fffffc00 0000007f     ................
   14220:	80000000 000003ff fffffe00 0000007f     ................
   14230:	80000000 000003ff ffffff80 0000007f     ................
   14240:	80000000 000003ff ffffffc0 0000007f     ................
   14250:	80000000 000003ff fffffff0 0000007f     ................
   14260:	80000000 000003ff f7fffff8 0000007f     ................
   14270:	80000000 000003ff f3fffffe 0000007f     ................
   14280:	80000000 000003ff f0ffffff 0000007f     ................
   14290:	80000000 c00003ff f07fffff 0000007f     ................
   142a0:	80000000 e00003ff f01fffff 0000007f     ................
   142b0:	80000000 f80003ff f00fffff 0000007f     ................
   142c0:	80000000 fc0003ff f003ffff 0000007f     ................
   142d0:	80000000 ff0003ff f001ffff 0000007f     ................
   142e0:	80000000 ff8003ff f0007fff 0000007f     ................
   142f0:	80000000 ffe003ff f0003fff 0000007f     .........?......
   14300:	80000000 fff003ff f0000fff 0000007f     ................
   14310:	80000000 fffc03ff f00007ff 0000007f     ................
   14320:	80000000 fffe03ff f00001ff 0000007f     ................
   14330:	80000000 ffff83ff f00000ff 0000007f     ................
   14340:	80000000 ffffc3ff f000003f 0000007f     ........?.......
   14350:	80000000 fffff3ff f000001f 0000007f     ................
   14360:	80000000 fffffbff f0000007 0000007f     ................
   14370:	80000000 ffffffff f0000003 0000007f     ................
   14380:	80000000 ffffffff f0000000 0000007f     ................
   14390:	80000000 7fffffff f0000000 0000007f     ................
   143a0:	80000000 1fffffff f0000000 0000007f     ................
   143b0:	80000000 0fffffff f0000000 0000007f     ................
   143c0:	80000000 03ffffff f0000000 0000007f     ................
   143d0:	80000000 01ffffff f0000000 0000007f     ................
   143e0:	80000000 007fffff f0000000 0000007f     ................
   143f0:	80000000 003fffff f0000000 0000007f     ......?.........
   14400:	80000000 000fffff f0000000 0000007f     ................
   14410:	80000000 0007ffff f0000000 0000007f     ................
   14420:	80000000 0001ffff f0000000 0000007f     ................
   14430:	80000000 0000ffff f0000000 0000007f     ................
   14440:	80000000 00003fff f0000000 0000007f     .....?..........
   14450:	80000000 00001fff f0000000 0000007f     ................
   14460:	80000000 000007ff f0000000 0000007f     ................
   14470:	80000000 000003ff f0000000 0000007f     ................
   14480:	80000000 000000ff f0000000 0000007f     ................
   14490:	80000000 0000007f f0000000 0000007f     ................
	...
   14530:	fff80000 ffffffff ffffffff 00ffffff     ................
   14540:	fff80000 ffffffff ffffffff 00ffffff     ................
   14550:	fff80000 ffffffff ffffffff 00ffffff     ................
   14560:	fff80000 ffffffff ffffffff 00ffffff     ................
   14570:	fff80000 ffffffff ffffffff 00ffffff     ................
   14580:	fff80000 ffffffff ffffffff 00ffffff     ................
   14590:	fff80000 ffffffff ffffffff 00ffffff     ................
   145a0:	fff80000 ffffffff ffffffff 00ffffff     ................
   145b0:	fff80000 ffffffff ffffffff 00ffffff     ................
   145c0:	fff80000 ffffffff ffffffff 00ffffff     ................
   145d0:	fff80000 ffffffff ffffffff 00ffffff     ................
   145e0:	fff80000 ffffffff ffffffff 00ffffff     ................
   145f0:	fff80000 ffffffff ffffffff 00ffffff     ................
   14600:	fff80000 ffffffff ffffffff 00ffffff     ................
   14610:	3ff80000 00000000 00000000 00ffe000     ...?............
   14620:	3ff80000 00000000 00000000 00ffe000     ...?............
   14630:	3ff80000 00000000 00000000 00ffe000     ...?............
   14640:	3ff80000 00000000 00000000 00ffe000     ...?............
   14650:	3ff80000 00000000 00000000 00ffe000     ...?............
   14660:	3ff80000 00000000 00000000 00ffe000     ...?............
   14670:	3ff80000 00000000 00000000 00ffe000     ...?............
	...
   14690:	80000000 00000000 00000000 00000000     ................
   146a0:	80000000 00000007 00000000 00000000     ................
   146b0:	80000000 0000003f 00000000 00000000     ....?...........
   146c0:	80000000 000000ff 00000000 00000000     ................
   146d0:	80000000 000007ff 00000000 00000000     ................
   146e0:	80000000 00001fff 00000000 00000000     ................
   146f0:	80000000 0000ffff 00000000 00000000     ................
   14700:	80000000 0007ffff 00000000 00000000     ................
   14710:	80000000 001fffff 00000000 00000000     ................
   14720:	80000000 00ffffff 00000000 00000000     ................
   14730:	80000000 03ffffff 00000000 00000000     ................
   14740:	80000000 1fffffff 00000000 00000000     ................
   14750:	80000000 ffffffff 00000000 00000000     ................
   14760:	80000000 ffffffff 00000003 00000000     ................
   14770:	80000000 ffffffff 0000001f 00000000     ................
   14780:	00000000 fffffffe 0000007f 00000000     ................
   14790:	00000000 fffffff0 000003ff 00000000     ................
   147a0:	00000000 ffffff80 00001fff 00000000     ................
   147b0:	00000000 fffffe00 00007fff 00000000     ................
   147c0:	00000000 fffff000 0003ffff 00000000     ................
   147d0:	00000000 ffffc000 000fffff 00000000     ................
   147e0:	00000000 fffe0000 007fffff 00000000     ................
   147f0:	00000000 fff00000 03ffffff 00000000     ................
   14800:	00000000 ffc00000 0fffffff 00000000     ................
   14810:	00000000 fe000000 7fffffff 00000000     ................
   14820:	00000000 f8000000 ffffffff 00000001     ................
   14830:	00000000 c0000000 ffffffff 0000000f     ................
	...
   14848:	fffffffe 0000007f 00000000 00000000     ................
   14858:	fffffff8 000001ff 00000000 00000000     ................
   14868:	ffffffc0 00000fff 00000000 00000000     ................
   14878:	ffffff00 00001fff 00000000 00000000     ................
   14888:	fffff800 00001fff 00000000 00000000     ................
   14898:	ffffc000 00001fff 00000000 00000000     ................
   148a8:	ffff0000 00001fff 00000000 00000000     ................
   148b8:	fff80000 00001fff 00000000 00000000     ................
   148c8:	ffc00000 00001fff 00000000 00000000     ................
   148d8:	ff000000 00001fff 00000000 00000000     ................
   148e8:	f8000000 00001fff 00000000 00000000     ................
   148f8:	e0000000 00001fff 00000000 00000000     ................
   14908:	00000000 00001fff 00000000 00000000     ................
   14918:	00000000 00001ff8 00000000 00000000     ................
   14928:	00000000 00001fe0 00000000 00000000     ................
   14938:	00000000 00001f00 00000000 00000000     ................
	...
   14950:	3ff80000 00000000 00000000 00ffe000     ...?............
   14960:	3ff80000 00000000 00000000 00ffe000     ...?............
   14970:	3ff80000 00000000 00000000 00ffe000     ...?............
   14980:	3ff80000 00000000 00000000 00ffe000     ...?............
   14990:	3ff80000 00000000 00000000 00ffe000     ...?............
   149a0:	3ff80000 00000000 00000000 00ffe000     ...?............
   149b0:	3ff80000 00000000 00000000 00ffe000     ...?............
   149c0:	fff80000 ffffffff ffffffff 00ffffff     ................
   149d0:	fff80000 ffffffff ffffffff 00ffffff     ................
   149e0:	fff80000 ffffffff ffffffff 00ffffff     ................
   149f0:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a00:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a10:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a20:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a30:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a40:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a50:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a60:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a70:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a80:	fff80000 ffffffff ffffffff 00ffffff     ................
   14a90:	fff80000 ffffffff ffffffff 00ffffff     ................
	...
   14b28:	00000004 00000000 00000000 00000000     ................
   14b38:	00000007 00000000 00000000 e0000000     ................
   14b48:	00000007 00000000 00000000 f8000000     ................
   14b58:	00000007 00000000 00000000 ff000000     ................
   14b68:	00000007 00000000 00000000 ffc00000     ................
   14b78:	00000007 00000000 00000000 fff80000     ................
   14b88:	00000007 00000000 00000000 fffe0000     ................
   14b98:	00000007 00000000 00000000 ffff8000     ................
   14ba8:	00000007 00000000 00000000 fffff000     ................
   14bb8:	00000007 00000000 00000000 fffffc00     ................
   14bc8:	00000007 00000000 00000000 ffffff80     ................
   14bd8:	00000007 00000000 00000000 ffffffe0     ................
	...
   14bf4:	3ffffffc 00000000 00000000 00000000     ...?............
   14c04:	07ffffff 00000000 00000000 80000000     ................
   14c14:	00ffffff 00000000 00000000 80000000     ................
   14c24:	003fffff 00000000 00000000 80000000     ..?.............
   14c34:	0007ffff 00000000 00000000 80000000     ................
   14c44:	0000ffff 00000000 00000000 80000000     ................
   14c54:	00003fff 00000000 00000000 80000000     .?..............
   14c64:	00003fff 00000000 00000000 80000000     .?..............
   14c74:	0000ffff 00000000 00000000 80000000     ................
   14c84:	0007ffff 00000000 00000000 80000000     ................
   14c94:	001fffff 00000000 00000000 80000000     ................
   14ca4:	00ffffff 00000000 00000000 00000000     ................
   14cb4:	07ffffff 00000000 00000000 00000000     ................
   14cc4:	1ffffffc 00000000 00000000 00000000     ................
   14cd4:	ffffffe0 00000000 00000000 00000000     ................
   14ce4:	ffffff80 00000007 00000000 00000000     ................
   14cf4:	fffffe00 00000007 00000000 00000000     ................
   14d04:	fffff000 00000007 00000000 00000000     ................
   14d14:	ffffc000 00000007 00000000 00000000     ................
   14d24:	fffe0000 00000007 00000000 00000000     ................
   14d34:	fff80000 00000007 00000000 00000000     ................
   14d44:	ffc00000 00000007 00000000 00000000     ................
   14d54:	ff000000 00000007 00000000 00000000     ................
   14d64:	f8000000 00000007 00000000 00000000     ................
   14d74:	e0000000 00000007 00000000 00000000     ................
   14d84:	80000000 00000007 00000000 00000000     ................
   14d94:	00000000 00000004 00000000 00000000     ................
	...
   14dcc:	0003ff80 00000000 00000000 00000000     ................
   14ddc:	0003ff80 00000000 00000000 00000000     ................
   14dec:	0003ff80 00000000 00000000 00000000     ................
   14dfc:	0003ff80 00000000 00000000 00000000     ................
   14e0c:	0003ff80 00000000 00000000 00000000     ................
   14e1c:	0003ff80 00000000 00000000 00000000     ................
   14e2c:	0003ff80 00000000 00000000 00000000     ................
   14e3c:	0003ff80 00000000 00000000 00000000     ................
   14e4c:	0003ff80 00000000 00000000 00000000     ................
   14e5c:	0003ff80 00000000 00000000 00000000     ................
   14e6c:	0003ff80 00000000 00000000 00000000     ................
   14e7c:	0003ff80 00000000 00000000 00000000     ................
   14e8c:	0003ff80 00000000 00000000 00000000     ................
   14e9c:	0003ff80 00000000 00000000 00000000     ................
   14eac:	0003ff80 00000000 00000000 00000000     ................
   14ebc:	0003ff80 00000000 00000000 00000000     ................
   14ecc:	0003ff80 00000000 00000000 00000000     ................
   14edc:	0003ff80 00000000 00000000 00000000     ................
   14eec:	0003ff80 00000000 00000000 00000000     ................
   14efc:	0003ff80 00000000 00000000 00000000     ................
   14f0c:	0003ff80 00000000 00000000 00000000     ................
   14f1c:	0003ff80 00000000 00000000 00000000     ................
   14f2c:	0003ff80 00000000 00000000 00000000     ................
   14f3c:	0003ff80 00000000 00000000 00000000     ................
   14f4c:	0003ff80 00000000 00000000 00000000     ................
   14f5c:	0003ff80 00000000 00000000 00000000     ................
   14f6c:	0003ff80 00000000 00000000 00000000     ................
   14f7c:	0003ff80 00000000 00000000 00000000     ................
   14f8c:	0003ff80 00000000 00000000 00000000     ................
   14f9c:	0003ff80 00000000 00000000 00000000     ................
   14fac:	0003ff80 00000000 00000000 00000000     ................
   14fbc:	0003ff80 00000000 00000000 00000000     ................
   14fcc:	0003ff80 00000000 00000000 00000000     ................
   14fdc:	0003ff80 00000000 00000000 00000000     ................
   14fec:	0003ff80 00000000 00000000 00000000     ................
   14ffc:	0003ff80 00000000 00000000 00000000     ................
   1500c:	0003ff80 00000000 00000000 00000000     ................
   1501c:	0003ff80 00000000 00000000 00000000     ................
   1502c:	0003ff80 00000000 00000000 00000000     ................
   1503c:	0003ff80 00000000 00000000 00000000     ................
   1504c:	0003ff80 00000000 00000000 00000000     ................
   1505c:	0003ff80 00000000 00000000 00000000     ................
   1506c:	0003ff80 00000000 00000000 00000000     ................
   1507c:	0003ff80 00000000 00000000 00000000     ................
   1508c:	0003ff80 00000000 00000000 00000000     ................
	...
   150c0:	10000000 00000000 00000000 00000000     ................
   150d0:	30000000 00000000 00000000 00000000     ...0............
   150e0:	70000000 00000000 00000000 00000000     ...p............
   150f0:	f0000000 00000000 00000000 00000000     ................
   15100:	f0000000 00000001 00000000 00000000     ................
   15110:	f0000000 00000007 00000000 00000000     ................
   15120:	f0000000 0000000f 00000000 00000000     ................
   15130:	f0000000 0000001f 00000000 00000000     ................
   15140:	f0000000 0000003f 00000000 00000000     ....?...........
   15150:	f0000000 0000007f 00000000 00000000     ................
   15160:	f0000000 000000ff 00000000 00000000     ................
   15170:	f0000000 000001ff 00000000 00000000     ................
   15180:	f0000000 000003ff 00000000 00000000     ................
   15190:	f0000000 000007ff 00000000 00000000     ................
   151a0:	f0000000 000007ff 00000000 00000000     ................
   151b0:	e0000000 000007ff 00000000 00000000     ................
   151c0:	c0000000 000007ff 00000000 00000000     ................
   151d0:	00000000 000007ff 00000000 00000000     ................
   151e0:	00000000 000007fe 00000000 00000000     ................
   151f0:	00000000 000007f8 00000000 00000000     ................
   15200:	00000000 000007f0 00000000 00000000     ................
   15210:	00000000 000007c0 00000000 00000000     ................
   15220:	00000000 00000780 00000000 00000000     ................
   15230:	00000000 00000600 00000000 00000000     ................
   15240:	00000000 00000400 00000000 00000000     ................
	...
   152d8:	03c00000 00000000 00000000 00000000     ................
   152e8:	3ffc0000 00000000 00000000 e0000000     ...?............
   152f8:	ffff0003 00000000 00000000 f8000000     ................
   15308:	ffffc003 00000001 00000000 fe000000     ................
   15318:	ffffe003 00000007 00000000 ff000000     ................
   15328:	fffff003 0000000f 00000000 ff800000     ................
   15338:	fffff003 0000000f 00000000 ffc00000     ................
   15348:	fffff803 0000001f 00000000 ffe00000     ................
   15358:	fffffc03 0000003f 00000000 ffe00000     ....?...........
   15368:	fffffc03 0000003f 00000000 fff00000     ....?...........
   15378:	fffffe03 0000007f 00000000 fff00000     ................
   15388:	fffffe03 0000007f 00000000 fff80000     ................
   15398:	fffffe03 0000007f 00000000 fff80000     ................
   153a8:	ffffff03 0000007f 00000000 fffc0000     ................
   153b8:	ffffff03 000000ff 00000000 fffc0000     ................
   153c8:	fc07ff03 000000ff 00000000 7ffc0000     ................
   153d8:	f803ff00 000000ff 00000000 3ffc0000     ...............?
   153e8:	f001ff00 000000ff 00000000 1ffe0000     ................
   153f8:	e000ff80 000000ff 00000000 1ffe0000     ................
   15408:	e000ff80 000000ff 00000000 0ffe0000     ................
   15418:	e000ff80 000000ff 00000000 0ffe0000     ................
   15428:	e0007f80 000000ff 00000000 0ffe0000     ................
   15438:	e0007f80 000000ff 00000000 0ffe0000     ................
   15448:	e0007f80 0000007f 00000000 0ffe0000     ................
   15458:	e0007f80 0000007f 00000000 0ffe0000     ................
   15468:	f0007f80 0000007f 00000000 0ffe0000     ................
   15478:	f0007f80 0000003f 00000000 1ffe0000     ....?...........
   15488:	f0007f80 0000003f 00000000 1ffe0000     ....?...........
   15498:	f8007f80 0000001f 00000000 3ffe0000     ...............?
   154a8:	fc007f80 0000001f 00000000 fffc0000     ................
   154b8:	fe007f80 0000000f 00000000 fffc0000     ................
   154c8:	ffffffff 00000007 00000000 fffc0000     ................
   154d8:	ffffffff 0000001f 00000000 fffc0000     ................
   154e8:	ffffffff 0000007f 00000000 fff80000     ................
   154f8:	ffffffff 0000007f 00000000 fff80000     ................
   15508:	ffffffff 0000007f 00000000 fff00000     ................
   15518:	ffffffff 0000007f 00000000 fff00000     ................
   15528:	ffffffff 0000007f 00000000 ffe00000     ................
   15538:	ffffffff 0000007f 00000000 ffc00000     ................
   15548:	ffffffff 0000007f 00000000 ffc00000     ................
   15558:	ffffffff 0000007f 00000000 ff800000     ................
   15568:	ffffffff 0000007f 00000000 fe000000     ................
   15578:	ffffffff 0000007f 00000000 fc000000     ................
   15588:	ffffffff 0000007f 00000000 e0000000     ................
   15598:	ffffffff 0000007f 00000000 00000000     ................
   155a8:	fffffffe 0000007f 00000000 00000000     ................
   155b8:	00000000 00000078 00000000 00000000     ....x...........
   155c8:	00000000 00000040 00000000 00000000     ....@...........
	...
   15660:	f8000000 ffffffff ffffffff 0000007f     ................
   15670:	f8000000 ffffffff ffffffff 0000007f     ................
   15680:	f8000000 ffffffff ffffffff 0000007f     ................
   15690:	f8000000 ffffffff ffffffff 0000007f     ................
   156a0:	f8000000 ffffffff ffffffff 0000007f     ................
   156b0:	f8000000 ffffffff ffffffff 0000007f     ................
   156c0:	f8000000 ffffffff ffffffff 0000007f     ................
   156d0:	f8000000 ffffffff ffffffff 0000007f     ................
   156e0:	f8000000 ffffffff ffffffff 0000007f     ................
   156f0:	f8000000 ffffffff ffffffff 0000007f     ................
   15700:	f8000000 ffffffff ffffffff 0000007f     ................
   15710:	f8000000 ffffffff ffffffff 0000007f     ................
   15720:	f8000000 ffffffff ffffffff 0000003f     ............?...
   15730:	f8000000 ffffffff ffffffff 00000003     ................
   15740:	00000000 ffc00000 fe000000 00000007     ................
   15750:	00000000 7fe00000 fc000000 0000000f     ................
   15760:	00000000 3ff00000 f8000000 0000001f     .......?........
   15770:	00000000 1ff00000 f0000000 0000001f     ................
   15780:	00000000 1ff80000 f0000000 0000003f     ............?...
   15790:	00000000 1ffc0000 f0000000 0000007f     ................
   157a0:	00000000 0ffc0000 e0000000 0000007f     ................
   157b0:	00000000 0ffc0000 e0000000 0000007f     ................
   157c0:	00000000 0ffe0000 e0000000 000000ff     ................
   157d0:	00000000 0ffe0000 e0000000 000000ff     ................
   157e0:	00000000 0ffe0000 e0000000 000000ff     ................
   157f0:	00000000 0ffe0000 e0000000 000000ff     ................
   15800:	00000000 0ffe0000 e0000000 000000ff     ................
   15810:	00000000 1ffe0000 f0000000 000000ff     ................
   15820:	00000000 1ffe0000 f0000000 000000ff     ................
   15830:	00000000 3ffe0000 f8000000 000000ff     .......?........
   15840:	00000000 7ffe0000 fc000000 000000ff     ................
   15850:	00000000 fffe0000 ff000001 000000ff     ................
   15860:	00000000 fffc0000 ffe0000f 0000007f     ................
   15870:	00000000 fffc0000 ffffffff 0000007f     ................
   15880:	00000000 fffc0000 ffffffff 0000007f     ................
   15890:	00000000 fff80000 ffffffff 0000003f     ............?...
   158a0:	00000000 fff80000 ffffffff 0000003f     ............?...
   158b0:	00000000 fff00000 ffffffff 0000001f     ................
   158c0:	00000000 ffe00000 ffffffff 0000000f     ................
   158d0:	00000000 ffe00000 ffffffff 0000000f     ................
   158e0:	00000000 ffc00000 ffffffff 00000007     ................
   158f0:	00000000 ff800000 ffffffff 00000003     ................
   15900:	00000000 fe000000 ffffffff 00000000     ................
   15910:	00000000 fc000000 7fffffff 00000000     ................
   15920:	00000000 f0000000 1fffffff 00000000     ................
   15930:	00000000 c0000000 07ffffff 00000000     ................
	...
   15948:	00fffffc 00000000 00000000 00000000     ................
   15958:	0001ff00 00000000 00000000 00000000     ................
	...
   159c8:	0000fe00 00000000 00000000 00000000     ................
   159d8:	003ffff8 00000000 00000000 00000000     ..?.............
   159e8:	01ffffff 00000000 00000000 e0000000     ................
   159f8:	0fffffff 00000000 00000000 f0000000     ................
   15a08:	1fffffff 00000000 00000000 fc000000     ................
   15a18:	7fffffff 00000000 00000000 fe000000     ................
   15a28:	ffffffff 00000000 00000000 ff000000     ................
   15a38:	ffffffff 00000001 00000000 ff800000     ................
   15a48:	ffffffff 00000003 00000000 ffc00000     ................
   15a58:	ffffffff 00000007 00000000 ffe00000     ................
   15a68:	ffffffff 0000000f 00000000 fff00000     ................
   15a78:	ffffffff 0000000f 00000000 fff00000     ................
   15a88:	ffffffff 0000001f 00000000 fff80000     ................
   15a98:	ffffffff 0000003f 00000000 fff80000     ....?...........
   15aa8:	ffffffff 0000003f 00000000 fff80000     ....?...........
   15ab8:	ffe0000f 0000003f 00000000 fffc0000     ....?...........
   15ac8:	ff000001 0000007f 00000000 7ffc0000     ................
   15ad8:	fc000000 0000007f 00000000 3ffc0000     ...............?
   15ae8:	f8000000 0000007f 00000000 1ffe0000     ................
   15af8:	f0000000 000000ff 00000000 1ffe0000     ................
   15b08:	f0000000 000000ff 00000000 0ffe0000     ................
   15b18:	e0000000 000000ff 00000000 0ffe0000     ................
   15b28:	e0000000 000000ff 00000000 0ffe0000     ................
   15b38:	e0000000 000000ff 00000000 0ffe0000     ................
   15b48:	e0000000 000000ff 00000000 0ffe0000     ................
   15b58:	e0000000 000000ff 00000000 0ffe0000     ................
   15b68:	e0000000 000000ff 00000000 0ffe0000     ................
   15b78:	e0000000 000000ff 00000000 1ffe0000     ................
   15b88:	f0000000 000000ff 00000000 1ffe0000     ................
   15b98:	f0000000 000000ff 00000000 3ffe0000     ...............?
   15ba8:	f8000000 0000007f 00000000 7ffc0000     ................
   15bb8:	fc000000 0000007f 00000000 fffc0000     ................
   15bc8:	fe000000 0000007f 00000000 fffc0000     ................
   15bd8:	ff800007 0000007f 00000000 fff80000     ................
   15be8:	ffe0003f 0000003f 00000000 fff80000     ?...?...........
   15bf8:	ffe0003f 0000003f 00000000 fff80000     ?...?...........
   15c08:	ffe0003f 0000001f 00000000 fff00000     ?...............
   15c18:	ffe0003f 0000001f 00000000 ffe00000     ?...............
   15c28:	ffe0003f 0000000f 00000000 ffe00000     ?...............
   15c38:	ffe0003f 0000000f 00000000 ffc00000     ?...............
   15c48:	ffe0003f 00000007 00000000 ff800000     ?...............
   15c58:	ffe0003f 00000003 00000000 ff000000     ?...............
   15c68:	ffe0003f 00000001 00000000 fe000000     ?...............
   15c78:	ffe0003f 00000000 00000000 f8000000     ?...............
   15c88:	3fe0003f 00000000 00000000 e0000000     ?..?............
   15c98:	0fe0003f 00000000 00000000 00000000     ?...............
   15ca8:	03e0003f 00000000 00000000 00000000     ?...............
	...
   15d18:	0001ff80 00000000 00000000 00000000     ................
   15d28:	007ffffc 00000000 00000000 80000000     ................
   15d38:	03ffffff 00000000 00000000 f0000000     ................
   15d48:	1fffffff 00000000 00000000 fc000000     ................
   15d58:	3fffffff 00000000 00000000 fe000000     ...?............
   15d68:	ffffffff 00000000 00000000 ff000000     ................
   15d78:	ffffffff 00000001 00000000 ffc00000     ................
   15d88:	ffffffff 00000003 00000000 ffc00000     ................
   15d98:	ffffffff 00000007 00000000 ffe00000     ................
   15da8:	ffffffff 0000000f 00000000 fff00000     ................
   15db8:	ffffffff 0000001f 00000000 fff80000     ................
   15dc8:	ffffffff 0000003f 00000000 fff80000     ....?...........
   15dd8:	ffffffff 0000003f 00000000 fffc0000     ....?...........
   15de8:	ffffffff 0000007f 00000000 fffc0000     ................
   15df8:	ffffffff 0000007f 00000000 fffc0000     ................
   15e08:	ffe0000f 0000007f 00000000 fffe0000     ................
   15e18:	ff000001 000000ff 00000000 fffe0000     ................
   15e28:	fe000000 000000ff 00000000 7ffe0000     ................
   15e38:	f8000000 000000ff 00000000 3ffe0000     ...............?
   15e48:	f8000000 000000ff 00000000 1ffe0000     ................
   15e58:	f0000000 000000ff 00000000 1ffe0000     ................
   15e68:	f0000000 000000ff 00000000 0ffe0000     ................
   15e78:	e0000000 000000ff 00000000 0ffe0000     ................
   15e88:	e0000000 000000ff 00000000 0ffe0000     ................
   15e98:	e0000000 000000ff 00000000 0ffe0000     ................
   15ea8:	e0000000 0000007f 00000000 0ffc0000     ................
   15eb8:	e0000000 0000007f 00000000 0ffc0000     ................
   15ec8:	e0000000 0000007f 00000000 1ff80000     ................
   15ed8:	f0000000 0000003f 00000000 1ff80000     ....?...........
   15ee8:	f0000000 0000003f 00000000 1ff00000     ....?...........
   15ef8:	f0000000 0000001f 00000000 3ff00000     ...............?
   15f08:	f8000000 0000001f 00000000 7fe00000     ................
   15f18:	fc000000 0000000f 00000000 ffc00000     ................
   15f28:	ff000001 00000007 f8000000 ffffffff     ................
   15f38:	ffffffff 00000003 f8000000 ffffffff     ................
   15f48:	ffffffff 0000007f f8000000 ffffffff     ................
   15f58:	ffffffff 0000007f f8000000 ffffffff     ................
   15f68:	ffffffff 0000007f f8000000 ffffffff     ................
   15f78:	ffffffff 0000007f f8000000 ffffffff     ................
   15f88:	ffffffff 0000007f f8000000 ffffffff     ................
   15f98:	ffffffff 0000007f f8000000 ffffffff     ................
   15fa8:	ffffffff 0000007f f8000000 ffffffff     ................
   15fb8:	ffffffff 0000007f f8000000 ffffffff     ................
   15fc8:	ffffffff 0000007f f8000000 ffffffff     ................
   15fd8:	ffffffff 0000007f f8000000 ffffffff     ................
   15fe8:	ffffffff 0000007f f8000000 ffffffff     ................
   15ff8:	ffffffff 0000007f f8000000 ffffffff     ................
   16008:	ffffffff 0000007f 00000000 00000000     ................
	...
   160b8:	001fffe0 00000000 00000000 00000000     ................
   160c8:	00fffffe 00000000 00000000 80000000     ................
   160d8:	03ffffff 00000000 00000000 e0000000     ................
   160e8:	0fffffff 00000000 00000000 f8000000     ................
   160f8:	3fffffff 00000000 00000000 fc000000     ...?............
   16108:	7fffffff 00000000 00000000 fe000000     ................
   16118:	ffffffff 00000000 00000000 ff000000     ................
   16128:	ffffffff 00000001 00000000 ff800000     ................
   16138:	ffffffff 00000003 00000000 ffc00000     ................
   16148:	ffffffff 00000007 00000000 ffe00000     ................
   16158:	ffffffff 0000000f 00000000 ffe00000     ................
   16168:	ffffffff 0000000f 00000000 fff00000     ................
   16178:	ffffffff 0000001f 00000000 fff80000     ................
   16188:	ffffffff 0000001f 00000000 fff80000     ................
   16198:	fff9ffbf 0000003f 00000000 fff80000     ....?...........
   161a8:	ffc1ff87 0000003f 00000000 fffc0000     ....?...........
   161b8:	ff81ff81 0000007f 00000000 7ffc0000     ................
   161c8:	fe01ff80 0000007f 00000000 3ffc0000     ...............?
   161d8:	fc01ff80 0000007f 00000000 1ffe0000     ................
   161e8:	f801ff80 0000007f 00000000 1ffe0000     ................
   161f8:	f801ff80 000000ff 00000000 0ffe0000     ................
   16208:	f001ff80 000000ff 00000000 0ffe0000     ................
   16218:	f001ff80 000000ff 00000000 0ffe0000     ................
   16228:	e001ff80 000000ff 00000000 0ffe0000     ................
   16238:	e001ff80 000000ff 00000000 0ffe0000     ................
   16248:	e001ff80 000000ff 00000000 0ffe0000     ................
   16258:	e001ff80 000000ff 00000000 0ffe0000     ................
   16268:	e001ff80 000000ff 00000000 1ffe0000     ................
   16278:	e001ff80 000000ff 00000000 1ffe0000     ................
   16288:	e001ff80 000000ff 00000000 3ffc0000     ...............?
   16298:	e001ff80 000000ff 00000000 3ffc0000     ...............?
   162a8:	f001ff80 000000ff 00000000 fffc0000     ................
   162b8:	f001ff80 0000007f 00000000 fffc0000     ................
   162c8:	f001ff83 0000007f 00000000 fff80000     ................
   162d8:	f801ffff 0000007f 00000000 fff80000     ................
   162e8:	f801ffff 0000007f 00000000 fff00000     ................
   162f8:	fc01ffff 0000003f 00000000 fff00000     ....?...........
   16308:	fe01ffff 0000003f 00000000 ffe00000     ....?...........
   16318:	ff01ffff 0000001f 00000000 ffc00000     ................
   16328:	ff81ffff 0000001f 00000000 ffc00000     ................
   16338:	ff81ffff 0000000f 00000000 ff800000     ................
   16348:	ff01ffff 0000000f 00000000 ff000000     ................
   16358:	fe01ffff 00000007 00000000 fc000000     ................
   16368:	fc01ffff 00000003 00000000 f8000000     ................
   16378:	f001ffff 00000001 00000000 e0000000     ................
   16388:	e001ffff 00000000 00000000 00000000     ................
   16398:	4001ffff 00000000 00000000 00000000     ...@............
   163a8:	0001fff0 00000000 00000000 00000000     ................
	...
   163f4:	0ffc0000 00000000 00000000 00000000     ................
   16404:	0ffc0000 00000000 00000000 00000000     ................
   16414:	0ffc0000 00000000 00000000 00000000     ................
   16424:	0ffc0000 00000000 00000000 00000000     ................
   16434:	0ffc0000 00000000 00000000 00000000     ................
   16444:	0ffc0000 00000000 00000000 00000000     ................
   16454:	0ffc0000 00000000 00000000 00000000     ................
   16464:	0ffc0000 00000000 00000000 00000000     ................
   16474:	fffffc00 ffffffff 0000007f 00000000     ................
   16484:	ffffffe0 ffffffff 0000007f 00000000     ................
   16494:	fffffff8 ffffffff 0000007f 00000000     ................
   164a4:	fffffffe ffffffff 0000007f 00000000     ................
   164b4:	ffffffff ffffffff 0000007f 80000000     ................
   164c4:	ffffffff ffffffff 0000007f c0000000     ................
   164d4:	ffffffff ffffffff 0000007f e0000000     ................
   164e4:	ffffffff ffffffff 0000007f e0000000     ................
   164f4:	ffffffff ffffffff 0000007f f0000000     ................
   16504:	ffffffff ffffffff 0000007f f0000000     ................
   16514:	ffffffff ffffffff 0000007f f8000000     ................
   16524:	ffffffff ffffffff 0000007f f8000000     ................
   16534:	ffffffff ffffffff 0000007f f8000000     ................
   16544:	ffffffff ffffffff 0000007f fc000000     ................
   16554:	ffffffff ffffffff 0000007f fc000000     ................
   16564:	0ffc01ff 00000000 00000000 fc000000     ................
   16574:	0ffc007f 00000000 00000000 fc000000     ................
   16584:	0ffc003f 00000000 00000000 fc000000     ?...............
   16594:	0ffc003f 00000000 00000000 fc000000     ?...............
   165a4:	0ffc001f 00000000 00000000 fc000000     ................
   165b4:	0ffc001f 00000000 00000000 fc000000     ................
   165c4:	0ffc001f 00000000 00000000 fc000000     ................
   165d4:	0ffc001f 00000000 00000000 fc000000     ................
   165e4:	0ffc001f 00000000 00000000 fc000000     ................
   165f4:	0ffc001f 00000000 00000000 f8000000     ................
   16604:	0000001f 00000000 00000000 f8000000     ................
   16614:	0000001f 00000000 00000000 00000000     ................
	...
   16668:	003ffff8 00000000 00000000 00000000     ..?.............
   16678:	01ffffff 00000000 00000000 e0000000     ................
   16688:	0fffffff 00000000 00000000 f8000000     ................
   16698:	3fffffff 00080000 00000000 fc000000     ...?............
   166a8:	7fffffff 001e0000 00000000 ff000000     ................
   166b8:	ffffffff 003f0000 00000000 ff800000     ......?.........
   166c8:	ffffffff 007f8003 00000000 ffc00000     ................
   166d8:	ffffffff 00ffe007 00000000 ffe00000     ................
   166e8:	ffffffff 00fff00f 00000000 fff00000     ................
   166f8:	ffffffff 01fff80f 00000000 fff00000     ................
   16708:	ffffffff 01fff01f 00000000 fff80000     ................
   16718:	ffffffff 03ffe03f 00000000 fff80000     ....?...........
   16728:	ffffffff 03ffc03f 00000000 fffc0000     ....?...........
   16738:	ffffffff 03ff807f 00000000 fffc0000     ................
   16748:	fff0003f 07ff807f 00000000 fffc0000     ?...............
   16758:	ff800007 07ff007f 00000000 fffe0000     ................
   16768:	ff000001 07ff00ff 00000000 7ffe0000     ................
   16778:	fc000000 0fff00ff 00000000 3ffe0000     ...............?
   16788:	f8000000 0ffe00ff 00000000 3ffe0000     ...............?
   16798:	f0000000 0ffe00ff 00000000 1ffe0000     ................
   167a8:	f0000000 0ffe00ff 00000000 1ffe0000     ................
   167b8:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   167c8:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   167d8:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   167e8:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   167f8:	e0000000 0ffe00ff 00000000 0ffc0000     ................
   16808:	e0000000 0fff007f 00000000 0ffc0000     ................
   16818:	e0000000 0fff007f 00000000 0ffc0000     ................
   16828:	f0000000 0fff007f 00000000 1ff80000     ................
   16838:	f0000000 07ff803f 00000000 1ff80000     ....?...........
   16848:	f0000000 07ffc01f 00000000 3ff00000     ...............?
   16858:	f8000000 07ffe01f 00000000 7fe00000     ................
   16868:	fc000000 07fff00f 00000000 ffc00000     ................
   16878:	fe000000 03fffc07 00000000 ff800000     ................
   16888:	ffffffff 03ffffff 00000000 fffc0000     ................
   16898:	ffffffff 03ffffff 00000000 fffc0000     ................
   168a8:	ffffffff 01ffffff 00000000 fffc0000     ................
   168b8:	ffffffff 01ffffff 00000000 fffc0000     ................
   168c8:	ffffffff 00ffffff 00000000 fffc0000     ................
   168d8:	ffffffff 007fffff 00000000 fffc0000     ................
   168e8:	ffffffff 007fffff 00000000 fffc0000     ................
   168f8:	ffffffff 003fffff 00000000 fffc0000     ......?.........
   16908:	ffffffff 001fffff 00000000 fffc0000     ................
   16918:	ffffffff 000fffff 00000000 fffc0000     ................
   16928:	ffffffff 0003ffff 00000000 fffc0000     ................
   16938:	ffffffff 0001ffff 00000000 fffc0000     ................
   16948:	ffffffff 00007fff 00000000 fffc0000     ................
   16958:	ffffffff 00000fff 00000000 00000000     ................
	...
   16a10:	f8000000 ffffffff ffffffff 0000007f     ................
   16a20:	f8000000 ffffffff ffffffff 0000007f     ................
   16a30:	f8000000 ffffffff ffffffff 0000007f     ................
   16a40:	f8000000 ffffffff ffffffff 0000007f     ................
   16a50:	f8000000 ffffffff ffffffff 0000007f     ................
   16a60:	f8000000 ffffffff ffffffff 0000007f     ................
   16a70:	f8000000 ffffffff ffffffff 0000007f     ................
   16a80:	f8000000 ffffffff ffffffff 0000007f     ................
   16a90:	f8000000 ffffffff ffffffff 0000007f     ................
   16aa0:	f8000000 ffffffff ffffffff 0000007f     ................
   16ab0:	f8000000 ffffffff ffffffff 0000007f     ................
   16ac0:	f8000000 ffffffff ffffffff 0000007f     ................
   16ad0:	f8000000 ffffffff ffffffff 0000007f     ................
   16ae0:	f8000000 ffffffff ffffffff 0000007f     ................
   16af0:	f8000000 ffffffff ffffffff 0000007f     ................
   16b00:	00000000 ff800000 00000000 00000000     ................
   16b10:	00000000 3fc00000 00000000 00000000     .......?........
   16b20:	00000000 3fe00000 00000000 00000000     .......?........
   16b30:	00000000 1ff00000 00000000 00000000     ................
   16b40:	00000000 1ff00000 00000000 00000000     ................
   16b50:	00000000 0ff80000 00000000 00000000     ................
   16b60:	00000000 0ffc0000 00000000 00000000     ................
   16b70:	00000000 0ffc0000 00000000 00000000     ................
   16b80:	00000000 0ffc0000 00000000 00000000     ................
   16b90:	00000000 0ffe0000 00000000 00000000     ................
   16ba0:	00000000 0ffe0000 00000000 00000000     ................
   16bb0:	00000000 0ffe0000 00000000 00000000     ................
   16bc0:	00000000 1ffe0000 00000000 00000000     ................
   16bd0:	00000000 1ffe0000 00000000 00000000     ................
   16be0:	00000000 3ffe0000 00000000 00000000     .......?........
   16bf0:	00000000 3ffe0000 00000000 00000000     .......?........
   16c00:	00000000 fffe0000 00000000 00000000     ................
   16c10:	00000000 fffe0000 ffffffff 0000007f     ................
   16c20:	00000000 fffe0000 ffffffff 0000007f     ................
   16c30:	00000000 fffc0000 ffffffff 0000007f     ................
   16c40:	00000000 fffc0000 ffffffff 0000007f     ................
   16c50:	00000000 fffc0000 ffffffff 0000007f     ................
   16c60:	00000000 fff80000 ffffffff 0000007f     ................
   16c70:	00000000 fff80000 ffffffff 0000007f     ................
   16c80:	00000000 fff00000 ffffffff 0000007f     ................
   16c90:	00000000 ffe00000 ffffffff 0000007f     ................
   16ca0:	00000000 ffc00000 ffffffff 0000007f     ................
   16cb0:	00000000 ff800000 ffffffff 0000007f     ................
   16cc0:	00000000 ff000000 ffffffff 0000007f     ................
   16cd0:	00000000 fc000000 ffffffff 0000007f     ................
   16ce0:	00000000 e0000000 ffffffff 0000007f     ................
	...
   16da4:	00000010 00000000 00000000 00000000     ................
   16db4:	fffc00fe ffffffff 0000007f 80000000     ................
   16dc4:	fffc03ff ffffffff 0000007f c0000000     ................
   16dd4:	fffc07ff ffffffff 0000007f c0000000     ................
   16de4:	fffc07ff ffffffff 0000007f e0000000     ................
   16df4:	fffc0fff ffffffff 0000007f e0000000     ................
   16e04:	fffc0fff ffffffff 0000007f e0000000     ................
   16e14:	fffc0fff ffffffff 0000007f e0000000     ................
   16e24:	fffc0fff ffffffff 0000007f e0000000     ................
   16e34:	fffc0fff ffffffff 0000007f e0000000     ................
   16e44:	fffc0fff ffffffff 0000007f e0000000     ................
   16e54:	fffc0fff ffffffff 0000007f c0000000     ................
   16e64:	fffc07ff ffffffff 0000007f c0000000     ................
   16e74:	fffc07ff ffffffff 0000007f 80000000     ................
   16e84:	fffc03ff ffffffff 0000007f 00000000     ................
   16e94:	fffc00fe ffffffff 0000007f 00000000     ................
	...
   16f0c:	1ffc0000 00000000 00000000 00000000     ................
   16f1c:	1ffc0000 00000000 00000000 00000000     ................
   16f2c:	1ffc0000 00000000 00000000 00000000     ................
   16f3c:	1ffe0000 00000000 00000000 00000000     ................
   16f4c:	1fff0000 00000000 0000007c 00000000     ........|.......
   16f5c:	1fff8000 00000000 fffc01ff ffffffff     ................
   16f6c:	1fffffff 80000000 fffc03ff ffffffff     ................
   16f7c:	0fffffff c0000000 fffc07ff ffffffff     ................
   16f8c:	0fffffff c0000000 fffc07ff ffffffff     ................
   16f9c:	0fffffff e0000000 fffc0fff ffffffff     ................
   16fac:	0fffffff e0000000 fffc0fff ffffffff     ................
   16fbc:	07ffffff e0000000 fffc0fff ffffffff     ................
   16fcc:	07ffffff e0000000 fffc0fff ffffffff     ................
   16fdc:	03ffffff e0000000 fffc0fff ffffffff     ................
   16fec:	01ffffff e0000000 fffc0fff ffffffff     ................
   16ffc:	00ffffff c0000000 fffc07ff ffffffff     ................
   1700c:	007fffff c0000000 fffc07ff ffffffff     ................
   1701c:	003fffff 80000000 fffc03ff ffffffff     ..?.............
   1702c:	000fffff 00000000 fffc01ff ffffffff     ................
   1703c:	0003ffff 00000000 0000007c 00000000     ........|.......
	...
   170f0:	f8000000 ffffffff ffffffff 0000007f     ................
   17100:	f8000000 ffffffff ffffffff 0000007f     ................
   17110:	f8000000 ffffffff ffffffff 0000007f     ................
   17120:	f8000000 ffffffff ffffffff 0000007f     ................
   17130:	f8000000 ffffffff ffffffff 0000007f     ................
   17140:	f8000000 ffffffff ffffffff 0000007f     ................
   17150:	f8000000 ffffffff ffffffff 0000007f     ................
   17160:	f8000000 ffffffff ffffffff 0000007f     ................
   17170:	f8000000 ffffffff ffffffff 0000007f     ................
   17180:	f8000000 ffffffff ffffffff 0000007f     ................
   17190:	f8000000 ffffffff ffffffff 0000007f     ................
   171a0:	f8000000 ffffffff ffffffff 0000007f     ................
   171b0:	f8000000 ffffffff ffffffff 0000007f     ................
   171c0:	f8000000 ffffffff ffffffff 0000007f     ................
   171d0:	f8000000 ffffffff ffffffff 0000007f     ................
	...
   171e8:	003ffff0 00000000 00000000 00000000     ..?.............
   171f8:	001ffff8 00000000 00000000 00000000     ................
   17208:	000ffffc 00000000 00000000 00000000     ................
   17218:	0007fffe 00000000 00000000 00000000     ................
   17228:	0003ffff 00000000 00000000 c0000000     ................
   17238:	0007ffff 00000000 00000000 e0000000     ................
   17248:	000fffff 00000000 00000000 f0000000     ................
   17258:	003fffff 00000000 00000000 f8000000     ..?.............
   17268:	007fffff 00000000 00000000 fc000000     ................
   17278:	01ffffff 00000000 00000000 fe000000     ................
   17288:	03ffffff 00000000 00000000 ff800000     ................
   17298:	0fffffff 00000000 00000000 ffc00000     ................
   172a8:	3fffffff 00000000 00000000 ffe00000     ...?............
   172b8:	7fffffff 00000000 00000000 fff00000     ................
   172c8:	fffffeff 00000001 00000000 fff80000     ................
   172d8:	fffffc3f 00000003 00000000 fffc0000     ?...............
   172e8:	fffff01f 0000000f 00000000 fffc0000     ................
   172f8:	ffffe00f 0000001f 00000000 fffc0000     ................
   17308:	ffff8007 0000007f 00000000 fffc0000     ................
   17318:	ffff0003 0000007f 00000000 fffc0000     ................
   17328:	fffc0001 0000007f 00000000 7ffc0000     ................
   17338:	fff80000 0000007f 00000000 3ffc0000     ...............?
   17348:	ffe00000 0000007f 00000000 1ffc0000     ................
   17358:	ffc00000 0000007f 00000000 0ffc0000     ................
   17368:	ff000000 0000007f 00000000 07fc0000     ................
   17378:	fe000000 0000007f 00000000 03fc0000     ................
   17388:	f8000000 0000007f 00000000 01fc0000     ................
   17398:	f0000000 0000007f 00000000 007c0000     ..............|.
   173a8:	c0000000 0000007f 00000000 003c0000     ..............<.
   173b8:	80000000 0000007f 00000000 001c0000     ................
   173c8:	00000000 0000007f 00000000 000c0000     ................
   173d8:	00000000 0000007c 00000000 00040000     ....|...........
   173e8:	00000000 00000078 00000000 00000000     ....x...........
   173f8:	00000000 00000060 00000000 00000000     ....`...........
	...
   17460:	f8000000 ffffffff ffffffff 0000007f     ................
   17470:	f8000000 ffffffff ffffffff 0000007f     ................
   17480:	f8000000 ffffffff ffffffff 0000007f     ................
   17490:	f8000000 ffffffff ffffffff 0000007f     ................
   174a0:	f8000000 ffffffff ffffffff 0000007f     ................
   174b0:	f8000000 ffffffff ffffffff 0000007f     ................
   174c0:	f8000000 ffffffff ffffffff 0000007f     ................
   174d0:	f8000000 ffffffff ffffffff 0000007f     ................
   174e0:	f8000000 ffffffff ffffffff 0000007f     ................
   174f0:	f8000000 ffffffff ffffffff 0000007f     ................
   17500:	f8000000 ffffffff ffffffff 0000007f     ................
   17510:	f8000000 ffffffff ffffffff 0000007f     ................
   17520:	f8000000 ffffffff ffffffff 0000007f     ................
   17530:	f8000000 ffffffff ffffffff 0000007f     ................
   17540:	f8000000 ffffffff ffffffff 0000007f     ................
	...
   17604:	fffc0000 ffffffff 0000007f 00000000     ................
   17614:	fffc0000 ffffffff 0000007f 00000000     ................
   17624:	fffc0000 ffffffff 0000007f 00000000     ................
   17634:	fffc0000 ffffffff 0000007f 00000000     ................
   17644:	fffc0000 ffffffff 0000007f 00000000     ................
   17654:	fffc0000 ffffffff 0000007f 00000000     ................
   17664:	fffc0000 ffffffff 0000007f 00000000     ................
   17674:	fffc0000 ffffffff 0000007f 00000000     ................
   17684:	fffc0000 ffffffff 0000007f 00000000     ................
   17694:	fffc0000 ffffffff 0000007f 00000000     ................
   176a4:	fffc0000 ffffffff 0000007f 00000000     ................
   176b4:	fffc0000 ffffffff 0000007f 00000000     ................
   176c4:	fffc0000 ffffffff 0000007f 00000000     ................
   176d4:	fffc0000 ffffffff 0000007f 00000000     ................
   176e4:	ff800000 ffffffff 0000007f 00000000     ................
   176f4:	ffc00000 00000000 00000000 00000000     ................
   17704:	3fe00000 00000000 00000000 00000000     ...?............
   17714:	3fe00000 00000000 00000000 00000000     ...?............
   17724:	1ff00000 00000000 00000000 00000000     ................
   17734:	1ff80000 00000000 00000000 00000000     ................
   17744:	0ff80000 00000000 00000000 00000000     ................
   17754:	0ffc0000 00000000 00000000 00000000     ................
   17764:	0ffc0000 00000000 00000000 00000000     ................
   17774:	0ffc0000 00000000 00000000 00000000     ................
   17784:	0ffe0000 00000000 00000000 00000000     ................
   17794:	0ffe0000 00000000 00000000 00000000     ................
   177a4:	0ffe0000 00000000 00000000 00000000     ................
   177b4:	1ffe0000 00000000 00000000 00000000     ................
   177c4:	1ffe0000 00000000 00000000 00000000     ................
   177d4:	3ffe0000 00000000 00000000 00000000     ...?............
   177e4:	fffe0000 00000000 00000000 00000000     ................
   177f4:	fffe0000 ffffffff 0000007f 00000000     ................
   17804:	fffe0000 ffffffff 0000007f 00000000     ................
   17814:	fffe0000 ffffffff 0000007f 00000000     ................
   17824:	fffc0000 ffffffff 0000007f 00000000     ................
   17834:	fffc0000 ffffffff 0000007f 00000000     ................
   17844:	fffc0000 ffffffff 0000007f 00000000     ................
   17854:	fff80000 ffffffff 0000007f 00000000     ................
   17864:	fff80000 ffffffff 0000007f 00000000     ................
   17874:	fff00000 ffffffff 0000007f 00000000     ................
   17884:	ffe00000 ffffffff 0000007f 00000000     ................
   17894:	ffc00000 ffffffff 0000007f 00000000     ................
   178a4:	ff800000 ffffffff 0000007f 00000000     ................
   178b4:	fe000000 ffffffff 0000007f 00000000     ................
   178c4:	ff000000 ffffffff 0000007f 00000000     ................
   178d4:	ff800000 ffffffff 0000007f 00000000     ................
   178e4:	ffc00000 00000000 00000000 00000000     ................
   178f4:	7fe00000 00000000 00000000 00000000     ................
   17904:	3ff00000 00000000 00000000 00000000     ...?............
   17914:	1ff00000 00000000 00000000 00000000     ................
   17924:	1ff80000 00000000 00000000 00000000     ................
   17934:	0ff80000 00000000 00000000 00000000     ................
   17944:	0ffc0000 00000000 00000000 00000000     ................
   17954:	0ffc0000 00000000 00000000 00000000     ................
   17964:	0ffc0000 00000000 00000000 00000000     ................
   17974:	0ffe0000 00000000 00000000 00000000     ................
   17984:	0ffe0000 00000000 00000000 00000000     ................
   17994:	0ffe0000 00000000 00000000 00000000     ................
   179a4:	1ffe0000 00000000 00000000 00000000     ................
   179b4:	1ffe0000 00000000 00000000 00000000     ................
   179c4:	3ffe0000 00000000 00000000 00000000     ...?............
   179d4:	7ffe0000 00000000 00000000 00000000     ................
   179e4:	fffe0000 ffffffff 0000007f 00000000     ................
   179f4:	fffe0000 ffffffff 0000007f 00000000     ................
   17a04:	fffe0000 ffffffff 0000007f 00000000     ................
   17a14:	fffc0000 ffffffff 0000007f 00000000     ................
   17a24:	fffc0000 ffffffff 0000007f 00000000     ................
   17a34:	fffc0000 ffffffff 0000007f 00000000     ................
   17a44:	fff80000 ffffffff 0000007f 00000000     ................
   17a54:	fff80000 ffffffff 0000007f 00000000     ................
   17a64:	fff00000 ffffffff 0000007f 00000000     ................
   17a74:	ffe00000 ffffffff 0000007f 00000000     ................
   17a84:	ffc00000 ffffffff 0000007f 00000000     ................
   17a94:	ff800000 ffffffff 0000007f 00000000     ................
   17aa4:	fe000000 ffffffff 0000007f 00000000     ................
   17ab4:	f0000000 ffffffff 0000007f 00000000     ................
   17ac4:	00000000 fffffffe 0000007f 00000000     ................
	...
   17b74:	fffc0000 ffffffff 0000007f 00000000     ................
   17b84:	fffc0000 ffffffff 0000007f 00000000     ................
   17b94:	fffc0000 ffffffff 0000007f 00000000     ................
   17ba4:	fffc0000 ffffffff 0000007f 00000000     ................
   17bb4:	fffc0000 ffffffff 0000007f 00000000     ................
   17bc4:	fffc0000 ffffffff 0000007f 00000000     ................
   17bd4:	fffc0000 ffffffff 0000007f 00000000     ................
   17be4:	fffc0000 ffffffff 0000007f 00000000     ................
   17bf4:	fffc0000 ffffffff 0000007f 00000000     ................
   17c04:	fffc0000 ffffffff 0000007f 00000000     ................
   17c14:	fffc0000 ffffffff 0000007f 00000000     ................
   17c24:	fffc0000 ffffffff 0000007f 00000000     ................
   17c34:	fffc0000 ffffffff 0000007f 00000000     ................
   17c44:	fffc0000 ffffffff 0000007f 00000000     ................
   17c54:	ff000000 ffffffff 0000007f 00000000     ................
   17c64:	ff800000 00000000 00000000 00000000     ................
   17c74:	7fc00000 00000000 00000000 00000000     ................
   17c84:	3fe00000 00000000 00000000 00000000     ...?............
   17c94:	1ff00000 00000000 00000000 00000000     ................
   17ca4:	1ff00000 00000000 00000000 00000000     ................
   17cb4:	0ff80000 00000000 00000000 00000000     ................
   17cc4:	0ff80000 00000000 00000000 00000000     ................
   17cd4:	0ffc0000 00000000 00000000 00000000     ................
   17ce4:	0ffc0000 00000000 00000000 00000000     ................
   17cf4:	0ffc0000 00000000 00000000 00000000     ................
   17d04:	0ffe0000 00000000 00000000 00000000     ................
   17d14:	0ffe0000 00000000 00000000 00000000     ................
   17d24:	0ffe0000 00000000 00000000 00000000     ................
   17d34:	1ffe0000 00000000 00000000 00000000     ................
   17d44:	1ffe0000 00000000 00000000 00000000     ................
   17d54:	3ffe0000 00000000 00000000 00000000     ...?............
   17d64:	fffe0000 00000000 00000000 00000000     ................
   17d74:	fffe0000 ffffffff 0000007f 00000000     ................
   17d84:	fffe0000 ffffffff 0000007f 00000000     ................
   17d94:	fffe0000 ffffffff 0000007f 00000000     ................
   17da4:	fffc0000 ffffffff 0000007f 00000000     ................
   17db4:	fffc0000 ffffffff 0000007f 00000000     ................
   17dc4:	fffc0000 ffffffff 0000007f 00000000     ................
   17dd4:	fff80000 ffffffff 0000007f 00000000     ................
   17de4:	fff00000 ffffffff 0000007f 00000000     ................
   17df4:	fff00000 ffffffff 0000007f 00000000     ................
   17e04:	ffe00000 ffffffff 0000007f 00000000     ................
   17e14:	ffc00000 ffffffff 0000007f 00000000     ................
   17e24:	ff000000 ffffffff 0000007f 00000000     ................
   17e34:	fc000000 ffffffff 0000007f 00000000     ................
   17e44:	e0000000 ffffffff 0000007f 00000000     ................
	...
   17ee8:	0003ff80 00000000 00000000 00000000     ................
   17ef8:	007ffffc 00000000 00000000 00000000     ................
   17f08:	03ffffff 00000000 00000000 e0000000     ................
   17f18:	0fffffff 00000000 00000000 f0000000     ................
   17f28:	1fffffff 00000000 00000000 fc000000     ................
   17f38:	7fffffff 00000000 00000000 fe000000     ................
   17f48:	ffffffff 00000000 00000000 ff000000     ................
   17f58:	ffffffff 00000001 00000000 ff800000     ................
   17f68:	ffffffff 00000003 00000000 ffc00000     ................
   17f78:	ffffffff 00000007 00000000 ffe00000     ................
   17f88:	ffffffff 0000000f 00000000 ffe00000     ................
   17f98:	ffffffff 0000000f 00000000 fff00000     ................
   17fa8:	ffffffff 0000001f 00000000 fff00000     ................
   17fb8:	ffffffff 0000001f 00000000 fff80000     ................
   17fc8:	ffff87ff 0000003f 00000000 fff80000     ....?...........
   17fd8:	ffe0000f 0000003f 00000000 fffc0000     ....?...........
   17fe8:	ff000003 0000007f 00000000 fffc0000     ................
   17ff8:	fe000000 0000007f 00000000 7ffc0000     ................
   18008:	fc000000 0000007f 00000000 3ffc0000     ...............?
   18018:	f8000000 0000007f 00000000 1ffe0000     ................
   18028:	f0000000 000000ff 00000000 1ffe0000     ................
   18038:	f0000000 000000ff 00000000 0ffe0000     ................
   18048:	e0000000 000000ff 00000000 0ffe0000     ................
   18058:	e0000000 000000ff 00000000 0ffe0000     ................
   18068:	e0000000 000000ff 00000000 0ffe0000     ................
   18078:	e0000000 000000ff 00000000 0ffe0000     ................
   18088:	e0000000 000000ff 00000000 0ffe0000     ................
   18098:	e0000000 000000ff 00000000 0ffe0000     ................
   180a8:	e0000000 000000ff 00000000 1ffe0000     ................
   180b8:	f0000000 000000ff 00000000 1ffe0000     ................
   180c8:	f0000000 000000ff 00000000 3ffc0000     ...............?
   180d8:	f8000000 0000007f 00000000 7ffc0000     ................
   180e8:	fc000000 0000007f 00000000 fffc0000     ................
   180f8:	fe000000 0000007f 00000000 fffc0000     ................
   18108:	ff800003 0000007f 00000000 fff80000     ................
   18118:	ffe0000f 0000003f 00000000 fff80000     ....?...........
   18128:	ffffffff 0000003f 00000000 fff00000     ....?...........
   18138:	ffffffff 0000001f 00000000 fff00000     ................
   18148:	ffffffff 0000001f 00000000 ffe00000     ................
   18158:	ffffffff 0000000f 00000000 ffe00000     ................
   18168:	ffffffff 0000000f 00000000 ffc00000     ................
   18178:	ffffffff 00000007 00000000 ff800000     ................
   18188:	ffffffff 00000003 00000000 ff000000     ................
   18198:	ffffffff 00000001 00000000 fe000000     ................
   181a8:	ffffffff 00000000 00000000 fc000000     ................
   181b8:	7fffffff 00000000 00000000 f0000000     ................
   181c8:	1fffffff 00000000 00000000 c0000000     ................
   181d8:	0fffffff 00000000 00000000 00000000     ................
   181e8:	01ffffff 00000000 00000000 00000000     ................
   181f8:	007ffff8 00000000 00000000 00000000     ................
   18208:	0003ff00 00000000 00000000 00000000     ................
	...
   182a4:	fffc0000 ffffffff 0fffffff 00000000     ................
   182b4:	fffc0000 ffffffff 0fffffff 00000000     ................
   182c4:	fffc0000 ffffffff 0fffffff 00000000     ................
   182d4:	fffc0000 ffffffff 0fffffff 00000000     ................
   182e4:	fffc0000 ffffffff 0fffffff 00000000     ................
   182f4:	fffc0000 ffffffff 0fffffff 00000000     ................
   18304:	fffc0000 ffffffff 0fffffff 00000000     ................
   18314:	fffc0000 ffffffff 0fffffff 00000000     ................
   18324:	fffc0000 ffffffff 0fffffff 00000000     ................
   18334:	fffc0000 ffffffff 0fffffff 00000000     ................
   18344:	fffc0000 ffffffff 0fffffff 00000000     ................
   18354:	fffc0000 ffffffff 0fffffff 00000000     ................
   18364:	fffc0000 ffffffff 0fffffff 00000000     ................
   18374:	ff800000 ffffffff 0fffffff 00000000     ................
   18384:	ffc00000 fe000000 00000007 00000000     ................
   18394:	7fe00000 fc000000 0000000f 00000000     ................
   183a4:	3ff00000 f8000000 0000001f 00000000     ...?............
   183b4:	1ff80000 f0000000 0000003f 00000000     ........?.......
   183c4:	1ff80000 f0000000 0000003f 00000000     ........?.......
   183d4:	0ffc0000 e0000000 0000007f 00000000     ................
   183e4:	0ffc0000 e0000000 0000007f 00000000     ................
   183f4:	0ffc0000 e0000000 0000007f 00000000     ................
   18404:	0ffe0000 e0000000 000000ff 00000000     ................
   18414:	0ffe0000 e0000000 000000ff 00000000     ................
   18424:	0ffe0000 e0000000 000000ff 00000000     ................
   18434:	0ffe0000 e0000000 000000ff 00000000     ................
   18444:	1ffe0000 f0000000 000000ff 00000000     ................
   18454:	1ffe0000 f0000000 000000ff 00000000     ................
   18464:	3ffe0000 f8000000 000000ff 00000000     ...?............
   18474:	7ffe0000 fc000000 000000ff 00000000     ................
   18484:	fffe0000 fe000000 000000ff 00000000     ................
   18494:	fffe0000 ff800003 000000ff 00000000     ................
   184a4:	fffc0000 fff0000f 0000007f 00000000     ................
   184b4:	fffc0000 ffffffff 0000007f 00000000     ................
   184c4:	fffc0000 ffffffff 0000007f 00000000     ................
   184d4:	fff80000 ffffffff 0000003f 00000000     ........?.......
   184e4:	fff80000 ffffffff 0000003f 00000000     ........?.......
   184f4:	fff00000 ffffffff 0000001f 00000000     ................
   18504:	ffe00000 ffffffff 0000000f 00000000     ................
   18514:	ffe00000 ffffffff 00000007 00000000     ................
   18524:	ffc00000 ffffffff 00000003 00000000     ................
   18534:	ff800000 ffffffff 00000001 00000000     ................
   18544:	fe000000 ffffffff 00000000 00000000     ................
   18554:	fc000000 3fffffff 00000000 00000000     .......?........
   18564:	f0000000 1fffffff 00000000 00000000     ................
   18574:	80000000 03ffffff 00000000 00000000     ................
   18584:	00000000 007ffffc 00000000 00000000     ................
   18594:	00000000 0000fe00 00000000 00000000     ................
	...
   18608:	0003ffc0 00000000 00000000 00000000     ................
   18618:	007ffffe 00000000 00000000 c0000000     ................
   18628:	07ffffff 00000000 00000000 f0000000     ................
   18638:	1fffffff 00000000 00000000 fc000000     ................
   18648:	7fffffff 00000000 00000000 fe000000     ................
   18658:	ffffffff 00000000 00000000 ff800000     ................
   18668:	ffffffff 00000001 00000000 ffc00000     ................
   18678:	ffffffff 00000007 00000000 ffe00000     ................
   18688:	ffffffff 00000007 00000000 ffe00000     ................
   18698:	ffffffff 0000000f 00000000 fff00000     ................
   186a8:	ffffffff 0000001f 00000000 fff80000     ................
   186b8:	ffffffff 0000003f 00000000 fff80000     ....?...........
   186c8:	ffffffff 0000003f 00000000 fffc0000     ....?...........
   186d8:	ffffffff 0000007f 00000000 fffc0000     ................
   186e8:	ffff87ff 0000007f 00000000 fffc0000     ................
   186f8:	ffe0000f 0000007f 00000000 fffe0000     ................
   18708:	ff000001 000000ff 00000000 fffe0000     ................
   18718:	fe000000 000000ff 00000000 3ffe0000     ...............?
   18728:	f8000000 000000ff 00000000 3ffe0000     ...............?
   18738:	f8000000 000000ff 00000000 1ffe0000     ................
   18748:	f0000000 000000ff 00000000 1ffe0000     ................
   18758:	f0000000 000000ff 00000000 0ffe0000     ................
   18768:	e0000000 000000ff 00000000 0ffe0000     ................
   18778:	e0000000 000000ff 00000000 0ffe0000     ................
   18788:	e0000000 000000ff 00000000 0ffe0000     ................
   18798:	e0000000 000000ff 00000000 0ffc0000     ................
   187a8:	e0000000 0000007f 00000000 0ffc0000     ................
   187b8:	e0000000 0000007f 00000000 0ffc0000     ................
   187c8:	f0000000 0000007f 00000000 1ff80000     ................
   187d8:	f0000000 0000003f 00000000 1ff00000     ....?...........
   187e8:	f0000000 0000001f 00000000 3ff00000     ...............?
   187f8:	f8000000 0000001f 00000000 7fe00000     ................
   18808:	fc000000 0000000f 00000000 ffc00000     ................
   18818:	fe000000 00000007 00000000 ff800000     ................
   18828:	ffffffff 0fffffff 00000000 fff00000     ................
   18838:	ffffffff 0fffffff 00000000 fffc0000     ................
   18848:	ffffffff 0fffffff 00000000 fffc0000     ................
   18858:	ffffffff 0fffffff 00000000 fffc0000     ................
   18868:	ffffffff 0fffffff 00000000 fffc0000     ................
   18878:	ffffffff 0fffffff 00000000 fffc0000     ................
   18888:	ffffffff 0fffffff 00000000 fffc0000     ................
   18898:	ffffffff 0fffffff 00000000 fffc0000     ................
   188a8:	ffffffff 0fffffff 00000000 fffc0000     ................
   188b8:	ffffffff 0fffffff 00000000 fffc0000     ................
   188c8:	ffffffff 0fffffff 00000000 fffc0000     ................
   188d8:	ffffffff 0fffffff 00000000 fffc0000     ................
   188e8:	ffffffff 0fffffff 00000000 fffc0000     ................
   188f8:	ffffffff 0fffffff 00000000 00000000     ................
	...
   189c4:	fffc0000 ffffffff 0000007f 00000000     ................
   189d4:	fffc0000 ffffffff 0000007f 00000000     ................
   189e4:	fffc0000 ffffffff 0000007f 00000000     ................
   189f4:	fffc0000 ffffffff 0000007f 00000000     ................
   18a04:	fffc0000 ffffffff 0000007f 00000000     ................
   18a14:	fffc0000 ffffffff 0000007f 00000000     ................
   18a24:	fffc0000 ffffffff 0000007f 00000000     ................
   18a34:	fffc0000 ffffffff 0000007f 00000000     ................
   18a44:	fffc0000 ffffffff 0000007f 00000000     ................
   18a54:	fffc0000 ffffffff 0000007f 00000000     ................
   18a64:	fffc0000 ffffffff 0000007f 00000000     ................
   18a74:	fffc0000 ffffffff 0000007f 00000000     ................
   18a84:	fffc0000 ffffffff 0000007f 00000000     ................
   18a94:	ff000000 ffffffff 0000007f 00000000     ................
   18aa4:	ff800000 00000007 00000000 00000000     ................
   18ab4:	ffe00000 00000003 00000000 00000000     ................
   18ac4:	fff00000 00000001 00000000 00000000     ................
   18ad4:	fff00000 00000000 00000000 00000000     ................
   18ae4:	fff80000 00000000 00000000 00000000     ................
   18af4:	fffc0000 00000000 00000000 00000000     ................
   18b04:	7ffc0000 00000000 00000000 00000000     ................
   18b14:	7ffc0000 00000000 00000000 00000000     ................
   18b24:	7ffe0000 00000000 00000000 00000000     ................
   18b34:	7ffe0000 00000000 00000000 00000000     ................
   18b44:	7ffe0000 00000000 00000000 00000000     ................
   18b54:	7ffe0000 00000000 00000000 00000000     ................
   18b64:	7ffe0000 00000000 00000000 00000000     ................
   18b74:	7ffe0000 00000000 00000000 00000000     ................
   18b84:	7ffe0000 00000000 00000000 00000000     ................
   18b94:	7ffc0000 00000000 00000000 00000000     ................
	...
   18be8:	07c00000 00000000 00000000 00000000     ................
   18bf8:	1fc00006 00000000 00000000 f0000000     ................
   18c08:	7fc0007f 00000000 00000000 fc000000     ................
   18c18:	ffc001ff 00000000 00000000 fe000000     ................
   18c28:	ffc003ff 00000001 00000000 ff800000     ................
   18c38:	ffc007ff 00000003 00000000 ffc00000     ................
   18c48:	ffc00fff 00000007 00000000 ffc00000     ................
   18c58:	ffc01fff 0000000f 00000000 ffe00000     ................
   18c68:	ffc01fff 0000000f 00000000 fff00000     ................
   18c78:	ffc03fff 0000001f 00000000 fff00000     .?..............
   18c88:	ffc03fff 0000001f 00000000 fff80000     .?..............
   18c98:	ffc07fff 0000003f 00000000 fff80000     ....?...........
   18ca8:	ffc07fff 0000003f 00000000 fffc0000     ....?...........
   18cb8:	ff00ffff 0000007f 00000000 fffc0000     ................
   18cc8:	fc00ffff 0000007f 00000000 7ffc0000     ................
   18cd8:	f800fffc 0000007f 00000000 1ffc0000     ................
   18ce8:	f001fff0 0000007f 00000000 0ffe0000     ................
   18cf8:	e001ffe0 000000ff 00000000 0ffe0000     ................
   18d08:	e001ffe0 000000ff 00000000 07fe0000     ................
   18d18:	c001ffc0 000000ff 00000000 07fe0000     ................
   18d28:	c003ffc0 000000ff 00000000 07fe0000     ................
   18d38:	c003ffc0 000000ff 00000000 07fe0000     ................
   18d48:	c003ff80 000000ff 00000000 07fe0000     ................
   18d58:	c003ff80 000000ff 00000000 07fe0000     ................
   18d68:	c007ff80 000000ff 00000000 07fe0000     ................
   18d78:	c007ff80 000000ff 00000000 0ffe0000     ................
   18d88:	c007ff80 000000ff 00000000 0ffe0000     ................
   18d98:	e00fff00 000000ff 00000000 1ffe0000     ................
   18da8:	e00fff00 000000ff 00000000 3ffc0000     ...............?
   18db8:	f01fff00 0000007f 00000000 fffc0000     ................
   18dc8:	f83fff00 0000007f 00000000 fffc0000     ..?.............
   18dd8:	fffffe03 0000007f 00000000 fffc0000     ................
   18de8:	fffffe03 0000007f 00000000 fff80000     ................
   18df8:	fffffe03 0000003f 00000000 fff80000     ....?...........
   18e08:	fffffc03 0000003f 00000000 fff00000     ....?...........
   18e18:	fffffc03 0000003f 00000000 fff00000     ....?...........
   18e28:	fffff803 0000001f 00000000 ffe00000     ................
   18e38:	fffff803 0000000f 00000000 ffe00000     ................
   18e48:	fffff003 0000000f 00000000 ffc00000     ................
   18e58:	fffff003 00000007 00000000 ff800000     ................
   18e68:	ffffe003 00000003 00000000 ff000000     ................
   18e78:	ffffc003 00000001 00000000 fe000000     ................
   18e88:	ffff8003 00000000 00000000 f8000000     ................
   18e98:	7ffe0003 00000000 00000000 c0000000     ................
   18ea8:	0ff80003 00000000 00000000 00000000     ................
	...
   18ef4:	0ffc0000 00000000 00000000 00000000     ................
   18f04:	0ffc0000 00000000 00000000 00000000     ................
   18f14:	0ffc0000 00000000 00000000 00000000     ................
   18f24:	0ffc0000 00000000 00000000 00000000     ................
   18f34:	0ffc0000 00000000 00000000 00000000     ................
   18f44:	0ffc0000 00000000 00000000 00000000     ................
   18f54:	0ffc0000 00000000 00000000 00000000     ................
   18f64:	0ffc0000 00000000 00000000 00000000     ................
   18f74:	ffffffe0 0fffffff 00000000 00000000     ................
   18f84:	ffffffe0 ffffffff 00000000 00000000     ................
   18f94:	ffffffe0 ffffffff 00000003 00000000     ................
   18fa4:	ffffffe0 ffffffff 00000007 00000000     ................
   18fb4:	ffffffe0 ffffffff 0000001f 00000000     ................
   18fc4:	ffffffe0 ffffffff 0000001f 00000000     ................
   18fd4:	ffffffe0 ffffffff 0000003f 00000000     ........?.......
   18fe4:	ffffffe0 ffffffff 0000003f 00000000     ........?.......
   18ff4:	ffffffe0 ffffffff 0000007f 00000000     ................
   19004:	ffffffe0 ffffffff 0000007f 00000000     ................
   19014:	ffffffe0 ffffffff 0000007f 00000000     ................
   19024:	ffffffe0 ffffffff 000000ff 00000000     ................
   19034:	ffffffe0 ffffffff 000000ff 00000000     ................
   19044:	ffffffe0 ffffffff 000000ff 00000000     ................
   19054:	0ffc0000 ff000000 000000ff 00000000     ................
   19064:	0ffc0000 f0000000 000000ff 00000000     ................
   19074:	0ffc0000 f0000000 000000ff 00000000     ................
   19084:	0ffc0000 e0000000 000000ff 00000000     ................
   19094:	0ffc0000 e0000000 000000ff 00000000     ................
   190a4:	0ffc0000 e0000000 000000ff 00000000     ................
   190b4:	0ffc0000 e0000000 000000ff 00000000     ................
   190c4:	0ffc0000 e0000000 0000007f 00000000     ................
   190d4:	0ffc0000 e0000000 0000007f 00000000     ................
   190e4:	0ffc0000 e0000000 0000007f 00000000     ................
	...
   19164:	fffc0000 00ffffff 00000000 00000000     ................
   19174:	fffc0000 1fffffff 00000000 00000000     ................
   19184:	fffc0000 7fffffff 00000000 00000000     ................
   19194:	fffc0000 ffffffff 00000001 00000000     ................
   191a4:	fffc0000 ffffffff 00000007 00000000     ................
   191b4:	fffc0000 ffffffff 0000000f 00000000     ................
   191c4:	fffc0000 ffffffff 0000001f 00000000     ................
   191d4:	fffc0000 ffffffff 0000001f 00000000     ................
   191e4:	fffc0000 ffffffff 0000003f 00000000     ........?.......
   191f4:	fffc0000 ffffffff 0000003f 00000000     ........?.......
   19204:	fffc0000 ffffffff 0000007f 00000000     ................
   19214:	fffc0000 ffffffff 0000007f 00000000     ................
   19224:	fffc0000 ffffffff 0000007f 00000000     ................
   19234:	fffc0000 ffffffff 000000ff 00000000     ................
   19244:	fffc0000 ffffffff 000000ff 00000000     ................
   19254:	00000000 fe000000 000000ff 00000000     ................
   19264:	00000000 f8000000 000000ff 00000000     ................
   19274:	00000000 f0000000 000000ff 00000000     ................
   19284:	00000000 f0000000 000000ff 00000000     ................
   19294:	00000000 e0000000 000000ff 00000000     ................
   192a4:	00000000 e0000000 000000ff 00000000     ................
   192b4:	00000000 e0000000 000000ff 00000000     ................
   192c4:	00000000 e0000000 000000ff 00000000     ................
   192d4:	00000000 e0000000 0000007f 00000000     ................
   192e4:	00000000 e0000000 0000007f 00000000     ................
   192f4:	00000000 e0000000 0000007f 00000000     ................
   19304:	00000000 f0000000 0000003f 00000000     ........?.......
   19314:	00000000 f0000000 0000003f 00000000     ........?.......
   19324:	00000000 f0000000 0000001f 00000000     ................
   19334:	00000000 f8000000 0000001f 00000000     ................
   19344:	00000000 fc000000 0000000f 00000000     ................
   19354:	00000000 fe000000 00000007 00000000     ................
   19364:	fffc0000 ffffffff 00000003 00000000     ................
   19374:	fffc0000 ffffffff 0000007f 00000000     ................
   19384:	fffc0000 ffffffff 0000007f 00000000     ................
   19394:	fffc0000 ffffffff 0000007f 00000000     ................
   193a4:	fffc0000 ffffffff 0000007f 00000000     ................
   193b4:	fffc0000 ffffffff 0000007f 00000000     ................
   193c4:	fffc0000 ffffffff 0000007f 00000000     ................
   193d4:	fffc0000 ffffffff 0000007f 00000000     ................
   193e4:	fffc0000 ffffffff 0000007f 00000000     ................
   193f4:	fffc0000 ffffffff 0000007f 00000000     ................
   19404:	fffc0000 ffffffff 0000007f 00000000     ................
   19414:	fffc0000 ffffffff 0000007f 00000000     ................
   19424:	fffc0000 ffffffff 0000007f 00000000     ................
   19434:	fffc0000 ffffffff 0000007f 00000000     ................
	...
   194b4:	001c0000 00000000 00000000 00000000     ................
   194c4:	00fc0000 00000000 00000000 00000000     ................
   194d4:	07fc0000 00000000 00000000 00000000     ................
   194e4:	1ffc0000 00000000 00000000 00000000     ................
   194f4:	fffc0000 00000000 00000000 00000000     ................
   19504:	fffc0000 00000007 00000000 00000000     ................
   19514:	fffc0000 0000003f 00000000 00000000     ....?...........
   19524:	fffc0000 000001ff 00000000 00000000     ................
   19534:	fffc0000 00000fff 00000000 00000000     ................
   19544:	fffc0000 00007fff 00000000 00000000     ................
   19554:	fffc0000 0003ffff 00000000 00000000     ................
   19564:	fffc0000 001fffff 00000000 00000000     ................
   19574:	fffc0000 00ffffff 00000000 00000000     ................
   19584:	fffc0000 07ffffff 00000000 00000000     ................
   19594:	fffc0000 3fffffff 00000000 00000000     .......?........
   195a4:	ffc00000 ffffffff 00000001 00000000     ................
   195b4:	fe000000 ffffffff 0000000f 00000000     ................
   195c4:	e0000000 ffffffff 0000007f 00000000     ................
   195d4:	00000000 ffffffff 0000007f 00000000     ................
   195e4:	00000000 fffffff0 0000007f 00000000     ................
   195f4:	00000000 ffffff00 0000007f 00000000     ................
   19604:	00000000 fffff800 0000007f 00000000     ................
   19614:	00000000 ffff8000 0000007f 00000000     ................
   19624:	00000000 fffc0000 0000007f 00000000     ................
   19634:	00000000 ffe00000 0000007f 00000000     ................
   19644:	00000000 fffc0000 0000007f 00000000     ................
   19654:	00000000 ffffc000 0000007f 00000000     ................
   19664:	00000000 fffff800 0000007f 00000000     ................
   19674:	00000000 ffffff80 0000007f 00000000     ................
   19684:	00000000 fffffff8 0000007f 00000000     ................
   19694:	00000000 ffffffff 0000007f 00000000     ................
   196a4:	f0000000 ffffffff 0000003f 00000000     ........?.......
   196b4:	fe000000 ffffffff 00000007 00000000     ................
   196c4:	ffe00000 ffffffff 00000000 00000000     ................
   196d4:	fffc0000 1fffffff 00000000 00000000     ................
   196e4:	fffc0000 03ffffff 00000000 00000000     ................
   196f4:	fffc0000 007fffff 00000000 00000000     ................
   19704:	fffc0000 001fffff 00000000 00000000     ................
   19714:	fffc0000 0003ffff 00000000 00000000     ................
   19724:	fffc0000 00007fff 00000000 00000000     ................
   19734:	fffc0000 00000fff 00000000 00000000     ................
   19744:	fffc0000 000001ff 00000000 00000000     ................
   19754:	fffc0000 0000003f 00000000 00000000     ....?...........
   19764:	fffc0000 00000007 00000000 00000000     ................
   19774:	fffc0000 00000000 00000000 00000000     ................
   19784:	1ffc0000 00000000 00000000 00000000     ................
   19794:	03fc0000 00000000 00000000 00000000     ................
   197a4:	007c0000 00000000 00000000 00000000     ..|.............
   197b4:	000c0000 00000000 00000000 00000000     ................
	...
   197e4:	00040000 00000000 00000000 00000000     ................
   197f4:	007c0000 00000000 00000000 00000000     ..|.............
   19804:	07fc0000 00000000 00000000 00000000     ................
   19814:	7ffc0000 00000000 00000000 00000000     ................
   19824:	fffc0000 00000003 00000000 00000000     ................
   19834:	fffc0000 0000003f 00000000 00000000     ....?...........
   19844:	fffc0000 000003ff 00000000 00000000     ................
   19854:	fffc0000 00003fff 00000000 00000000     .....?..........
   19864:	fffc0000 0003ffff 00000000 00000000     ................
   19874:	fffc0000 003fffff 00000000 00000000     ......?.........
   19884:	fffc0000 03ffffff 00000000 00000000     ................
   19894:	fffc0000 3fffffff 00000000 00000000     .......?........
   198a4:	fffc0000 ffffffff 00000003 00000000     ................
   198b4:	fffc0000 ffffffff 0000001f 00000000     ................
   198c4:	fff00000 ffffffff 0000007f 00000000     ................
   198d4:	fe000000 ffffffff 0000007f 00000000     ................
   198e4:	c0000000 ffffffff 0000007f 00000000     ................
   198f4:	00000000 fffffff8 0000007f 00000000     ................
   19904:	00000000 ffffff00 0000007f 00000000     ................
   19914:	00000000 ffffe000 0000007f 00000000     ................
   19924:	00000000 fffe0000 0000007f 00000000     ................
   19934:	00000000 fffc0000 0000007f 00000000     ................
   19944:	00000000 ffffc000 0000007f 00000000     ................
   19954:	00000000 fffff800 0000007f 00000000     ................
   19964:	00000000 ffffff00 0000007f 00000000     ................
   19974:	00000000 fffffff0 0000007f 00000000     ................
   19984:	00000000 fffffffe 0000001f 00000000     ................
   19994:	e0000000 ffffffff 00000001 00000000     ................
   199a4:	fc000000 3fffffff 00000000 00000000     .......?........
   199b4:	ffc00000 07ffffff 00000000 00000000     ................
   199c4:	fff80000 007fffff 00000000 00000000     ................
   199d4:	fffc0000 000fffff 00000000 00000000     ................
   199e4:	fffc0000 0001ffff 00000000 00000000     ................
   199f4:	fffc0000 00001fff 00000000 00000000     ................
   19a04:	fffc0000 000003ff 00000000 00000000     ................
   19a14:	fffc0000 0000007f 00000000 00000000     ................
   19a24:	fffc0000 000000ff 00000000 00000000     ................
   19a34:	fffc0000 000007ff 00000000 00000000     ................
   19a44:	fffc0000 00003fff 00000000 00000000     .....?..........
   19a54:	fffc0000 0003ffff 00000000 00000000     ................
   19a64:	fffc0000 001fffff 00000000 00000000     ................
   19a74:	fff00000 00ffffff 00000000 00000000     ................
   19a84:	ff800000 0fffffff 00000000 00000000     ................
   19a94:	fc000000 7fffffff 00000000 00000000     ................
   19aa4:	c0000000 ffffffff 00000003 00000000     ................
   19ab4:	00000000 fffffffe 0000001f 00000000     ................
   19ac4:	00000000 ffffffe0 0000007f 00000000     ................
   19ad4:	00000000 ffffff00 0000007f 00000000     ................
   19ae4:	00000000 fffff000 0000007f 00000000     ................
   19af4:	00000000 ffff8000 0000007f 00000000     ................
   19b04:	00000000 fff80000 0000007f 00000000     ................
   19b14:	00000000 ffff0000 0000007f 00000000     ................
   19b24:	00000000 fffff800 0000007f 00000000     ................
   19b34:	00000000 ffffff80 0000007f 00000000     ................
   19b44:	00000000 fffffffc 0000007f 00000000     ................
   19b54:	e0000000 ffffffff 0000007f 00000000     ................
   19b64:	ff000000 ffffffff 0000007f 00000000     ................
   19b74:	fff80000 ffffffff 0000007f 00000000     ................
   19b84:	fffc0000 ffffffff 0000001f 00000000     ................
   19b94:	fffc0000 ffffffff 00000001 00000000     ................
   19ba4:	fffc0000 1fffffff 00000000 00000000     ................
   19bb4:	fffc0000 01ffffff 00000000 00000000     ................
   19bc4:	fffc0000 001fffff 00000000 00000000     ................
   19bd4:	fffc0000 0001ffff 00000000 00000000     ................
   19be4:	fffc0000 00001fff 00000000 00000000     ................
   19bf4:	fffc0000 000001ff 00000000 00000000     ................
   19c04:	fffc0000 0000003f 00000000 00000000     ....?...........
   19c14:	fffc0000 00000003 00000000 00000000     ................
   19c24:	3ffc0000 00000000 00000000 00000000     ...?............
   19c34:	03fc0000 00000000 00000000 00000000     ................
   19c44:	003c0000 00000000 00000000 00000000     ..<.............
   19c54:	00040000 00000000 00000000 00000000     ................
	...
   19c8c:	00000040 00000000 00040000 00000000     @...............
   19c9c:	00000070 00000000 001c0000 00000000     p...............
   19cac:	00000078 00000000 007c0000 00000000     x.........|.....
   19cbc:	0000007e 00000000 00fc0000 80000000     ~...............
   19ccc:	0000007f 00000000 03fc0000 c0000000     ................
   19cdc:	0000007f 00000000 0ffc0000 f0000000     ................
   19cec:	0000007f 00000000 3ffc0000 fc000000     ...........?....
   19cfc:	0000007f 00000000 7ffc0000 fe000000     ................
   19d0c:	0000007f 00000000 fffc0000 ff800001     ................
   19d1c:	0000007f 00000000 fffc0000 ffe00007     ................
   19d2c:	0000007f 00000000 fffc0000 fff8000f     ................
   19d3c:	0000007f 00000000 fffc0000 fffc003f     ............?...
   19d4c:	0000007f 00000000 fffc0000 ffff00ff     ................
   19d5c:	0000007f 00000000 fffc0000 ffffc3ff     ................
   19d6c:	0000007f 00000000 fffc0000 ffffe7ff     ................
   19d7c:	0000007f 00000000 fff80000 ffffffff     ................
   19d8c:	0000001f 00000000 ffe00000 ffffffff     ................
   19d9c:	00000007 00000000 ffc00000 ffffffff     ................
   19dac:	00000003 00000000 ff000000 ffffffff     ................
	...
   19dc4:	fc000000 3fffffff 00000000 00000000     .......?........
   19dd4:	f0000000 0fffffff 00000000 00000000     ................
   19de4:	c0000000 03ffffff 00000000 00000000     ................
   19df4:	80000000 01ffffff 00000000 00000000     ................
   19e04:	00000000 007ffffe 00000000 00000000     ................
   19e14:	00000000 007ffffe 00000000 00000000     ................
   19e24:	80000000 01ffffff 00000000 00000000     ................
   19e34:	e0000000 07ffffff 00000000 00000000     ................
   19e44:	f8000000 1fffffff 00000000 00000000     ................
   19e54:	fc000000 3fffffff 00000000 00000000     .......?........
   19e64:	ff000000 ffffffff 00000000 00000000     ................
   19e74:	ffc00000 ffffffff 00000003 00000000     ................
   19e84:	fff00000 ffffffff 0000000f 00000000     ................
   19e94:	fffc0000 ffffffff 0000001f 00000000     ................
   19ea4:	fffc0000 ffffe7ff 0000007f 00000000     ................
   19eb4:	fffc0000 ffff81ff 0000007f 00000000     ................
   19ec4:	fffc0000 fffe007f 0000007f 00000000     ................
   19ed4:	fffc0000 fffc003f 0000007f 00000000     ....?...........
   19ee4:	fffc0000 fff0000f 0000007f 00000000     ................
   19ef4:	fffc0000 ffc00003 0000007f 00000000     ................
   19f04:	fffc0000 ff800001 0000007f 00000000     ................
   19f14:	7ffc0000 fe000000 0000007f 00000000     ................
   19f24:	1ffc0000 f8000000 0000007f 00000000     ................
   19f34:	07fc0000 e0000000 0000007f 00000000     ................
   19f44:	03fc0000 c0000000 0000007f 00000000     ................
   19f54:	00fc0000 00000000 0000007f 00000000     ................
   19f64:	003c0000 00000000 0000007c 00000000     ..<.....|.......
   19f74:	001c0000 00000000 00000078 00000000     ........x.......
   19f84:	00040000 00000000 00000060 00000000     ........`.......
	...
   19f9c:	00000040 00000000 00040000 00000000     @...............
	...
   19fb4:	001c0000 00000000 00000000 00000000     ................
   19fc4:	00fc0000 00000000 00000000 00000000     ................
   19fd4:	07fc0000 00000000 00000000 00000000     ................
   19fe4:	3ffc0000 00000000 00000000 00000000     ...?............
   19ff4:	fffc0000 00000001 00000000 00000000     ................
   1a004:	fffc0000 0000000f 0ffc0000 00000000     ................
   1a014:	fffc0000 0000007f 0ffc0000 00000000     ................
   1a024:	fffc0000 000003ff 1ffc0000 00000000     ................
   1a034:	fffc0000 00001fff 1ffc0000 00000000     ................
   1a044:	fffc0000 0000ffff 1ffc0000 00000000     ................
   1a054:	fffc0000 0003ffff 1ffc0000 00000000     ................
   1a064:	fffc0000 001fffff 1ffe0000 00000000     ................
   1a074:	fffc0000 00ffffff 1ffe0000 00000000     ................
   1a084:	fffc0000 07ffffff 1ffe0000 00000000     ................
   1a094:	fffc0000 3fffffff 1fff0000 00000000     .......?........
   1a0a4:	ffe00000 ffffffff 1fffc001 00000000     ................
   1a0b4:	ff000000 ffffffff 0ffff00f 00000000     ................
   1a0c4:	f0000000 ffffffff 0ffffe7f 00000000     ................
   1a0d4:	80000000 ffffffff 0fffffff 00000000     ................
   1a0e4:	00000000 fffffffc 07ffffff 00000000     ................
   1a0f4:	00000000 ffffffc0 07ffffff 00000000     ................
   1a104:	00000000 fffffe00 03ffffff 00000000     ................
   1a114:	00000000 fffff000 01ffffff 00000000     ................
   1a124:	00000000 ffff0000 00ffffff 00000000     ................
   1a134:	00000000 fff80000 007fffff 00000000     ................
   1a144:	00000000 ffff0000 001fffff 00000000     ................
   1a154:	00000000 ffffe000 000fffff 00000000     ................
   1a164:	00000000 fffffe00 0001ffff 00000000     ................
   1a174:	00000000 ffffffc0 00007fff 00000000     ................
   1a184:	00000000 fffffff8 00000fff 00000000     ................
   1a194:	80000000 ffffffff 000001ff 00000000     ................
   1a1a4:	f0000000 ffffffff 0000003f 00000000     ........?.......
   1a1b4:	ff000000 ffffffff 00000007 00000000     ................
   1a1c4:	ffe00000 ffffffff 00000001 00000000     ................
   1a1d4:	fffc0000 3fffffff 00000000 00000000     .......?........
   1a1e4:	fffc0000 07ffffff 00000000 00000000     ................
   1a1f4:	fffc0000 00ffffff 00000000 00000000     ................
   1a204:	fffc0000 001fffff 00000000 00000000     ................
   1a214:	fffc0000 0003ffff 00000000 00000000     ................
   1a224:	fffc0000 00007fff 00000000 00000000     ................
   1a234:	fffc0000 00000fff 00000000 00000000     ................
   1a244:	fffc0000 000003ff 00000000 00000000     ................
   1a254:	fffc0000 0000007f 00000000 00000000     ................
   1a264:	fffc0000 0000000f 00000000 00000000     ................
   1a274:	fffc0000 00000001 00000000 00000000     ................
   1a284:	3ffc0000 00000000 00000000 00000000     ...?............
   1a294:	07fc0000 00000000 00000000 00000000     ................
   1a2a4:	00fc0000 00000000 00000000 00000000     ................
   1a2b4:	001c0000 00000000 00000000 00000000     ................
   1a2c4:	00040000 00000000 00000000 00000000     ................
	...
   1a314:	1ffc0000 c0000000 0000007f 00000000     ................
   1a324:	1ffc0000 f0000000 0000007f 00000000     ................
   1a334:	1ffc0000 f8000000 0000007f 00000000     ................
   1a344:	1ffc0000 fc000000 0000007f 00000000     ................
   1a354:	1ffc0000 ff000000 0000007f 00000000     ................
   1a364:	1ffc0000 ff800000 0000007f 00000000     ................
   1a374:	1ffc0000 ffe00000 0000007f 00000000     ................
   1a384:	1ffc0000 fff00000 0000007f 00000000     ................
   1a394:	1ffc0000 fff80000 0000007f 00000000     ................
   1a3a4:	1ffc0000 fffe0000 0000007f 00000000     ................
   1a3b4:	1ffc0000 ffff0000 0000007f 00000000     ................
   1a3c4:	1ffc0000 ffff8000 0000007f 00000000     ................
   1a3d4:	1ffc0000 ffffe000 0000007f 00000000     ................
   1a3e4:	1ffc0000 fffff000 0000007f 00000000     ................
   1a3f4:	1ffc0000 fffff800 0000007f 00000000     ................
   1a404:	1ffc0000 fffffe00 0000007f 00000000     ................
   1a414:	1ffc0000 ffffff00 0000007f 00000000     ................
   1a424:	1ffc0000 ffffff80 0000007f 00000000     ................
   1a434:	1ffc0000 f7ffffe0 0000007f 00000000     ................
   1a444:	1ffc0000 f3fffff0 0000007f 00000000     ................
   1a454:	1ffc0000 f0fffff8 0000007f 00000000     ................
   1a464:	1ffc0000 f07ffffe 0000007f 00000000     ................
   1a474:	1ffc0000 f03fffff 0000007f 00000000     ......?.........
   1a484:	9ffc0000 f00fffff 0000007f 00000000     ................
   1a494:	fffc0000 f007ffff 0000007f 00000000     ................
   1a4a4:	fffc0000 f003ffff 0000007f 00000000     ................
   1a4b4:	fffc0000 f000ffff 0000007f 00000000     ................
   1a4c4:	fffc0000 f0007fff 0000007f 00000000     ................
   1a4d4:	fffc0000 f0003fff 0000007f 00000000     .....?..........
   1a4e4:	fffc0000 f0000fff 0000007f 00000000     ................
   1a4f4:	fffc0000 f00007ff 0000007f 00000000     ................
   1a504:	fffc0000 f00003ff 0000007f 00000000     ................
   1a514:	fffc0000 f00000ff 0000007f 00000000     ................
   1a524:	fffc0000 f000007f 0000007f 00000000     ................
   1a534:	fffc0000 f000003f 0000007f 00000000     ....?...........
   1a544:	fffc0000 f000000f 0000007f 00000000     ................
   1a554:	fffc0000 f0000007 0000007f 00000000     ................
   1a564:	fffc0000 f0000003 0000007f 00000000     ................
   1a574:	fffc0000 f0000000 0000007f 00000000     ................
   1a584:	7ffc0000 f0000000 0000007f 00000000     ................
   1a594:	3ffc0000 f0000000 0000007f 00000000     ...?............
   1a5a4:	0ffc0000 f0000000 0000007f 00000000     ................
   1a5b4:	07fc0000 f0000000 0000007f 00000000     ................
   1a5c4:	00000000 f0000000 0000007f 00000000     ................
	...
   1a628:	00001ff8 00000000 00000000 00000000     ................
   1a638:	00001ff8 00000000 00000000 00000000     ................
   1a648:	00001ff8 00000000 00000000 00000000     ................
   1a658:	00001ff8 00000000 00000000 00000000     ................
   1a668:	00003ffc 00000000 00000000 00000000     .?..............
   1a678:	00003ffc 00000000 00000000 00000000     .?..............
   1a688:	00007ffe 00000000 00000000 80000000     ................
   1a698:	0001ffff 00000000 00000000 e0000000     ................
   1a6a8:	0007ffff 00000000 00000000 fffffe00     ................
   1a6b8:	ffffffff 0000007f 00000000 ffffffe0     ................
   1a6c8:	ffffffff 000007ff 00000000 fffffff8     ................
   1a6d8:	ffffffff 00003fff 00000000 fffffffe     .....?..........
   1a6e8:	ffffffff 00007fff 00000000 ffffffff     ................
   1a6f8:	ffffffff 0001ffff 80000000 ffffffff     ................
   1a708:	fffffe7f 0003ffff c0000000 ffffffff     ................
   1a718:	fffffc3f 0007ffff e0000000 ffffffff     ?...............
   1a728:	fffffc3f 000fffff f0000000 ffffffff     ?...............
   1a738:	fffff81f 001fffff f0000000 ffffffff     ................
   1a748:	ffffe00f 001fffff f8000000 ffffffff     ................
   1a758:	ffffc003 003fffff fc000000 ffffffff     ......?.........
   1a768:	ffff0000 007fffff fc000000 0fffffff     ................
   1a778:	fff00000 007fffff fe000000 000000ff     ................
   1a788:	00000000 007fff00 fe000000 0000001f     ................
   1a798:	00000000 00fff800 fe000000 0000000f     ................
   1a7a8:	00000000 00ffe000 ff000000 00000003     ................
   1a7b8:	00000000 01ffc000 ff000000 00000003     ................
   1a7c8:	00000000 01ff8000 fc000000 00000001     ................
   1a7d8:	00000000 007f0000 e0000000 00000000     ................
   1a7e8:	00000000 000f0000 00000000 00000001     ................
   1a7f8:	00000000 00020000 00000000 00000000     ................
	...
   1a8a0:	80000000 ffffffff ffffffff 000fffff     ................
   1a8b0:	80000000 ffffffff ffffffff 000fffff     ................
   1a8c0:	80000000 ffffffff ffffffff 000fffff     ................
   1a8d0:	80000000 ffffffff ffffffff 000fffff     ................
   1a8e0:	80000000 ffffffff ffffffff 000fffff     ................
   1a8f0:	80000000 ffffffff ffffffff 000fffff     ................
   1a900:	80000000 ffffffff ffffffff 000fffff     ................
   1a910:	80000000 ffffffff ffffffff 000fffff     ................
	...
   1a9c4:	00000001 00000000 00020000 e0000000     ................
	...
   1a9dc:	000f0000 fc000000 00000001 00000000     ................
   1a9ec:	007f0000 ff000000 00000003 00000000     ................
   1a9fc:	01ff8000 ff000000 00000007 00000000     ................
   1aa0c:	01ffc000 fe000000 0000000f 00000000     ................
   1aa1c:	00ffe000 fe000000 0000003f 00000000     ........?.......
   1aa2c:	00fff800 fe000000 000000ff 00000000     ................
   1aa3c:	007fff00 fc000000 0fffffff fff00000     ................
   1aa4c:	007fffff fc000000 ffffffff ffff0000     ................
   1aa5c:	007fffff f8000000 ffffffff ffffc003     ................
   1aa6c:	003fffff f0000000 ffffffff ffffe00f     ..?.............
   1aa7c:	001fffff f0000000 ffffffff fffff81f     ................
   1aa8c:	001fffff e0000000 ffffffff fffffc3f     ............?...
   1aa9c:	000fffff c0000000 ffffffff fffffc3f     ............?...
   1aaac:	0007ffff 80000000 ffffffff fffffe7f     ................
   1aabc:	0003ffff 00000000 ffffffff ffffffff     ................
   1aacc:	0001ffff 00000000 fffffffe ffffffff     ................
   1aadc:	00007fff 00000000 fffffff8 ffffffff     ................
   1aaec:	00003fff 00000000 ffffffe0 ffffffff     .?..............
   1aafc:	000007ff 00000000 fffffe00 ffffffff     ................
   1ab0c:	0000007f 00000000 e0000000 0007ffff     ................
	...
   1ab24:	80000000 0001ffff 00000000 00000000     ................
   1ab34:	00000000 00007ffe 00000000 00000000     ................
   1ab44:	00000000 00003ffc 00000000 00000000     .....?..........
   1ab54:	00000000 00003ffc 00000000 00000000     .....?..........
   1ab64:	00000000 00001ff8 00000000 00000000     ................
   1ab74:	00000000 00001ff8 00000000 00000000     ................
   1ab84:	00000000 00001ff8 00000000 00000000     ................
   1ab94:	00000000 00001ff8 00000000 00000000     ................
	...
   1ac18:	0003c000 00000000 00000000 00000000     ................
   1ac28:	0003fe00 00000000 00000000 00000000     ................
   1ac38:	0003ff80 00000000 00000000 00000000     ................
   1ac48:	0003ffe0 00000000 00000000 00000000     ................
   1ac58:	0003fff0 00000000 00000000 00000000     ................
   1ac68:	0003fff8 00000000 00000000 00000000     ................
   1ac78:	0003fffc 00000000 00000000 00000000     ................
   1ac88:	0003fffe 00000000 00000000 00000000     ................
   1ac98:	0003ffff 00000000 00000000 00000000     ................
   1aca8:	0003ffff 00000000 00000000 80000000     ................
   1acb8:	0003ffff 00000000 00000000 80000000     ................
   1acc8:	00003fff 00000000 00000000 c0000000     .?..............
   1acd8:	00000fff 00000000 00000000 c0000000     ................
   1ace8:	000003ff 00000000 00000000 c0000000     ................
   1acf8:	000003ff 00000000 00000000 c0000000     ................
   1ad08:	000001ff 00000000 00000000 c0000000     ................
   1ad18:	000001ff 00000000 00000000 c0000000     ................
   1ad28:	000001ff 00000000 00000000 c0000000     ................
   1ad38:	000001ff 00000000 00000000 c0000000     ................
   1ad48:	000001ff 00000000 00000000 c0000000     ................
   1ad58:	000003ff 00000000 00000000 80000000     ................
   1ad68:	000003ff 00000000 00000000 80000000     ................
   1ad78:	000007ff 00000000 00000000 00000000     ................
   1ad88:	00000fff 00000000 00000000 00000000     ................
   1ad98:	00001fff 00000000 00000000 00000000     ................
   1ada8:	00003ffe 00000000 00000000 00000000     .?..............
   1adb8:	00007ffe 00000000 00000000 00000000     ................
   1adc8:	0000fffc 00000000 00000000 00000000     ................
   1add8:	0000fff8 00000000 00000000 00000000     ................
   1ade8:	0001fff0 00000000 00000000 00000000     ................
   1adf8:	0003ffe0 00000000 00000000 00000000     ................
   1ae08:	0003ffc0 00000000 00000000 00000000     ................
   1ae18:	0007ff80 00000000 00000000 00000000     ................
   1ae28:	0007ff80 00000000 00000000 00000000     ................
   1ae38:	0007ff00 00000000 00000000 00000000     ................
   1ae48:	000fff00 00000000 00000000 00000000     ................
   1ae58:	000ffe00 00000000 00000000 00000000     ................
   1ae68:	000ffe00 00000000 00000000 00000000     ................
   1ae78:	000ffe00 00000000 00000000 00000000     ................
   1ae88:	000ffe00 00000000 00000000 00000000     ................
   1ae98:	000fff00 00000000 00000000 00000000     ................
   1aea8:	000fff00 00000000 00000000 00000000     ................
   1aeb8:	000fff80 00000000 00000000 00000000     ................
   1aec8:	0007ffe0 00000000 00000000 00000000     ................
   1aed8:	0007fffc 00000000 00000000 00000000     ................
   1aee8:	0007ffff 00000000 00000000 00000000     ................
   1aef8:	0003ffff 00000000 00000000 00000000     ................
   1af08:	0001ffff 00000000 00000000 00000000     ................
   1af18:	0001ffff 00000000 00000000 00000000     ................
   1af28:	0000ffff 00000000 00000000 00000000     ................
   1af38:	00007fff 00000000 00000000 00000000     ................
   1af48:	00001fff 00000000 00000000 00000000     ................
   1af58:	00000fff 00000000 00000000 00000000     ................
   1af68:	000001ff 00000000 00000000 00000000     ................
   1af78:	0000003f 00000000 00000000 00000000     ?...............
	...

0001afe0 <ArvoBold_18pt_CharCount>:
   1afe0:	12080805 0410150f 0e0c0808 09050906     ................
   1aff0:	0d0e0a0f 0e0e0e0e 05060d0e 0e0a0c0a     ................
   1b000:	1210111b 130f1011 13080816 13141b10     ................
   1b010:	0f121310 1c121211 080f1212 0c0e0709     ................
   1b020:	0e0f0f09 0f090e10 11070910 0f111909     ................
   1b030:	0d0d1010 160f1108 0b0d0f0e 000b0b07     ................

0001b040 <ArvoBold_18pt_Table>:
	...
   1b05c:	03cfff00 03cfff00 03cfff00 00000000     ................
	...
   1b078:	00003f00 00003f00 00001f00 00000000     .?...?..........
   1b088:	00003f00 00003f00 00001f00 00700000     .?...?........p.
   1b098:	03706000 03f07000 03fff000 00fffc00     .`p..p..........
   1b0a8:	007fff00 00707f00 00707300 03707000     ......p..sp..pp.
   1b0b8:	03f07000 03fe7000 01fff000 007ffc00     .p...p..........
   1b0c8:	0071ff00 00707f00 00307300 00007000     ..q...p..s0..p..
	...
   1b0e0:	00f00000 00f3c000 00f7e000 01f7f000     ................
   1b0f0:	01e77000 0fce7f00 0fce7f00 0fceff00     .p..............
   1b100:	01ddf000 00fde000 00fde000 0079e000     ..............y.
	...
   1b120:	00007c00 0000fe00 0201ff00 0301c700     .|..............
   1b130:	03c1c700 01e1c700 00f9ff00 003cfe00     ..............<.
   1b140:	001f7c00 00ff8000 01ffe000 03fef000     .|..............
   1b150:	038e7c00 038e1e00 038e0f00 03fe0300     .|..............
   1b160:	01fc0100 00f80000 00000000 00000000     ................
   1b170:	00780000 00fe7800 01fffe00 03c7fe00     ..x..x..........
   1b180:	0383cf00 03878700 039f8700 03ffcf00     ................
   1b190:	01fffe00 01fcfe00 00f8f800 01fe0000     ................
   1b1a0:	03fe0000 03ce0000 01800000 00003f00     .............?..
   1b1b0:	00003f00 00000f00 00000000 00000000     .?..............
   1b1c0:	01ff8000 0ffff000 3ffffc00 ff00fe00     ...........?....
   1b1d0:	f8001f00 70000e00 00000000 00000000     .......p........
   1b1e0:	70000e00 f8001f00 7f00fe00 3ffffc00     ...p...........?
   1b1f0:	0ffff000 01ff8000 00000000 00000000     ................
   1b200:	00000e00 0000ce00 0000fc00 0000ff80     ................
   1b210:	00007f80 00007f80 0000fc00 0000fc00     ................
   1b220:	0000ce00 00000e00 00000000 00000000     ................
   1b230:	000e0000 000e0000 000e0000 000e0000     ................
   1b240:	00ffe000 00ffe000 00ffe000 000e0000     ................
   1b250:	000e0000 000e0000 000e0000 00000000     ................
   1b260:	00000000 30000000 3f000000 1f800000     .......0...?....
   1b270:	07800000 00000000 00000000 00000000     ................
   1b280:	001c0000 001c0000 001c0000 001c0000     ................
   1b290:	001c0000 001c0000 001c0000 00000000     ................
   1b2a0:	00000000 03c00000 03c00000 03c00000     ................
	...
   1b2b8:	03000000 03e00000 03fc0000 01ff8000     ................
   1b2c8:	003ff000 0007fe00 0000ff00 00001f00     ..?.............
   1b2d8:	00000000 001fe000 007ff800 01fffe00     ................
   1b2e8:	01e01e00 03c00f00 03800700 03800700     ................
   1b2f8:	03800700 03c00f00 01e01e00 01fffe00     ................
   1b308:	007ff800 001fe000 00000000 00007800     .............x..
   1b318:	03807c00 03803e00 03fffe00 03ffff00     .|...>..........
   1b328:	03ffff00 03800000 03800000 00000000     ................
	...
   1b340:	03c03800 03e03c00 03f03e00 03f80f00     .8...<...>......
   1b350:	03bc0700 039e0700 038f0700 03878700     ................
   1b360:	0383cf00 0381fe00 0380fc00 03807800     .............x..
   1b370:	00000000 00601800 00e01c00 01e01e00     ......`.........
   1b380:	03c00f00 03800700 03838700 03838700     ................
   1b390:	03838700 01c7cf00 01fffe00 00fefc00     ................
   1b3a0:	007c7800 00000000 000f0000 000f8000     .x|.............
   1b3b0:	000fe000 000ef000 000e7c00 000e1e00     .........|......
   1b3c0:	038e0f00 038e0300 03ffc100 03ffc000     ................
   1b3d0:	03ffc000 038e0000 038e0000 00000000     ................
	...
   1b3e8:	00e1ff00 01e1ff00 01e1ff00 03c1c700     ................
   1b3f8:	0381c700 0381c700 0381c700 03c3c700     ................
   1b408:	01ff8700 00ff0700 007e0000 00000000     ..........~.....
   1b418:	00000000 003c0000 00ff0000 01ffc000     ......<.........
   1b428:	01c3f000 0381f800 0381fe00 0381cf00     ................
   1b438:	0381c700 01c38100 01ff8000 00ff0000     ................
   1b448:	003c0000 00000000 00003f00 00003f00     ..<......?...?..
   1b458:	03803f00 03800700 03e00700 03f80700     .?..............
   1b468:	03ff0700 039fc700 0387f700 0000ff00     ................
   1b478:	00003f00 00000f00 00000300 00000000     .?..............
   1b488:	00000000 007c7800 00fefc00 01fffe00     .....x|.........
   1b498:	01c7cf00 03838700 03838700 03838700     ................
   1b4a8:	03838700 01c7cf00 01fffe00 00fefc00     ................
   1b4b8:	007c7800 00000000 00000000 0001f000     .x|.............
   1b4c8:	0003fc00 0007fe00 030f0e00 03ce0700     ................
   1b4d8:	03ee0700 03fe0700 00fe0700 003f0e00     ..............?.
   1b4e8:	000ffe00 0003fc00 0000f800 00000000     ................
   1b4f8:	03c3c000 03c3c000 03c3c000 00000000     ................
   1b508:	00000000 3f000000 1f81e000 0781e000     .......?........
   1b518:	0301e000 00000000 001e0000 001e0000     ................
   1b528:	001f0000 003f0000 003f0000 00738000     ......?...?...s.
   1b538:	00738000 00738000 00e1c000 00000000     ..s...s.........
   1b548:	00000000 0039c000 0039c000 0039c000     ......9...9...9.
   1b558:	0039c000 0039c000 0039c000 0039c000     ..9...9...9...9.
   1b568:	0039c000 0039c000 0039c000 00000000     ..9...9...9.....
   1b578:	00e1c000 00738000 00738000 00738000     ......s...s...s.
   1b588:	003f0000 003f0000 003f0000 001e0000     ..?...?...?.....
   1b598:	001e0000 001e0000 00000000 00001c00     ................
   1b5a8:	00001e00 00001e00 03dc0f00 03df0700     ................
   1b5b8:	03df0700 00038700 0001c700 0001fe00     ................
   1b5c8:	0000fe00 00007800 00000000 00000000     .....x..........
	...
   1b5e0:	00ff0000 03ffc000 07ffe000 1f81f800     ................
   1b5f0:	3e007c00 3c3c3c00 78ff1e00 71ff8e00     .|.>.<<<...x...q
   1b600:	f1c38f00 e381c700 e381c700 e381c700     ................
   1b610:	e381c700 e1c3c700 f1ffcf00 73ffce00     ...............s
   1b620:	73ffde00 03801c00 03803c00 03c0f800     ...s.....<......
	...
   1b644:	03800000 03c00000 03f80000 03ff0000     ................
   1b654:	03bfe000 038ff800 000eff00 000e1f00     ................
   1b664:	000e0700 000e7f00 038fff00 039ff800     ................
   1b674:	03ff8000 03fc0000 03e00000 03800000     ................
	...
   1b68c:	03800700 03800700 03ffff00 03ffff00     ................
   1b69c:	03ffff00 03838700 03838700 03838700     ................
   1b6ac:	03838700 03838700 03c7cf00 01fffe00     ................
   1b6bc:	00fffc00 007cf800 00000000 00000000     ......|.........
   1b6cc:	000fc000 003ff000 007ffc00 00f03e00     ......?......>..
   1b6dc:	01e01e00 01c00f00 03800700 03800700     ................
   1b6ec:	03800700 03800700 03c00f00 01e01e00     ................
   1b6fc:	01f03c00 00f03800 00703800 00303800     .<...8...8p..80.
   1b70c:	00000000 03800700 03800700 03ffff00     ................
   1b71c:	03ffff00 03ffff00 03800700 03800700     ................
   1b72c:	03800700 03800700 03c00f00 01c00e00     ................
   1b73c:	01e01e00 00f87c00 007ff800 003ff000     .....|........?.
   1b74c:	000fc000 00000000 00000000 03800700     ................
   1b75c:	03800700 03ffff00 03ffff00 03ffff00     ................
   1b76c:	03838700 03838700 03838700 03838700     ................
   1b77c:	03838700 03800700 03f03f00 03f03f00     .........?...?..
   1b78c:	03f03f00 00000000 00000000 03800700     .?..............
   1b79c:	03800700 03ffff00 03ffff00 03ffff00     ................
   1b7ac:	03838700 03838700 00038700 00038700     ................
   1b7bc:	00038700 00000700 00001f00 00001f00     ................
   1b7cc:	00001f00 00000000 000fc000 003ff000     ..............?.
   1b7dc:	00fff800 00f07c00 01e01e00 01c00e00     .....|..........
   1b7ec:	03800700 03800700 03800700 03870700     ................
   1b7fc:	03870700 03c70e00 01e71e00 01f73c00     .............<..
   1b80c:	00ff3800 03ff3800 03ff3800 00000000     .8...8...8......
   1b81c:	00000000 03800700 03800700 03ffff00     ................
   1b82c:	03ffff00 03ffff00 03838700 03838700     ................
   1b83c:	00038000 00038000 00038000 00038000     ................
   1b84c:	00038000 00038000 03838700 03838700     ................
   1b85c:	03ffff00 03ffff00 03ffff00 03800700     ................
   1b86c:	03800700 00000000 00000000 03800700     ................
   1b87c:	03800700 03ffff00 03ffff00 03ffff00     ................
   1b88c:	03800700 03800700 00000000 0c000700     ................
   1b89c:	0f000700 0fffff00 07ffff00 01ffff00     ................
   1b8ac:	00000700 00000700 00000000 03800700     ................
   1b8bc:	03800700 03ffff00 03ffff00 03ffff00     ................
   1b8cc:	03820700 03830700 00078000 000fc000     ................
   1b8dc:	001ce000 00387000 00383800 03f03f00     .....p8..88..?..
   1b8ec:	03e01f00 03c00f00 03800700 03800700     ................
   1b8fc:	00000700 00000000 03800700 03800700     ................
   1b90c:	03ffff00 03ffff00 03ffff00 03800700     ................
   1b91c:	03800700 03800000 03800000 03800000     ................
   1b92c:	03800000 03f80000 03f80000 03f80000     ................
	...
   1b944:	03800700 03800700 03ffff00 03ffff00     ................
   1b954:	03ffff00 03803f00 0000fc00 0003f800     .....?..........
   1b964:	0007e000 001f8000 007e0000 01f80000     ..........~.....
   1b974:	03e00000 03f80000 01fe0000 003f8000     ..............?.
   1b984:	000fe000 0003f800 0000fe00 03803f00     .............?..
   1b994:	03ffff00 03ffff00 03ffff00 03800700     ................
   1b9a4:	03800700 00000000 00000000 03800700     ................
   1b9b4:	03800700 03ffff00 03ffff00 03fffe00     ................
   1b9c4:	0380fc00 0381f000 0007e000 000f8000     ................
   1b9d4:	003f0000 007c0000 01f00700 03e00700     ..?...|.........
   1b9e4:	03ffff00 03ffff00 03ffff00 00000700     ................
   1b9f4:	00000700 00000000 00000000 000fc000     ................
   1ba04:	003ff000 007ff800 00f03c00 01e01e00     ..?......<......
   1ba14:	01c00e00 03800700 03800700 03800700     ................
   1ba24:	03800700 03800700 01c00e00 01e01e00     ................
   1ba34:	00f03c00 007ff800 003ff000 000fc000     .<........?.....
	...
   1ba4c:	03800700 03800700 03ffff00 03ffff00     ................
   1ba5c:	03ffff00 03870700 03870700 00070700     ................
   1ba6c:	00070700 00070700 00078f00 0003fe00     ................
   1ba7c:	0001fc00 0000f800 00000000 00000000     ................
   1ba8c:	000fc000 003ff000 00fff800 00f03c00     ......?......<..
   1ba9c:	01e01e00 03c00e00 03800700 3f800700     ...............?
   1baac:	3f800700 3f800700 7b800700 f3c00e00     ...?...?...{....
   1babc:	e1e01e00 e0f03c00 f0fff800 703ff000     .....<........?p
   1bacc:	700fc000 00000000 00000000 03800700     ...p............
   1badc:	03800700 03ffff00 03ffff00 03ffff00     ................
   1baec:	03870700 03870700 00070700 00070700     ................
   1bafc:	00070700 000f0700 00ff0700 03ff8f00     ................
   1bb0c:	03f9fe00 03e1fc00 03807800 00000000     .........x......
   1bb1c:	00000000 00787800 00f9fc00 01f9fe00     .....xx.........
   1bb2c:	01c3cf00 0383c700 03878700 03878700     ................
   1bb3c:	03878700 03870700 01cf0e00 01ff3e00     .............>..
   1bb4c:	00fe3c00 007c3800 00000000 00003f00     .<...8|......?..
   1bb5c:	00003f00 00003f00 00000700 03800700     .?...?..........
   1bb6c:	03800700 03ffff00 03ffff00 03ffff00     ................
   1bb7c:	03800700 03800700 00000700 00000700     ................
   1bb8c:	00003f00 00003f00 00003f00 00000000     .?...?...?......
   1bb9c:	00000700 00000700 001fff00 007fff00     ................
   1bbac:	00ffff00 01e00700 03c00700 03800000     ................
   1bbbc:	03800000 03800000 03800000 03c00700     ................
   1bbcc:	01e00700 00ffff00 007fff00 001fff00     ................
   1bbdc:	00000700 00000700 00000700 00000700     ................
   1bbec:	00000f00 00007f00 0003ff00 000ff700     ................
   1bbfc:	007f8700 01fe0000 03f00000 03f00000     ................
   1bc0c:	03fe0000 007f8700 000ff700 0003ff00     ................
   1bc1c:	00007f00 00000f00 00000700 00000700     ................
   1bc2c:	00000700 00000700 00000f00 00007f00     ................
   1bc3c:	0003ff00 000ff700 007fc700 01fe0000     ................
   1bc4c:	03f80000 03e00000 03fe0000 01ffe000     ................
   1bc5c:	001ffe00 0000ff00 0000ff00 0007fc00     ................
   1bc6c:	003fe000 01ff0000 03f80000 03f00000     ..?.............
   1bc7c:	01fe0000 007f8700 001ff700 0003ff00     ................
   1bc8c:	00007f00 00000f00 00000700 00000700     ................
   1bc9c:	03800700 03c00f00 03e01f00 03f03f00     .............?..
   1bcac:	03f87f00 03bcf700 001fe000 000fc000     ................
   1bcbc:	000fc000 001fe000 03bcf700 03f87f00     ................
   1bccc:	03f03f00 03e01f00 03c00f00 03800700     .?..............
	...
   1bce4:	00000700 00000700 00000f00 00001f00     ................
   1bcf4:	00003f00 03807f00 0380f700 03ffc000     .?..............
   1bd04:	03ff8000 03ffc000 0380e000 03807700     .............w..
   1bd14:	00003f00 00001f00 00000f00 00000700     .?..............
   1bd24:	00000700 00000000 00000000 03e07f00     ................
   1bd34:	03f07f00 03f87f00 03de0700 038f0700     ................
   1bd44:	0387c700 0381e700 0380f700 03803f00     .............?..
   1bd54:	03801f00 03f00f00 03f00f00 03f00700     ................
	...
   1bd6c:	ffffffe0 ffffffe0 ffffffe0 e00000e0     ................
   1bd7c:	e00000e0 00000000 00000000 00000100     ................
   1bd8c:	00000f00 00007f00 0001fe00 000ff800     ................
   1bd9c:	007fc000 01fe0000 03f00000 03c00000     ................
   1bdac:	00000000 e00000e0 e00000e0 ffffffe0     ................
   1bdbc:	ffffffe0 ffffffe0 00000000 00000000     ................
   1bdcc:	00010000 0001c000 0001f000 0001fc00     ................
   1bddc:	00003f00 00000f00 00000f00 00003f00     .?...........?..
   1bdec:	0000fe00 0001f800 0001c000 00010000     ................
   1bdfc:	00000000 38000000 38000000 38000000     .......8...8...8
   1be0c:	38000000 38000000 38000000 38000000     ...8...8...8...8
   1be1c:	38000000 38000000 38000000 38000000     ...8...8...8...8
   1be2c:	38000000 00000000 00000000 00000100     ...8............
   1be3c:	00000300 00000700 00000f00 00000e00     ................
   1be4c:	00000800 00000000 00000000 00e00000     ................
   1be5c:	01f18000 03f98000 0399c000 0399c000     ................
   1be6c:	0399c000 0399c000 039bc000 03ffc000     ................
   1be7c:	03ff8000 03ff0000 03800000 03800000     ................
   1be8c:	00000000 00000700 00000700 03ffff00     ................
   1be9c:	03ffff00 03ffff00 03c3c000 0381c000     ................
   1beac:	0381c000 0381c000 0381c000 01c38000     ................
   1bebc:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
   1becc:	00000000 003e0000 00ff0000 01ff8000     ......>.........
   1bedc:	01c38000 0381c000 0381c000 0381c000     ................
   1beec:	0381c000 03c3c000 01e38000 00e38000     ................
   1befc:	00638000 00000000 00000000 003c0000     ..c...........<.
   1bf0c:	00ff0000 01ff8000 03c38000 0381c000     ................
   1bf1c:	0381c000 0381c000 0381c700 03c3c700     ................
   1bf2c:	03ffff00 03ffff00 03ffff00 03800000     ................
   1bf3c:	03800000 00000000 00000000 003c0000     ..............<.
   1bf4c:	00ff0000 01ff8000 01d98000 0399c000     ................
   1bf5c:	0399c000 0399c000 0399c000 0399c000     ................
   1bf6c:	039f8000 019f0000 001e0000 00000000     ................
   1bf7c:	00000000 0381c000 0381c000 03fffc00     ................
   1bf8c:	03fffe00 03ffff00 0381c700 0381c700     ................
   1bf9c:	00000700 00000000 003c0000 60ff0000     ..........<....`
   1bfac:	71ff8000 f1c38000 e381c000 e381c000     ...q............
   1bfbc:	e381c000 e381c000 f3c3c000 7fffc000     ................
   1bfcc:	3fffc000 1fffc000 00000000 00000000     ...?............
   1bfdc:	00000000 03800700 03800700 03ffff00     ................
   1bfec:	03ffff00 03ffff00 03838000 0381c000     ................
   1bffc:	0001c000 0001c000 0003c000 03ffc000     ................
   1c00c:	03ff8000 03ff0000 03800000 03800000     ................
   1c01c:	00000000 0381c000 0381c600 03ffcf00     ................
   1c02c:	03ffcf00 03ffcf00 03800600 03800000     ................
   1c03c:	00000000 e001c000 e001c000 ffffc600     ................
   1c04c:	7fffcf00 3fffcf00 00000f00 00000600     .......?........
   1c05c:	00000000 03800700 03800700 03ffff00     ................
   1c06c:	03ffff00 03ffff00 039c0000 039c0000     ................
   1c07c:	003c0000 007f0000 00ff8000 01e7c000     ..<.............
   1c08c:	03c3c000 03c1c000 03c1c000 00000000     ................
	...
   1c0a4:	03800700 03800700 03ffff00 03ffff00     ................
   1c0b4:	03ffff00 03800000 03800000 00000000     ................
   1c0c4:	00000000 0381c000 0381c000 03ffc000     ................
   1c0d4:	03ffc000 03ffc000 03838000 0381c000     ................
   1c0e4:	0001c000 0001c000 0003c000 03ffc000     ................
   1c0f4:	03ff8000 03ff0000 03838000 0381c000     ................
   1c104:	0001c000 0001c000 0003c000 03ffc000     ................
   1c114:	03ff8000 03ff0000 03800000 03800000     ................
   1c124:	00000000 0381c000 0381c000 03ffc000     ................
   1c134:	03ffc000 03ffc000 03838000 0381c000     ................
   1c144:	0001c000 0001c000 0001c000 0003c000     ................
   1c154:	03ffc000 03ff8000 03ff0000 03800000     ................
   1c164:	03800000 00000000 003c0000 00ff0000     ..........<.....
   1c174:	01ff8000 01c38000 03c1c000 0381c000     ................
   1c184:	0381c000 0381c000 0381c000 01c38000     ................
   1c194:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
	...
   1c1ac:	e001c000 e001c000 ffffc000 ffffc000     ................
   1c1bc:	ffffc000 e3c3c000 e381c000 0381c000     ................
   1c1cc:	0381c000 0381c000 01c38000 01ff8000     ................
   1c1dc:	00ff0000 003c0000 00000000 00000000     ......<.........
   1c1ec:	003c0000 00ff0000 01ff8000 01c38000     ..<.............
   1c1fc:	03c3c000 0381c000 0381c000 0381c000     ................
   1c20c:	e381c000 e3c3c000 ffffc000 ffffc000     ................
   1c21c:	ffffc000 e0000000 e0000000 00000000     ................
   1c22c:	0381c000 0381c000 03ffc000 03ffc000     ................
   1c23c:	03ffc000 03838000 0381c000 0001c000     ................
   1c24c:	0003c000 0003c000 0003c000 00000000     ................
   1c25c:	00000000 01c70000 01cf8000 01cfc000     ................
   1c26c:	03ddc000 0399c000 0399c000 0399c000     ................
   1c27c:	03bbc000 01fb8000 01f38000 00e38000     ................
   1c28c:	00000000 0001c000 0001c000 01fff800     ................
   1c29c:	03fffc00 03fffc00 0381c000 0381c000     ................
   1c2ac:	01800000 0001c000 0001c000 007fc000     ................
   1c2bc:	01ffc000 01ffc000 03c00000 03800000     ................
   1c2cc:	03800000 03800000 0381c000 01c1c000     ................
   1c2dc:	03ffc000 03ffc000 03ffc000 03800000     ................
   1c2ec:	03800000 00000000 0001c000 0001c000     ................
   1c2fc:	0003c000 000fc000 003fc000 00fdc000     ..........?.....
   1c30c:	03f1c000 03c00000 03f00000 01fdc000     ................
   1c31c:	007fc000 000fc000 0003c000 0001c000     ................
   1c32c:	0001c000 0001c000 0001c000 0007c000     ................
   1c33c:	001fc000 00ffc000 03fdc000 03e1c000     ................
   1c34c:	03f80000 01ff8000 003fc000 0007c000     ..........?.....
   1c35c:	000fc000 007fc000 03fe0000 03f00000     ................
   1c36c:	03e1c000 03fdc000 00ffc000 001fc000     ................
   1c37c:	0003c000 0001c000 0001c000 0381c000     ................
   1c38c:	0381c000 03c1c000 03e3c000 03f7c000     ................
   1c39c:	03ffc000 003c0000 003c0000 03ffc000     ......<...<.....
   1c3ac:	03ffc000 03e7c000 03c3c000 0381c000     ................
   1c3bc:	0381c000 0001c000 0001c000 0003c000     ................
   1c3cc:	e00fc000 e03fc000 f0fdc000 fff00000     ......?.........
   1c3dc:	ffc00000 eff00000 e3fdc000 007fc000     ................
   1c3ec:	001fc000 0003c000 0001c000 0001c000     ................
   1c3fc:	00000000 0387c000 03c7c000 03f7c000     ................
   1c40c:	03f9c000 03fdc000 039fc000 038fc000     ................
   1c41c:	03e3c000 03e1c000 03e04000 00000000     .........@......
	...
   1c434:	00070000 00070000 00070000 1fffffc0     ................
   1c444:	3fffffe0 3ffdffe0 380000e0 380000e0     ...?...?...8...8
	...
   1c460:	ffffffe0 ffffffe0 ffffffe0 00000000     ................
	...
   1c478:	380000e0 380000e0 3ffdffe0 3fffffe0     ...8...8...?...?
   1c488:	1fffffc0 00070000 00070000 00070000     ................
	...
   1c4a4:	00070000 00078000 0001c000 0001c000     ................
   1c4b4:	0003c000 00038000 00078000 00070000     ................
   1c4c4:	00070000 0003c000 0001c000 6e756f43     ............Coun
   1c4d4:	00726574 00006425                       ter.%d..

0001c4dc <__sf_fake_stderr>:
	...

0001c4fc <__sf_fake_stdin>:
	...

0001c51c <__sf_fake_stdout>:
	...
   1c53c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   1c54c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   1c55c:	31300046 35343332 39383736 64636261     F.0123456789abcd
   1c56c:	00006665                                ef..

0001c570 <_init>:
   1c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c572:	46c0      	nop			; (mov r8, r8)
   1c574:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c576:	bc08      	pop	{r3}
   1c578:	469e      	mov	lr, r3
   1c57a:	4770      	bx	lr

0001c57c <__init_array_start>:
   1c57c:	000000dd 	.word	0x000000dd

0001c580 <_fini>:
   1c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c582:	46c0      	nop			; (mov r8, r8)
   1c584:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c586:	bc08      	pop	{r3}
   1c588:	469e      	mov	lr, r3
   1c58a:	4770      	bx	lr

0001c58c <__fini_array_start>:
   1c58c:	000000b5 	.word	0x000000b5
