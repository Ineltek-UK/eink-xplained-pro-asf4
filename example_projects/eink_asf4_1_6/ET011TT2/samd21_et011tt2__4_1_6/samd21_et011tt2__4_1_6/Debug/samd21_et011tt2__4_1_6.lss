
samd21_et011tt2__4_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f3c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000348  20000000  00006f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  20000348  00007284  00020348  2**2
                  ALLOC
  3 .stack        00002004  2000042c  00007368  00020348  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a89b  00000000  00000000  000203c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c5f  00000000  00000000  0003ac64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e9a3  00000000  00000000  0003c8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005f0  00000000  00000000  0004b266  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007a8  00000000  00000000  0004b856  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000050b4  00000000  00000000  0004bffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009cfa  00000000  00000000  000510b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000867bf  00000000  00000000  0005adac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001484  00000000  00000000  000e156c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     0$. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000348 	.word	0x20000348
      d4:	00000000 	.word	0x00000000
      d8:	00006f3c 	.word	0x00006f3c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000034c 	.word	0x2000034c
     108:	00006f3c 	.word	0x00006f3c
     10c:	00006f3c 	.word	0x00006f3c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00006f3c 	.word	0x00006f3c
     1c8:	20000000 	.word	0x20000000
     1cc:	20000348 	.word	0x20000348
     1d0:	20000004 	.word	0x20000004
     1d4:	20000348 	.word	0x20000348
     1d8:	2000042c 	.word	0x2000042c
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	000045ad 	.word	0x000045ad
     1f8:	0000447d 	.word	0x0000447d

000001fc <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
     1fc:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fe:	4802      	ldr	r0, [pc, #8]	; (208 <delay_driver_init+0xc>)
     200:	4b02      	ldr	r3, [pc, #8]	; (20c <delay_driver_init+0x10>)
     202:	4798      	blx	r3
}
     204:	bd10      	pop	{r4, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	e000e010 	.word	0xe000e010
     20c:	00000369 	.word	0x00000369

00000210 <system_init>:

void system_init(void)
{
     210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     212:	46de      	mov	lr, fp
     214:	4657      	mov	r7, sl
     216:	464e      	mov	r6, r9
     218:	4645      	mov	r5, r8
     21a:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     21c:	4b40      	ldr	r3, [pc, #256]	; (320 <system_init+0x110>)
     21e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     220:	22c0      	movs	r2, #192	; 0xc0
     222:	05d2      	lsls	r2, r2, #23
     224:	2310      	movs	r3, #16
     226:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     228:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22a:	4b3e      	ldr	r3, [pc, #248]	; (324 <system_init+0x114>)
     22c:	493e      	ldr	r1, [pc, #248]	; (328 <system_init+0x118>)
     22e:	6299      	str	r1, [r3, #40]	; 0x28
     230:	24c0      	movs	r4, #192	; 0xc0
     232:	0624      	lsls	r4, r4, #24
     234:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	2544      	movs	r5, #68	; 0x44
     238:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23a:	2101      	movs	r1, #1
     23c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     240:	2020      	movs	r0, #32
     242:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     244:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     246:	4839      	ldr	r0, [pc, #228]	; (32c <system_init+0x11c>)
     248:	6298      	str	r0, [r3, #40]	; 0x28
     24a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24c:	3501      	adds	r5, #1
     24e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     250:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     252:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     254:	2040      	movs	r0, #64	; 0x40
     256:	4684      	mov	ip, r0
     258:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25c:	4834      	ldr	r0, [pc, #208]	; (330 <system_init+0x120>)
     25e:	4682      	mov	sl, r0
     260:	6298      	str	r0, [r3, #40]	; 0x28
     262:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     264:	3501      	adds	r5, #1
     266:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     268:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     26c:	2080      	movs	r0, #128	; 0x80
     26e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     270:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     272:	4830      	ldr	r0, [pc, #192]	; (334 <system_init+0x124>)
     274:	4680      	mov	r8, r0
     276:	6298      	str	r0, [r3, #40]	; 0x28
     278:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	3501      	adds	r5, #1
     27c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     280:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     282:	2580      	movs	r5, #128	; 0x80
     284:	022d      	lsls	r5, r5, #8
     286:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     288:	482b      	ldr	r0, [pc, #172]	; (338 <system_init+0x128>)
     28a:	6298      	str	r0, [r3, #40]	; 0x28
     28c:	482b      	ldr	r0, [pc, #172]	; (33c <system_init+0x12c>)
     28e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     290:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     292:	204f      	movs	r0, #79	; 0x4f
     294:	5c1e      	ldrb	r6, [r3, r0]
     296:	2704      	movs	r7, #4
     298:	433e      	orrs	r6, r7
     29a:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     29c:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a2:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2a4:	2694      	movs	r6, #148	; 0x94
     2a6:	5191      	str	r1, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a8:	3039      	adds	r0, #57	; 0x39
     2aa:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ac:	3020      	adds	r0, #32
     2ae:	4f24      	ldr	r7, [pc, #144]	; (340 <system_init+0x130>)
     2b0:	501f      	str	r7, [r3, r0]
     2b2:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b4:	27c0      	movs	r7, #192	; 0xc0
     2b6:	46bb      	mov	fp, r7
     2b8:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438f      	bics	r7, r1
     2bc:	46b9      	mov	r9, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2be:	465f      	mov	r7, fp
     2c0:	464d      	mov	r5, r9
     2c2:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c4:	4665      	mov	r5, ip
     2c6:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2c8:	3f38      	subs	r7, #56	; 0x38
     2ca:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4655      	mov	r5, sl
     2ce:	501d      	str	r5, [r3, r0]
     2d0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	25c6      	movs	r5, #198	; 0xc6
     2d4:	46a9      	mov	r9, r5
     2d6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d8:	002f      	movs	r7, r5
     2da:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	464d      	mov	r5, r9
     2de:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e0:	3d46      	subs	r5, #70	; 0x46
     2e2:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2e4:	3508      	adds	r5, #8
     2e6:	2780      	movs	r7, #128	; 0x80
     2e8:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ea:	4645      	mov	r5, r8
     2ec:	501d      	str	r5, [r3, r0]
     2ee:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f0:	3747      	adds	r7, #71	; 0x47
     2f2:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2f4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f6:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f8:	2480      	movs	r4, #128	; 0x80
     2fa:	05e4      	lsls	r4, r4, #23
     2fc:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2fe:	2588      	movs	r5, #136	; 0x88
     300:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     302:	501c      	str	r4, [r3, r0]
     304:	4a0f      	ldr	r2, [pc, #60]	; (344 <system_init+0x134>)
     306:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     308:	3036      	adds	r0, #54	; 0x36
     30a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     30c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(EINK_X_LED_0_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(EINK_X_LED_0_PIN, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
     310:	4b0d      	ldr	r3, [pc, #52]	; (348 <system_init+0x138>)
     312:	4798      	blx	r3
}
     314:	bc3c      	pop	{r2, r3, r4, r5}
     316:	4690      	mov	r8, r2
     318:	4699      	mov	r9, r3
     31a:	46a2      	mov	sl, r4
     31c:	46ab      	mov	fp, r5
     31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     320:	000003cd 	.word	0x000003cd
     324:	41004400 	.word	0x41004400
     328:	40000010 	.word	0x40000010
     32c:	40000020 	.word	0x40000020
     330:	40000040 	.word	0x40000040
     334:	40000080 	.word	0x40000080
     338:	40028000 	.word	0x40028000
     33c:	c0020000 	.word	0xc0020000
     340:	40000001 	.word	0x40000001
     344:	c0004000 	.word	0xc0004000
     348:	000001fd 	.word	0x000001fd

0000034c <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     34c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     350:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     352:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     354:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     358:	4770      	bx	lr

0000035a <atomic_leave_critical>:
     35a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     35e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     360:	f383 8810 	msr	PRIMASK, r3
}
     364:	4770      	bx	lr
	...

00000368 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     368:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     36a:	4b02      	ldr	r3, [pc, #8]	; (374 <delay_init+0xc>)
     36c:	6018      	str	r0, [r3, #0]
     36e:	4b02      	ldr	r3, [pc, #8]	; (378 <delay_init+0x10>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	20000364 	.word	0x20000364
     378:	0000050d 	.word	0x0000050d

0000037c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     37c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <delay_ms+0x14>)
     380:	681c      	ldr	r4, [r3, #0]
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x18>)
     384:	4798      	blx	r3
     386:	0001      	movs	r1, r0
     388:	0020      	movs	r0, r4
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <delay_ms+0x1c>)
     38c:	4798      	blx	r3
}
     38e:	bd10      	pop	{r4, pc}
     390:	20000364 	.word	0x20000364
     394:	000003c1 	.word	0x000003c1
     398:	00000521 	.word	0x00000521

0000039c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     39c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     39e:	4a06      	ldr	r2, [pc, #24]	; (3b8 <_sbrk+0x1c>)
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	2a00      	cmp	r2, #0
     3a4:	d004      	beq.n	3b0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3a6:	4a04      	ldr	r2, [pc, #16]	; (3b8 <_sbrk+0x1c>)
     3a8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3aa:	18c3      	adds	r3, r0, r3
     3ac:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3b0:	4902      	ldr	r1, [pc, #8]	; (3bc <_sbrk+0x20>)
     3b2:	4a01      	ldr	r2, [pc, #4]	; (3b8 <_sbrk+0x1c>)
     3b4:	6011      	str	r1, [r2, #0]
     3b6:	e7f6      	b.n	3a6 <_sbrk+0xa>
     3b8:	20000368 	.word	0x20000368
     3bc:	20002430 	.word	0x20002430

000003c0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <_get_cycles_for_ms+0x8>)
     3c2:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3c4:	4770      	bx	lr
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00005dc0 	.word	0x00005dc0

000003cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3cc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3ce:	4b07      	ldr	r3, [pc, #28]	; (3ec <_init_chip+0x20>)
     3d0:	685a      	ldr	r2, [r3, #4]
     3d2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     3d4:	4b06      	ldr	r3, [pc, #24]	; (3f0 <_init_chip+0x24>)
     3d6:	4798      	blx	r3
	_sysctrl_init_sources();
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <_init_chip+0x28>)
     3da:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     3dc:	2008      	movs	r0, #8
     3de:	4c06      	ldr	r4, [pc, #24]	; (3f8 <_init_chip+0x2c>)
     3e0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <_init_chip+0x30>)
     3e4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3e6:	20f7      	movs	r0, #247	; 0xf7
     3e8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     3ea:	bd10      	pop	{r4, pc}
     3ec:	41004000 	.word	0x41004000
     3f0:	00000441 	.word	0x00000441
     3f4:	00000461 	.word	0x00000461
     3f8:	00000401 	.word	0x00000401
     3fc:	00000495 	.word	0x00000495

00000400 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     400:	07c3      	lsls	r3, r0, #31
     402:	d509      	bpl.n	418 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <_gclk_init_generators_by_fref+0x34>)
     406:	2280      	movs	r2, #128	; 0x80
     408:	0092      	lsls	r2, r2, #2
     40a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     40c:	4a0a      	ldr	r2, [pc, #40]	; (438 <_gclk_init_generators_by_fref+0x38>)
     40e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     410:	001a      	movs	r2, r3
     412:	7853      	ldrb	r3, [r2, #1]
     414:	09db      	lsrs	r3, r3, #7
     416:	d1fc      	bne.n	412 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     418:	0703      	lsls	r3, r0, #28
     41a:	d509      	bpl.n	430 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     41c:	4b05      	ldr	r3, [pc, #20]	; (434 <_gclk_init_generators_by_fref+0x34>)
     41e:	2204      	movs	r2, #4
     420:	32ff      	adds	r2, #255	; 0xff
     422:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     424:	4a05      	ldr	r2, [pc, #20]	; (43c <_gclk_init_generators_by_fref+0x3c>)
     426:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     428:	001a      	movs	r2, r3
     42a:	7853      	ldrb	r3, [r2, #1]
     42c:	09db      	lsrs	r3, r3, #7
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	40000c00 	.word	0x40000c00
     438:	00010700 	.word	0x00010700
     43c:	00010403 	.word	0x00010403

00000440 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     440:	4b06      	ldr	r3, [pc, #24]	; (45c <_pm_init+0x1c>)
     442:	7a1a      	ldrb	r2, [r3, #8]
     444:	b2d2      	uxtb	r2, r2
     446:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     448:	7a5a      	ldrb	r2, [r3, #9]
     44a:	b2d2      	uxtb	r2, r2
     44c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     44e:	7a9a      	ldrb	r2, [r3, #10]
     450:	b2d2      	uxtb	r2, r2
     452:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     454:	7ada      	ldrb	r2, [r3, #11]
     456:	b2d2      	uxtb	r2, r2
     458:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     45a:	4770      	bx	lr
     45c:	40000400 	.word	0x40000400

00000460 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     460:	4a0b      	ldr	r2, [pc, #44]	; (490 <_sysctrl_init_sources+0x30>)
     462:	6993      	ldr	r3, [r2, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     464:	21fe      	movs	r1, #254	; 0xfe
     466:	03c9      	lsls	r1, r1, #15
     468:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     46a:	214e      	movs	r1, #78	; 0x4e
     46c:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
     46e:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     470:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     472:	392f      	subs	r1, #47	; 0x2f
     474:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     476:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     478:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     47a:	2204      	movs	r2, #4
     47c:	68cb      	ldr	r3, [r1, #12]
     47e:	421a      	tst	r2, r3
     480:	d0fc      	beq.n	47c <_sysctrl_init_sources+0x1c>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
     482:	4a03      	ldr	r2, [pc, #12]	; (490 <_sysctrl_init_sources+0x30>)
     484:	6993      	ldr	r3, [r2, #24]
     486:	2180      	movs	r1, #128	; 0x80
     488:	430b      	orrs	r3, r1
     48a:	6193      	str	r3, [r2, #24]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     48c:	4770      	bx	lr
     48e:	46c0      	nop			; (mov r8, r8)
     490:	40000800 	.word	0x40000800

00000494 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     494:	2202      	movs	r2, #2
     496:	4b19      	ldr	r3, [pc, #100]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     498:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     49a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     49c:	320e      	adds	r2, #14
     49e:	68cb      	ldr	r3, [r1, #12]
     4a0:	421a      	tst	r2, r3
     4a2:	d0fc      	beq.n	49e <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     4a4:	4a16      	ldr	r2, [pc, #88]	; (500 <_sysctrl_init_referenced_generators+0x6c>)
     4a6:	4b15      	ldr	r3, [pc, #84]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4a8:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4aa:	4b16      	ldr	r3, [pc, #88]	; (504 <_sysctrl_init_referenced_generators+0x70>)
     4ac:	681b      	ldr	r3, [r3, #0]
     4ae:	0e9b      	lsrs	r3, r3, #26
     4b0:	2b3f      	cmp	r3, #63	; 0x3f
     4b2:	d01a      	beq.n	4ea <_sysctrl_init_referenced_generators+0x56>
     4b4:	029b      	lsls	r3, r3, #10
     4b6:	2280      	movs	r2, #128	; 0x80
     4b8:	0092      	lsls	r2, r2, #2
     4ba:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     4bc:	4a0f      	ldr	r2, [pc, #60]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4be:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     4c0:	2302      	movs	r3, #2
     4c2:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     4c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     4c6:	075b      	lsls	r3, r3, #29
     4c8:	d512      	bpl.n	4f0 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ca:	0011      	movs	r1, r2
	tmp &= mask;
     4cc:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ce:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     4d0:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     4d2:	2bd0      	cmp	r3, #208	; 0xd0
     4d4:	d1fb      	bne.n	4ce <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     4d6:	4a09      	ldr	r2, [pc, #36]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4d8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     4da:	2180      	movs	r1, #128	; 0x80
     4dc:	430b      	orrs	r3, r1
     4de:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     4e0:	4a09      	ldr	r2, [pc, #36]	; (508 <_sysctrl_init_referenced_generators+0x74>)
     4e2:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     4e4:	09db      	lsrs	r3, r3, #7
     4e6:	d1fc      	bne.n	4e2 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     4e8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4ea:	23fc      	movs	r3, #252	; 0xfc
     4ec:	01db      	lsls	r3, r3, #7
     4ee:	e7e5      	b.n	4bc <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     4f0:	4902      	ldr	r1, [pc, #8]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     4f2:	2210      	movs	r2, #16
     4f4:	68cb      	ldr	r3, [r1, #12]
     4f6:	421a      	tst	r2, r3
     4f8:	d0fc      	beq.n	4f4 <_sysctrl_init_referenced_generators+0x60>
     4fa:	e7ec      	b.n	4d6 <_sysctrl_init_referenced_generators+0x42>
     4fc:	40000800 	.word	0x40000800
     500:	04010000 	.word	0x04010000
     504:	00806024 	.word	0x00806024
     508:	40000c00 	.word	0x40000c00

0000050c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     50c:	4b02      	ldr	r3, [pc, #8]	; (518 <_delay_init+0xc>)
     50e:	4a03      	ldr	r2, [pc, #12]	; (51c <_delay_init+0x10>)
     510:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     512:	2205      	movs	r2, #5
     514:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     516:	4770      	bx	lr
     518:	e000e010 	.word	0xe000e010
     51c:	00ffffff 	.word	0x00ffffff

00000520 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     520:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     522:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     524:	1e5e      	subs	r6, r3, #1
     526:	b2f6      	uxtb	r6, r6
     528:	2b00      	cmp	r3, #0
     52a:	d013      	beq.n	554 <_delay_cycles+0x34>
     52c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     52e:	4a0e      	ldr	r2, [pc, #56]	; (568 <_delay_cycles+0x48>)
     530:	4d0e      	ldr	r5, [pc, #56]	; (56c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     532:	2080      	movs	r0, #128	; 0x80
     534:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     536:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     538:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     53a:	6813      	ldr	r3, [r2, #0]
     53c:	4203      	tst	r3, r0
     53e:	d0fc      	beq.n	53a <_delay_cycles+0x1a>
	while (n--) {
     540:	3c01      	subs	r4, #1
     542:	b2e4      	uxtb	r4, r4
     544:	2cff      	cmp	r4, #255	; 0xff
     546:	d1f6      	bne.n	536 <_delay_cycles+0x16>
     548:	0633      	lsls	r3, r6, #24
     54a:	1af6      	subs	r6, r6, r3
     54c:	4b08      	ldr	r3, [pc, #32]	; (570 <_delay_cycles+0x50>)
     54e:	469c      	mov	ip, r3
     550:	4461      	add	r1, ip
     552:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     554:	4b04      	ldr	r3, [pc, #16]	; (568 <_delay_cycles+0x48>)
     556:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     558:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     55a:	0019      	movs	r1, r3
     55c:	2280      	movs	r2, #128	; 0x80
     55e:	0252      	lsls	r2, r2, #9
     560:	680b      	ldr	r3, [r1, #0]
     562:	4213      	tst	r3, r2
     564:	d0fc      	beq.n	560 <_delay_cycles+0x40>
		;
}
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	e000e010 	.word	0xe000e010
     56c:	00ffffff 	.word	0x00ffffff
     570:	ff000001 	.word	0xff000001

00000574 <eink_ite_wait_for_hrdy>:
 * to use. 
 */
/**
 * \brief Wait For Host Ready function.
 */
static void eink_ite_wait_for_hrdy(void) {
     574:	b510      	push	{r4, lr}
    ptr_eink_ite_config->wait_for_hrdy();
     576:	4b02      	ldr	r3, [pc, #8]	; (580 <eink_ite_wait_for_hrdy+0xc>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	4798      	blx	r3
}
     57e:	bd10      	pop	{r4, pc}
     580:	20000390 	.word	0x20000390

00000584 <gfx_eink_set_pixel>:
}

/**
 * \brief Set Pixel function.
 */
static void gfx_eink_set_pixel(eink_coordinate x_set, eink_coordinate y_set, enum eink_pixel_colour pixel_colour) {
     584:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel(x_set, y_set, pixel_colour);
     586:	4b02      	ldr	r3, [pc, #8]	; (590 <gfx_eink_set_pixel+0xc>)
     588:	681b      	ldr	r3, [r3, #0]
     58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     58c:	4798      	blx	r3
}
     58e:	bd10      	pop	{r4, pc}
     590:	20000424 	.word	0x20000424

00000594 <gfx_eink_set_pixel_raw>:

/**
 * \brief Set Pixel with raw value function.
 */
static void gfx_eink_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value) {
     594:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel_raw(x_set, y_set, pixel_value);
     596:	4b02      	ldr	r3, [pc, #8]	; (5a0 <gfx_eink_set_pixel_raw+0xc>)
     598:	681b      	ldr	r3, [r3, #0]
     59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     59c:	4798      	blx	r3
}
     59e:	bd10      	pop	{r4, pc}
     5a0:	20000424 	.word	0x20000424

000005a4 <eink_et011tt2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_et011tt2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a6:	46de      	mov	lr, fp
     5a8:	4657      	mov	r7, sl
     5aa:	464e      	mov	r6, r9
     5ac:	4645      	mov	r5, r8
     5ae:	b5e0      	push	{r5, r6, r7, lr}
     5b0:	b08b      	sub	sp, #44	; 0x2c
     5b2:	9003      	str	r0, [sp, #12]
     5b4:	9205      	str	r2, [sp, #20]
     5b6:	0018      	movs	r0, r3
     5b8:	9307      	str	r3, [sp, #28]
     5ba:	ab14      	add	r3, sp, #80	; 0x50
     5bc:	8819      	ldrh	r1, [r3, #0]
     5be:	9108      	str	r1, [sp, #32]
     5c0:	ab15      	add	r3, sp, #84	; 0x54
     5c2:	8819      	ldrh	r1, [r3, #0]
     5c4:	9109      	str	r1, [sp, #36]	; 0x24
     5c6:	ab16      	add	r3, sp, #88	; 0x58
     5c8:	781f      	ldrb	r7, [r3, #0]
     5ca:	ab17      	add	r3, sp, #92	; 0x5c
     5cc:	7819      	ldrb	r1, [r3, #0]
     5ce:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     5d0:	428f      	cmp	r7, r1
     5d2:	d051      	beq.n	678 <eink_et011tt2_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     5d4:	2a00      	cmp	r2, #0
     5d6:	d04f      	beq.n	678 <eink_et011tt2_graphics_load_mono_image+0xd4>
     5d8:	2200      	movs	r2, #0
     5da:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     5dc:	0003      	movs	r3, r0
     5de:	3b01      	subs	r3, #1
     5e0:	b29b      	uxth	r3, r3
     5e2:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5e4:	4b28      	ldr	r3, [pc, #160]	; (688 <eink_et011tt2_graphics_load_mono_image+0xe4>)
     5e6:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     5e8:	46b8      	mov	r8, r7
     5ea:	e033      	b.n	654 <eink_et011tt2_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5ec:	464b      	mov	r3, r9
     5ee:	2b08      	cmp	r3, #8
     5f0:	d003      	beq.n	5fa <eink_et011tt2_graphics_load_mono_image+0x56>
     5f2:	464a      	mov	r2, r9
     5f4:	0021      	movs	r1, r4
     5f6:	9801      	ldr	r0, [sp, #4]
     5f8:	47d8      	blx	fp
     5fa:	3501      	adds	r5, #1
     5fc:	3401      	adds	r4, #1
     5fe:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     600:	2d08      	cmp	r5, #8
     602:	d00b      	beq.n	61c <eink_et011tt2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     604:	7833      	ldrb	r3, [r6, #0]
     606:	412b      	asrs	r3, r5
                    if(bit_value) {
     608:	07db      	lsls	r3, r3, #31
     60a:	d5ef      	bpl.n	5ec <eink_et011tt2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     60c:	2f08      	cmp	r7, #8
     60e:	d0f4      	beq.n	5fa <eink_et011tt2_graphics_load_mono_image+0x56>
     610:	003a      	movs	r2, r7
     612:	0021      	movs	r1, r4
     614:	9801      	ldr	r0, [sp, #4]
     616:	4b1c      	ldr	r3, [pc, #112]	; (688 <eink_et011tt2_graphics_load_mono_image+0xe4>)
     618:	4798      	blx	r3
     61a:	e7ee      	b.n	5fa <eink_et011tt2_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     61c:	4643      	mov	r3, r8
     61e:	3b01      	subs	r3, #1
     620:	b29b      	uxth	r3, r3
     622:	4698      	mov	r8, r3
     624:	4653      	mov	r3, sl
     626:	3308      	adds	r3, #8
     628:	b29b      	uxth	r3, r3
     62a:	469a      	mov	sl, r3
     62c:	4643      	mov	r3, r8
     62e:	2b00      	cmp	r3, #0
     630:	d008      	beq.n	644 <eink_et011tt2_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     632:	9b02      	ldr	r3, [sp, #8]
     634:	4443      	add	r3, r8
     636:	001e      	movs	r6, r3
     638:	9b03      	ldr	r3, [sp, #12]
     63a:	469c      	mov	ip, r3
     63c:	4466      	add	r6, ip
     63e:	4654      	mov	r4, sl
     640:	2500      	movs	r5, #0
     642:	e7df      	b.n	604 <eink_et011tt2_graphics_load_mono_image+0x60>
     644:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     646:	9b04      	ldr	r3, [sp, #16]
     648:	3301      	adds	r3, #1
     64a:	b29b      	uxth	r3, r3
     64c:	9304      	str	r3, [sp, #16]
     64e:	9a05      	ldr	r2, [sp, #20]
     650:	429a      	cmp	r2, r3
     652:	d911      	bls.n	678 <eink_et011tt2_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     654:	9b06      	ldr	r3, [sp, #24]
     656:	1e1f      	subs	r7, r3, #0
     658:	d0f5      	beq.n	646 <eink_et011tt2_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     65a:	9b07      	ldr	r3, [sp, #28]
     65c:	9a04      	ldr	r2, [sp, #16]
     65e:	4353      	muls	r3, r2
     660:	9302      	str	r3, [sp, #8]
     662:	9b09      	ldr	r3, [sp, #36]	; 0x24
     664:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     666:	9b08      	ldr	r3, [sp, #32]
     668:	4694      	mov	ip, r2
     66a:	4463      	add	r3, ip
     66c:	b29b      	uxth	r3, r3
     66e:	9301      	str	r3, [sp, #4]
     670:	4643      	mov	r3, r8
     672:	46b8      	mov	r8, r7
     674:	001f      	movs	r7, r3
     676:	e7dc      	b.n	632 <eink_et011tt2_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
     678:	b00b      	add	sp, #44	; 0x2c
     67a:	bc3c      	pop	{r2, r3, r4, r5}
     67c:	4690      	mov	r8, r2
     67e:	4699      	mov	r9, r3
     680:	46a2      	mov	sl, r4
     682:	46ab      	mov	fp, r5
     684:	bdf0      	pop	{r4, r5, r6, r7, pc}
     686:	46c0      	nop			; (mov r8, r8)
     688:	00000585 	.word	0x00000585

0000068c <eink_ed013tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed013tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	46de      	mov	lr, fp
     690:	4657      	mov	r7, sl
     692:	464e      	mov	r6, r9
     694:	4645      	mov	r5, r8
     696:	b5e0      	push	{r5, r6, r7, lr}
     698:	b08b      	sub	sp, #44	; 0x2c
     69a:	9003      	str	r0, [sp, #12]
     69c:	9205      	str	r2, [sp, #20]
     69e:	0018      	movs	r0, r3
     6a0:	9307      	str	r3, [sp, #28]
     6a2:	ab14      	add	r3, sp, #80	; 0x50
     6a4:	8819      	ldrh	r1, [r3, #0]
     6a6:	9108      	str	r1, [sp, #32]
     6a8:	ab15      	add	r3, sp, #84	; 0x54
     6aa:	8819      	ldrh	r1, [r3, #0]
     6ac:	9109      	str	r1, [sp, #36]	; 0x24
     6ae:	ab16      	add	r3, sp, #88	; 0x58
     6b0:	781f      	ldrb	r7, [r3, #0]
     6b2:	ab17      	add	r3, sp, #92	; 0x5c
     6b4:	7819      	ldrb	r1, [r3, #0]
     6b6:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     6b8:	428f      	cmp	r7, r1
     6ba:	d051      	beq.n	760 <eink_ed013tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     6bc:	2a00      	cmp	r2, #0
     6be:	d04f      	beq.n	760 <eink_ed013tc1_graphics_load_mono_image+0xd4>
     6c0:	2200      	movs	r2, #0
     6c2:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     6c4:	0003      	movs	r3, r0
     6c6:	3b01      	subs	r3, #1
     6c8:	b29b      	uxth	r3, r3
     6ca:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6cc:	4b28      	ldr	r3, [pc, #160]	; (770 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     6ce:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6d0:	46b8      	mov	r8, r7
     6d2:	e033      	b.n	73c <eink_ed013tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6d4:	464b      	mov	r3, r9
     6d6:	2b08      	cmp	r3, #8
     6d8:	d003      	beq.n	6e2 <eink_ed013tc1_graphics_load_mono_image+0x56>
     6da:	464a      	mov	r2, r9
     6dc:	0021      	movs	r1, r4
     6de:	9801      	ldr	r0, [sp, #4]
     6e0:	47d8      	blx	fp
     6e2:	3501      	adds	r5, #1
     6e4:	3401      	adds	r4, #1
     6e6:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     6e8:	2d08      	cmp	r5, #8
     6ea:	d00b      	beq.n	704 <eink_ed013tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     6ec:	7833      	ldrb	r3, [r6, #0]
     6ee:	412b      	asrs	r3, r5
                    if(bit_value) {
     6f0:	07db      	lsls	r3, r3, #31
     6f2:	d5ef      	bpl.n	6d4 <eink_ed013tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6f4:	2f08      	cmp	r7, #8
     6f6:	d0f4      	beq.n	6e2 <eink_ed013tc1_graphics_load_mono_image+0x56>
     6f8:	003a      	movs	r2, r7
     6fa:	0021      	movs	r1, r4
     6fc:	9801      	ldr	r0, [sp, #4]
     6fe:	4b1c      	ldr	r3, [pc, #112]	; (770 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     700:	4798      	blx	r3
     702:	e7ee      	b.n	6e2 <eink_ed013tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     704:	4643      	mov	r3, r8
     706:	3b01      	subs	r3, #1
     708:	b29b      	uxth	r3, r3
     70a:	4698      	mov	r8, r3
     70c:	4653      	mov	r3, sl
     70e:	3308      	adds	r3, #8
     710:	b29b      	uxth	r3, r3
     712:	469a      	mov	sl, r3
     714:	4643      	mov	r3, r8
     716:	2b00      	cmp	r3, #0
     718:	d008      	beq.n	72c <eink_ed013tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     71a:	9b02      	ldr	r3, [sp, #8]
     71c:	4443      	add	r3, r8
     71e:	001e      	movs	r6, r3
     720:	9b03      	ldr	r3, [sp, #12]
     722:	469c      	mov	ip, r3
     724:	4466      	add	r6, ip
     726:	4654      	mov	r4, sl
     728:	2500      	movs	r5, #0
     72a:	e7df      	b.n	6ec <eink_ed013tc1_graphics_load_mono_image+0x60>
     72c:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     72e:	9b04      	ldr	r3, [sp, #16]
     730:	3301      	adds	r3, #1
     732:	b29b      	uxth	r3, r3
     734:	9304      	str	r3, [sp, #16]
     736:	9a05      	ldr	r2, [sp, #20]
     738:	429a      	cmp	r2, r3
     73a:	d911      	bls.n	760 <eink_ed013tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     73c:	9b06      	ldr	r3, [sp, #24]
     73e:	1e1f      	subs	r7, r3, #0
     740:	d0f5      	beq.n	72e <eink_ed013tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     742:	9b07      	ldr	r3, [sp, #28]
     744:	9a04      	ldr	r2, [sp, #16]
     746:	4353      	muls	r3, r2
     748:	9302      	str	r3, [sp, #8]
     74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     74c:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     74e:	9b08      	ldr	r3, [sp, #32]
     750:	4694      	mov	ip, r2
     752:	4463      	add	r3, ip
     754:	b29b      	uxth	r3, r3
     756:	9301      	str	r3, [sp, #4]
     758:	4643      	mov	r3, r8
     75a:	46b8      	mov	r8, r7
     75c:	001f      	movs	r7, r3
     75e:	e7dc      	b.n	71a <eink_ed013tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
     760:	b00b      	add	sp, #44	; 0x2c
     762:	bc3c      	pop	{r2, r3, r4, r5}
     764:	4690      	mov	r8, r2
     766:	4699      	mov	r9, r3
     768:	46a2      	mov	sl, r4
     76a:	46ab      	mov	fp, r5
     76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	00000585 	.word	0x00000585

00000774 <eink_ed029tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed029tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     774:	b5f0      	push	{r4, r5, r6, r7, lr}
     776:	46de      	mov	lr, fp
     778:	4657      	mov	r7, sl
     77a:	464e      	mov	r6, r9
     77c:	4645      	mov	r5, r8
     77e:	b5e0      	push	{r5, r6, r7, lr}
     780:	b089      	sub	sp, #36	; 0x24
     782:	0019      	movs	r1, r3
     784:	9305      	str	r3, [sp, #20]
     786:	ab12      	add	r3, sp, #72	; 0x48
     788:	881c      	ldrh	r4, [r3, #0]
     78a:	9400      	str	r4, [sp, #0]
     78c:	ab13      	add	r3, sp, #76	; 0x4c
     78e:	881d      	ldrh	r5, [r3, #0]
     790:	9506      	str	r5, [sp, #24]
     792:	ab14      	add	r3, sp, #80	; 0x50
     794:	781d      	ldrb	r5, [r3, #0]
     796:	46a8      	mov	r8, r5
     798:	ab15      	add	r3, sp, #84	; 0x54
     79a:	781d      	ldrb	r5, [r3, #0]
     79c:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     79e:	45a8      	cmp	r8, r5
     7a0:	d04e      	beq.n	840 <eink_ed029tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     7a2:	2a00      	cmp	r2, #0
     7a4:	d04c      	beq.n	840 <eink_ed029tc1_graphics_load_mono_image+0xcc>
     7a6:	000b      	movs	r3, r1
     7a8:	9103      	str	r1, [sp, #12]
     7aa:	3b01      	subs	r3, #1
     7ac:	b29b      	uxth	r3, r3
     7ae:	3902      	subs	r1, #2
     7b0:	1ac9      	subs	r1, r1, r3
     7b2:	1841      	adds	r1, r0, r1
     7b4:	9102      	str	r1, [sp, #8]
     7b6:	46a4      	mov	ip, r4
     7b8:	4462      	add	r2, ip
     7ba:	b292      	uxth	r2, r2
     7bc:	9204      	str	r2, [sp, #16]
     7be:	3301      	adds	r3, #1
     7c0:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7c2:	4b23      	ldr	r3, [pc, #140]	; (850 <eink_ed029tc1_graphics_load_mono_image+0xdc>)
     7c4:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7c6:	469a      	mov	sl, r3
     7c8:	e02f      	b.n	82a <eink_ed029tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7ca:	464b      	mov	r3, r9
     7cc:	2b08      	cmp	r3, #8
     7ce:	d003      	beq.n	7d8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     7d0:	464a      	mov	r2, r9
     7d2:	0021      	movs	r1, r4
     7d4:	9800      	ldr	r0, [sp, #0]
     7d6:	47d8      	blx	fp
     7d8:	3501      	adds	r5, #1
     7da:	3401      	adds	r4, #1
     7dc:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     7de:	2d08      	cmp	r5, #8
     7e0:	d00b      	beq.n	7fa <eink_ed029tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     7e2:	7833      	ldrb	r3, [r6, #0]
     7e4:	412b      	asrs	r3, r5
                    if(bit_value) {
     7e6:	421f      	tst	r7, r3
     7e8:	d0ef      	beq.n	7ca <eink_ed029tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7ea:	4643      	mov	r3, r8
     7ec:	2b08      	cmp	r3, #8
     7ee:	d0f3      	beq.n	7d8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     7f0:	4642      	mov	r2, r8
     7f2:	0021      	movs	r1, r4
     7f4:	9800      	ldr	r0, [sp, #0]
     7f6:	47d0      	blx	sl
     7f8:	e7ee      	b.n	7d8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     7fa:	9b01      	ldr	r3, [sp, #4]
     7fc:	3308      	adds	r3, #8
     7fe:	b29b      	uxth	r3, r3
     800:	9301      	str	r3, [sp, #4]
     802:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     804:	9b02      	ldr	r3, [sp, #8]
     806:	429e      	cmp	r6, r3
     808:	d003      	beq.n	812 <eink_ed029tc1_graphics_load_mono_image+0x9e>
{
     80a:	9c01      	ldr	r4, [sp, #4]
     80c:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     80e:	2701      	movs	r7, #1
     810:	e7e7      	b.n	7e2 <eink_ed029tc1_graphics_load_mono_image+0x6e>
     812:	9b02      	ldr	r3, [sp, #8]
     814:	9a03      	ldr	r2, [sp, #12]
     816:	4694      	mov	ip, r2
     818:	4463      	add	r3, ip
     81a:	9302      	str	r3, [sp, #8]
     81c:	9b00      	ldr	r3, [sp, #0]
     81e:	3301      	adds	r3, #1
     820:	b29b      	uxth	r3, r3
     822:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     824:	9a04      	ldr	r2, [sp, #16]
     826:	4293      	cmp	r3, r2
     828:	d00a      	beq.n	840 <eink_ed029tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     82a:	9b05      	ldr	r3, [sp, #20]
     82c:	2b00      	cmp	r3, #0
     82e:	d0f0      	beq.n	812 <eink_ed029tc1_graphics_load_mono_image+0x9e>
     830:	9b07      	ldr	r3, [sp, #28]
     832:	9a02      	ldr	r2, [sp, #8]
     834:	4694      	mov	ip, r2
     836:	4463      	add	r3, ip
     838:	001e      	movs	r6, r3
     83a:	9b06      	ldr	r3, [sp, #24]
     83c:	9301      	str	r3, [sp, #4]
     83e:	e7e4      	b.n	80a <eink_ed029tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     840:	b009      	add	sp, #36	; 0x24
     842:	bc3c      	pop	{r2, r3, r4, r5}
     844:	4690      	mov	r8, r2
     846:	4699      	mov	r9, r3
     848:	46a2      	mov	sl, r4
     84a:	46ab      	mov	fp, r5
     84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     84e:	46c0      	nop			; (mov r8, r8)
     850:	00000585 	.word	0x00000585

00000854 <eink_el026tr1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_el026tr1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     854:	b5f0      	push	{r4, r5, r6, r7, lr}
     856:	b085      	sub	sp, #20
     858:	ac0a      	add	r4, sp, #40	; 0x28
     85a:	8824      	ldrh	r4, [r4, #0]
     85c:	ad0b      	add	r5, sp, #44	; 0x2c
     85e:	882d      	ldrh	r5, [r5, #0]
     860:	ae0c      	add	r6, sp, #48	; 0x30
     862:	7836      	ldrb	r6, [r6, #0]
     864:	af0d      	add	r7, sp, #52	; 0x34
     866:	783f      	ldrb	r7, [r7, #0]
    /** Calls the equivalent function but for the ED029TC1 - avoid code repetition */
    eink_ed029tc1_graphics_load_mono_image(img_array, array_size, image_width_px, image_height_bytes, x_place, y_place, foreground_colour, background_colour);
     868:	9703      	str	r7, [sp, #12]
     86a:	9602      	str	r6, [sp, #8]
     86c:	9501      	str	r5, [sp, #4]
     86e:	9400      	str	r4, [sp, #0]
     870:	4c01      	ldr	r4, [pc, #4]	; (878 <eink_el026tr1_graphics_load_mono_image+0x24>)
     872:	47a0      	blx	r4
     874:	b005      	add	sp, #20
     876:	bdf0      	pop	{r4, r5, r6, r7, pc}
     878:	00000775 	.word	0x00000775

0000087c <eink_hink_e0154a05_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_hink_e0154a05_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     87c:	b5f0      	push	{r4, r5, r6, r7, lr}
     87e:	46de      	mov	lr, fp
     880:	4657      	mov	r7, sl
     882:	464e      	mov	r6, r9
     884:	4645      	mov	r5, r8
     886:	b5e0      	push	{r5, r6, r7, lr}
     888:	b089      	sub	sp, #36	; 0x24
     88a:	0019      	movs	r1, r3
     88c:	9305      	str	r3, [sp, #20]
     88e:	ab12      	add	r3, sp, #72	; 0x48
     890:	881c      	ldrh	r4, [r3, #0]
     892:	9400      	str	r4, [sp, #0]
     894:	ab13      	add	r3, sp, #76	; 0x4c
     896:	881d      	ldrh	r5, [r3, #0]
     898:	9506      	str	r5, [sp, #24]
     89a:	ab14      	add	r3, sp, #80	; 0x50
     89c:	781d      	ldrb	r5, [r3, #0]
     89e:	46a8      	mov	r8, r5
     8a0:	ab15      	add	r3, sp, #84	; 0x54
     8a2:	781d      	ldrb	r5, [r3, #0]
     8a4:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     8a6:	45a8      	cmp	r8, r5
     8a8:	d04e      	beq.n	948 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     8aa:	2a00      	cmp	r2, #0
     8ac:	d04c      	beq.n	948 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
     8ae:	000b      	movs	r3, r1
     8b0:	9103      	str	r1, [sp, #12]
     8b2:	3b01      	subs	r3, #1
     8b4:	b29b      	uxth	r3, r3
     8b6:	3902      	subs	r1, #2
     8b8:	1ac9      	subs	r1, r1, r3
     8ba:	1841      	adds	r1, r0, r1
     8bc:	9102      	str	r1, [sp, #8]
     8be:	46a4      	mov	ip, r4
     8c0:	4462      	add	r2, ip
     8c2:	b292      	uxth	r2, r2
     8c4:	9204      	str	r2, [sp, #16]
     8c6:	3301      	adds	r3, #1
     8c8:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                        } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8ca:	4b23      	ldr	r3, [pc, #140]	; (958 <eink_hink_e0154a05_graphics_load_mono_image+0xdc>)
     8cc:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8ce:	469a      	mov	sl, r3
     8d0:	e02f      	b.n	932 <eink_hink_e0154a05_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8d2:	464b      	mov	r3, r9
     8d4:	2b08      	cmp	r3, #8
     8d6:	d003      	beq.n	8e0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8d8:	464a      	mov	r2, r9
     8da:	0021      	movs	r1, r4
     8dc:	9800      	ldr	r0, [sp, #0]
     8de:	47d8      	blx	fp
     8e0:	3501      	adds	r5, #1
     8e2:	3401      	adds	r4, #1
     8e4:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     8e6:	2d08      	cmp	r5, #8
     8e8:	d00b      	beq.n	902 <eink_hink_e0154a05_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     8ea:	7833      	ldrb	r3, [r6, #0]
     8ec:	412b      	asrs	r3, r5
                    if(bit_value) {
     8ee:	421f      	tst	r7, r3
     8f0:	d0ef      	beq.n	8d2 <eink_hink_e0154a05_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8f2:	4643      	mov	r3, r8
     8f4:	2b08      	cmp	r3, #8
     8f6:	d0f3      	beq.n	8e0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8f8:	4642      	mov	r2, r8
     8fa:	0021      	movs	r1, r4
     8fc:	9800      	ldr	r0, [sp, #0]
     8fe:	47d0      	blx	sl
     900:	e7ee      	b.n	8e0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     902:	9b01      	ldr	r3, [sp, #4]
     904:	3308      	adds	r3, #8
     906:	b29b      	uxth	r3, r3
     908:	9301      	str	r3, [sp, #4]
     90a:	3e01      	subs	r6, #1
            for (j = (image_height_bytes); j > 0; j--) {
     90c:	9b02      	ldr	r3, [sp, #8]
     90e:	429e      	cmp	r6, r3
     910:	d003      	beq.n	91a <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
{
     912:	9c01      	ldr	r4, [sp, #4]
     914:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     916:	2701      	movs	r7, #1
     918:	e7e7      	b.n	8ea <eink_hink_e0154a05_graphics_load_mono_image+0x6e>
     91a:	9b02      	ldr	r3, [sp, #8]
     91c:	9a03      	ldr	r2, [sp, #12]
     91e:	4694      	mov	ip, r2
     920:	4463      	add	r3, ip
     922:	9302      	str	r3, [sp, #8]
     924:	9b00      	ldr	r3, [sp, #0]
     926:	3301      	adds	r3, #1
     928:	b29b      	uxth	r3, r3
     92a:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     92c:	9a04      	ldr	r2, [sp, #16]
     92e:	4293      	cmp	r3, r2
     930:	d00a      	beq.n	948 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
            for (j = (image_height_bytes); j > 0; j--) {
     932:	9b05      	ldr	r3, [sp, #20]
     934:	2b00      	cmp	r3, #0
     936:	d0f0      	beq.n	91a <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
     938:	9b07      	ldr	r3, [sp, #28]
     93a:	9a02      	ldr	r2, [sp, #8]
     93c:	4694      	mov	ip, r2
     93e:	4463      	add	r3, ip
     940:	001e      	movs	r6, r3
     942:	9b06      	ldr	r3, [sp, #24]
     944:	9301      	str	r3, [sp, #4]
     946:	e7e4      	b.n	912 <eink_hink_e0154a05_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     948:	b009      	add	sp, #36	; 0x24
     94a:	bc3c      	pop	{r2, r3, r4, r5}
     94c:	4690      	mov	r8, r2
     94e:	4699      	mov	r9, r3
     950:	46a2      	mov	sl, r4
     952:	46ab      	mov	fp, r5
     954:	bdf0      	pop	{r4, r5, r6, r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	00000585 	.word	0x00000585

0000095c <eink_ac040tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac040tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     95c:	b5f0      	push	{r4, r5, r6, r7, lr}
     95e:	46de      	mov	lr, fp
     960:	4657      	mov	r7, sl
     962:	464e      	mov	r6, r9
     964:	4645      	mov	r5, r8
     966:	b5e0      	push	{r5, r6, r7, lr}
     968:	b089      	sub	sp, #36	; 0x24
     96a:	a912      	add	r1, sp, #72	; 0x48
     96c:	8809      	ldrh	r1, [r1, #0]
     96e:	9106      	str	r1, [sp, #24]
     970:	a913      	add	r1, sp, #76	; 0x4c
     972:	8809      	ldrh	r1, [r1, #0]
     974:	ac14      	add	r4, sp, #80	; 0x50
     976:	7827      	ldrb	r7, [r4, #0]
     978:	ac15      	add	r4, sp, #84	; 0x54
     97a:	7824      	ldrb	r4, [r4, #0]
     97c:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     97e:	42a7      	cmp	r7, r4
     980:	d04e      	beq.n	a20 <eink_ac040tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     982:	9205      	str	r2, [sp, #20]
     984:	2a00      	cmp	r2, #0
     986:	d04b      	beq.n	a20 <eink_ac040tc1_graphics_load_mono_image+0xc4>
     988:	9304      	str	r3, [sp, #16]
     98a:	9003      	str	r0, [sp, #12]
     98c:	4a28      	ldr	r2, [pc, #160]	; (a30 <eink_ac040tc1_graphics_load_mono_image+0xd4>)
     98e:	4694      	mov	ip, r2
     990:	4463      	add	r3, ip
     992:	00db      	lsls	r3, r3, #3
     994:	18cb      	adds	r3, r1, r3
     996:	2200      	movs	r2, #0
     998:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     99a:	b29b      	uxth	r3, r3
     99c:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     99e:	4b25      	ldr	r3, [pc, #148]	; (a34 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9a0:	469b      	mov	fp, r3
     9a2:	e02c      	b.n	9fe <eink_ac040tc1_graphics_load_mono_image+0xa2>
     9a4:	464b      	mov	r3, r9
     9a6:	2b08      	cmp	r3, #8
     9a8:	d003      	beq.n	9b2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9aa:	464a      	mov	r2, r9
     9ac:	0021      	movs	r1, r4
     9ae:	9801      	ldr	r0, [sp, #4]
     9b0:	47d8      	blx	fp
     9b2:	3501      	adds	r5, #1
     9b4:	3401      	adds	r4, #1
     9b6:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     9b8:	2d08      	cmp	r5, #8
     9ba:	d00b      	beq.n	9d4 <eink_ac040tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     9bc:	7833      	ldrb	r3, [r6, #0]
     9be:	412b      	asrs	r3, r5
                    if(bit_value) {
     9c0:	07db      	lsls	r3, r3, #31
     9c2:	d5ef      	bpl.n	9a4 <eink_ac040tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     9c4:	2f08      	cmp	r7, #8
     9c6:	d0f4      	beq.n	9b2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9c8:	003a      	movs	r2, r7
     9ca:	0021      	movs	r1, r4
     9cc:	9801      	ldr	r0, [sp, #4]
     9ce:	4b19      	ldr	r3, [pc, #100]	; (a34 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9d0:	4798      	blx	r3
     9d2:	e7ee      	b.n	9b2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9d4:	4643      	mov	r3, r8
     9d6:	3b08      	subs	r3, #8
     9d8:	b29b      	uxth	r3, r3
     9da:	4698      	mov	r8, r3
     9dc:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     9de:	4556      	cmp	r6, sl
     9e0:	d002      	beq.n	9e8 <eink_ac040tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     9e2:	4644      	mov	r4, r8
     9e4:	2500      	movs	r5, #0
     9e6:	e7e9      	b.n	9bc <eink_ac040tc1_graphics_load_mono_image+0x60>
     9e8:	9b02      	ldr	r3, [sp, #8]
     9ea:	3301      	adds	r3, #1
     9ec:	9302      	str	r3, [sp, #8]
     9ee:	9a03      	ldr	r2, [sp, #12]
     9f0:	9904      	ldr	r1, [sp, #16]
     9f2:	468c      	mov	ip, r1
     9f4:	4462      	add	r2, ip
     9f6:	9203      	str	r2, [sp, #12]
     9f8:	9a05      	ldr	r2, [sp, #20]
     9fa:	4293      	cmp	r3, r2
     9fc:	d210      	bcs.n	a20 <eink_ac040tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     9fe:	9b04      	ldr	r3, [sp, #16]
     a00:	2b00      	cmp	r3, #0
     a02:	d0f1      	beq.n	9e8 <eink_ac040tc1_graphics_load_mono_image+0x8c>
     a04:	9e03      	ldr	r6, [sp, #12]
     a06:	0032      	movs	r2, r6
     a08:	469c      	mov	ip, r3
     a0a:	4462      	add	r2, ip
     a0c:	4692      	mov	sl, r2
     a0e:	9b07      	ldr	r3, [sp, #28]
     a10:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a12:	9b06      	ldr	r3, [sp, #24]
     a14:	9a02      	ldr	r2, [sp, #8]
     a16:	4694      	mov	ip, r2
     a18:	4463      	add	r3, ip
     a1a:	b29b      	uxth	r3, r3
     a1c:	9301      	str	r3, [sp, #4]
     a1e:	e7e0      	b.n	9e2 <eink_ac040tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     a20:	b009      	add	sp, #36	; 0x24
     a22:	bc3c      	pop	{r2, r3, r4, r5}
     a24:	4690      	mov	r8, r2
     a26:	4699      	mov	r9, r3
     a28:	46a2      	mov	sl, r4
     a2a:	46ab      	mov	fp, r5
     a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	00001fff 	.word	0x00001fff
     a34:	00000585 	.word	0x00000585

00000a38 <eink_ac057tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac057tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     a38:	b5f0      	push	{r4, r5, r6, r7, lr}
     a3a:	46de      	mov	lr, fp
     a3c:	4657      	mov	r7, sl
     a3e:	464e      	mov	r6, r9
     a40:	4645      	mov	r5, r8
     a42:	b5e0      	push	{r5, r6, r7, lr}
     a44:	b089      	sub	sp, #36	; 0x24
     a46:	a912      	add	r1, sp, #72	; 0x48
     a48:	8809      	ldrh	r1, [r1, #0]
     a4a:	9106      	str	r1, [sp, #24]
     a4c:	a913      	add	r1, sp, #76	; 0x4c
     a4e:	8809      	ldrh	r1, [r1, #0]
     a50:	ac14      	add	r4, sp, #80	; 0x50
     a52:	7827      	ldrb	r7, [r4, #0]
     a54:	ac15      	add	r4, sp, #84	; 0x54
     a56:	7824      	ldrb	r4, [r4, #0]
     a58:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     a5a:	42a7      	cmp	r7, r4
     a5c:	d04e      	beq.n	afc <eink_ac057tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     a5e:	9205      	str	r2, [sp, #20]
     a60:	2a00      	cmp	r2, #0
     a62:	d04b      	beq.n	afc <eink_ac057tc1_graphics_load_mono_image+0xc4>
     a64:	9304      	str	r3, [sp, #16]
     a66:	9003      	str	r0, [sp, #12]
     a68:	4a28      	ldr	r2, [pc, #160]	; (b0c <eink_ac057tc1_graphics_load_mono_image+0xd4>)
     a6a:	4694      	mov	ip, r2
     a6c:	4463      	add	r3, ip
     a6e:	00db      	lsls	r3, r3, #3
     a70:	18cb      	adds	r3, r1, r3
     a72:	2200      	movs	r2, #0
     a74:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     a76:	b29b      	uxth	r3, r3
     a78:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a7a:	4b25      	ldr	r3, [pc, #148]	; (b10 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     a7c:	469b      	mov	fp, r3
     a7e:	e02c      	b.n	ada <eink_ac057tc1_graphics_load_mono_image+0xa2>
     a80:	464b      	mov	r3, r9
     a82:	2b08      	cmp	r3, #8
     a84:	d003      	beq.n	a8e <eink_ac057tc1_graphics_load_mono_image+0x56>
     a86:	464a      	mov	r2, r9
     a88:	0021      	movs	r1, r4
     a8a:	9801      	ldr	r0, [sp, #4]
     a8c:	47d8      	blx	fp
     a8e:	3501      	adds	r5, #1
     a90:	3401      	adds	r4, #1
     a92:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     a94:	2d08      	cmp	r5, #8
     a96:	d00b      	beq.n	ab0 <eink_ac057tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     a98:	7833      	ldrb	r3, [r6, #0]
     a9a:	412b      	asrs	r3, r5
                    if(bit_value) {
     a9c:	07db      	lsls	r3, r3, #31
     a9e:	d5ef      	bpl.n	a80 <eink_ac057tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     aa0:	2f08      	cmp	r7, #8
     aa2:	d0f4      	beq.n	a8e <eink_ac057tc1_graphics_load_mono_image+0x56>
     aa4:	003a      	movs	r2, r7
     aa6:	0021      	movs	r1, r4
     aa8:	9801      	ldr	r0, [sp, #4]
     aaa:	4b19      	ldr	r3, [pc, #100]	; (b10 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     aac:	4798      	blx	r3
     aae:	e7ee      	b.n	a8e <eink_ac057tc1_graphics_load_mono_image+0x56>
     ab0:	4643      	mov	r3, r8
     ab2:	3b08      	subs	r3, #8
     ab4:	b29b      	uxth	r3, r3
     ab6:	4698      	mov	r8, r3
     ab8:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     aba:	4556      	cmp	r6, sl
     abc:	d002      	beq.n	ac4 <eink_ac057tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     abe:	4644      	mov	r4, r8
     ac0:	2500      	movs	r5, #0
     ac2:	e7e9      	b.n	a98 <eink_ac057tc1_graphics_load_mono_image+0x60>
     ac4:	9b02      	ldr	r3, [sp, #8]
     ac6:	3301      	adds	r3, #1
     ac8:	9302      	str	r3, [sp, #8]
     aca:	9a03      	ldr	r2, [sp, #12]
     acc:	9904      	ldr	r1, [sp, #16]
     ace:	468c      	mov	ip, r1
     ad0:	4462      	add	r2, ip
     ad2:	9203      	str	r2, [sp, #12]
     ad4:	9a05      	ldr	r2, [sp, #20]
     ad6:	4293      	cmp	r3, r2
     ad8:	d210      	bcs.n	afc <eink_ac057tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     ada:	9b04      	ldr	r3, [sp, #16]
     adc:	2b00      	cmp	r3, #0
     ade:	d0f1      	beq.n	ac4 <eink_ac057tc1_graphics_load_mono_image+0x8c>
     ae0:	9e03      	ldr	r6, [sp, #12]
     ae2:	0032      	movs	r2, r6
     ae4:	469c      	mov	ip, r3
     ae6:	4462      	add	r2, ip
     ae8:	4692      	mov	sl, r2
     aea:	9b07      	ldr	r3, [sp, #28]
     aec:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     aee:	9b06      	ldr	r3, [sp, #24]
     af0:	9a02      	ldr	r2, [sp, #8]
     af2:	4694      	mov	ip, r2
     af4:	4463      	add	r3, ip
     af6:	b29b      	uxth	r3, r3
     af8:	9301      	str	r3, [sp, #4]
     afa:	e7e0      	b.n	abe <eink_ac057tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     afc:	b009      	add	sp, #36	; 0x24
     afe:	bc3c      	pop	{r2, r3, r4, r5}
     b00:	4690      	mov	r8, r2
     b02:	4699      	mov	r9, r3
     b04:	46a2      	mov	sl, r4
     b06:	46ab      	mov	fp, r5
     b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	00001fff 	.word	0x00001fff
     b10:	00000585 	.word	0x00000585

00000b14 <eink_ed057tc2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed057tc2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     b14:	b5f0      	push	{r4, r5, r6, r7, lr}
     b16:	46de      	mov	lr, fp
     b18:	4657      	mov	r7, sl
     b1a:	464e      	mov	r6, r9
     b1c:	4645      	mov	r5, r8
     b1e:	b5e0      	push	{r5, r6, r7, lr}
     b20:	b089      	sub	sp, #36	; 0x24
     b22:	a912      	add	r1, sp, #72	; 0x48
     b24:	8809      	ldrh	r1, [r1, #0]
     b26:	9106      	str	r1, [sp, #24]
     b28:	a913      	add	r1, sp, #76	; 0x4c
     b2a:	8809      	ldrh	r1, [r1, #0]
     b2c:	ac14      	add	r4, sp, #80	; 0x50
     b2e:	7827      	ldrb	r7, [r4, #0]
     b30:	ac15      	add	r4, sp, #84	; 0x54
     b32:	7824      	ldrb	r4, [r4, #0]
     b34:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     b36:	42a7      	cmp	r7, r4
     b38:	d04e      	beq.n	bd8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     b3a:	9205      	str	r2, [sp, #20]
     b3c:	2a00      	cmp	r2, #0
     b3e:	d04b      	beq.n	bd8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
     b40:	9304      	str	r3, [sp, #16]
     b42:	9003      	str	r0, [sp, #12]
     b44:	4a28      	ldr	r2, [pc, #160]	; (be8 <eink_ed057tc2_graphics_load_mono_image+0xd4>)
     b46:	4694      	mov	ip, r2
     b48:	4463      	add	r3, ip
     b4a:	00db      	lsls	r3, r3, #3
     b4c:	18cb      	adds	r3, r1, r3
     b4e:	2200      	movs	r2, #0
     b50:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     b52:	b29b      	uxth	r3, r3
     b54:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     b56:	4b25      	ldr	r3, [pc, #148]	; (bec <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b58:	469b      	mov	fp, r3
     b5a:	e02c      	b.n	bb6 <eink_ed057tc2_graphics_load_mono_image+0xa2>
     b5c:	464b      	mov	r3, r9
     b5e:	2b08      	cmp	r3, #8
     b60:	d003      	beq.n	b6a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b62:	464a      	mov	r2, r9
     b64:	0021      	movs	r1, r4
     b66:	9801      	ldr	r0, [sp, #4]
     b68:	47d8      	blx	fp
     b6a:	3501      	adds	r5, #1
     b6c:	3401      	adds	r4, #1
     b6e:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     b70:	2d08      	cmp	r5, #8
     b72:	d00b      	beq.n	b8c <eink_ed057tc2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     b74:	7833      	ldrb	r3, [r6, #0]
     b76:	412b      	asrs	r3, r5
                    if(bit_value) {
     b78:	07db      	lsls	r3, r3, #31
     b7a:	d5ef      	bpl.n	b5c <eink_ed057tc2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     b7c:	2f08      	cmp	r7, #8
     b7e:	d0f4      	beq.n	b6a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b80:	003a      	movs	r2, r7
     b82:	0021      	movs	r1, r4
     b84:	9801      	ldr	r0, [sp, #4]
     b86:	4b19      	ldr	r3, [pc, #100]	; (bec <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b88:	4798      	blx	r3
     b8a:	e7ee      	b.n	b6a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b8c:	4643      	mov	r3, r8
     b8e:	3b08      	subs	r3, #8
     b90:	b29b      	uxth	r3, r3
     b92:	4698      	mov	r8, r3
     b94:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     b96:	4556      	cmp	r6, sl
     b98:	d002      	beq.n	ba0 <eink_ed057tc2_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     b9a:	4644      	mov	r4, r8
     b9c:	2500      	movs	r5, #0
     b9e:	e7e9      	b.n	b74 <eink_ed057tc2_graphics_load_mono_image+0x60>
     ba0:	9b02      	ldr	r3, [sp, #8]
     ba2:	3301      	adds	r3, #1
     ba4:	9302      	str	r3, [sp, #8]
     ba6:	9a03      	ldr	r2, [sp, #12]
     ba8:	9904      	ldr	r1, [sp, #16]
     baa:	468c      	mov	ip, r1
     bac:	4462      	add	r2, ip
     bae:	9203      	str	r2, [sp, #12]
     bb0:	9a05      	ldr	r2, [sp, #20]
     bb2:	4293      	cmp	r3, r2
     bb4:	d210      	bcs.n	bd8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     bb6:	9b04      	ldr	r3, [sp, #16]
     bb8:	2b00      	cmp	r3, #0
     bba:	d0f1      	beq.n	ba0 <eink_ed057tc2_graphics_load_mono_image+0x8c>
     bbc:	9e03      	ldr	r6, [sp, #12]
     bbe:	0032      	movs	r2, r6
     bc0:	469c      	mov	ip, r3
     bc2:	4462      	add	r2, ip
     bc4:	4692      	mov	sl, r2
     bc6:	9b07      	ldr	r3, [sp, #28]
     bc8:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     bca:	9b06      	ldr	r3, [sp, #24]
     bcc:	9a02      	ldr	r2, [sp, #8]
     bce:	4694      	mov	ip, r2
     bd0:	4463      	add	r3, ip
     bd2:	b29b      	uxth	r3, r3
     bd4:	9301      	str	r3, [sp, #4]
     bd6:	e7e0      	b.n	b9a <eink_ed057tc2_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     bd8:	b009      	add	sp, #36	; 0x24
     bda:	bc3c      	pop	{r2, r3, r4, r5}
     bdc:	4690      	mov	r8, r2
     bde:	4699      	mov	r9, r3
     be0:	46a2      	mov	sl, r4
     be2:	46ab      	mov	fp, r5
     be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	00001fff 	.word	0x00001fff
     bec:	00000585 	.word	0x00000585

00000bf0 <eink_ed028tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed028tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf2:	46de      	mov	lr, fp
     bf4:	4657      	mov	r7, sl
     bf6:	464e      	mov	r6, r9
     bf8:	4645      	mov	r5, r8
     bfa:	b5e0      	push	{r5, r6, r7, lr}
     bfc:	b08b      	sub	sp, #44	; 0x2c
     bfe:	9003      	str	r0, [sp, #12]
     c00:	9205      	str	r2, [sp, #20]
     c02:	0018      	movs	r0, r3
     c04:	9307      	str	r3, [sp, #28]
     c06:	ab14      	add	r3, sp, #80	; 0x50
     c08:	8819      	ldrh	r1, [r3, #0]
     c0a:	9108      	str	r1, [sp, #32]
     c0c:	ab15      	add	r3, sp, #84	; 0x54
     c0e:	8819      	ldrh	r1, [r3, #0]
     c10:	9109      	str	r1, [sp, #36]	; 0x24
     c12:	ab16      	add	r3, sp, #88	; 0x58
     c14:	781f      	ldrb	r7, [r3, #0]
     c16:	ab17      	add	r3, sp, #92	; 0x5c
     c18:	7819      	ldrb	r1, [r3, #0]
     c1a:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     c1c:	428f      	cmp	r7, r1
     c1e:	d051      	beq.n	cc4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     c20:	2a00      	cmp	r2, #0
     c22:	d04f      	beq.n	cc4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
     c24:	2200      	movs	r2, #0
     c26:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     c28:	0003      	movs	r3, r0
     c2a:	3b01      	subs	r3, #1
     c2c:	b29b      	uxth	r3, r3
     c2e:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c30:	4b28      	ldr	r3, [pc, #160]	; (cd4 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c32:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c34:	46b8      	mov	r8, r7
     c36:	e033      	b.n	ca0 <eink_ed028tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c38:	464b      	mov	r3, r9
     c3a:	2b08      	cmp	r3, #8
     c3c:	d003      	beq.n	c46 <eink_ed028tc1_graphics_load_mono_image+0x56>
     c3e:	464a      	mov	r2, r9
     c40:	0021      	movs	r1, r4
     c42:	9801      	ldr	r0, [sp, #4]
     c44:	47d8      	blx	fp
     c46:	3501      	adds	r5, #1
     c48:	3401      	adds	r4, #1
     c4a:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     c4c:	2d08      	cmp	r5, #8
     c4e:	d00b      	beq.n	c68 <eink_ed028tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c50:	7833      	ldrb	r3, [r6, #0]
     c52:	412b      	asrs	r3, r5
                    if(bit_value) {
     c54:	07db      	lsls	r3, r3, #31
     c56:	d5ef      	bpl.n	c38 <eink_ed028tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c58:	2f08      	cmp	r7, #8
     c5a:	d0f4      	beq.n	c46 <eink_ed028tc1_graphics_load_mono_image+0x56>
     c5c:	003a      	movs	r2, r7
     c5e:	0021      	movs	r1, r4
     c60:	9801      	ldr	r0, [sp, #4]
     c62:	4b1c      	ldr	r3, [pc, #112]	; (cd4 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c64:	4798      	blx	r3
     c66:	e7ee      	b.n	c46 <eink_ed028tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     c68:	4643      	mov	r3, r8
     c6a:	3b01      	subs	r3, #1
     c6c:	b29b      	uxth	r3, r3
     c6e:	4698      	mov	r8, r3
     c70:	4653      	mov	r3, sl
     c72:	3308      	adds	r3, #8
     c74:	b29b      	uxth	r3, r3
     c76:	469a      	mov	sl, r3
     c78:	4643      	mov	r3, r8
     c7a:	2b00      	cmp	r3, #0
     c7c:	d008      	beq.n	c90 <eink_ed028tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c7e:	9b02      	ldr	r3, [sp, #8]
     c80:	4443      	add	r3, r8
     c82:	001e      	movs	r6, r3
     c84:	9b03      	ldr	r3, [sp, #12]
     c86:	469c      	mov	ip, r3
     c88:	4466      	add	r6, ip
     c8a:	4654      	mov	r4, sl
     c8c:	2500      	movs	r5, #0
     c8e:	e7df      	b.n	c50 <eink_ed028tc1_graphics_load_mono_image+0x60>
     c90:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     c92:	9b04      	ldr	r3, [sp, #16]
     c94:	3301      	adds	r3, #1
     c96:	b29b      	uxth	r3, r3
     c98:	9304      	str	r3, [sp, #16]
     c9a:	9a05      	ldr	r2, [sp, #20]
     c9c:	429a      	cmp	r2, r3
     c9e:	d911      	bls.n	cc4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     ca0:	9b06      	ldr	r3, [sp, #24]
     ca2:	1e1f      	subs	r7, r3, #0
     ca4:	d0f5      	beq.n	c92 <eink_ed028tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     ca6:	9b07      	ldr	r3, [sp, #28]
     ca8:	9a04      	ldr	r2, [sp, #16]
     caa:	4353      	muls	r3, r2
     cac:	9302      	str	r3, [sp, #8]
     cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cb0:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     cb2:	9b08      	ldr	r3, [sp, #32]
     cb4:	4694      	mov	ip, r2
     cb6:	4463      	add	r3, ip
     cb8:	b29b      	uxth	r3, r3
     cba:	9301      	str	r3, [sp, #4]
     cbc:	4643      	mov	r3, r8
     cbe:	46b8      	mov	r8, r7
     cc0:	001f      	movs	r7, r3
     cc2:	e7dc      	b.n	c7e <eink_ed028tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     cc4:	b00b      	add	sp, #44	; 0x2c
     cc6:	bc3c      	pop	{r2, r3, r4, r5}
     cc8:	4690      	mov	r8, r2
     cca:	4699      	mov	r9, r3
     ccc:	46a2      	mov	sl, r4
     cce:	46ab      	mov	fp, r5
     cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00000585 	.word	0x00000585

00000cd8 <eink_ed037tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed037tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cda:	46de      	mov	lr, fp
     cdc:	4657      	mov	r7, sl
     cde:	464e      	mov	r6, r9
     ce0:	4645      	mov	r5, r8
     ce2:	b5e0      	push	{r5, r6, r7, lr}
     ce4:	b089      	sub	sp, #36	; 0x24
     ce6:	0019      	movs	r1, r3
     ce8:	9305      	str	r3, [sp, #20]
     cea:	ab12      	add	r3, sp, #72	; 0x48
     cec:	881c      	ldrh	r4, [r3, #0]
     cee:	9400      	str	r4, [sp, #0]
     cf0:	ab13      	add	r3, sp, #76	; 0x4c
     cf2:	881d      	ldrh	r5, [r3, #0]
     cf4:	9506      	str	r5, [sp, #24]
     cf6:	ab14      	add	r3, sp, #80	; 0x50
     cf8:	781d      	ldrb	r5, [r3, #0]
     cfa:	46a8      	mov	r8, r5
     cfc:	ab15      	add	r3, sp, #84	; 0x54
     cfe:	781d      	ldrb	r5, [r3, #0]
     d00:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     d02:	45a8      	cmp	r8, r5
     d04:	d04e      	beq.n	da4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     d06:	2a00      	cmp	r2, #0
     d08:	d04c      	beq.n	da4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
     d0a:	000b      	movs	r3, r1
     d0c:	9103      	str	r1, [sp, #12]
     d0e:	3b01      	subs	r3, #1
     d10:	b29b      	uxth	r3, r3
     d12:	3902      	subs	r1, #2
     d14:	1ac9      	subs	r1, r1, r3
     d16:	1841      	adds	r1, r0, r1
     d18:	9102      	str	r1, [sp, #8]
     d1a:	46a4      	mov	ip, r4
     d1c:	4462      	add	r2, ip
     d1e:	b292      	uxth	r2, r2
     d20:	9204      	str	r2, [sp, #16]
     d22:	3301      	adds	r3, #1
     d24:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d26:	4b23      	ldr	r3, [pc, #140]	; (db4 <eink_ed037tc1_graphics_load_mono_image+0xdc>)
     d28:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d2a:	469a      	mov	sl, r3
     d2c:	e02f      	b.n	d8e <eink_ed037tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d2e:	464b      	mov	r3, r9
     d30:	2b08      	cmp	r3, #8
     d32:	d003      	beq.n	d3c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d34:	464a      	mov	r2, r9
     d36:	0021      	movs	r1, r4
     d38:	9800      	ldr	r0, [sp, #0]
     d3a:	47d8      	blx	fp
     d3c:	3501      	adds	r5, #1
     d3e:	3401      	adds	r4, #1
     d40:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     d42:	2d08      	cmp	r5, #8
     d44:	d00b      	beq.n	d5e <eink_ed037tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d46:	7833      	ldrb	r3, [r6, #0]
     d48:	412b      	asrs	r3, r5
                    if(bit_value) {
     d4a:	421f      	tst	r7, r3
     d4c:	d0ef      	beq.n	d2e <eink_ed037tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d4e:	4643      	mov	r3, r8
     d50:	2b08      	cmp	r3, #8
     d52:	d0f3      	beq.n	d3c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d54:	4642      	mov	r2, r8
     d56:	0021      	movs	r1, r4
     d58:	9800      	ldr	r0, [sp, #0]
     d5a:	47d0      	blx	sl
     d5c:	e7ee      	b.n	d3c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d5e:	9b01      	ldr	r3, [sp, #4]
     d60:	3308      	adds	r3, #8
     d62:	b29b      	uxth	r3, r3
     d64:	9301      	str	r3, [sp, #4]
     d66:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     d68:	9b02      	ldr	r3, [sp, #8]
     d6a:	429e      	cmp	r6, r3
     d6c:	d003      	beq.n	d76 <eink_ed037tc1_graphics_load_mono_image+0x9e>
{
     d6e:	9c01      	ldr	r4, [sp, #4]
     d70:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d72:	2701      	movs	r7, #1
     d74:	e7e7      	b.n	d46 <eink_ed037tc1_graphics_load_mono_image+0x6e>
     d76:	9b02      	ldr	r3, [sp, #8]
     d78:	9a03      	ldr	r2, [sp, #12]
     d7a:	4694      	mov	ip, r2
     d7c:	4463      	add	r3, ip
     d7e:	9302      	str	r3, [sp, #8]
     d80:	9b00      	ldr	r3, [sp, #0]
     d82:	3301      	adds	r3, #1
     d84:	b29b      	uxth	r3, r3
     d86:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     d88:	9a04      	ldr	r2, [sp, #16]
     d8a:	4293      	cmp	r3, r2
     d8c:	d00a      	beq.n	da4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     d8e:	9b05      	ldr	r3, [sp, #20]
     d90:	2b00      	cmp	r3, #0
     d92:	d0f0      	beq.n	d76 <eink_ed037tc1_graphics_load_mono_image+0x9e>
     d94:	9b07      	ldr	r3, [sp, #28]
     d96:	9a02      	ldr	r2, [sp, #8]
     d98:	4694      	mov	ip, r2
     d9a:	4463      	add	r3, ip
     d9c:	001e      	movs	r6, r3
     d9e:	9b06      	ldr	r3, [sp, #24]
     da0:	9301      	str	r3, [sp, #4]
     da2:	e7e4      	b.n	d6e <eink_ed037tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     da4:	b009      	add	sp, #36	; 0x24
     da6:	bc3c      	pop	{r2, r3, r4, r5}
     da8:	4690      	mov	r8, r2
     daa:	4699      	mov	r9, r3
     dac:	46a2      	mov	sl, r4
     dae:	46ab      	mov	fp, r5
     db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	00000585 	.word	0x00000585

00000db8 <it8951_wait_for_hrdy>:
static inline void it8951_wait_for_hrdy(void)
{
#ifdef EINK_HOST_RDY
    while(!gpio_get_pin_level(EINK_HOST_RDY));
#endif
}
     db8:	4770      	bx	lr
	...

00000dbc <eink_interface_init>:
 *
 * \note Initializes the display controller hardware interface, regardless
 * of driver IC, interface or display. Takes definitions from conf_eink.h.
 */
static void eink_interface_init(uint8_t f_init)
{
     dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dbe:	46c6      	mov	lr, r8
     dc0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dc2:	22c0      	movs	r2, #192	; 0xc0
     dc4:	05d2      	lsls	r2, r2, #23
     dc6:	2788      	movs	r7, #136	; 0x88
     dc8:	2640      	movs	r6, #64	; 0x40
     dca:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dcc:	4b2a      	ldr	r3, [pc, #168]	; (e78 <eink_interface_init+0xbc>)
     dce:	20a8      	movs	r0, #168	; 0xa8
     dd0:	4d2a      	ldr	r5, [pc, #168]	; (e7c <eink_interface_init+0xc0>)
     dd2:	501d      	str	r5, [r3, r0]
     dd4:	24c0      	movs	r4, #192	; 0xc0
     dd6:	0624      	lsls	r4, r4, #24
     dd8:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dda:	2101      	movs	r1, #1
     ddc:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dde:	4f28      	ldr	r7, [pc, #160]	; (e80 <eink_interface_init+0xc4>)
     de0:	501f      	str	r7, [r3, r0]
     de2:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     de4:	2720      	movs	r7, #32
     de6:	46b8      	mov	r8, r7
     de8:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dea:	4f26      	ldr	r7, [pc, #152]	; (e84 <eink_interface_init+0xc8>)
     dec:	629f      	str	r7, [r3, #40]	; 0x28
     dee:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df0:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     df2:	629d      	str	r5, [r3, #40]	; 0x28
     df4:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df6:	2510      	movs	r5, #16
     df8:	46ac      	mov	ip, r5
     dfa:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dfc:	4d22      	ldr	r5, [pc, #136]	; (e88 <eink_interface_init+0xcc>)
     dfe:	629d      	str	r5, [r3, #40]	; 0x28
     e00:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e02:	2580      	movs	r5, #128	; 0x80
     e04:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e06:	4f21      	ldr	r7, [pc, #132]	; (e8c <eink_interface_init+0xd0>)
     e08:	629f      	str	r7, [r3, #40]	; 0x28
     e0a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e0c:	2494      	movs	r4, #148	; 0x94
     e0e:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e10:	2798      	movs	r7, #152	; 0x98
     e12:	51d1      	str	r1, [r2, r7]
     e14:	4644      	mov	r4, r8
     e16:	6194      	str	r4, [r2, #24]
     e18:	6196      	str	r6, [r2, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e1a:	4664      	mov	r4, ip
     e1c:	6154      	str	r4, [r2, #20]
     e1e:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e20:	3474      	adds	r4, #116	; 0x74
     e22:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e24:	4e1a      	ldr	r6, [pc, #104]	; (e90 <eink_interface_init+0xd4>)
     e26:	501e      	str	r6, [r3, r0]
     e28:	4e1a      	ldr	r6, [pc, #104]	; (e94 <eink_interface_init+0xd8>)
     e2a:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e2c:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e2e:	301f      	adds	r0, #31
     e30:	5c1c      	ldrb	r4, [r3, r0]
     e32:	2604      	movs	r6, #4
     e34:	4334      	orrs	r4, r6
     e36:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e38:	51d5      	str	r5, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e3a:	24c6      	movs	r4, #198	; 0xc6
     e3c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e3e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e40:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e42:	3c06      	subs	r4, #6
     e44:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e46:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e4a:	3c7b      	subs	r4, #123	; 0x7b
     e4c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e4e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e50:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e52:	3401      	adds	r4, #1
     e54:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e56:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e58:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e5a:	3c02      	subs	r4, #2
     e5c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e60:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e62:	3403      	adds	r4, #3
     e64:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e66:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e68:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e6a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	541a      	strb	r2, [r3, r0]
#endif
    
#ifdef EINK_BUSY
    gpio_set_pin_function(EINK_BUSY, GPIO_PIN_FUNCTION_OFF);
#endif
}
     e70:	bc04      	pop	{r2}
     e72:	4690      	mov	r8, r2
     e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e76:	46c0      	nop			; (mov r8, r8)
     e78:	41004400 	.word	0x41004400
     e7c:	40000040 	.word	0x40000040
     e80:	40000001 	.word	0x40000001
     e84:	40000020 	.word	0x40000020
     e88:	40000010 	.word	0x40000010
     e8c:	40000080 	.word	0x40000080
     e90:	40020080 	.word	0x40020080
     e94:	c0020000 	.word	0xc0020000

00000e98 <eink_ed037tc1_set_pixel>:
{
     e98:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < ssd1677_global_instance.display_width) && (y_set >= 0) && (y_set < ssd1677_global_instance.display_height) ) {
     e9a:	4b2e      	ldr	r3, [pc, #184]	; (f54 <eink_ed037tc1_set_pixel+0xbc>)
     e9c:	889b      	ldrh	r3, [r3, #4]
     e9e:	b29b      	uxth	r3, r3
     ea0:	4283      	cmp	r3, r0
     ea2:	d91c      	bls.n	ede <eink_ed037tc1_set_pixel+0x46>
     ea4:	4b2b      	ldr	r3, [pc, #172]	; (f54 <eink_ed037tc1_set_pixel+0xbc>)
     ea6:	88db      	ldrh	r3, [r3, #6]
     ea8:	b29b      	uxth	r3, r3
     eaa:	428b      	cmp	r3, r1
     eac:	d917      	bls.n	ede <eink_ed037tc1_set_pixel+0x46>
        if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
     eae:	4b29      	ldr	r3, [pc, #164]	; (f54 <eink_ed037tc1_set_pixel+0xbc>)
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	2b01      	cmp	r3, #1
     eb4:	d014      	beq.n	ee0 <eink_ed037tc1_set_pixel+0x48>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
     eb6:	4b27      	ldr	r3, [pc, #156]	; (f54 <eink_ed037tc1_set_pixel+0xbc>)
     eb8:	781b      	ldrb	r3, [r3, #0]
     eba:	2b02      	cmp	r3, #2
     ebc:	d01b      	beq.n	ef6 <eink_ed037tc1_set_pixel+0x5e>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
     ebe:	4b25      	ldr	r3, [pc, #148]	; (f54 <eink_ed037tc1_set_pixel+0xbc>)
     ec0:	781b      	ldrb	r3, [r3, #0]
     ec2:	2b03      	cmp	r3, #3
     ec4:	d025      	beq.n	f12 <eink_ed037tc1_set_pixel+0x7a>
            x1_set = (x_set - (x_set % 8)) / 8;
     ec6:	10c3      	asrs	r3, r0, #3
            byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * y_set);
     ec8:	008c      	lsls	r4, r1, #2
     eca:	1861      	adds	r1, r4, r1
     ecc:	00cc      	lsls	r4, r1, #3
     ece:	1a61      	subs	r1, r4, r1
     ed0:	185b      	adds	r3, r3, r1
            bit_set = 7 - (x_set % 8);
     ed2:	2107      	movs	r1, #7
     ed4:	4381      	bics	r1, r0
        switch(pixel_colour) {
     ed6:	2a00      	cmp	r2, #0
     ed8:	d027      	beq.n	f2a <eink_ed037tc1_set_pixel+0x92>
     eda:	2a01      	cmp	r2, #1
     edc:	d030      	beq.n	f40 <eink_ed037tc1_set_pixel+0xa8>
}
     ede:	bd10      	pop	{r4, pc}
            y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - ((y_set - (y_set % 8)) / 8);
     ee0:	10cc      	asrs	r4, r1, #3
     ee2:	3321      	adds	r3, #33	; 0x21
     ee4:	1b1b      	subs	r3, r3, r4
            byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (x_set));
     ee6:	0084      	lsls	r4, r0, #2
     ee8:	1820      	adds	r0, r4, r0
     eea:	00c4      	lsls	r4, r0, #3
     eec:	1a20      	subs	r0, r4, r0
     eee:	181b      	adds	r3, r3, r0
            bit_set = y_set % 8;
     ef0:	2007      	movs	r0, #7
     ef2:	4001      	ands	r1, r0
     ef4:	e7ef      	b.n	ed6 <eink_ed037tc1_set_pixel+0x3e>
            x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((x_set - (x_set % 8)) / 8);
     ef6:	10c4      	asrs	r4, r0, #3
     ef8:	2318      	movs	r3, #24
     efa:	33ff      	adds	r3, #255	; 0xff
     efc:	1b1b      	subs	r3, r3, r4
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (y_set * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
     efe:	2423      	movs	r4, #35	; 0x23
     f00:	4264      	negs	r4, r4
     f02:	4361      	muls	r1, r4
     f04:	4c14      	ldr	r4, [pc, #80]	; (f58 <eink_ed037tc1_set_pixel+0xc0>)
     f06:	46a4      	mov	ip, r4
     f08:	4461      	add	r1, ip
     f0a:	185b      	adds	r3, r3, r1
            bit_set = x_set % 8;
     f0c:	2107      	movs	r1, #7
     f0e:	4001      	ands	r1, r0
     f10:	e7e1      	b.n	ed6 <eink_ed037tc1_set_pixel+0x3e>
            y1_set = (y_set - (y_set % 8)) / 8;
     f12:	10cc      	asrs	r4, r1, #3
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (x_set * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
     f14:	4b10      	ldr	r3, [pc, #64]	; (f58 <eink_ed037tc1_set_pixel+0xc0>)
     f16:	469c      	mov	ip, r3
     f18:	4464      	add	r4, ip
     f1a:	2323      	movs	r3, #35	; 0x23
     f1c:	425b      	negs	r3, r3
     f1e:	4343      	muls	r3, r0
     f20:	18e3      	adds	r3, r4, r3
            bit_set = 7 - (y_set % 8);
     f22:	2007      	movs	r0, #7
     f24:	4388      	bics	r0, r1
     f26:	0001      	movs	r1, r0
     f28:	e7d5      	b.n	ed6 <eink_ed037tc1_set_pixel+0x3e>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 0);
     f2a:	4a0c      	ldr	r2, [pc, #48]	; (f5c <eink_ed037tc1_set_pixel+0xc4>)
     f2c:	6812      	ldr	r2, [r2, #0]
     f2e:	6910      	ldr	r0, [r2, #16]
     f30:	18c3      	adds	r3, r0, r3
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
     f32:	2201      	movs	r2, #1
     f34:	408a      	lsls	r2, r1
     f36:	0011      	movs	r1, r2
     f38:	781a      	ldrb	r2, [r3, #0]
     f3a:	438a      	bics	r2, r1
     f3c:	701a      	strb	r2, [r3, #0]
     f3e:	e7ce      	b.n	ede <eink_ed037tc1_set_pixel+0x46>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 1);
     f40:	4a06      	ldr	r2, [pc, #24]	; (f5c <eink_ed037tc1_set_pixel+0xc4>)
     f42:	6812      	ldr	r2, [r2, #0]
     f44:	6910      	ldr	r0, [r2, #16]
     f46:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
     f48:	2201      	movs	r2, #1
     f4a:	408a      	lsls	r2, r1
     f4c:	7819      	ldrb	r1, [r3, #0]
     f4e:	430a      	orrs	r2, r1
     f50:	701a      	strb	r2, [r3, #0]
}
     f52:	e7c4      	b.n	ede <eink_ed037tc1_set_pixel+0x46>
     f54:	20000408 	.word	0x20000408
     f58:	0000417d 	.word	0x0000417d
     f5c:	20000424 	.word	0x20000424

00000f60 <eink_ed028tc1_set_pixel_raw>:
{    
     f60:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8177_global_instance.display_width) && (y_set >= 0) && (y_set < uc8177_global_instance.display_height) ) {
     f62:	4b4e      	ldr	r3, [pc, #312]	; (109c <eink_ed028tc1_set_pixel_raw+0x13c>)
     f64:	885b      	ldrh	r3, [r3, #2]
     f66:	b29b      	uxth	r3, r3
     f68:	4283      	cmp	r3, r0
     f6a:	d944      	bls.n	ff6 <eink_ed028tc1_set_pixel_raw+0x96>
     f6c:	4b4b      	ldr	r3, [pc, #300]	; (109c <eink_ed028tc1_set_pixel_raw+0x13c>)
     f6e:	889c      	ldrh	r4, [r3, #4]
     f70:	b2a4      	uxth	r4, r4
     f72:	428c      	cmp	r4, r1
     f74:	d93f      	bls.n	ff6 <eink_ed028tc1_set_pixel_raw+0x96>
        if ( (uc8177_global_instance.display_config.display_rotation == ROTATE_0) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180) ) {
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	2b00      	cmp	r3, #0
     f7a:	d00b      	beq.n	f94 <eink_ed028tc1_set_pixel_raw+0x34>
     f7c:	4b47      	ldr	r3, [pc, #284]	; (109c <eink_ed028tc1_set_pixel_raw+0x13c>)
     f7e:	781b      	ldrb	r3, [r3, #0]
     f80:	2b02      	cmp	r3, #2
     f82:	d007      	beq.n	f94 <eink_ed028tc1_set_pixel_raw+0x34>
            byte_set = x1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * y_set);
     f84:	1044      	asrs	r4, r0, #1
     f86:	2396      	movs	r3, #150	; 0x96
     f88:	005b      	lsls	r3, r3, #1
     f8a:	434b      	muls	r3, r1
     f8c:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
     f8e:	2101      	movs	r1, #1
     f90:	4001      	ands	r1, r0
     f92:	e006      	b.n	fa2 <eink_ed028tc1_set_pixel_raw+0x42>
           byte_set = y1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * x_set);
     f94:	104c      	asrs	r4, r1, #1
     f96:	2396      	movs	r3, #150	; 0x96
     f98:	005b      	lsls	r3, r3, #1
     f9a:	4343      	muls	r3, r0
     f9c:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
     f9e:	2001      	movs	r0, #1
     fa0:	4001      	ands	r1, r0
        if (odd_even_bit) {
     fa2:	2900      	cmp	r1, #0
     fa4:	d128      	bne.n	ff8 <eink_ed028tc1_set_pixel_raw+0x98>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_set >> 3) & 0x1));
     fa6:	493e      	ldr	r1, [pc, #248]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x140>)
     fa8:	6809      	ldr	r1, [r1, #0]
     faa:	6909      	ldr	r1, [r1, #16]
     fac:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fae:	0710      	lsls	r0, r2, #28
     fb0:	d45f      	bmi.n	1072 <eink_ed028tc1_set_pixel_raw+0x112>
        *byte &= ~(1 << bit_number);
     fb2:	780c      	ldrb	r4, [r1, #0]
     fb4:	207f      	movs	r0, #127	; 0x7f
     fb6:	4020      	ands	r0, r4
     fb8:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_set >> 2) & 0x1));
     fba:	4939      	ldr	r1, [pc, #228]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x140>)
     fbc:	6809      	ldr	r1, [r1, #0]
     fbe:	6909      	ldr	r1, [r1, #16]
     fc0:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fc2:	0750      	lsls	r0, r2, #29
     fc4:	d45b      	bmi.n	107e <eink_ed028tc1_set_pixel_raw+0x11e>
        *byte &= ~(1 << bit_number);
     fc6:	7808      	ldrb	r0, [r1, #0]
     fc8:	2440      	movs	r4, #64	; 0x40
     fca:	43a0      	bics	r0, r4
     fcc:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_set >> 1) & 0x1));
     fce:	4934      	ldr	r1, [pc, #208]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x140>)
     fd0:	6809      	ldr	r1, [r1, #0]
     fd2:	6909      	ldr	r1, [r1, #16]
     fd4:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fd6:	0790      	lsls	r0, r2, #30
     fd8:	d456      	bmi.n	1088 <eink_ed028tc1_set_pixel_raw+0x128>
        *byte &= ~(1 << bit_number);
     fda:	7808      	ldrb	r0, [r1, #0]
     fdc:	2420      	movs	r4, #32
     fde:	43a0      	bics	r0, r4
     fe0:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_set & 0x1));
     fe2:	492f      	ldr	r1, [pc, #188]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x140>)
     fe4:	6809      	ldr	r1, [r1, #0]
     fe6:	6909      	ldr	r1, [r1, #16]
     fe8:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
     fea:	07d2      	lsls	r2, r2, #31
     fec:	d451      	bmi.n	1092 <eink_ed028tc1_set_pixel_raw+0x132>
        *byte &= ~(1 << bit_number);
     fee:	781a      	ldrb	r2, [r3, #0]
     ff0:	2110      	movs	r1, #16
     ff2:	438a      	bics	r2, r1
     ff4:	701a      	strb	r2, [r3, #0]
}
     ff6:	bd10      	pop	{r4, pc}
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_set >> 3) & 0x1));
     ff8:	4929      	ldr	r1, [pc, #164]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x140>)
     ffa:	6809      	ldr	r1, [r1, #0]
     ffc:	6909      	ldr	r1, [r1, #16]
     ffe:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1000:	0710      	lsls	r0, r2, #28
    1002:	d422      	bmi.n	104a <eink_ed028tc1_set_pixel_raw+0xea>
        *byte &= ~(1 << bit_number);
    1004:	7808      	ldrb	r0, [r1, #0]
    1006:	2408      	movs	r4, #8
    1008:	43a0      	bics	r0, r4
    100a:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_set >> 2) & 0x1));
    100c:	4924      	ldr	r1, [pc, #144]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x140>)
    100e:	6809      	ldr	r1, [r1, #0]
    1010:	6909      	ldr	r1, [r1, #16]
    1012:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1014:	0750      	lsls	r0, r2, #29
    1016:	d41d      	bmi.n	1054 <eink_ed028tc1_set_pixel_raw+0xf4>
        *byte &= ~(1 << bit_number);
    1018:	7808      	ldrb	r0, [r1, #0]
    101a:	2404      	movs	r4, #4
    101c:	43a0      	bics	r0, r4
    101e:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_set >> 1) & 0x1));
    1020:	491f      	ldr	r1, [pc, #124]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x140>)
    1022:	6809      	ldr	r1, [r1, #0]
    1024:	6909      	ldr	r1, [r1, #16]
    1026:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1028:	0790      	lsls	r0, r2, #30
    102a:	d418      	bmi.n	105e <eink_ed028tc1_set_pixel_raw+0xfe>
        *byte &= ~(1 << bit_number);
    102c:	7808      	ldrb	r0, [r1, #0]
    102e:	2402      	movs	r4, #2
    1030:	43a0      	bics	r0, r4
    1032:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_set & 0x1));
    1034:	491a      	ldr	r1, [pc, #104]	; (10a0 <eink_ed028tc1_set_pixel_raw+0x140>)
    1036:	6809      	ldr	r1, [r1, #0]
    1038:	6909      	ldr	r1, [r1, #16]
    103a:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
    103c:	07d2      	lsls	r2, r2, #31
    103e:	d413      	bmi.n	1068 <eink_ed028tc1_set_pixel_raw+0x108>
        *byte &= ~(1 << bit_number);
    1040:	781a      	ldrb	r2, [r3, #0]
    1042:	2101      	movs	r1, #1
    1044:	438a      	bics	r2, r1
    1046:	701a      	strb	r2, [r3, #0]
    1048:	e7d5      	b.n	ff6 <eink_ed028tc1_set_pixel_raw+0x96>
        *byte |= 1 << bit_number;
    104a:	7808      	ldrb	r0, [r1, #0]
    104c:	2408      	movs	r4, #8
    104e:	4320      	orrs	r0, r4
    1050:	7008      	strb	r0, [r1, #0]
    1052:	e7db      	b.n	100c <eink_ed028tc1_set_pixel_raw+0xac>
    1054:	7808      	ldrb	r0, [r1, #0]
    1056:	2404      	movs	r4, #4
    1058:	4320      	orrs	r0, r4
    105a:	7008      	strb	r0, [r1, #0]
    105c:	e7e0      	b.n	1020 <eink_ed028tc1_set_pixel_raw+0xc0>
    105e:	7808      	ldrb	r0, [r1, #0]
    1060:	2402      	movs	r4, #2
    1062:	4320      	orrs	r0, r4
    1064:	7008      	strb	r0, [r1, #0]
    1066:	e7e5      	b.n	1034 <eink_ed028tc1_set_pixel_raw+0xd4>
    1068:	781a      	ldrb	r2, [r3, #0]
    106a:	2101      	movs	r1, #1
    106c:	430a      	orrs	r2, r1
    106e:	701a      	strb	r2, [r3, #0]
    1070:	e7c1      	b.n	ff6 <eink_ed028tc1_set_pixel_raw+0x96>
    1072:	780c      	ldrb	r4, [r1, #0]
    1074:	2080      	movs	r0, #128	; 0x80
    1076:	4240      	negs	r0, r0
    1078:	4320      	orrs	r0, r4
    107a:	7008      	strb	r0, [r1, #0]
    107c:	e79d      	b.n	fba <eink_ed028tc1_set_pixel_raw+0x5a>
    107e:	7808      	ldrb	r0, [r1, #0]
    1080:	2440      	movs	r4, #64	; 0x40
    1082:	4320      	orrs	r0, r4
    1084:	7008      	strb	r0, [r1, #0]
    1086:	e7a2      	b.n	fce <eink_ed028tc1_set_pixel_raw+0x6e>
    1088:	7808      	ldrb	r0, [r1, #0]
    108a:	2420      	movs	r4, #32
    108c:	4320      	orrs	r0, r4
    108e:	7008      	strb	r0, [r1, #0]
    1090:	e7a7      	b.n	fe2 <eink_ed028tc1_set_pixel_raw+0x82>
    1092:	781a      	ldrb	r2, [r3, #0]
    1094:	2110      	movs	r1, #16
    1096:	430a      	orrs	r2, r1
    1098:	701a      	strb	r2, [r3, #0]
    109a:	e7ac      	b.n	ff6 <eink_ed028tc1_set_pixel_raw+0x96>
    109c:	200003a4 	.word	0x200003a4
    10a0:	20000424 	.word	0x20000424

000010a4 <eink_ed028tc1_set_pixel>:
{    
    10a4:	b510      	push	{r4, lr}
    switch(pixel_colour) {
    10a6:	2a00      	cmp	r2, #0
    10a8:	d003      	beq.n	10b2 <eink_ed028tc1_set_pixel+0xe>
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0xF);
    10aa:	220f      	movs	r2, #15
    10ac:	4b02      	ldr	r3, [pc, #8]	; (10b8 <eink_ed028tc1_set_pixel+0x14>)
    10ae:	4798      	blx	r3
}
    10b0:	bd10      	pop	{r4, pc}
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0x0);
    10b2:	4b01      	ldr	r3, [pc, #4]	; (10b8 <eink_ed028tc1_set_pixel+0x14>)
    10b4:	4798      	blx	r3
            break;
    10b6:	e7fb      	b.n	10b0 <eink_ed028tc1_set_pixel+0xc>
    10b8:	00000f61 	.word	0x00000f61

000010bc <eink_ed028tc1_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_ed028tc1_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    10bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10be:	46de      	mov	lr, fp
    10c0:	4657      	mov	r7, sl
    10c2:	464e      	mov	r6, r9
    10c4:	4645      	mov	r5, r8
    10c6:	b5e0      	push	{r5, r6, r7, lr}
    10c8:	b087      	sub	sp, #28
    10ca:	9002      	str	r0, [sp, #8]
    10cc:	4693      	mov	fp, r2
    10ce:	0019      	movs	r1, r3
    10d0:	9303      	str	r3, [sp, #12]
    10d2:	ab10      	add	r3, sp, #64	; 0x40
    10d4:	881a      	ldrh	r2, [r3, #0]
    10d6:	4690      	mov	r8, r2
    10d8:	ab11      	add	r3, sp, #68	; 0x44
    10da:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value_1, bit_value_2;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    10dc:	465a      	mov	r2, fp
    10de:	2a00      	cmp	r2, #0
    10e0:	d034      	beq.n	114c <eink_ed028tc1_graphics_load_4bgrey_image+0x90>
    10e2:	2200      	movs	r2, #0
    10e4:	4692      	mov	sl, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
    10e6:	000a      	movs	r2, r1
    10e8:	3a01      	subs	r2, #1
    10ea:	b292      	uxth	r2, r2
    10ec:	4691      	mov	r9, r2
            /* Process each pixel in byte  */
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    10ee:	9304      	str	r3, [sp, #16]
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
            /* Set the pixel in the display buffer */
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    10f0:	4f1a      	ldr	r7, [pc, #104]	; (115c <eink_ed028tc1_graphics_load_4bgrey_image+0xa0>)
    10f2:	4643      	mov	r3, r8
    10f4:	9305      	str	r3, [sp, #20]
        for (j = (image_height_bytes-1); j > 0; j--) {
    10f6:	464b      	mov	r3, r9
    10f8:	464d      	mov	r5, r9
    10fa:	2b00      	cmp	r3, #0
    10fc:	d020      	beq.n	1140 <eink_ed028tc1_graphics_load_4bgrey_image+0x84>
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    10fe:	9e04      	ldr	r6, [sp, #16]
    1100:	9b03      	ldr	r3, [sp, #12]
    1102:	4652      	mov	r2, sl
    1104:	4353      	muls	r3, r2
    1106:	9a02      	ldr	r2, [sp, #8]
    1108:	4690      	mov	r8, r2
    110a:	4498      	add	r8, r3
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    110c:	9b05      	ldr	r3, [sp, #20]
    110e:	4453      	add	r3, sl
    1110:	b29b      	uxth	r3, r3
    1112:	9301      	str	r3, [sp, #4]
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    1114:	4643      	mov	r3, r8
    1116:	5d5c      	ldrb	r4, [r3, r5]
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    1118:	220f      	movs	r2, #15
    111a:	4022      	ands	r2, r4
    111c:	43d2      	mvns	r2, r2
    111e:	b2d2      	uxtb	r2, r2
    1120:	0031      	movs	r1, r6
    1122:	9801      	ldr	r0, [sp, #4]
    1124:	47b8      	blx	r7
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    1126:	0924      	lsrs	r4, r4, #4
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value_2));
    1128:	43e2      	mvns	r2, r4
    112a:	b2d2      	uxtb	r2, r2
    112c:	1c71      	adds	r1, r6, #1
    112e:	b289      	uxth	r1, r1
    1130:	9801      	ldr	r0, [sp, #4]
    1132:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    1134:	3d01      	subs	r5, #1
    1136:	b2ad      	uxth	r5, r5
    1138:	3602      	adds	r6, #2
    113a:	b2b6      	uxth	r6, r6
    113c:	2d00      	cmp	r5, #0
    113e:	d1e9      	bne.n	1114 <eink_ed028tc1_graphics_load_4bgrey_image+0x58>
    for (i = 0; i < image_width_px; i++) {
    1140:	4653      	mov	r3, sl
    1142:	3301      	adds	r3, #1
    1144:	b29b      	uxth	r3, r3
    1146:	469a      	mov	sl, r3
    1148:	459b      	cmp	fp, r3
    114a:	d8d4      	bhi.n	10f6 <eink_ed028tc1_graphics_load_4bgrey_image+0x3a>
            m += 2;
        }
    }
    return;
    114c:	b007      	add	sp, #28
    114e:	bc3c      	pop	{r2, r3, r4, r5}
    1150:	4690      	mov	r8, r2
    1152:	4699      	mov	r9, r3
    1154:	46a2      	mov	sl, r4
    1156:	46ab      	mov	fp, r5
    1158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	00000f61 	.word	0x00000f61

00001160 <eink_ed057tc2_set_pixel>:
{
    1160:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1162:	4b36      	ldr	r3, [pc, #216]	; (123c <eink_ed057tc2_set_pixel+0xdc>)
    1164:	889b      	ldrh	r3, [r3, #4]
    1166:	b29b      	uxth	r3, r3
    1168:	4283      	cmp	r3, r0
    116a:	d919      	bls.n	11a0 <eink_ed057tc2_set_pixel+0x40>
    116c:	4b33      	ldr	r3, [pc, #204]	; (123c <eink_ed057tc2_set_pixel+0xdc>)
    116e:	88db      	ldrh	r3, [r3, #6]
    1170:	b29b      	uxth	r3, r3
    1172:	428b      	cmp	r3, r1
    1174:	d914      	bls.n	11a0 <eink_ed057tc2_set_pixel+0x40>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    1176:	4b31      	ldr	r3, [pc, #196]	; (123c <eink_ed057tc2_set_pixel+0xdc>)
    1178:	785b      	ldrb	r3, [r3, #1]
    117a:	2b01      	cmp	r3, #1
    117c:	d011      	beq.n	11a2 <eink_ed057tc2_set_pixel+0x42>
    117e:	4b2f      	ldr	r3, [pc, #188]	; (123c <eink_ed057tc2_set_pixel+0xdc>)
    1180:	785b      	ldrb	r3, [r3, #1]
    1182:	2b03      	cmp	r3, #3
    1184:	d00d      	beq.n	11a2 <eink_ed057tc2_set_pixel+0x42>
            byte_set = x1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * y_set);
    1186:	1044      	asrs	r4, r0, #1
    1188:	2396      	movs	r3, #150	; 0x96
    118a:	005b      	lsls	r3, r3, #1
    118c:	434b      	muls	r3, r1
    118e:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    1190:	2101      	movs	r1, #1
    1192:	4008      	ands	r0, r1
        if (odd_even_bit) {
    1194:	2800      	cmp	r0, #0
    1196:	d02c      	beq.n	11f2 <eink_ed057tc2_set_pixel+0x92>
            switch(pixel_colour) {
    1198:	2a00      	cmp	r2, #0
    119a:	d00a      	beq.n	11b2 <eink_ed057tc2_set_pixel+0x52>
    119c:	2a01      	cmp	r2, #1
    119e:	d018      	beq.n	11d2 <eink_ed057tc2_set_pixel+0x72>
}
    11a0:	bd10      	pop	{r4, pc}
           byte_set = y1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * x_set);
    11a2:	104c      	asrs	r4, r1, #1
    11a4:	2396      	movs	r3, #150	; 0x96
    11a6:	005b      	lsls	r3, r3, #1
    11a8:	4343      	muls	r3, r0
    11aa:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    11ac:	2001      	movs	r0, #1
    11ae:	4008      	ands	r0, r1
    11b0:	e7f0      	b.n	1194 <eink_ed057tc2_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    11b2:	4823      	ldr	r0, [pc, #140]	; (1240 <eink_ed057tc2_set_pixel+0xe0>)
    11b4:	6802      	ldr	r2, [r0, #0]
    11b6:	6912      	ldr	r2, [r2, #16]
    11b8:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    11ba:	7811      	ldrb	r1, [r2, #0]
    11bc:	2402      	movs	r4, #2
    11be:	43a1      	bics	r1, r4
    11c0:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    11c2:	6802      	ldr	r2, [r0, #0]
    11c4:	6911      	ldr	r1, [r2, #16]
    11c6:	18cb      	adds	r3, r1, r3
    11c8:	781a      	ldrb	r2, [r3, #0]
    11ca:	2101      	movs	r1, #1
    11cc:	438a      	bics	r2, r1
    11ce:	701a      	strb	r2, [r3, #0]
    11d0:	e7e6      	b.n	11a0 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    11d2:	481b      	ldr	r0, [pc, #108]	; (1240 <eink_ed057tc2_set_pixel+0xe0>)
    11d4:	6802      	ldr	r2, [r0, #0]
    11d6:	6912      	ldr	r2, [r2, #16]
    11d8:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    11da:	7811      	ldrb	r1, [r2, #0]
    11dc:	2402      	movs	r4, #2
    11de:	4321      	orrs	r1, r4
    11e0:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    11e2:	6802      	ldr	r2, [r0, #0]
    11e4:	6911      	ldr	r1, [r2, #16]
    11e6:	18cb      	adds	r3, r1, r3
    11e8:	781a      	ldrb	r2, [r3, #0]
    11ea:	2101      	movs	r1, #1
    11ec:	430a      	orrs	r2, r1
    11ee:	701a      	strb	r2, [r3, #0]
    11f0:	e7d6      	b.n	11a0 <eink_ed057tc2_set_pixel+0x40>
            switch(pixel_colour) {
    11f2:	2a00      	cmp	r2, #0
    11f4:	d011      	beq.n	121a <eink_ed057tc2_set_pixel+0xba>
    11f6:	2a01      	cmp	r2, #1
    11f8:	d1d2      	bne.n	11a0 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    11fa:	4811      	ldr	r0, [pc, #68]	; (1240 <eink_ed057tc2_set_pixel+0xe0>)
    11fc:	6802      	ldr	r2, [r0, #0]
    11fe:	6912      	ldr	r2, [r2, #16]
    1200:	18d2      	adds	r2, r2, r3
    1202:	7811      	ldrb	r1, [r2, #0]
    1204:	2420      	movs	r4, #32
    1206:	4321      	orrs	r1, r4
    1208:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    120a:	6802      	ldr	r2, [r0, #0]
    120c:	6911      	ldr	r1, [r2, #16]
    120e:	18cb      	adds	r3, r1, r3
    1210:	781a      	ldrb	r2, [r3, #0]
    1212:	2110      	movs	r1, #16
    1214:	430a      	orrs	r2, r1
    1216:	701a      	strb	r2, [r3, #0]
}
    1218:	e7c2      	b.n	11a0 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    121a:	4809      	ldr	r0, [pc, #36]	; (1240 <eink_ed057tc2_set_pixel+0xe0>)
    121c:	6802      	ldr	r2, [r0, #0]
    121e:	6912      	ldr	r2, [r2, #16]
    1220:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1222:	7811      	ldrb	r1, [r2, #0]
    1224:	2420      	movs	r4, #32
    1226:	43a1      	bics	r1, r4
    1228:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    122a:	6802      	ldr	r2, [r0, #0]
    122c:	6911      	ldr	r1, [r2, #16]
    122e:	18cb      	adds	r3, r1, r3
    1230:	781a      	ldrb	r2, [r3, #0]
    1232:	2110      	movs	r1, #16
    1234:	438a      	bics	r2, r1
    1236:	701a      	strb	r2, [r3, #0]
    1238:	e7b2      	b.n	11a0 <eink_ed057tc2_set_pixel+0x40>
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	200003fc 	.word	0x200003fc
    1240:	20000424 	.word	0x20000424

00001244 <eink_ac057tc1_set_pixel>:
{
    1244:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1246:	4bd0      	ldr	r3, [pc, #832]	; (1588 <eink_ac057tc1_set_pixel+0x344>)
    1248:	889b      	ldrh	r3, [r3, #4]
    124a:	b29b      	uxth	r3, r3
    124c:	4283      	cmp	r3, r0
    124e:	d93a      	bls.n	12c6 <eink_ac057tc1_set_pixel+0x82>
    1250:	4bcd      	ldr	r3, [pc, #820]	; (1588 <eink_ac057tc1_set_pixel+0x344>)
    1252:	88db      	ldrh	r3, [r3, #6]
    1254:	b29b      	uxth	r3, r3
    1256:	428b      	cmp	r3, r1
    1258:	d935      	bls.n	12c6 <eink_ac057tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    125a:	4bcb      	ldr	r3, [pc, #812]	; (1588 <eink_ac057tc1_set_pixel+0x344>)
    125c:	785b      	ldrb	r3, [r3, #1]
    125e:	2b01      	cmp	r3, #1
    1260:	d013      	beq.n	128a <eink_ac057tc1_set_pixel+0x46>
    1262:	4bc9      	ldr	r3, [pc, #804]	; (1588 <eink_ac057tc1_set_pixel+0x344>)
    1264:	785b      	ldrb	r3, [r3, #1]
    1266:	2b03      	cmp	r3, #3
    1268:	d00f      	beq.n	128a <eink_ac057tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * y_set);
    126a:	1044      	asrs	r4, r0, #1
    126c:	2396      	movs	r3, #150	; 0x96
    126e:	005b      	lsls	r3, r3, #1
    1270:	434b      	muls	r3, r1
    1272:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    1274:	2101      	movs	r1, #1
    1276:	4008      	ands	r0, r1
        if (odd_even_bit) {
    1278:	2800      	cmp	r0, #0
    127a:	d100      	bne.n	127e <eink_ac057tc1_set_pixel+0x3a>
    127c:	e0c5      	b.n	140a <eink_ac057tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    127e:	2a07      	cmp	r2, #7
    1280:	d821      	bhi.n	12c6 <eink_ac057tc1_set_pixel+0x82>
    1282:	0092      	lsls	r2, r2, #2
    1284:	49c1      	ldr	r1, [pc, #772]	; (158c <eink_ac057tc1_set_pixel+0x348>)
    1286:	588a      	ldr	r2, [r1, r2]
    1288:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * x_set);
    128a:	104c      	asrs	r4, r1, #1
    128c:	2396      	movs	r3, #150	; 0x96
    128e:	005b      	lsls	r3, r3, #1
    1290:	4343      	muls	r3, r0
    1292:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    1294:	2001      	movs	r0, #1
    1296:	4008      	ands	r0, r1
    1298:	e7ee      	b.n	1278 <eink_ac057tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    129a:	49bd      	ldr	r1, [pc, #756]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    129c:	680a      	ldr	r2, [r1, #0]
    129e:	6912      	ldr	r2, [r2, #16]
    12a0:	18d2      	adds	r2, r2, r3
    12a2:	7810      	ldrb	r0, [r2, #0]
    12a4:	2404      	movs	r4, #4
    12a6:	43a0      	bics	r0, r4
    12a8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    12aa:	680a      	ldr	r2, [r1, #0]
    12ac:	6912      	ldr	r2, [r2, #16]
    12ae:	18d2      	adds	r2, r2, r3
    12b0:	7810      	ldrb	r0, [r2, #0]
    12b2:	3c02      	subs	r4, #2
    12b4:	43a0      	bics	r0, r4
    12b6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    12b8:	680a      	ldr	r2, [r1, #0]
    12ba:	6911      	ldr	r1, [r2, #16]
    12bc:	18cb      	adds	r3, r1, r3
    12be:	781a      	ldrb	r2, [r3, #0]
    12c0:	2101      	movs	r1, #1
    12c2:	438a      	bics	r2, r1
    12c4:	701a      	strb	r2, [r3, #0]
}
    12c6:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    12c8:	49b1      	ldr	r1, [pc, #708]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    12ca:	680a      	ldr	r2, [r1, #0]
    12cc:	6912      	ldr	r2, [r2, #16]
    12ce:	18d2      	adds	r2, r2, r3
    12d0:	7810      	ldrb	r0, [r2, #0]
    12d2:	2404      	movs	r4, #4
    12d4:	43a0      	bics	r0, r4
    12d6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    12d8:	680a      	ldr	r2, [r1, #0]
    12da:	6912      	ldr	r2, [r2, #16]
    12dc:	18d2      	adds	r2, r2, r3
    12de:	7810      	ldrb	r0, [r2, #0]
    12e0:	3c02      	subs	r4, #2
    12e2:	43a0      	bics	r0, r4
    12e4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    12e6:	680a      	ldr	r2, [r1, #0]
    12e8:	6911      	ldr	r1, [r2, #16]
    12ea:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    12ec:	781a      	ldrb	r2, [r3, #0]
    12ee:	2101      	movs	r1, #1
    12f0:	430a      	orrs	r2, r1
    12f2:	701a      	strb	r2, [r3, #0]
    12f4:	e7e7      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    12f6:	49a6      	ldr	r1, [pc, #664]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    12f8:	680a      	ldr	r2, [r1, #0]
    12fa:	6912      	ldr	r2, [r2, #16]
    12fc:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    12fe:	7810      	ldrb	r0, [r2, #0]
    1300:	2404      	movs	r4, #4
    1302:	43a0      	bics	r0, r4
    1304:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1306:	680a      	ldr	r2, [r1, #0]
    1308:	6912      	ldr	r2, [r2, #16]
    130a:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    130c:	7810      	ldrb	r0, [r2, #0]
    130e:	2402      	movs	r4, #2
    1310:	4320      	orrs	r0, r4
    1312:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1314:	680a      	ldr	r2, [r1, #0]
    1316:	6911      	ldr	r1, [r2, #16]
    1318:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    131a:	781a      	ldrb	r2, [r3, #0]
    131c:	2101      	movs	r1, #1
    131e:	438a      	bics	r2, r1
    1320:	701a      	strb	r2, [r3, #0]
    1322:	e7d0      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1324:	499a      	ldr	r1, [pc, #616]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    1326:	680a      	ldr	r2, [r1, #0]
    1328:	6912      	ldr	r2, [r2, #16]
    132a:	18d2      	adds	r2, r2, r3
    132c:	7810      	ldrb	r0, [r2, #0]
    132e:	2404      	movs	r4, #4
    1330:	43a0      	bics	r0, r4
    1332:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1334:	680a      	ldr	r2, [r1, #0]
    1336:	6912      	ldr	r2, [r2, #16]
    1338:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    133a:	7810      	ldrb	r0, [r2, #0]
    133c:	2402      	movs	r4, #2
    133e:	4320      	orrs	r0, r4
    1340:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1342:	680a      	ldr	r2, [r1, #0]
    1344:	6911      	ldr	r1, [r2, #16]
    1346:	18cb      	adds	r3, r1, r3
    1348:	781a      	ldrb	r2, [r3, #0]
    134a:	2101      	movs	r1, #1
    134c:	430a      	orrs	r2, r1
    134e:	701a      	strb	r2, [r3, #0]
    1350:	e7b9      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1352:	498f      	ldr	r1, [pc, #572]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    1354:	680a      	ldr	r2, [r1, #0]
    1356:	6912      	ldr	r2, [r2, #16]
    1358:	18d2      	adds	r2, r2, r3
    135a:	7810      	ldrb	r0, [r2, #0]
    135c:	2404      	movs	r4, #4
    135e:	4320      	orrs	r0, r4
    1360:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1362:	680a      	ldr	r2, [r1, #0]
    1364:	6912      	ldr	r2, [r2, #16]
    1366:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1368:	7810      	ldrb	r0, [r2, #0]
    136a:	2402      	movs	r4, #2
    136c:	43a0      	bics	r0, r4
    136e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1370:	680a      	ldr	r2, [r1, #0]
    1372:	6911      	ldr	r1, [r2, #16]
    1374:	18cb      	adds	r3, r1, r3
    1376:	781a      	ldrb	r2, [r3, #0]
    1378:	2101      	movs	r1, #1
    137a:	438a      	bics	r2, r1
    137c:	701a      	strb	r2, [r3, #0]
    137e:	e7a2      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1380:	4983      	ldr	r1, [pc, #524]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    1382:	680a      	ldr	r2, [r1, #0]
    1384:	6912      	ldr	r2, [r2, #16]
    1386:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1388:	7810      	ldrb	r0, [r2, #0]
    138a:	2404      	movs	r4, #4
    138c:	4320      	orrs	r0, r4
    138e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1390:	680a      	ldr	r2, [r1, #0]
    1392:	6912      	ldr	r2, [r2, #16]
    1394:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1396:	7810      	ldrb	r0, [r2, #0]
    1398:	2402      	movs	r4, #2
    139a:	43a0      	bics	r0, r4
    139c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    139e:	680a      	ldr	r2, [r1, #0]
    13a0:	6911      	ldr	r1, [r2, #16]
    13a2:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    13a4:	781a      	ldrb	r2, [r3, #0]
    13a6:	2101      	movs	r1, #1
    13a8:	430a      	orrs	r2, r1
    13aa:	701a      	strb	r2, [r3, #0]
    13ac:	e78b      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    13ae:	4978      	ldr	r1, [pc, #480]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    13b0:	680a      	ldr	r2, [r1, #0]
    13b2:	6912      	ldr	r2, [r2, #16]
    13b4:	18d2      	adds	r2, r2, r3
    13b6:	7810      	ldrb	r0, [r2, #0]
    13b8:	2404      	movs	r4, #4
    13ba:	4320      	orrs	r0, r4
    13bc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    13be:	680a      	ldr	r2, [r1, #0]
    13c0:	6912      	ldr	r2, [r2, #16]
    13c2:	18d2      	adds	r2, r2, r3
    13c4:	7810      	ldrb	r0, [r2, #0]
    13c6:	2402      	movs	r4, #2
    13c8:	4320      	orrs	r0, r4
    13ca:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    13cc:	680a      	ldr	r2, [r1, #0]
    13ce:	6911      	ldr	r1, [r2, #16]
    13d0:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    13d2:	781a      	ldrb	r2, [r3, #0]
    13d4:	2101      	movs	r1, #1
    13d6:	438a      	bics	r2, r1
    13d8:	701a      	strb	r2, [r3, #0]
    13da:	e774      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    13dc:	496c      	ldr	r1, [pc, #432]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    13de:	680a      	ldr	r2, [r1, #0]
    13e0:	6912      	ldr	r2, [r2, #16]
    13e2:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    13e4:	7810      	ldrb	r0, [r2, #0]
    13e6:	2404      	movs	r4, #4
    13e8:	4320      	orrs	r0, r4
    13ea:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    13ec:	680a      	ldr	r2, [r1, #0]
    13ee:	6912      	ldr	r2, [r2, #16]
    13f0:	18d2      	adds	r2, r2, r3
    13f2:	7810      	ldrb	r0, [r2, #0]
    13f4:	2402      	movs	r4, #2
    13f6:	4320      	orrs	r0, r4
    13f8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    13fa:	680a      	ldr	r2, [r1, #0]
    13fc:	6911      	ldr	r1, [r2, #16]
    13fe:	18cb      	adds	r3, r1, r3
    1400:	781a      	ldrb	r2, [r3, #0]
    1402:	2101      	movs	r1, #1
    1404:	430a      	orrs	r2, r1
    1406:	701a      	strb	r2, [r3, #0]
    1408:	e75d      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
            switch(pixel_colour) {
    140a:	2a07      	cmp	r2, #7
    140c:	d900      	bls.n	1410 <eink_ac057tc1_set_pixel+0x1cc>
    140e:	e75a      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
    1410:	0092      	lsls	r2, r2, #2
    1412:	4960      	ldr	r1, [pc, #384]	; (1594 <eink_ac057tc1_set_pixel+0x350>)
    1414:	588a      	ldr	r2, [r1, r2]
    1416:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1418:	495d      	ldr	r1, [pc, #372]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    141a:	680a      	ldr	r2, [r1, #0]
    141c:	6912      	ldr	r2, [r2, #16]
    141e:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1420:	7810      	ldrb	r0, [r2, #0]
    1422:	2440      	movs	r4, #64	; 0x40
    1424:	43a0      	bics	r0, r4
    1426:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1428:	680a      	ldr	r2, [r1, #0]
    142a:	6912      	ldr	r2, [r2, #16]
    142c:	18d2      	adds	r2, r2, r3
    142e:	7810      	ldrb	r0, [r2, #0]
    1430:	3c20      	subs	r4, #32
    1432:	43a0      	bics	r0, r4
    1434:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1436:	680a      	ldr	r2, [r1, #0]
    1438:	6911      	ldr	r1, [r2, #16]
    143a:	18cb      	adds	r3, r1, r3
    143c:	781a      	ldrb	r2, [r3, #0]
    143e:	2110      	movs	r1, #16
    1440:	438a      	bics	r2, r1
    1442:	701a      	strb	r2, [r3, #0]
    1444:	e73f      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1446:	4952      	ldr	r1, [pc, #328]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    1448:	680a      	ldr	r2, [r1, #0]
    144a:	6912      	ldr	r2, [r2, #16]
    144c:	18d2      	adds	r2, r2, r3
    144e:	7810      	ldrb	r0, [r2, #0]
    1450:	2440      	movs	r4, #64	; 0x40
    1452:	43a0      	bics	r0, r4
    1454:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1456:	680a      	ldr	r2, [r1, #0]
    1458:	6912      	ldr	r2, [r2, #16]
    145a:	18d2      	adds	r2, r2, r3
    145c:	7810      	ldrb	r0, [r2, #0]
    145e:	3c20      	subs	r4, #32
    1460:	43a0      	bics	r0, r4
    1462:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1464:	680a      	ldr	r2, [r1, #0]
    1466:	6911      	ldr	r1, [r2, #16]
    1468:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    146a:	781a      	ldrb	r2, [r3, #0]
    146c:	2110      	movs	r1, #16
    146e:	430a      	orrs	r2, r1
    1470:	701a      	strb	r2, [r3, #0]
    1472:	e728      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1474:	4946      	ldr	r1, [pc, #280]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    1476:	680a      	ldr	r2, [r1, #0]
    1478:	6912      	ldr	r2, [r2, #16]
    147a:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    147c:	7810      	ldrb	r0, [r2, #0]
    147e:	2440      	movs	r4, #64	; 0x40
    1480:	43a0      	bics	r0, r4
    1482:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1484:	680a      	ldr	r2, [r1, #0]
    1486:	6912      	ldr	r2, [r2, #16]
    1488:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    148a:	7810      	ldrb	r0, [r2, #0]
    148c:	2420      	movs	r4, #32
    148e:	4320      	orrs	r0, r4
    1490:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1492:	680a      	ldr	r2, [r1, #0]
    1494:	6911      	ldr	r1, [r2, #16]
    1496:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1498:	781a      	ldrb	r2, [r3, #0]
    149a:	2110      	movs	r1, #16
    149c:	438a      	bics	r2, r1
    149e:	701a      	strb	r2, [r3, #0]
    14a0:	e711      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    14a2:	493b      	ldr	r1, [pc, #236]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    14a4:	680a      	ldr	r2, [r1, #0]
    14a6:	6912      	ldr	r2, [r2, #16]
    14a8:	18d2      	adds	r2, r2, r3
    14aa:	7810      	ldrb	r0, [r2, #0]
    14ac:	2440      	movs	r4, #64	; 0x40
    14ae:	43a0      	bics	r0, r4
    14b0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    14b2:	680a      	ldr	r2, [r1, #0]
    14b4:	6912      	ldr	r2, [r2, #16]
    14b6:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    14b8:	7810      	ldrb	r0, [r2, #0]
    14ba:	2420      	movs	r4, #32
    14bc:	4320      	orrs	r0, r4
    14be:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    14c0:	680a      	ldr	r2, [r1, #0]
    14c2:	6911      	ldr	r1, [r2, #16]
    14c4:	18cb      	adds	r3, r1, r3
    14c6:	781a      	ldrb	r2, [r3, #0]
    14c8:	2110      	movs	r1, #16
    14ca:	430a      	orrs	r2, r1
    14cc:	701a      	strb	r2, [r3, #0]
    14ce:	e6fa      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    14d0:	492f      	ldr	r1, [pc, #188]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    14d2:	680a      	ldr	r2, [r1, #0]
    14d4:	6912      	ldr	r2, [r2, #16]
    14d6:	18d2      	adds	r2, r2, r3
    14d8:	7810      	ldrb	r0, [r2, #0]
    14da:	2440      	movs	r4, #64	; 0x40
    14dc:	4320      	orrs	r0, r4
    14de:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    14e0:	680a      	ldr	r2, [r1, #0]
    14e2:	6912      	ldr	r2, [r2, #16]
    14e4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    14e6:	7810      	ldrb	r0, [r2, #0]
    14e8:	2420      	movs	r4, #32
    14ea:	43a0      	bics	r0, r4
    14ec:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    14ee:	680a      	ldr	r2, [r1, #0]
    14f0:	6911      	ldr	r1, [r2, #16]
    14f2:	18cb      	adds	r3, r1, r3
    14f4:	781a      	ldrb	r2, [r3, #0]
    14f6:	2110      	movs	r1, #16
    14f8:	438a      	bics	r2, r1
    14fa:	701a      	strb	r2, [r3, #0]
    14fc:	e6e3      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    14fe:	4924      	ldr	r1, [pc, #144]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    1500:	680a      	ldr	r2, [r1, #0]
    1502:	6912      	ldr	r2, [r2, #16]
    1504:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1506:	7810      	ldrb	r0, [r2, #0]
    1508:	2440      	movs	r4, #64	; 0x40
    150a:	4320      	orrs	r0, r4
    150c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    150e:	680a      	ldr	r2, [r1, #0]
    1510:	6912      	ldr	r2, [r2, #16]
    1512:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1514:	7810      	ldrb	r0, [r2, #0]
    1516:	2420      	movs	r4, #32
    1518:	43a0      	bics	r0, r4
    151a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    151c:	680a      	ldr	r2, [r1, #0]
    151e:	6911      	ldr	r1, [r2, #16]
    1520:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1522:	781a      	ldrb	r2, [r3, #0]
    1524:	2110      	movs	r1, #16
    1526:	430a      	orrs	r2, r1
    1528:	701a      	strb	r2, [r3, #0]
    152a:	e6cc      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    152c:	4918      	ldr	r1, [pc, #96]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    152e:	680a      	ldr	r2, [r1, #0]
    1530:	6912      	ldr	r2, [r2, #16]
    1532:	18d2      	adds	r2, r2, r3
    1534:	7810      	ldrb	r0, [r2, #0]
    1536:	2440      	movs	r4, #64	; 0x40
    1538:	4320      	orrs	r0, r4
    153a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    153c:	680a      	ldr	r2, [r1, #0]
    153e:	6912      	ldr	r2, [r2, #16]
    1540:	18d2      	adds	r2, r2, r3
    1542:	7810      	ldrb	r0, [r2, #0]
    1544:	2420      	movs	r4, #32
    1546:	4320      	orrs	r0, r4
    1548:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    154a:	680a      	ldr	r2, [r1, #0]
    154c:	6911      	ldr	r1, [r2, #16]
    154e:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1550:	781a      	ldrb	r2, [r3, #0]
    1552:	2110      	movs	r1, #16
    1554:	438a      	bics	r2, r1
    1556:	701a      	strb	r2, [r3, #0]
    1558:	e6b5      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    155a:	490d      	ldr	r1, [pc, #52]	; (1590 <eink_ac057tc1_set_pixel+0x34c>)
    155c:	680a      	ldr	r2, [r1, #0]
    155e:	6912      	ldr	r2, [r2, #16]
    1560:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1562:	7810      	ldrb	r0, [r2, #0]
    1564:	2440      	movs	r4, #64	; 0x40
    1566:	4320      	orrs	r0, r4
    1568:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    156a:	680a      	ldr	r2, [r1, #0]
    156c:	6912      	ldr	r2, [r2, #16]
    156e:	18d2      	adds	r2, r2, r3
    1570:	7810      	ldrb	r0, [r2, #0]
    1572:	2420      	movs	r4, #32
    1574:	4320      	orrs	r0, r4
    1576:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1578:	680a      	ldr	r2, [r1, #0]
    157a:	6911      	ldr	r1, [r2, #16]
    157c:	18cb      	adds	r3, r1, r3
    157e:	781a      	ldrb	r2, [r3, #0]
    1580:	2110      	movs	r1, #16
    1582:	430a      	orrs	r2, r1
    1584:	701a      	strb	r2, [r3, #0]
}
    1586:	e69e      	b.n	12c6 <eink_ac057tc1_set_pixel+0x82>
    1588:	200003fc 	.word	0x200003fc
    158c:	00004700 	.word	0x00004700
    1590:	20000424 	.word	0x20000424
    1594:	00004720 	.word	0x00004720

00001598 <eink_ac040tc1_set_pixel>:
{
    1598:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    159a:	4bd0      	ldr	r3, [pc, #832]	; (18dc <eink_ac040tc1_set_pixel+0x344>)
    159c:	889b      	ldrh	r3, [r3, #4]
    159e:	b29b      	uxth	r3, r3
    15a0:	4283      	cmp	r3, r0
    15a2:	d93a      	bls.n	161a <eink_ac040tc1_set_pixel+0x82>
    15a4:	4bcd      	ldr	r3, [pc, #820]	; (18dc <eink_ac040tc1_set_pixel+0x344>)
    15a6:	88db      	ldrh	r3, [r3, #6]
    15a8:	b29b      	uxth	r3, r3
    15aa:	428b      	cmp	r3, r1
    15ac:	d935      	bls.n	161a <eink_ac040tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    15ae:	4bcb      	ldr	r3, [pc, #812]	; (18dc <eink_ac040tc1_set_pixel+0x344>)
    15b0:	785b      	ldrb	r3, [r3, #1]
    15b2:	2b01      	cmp	r3, #1
    15b4:	d013      	beq.n	15de <eink_ac040tc1_set_pixel+0x46>
    15b6:	4bc9      	ldr	r3, [pc, #804]	; (18dc <eink_ac040tc1_set_pixel+0x344>)
    15b8:	785b      	ldrb	r3, [r3, #1]
    15ba:	2b03      	cmp	r3, #3
    15bc:	d00f      	beq.n	15de <eink_ac040tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * y_set);
    15be:	1043      	asrs	r3, r0, #1
    15c0:	008c      	lsls	r4, r1, #2
    15c2:	1861      	adds	r1, r4, r1
    15c4:	0189      	lsls	r1, r1, #6
    15c6:	185b      	adds	r3, r3, r1
            odd_even_bit = x_set % 2;
    15c8:	2101      	movs	r1, #1
    15ca:	4008      	ands	r0, r1
        if (odd_even_bit) {
    15cc:	2800      	cmp	r0, #0
    15ce:	d100      	bne.n	15d2 <eink_ac040tc1_set_pixel+0x3a>
    15d0:	e0c5      	b.n	175e <eink_ac040tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    15d2:	2a07      	cmp	r2, #7
    15d4:	d821      	bhi.n	161a <eink_ac040tc1_set_pixel+0x82>
    15d6:	0092      	lsls	r2, r2, #2
    15d8:	49c1      	ldr	r1, [pc, #772]	; (18e0 <eink_ac040tc1_set_pixel+0x348>)
    15da:	588a      	ldr	r2, [r1, r2]
    15dc:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * x_set);
    15de:	104b      	asrs	r3, r1, #1
    15e0:	0084      	lsls	r4, r0, #2
    15e2:	1820      	adds	r0, r4, r0
    15e4:	0180      	lsls	r0, r0, #6
    15e6:	181b      	adds	r3, r3, r0
           odd_even_bit = y_set % 2;
    15e8:	2001      	movs	r0, #1
    15ea:	4008      	ands	r0, r1
    15ec:	e7ee      	b.n	15cc <eink_ac040tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    15ee:	49bd      	ldr	r1, [pc, #756]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    15f0:	680a      	ldr	r2, [r1, #0]
    15f2:	6912      	ldr	r2, [r2, #16]
    15f4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    15f6:	7810      	ldrb	r0, [r2, #0]
    15f8:	2404      	movs	r4, #4
    15fa:	43a0      	bics	r0, r4
    15fc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    15fe:	680a      	ldr	r2, [r1, #0]
    1600:	6912      	ldr	r2, [r2, #16]
    1602:	18d2      	adds	r2, r2, r3
    1604:	7810      	ldrb	r0, [r2, #0]
    1606:	3c02      	subs	r4, #2
    1608:	43a0      	bics	r0, r4
    160a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    160c:	680a      	ldr	r2, [r1, #0]
    160e:	6911      	ldr	r1, [r2, #16]
    1610:	18cb      	adds	r3, r1, r3
    1612:	781a      	ldrb	r2, [r3, #0]
    1614:	2101      	movs	r1, #1
    1616:	438a      	bics	r2, r1
    1618:	701a      	strb	r2, [r3, #0]
}
    161a:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    161c:	49b1      	ldr	r1, [pc, #708]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    161e:	680a      	ldr	r2, [r1, #0]
    1620:	6912      	ldr	r2, [r2, #16]
    1622:	18d2      	adds	r2, r2, r3
    1624:	7810      	ldrb	r0, [r2, #0]
    1626:	2404      	movs	r4, #4
    1628:	43a0      	bics	r0, r4
    162a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    162c:	680a      	ldr	r2, [r1, #0]
    162e:	6912      	ldr	r2, [r2, #16]
    1630:	18d2      	adds	r2, r2, r3
    1632:	7810      	ldrb	r0, [r2, #0]
    1634:	3c02      	subs	r4, #2
    1636:	43a0      	bics	r0, r4
    1638:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    163a:	680a      	ldr	r2, [r1, #0]
    163c:	6911      	ldr	r1, [r2, #16]
    163e:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1640:	781a      	ldrb	r2, [r3, #0]
    1642:	2101      	movs	r1, #1
    1644:	430a      	orrs	r2, r1
    1646:	701a      	strb	r2, [r3, #0]
    1648:	e7e7      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    164a:	49a6      	ldr	r1, [pc, #664]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    164c:	680a      	ldr	r2, [r1, #0]
    164e:	6912      	ldr	r2, [r2, #16]
    1650:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1652:	7810      	ldrb	r0, [r2, #0]
    1654:	2404      	movs	r4, #4
    1656:	43a0      	bics	r0, r4
    1658:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    165a:	680a      	ldr	r2, [r1, #0]
    165c:	6912      	ldr	r2, [r2, #16]
    165e:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1660:	7810      	ldrb	r0, [r2, #0]
    1662:	2402      	movs	r4, #2
    1664:	4320      	orrs	r0, r4
    1666:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1668:	680a      	ldr	r2, [r1, #0]
    166a:	6911      	ldr	r1, [r2, #16]
    166c:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    166e:	781a      	ldrb	r2, [r3, #0]
    1670:	2101      	movs	r1, #1
    1672:	438a      	bics	r2, r1
    1674:	701a      	strb	r2, [r3, #0]
    1676:	e7d0      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1678:	499a      	ldr	r1, [pc, #616]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    167a:	680a      	ldr	r2, [r1, #0]
    167c:	6912      	ldr	r2, [r2, #16]
    167e:	18d2      	adds	r2, r2, r3
    1680:	7810      	ldrb	r0, [r2, #0]
    1682:	2404      	movs	r4, #4
    1684:	43a0      	bics	r0, r4
    1686:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1688:	680a      	ldr	r2, [r1, #0]
    168a:	6912      	ldr	r2, [r2, #16]
    168c:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    168e:	7810      	ldrb	r0, [r2, #0]
    1690:	2402      	movs	r4, #2
    1692:	4320      	orrs	r0, r4
    1694:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1696:	680a      	ldr	r2, [r1, #0]
    1698:	6911      	ldr	r1, [r2, #16]
    169a:	18cb      	adds	r3, r1, r3
    169c:	781a      	ldrb	r2, [r3, #0]
    169e:	2101      	movs	r1, #1
    16a0:	430a      	orrs	r2, r1
    16a2:	701a      	strb	r2, [r3, #0]
    16a4:	e7b9      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    16a6:	498f      	ldr	r1, [pc, #572]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    16a8:	680a      	ldr	r2, [r1, #0]
    16aa:	6912      	ldr	r2, [r2, #16]
    16ac:	18d2      	adds	r2, r2, r3
    16ae:	7810      	ldrb	r0, [r2, #0]
    16b0:	2404      	movs	r4, #4
    16b2:	4320      	orrs	r0, r4
    16b4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    16b6:	680a      	ldr	r2, [r1, #0]
    16b8:	6912      	ldr	r2, [r2, #16]
    16ba:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    16bc:	7810      	ldrb	r0, [r2, #0]
    16be:	2402      	movs	r4, #2
    16c0:	43a0      	bics	r0, r4
    16c2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    16c4:	680a      	ldr	r2, [r1, #0]
    16c6:	6911      	ldr	r1, [r2, #16]
    16c8:	18cb      	adds	r3, r1, r3
    16ca:	781a      	ldrb	r2, [r3, #0]
    16cc:	2101      	movs	r1, #1
    16ce:	438a      	bics	r2, r1
    16d0:	701a      	strb	r2, [r3, #0]
    16d2:	e7a2      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    16d4:	4983      	ldr	r1, [pc, #524]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    16d6:	680a      	ldr	r2, [r1, #0]
    16d8:	6912      	ldr	r2, [r2, #16]
    16da:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    16dc:	7810      	ldrb	r0, [r2, #0]
    16de:	2404      	movs	r4, #4
    16e0:	4320      	orrs	r0, r4
    16e2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    16e4:	680a      	ldr	r2, [r1, #0]
    16e6:	6912      	ldr	r2, [r2, #16]
    16e8:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    16ea:	7810      	ldrb	r0, [r2, #0]
    16ec:	2402      	movs	r4, #2
    16ee:	43a0      	bics	r0, r4
    16f0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    16f2:	680a      	ldr	r2, [r1, #0]
    16f4:	6911      	ldr	r1, [r2, #16]
    16f6:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    16f8:	781a      	ldrb	r2, [r3, #0]
    16fa:	2101      	movs	r1, #1
    16fc:	430a      	orrs	r2, r1
    16fe:	701a      	strb	r2, [r3, #0]
    1700:	e78b      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1702:	4978      	ldr	r1, [pc, #480]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    1704:	680a      	ldr	r2, [r1, #0]
    1706:	6912      	ldr	r2, [r2, #16]
    1708:	18d2      	adds	r2, r2, r3
    170a:	7810      	ldrb	r0, [r2, #0]
    170c:	2404      	movs	r4, #4
    170e:	4320      	orrs	r0, r4
    1710:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1712:	680a      	ldr	r2, [r1, #0]
    1714:	6912      	ldr	r2, [r2, #16]
    1716:	18d2      	adds	r2, r2, r3
    1718:	7810      	ldrb	r0, [r2, #0]
    171a:	2402      	movs	r4, #2
    171c:	4320      	orrs	r0, r4
    171e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1720:	680a      	ldr	r2, [r1, #0]
    1722:	6911      	ldr	r1, [r2, #16]
    1724:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1726:	781a      	ldrb	r2, [r3, #0]
    1728:	2101      	movs	r1, #1
    172a:	438a      	bics	r2, r1
    172c:	701a      	strb	r2, [r3, #0]
    172e:	e774      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1730:	496c      	ldr	r1, [pc, #432]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    1732:	680a      	ldr	r2, [r1, #0]
    1734:	6912      	ldr	r2, [r2, #16]
    1736:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1738:	7810      	ldrb	r0, [r2, #0]
    173a:	2404      	movs	r4, #4
    173c:	4320      	orrs	r0, r4
    173e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1740:	680a      	ldr	r2, [r1, #0]
    1742:	6912      	ldr	r2, [r2, #16]
    1744:	18d2      	adds	r2, r2, r3
    1746:	7810      	ldrb	r0, [r2, #0]
    1748:	2402      	movs	r4, #2
    174a:	4320      	orrs	r0, r4
    174c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    174e:	680a      	ldr	r2, [r1, #0]
    1750:	6911      	ldr	r1, [r2, #16]
    1752:	18cb      	adds	r3, r1, r3
    1754:	781a      	ldrb	r2, [r3, #0]
    1756:	2101      	movs	r1, #1
    1758:	430a      	orrs	r2, r1
    175a:	701a      	strb	r2, [r3, #0]
    175c:	e75d      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
            switch(pixel_colour) {
    175e:	2a07      	cmp	r2, #7
    1760:	d900      	bls.n	1764 <eink_ac040tc1_set_pixel+0x1cc>
    1762:	e75a      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
    1764:	0092      	lsls	r2, r2, #2
    1766:	4960      	ldr	r1, [pc, #384]	; (18e8 <eink_ac040tc1_set_pixel+0x350>)
    1768:	588a      	ldr	r2, [r1, r2]
    176a:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    176c:	495d      	ldr	r1, [pc, #372]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    176e:	680a      	ldr	r2, [r1, #0]
    1770:	6912      	ldr	r2, [r2, #16]
    1772:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1774:	7810      	ldrb	r0, [r2, #0]
    1776:	2440      	movs	r4, #64	; 0x40
    1778:	43a0      	bics	r0, r4
    177a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    177c:	680a      	ldr	r2, [r1, #0]
    177e:	6912      	ldr	r2, [r2, #16]
    1780:	18d2      	adds	r2, r2, r3
    1782:	7810      	ldrb	r0, [r2, #0]
    1784:	3c20      	subs	r4, #32
    1786:	43a0      	bics	r0, r4
    1788:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    178a:	680a      	ldr	r2, [r1, #0]
    178c:	6911      	ldr	r1, [r2, #16]
    178e:	18cb      	adds	r3, r1, r3
    1790:	781a      	ldrb	r2, [r3, #0]
    1792:	2110      	movs	r1, #16
    1794:	438a      	bics	r2, r1
    1796:	701a      	strb	r2, [r3, #0]
    1798:	e73f      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    179a:	4952      	ldr	r1, [pc, #328]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    179c:	680a      	ldr	r2, [r1, #0]
    179e:	6912      	ldr	r2, [r2, #16]
    17a0:	18d2      	adds	r2, r2, r3
    17a2:	7810      	ldrb	r0, [r2, #0]
    17a4:	2440      	movs	r4, #64	; 0x40
    17a6:	43a0      	bics	r0, r4
    17a8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    17aa:	680a      	ldr	r2, [r1, #0]
    17ac:	6912      	ldr	r2, [r2, #16]
    17ae:	18d2      	adds	r2, r2, r3
    17b0:	7810      	ldrb	r0, [r2, #0]
    17b2:	3c20      	subs	r4, #32
    17b4:	43a0      	bics	r0, r4
    17b6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    17b8:	680a      	ldr	r2, [r1, #0]
    17ba:	6911      	ldr	r1, [r2, #16]
    17bc:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    17be:	781a      	ldrb	r2, [r3, #0]
    17c0:	2110      	movs	r1, #16
    17c2:	430a      	orrs	r2, r1
    17c4:	701a      	strb	r2, [r3, #0]
    17c6:	e728      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    17c8:	4946      	ldr	r1, [pc, #280]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    17ca:	680a      	ldr	r2, [r1, #0]
    17cc:	6912      	ldr	r2, [r2, #16]
    17ce:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    17d0:	7810      	ldrb	r0, [r2, #0]
    17d2:	2440      	movs	r4, #64	; 0x40
    17d4:	43a0      	bics	r0, r4
    17d6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    17d8:	680a      	ldr	r2, [r1, #0]
    17da:	6912      	ldr	r2, [r2, #16]
    17dc:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    17de:	7810      	ldrb	r0, [r2, #0]
    17e0:	2420      	movs	r4, #32
    17e2:	4320      	orrs	r0, r4
    17e4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    17e6:	680a      	ldr	r2, [r1, #0]
    17e8:	6911      	ldr	r1, [r2, #16]
    17ea:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    17ec:	781a      	ldrb	r2, [r3, #0]
    17ee:	2110      	movs	r1, #16
    17f0:	438a      	bics	r2, r1
    17f2:	701a      	strb	r2, [r3, #0]
    17f4:	e711      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    17f6:	493b      	ldr	r1, [pc, #236]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    17f8:	680a      	ldr	r2, [r1, #0]
    17fa:	6912      	ldr	r2, [r2, #16]
    17fc:	18d2      	adds	r2, r2, r3
    17fe:	7810      	ldrb	r0, [r2, #0]
    1800:	2440      	movs	r4, #64	; 0x40
    1802:	43a0      	bics	r0, r4
    1804:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1806:	680a      	ldr	r2, [r1, #0]
    1808:	6912      	ldr	r2, [r2, #16]
    180a:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    180c:	7810      	ldrb	r0, [r2, #0]
    180e:	2420      	movs	r4, #32
    1810:	4320      	orrs	r0, r4
    1812:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1814:	680a      	ldr	r2, [r1, #0]
    1816:	6911      	ldr	r1, [r2, #16]
    1818:	18cb      	adds	r3, r1, r3
    181a:	781a      	ldrb	r2, [r3, #0]
    181c:	2110      	movs	r1, #16
    181e:	430a      	orrs	r2, r1
    1820:	701a      	strb	r2, [r3, #0]
    1822:	e6fa      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1824:	492f      	ldr	r1, [pc, #188]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    1826:	680a      	ldr	r2, [r1, #0]
    1828:	6912      	ldr	r2, [r2, #16]
    182a:	18d2      	adds	r2, r2, r3
    182c:	7810      	ldrb	r0, [r2, #0]
    182e:	2440      	movs	r4, #64	; 0x40
    1830:	4320      	orrs	r0, r4
    1832:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1834:	680a      	ldr	r2, [r1, #0]
    1836:	6912      	ldr	r2, [r2, #16]
    1838:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    183a:	7810      	ldrb	r0, [r2, #0]
    183c:	2420      	movs	r4, #32
    183e:	43a0      	bics	r0, r4
    1840:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1842:	680a      	ldr	r2, [r1, #0]
    1844:	6911      	ldr	r1, [r2, #16]
    1846:	18cb      	adds	r3, r1, r3
    1848:	781a      	ldrb	r2, [r3, #0]
    184a:	2110      	movs	r1, #16
    184c:	438a      	bics	r2, r1
    184e:	701a      	strb	r2, [r3, #0]
    1850:	e6e3      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1852:	4924      	ldr	r1, [pc, #144]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    1854:	680a      	ldr	r2, [r1, #0]
    1856:	6912      	ldr	r2, [r2, #16]
    1858:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    185a:	7810      	ldrb	r0, [r2, #0]
    185c:	2440      	movs	r4, #64	; 0x40
    185e:	4320      	orrs	r0, r4
    1860:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1862:	680a      	ldr	r2, [r1, #0]
    1864:	6912      	ldr	r2, [r2, #16]
    1866:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1868:	7810      	ldrb	r0, [r2, #0]
    186a:	2420      	movs	r4, #32
    186c:	43a0      	bics	r0, r4
    186e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1870:	680a      	ldr	r2, [r1, #0]
    1872:	6911      	ldr	r1, [r2, #16]
    1874:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1876:	781a      	ldrb	r2, [r3, #0]
    1878:	2110      	movs	r1, #16
    187a:	430a      	orrs	r2, r1
    187c:	701a      	strb	r2, [r3, #0]
    187e:	e6cc      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1880:	4918      	ldr	r1, [pc, #96]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    1882:	680a      	ldr	r2, [r1, #0]
    1884:	6912      	ldr	r2, [r2, #16]
    1886:	18d2      	adds	r2, r2, r3
    1888:	7810      	ldrb	r0, [r2, #0]
    188a:	2440      	movs	r4, #64	; 0x40
    188c:	4320      	orrs	r0, r4
    188e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1890:	680a      	ldr	r2, [r1, #0]
    1892:	6912      	ldr	r2, [r2, #16]
    1894:	18d2      	adds	r2, r2, r3
    1896:	7810      	ldrb	r0, [r2, #0]
    1898:	2420      	movs	r4, #32
    189a:	4320      	orrs	r0, r4
    189c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    189e:	680a      	ldr	r2, [r1, #0]
    18a0:	6911      	ldr	r1, [r2, #16]
    18a2:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    18a4:	781a      	ldrb	r2, [r3, #0]
    18a6:	2110      	movs	r1, #16
    18a8:	438a      	bics	r2, r1
    18aa:	701a      	strb	r2, [r3, #0]
    18ac:	e6b5      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    18ae:	490d      	ldr	r1, [pc, #52]	; (18e4 <eink_ac040tc1_set_pixel+0x34c>)
    18b0:	680a      	ldr	r2, [r1, #0]
    18b2:	6912      	ldr	r2, [r2, #16]
    18b4:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    18b6:	7810      	ldrb	r0, [r2, #0]
    18b8:	2440      	movs	r4, #64	; 0x40
    18ba:	4320      	orrs	r0, r4
    18bc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    18be:	680a      	ldr	r2, [r1, #0]
    18c0:	6912      	ldr	r2, [r2, #16]
    18c2:	18d2      	adds	r2, r2, r3
    18c4:	7810      	ldrb	r0, [r2, #0]
    18c6:	2420      	movs	r4, #32
    18c8:	4320      	orrs	r0, r4
    18ca:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    18cc:	680a      	ldr	r2, [r1, #0]
    18ce:	6911      	ldr	r1, [r2, #16]
    18d0:	18cb      	adds	r3, r1, r3
    18d2:	781a      	ldrb	r2, [r3, #0]
    18d4:	2110      	movs	r1, #16
    18d6:	430a      	orrs	r2, r1
    18d8:	701a      	strb	r2, [r3, #0]
}
    18da:	e69e      	b.n	161a <eink_ac040tc1_set_pixel+0x82>
    18dc:	200003fc 	.word	0x200003fc
    18e0:	00004740 	.word	0x00004740
    18e4:	20000424 	.word	0x20000424
    18e8:	00004760 	.word	0x00004760

000018ec <eink_hink_e0154a05_set_pixel>:
{    
    18ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch(ssd1608_global_instance.display_config.display_rotation)
    18ee:	4c2a      	ldr	r4, [pc, #168]	; (1998 <eink_hink_e0154a05_set_pixel+0xac>)
    18f0:	7824      	ldrb	r4, [r4, #0]
    18f2:	b2e4      	uxtb	r4, r4
    18f4:	2c01      	cmp	r4, #1
    18f6:	d014      	beq.n	1922 <eink_hink_e0154a05_set_pixel+0x36>
    18f8:	2c00      	cmp	r4, #0
    18fa:	d008      	beq.n	190e <eink_hink_e0154a05_set_pixel+0x22>
    18fc:	2c02      	cmp	r4, #2
    18fe:	d01c      	beq.n	193a <eink_hink_e0154a05_set_pixel+0x4e>
    1900:	2c03      	cmp	r4, #3
    1902:	d024      	beq.n	194e <eink_hink_e0154a05_set_pixel+0x62>
    if ( (x_set >= 0) && (x_set < max_x) && (y_set >= 0) && (y_set < max_y) ) {
    1904:	42b3      	cmp	r3, r6
    1906:	d201      	bcs.n	190c <eink_hink_e0154a05_set_pixel+0x20>
    1908:	42bd      	cmp	r5, r7
    190a:	d328      	bcc.n	195e <eink_hink_e0154a05_set_pixel+0x72>
}
    190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            x_set = ssd1608_global_instance.display_height - y;
    190e:	4c22      	ldr	r4, [pc, #136]	; (1998 <eink_hink_e0154a05_set_pixel+0xac>)
    1910:	88e3      	ldrh	r3, [r4, #6]
    1912:	1a5b      	subs	r3, r3, r1
    1914:	b29b      	uxth	r3, r3
            max_x = ssd1608_global_instance.display_height;
    1916:	88e6      	ldrh	r6, [r4, #6]
    1918:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    191a:	88a7      	ldrh	r7, [r4, #4]
    191c:	b2bf      	uxth	r7, r7
            y_set = x;
    191e:	0005      	movs	r5, r0
            break;
    1920:	e7f0      	b.n	1904 <eink_hink_e0154a05_set_pixel+0x18>
            x_set = ssd1608_global_instance.display_width - x;
    1922:	4c1d      	ldr	r4, [pc, #116]	; (1998 <eink_hink_e0154a05_set_pixel+0xac>)
    1924:	88a3      	ldrh	r3, [r4, #4]
    1926:	1a1b      	subs	r3, r3, r0
    1928:	b29b      	uxth	r3, r3
            y_set = ssd1608_global_instance.display_height - y;
    192a:	88e5      	ldrh	r5, [r4, #6]
    192c:	1a6d      	subs	r5, r5, r1
    192e:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_width;
    1930:	88a6      	ldrh	r6, [r4, #4]
    1932:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1934:	88e7      	ldrh	r7, [r4, #6]
    1936:	b2bf      	uxth	r7, r7
            break;
    1938:	e7e4      	b.n	1904 <eink_hink_e0154a05_set_pixel+0x18>
            y_set = ssd1608_global_instance.display_width - x;
    193a:	4c17      	ldr	r4, [pc, #92]	; (1998 <eink_hink_e0154a05_set_pixel+0xac>)
    193c:	88a5      	ldrh	r5, [r4, #4]
    193e:	1a2d      	subs	r5, r5, r0
    1940:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_height;
    1942:	88e6      	ldrh	r6, [r4, #6]
    1944:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    1946:	88a7      	ldrh	r7, [r4, #4]
    1948:	b2bf      	uxth	r7, r7
            x_set = y;
    194a:	000b      	movs	r3, r1
            break;
    194c:	e7da      	b.n	1904 <eink_hink_e0154a05_set_pixel+0x18>
            max_x = ssd1608_global_instance.display_width;
    194e:	4b12      	ldr	r3, [pc, #72]	; (1998 <eink_hink_e0154a05_set_pixel+0xac>)
    1950:	889e      	ldrh	r6, [r3, #4]
    1952:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1954:	88df      	ldrh	r7, [r3, #6]
    1956:	b2bf      	uxth	r7, r7
            y_set = y;
    1958:	000d      	movs	r5, r1
            x_set = x;
    195a:	0003      	movs	r3, r0
            break;
    195c:	e7d2      	b.n	1904 <eink_hink_e0154a05_set_pixel+0x18>
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    195e:	490f      	ldr	r1, [pc, #60]	; (199c <eink_hink_e0154a05_set_pixel+0xb0>)
    1960:	6809      	ldr	r1, [r1, #0]
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    1962:	3301      	adds	r3, #1
    1964:	0098      	lsls	r0, r3, #2
    1966:	181b      	adds	r3, r3, r0
    1968:	0098      	lsls	r0, r3, #2
    196a:	181b      	adds	r3, r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    196c:	10e8      	asrs	r0, r5, #3
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    196e:	1a1b      	subs	r3, r3, r0
    1970:	3b01      	subs	r3, #1
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    1972:	b29b      	uxth	r3, r3
    1974:	6909      	ldr	r1, [r1, #16]
    1976:	18cb      	adds	r3, r1, r3
    1978:	2107      	movs	r1, #7
    197a:	400d      	ands	r5, r1
    if (bit_value == 1) {
    197c:	2a00      	cmp	r2, #0
    197e:	d105      	bne.n	198c <eink_hink_e0154a05_set_pixel+0xa0>
        *byte &= ~(1 << bit_number);
    1980:	2101      	movs	r1, #1
    1982:	40a9      	lsls	r1, r5
    1984:	781a      	ldrb	r2, [r3, #0]
    1986:	438a      	bics	r2, r1
    1988:	701a      	strb	r2, [r3, #0]
}
    198a:	e7bf      	b.n	190c <eink_hink_e0154a05_set_pixel+0x20>
        *byte |= 1 << bit_number;
    198c:	3906      	subs	r1, #6
    198e:	40a9      	lsls	r1, r5
    1990:	781a      	ldrb	r2, [r3, #0]
    1992:	430a      	orrs	r2, r1
    1994:	701a      	strb	r2, [r3, #0]
    1996:	e7b9      	b.n	190c <eink_hink_e0154a05_set_pixel+0x20>
    1998:	200003ac 	.word	0x200003ac
    199c:	20000424 	.word	0x20000424

000019a0 <eink_ed029tc1_set_pixel>:
{    
    19a0:	b570      	push	{r4, r5, r6, lr}
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    19a2:	4c37      	ldr	r4, [pc, #220]	; (1a80 <eink_ed029tc1_set_pixel+0xe0>)
    19a4:	8923      	ldrh	r3, [r4, #8]
    19a6:	b29b      	uxth	r3, r3
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    19a8:	88e5      	ldrh	r5, [r4, #6]
    19aa:	b2ad      	uxth	r5, r5
    if ( (x_set >= 0) && (x_set < uc8151_global_instance.display_width) && (y_set >= 0) && (y_set < uc8151_global_instance.display_height) ) {
    19ac:	88e4      	ldrh	r4, [r4, #6]
    19ae:	b2a4      	uxth	r4, r4
    19b0:	4284      	cmp	r4, r0
    19b2:	d925      	bls.n	1a00 <eink_ed029tc1_set_pixel+0x60>
    19b4:	4c32      	ldr	r4, [pc, #200]	; (1a80 <eink_ed029tc1_set_pixel+0xe0>)
    19b6:	8924      	ldrh	r4, [r4, #8]
    19b8:	b2a4      	uxth	r4, r4
    19ba:	428c      	cmp	r4, r1
    19bc:	d920      	bls.n	1a00 <eink_ed029tc1_set_pixel+0x60>
        if ( (uc8151_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8151_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    19be:	4c30      	ldr	r4, [pc, #192]	; (1a80 <eink_ed029tc1_set_pixel+0xe0>)
    19c0:	78e4      	ldrb	r4, [r4, #3]
    19c2:	2c01      	cmp	r4, #1
    19c4:	d01d      	beq.n	1a02 <eink_ed029tc1_set_pixel+0x62>
    19c6:	4c2e      	ldr	r4, [pc, #184]	; (1a80 <eink_ed029tc1_set_pixel+0xe0>)
    19c8:	78e4      	ldrb	r4, [r4, #3]
    19ca:	2c03      	cmp	r4, #3
    19cc:	d019      	beq.n	1a02 <eink_ed029tc1_set_pixel+0x62>
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19ce:	3001      	adds	r0, #1
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    19d0:	08db      	lsrs	r3, r3, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19d2:	b2db      	uxtb	r3, r3
    19d4:	4358      	muls	r0, r3
            y1_set = ((y_set - (y_set % 8)) / 8);
    19d6:	10cb      	asrs	r3, r1, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19d8:	43db      	mvns	r3, r3
    19da:	18c3      	adds	r3, r0, r3
            bit_set = (y_set % 8);
    19dc:	2007      	movs	r0, #7
    19de:	4001      	ands	r1, r0
        if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    19e0:	4827      	ldr	r0, [pc, #156]	; (1a80 <eink_ed029tc1_set_pixel+0xe0>)
    19e2:	7880      	ldrb	r0, [r0, #2]
    19e4:	2800      	cmp	r0, #0
    19e6:	d11b      	bne.n	1a20 <eink_ed029tc1_set_pixel+0x80>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);
    19e8:	4826      	ldr	r0, [pc, #152]	; (1a84 <eink_ed029tc1_set_pixel+0xe4>)
    19ea:	6800      	ldr	r0, [r0, #0]
    19ec:	6940      	ldr	r0, [r0, #20]
    19ee:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    19f0:	2a00      	cmp	r2, #0
    19f2:	d10e      	bne.n	1a12 <eink_ed029tc1_set_pixel+0x72>
        *byte &= ~(1 << bit_number);
    19f4:	2201      	movs	r2, #1
    19f6:	408a      	lsls	r2, r1
    19f8:	0011      	movs	r1, r2
    19fa:	781a      	ldrb	r2, [r3, #0]
    19fc:	438a      	bics	r2, r1
    19fe:	701a      	strb	r2, [r3, #0]
}
    1a00:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    1a02:	08ed      	lsrs	r5, r5, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - (width_bytes - 16) - x1_set);
    1a04:	b2eb      	uxtb	r3, r5
    1a06:	4359      	muls	r1, r3
            x1_set = 15 - ((x_set - (x_set % 8)) / 8);
    1a08:	10c3      	asrs	r3, r0, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - (width_bytes - 16) - x1_set);
    1a0a:	18cb      	adds	r3, r1, r3
            bit_set = 7 - (x_set % 8);
    1a0c:	2107      	movs	r1, #7
    1a0e:	4381      	bics	r1, r0
    1a10:	e7e6      	b.n	19e0 <eink_ed029tc1_set_pixel+0x40>
        *byte |= 1 << bit_number;
    1a12:	2201      	movs	r2, #1
    1a14:	408a      	lsls	r2, r1
    1a16:	0011      	movs	r1, r2
    1a18:	781a      	ldrb	r2, [r3, #0]
    1a1a:	430a      	orrs	r2, r1
    1a1c:	701a      	strb	r2, [r3, #0]
    1a1e:	e7ef      	b.n	1a00 <eink_ed029tc1_set_pixel+0x60>
            if (pixel_colour == PIXEL_BLACK) {
    1a20:	2a00      	cmp	r2, #0
    1a22:	d017      	beq.n	1a54 <eink_ed029tc1_set_pixel+0xb4>
            } else if(pixel_colour == PIXEL_WHITE) {
    1a24:	3a02      	subs	r2, #2
    1a26:	2a01      	cmp	r2, #1
    1a28:	d801      	bhi.n	1a2e <eink_ed029tc1_set_pixel+0x8e>
                pixel_set_2 = 0;    
    1a2a:	2600      	movs	r6, #0
    1a2c:	e013      	b.n	1a56 <eink_ed029tc1_set_pixel+0xb6>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1a2e:	4d15      	ldr	r5, [pc, #84]	; (1a84 <eink_ed029tc1_set_pixel+0xe4>)
    1a30:	682a      	ldr	r2, [r5, #0]
    1a32:	6912      	ldr	r2, [r2, #16]
    1a34:	18d2      	adds	r2, r2, r3
    1a36:	2401      	movs	r4, #1
    1a38:	408c      	lsls	r4, r1
    1a3a:	7810      	ldrb	r0, [r2, #0]
    1a3c:	4320      	orrs	r0, r4
    1a3e:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1a40:	682a      	ldr	r2, [r5, #0]
    1a42:	6950      	ldr	r0, [r2, #20]
    1a44:	18c3      	adds	r3, r0, r3
    1a46:	2201      	movs	r2, #1
    1a48:	408a      	lsls	r2, r1
    1a4a:	0011      	movs	r1, r2
    1a4c:	781a      	ldrb	r2, [r3, #0]
    1a4e:	430a      	orrs	r2, r1
    1a50:	701a      	strb	r2, [r3, #0]
    1a52:	e7d5      	b.n	1a00 <eink_ed029tc1_set_pixel+0x60>
                pixel_set_2 = 1;
    1a54:	2601      	movs	r6, #1
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1a56:	4d0b      	ldr	r5, [pc, #44]	; (1a84 <eink_ed029tc1_set_pixel+0xe4>)
    1a58:	682a      	ldr	r2, [r5, #0]
    1a5a:	6912      	ldr	r2, [r2, #16]
    1a5c:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1a5e:	2401      	movs	r4, #1
    1a60:	408c      	lsls	r4, r1
    1a62:	7810      	ldrb	r0, [r2, #0]
    1a64:	43a0      	bics	r0, r4
    1a66:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1a68:	682a      	ldr	r2, [r5, #0]
    1a6a:	6950      	ldr	r0, [r2, #20]
    1a6c:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    1a6e:	2e00      	cmp	r6, #0
    1a70:	d1e9      	bne.n	1a46 <eink_ed029tc1_set_pixel+0xa6>
        *byte &= ~(1 << bit_number);
    1a72:	2201      	movs	r2, #1
    1a74:	408a      	lsls	r2, r1
    1a76:	0011      	movs	r1, r2
    1a78:	781a      	ldrb	r2, [r3, #0]
    1a7a:	438a      	bics	r2, r1
    1a7c:	701a      	strb	r2, [r3, #0]
}
    1a7e:	e7bf      	b.n	1a00 <eink_ed029tc1_set_pixel+0x60>
    1a80:	200003ec 	.word	0x200003ec
    1a84:	20000424 	.word	0x20000424

00001a88 <eink_el026tr1_set_pixel>:
{    
    1a88:	b510      	push	{r4, lr}
    eink_ed029tc1_set_pixel(x_set, y_set, pixel_colour);
    1a8a:	4b01      	ldr	r3, [pc, #4]	; (1a90 <eink_el026tr1_set_pixel+0x8>)
    1a8c:	4798      	blx	r3
}
    1a8e:	bd10      	pop	{r4, pc}
    1a90:	000019a1 	.word	0x000019a1

00001a94 <eink_ed013tc1_set_pixel>:
{    
    1a94:	b510      	push	{r4, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1a96:	4c16      	ldr	r4, [pc, #88]	; (1af0 <eink_ed013tc1_set_pixel+0x5c>)
    1a98:	88a3      	ldrh	r3, [r4, #4]
    1a9a:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1a9c:	8864      	ldrh	r4, [r4, #2]
    1a9e:	b2a4      	uxth	r4, r4
    1aa0:	4284      	cmp	r4, r0
    1aa2:	d918      	bls.n	1ad6 <eink_ed013tc1_set_pixel+0x42>
    1aa4:	4c12      	ldr	r4, [pc, #72]	; (1af0 <eink_ed013tc1_set_pixel+0x5c>)
    1aa6:	88a4      	ldrh	r4, [r4, #4]
    1aa8:	b2a4      	uxth	r4, r4
    1aaa:	428c      	cmp	r4, r1
    1aac:	d913      	bls.n	1ad6 <eink_ed013tc1_set_pixel+0x42>
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1aae:	08db      	lsrs	r3, r3, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1ab0:	b2db      	uxtb	r3, r3
    1ab2:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1ab4:	10c8      	asrs	r0, r1, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1ab6:	1a1b      	subs	r3, r3, r0
    1ab8:	3b01      	subs	r3, #1
        bit_set = (y_set % 8);
    1aba:	2007      	movs	r0, #7
    1abc:	4001      	ands	r1, r0
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1abe:	2a00      	cmp	r2, #0
    1ac0:	d00a      	beq.n	1ad8 <eink_ed013tc1_set_pixel+0x44>
		else eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 1);
    1ac2:	4a0c      	ldr	r2, [pc, #48]	; (1af4 <eink_ed013tc1_set_pixel+0x60>)
    1ac4:	6812      	ldr	r2, [r2, #0]
    1ac6:	6950      	ldr	r0, [r2, #20]
    1ac8:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
    1aca:	2201      	movs	r2, #1
    1acc:	408a      	lsls	r2, r1
    1ace:	0011      	movs	r1, r2
    1ad0:	781a      	ldrb	r2, [r3, #0]
    1ad2:	430a      	orrs	r2, r1
    1ad4:	701a      	strb	r2, [r3, #0]
}
    1ad6:	bd10      	pop	{r4, pc}
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1ad8:	4a06      	ldr	r2, [pc, #24]	; (1af4 <eink_ed013tc1_set_pixel+0x60>)
    1ada:	6812      	ldr	r2, [r2, #0]
    1adc:	6950      	ldr	r0, [r2, #20]
    1ade:	18c3      	adds	r3, r0, r3
        *byte &= ~(1 << bit_number);
    1ae0:	2201      	movs	r2, #1
    1ae2:	408a      	lsls	r2, r1
    1ae4:	0011      	movs	r1, r2
    1ae6:	781a      	ldrb	r2, [r3, #0]
    1ae8:	438a      	bics	r2, r1
    1aea:	701a      	strb	r2, [r3, #0]
    1aec:	e7f3      	b.n	1ad6 <eink_ed013tc1_set_pixel+0x42>
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	20000380 	.word	0x20000380
    1af4:	20000424 	.word	0x20000424

00001af8 <eink_et011tt2_set_pixel_raw>:
{
    1af8:	b530      	push	{r4, r5, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 4;
    1afa:	4c1e      	ldr	r4, [pc, #120]	; (1b74 <eink_et011tt2_set_pixel_raw+0x7c>)
    1afc:	88a3      	ldrh	r3, [r4, #4]
    1afe:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1b00:	8864      	ldrh	r4, [r4, #2]
    1b02:	b2a4      	uxth	r4, r4
    1b04:	4284      	cmp	r4, r0
    1b06:	d904      	bls.n	1b12 <eink_et011tt2_set_pixel_raw+0x1a>
    1b08:	4c1a      	ldr	r4, [pc, #104]	; (1b74 <eink_et011tt2_set_pixel_raw+0x7c>)
    1b0a:	88a4      	ldrh	r4, [r4, #4]
    1b0c:	b2a4      	uxth	r4, r4
    1b0e:	428c      	cmp	r4, r1
    1b10:	d800      	bhi.n	1b14 <eink_et011tt2_set_pixel_raw+0x1c>
}
    1b12:	bd30      	pop	{r4, r5, pc}
    uint8_t height_bytes = uc8173_global_instance.display_height / 4;
    1b14:	089b      	lsrs	r3, r3, #2
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1b16:	b2db      	uxtb	r3, r3
    1b18:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 4)) / 4);
    1b1a:	1088      	asrs	r0, r1, #2
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1b1c:	1a1b      	subs	r3, r3, r0
    1b1e:	3b01      	subs	r3, #1
        bit_set = (y_set % 4) * 2;
    1b20:	2003      	movs	r0, #3
    1b22:	4001      	ands	r1, r0
    1b24:	0049      	lsls	r1, r1, #1
		eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, (pixel_set & 0x1));
    1b26:	4814      	ldr	r0, [pc, #80]	; (1b78 <eink_et011tt2_set_pixel_raw+0x80>)
    1b28:	6800      	ldr	r0, [r0, #0]
    1b2a:	6940      	ldr	r0, [r0, #20]
    1b2c:	18c0      	adds	r0, r0, r3
    if (bit_value == 1) {
    1b2e:	07d4      	lsls	r4, r2, #31
    1b30:	d412      	bmi.n	1b58 <eink_et011tt2_set_pixel_raw+0x60>
        *byte &= ~(1 << bit_number);
    1b32:	2501      	movs	r5, #1
    1b34:	408d      	lsls	r5, r1
    1b36:	7804      	ldrb	r4, [r0, #0]
    1b38:	43ac      	bics	r4, r5
    1b3a:	7004      	strb	r4, [r0, #0]
		eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set+1, ((pixel_set >> 1) & 0x1));
    1b3c:	480e      	ldr	r0, [pc, #56]	; (1b78 <eink_et011tt2_set_pixel_raw+0x80>)
    1b3e:	6800      	ldr	r0, [r0, #0]
    1b40:	6940      	ldr	r0, [r0, #20]
    1b42:	18c3      	adds	r3, r0, r3
    1b44:	3101      	adds	r1, #1
    if (bit_value == 1) {
    1b46:	0792      	lsls	r2, r2, #30
    1b48:	d40c      	bmi.n	1b64 <eink_et011tt2_set_pixel_raw+0x6c>
        *byte &= ~(1 << bit_number);
    1b4a:	2201      	movs	r2, #1
    1b4c:	408a      	lsls	r2, r1
    1b4e:	0011      	movs	r1, r2
    1b50:	781a      	ldrb	r2, [r3, #0]
    1b52:	438a      	bics	r2, r1
    1b54:	701a      	strb	r2, [r3, #0]
}
    1b56:	e7dc      	b.n	1b12 <eink_et011tt2_set_pixel_raw+0x1a>
        *byte |= 1 << bit_number;
    1b58:	2501      	movs	r5, #1
    1b5a:	408d      	lsls	r5, r1
    1b5c:	7804      	ldrb	r4, [r0, #0]
    1b5e:	432c      	orrs	r4, r5
    1b60:	7004      	strb	r4, [r0, #0]
    1b62:	e7eb      	b.n	1b3c <eink_et011tt2_set_pixel_raw+0x44>
    1b64:	2201      	movs	r2, #1
    1b66:	408a      	lsls	r2, r1
    1b68:	0011      	movs	r1, r2
    1b6a:	781a      	ldrb	r2, [r3, #0]
    1b6c:	430a      	orrs	r2, r1
    1b6e:	701a      	strb	r2, [r3, #0]
    1b70:	e7cf      	b.n	1b12 <eink_et011tt2_set_pixel_raw+0x1a>
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	20000380 	.word	0x20000380
    1b78:	20000424 	.word	0x20000424

00001b7c <eink_et011tt2_set_pixel>:
{    
    1b7c:	b510      	push	{r4, lr}
	switch(pixel_colour) {
    1b7e:	2a00      	cmp	r2, #0
    1b80:	d003      	beq.n	1b8a <eink_et011tt2_set_pixel+0xe>
            eink_et011tt2_set_pixel_raw(x_set, y_set, 0xF);
    1b82:	220f      	movs	r2, #15
    1b84:	4b02      	ldr	r3, [pc, #8]	; (1b90 <eink_et011tt2_set_pixel+0x14>)
    1b86:	4798      	blx	r3
}
    1b88:	bd10      	pop	{r4, pc}
            eink_et011tt2_set_pixel_raw(x_set, y_set, 0x0);
    1b8a:	4b01      	ldr	r3, [pc, #4]	; (1b90 <eink_et011tt2_set_pixel+0x14>)
    1b8c:	4798      	blx	r3
            break;
    1b8e:	e7fb      	b.n	1b88 <eink_et011tt2_set_pixel+0xc>
    1b90:	00001af9 	.word	0x00001af9

00001b94 <eink_send_raw_byte>:
{    
    1b94:	b570      	push	{r4, r5, r6, lr}
    if(!f_send)
    1b96:	2900      	cmp	r1, #0
    1b98:	d103      	bne.n	1ba2 <eink_send_raw_byte+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b9a:	2220      	movs	r2, #32
    1b9c:	23c0      	movs	r3, #192	; 0xc0
    1b9e:	05db      	lsls	r3, r3, #23
    1ba0:	615a      	str	r2, [r3, #20]
{    
    1ba2:	2308      	movs	r3, #8
    1ba4:	22c0      	movs	r2, #192	; 0xc0
    1ba6:	05d2      	lsls	r2, r2, #23
    1ba8:	2610      	movs	r6, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1baa:	2480      	movs	r4, #128	; 0x80
    1bac:	e008      	b.n	1bc0 <eink_send_raw_byte+0x2c>
    1bae:	6196      	str	r6, [r2, #24]
    1bb0:	6194      	str	r4, [r2, #24]
        send_byte=send_byte << 1;
    1bb2:	0040      	lsls	r0, r0, #1
    1bb4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bb6:	6154      	str	r4, [r2, #20]
    1bb8:	3b01      	subs	r3, #1
    1bba:	b2db      	uxtb	r3, r3
    for (i=0;i<8;i++) {
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d004      	beq.n	1bca <eink_send_raw_byte+0x36>
        if (send_byte & 0x80) {
    1bc0:	b245      	sxtb	r5, r0
    1bc2:	2d00      	cmp	r5, #0
    1bc4:	dbf3      	blt.n	1bae <eink_send_raw_byte+0x1a>
    1bc6:	6156      	str	r6, [r2, #20]
    1bc8:	e7f2      	b.n	1bb0 <eink_send_raw_byte+0x1c>
    if(!f_send)
    1bca:	2900      	cmp	r1, #0
    1bcc:	d103      	bne.n	1bd6 <eink_send_raw_byte+0x42>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bce:	2220      	movs	r2, #32
    1bd0:	23c0      	movs	r3, #192	; 0xc0
    1bd2:	05db      	lsls	r3, r3, #23
    1bd4:	619a      	str	r2, [r3, #24]
}
    1bd6:	bd70      	pop	{r4, r5, r6, pc}

00001bd8 <eink_write_data>:
{    
    1bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bda:	000c      	movs	r4, r1
    1bdc:	0015      	movs	r5, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bde:	26c0      	movs	r6, #192	; 0xc0
    1be0:	05f6      	lsls	r6, r6, #23
    1be2:	2701      	movs	r7, #1
    1be4:	2394      	movs	r3, #148	; 0x94
    1be6:	50f7      	str	r7, [r6, r3]
    1be8:	3b74      	subs	r3, #116	; 0x74
    1bea:	6173      	str	r3, [r6, #20]
    eink_send_raw_byte(command, f_send);
    1bec:	2100      	movs	r1, #0
    1bee:	4b07      	ldr	r3, [pc, #28]	; (1c0c <eink_write_data+0x34>)
    1bf0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bf2:	2398      	movs	r3, #152	; 0x98
    1bf4:	50f7      	str	r7, [r6, r3]
    if (data_bytes != 0) {
    1bf6:	2d00      	cmp	r5, #0
    1bf8:	d007      	beq.n	1c0a <eink_write_data+0x32>
    1bfa:	1965      	adds	r5, r4, r5
            eink_send_raw_byte(*data, f_send);
    1bfc:	4e03      	ldr	r6, [pc, #12]	; (1c0c <eink_write_data+0x34>)
    1bfe:	7820      	ldrb	r0, [r4, #0]
    1c00:	2100      	movs	r1, #0
    1c02:	47b0      	blx	r6
            data++;
    1c04:	3401      	adds	r4, #1
        for (i=0;i<data_bytes;i++) {
    1c06:	42a5      	cmp	r5, r4
    1c08:	d1f9      	bne.n	1bfe <eink_write_data+0x26>
}
    1c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c0c:	00001b95 	.word	0x00001b95

00001c10 <eink_et011tt2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_et011tt2_refresh_display_buffer(void)
{
    1c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c12:	b085      	sub	sp, #20
    uint8_t eink_data[7];
    
    /* Enable power to the display */   
    eink_write_data(UC8173_PON, 0, 0);
    1c14:	2200      	movs	r2, #0
    1c16:	2100      	movs	r1, #0
    1c18:	2004      	movs	r0, #4
    1c1a:	4b23      	ldr	r3, [pc, #140]	; (1ca8 <eink_et011tt2_refresh_display_buffer+0x98>)
    1c1c:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1c1e:	4f23      	ldr	r7, [pc, #140]	; (1cac <eink_et011tt2_refresh_display_buffer+0x9c>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    1c20:	4e23      	ldr	r6, [pc, #140]	; (1cb0 <eink_et011tt2_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    1c22:	4668      	mov	r0, sp
    1c24:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c26:	23c0      	movs	r3, #192	; 0xc0
    1c28:	05db      	lsls	r3, r3, #23
    1c2a:	2580      	movs	r5, #128	; 0x80
    1c2c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c2e:	22a0      	movs	r2, #160	; 0xa0
    1c30:	4920      	ldr	r1, [pc, #128]	; (1cb4 <eink_et011tt2_refresh_display_buffer+0xa4>)
    1c32:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c34:	2190      	movs	r1, #144	; 0x90
    1c36:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c38:	4053      	eors	r3, r2
    1c3a:	401c      	ands	r4, r3
    1c3c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c3e:	4668      	mov	r0, sp
    1c40:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8173_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1c42:	4225      	tst	r5, r4
    1c44:	d0ed      	beq.n	1c22 <eink_et011tt2_refresh_display_buffer+0x12>
}

static inline void uc8173_send_a2_lut(void)
{
	/* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
	eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_VCOM_A2, 32);
    1c46:	2220      	movs	r2, #32
    1c48:	2100      	movs	r1, #0
    1c4a:	2020      	movs	r0, #32
    1c4c:	4c16      	ldr	r4, [pc, #88]	; (1ca8 <eink_et011tt2_refresh_display_buffer+0x98>)
    1c4e:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ET011TT2_WF_A2, 512);
    1c50:	2280      	movs	r2, #128	; 0x80
    1c52:	0092      	lsls	r2, r2, #2
    1c54:	21a9      	movs	r1, #169	; 0xa9
    1c56:	2022      	movs	r0, #34	; 0x22
    1c58:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ET011TT2_FT_A2, 128);
    1c5a:	2280      	movs	r2, #128	; 0x80
    1c5c:	2100      	movs	r1, #0
    1c5e:	2026      	movs	r0, #38	; 0x26
    1c60:	47a0      	blx	r4
    uc8173_wait_for_busy_low();
    
    uc8173_send_a2_lut();
	
    /* Display Refresh */
    eink_data[0] = 0x00; /* GU2 Update Mode */
    1c62:	a902      	add	r1, sp, #8
    1c64:	2300      	movs	r3, #0
    1c66:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1c68:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1c6a:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1c6c:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0xEF; /* W = 249 */
    1c6e:	22ef      	movs	r2, #239	; 0xef
    1c70:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1c72:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xEF; /* H = 249 */
    1c74:	718a      	strb	r2, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1c76:	3ae8      	subs	r2, #232	; 0xe8
    1c78:	2012      	movs	r0, #18
    1c7a:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1c7c:	4f0b      	ldr	r7, [pc, #44]	; (1cac <eink_et011tt2_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    1c7e:	4e0c      	ldr	r6, [pc, #48]	; (1cb0 <eink_et011tt2_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    1c80:	a801      	add	r0, sp, #4
    1c82:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c84:	23c0      	movs	r3, #192	; 0xc0
    1c86:	05db      	lsls	r3, r3, #23
    1c88:	2580      	movs	r5, #128	; 0x80
    1c8a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c8c:	22a0      	movs	r2, #160	; 0xa0
    1c8e:	4909      	ldr	r1, [pc, #36]	; (1cb4 <eink_et011tt2_refresh_display_buffer+0xa4>)
    1c90:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c92:	2190      	movs	r1, #144	; 0x90
    1c94:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c96:	4053      	eors	r3, r2
    1c98:	401c      	ands	r4, r3
    1c9a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c9c:	a801      	add	r0, sp, #4
    1c9e:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1ca0:	4225      	tst	r5, r4
    1ca2:	d0ed      	beq.n	1c80 <eink_et011tt2_refresh_display_buffer+0x70>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    //eink_write_data(UC8173_POF, 0, 0);
    //uc8173_wait_for_busy_low();
}
    1ca4:	b005      	add	sp, #20
    1ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ca8:	00001bd9 	.word	0x00001bd9
    1cac:	0000034d 	.word	0x0000034d
    1cb0:	0000035b 	.word	0x0000035b
    1cb4:	41004400 	.word	0x41004400

00001cb8 <eink_ed013tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed013tc1_refresh_display_buffer(void)
{
    1cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cba:	b087      	sub	sp, #28
    uint8_t eink_data[7];
    
    /* Enable power to the display */   
    eink_write_data(UC8173_PON, 0, 0);
    1cbc:	2200      	movs	r2, #0
    1cbe:	2100      	movs	r1, #0
    1cc0:	2004      	movs	r0, #4
    1cc2:	4b31      	ldr	r3, [pc, #196]	; (1d88 <eink_ed013tc1_refresh_display_buffer+0xd0>)
    1cc4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1cc6:	4f31      	ldr	r7, [pc, #196]	; (1d8c <eink_ed013tc1_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    1cc8:	4e31      	ldr	r6, [pc, #196]	; (1d90 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    1cca:	a801      	add	r0, sp, #4
    1ccc:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1cce:	23c0      	movs	r3, #192	; 0xc0
    1cd0:	05db      	lsls	r3, r3, #23
    1cd2:	2580      	movs	r5, #128	; 0x80
    1cd4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1cd6:	22a0      	movs	r2, #160	; 0xa0
    1cd8:	492e      	ldr	r1, [pc, #184]	; (1d94 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    1cda:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1cdc:	2190      	movs	r1, #144	; 0x90
    1cde:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ce0:	4053      	eors	r3, r2
    1ce2:	401c      	ands	r4, r3
    1ce4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ce6:	a801      	add	r0, sp, #4
    1ce8:	47b0      	blx	r6
    1cea:	4225      	tst	r5, r4
    1cec:	d0ed      	beq.n	1cca <eink_ed013tc1_refresh_display_buffer+0x12>
	eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    1cee:	2220      	movs	r2, #32
    1cf0:	2155      	movs	r1, #85	; 0x55
    1cf2:	2020      	movs	r0, #32
    1cf4:	4c24      	ldr	r4, [pc, #144]	; (1d88 <eink_ed013tc1_refresh_display_buffer+0xd0>)
    1cf6:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    1cf8:	2280      	movs	r2, #128	; 0x80
    1cfa:	0092      	lsls	r2, r2, #2
    1cfc:	2181      	movs	r1, #129	; 0x81
    1cfe:	2022      	movs	r0, #34	; 0x22
    1d00:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);
    1d02:	2280      	movs	r2, #128	; 0x80
    1d04:	2100      	movs	r1, #0
    1d06:	2026      	movs	r0, #38	; 0x26
    1d08:	47a0      	blx	r4
    uc8173_wait_for_busy_low();
    
    uc8173_send_gu2_lut();
	
    /* Display Refresh */
    eink_data[0] = 0x01; /* GU2 Update Mode */
    1d0a:	a904      	add	r1, sp, #16
    1d0c:	2301      	movs	r3, #1
    1d0e:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1d10:	2300      	movs	r3, #0
    1d12:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1d14:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1d16:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    1d18:	227f      	movs	r2, #127	; 0x7f
    1d1a:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1d1c:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    1d1e:	33ff      	adds	r3, #255	; 0xff
    1d20:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1d22:	3a78      	subs	r2, #120	; 0x78
    1d24:	2012      	movs	r0, #18
    1d26:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1d28:	4f18      	ldr	r7, [pc, #96]	; (1d8c <eink_ed013tc1_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    1d2a:	4e19      	ldr	r6, [pc, #100]	; (1d90 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    1d2c:	a802      	add	r0, sp, #8
    1d2e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d30:	23c0      	movs	r3, #192	; 0xc0
    1d32:	05db      	lsls	r3, r3, #23
    1d34:	2580      	movs	r5, #128	; 0x80
    1d36:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d38:	22a0      	movs	r2, #160	; 0xa0
    1d3a:	4916      	ldr	r1, [pc, #88]	; (1d94 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    1d3c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d3e:	2190      	movs	r1, #144	; 0x90
    1d40:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d42:	4053      	eors	r3, r2
    1d44:	401c      	ands	r4, r3
    1d46:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d48:	a802      	add	r0, sp, #8
    1d4a:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1d4c:	4225      	tst	r5, r4
    1d4e:	d0ed      	beq.n	1d2c <eink_ed013tc1_refresh_display_buffer+0x74>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    eink_write_data(UC8173_POF, 0, 0);
    1d50:	2200      	movs	r2, #0
    1d52:	2100      	movs	r1, #0
    1d54:	2002      	movs	r0, #2
    1d56:	4b0c      	ldr	r3, [pc, #48]	; (1d88 <eink_ed013tc1_refresh_display_buffer+0xd0>)
    1d58:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1d5a:	4f0c      	ldr	r7, [pc, #48]	; (1d8c <eink_ed013tc1_refresh_display_buffer+0xd4>)
	CRITICAL_SECTION_LEAVE();
    1d5c:	4e0c      	ldr	r6, [pc, #48]	; (1d90 <eink_ed013tc1_refresh_display_buffer+0xd8>)
	CRITICAL_SECTION_ENTER();
    1d5e:	a803      	add	r0, sp, #12
    1d60:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d62:	23c0      	movs	r3, #192	; 0xc0
    1d64:	05db      	lsls	r3, r3, #23
    1d66:	2580      	movs	r5, #128	; 0x80
    1d68:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d6a:	22a0      	movs	r2, #160	; 0xa0
    1d6c:	4909      	ldr	r1, [pc, #36]	; (1d94 <eink_ed013tc1_refresh_display_buffer+0xdc>)
    1d6e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d70:	2190      	movs	r1, #144	; 0x90
    1d72:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d74:	4053      	eors	r3, r2
    1d76:	401c      	ands	r4, r3
    1d78:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d7a:	a803      	add	r0, sp, #12
    1d7c:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    1d7e:	4225      	tst	r5, r4
    1d80:	d1ed      	bne.n	1d5e <eink_ed013tc1_refresh_display_buffer+0xa6>
    uc8173_wait_for_busy_high();
}
    1d82:	b007      	add	sp, #28
    1d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d86:	46c0      	nop			; (mov r8, r8)
    1d88:	00001bd9 	.word	0x00001bd9
    1d8c:	0000034d 	.word	0x0000034d
    1d90:	0000035b 	.word	0x0000035b
    1d94:	41004400 	.word	0x41004400

00001d98 <eink_ed029tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed029tc1_refresh_display_buffer(void)
{
    1d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9a:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1d9c:	2200      	movs	r2, #0
    1d9e:	2100      	movs	r1, #0
    1da0:	2004      	movs	r0, #4
    1da2:	4c1a      	ldr	r4, [pc, #104]	; (1e0c <eink_ed029tc1_refresh_display_buffer+0x74>)
    1da4:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    1da6:	2200      	movs	r2, #0
    1da8:	2100      	movs	r1, #0
    1daa:	2012      	movs	r0, #18
    1dac:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1dae:	4f18      	ldr	r7, [pc, #96]	; (1e10 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1db0:	4e18      	ldr	r6, [pc, #96]	; (1e14 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1db2:	4668      	mov	r0, sp
    1db4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1db6:	23c0      	movs	r3, #192	; 0xc0
    1db8:	05db      	lsls	r3, r3, #23
    1dba:	2580      	movs	r5, #128	; 0x80
    1dbc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1dbe:	22a0      	movs	r2, #160	; 0xa0
    1dc0:	4915      	ldr	r1, [pc, #84]	; (1e18 <eink_ed029tc1_refresh_display_buffer+0x80>)
    1dc2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1dc4:	2190      	movs	r1, #144	; 0x90
    1dc6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1dc8:	4053      	eors	r3, r2
    1dca:	401c      	ands	r4, r3
    1dcc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1dce:	4668      	mov	r0, sp
    1dd0:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8151_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1dd2:	4225      	tst	r5, r4
    1dd4:	d0ed      	beq.n	1db2 <eink_ed029tc1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    1dd6:	2200      	movs	r2, #0
    1dd8:	2100      	movs	r1, #0
    1dda:	2002      	movs	r0, #2
    1ddc:	4b0b      	ldr	r3, [pc, #44]	; (1e0c <eink_ed029tc1_refresh_display_buffer+0x74>)
    1dde:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1de0:	4f0b      	ldr	r7, [pc, #44]	; (1e10 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1de2:	4e0c      	ldr	r6, [pc, #48]	; (1e14 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1de4:	a801      	add	r0, sp, #4
    1de6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1de8:	23c0      	movs	r3, #192	; 0xc0
    1dea:	05db      	lsls	r3, r3, #23
    1dec:	2580      	movs	r5, #128	; 0x80
    1dee:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1df0:	22a0      	movs	r2, #160	; 0xa0
    1df2:	4909      	ldr	r1, [pc, #36]	; (1e18 <eink_ed029tc1_refresh_display_buffer+0x80>)
    1df4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1df6:	2190      	movs	r1, #144	; 0x90
    1df8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1dfa:	4053      	eors	r3, r2
    1dfc:	401c      	ands	r4, r3
    1dfe:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e00:	a801      	add	r0, sp, #4
    1e02:	47b0      	blx	r6
    1e04:	4225      	tst	r5, r4
    1e06:	d0ed      	beq.n	1de4 <eink_ed029tc1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    1e08:	b003      	add	sp, #12
    1e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e0c:	00001bd9 	.word	0x00001bd9
    1e10:	0000034d 	.word	0x0000034d
    1e14:	0000035b 	.word	0x0000035b
    1e18:	41004400 	.word	0x41004400

00001e1c <eink_ed029tc1_put_display_buffer>:
{
    1e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e1e:	46c6      	mov	lr, r8
    1e20:	b500      	push	{lr}
    1e22:	b084      	sub	sp, #16
    1e24:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    1e26:	2200      	movs	r2, #0
    1e28:	2100      	movs	r1, #0
    1e2a:	2004      	movs	r0, #4
    1e2c:	4c44      	ldr	r4, [pc, #272]	; (1f40 <eink_ed029tc1_put_display_buffer+0x124>)
    1e2e:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1e30:	4b44      	ldr	r3, [pc, #272]	; (1f44 <eink_ed029tc1_put_display_buffer+0x128>)
    1e32:	681b      	ldr	r3, [r3, #0]
    1e34:	6919      	ldr	r1, [r3, #16]
    1e36:	2294      	movs	r2, #148	; 0x94
    1e38:	0152      	lsls	r2, r2, #5
    1e3a:	2010      	movs	r0, #16
    1e3c:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1e3e:	2200      	movs	r2, #0
    1e40:	2100      	movs	r1, #0
    1e42:	2011      	movs	r0, #17
    1e44:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1e46:	4d40      	ldr	r5, [pc, #256]	; (1f48 <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1e48:	4f40      	ldr	r7, [pc, #256]	; (1f4c <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1e4a:	4668      	mov	r0, sp
    1e4c:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e4e:	23c0      	movs	r3, #192	; 0xc0
    1e50:	05db      	lsls	r3, r3, #23
    1e52:	2680      	movs	r6, #128	; 0x80
    1e54:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e56:	22a0      	movs	r2, #160	; 0xa0
    1e58:	493d      	ldr	r1, [pc, #244]	; (1f50 <eink_ed029tc1_put_display_buffer+0x134>)
    1e5a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e5c:	2190      	movs	r1, #144	; 0x90
    1e5e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e60:	4053      	eors	r3, r2
    1e62:	401c      	ands	r4, r3
    1e64:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e66:	4668      	mov	r0, sp
    1e68:	47b8      	blx	r7
    1e6a:	4226      	tst	r6, r4
    1e6c:	d0ed      	beq.n	1e4a <eink_ed029tc1_put_display_buffer+0x2e>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1e6e:	4b35      	ldr	r3, [pc, #212]	; (1f44 <eink_ed029tc1_put_display_buffer+0x128>)
    1e70:	681b      	ldr	r3, [r3, #0]
    1e72:	6959      	ldr	r1, [r3, #20]
    1e74:	2294      	movs	r2, #148	; 0x94
    1e76:	0152      	lsls	r2, r2, #5
    1e78:	2013      	movs	r0, #19
    1e7a:	4c31      	ldr	r4, [pc, #196]	; (1f40 <eink_ed029tc1_put_display_buffer+0x124>)
    1e7c:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1e7e:	2200      	movs	r2, #0
    1e80:	2100      	movs	r1, #0
    1e82:	2011      	movs	r0, #17
    1e84:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1e86:	4d30      	ldr	r5, [pc, #192]	; (1f48 <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1e88:	4f30      	ldr	r7, [pc, #192]	; (1f4c <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1e8a:	a801      	add	r0, sp, #4
    1e8c:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e8e:	23c0      	movs	r3, #192	; 0xc0
    1e90:	05db      	lsls	r3, r3, #23
    1e92:	2680      	movs	r6, #128	; 0x80
    1e94:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e96:	22a0      	movs	r2, #160	; 0xa0
    1e98:	492d      	ldr	r1, [pc, #180]	; (1f50 <eink_ed029tc1_put_display_buffer+0x134>)
    1e9a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e9c:	2190      	movs	r1, #144	; 0x90
    1e9e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ea0:	4053      	eors	r3, r2
    1ea2:	401c      	ands	r4, r3
    1ea4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ea6:	a801      	add	r0, sp, #4
    1ea8:	47b8      	blx	r7
    1eaa:	4226      	tst	r6, r4
    1eac:	d0ed      	beq.n	1e8a <eink_ed029tc1_put_display_buffer+0x6e>
    if(refresh_display) {
    1eae:	4643      	mov	r3, r8
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d12b      	bne.n	1f0c <eink_ed029tc1_put_display_buffer+0xf0>
    eink_write_data(UC8151_POF, 0, 0);
    1eb4:	2200      	movs	r2, #0
    1eb6:	2100      	movs	r1, #0
    1eb8:	2002      	movs	r0, #2
    1eba:	4b21      	ldr	r3, [pc, #132]	; (1f40 <eink_ed029tc1_put_display_buffer+0x124>)
    1ebc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1ebe:	4f22      	ldr	r7, [pc, #136]	; (1f48 <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1ec0:	4e22      	ldr	r6, [pc, #136]	; (1f4c <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1ec2:	a803      	add	r0, sp, #12
    1ec4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1ec6:	23c0      	movs	r3, #192	; 0xc0
    1ec8:	05db      	lsls	r3, r3, #23
    1eca:	2580      	movs	r5, #128	; 0x80
    1ecc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1ece:	22a0      	movs	r2, #160	; 0xa0
    1ed0:	491f      	ldr	r1, [pc, #124]	; (1f50 <eink_ed029tc1_put_display_buffer+0x134>)
    1ed2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ed4:	2190      	movs	r1, #144	; 0x90
    1ed6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ed8:	4053      	eors	r3, r2
    1eda:	401c      	ands	r4, r3
    1edc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ede:	a803      	add	r0, sp, #12
    1ee0:	47b0      	blx	r6
    1ee2:	4225      	tst	r5, r4
    1ee4:	d0ed      	beq.n	1ec2 <eink_ed029tc1_put_display_buffer+0xa6>
    if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    1ee6:	4b1b      	ldr	r3, [pc, #108]	; (1f54 <eink_ed029tc1_put_display_buffer+0x138>)
    1ee8:	789b      	ldrb	r3, [r3, #2]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d10a      	bne.n	1f04 <eink_ed029tc1_put_display_buffer+0xe8>
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1eee:	4c15      	ldr	r4, [pc, #84]	; (1f44 <eink_ed029tc1_put_display_buffer+0x128>)
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1ef0:	2094      	movs	r0, #148	; 0x94
    1ef2:	0140      	lsls	r0, r0, #5
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1ef4:	6822      	ldr	r2, [r4, #0]
    1ef6:	6951      	ldr	r1, [r2, #20]
    1ef8:	5cc9      	ldrb	r1, [r1, r3]
    1efa:	6912      	ldr	r2, [r2, #16]
    1efc:	54d1      	strb	r1, [r2, r3]
    1efe:	3301      	adds	r3, #1
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1f00:	4283      	cmp	r3, r0
    1f02:	d1f7      	bne.n	1ef4 <eink_ed029tc1_put_display_buffer+0xd8>
}
    1f04:	b004      	add	sp, #16
    1f06:	bc04      	pop	{r2}
    1f08:	4690      	mov	r8, r2
    1f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    1f0c:	2200      	movs	r2, #0
    1f0e:	2100      	movs	r1, #0
    1f10:	2012      	movs	r0, #18
    1f12:	4b0b      	ldr	r3, [pc, #44]	; (1f40 <eink_ed029tc1_put_display_buffer+0x124>)
    1f14:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1f16:	4f0c      	ldr	r7, [pc, #48]	; (1f48 <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1f18:	4e0c      	ldr	r6, [pc, #48]	; (1f4c <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1f1a:	a802      	add	r0, sp, #8
    1f1c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f1e:	23c0      	movs	r3, #192	; 0xc0
    1f20:	05db      	lsls	r3, r3, #23
    1f22:	2580      	movs	r5, #128	; 0x80
    1f24:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f26:	22a0      	movs	r2, #160	; 0xa0
    1f28:	4909      	ldr	r1, [pc, #36]	; (1f50 <eink_ed029tc1_put_display_buffer+0x134>)
    1f2a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f2c:	2190      	movs	r1, #144	; 0x90
    1f2e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f30:	4053      	eors	r3, r2
    1f32:	401c      	ands	r4, r3
    1f34:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f36:	a802      	add	r0, sp, #8
    1f38:	47b0      	blx	r6
    1f3a:	4225      	tst	r5, r4
    1f3c:	d0ed      	beq.n	1f1a <eink_ed029tc1_put_display_buffer+0xfe>
    1f3e:	e7b9      	b.n	1eb4 <eink_ed029tc1_put_display_buffer+0x98>
    1f40:	00001bd9 	.word	0x00001bd9
    1f44:	20000424 	.word	0x20000424
    1f48:	0000034d 	.word	0x0000034d
    1f4c:	0000035b 	.word	0x0000035b
    1f50:	41004400 	.word	0x41004400
    1f54:	200003ec 	.word	0x200003ec

00001f58 <eink_el026tr1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_el026tr1_refresh_display_buffer(void)
{
    1f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5a:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1f5c:	2200      	movs	r2, #0
    1f5e:	2100      	movs	r1, #0
    1f60:	2004      	movs	r0, #4
    1f62:	4c1a      	ldr	r4, [pc, #104]	; (1fcc <eink_el026tr1_refresh_display_buffer+0x74>)
    1f64:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    1f66:	2200      	movs	r2, #0
    1f68:	2100      	movs	r1, #0
    1f6a:	2012      	movs	r0, #18
    1f6c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1f6e:	4f18      	ldr	r7, [pc, #96]	; (1fd0 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1f70:	4e18      	ldr	r6, [pc, #96]	; (1fd4 <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1f72:	4668      	mov	r0, sp
    1f74:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f76:	23c0      	movs	r3, #192	; 0xc0
    1f78:	05db      	lsls	r3, r3, #23
    1f7a:	2580      	movs	r5, #128	; 0x80
    1f7c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f7e:	22a0      	movs	r2, #160	; 0xa0
    1f80:	4915      	ldr	r1, [pc, #84]	; (1fd8 <eink_el026tr1_refresh_display_buffer+0x80>)
    1f82:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f84:	2190      	movs	r1, #144	; 0x90
    1f86:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f88:	4053      	eors	r3, r2
    1f8a:	401c      	ands	r4, r3
    1f8c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f8e:	4668      	mov	r0, sp
    1f90:	47b0      	blx	r6
    1f92:	4225      	tst	r5, r4
    1f94:	d0ed      	beq.n	1f72 <eink_el026tr1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    1f96:	2200      	movs	r2, #0
    1f98:	2100      	movs	r1, #0
    1f9a:	2002      	movs	r0, #2
    1f9c:	4b0b      	ldr	r3, [pc, #44]	; (1fcc <eink_el026tr1_refresh_display_buffer+0x74>)
    1f9e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1fa0:	4f0b      	ldr	r7, [pc, #44]	; (1fd0 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1fa2:	4e0c      	ldr	r6, [pc, #48]	; (1fd4 <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1fa4:	a801      	add	r0, sp, #4
    1fa6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1fa8:	23c0      	movs	r3, #192	; 0xc0
    1faa:	05db      	lsls	r3, r3, #23
    1fac:	2580      	movs	r5, #128	; 0x80
    1fae:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fb0:	22a0      	movs	r2, #160	; 0xa0
    1fb2:	4909      	ldr	r1, [pc, #36]	; (1fd8 <eink_el026tr1_refresh_display_buffer+0x80>)
    1fb4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fb6:	2190      	movs	r1, #144	; 0x90
    1fb8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fba:	4053      	eors	r3, r2
    1fbc:	401c      	ands	r4, r3
    1fbe:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1fc0:	a801      	add	r0, sp, #4
    1fc2:	47b0      	blx	r6
    1fc4:	4225      	tst	r5, r4
    1fc6:	d0ed      	beq.n	1fa4 <eink_el026tr1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    1fc8:	b003      	add	sp, #12
    1fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fcc:	00001bd9 	.word	0x00001bd9
    1fd0:	0000034d 	.word	0x0000034d
    1fd4:	0000035b 	.word	0x0000035b
    1fd8:	41004400 	.word	0x41004400

00001fdc <eink_el026tr1_put_display_buffer>:
{
    1fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fde:	46c6      	mov	lr, r8
    1fe0:	b500      	push	{lr}
    1fe2:	b084      	sub	sp, #16
    1fe4:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    1fe6:	2200      	movs	r2, #0
    1fe8:	2100      	movs	r1, #0
    1fea:	2004      	movs	r0, #4
    1fec:	4c3c      	ldr	r4, [pc, #240]	; (20e0 <STACK_SIZE+0xe0>)
    1fee:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    1ff0:	4b3c      	ldr	r3, [pc, #240]	; (20e4 <STACK_SIZE+0xe4>)
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	6919      	ldr	r1, [r3, #16]
    1ff6:	4a3c      	ldr	r2, [pc, #240]	; (20e8 <STACK_SIZE+0xe8>)
    1ff8:	2010      	movs	r0, #16
    1ffa:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1ffc:	2200      	movs	r2, #0
    1ffe:	2100      	movs	r1, #0
    2000:	2011      	movs	r0, #17
    2002:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2004:	4d39      	ldr	r5, [pc, #228]	; (20ec <STACK_SIZE+0xec>)
	CRITICAL_SECTION_LEAVE();
    2006:	4f3a      	ldr	r7, [pc, #232]	; (20f0 <STACK_SIZE+0xf0>)
	CRITICAL_SECTION_ENTER();
    2008:	4668      	mov	r0, sp
    200a:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    200c:	23c0      	movs	r3, #192	; 0xc0
    200e:	05db      	lsls	r3, r3, #23
    2010:	2680      	movs	r6, #128	; 0x80
    2012:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2014:	22a0      	movs	r2, #160	; 0xa0
    2016:	4937      	ldr	r1, [pc, #220]	; (20f4 <STACK_SIZE+0xf4>)
    2018:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    201a:	2190      	movs	r1, #144	; 0x90
    201c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    201e:	4053      	eors	r3, r2
    2020:	401c      	ands	r4, r3
    2022:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2024:	4668      	mov	r0, sp
    2026:	47b8      	blx	r7
    2028:	4226      	tst	r6, r4
    202a:	d0ed      	beq.n	2008 <STACK_SIZE+0x8>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    202c:	4b2d      	ldr	r3, [pc, #180]	; (20e4 <STACK_SIZE+0xe4>)
    202e:	681b      	ldr	r3, [r3, #0]
    2030:	6959      	ldr	r1, [r3, #20]
    2032:	4a2d      	ldr	r2, [pc, #180]	; (20e8 <STACK_SIZE+0xe8>)
    2034:	2013      	movs	r0, #19
    2036:	4c2a      	ldr	r4, [pc, #168]	; (20e0 <STACK_SIZE+0xe0>)
    2038:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    203a:	2200      	movs	r2, #0
    203c:	2100      	movs	r1, #0
    203e:	2011      	movs	r0, #17
    2040:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2042:	4d2a      	ldr	r5, [pc, #168]	; (20ec <STACK_SIZE+0xec>)
	CRITICAL_SECTION_LEAVE();
    2044:	4f2a      	ldr	r7, [pc, #168]	; (20f0 <STACK_SIZE+0xf0>)
	CRITICAL_SECTION_ENTER();
    2046:	a801      	add	r0, sp, #4
    2048:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    204a:	23c0      	movs	r3, #192	; 0xc0
    204c:	05db      	lsls	r3, r3, #23
    204e:	2680      	movs	r6, #128	; 0x80
    2050:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2052:	22a0      	movs	r2, #160	; 0xa0
    2054:	4927      	ldr	r1, [pc, #156]	; (20f4 <STACK_SIZE+0xf4>)
    2056:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2058:	2190      	movs	r1, #144	; 0x90
    205a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    205c:	4053      	eors	r3, r2
    205e:	401c      	ands	r4, r3
    2060:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2062:	a801      	add	r0, sp, #4
    2064:	47b8      	blx	r7
    2066:	4226      	tst	r6, r4
    2068:	d0ed      	beq.n	2046 <STACK_SIZE+0x46>
    if(refresh_display) {
    206a:	4643      	mov	r3, r8
    206c:	2b00      	cmp	r3, #0
    206e:	d11c      	bne.n	20aa <STACK_SIZE+0xaa>
    eink_write_data(UC8151_POF, 0, 0);
    2070:	2200      	movs	r2, #0
    2072:	2100      	movs	r1, #0
    2074:	2002      	movs	r0, #2
    2076:	4b1a      	ldr	r3, [pc, #104]	; (20e0 <STACK_SIZE+0xe0>)
    2078:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    207a:	4f1c      	ldr	r7, [pc, #112]	; (20ec <STACK_SIZE+0xec>)
	CRITICAL_SECTION_LEAVE();
    207c:	4e1c      	ldr	r6, [pc, #112]	; (20f0 <STACK_SIZE+0xf0>)
	CRITICAL_SECTION_ENTER();
    207e:	a803      	add	r0, sp, #12
    2080:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2082:	23c0      	movs	r3, #192	; 0xc0
    2084:	05db      	lsls	r3, r3, #23
    2086:	2580      	movs	r5, #128	; 0x80
    2088:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    208a:	22a0      	movs	r2, #160	; 0xa0
    208c:	4919      	ldr	r1, [pc, #100]	; (20f4 <STACK_SIZE+0xf4>)
    208e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2090:	2190      	movs	r1, #144	; 0x90
    2092:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2094:	4053      	eors	r3, r2
    2096:	401c      	ands	r4, r3
    2098:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    209a:	a803      	add	r0, sp, #12
    209c:	47b0      	blx	r6
    209e:	4225      	tst	r5, r4
    20a0:	d0ed      	beq.n	207e <STACK_SIZE+0x7e>
}
    20a2:	b004      	add	sp, #16
    20a4:	bc04      	pop	{r2}
    20a6:	4690      	mov	r8, r2
    20a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    20aa:	2200      	movs	r2, #0
    20ac:	2100      	movs	r1, #0
    20ae:	2012      	movs	r0, #18
    20b0:	4b0b      	ldr	r3, [pc, #44]	; (20e0 <STACK_SIZE+0xe0>)
    20b2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    20b4:	4f0d      	ldr	r7, [pc, #52]	; (20ec <STACK_SIZE+0xec>)
	CRITICAL_SECTION_LEAVE();
    20b6:	4e0e      	ldr	r6, [pc, #56]	; (20f0 <STACK_SIZE+0xf0>)
	CRITICAL_SECTION_ENTER();
    20b8:	a802      	add	r0, sp, #8
    20ba:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20bc:	23c0      	movs	r3, #192	; 0xc0
    20be:	05db      	lsls	r3, r3, #23
    20c0:	2580      	movs	r5, #128	; 0x80
    20c2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20c4:	22a0      	movs	r2, #160	; 0xa0
    20c6:	490b      	ldr	r1, [pc, #44]	; (20f4 <STACK_SIZE+0xf4>)
    20c8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20ca:	2190      	movs	r1, #144	; 0x90
    20cc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    20ce:	4053      	eors	r3, r2
    20d0:	401c      	ands	r4, r3
    20d2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    20d4:	a802      	add	r0, sp, #8
    20d6:	47b0      	blx	r6
    20d8:	4225      	tst	r5, r4
    20da:	d0ed      	beq.n	20b8 <STACK_SIZE+0xb8>
    20dc:	e7c8      	b.n	2070 <STACK_SIZE+0x70>
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	00001bd9 	.word	0x00001bd9
    20e4:	20000424 	.word	0x20000424
    20e8:	000015f8 	.word	0x000015f8
    20ec:	0000034d 	.word	0x0000034d
    20f0:	0000035b 	.word	0x0000035b
    20f4:	41004400 	.word	0x41004400

000020f8 <eink_hink_e0154a05_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_hink_e0154a05_refresh_display_buffer(void)
{
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fa:	b085      	sub	sp, #20
    uint8_t eink_data[1];
    uint8_t temperature_value = 20;
    
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    20fc:	4b23      	ldr	r3, [pc, #140]	; (218c <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    20fe:	785b      	ldrb	r3, [r3, #1]
    2100:	2b01      	cmp	r3, #1
    2102:	d036      	beq.n	2172 <eink_hink_e0154a05_refresh_display_buffer+0x7a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
        else
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
        
    } else {
        eink_data[0] = 0xF7; /* Slow Update */
    2104:	22f7      	movs	r2, #247	; 0xf7
    2106:	ab03      	add	r3, sp, #12
    2108:	701a      	strb	r2, [r3, #0]
    }

    /* Display Update Control 2 */
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    210a:	2201      	movs	r2, #1
    210c:	a903      	add	r1, sp, #12
    210e:	2022      	movs	r0, #34	; 0x22
    2110:	4b1f      	ldr	r3, [pc, #124]	; (2190 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    2112:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2114:	4f1f      	ldr	r7, [pc, #124]	; (2194 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    2116:	4e20      	ldr	r6, [pc, #128]	; (2198 <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    2118:	a801      	add	r0, sp, #4
    211a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    211c:	23c0      	movs	r3, #192	; 0xc0
    211e:	05db      	lsls	r3, r3, #23
    2120:	2580      	movs	r5, #128	; 0x80
    2122:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2124:	22a0      	movs	r2, #160	; 0xa0
    2126:	491d      	ldr	r1, [pc, #116]	; (219c <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    2128:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    212a:	2190      	movs	r1, #144	; 0x90
    212c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    212e:	4053      	eors	r3, r2
    2130:	401c      	ands	r4, r3
    2132:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2134:	a801      	add	r0, sp, #4
    2136:	47b0      	blx	r6
 * hold the MCU until it returns LOW again.
 */
static inline void ssd1608_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(gpio_get_pin_level(EINK_BUSY));
    2138:	4225      	tst	r5, r4
    213a:	d1ed      	bne.n	2118 <eink_hink_e0154a05_refresh_display_buffer+0x20>
    ssd1608_wait_for_busy();
    
    /* Master Activation */
    eink_write_data(SSD1608_MA, 0, 0);
    213c:	2200      	movs	r2, #0
    213e:	2100      	movs	r1, #0
    2140:	2020      	movs	r0, #32
    2142:	4b13      	ldr	r3, [pc, #76]	; (2190 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    2144:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2146:	4f13      	ldr	r7, [pc, #76]	; (2194 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    2148:	4e13      	ldr	r6, [pc, #76]	; (2198 <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    214a:	a802      	add	r0, sp, #8
    214c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    214e:	23c0      	movs	r3, #192	; 0xc0
    2150:	05db      	lsls	r3, r3, #23
    2152:	2580      	movs	r5, #128	; 0x80
    2154:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2156:	22a0      	movs	r2, #160	; 0xa0
    2158:	4910      	ldr	r1, [pc, #64]	; (219c <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    215a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    215c:	2190      	movs	r1, #144	; 0x90
    215e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2160:	4053      	eors	r3, r2
    2162:	401c      	ands	r4, r3
    2164:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2166:	a802      	add	r0, sp, #8
    2168:	47b0      	blx	r6
    216a:	4225      	tst	r5, r4
    216c:	d1ed      	bne.n	214a <eink_hink_e0154a05_refresh_display_buffer+0x52>
    ssd1608_wait_for_busy();
}
    216e:	b005      	add	sp, #20
    2170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2172:	4b06      	ldr	r3, [pc, #24]	; (218c <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    2174:	789b      	ldrb	r3, [r3, #2]
    2176:	2b00      	cmp	r3, #0
    2178:	d103      	bne.n	2182 <eink_hink_e0154a05_refresh_display_buffer+0x8a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    217a:	22c7      	movs	r2, #199	; 0xc7
    217c:	ab03      	add	r3, sp, #12
    217e:	701a      	strb	r2, [r3, #0]
    2180:	e7c3      	b.n	210a <eink_hink_e0154a05_refresh_display_buffer+0x12>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    2182:	22ff      	movs	r2, #255	; 0xff
    2184:	ab03      	add	r3, sp, #12
    2186:	701a      	strb	r2, [r3, #0]
    2188:	e7bf      	b.n	210a <eink_hink_e0154a05_refresh_display_buffer+0x12>
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	200003ac 	.word	0x200003ac
    2190:	00001bd9 	.word	0x00001bd9
    2194:	0000034d 	.word	0x0000034d
    2198:	0000035b 	.word	0x0000035b
    219c:	41004400 	.word	0x41004400

000021a0 <eink_ac040tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac040tc1_refresh_display_buffer(void)
{
    21a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21a2:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    21a4:	2200      	movs	r2, #0
    21a6:	2100      	movs	r1, #0
    21a8:	2004      	movs	r0, #4
    21aa:	4b25      	ldr	r3, [pc, #148]	; (2240 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    21ac:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    21ae:	4f25      	ldr	r7, [pc, #148]	; (2244 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    21b0:	4e25      	ldr	r6, [pc, #148]	; (2248 <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    21b2:	a801      	add	r0, sp, #4
    21b4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    21b6:	23c0      	movs	r3, #192	; 0xc0
    21b8:	05db      	lsls	r3, r3, #23
    21ba:	2580      	movs	r5, #128	; 0x80
    21bc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    21be:	22a0      	movs	r2, #160	; 0xa0
    21c0:	4922      	ldr	r1, [pc, #136]	; (224c <eink_ac040tc1_refresh_display_buffer+0xac>)
    21c2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21c4:	2190      	movs	r1, #144	; 0x90
    21c6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21c8:	4053      	eors	r3, r2
    21ca:	401c      	ands	r4, r3
    21cc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    21ce:	a801      	add	r0, sp, #4
    21d0:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8159_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    21d2:	4225      	tst	r5, r4
    21d4:	d0ed      	beq.n	21b2 <eink_ac040tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    21d6:	2200      	movs	r2, #0
    21d8:	2100      	movs	r1, #0
    21da:	2012      	movs	r0, #18
    21dc:	4b18      	ldr	r3, [pc, #96]	; (2240 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    21de:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    21e0:	4f18      	ldr	r7, [pc, #96]	; (2244 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    21e2:	4e19      	ldr	r6, [pc, #100]	; (2248 <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    21e4:	a802      	add	r0, sp, #8
    21e6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    21e8:	23c0      	movs	r3, #192	; 0xc0
    21ea:	05db      	lsls	r3, r3, #23
    21ec:	2580      	movs	r5, #128	; 0x80
    21ee:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    21f0:	22a0      	movs	r2, #160	; 0xa0
    21f2:	4916      	ldr	r1, [pc, #88]	; (224c <eink_ac040tc1_refresh_display_buffer+0xac>)
    21f4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21f6:	2190      	movs	r1, #144	; 0x90
    21f8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21fa:	4053      	eors	r3, r2
    21fc:	401c      	ands	r4, r3
    21fe:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2200:	a802      	add	r0, sp, #8
    2202:	47b0      	blx	r6
    2204:	4225      	tst	r5, r4
    2206:	d0ed      	beq.n	21e4 <eink_ac040tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    2208:	2200      	movs	r2, #0
    220a:	2100      	movs	r1, #0
    220c:	2002      	movs	r0, #2
    220e:	4b0c      	ldr	r3, [pc, #48]	; (2240 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    2210:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2212:	4f0c      	ldr	r7, [pc, #48]	; (2244 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2214:	4e0c      	ldr	r6, [pc, #48]	; (2248 <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2216:	a803      	add	r0, sp, #12
    2218:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    221a:	23c0      	movs	r3, #192	; 0xc0
    221c:	05db      	lsls	r3, r3, #23
    221e:	2580      	movs	r5, #128	; 0x80
    2220:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2222:	22a0      	movs	r2, #160	; 0xa0
    2224:	4909      	ldr	r1, [pc, #36]	; (224c <eink_ac040tc1_refresh_display_buffer+0xac>)
    2226:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2228:	2190      	movs	r1, #144	; 0x90
    222a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    222c:	4053      	eors	r3, r2
    222e:	401c      	ands	r4, r3
    2230:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2232:	a803      	add	r0, sp, #12
    2234:	47b0      	blx	r6
    2236:	4225      	tst	r5, r4
    2238:	d0ed      	beq.n	2216 <eink_ac040tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    223a:	b005      	add	sp, #20
    223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    223e:	46c0      	nop			; (mov r8, r8)
    2240:	00001bd9 	.word	0x00001bd9
    2244:	0000034d 	.word	0x0000034d
    2248:	0000035b 	.word	0x0000035b
    224c:	41004400 	.word	0x41004400

00002250 <eink_ac040tc1_put_display_buffer>:
{
    2250:	b5f0      	push	{r4, r5, r6, r7, lr}
    2252:	46c6      	mov	lr, r8
    2254:	b500      	push	{lr}
    2256:	b084      	sub	sp, #16
    2258:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC040TC1_DISPLAY_BUFFER_SIZE);
    225a:	4b37      	ldr	r3, [pc, #220]	; (2338 <eink_ac040tc1_put_display_buffer+0xe8>)
    225c:	681b      	ldr	r3, [r3, #0]
    225e:	6919      	ldr	r1, [r3, #16]
    2260:	228c      	movs	r2, #140	; 0x8c
    2262:	0292      	lsls	r2, r2, #10
    2264:	2010      	movs	r0, #16
    2266:	4b35      	ldr	r3, [pc, #212]	; (233c <eink_ac040tc1_put_display_buffer+0xec>)
    2268:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    226a:	4f35      	ldr	r7, [pc, #212]	; (2340 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    226c:	4e35      	ldr	r6, [pc, #212]	; (2344 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    226e:	4668      	mov	r0, sp
    2270:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2272:	23c0      	movs	r3, #192	; 0xc0
    2274:	05db      	lsls	r3, r3, #23
    2276:	2580      	movs	r5, #128	; 0x80
    2278:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    227a:	22a0      	movs	r2, #160	; 0xa0
    227c:	4932      	ldr	r1, [pc, #200]	; (2348 <eink_ac040tc1_put_display_buffer+0xf8>)
    227e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2280:	2190      	movs	r1, #144	; 0x90
    2282:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2284:	4053      	eors	r3, r2
    2286:	401c      	ands	r4, r3
    2288:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    228a:	4668      	mov	r0, sp
    228c:	47b0      	blx	r6
    228e:	4225      	tst	r5, r4
    2290:	d0ed      	beq.n	226e <eink_ac040tc1_put_display_buffer+0x1e>
    if(refresh_display) {
    2292:	4643      	mov	r3, r8
    2294:	2b00      	cmp	r3, #0
    2296:	d103      	bne.n	22a0 <eink_ac040tc1_put_display_buffer+0x50>
}
    2298:	b004      	add	sp, #16
    229a:	bc04      	pop	{r2}
    229c:	4690      	mov	r8, r2
    229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    22a0:	2200      	movs	r2, #0
    22a2:	2100      	movs	r1, #0
    22a4:	2004      	movs	r0, #4
    22a6:	4b25      	ldr	r3, [pc, #148]	; (233c <eink_ac040tc1_put_display_buffer+0xec>)
    22a8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    22aa:	4f25      	ldr	r7, [pc, #148]	; (2340 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    22ac:	4e25      	ldr	r6, [pc, #148]	; (2344 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    22ae:	a801      	add	r0, sp, #4
    22b0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22b2:	23c0      	movs	r3, #192	; 0xc0
    22b4:	05db      	lsls	r3, r3, #23
    22b6:	2580      	movs	r5, #128	; 0x80
    22b8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22ba:	22a0      	movs	r2, #160	; 0xa0
    22bc:	4922      	ldr	r1, [pc, #136]	; (2348 <eink_ac040tc1_put_display_buffer+0xf8>)
    22be:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22c0:	2190      	movs	r1, #144	; 0x90
    22c2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22c4:	4053      	eors	r3, r2
    22c6:	401c      	ands	r4, r3
    22c8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22ca:	a801      	add	r0, sp, #4
    22cc:	47b0      	blx	r6
    22ce:	4225      	tst	r5, r4
    22d0:	d0ed      	beq.n	22ae <eink_ac040tc1_put_display_buffer+0x5e>
        eink_write_data(UC8159_DRF, 0, 0);
    22d2:	2200      	movs	r2, #0
    22d4:	2100      	movs	r1, #0
    22d6:	2012      	movs	r0, #18
    22d8:	4b18      	ldr	r3, [pc, #96]	; (233c <eink_ac040tc1_put_display_buffer+0xec>)
    22da:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    22dc:	4f18      	ldr	r7, [pc, #96]	; (2340 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    22de:	4e19      	ldr	r6, [pc, #100]	; (2344 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    22e0:	a802      	add	r0, sp, #8
    22e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22e4:	23c0      	movs	r3, #192	; 0xc0
    22e6:	05db      	lsls	r3, r3, #23
    22e8:	2580      	movs	r5, #128	; 0x80
    22ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22ec:	22a0      	movs	r2, #160	; 0xa0
    22ee:	4916      	ldr	r1, [pc, #88]	; (2348 <eink_ac040tc1_put_display_buffer+0xf8>)
    22f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22f2:	2190      	movs	r1, #144	; 0x90
    22f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22f6:	4053      	eors	r3, r2
    22f8:	401c      	ands	r4, r3
    22fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22fc:	a802      	add	r0, sp, #8
    22fe:	47b0      	blx	r6
    2300:	4225      	tst	r5, r4
    2302:	d0ed      	beq.n	22e0 <eink_ac040tc1_put_display_buffer+0x90>
        eink_write_data(UC8159_POF, 0, 0);
    2304:	2200      	movs	r2, #0
    2306:	2100      	movs	r1, #0
    2308:	2002      	movs	r0, #2
    230a:	4b0c      	ldr	r3, [pc, #48]	; (233c <eink_ac040tc1_put_display_buffer+0xec>)
    230c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    230e:	4f0c      	ldr	r7, [pc, #48]	; (2340 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2310:	4e0c      	ldr	r6, [pc, #48]	; (2344 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2312:	a803      	add	r0, sp, #12
    2314:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2316:	23c0      	movs	r3, #192	; 0xc0
    2318:	05db      	lsls	r3, r3, #23
    231a:	2580      	movs	r5, #128	; 0x80
    231c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    231e:	22a0      	movs	r2, #160	; 0xa0
    2320:	4909      	ldr	r1, [pc, #36]	; (2348 <eink_ac040tc1_put_display_buffer+0xf8>)
    2322:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2324:	2190      	movs	r1, #144	; 0x90
    2326:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2328:	4053      	eors	r3, r2
    232a:	401c      	ands	r4, r3
    232c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    232e:	a803      	add	r0, sp, #12
    2330:	47b0      	blx	r6
    2332:	4225      	tst	r5, r4
    2334:	d0ed      	beq.n	2312 <eink_ac040tc1_put_display_buffer+0xc2>
    2336:	e7af      	b.n	2298 <eink_ac040tc1_put_display_buffer+0x48>
    2338:	20000424 	.word	0x20000424
    233c:	00001bd9 	.word	0x00001bd9
    2340:	0000034d 	.word	0x0000034d
    2344:	0000035b 	.word	0x0000035b
    2348:	41004400 	.word	0x41004400

0000234c <eink_ac057tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac057tc1_refresh_display_buffer(void)
{
    234c:	b5f0      	push	{r4, r5, r6, r7, lr}
    234e:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2350:	2200      	movs	r2, #0
    2352:	2100      	movs	r1, #0
    2354:	2004      	movs	r0, #4
    2356:	4b25      	ldr	r3, [pc, #148]	; (23ec <eink_ac057tc1_refresh_display_buffer+0xa0>)
    2358:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    235a:	4f25      	ldr	r7, [pc, #148]	; (23f0 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    235c:	4e25      	ldr	r6, [pc, #148]	; (23f4 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    235e:	a801      	add	r0, sp, #4
    2360:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2362:	23c0      	movs	r3, #192	; 0xc0
    2364:	05db      	lsls	r3, r3, #23
    2366:	2580      	movs	r5, #128	; 0x80
    2368:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    236a:	22a0      	movs	r2, #160	; 0xa0
    236c:	4922      	ldr	r1, [pc, #136]	; (23f8 <eink_ac057tc1_refresh_display_buffer+0xac>)
    236e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2370:	2190      	movs	r1, #144	; 0x90
    2372:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2374:	4053      	eors	r3, r2
    2376:	401c      	ands	r4, r3
    2378:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    237a:	a801      	add	r0, sp, #4
    237c:	47b0      	blx	r6
    237e:	4225      	tst	r5, r4
    2380:	d0ed      	beq.n	235e <eink_ac057tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    2382:	2200      	movs	r2, #0
    2384:	2100      	movs	r1, #0
    2386:	2012      	movs	r0, #18
    2388:	4b18      	ldr	r3, [pc, #96]	; (23ec <eink_ac057tc1_refresh_display_buffer+0xa0>)
    238a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    238c:	4f18      	ldr	r7, [pc, #96]	; (23f0 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    238e:	4e19      	ldr	r6, [pc, #100]	; (23f4 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2390:	a802      	add	r0, sp, #8
    2392:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2394:	23c0      	movs	r3, #192	; 0xc0
    2396:	05db      	lsls	r3, r3, #23
    2398:	2580      	movs	r5, #128	; 0x80
    239a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    239c:	22a0      	movs	r2, #160	; 0xa0
    239e:	4916      	ldr	r1, [pc, #88]	; (23f8 <eink_ac057tc1_refresh_display_buffer+0xac>)
    23a0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23a2:	2190      	movs	r1, #144	; 0x90
    23a4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23a6:	4053      	eors	r3, r2
    23a8:	401c      	ands	r4, r3
    23aa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23ac:	a802      	add	r0, sp, #8
    23ae:	47b0      	blx	r6
    23b0:	4225      	tst	r5, r4
    23b2:	d0ed      	beq.n	2390 <eink_ac057tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    23b4:	2200      	movs	r2, #0
    23b6:	2100      	movs	r1, #0
    23b8:	2002      	movs	r0, #2
    23ba:	4b0c      	ldr	r3, [pc, #48]	; (23ec <eink_ac057tc1_refresh_display_buffer+0xa0>)
    23bc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23be:	4f0c      	ldr	r7, [pc, #48]	; (23f0 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    23c0:	4e0c      	ldr	r6, [pc, #48]	; (23f4 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    23c2:	a803      	add	r0, sp, #12
    23c4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23c6:	23c0      	movs	r3, #192	; 0xc0
    23c8:	05db      	lsls	r3, r3, #23
    23ca:	2580      	movs	r5, #128	; 0x80
    23cc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23ce:	22a0      	movs	r2, #160	; 0xa0
    23d0:	4909      	ldr	r1, [pc, #36]	; (23f8 <eink_ac057tc1_refresh_display_buffer+0xac>)
    23d2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23d4:	2190      	movs	r1, #144	; 0x90
    23d6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23d8:	4053      	eors	r3, r2
    23da:	401c      	ands	r4, r3
    23dc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23de:	a803      	add	r0, sp, #12
    23e0:	47b0      	blx	r6
    23e2:	4225      	tst	r5, r4
    23e4:	d0ed      	beq.n	23c2 <eink_ac057tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    23e6:	b005      	add	sp, #20
    23e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	00001bd9 	.word	0x00001bd9
    23f0:	0000034d 	.word	0x0000034d
    23f4:	0000035b 	.word	0x0000035b
    23f8:	41004400 	.word	0x41004400

000023fc <eink_ac057tc1_put_display_buffer>:
{
    23fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23fe:	46c6      	mov	lr, r8
    2400:	b500      	push	{lr}
    2402:	b084      	sub	sp, #16
    2404:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC057TC1_DISPLAY_BUFFER_SIZE);
    2406:	4b37      	ldr	r3, [pc, #220]	; (24e4 <eink_ac057tc1_put_display_buffer+0xe8>)
    2408:	681b      	ldr	r3, [r3, #0]
    240a:	6919      	ldr	r1, [r3, #16]
    240c:	4a36      	ldr	r2, [pc, #216]	; (24e8 <eink_ac057tc1_put_display_buffer+0xec>)
    240e:	2010      	movs	r0, #16
    2410:	4b36      	ldr	r3, [pc, #216]	; (24ec <eink_ac057tc1_put_display_buffer+0xf0>)
    2412:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2414:	4f36      	ldr	r7, [pc, #216]	; (24f0 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    2416:	4e37      	ldr	r6, [pc, #220]	; (24f4 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    2418:	4668      	mov	r0, sp
    241a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    241c:	23c0      	movs	r3, #192	; 0xc0
    241e:	05db      	lsls	r3, r3, #23
    2420:	2580      	movs	r5, #128	; 0x80
    2422:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2424:	22a0      	movs	r2, #160	; 0xa0
    2426:	4934      	ldr	r1, [pc, #208]	; (24f8 <eink_ac057tc1_put_display_buffer+0xfc>)
    2428:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    242a:	2190      	movs	r1, #144	; 0x90
    242c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    242e:	4053      	eors	r3, r2
    2430:	401c      	ands	r4, r3
    2432:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2434:	4668      	mov	r0, sp
    2436:	47b0      	blx	r6
    2438:	4225      	tst	r5, r4
    243a:	d0ed      	beq.n	2418 <eink_ac057tc1_put_display_buffer+0x1c>
    if(refresh_display) {
    243c:	4643      	mov	r3, r8
    243e:	2b00      	cmp	r3, #0
    2440:	d103      	bne.n	244a <eink_ac057tc1_put_display_buffer+0x4e>
}
    2442:	b004      	add	sp, #16
    2444:	bc04      	pop	{r2}
    2446:	4690      	mov	r8, r2
    2448:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    244a:	2200      	movs	r2, #0
    244c:	2100      	movs	r1, #0
    244e:	2004      	movs	r0, #4
    2450:	4b26      	ldr	r3, [pc, #152]	; (24ec <eink_ac057tc1_put_display_buffer+0xf0>)
    2452:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2454:	4f26      	ldr	r7, [pc, #152]	; (24f0 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    2456:	4e27      	ldr	r6, [pc, #156]	; (24f4 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    2458:	a801      	add	r0, sp, #4
    245a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    245c:	23c0      	movs	r3, #192	; 0xc0
    245e:	05db      	lsls	r3, r3, #23
    2460:	2580      	movs	r5, #128	; 0x80
    2462:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2464:	22a0      	movs	r2, #160	; 0xa0
    2466:	4924      	ldr	r1, [pc, #144]	; (24f8 <eink_ac057tc1_put_display_buffer+0xfc>)
    2468:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    246a:	2190      	movs	r1, #144	; 0x90
    246c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    246e:	4053      	eors	r3, r2
    2470:	401c      	ands	r4, r3
    2472:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2474:	a801      	add	r0, sp, #4
    2476:	47b0      	blx	r6
    2478:	4225      	tst	r5, r4
    247a:	d0ed      	beq.n	2458 <eink_ac057tc1_put_display_buffer+0x5c>
        eink_write_data(UC8159_DRF, 0, 0);
    247c:	2200      	movs	r2, #0
    247e:	2100      	movs	r1, #0
    2480:	2012      	movs	r0, #18
    2482:	4b1a      	ldr	r3, [pc, #104]	; (24ec <eink_ac057tc1_put_display_buffer+0xf0>)
    2484:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2486:	4f1a      	ldr	r7, [pc, #104]	; (24f0 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    2488:	4e1a      	ldr	r6, [pc, #104]	; (24f4 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    248a:	a802      	add	r0, sp, #8
    248c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    248e:	23c0      	movs	r3, #192	; 0xc0
    2490:	05db      	lsls	r3, r3, #23
    2492:	2580      	movs	r5, #128	; 0x80
    2494:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2496:	22a0      	movs	r2, #160	; 0xa0
    2498:	4917      	ldr	r1, [pc, #92]	; (24f8 <eink_ac057tc1_put_display_buffer+0xfc>)
    249a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    249c:	2190      	movs	r1, #144	; 0x90
    249e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    24a0:	4053      	eors	r3, r2
    24a2:	401c      	ands	r4, r3
    24a4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    24a6:	a802      	add	r0, sp, #8
    24a8:	47b0      	blx	r6
    24aa:	4225      	tst	r5, r4
    24ac:	d0ed      	beq.n	248a <eink_ac057tc1_put_display_buffer+0x8e>
        eink_write_data(UC8159_POF, 0, 0);
    24ae:	2200      	movs	r2, #0
    24b0:	2100      	movs	r1, #0
    24b2:	2002      	movs	r0, #2
    24b4:	4b0d      	ldr	r3, [pc, #52]	; (24ec <eink_ac057tc1_put_display_buffer+0xf0>)
    24b6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    24b8:	4f0d      	ldr	r7, [pc, #52]	; (24f0 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    24ba:	4e0e      	ldr	r6, [pc, #56]	; (24f4 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    24bc:	a803      	add	r0, sp, #12
    24be:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    24c0:	23c0      	movs	r3, #192	; 0xc0
    24c2:	05db      	lsls	r3, r3, #23
    24c4:	2580      	movs	r5, #128	; 0x80
    24c6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    24c8:	22a0      	movs	r2, #160	; 0xa0
    24ca:	490b      	ldr	r1, [pc, #44]	; (24f8 <eink_ac057tc1_put_display_buffer+0xfc>)
    24cc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    24ce:	2190      	movs	r1, #144	; 0x90
    24d0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    24d2:	4053      	eors	r3, r2
    24d4:	401c      	ands	r4, r3
    24d6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    24d8:	a803      	add	r0, sp, #12
    24da:	47b0      	blx	r6
    24dc:	4225      	tst	r5, r4
    24de:	d0ed      	beq.n	24bc <eink_ac057tc1_put_display_buffer+0xc0>
    24e0:	e7af      	b.n	2442 <eink_ac057tc1_put_display_buffer+0x46>
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	20000424 	.word	0x20000424
    24e8:	00020d00 	.word	0x00020d00
    24ec:	00001bd9 	.word	0x00001bd9
    24f0:	0000034d 	.word	0x0000034d
    24f4:	0000035b 	.word	0x0000035b
    24f8:	41004400 	.word	0x41004400

000024fc <eink_ed057tc2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed057tc2_refresh_display_buffer(void)
{
    24fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24fe:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2500:	2200      	movs	r2, #0
    2502:	2100      	movs	r1, #0
    2504:	2004      	movs	r0, #4
    2506:	4c1a      	ldr	r4, [pc, #104]	; (2570 <eink_ed057tc2_refresh_display_buffer+0x74>)
    2508:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    250a:	2200      	movs	r2, #0
    250c:	2100      	movs	r1, #0
    250e:	2012      	movs	r0, #18
    2510:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2512:	4f18      	ldr	r7, [pc, #96]	; (2574 <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2514:	4e18      	ldr	r6, [pc, #96]	; (2578 <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    2516:	4668      	mov	r0, sp
    2518:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    251a:	23c0      	movs	r3, #192	; 0xc0
    251c:	05db      	lsls	r3, r3, #23
    251e:	2580      	movs	r5, #128	; 0x80
    2520:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2522:	22a0      	movs	r2, #160	; 0xa0
    2524:	4915      	ldr	r1, [pc, #84]	; (257c <eink_ed057tc2_refresh_display_buffer+0x80>)
    2526:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2528:	2190      	movs	r1, #144	; 0x90
    252a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    252c:	4053      	eors	r3, r2
    252e:	401c      	ands	r4, r3
    2530:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2532:	4668      	mov	r0, sp
    2534:	47b0      	blx	r6
    2536:	4225      	tst	r5, r4
    2538:	d0ed      	beq.n	2516 <eink_ed057tc2_refresh_display_buffer+0x1a>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    253a:	2200      	movs	r2, #0
    253c:	2100      	movs	r1, #0
    253e:	2002      	movs	r0, #2
    2540:	4b0b      	ldr	r3, [pc, #44]	; (2570 <eink_ed057tc2_refresh_display_buffer+0x74>)
    2542:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2544:	4f0b      	ldr	r7, [pc, #44]	; (2574 <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2546:	4e0c      	ldr	r6, [pc, #48]	; (2578 <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    2548:	a801      	add	r0, sp, #4
    254a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    254c:	23c0      	movs	r3, #192	; 0xc0
    254e:	05db      	lsls	r3, r3, #23
    2550:	2580      	movs	r5, #128	; 0x80
    2552:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2554:	22a0      	movs	r2, #160	; 0xa0
    2556:	4909      	ldr	r1, [pc, #36]	; (257c <eink_ed057tc2_refresh_display_buffer+0x80>)
    2558:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    255a:	2190      	movs	r1, #144	; 0x90
    255c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    255e:	4053      	eors	r3, r2
    2560:	401c      	ands	r4, r3
    2562:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2564:	a801      	add	r0, sp, #4
    2566:	47b0      	blx	r6
    2568:	4225      	tst	r5, r4
    256a:	d0ed      	beq.n	2548 <eink_ed057tc2_refresh_display_buffer+0x4c>
    uc8159_wait_for_busy();
}
    256c:	b003      	add	sp, #12
    256e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2570:	00001bd9 	.word	0x00001bd9
    2574:	0000034d 	.word	0x0000034d
    2578:	0000035b 	.word	0x0000035b
    257c:	41004400 	.word	0x41004400

00002580 <eink_ed057tc2_put_display_buffer>:
{
    2580:	b5f0      	push	{r4, r5, r6, r7, lr}
    2582:	46c6      	mov	lr, r8
    2584:	b500      	push	{lr}
    2586:	b084      	sub	sp, #16
    2588:	4680      	mov	r8, r0
    eink_write_data(UC8159_PON, 0, 0);
    258a:	2200      	movs	r2, #0
    258c:	2100      	movs	r1, #0
    258e:	2004      	movs	r0, #4
    2590:	4c2c      	ldr	r4, [pc, #176]	; (2644 <eink_ed057tc2_put_display_buffer+0xc4>)
    2592:	47a0      	blx	r4
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED057TC2_DISPLAY_BUFFER_SIZE);
    2594:	4b2c      	ldr	r3, [pc, #176]	; (2648 <eink_ed057tc2_put_display_buffer+0xc8>)
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	6919      	ldr	r1, [r3, #16]
    259a:	4a2c      	ldr	r2, [pc, #176]	; (264c <eink_ed057tc2_put_display_buffer+0xcc>)
    259c:	2010      	movs	r0, #16
    259e:	47a0      	blx	r4
    eink_write_data(UC8159_DSP, 0, 0);
    25a0:	2200      	movs	r2, #0
    25a2:	2100      	movs	r1, #0
    25a4:	2011      	movs	r0, #17
    25a6:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    25a8:	4f29      	ldr	r7, [pc, #164]	; (2650 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    25aa:	4e2a      	ldr	r6, [pc, #168]	; (2654 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    25ac:	a801      	add	r0, sp, #4
    25ae:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25b0:	23c0      	movs	r3, #192	; 0xc0
    25b2:	05db      	lsls	r3, r3, #23
    25b4:	2580      	movs	r5, #128	; 0x80
    25b6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25b8:	22a0      	movs	r2, #160	; 0xa0
    25ba:	4927      	ldr	r1, [pc, #156]	; (2658 <eink_ed057tc2_put_display_buffer+0xd8>)
    25bc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25be:	2190      	movs	r1, #144	; 0x90
    25c0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    25c2:	4053      	eors	r3, r2
    25c4:	401c      	ands	r4, r3
    25c6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    25c8:	a801      	add	r0, sp, #4
    25ca:	47b0      	blx	r6
    25cc:	4225      	tst	r5, r4
    25ce:	d0ed      	beq.n	25ac <eink_ed057tc2_put_display_buffer+0x2c>
    if(refresh_display) {
    25d0:	4643      	mov	r3, r8
    25d2:	2b00      	cmp	r3, #0
    25d4:	d11c      	bne.n	2610 <eink_ed057tc2_put_display_buffer+0x90>
    eink_write_data(UC8159_POF, 0, 0);
    25d6:	2200      	movs	r2, #0
    25d8:	2100      	movs	r1, #0
    25da:	2002      	movs	r0, #2
    25dc:	4b19      	ldr	r3, [pc, #100]	; (2644 <eink_ed057tc2_put_display_buffer+0xc4>)
    25de:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    25e0:	4f1b      	ldr	r7, [pc, #108]	; (2650 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    25e2:	4e1c      	ldr	r6, [pc, #112]	; (2654 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    25e4:	a803      	add	r0, sp, #12
    25e6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25e8:	23c0      	movs	r3, #192	; 0xc0
    25ea:	05db      	lsls	r3, r3, #23
    25ec:	2580      	movs	r5, #128	; 0x80
    25ee:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25f0:	22a0      	movs	r2, #160	; 0xa0
    25f2:	4919      	ldr	r1, [pc, #100]	; (2658 <eink_ed057tc2_put_display_buffer+0xd8>)
    25f4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25f6:	2190      	movs	r1, #144	; 0x90
    25f8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    25fa:	4053      	eors	r3, r2
    25fc:	401c      	ands	r4, r3
    25fe:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2600:	a803      	add	r0, sp, #12
    2602:	47b0      	blx	r6
    2604:	4225      	tst	r5, r4
    2606:	d0ed      	beq.n	25e4 <eink_ed057tc2_put_display_buffer+0x64>
}
    2608:	b004      	add	sp, #16
    260a:	bc04      	pop	{r2}
    260c:	4690      	mov	r8, r2
    260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_DRF, 0, 0);
    2610:	2200      	movs	r2, #0
    2612:	2100      	movs	r1, #0
    2614:	2012      	movs	r0, #18
    2616:	4b0b      	ldr	r3, [pc, #44]	; (2644 <eink_ed057tc2_put_display_buffer+0xc4>)
    2618:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    261a:	4f0d      	ldr	r7, [pc, #52]	; (2650 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    261c:	4e0d      	ldr	r6, [pc, #52]	; (2654 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    261e:	a802      	add	r0, sp, #8
    2620:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2622:	23c0      	movs	r3, #192	; 0xc0
    2624:	05db      	lsls	r3, r3, #23
    2626:	2580      	movs	r5, #128	; 0x80
    2628:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    262a:	22a0      	movs	r2, #160	; 0xa0
    262c:	490a      	ldr	r1, [pc, #40]	; (2658 <eink_ed057tc2_put_display_buffer+0xd8>)
    262e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2630:	2190      	movs	r1, #144	; 0x90
    2632:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2634:	4053      	eors	r3, r2
    2636:	401c      	ands	r4, r3
    2638:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    263a:	a802      	add	r0, sp, #8
    263c:	47b0      	blx	r6
    263e:	4225      	tst	r5, r4
    2640:	d0ed      	beq.n	261e <eink_ed057tc2_put_display_buffer+0x9e>
    2642:	e7c8      	b.n	25d6 <eink_ed057tc2_put_display_buffer+0x56>
    2644:	00001bd9 	.word	0x00001bd9
    2648:	20000424 	.word	0x20000424
    264c:	00020d00 	.word	0x00020d00
    2650:	0000034d 	.word	0x0000034d
    2654:	0000035b 	.word	0x0000035b
    2658:	41004400 	.word	0x41004400

0000265c <eink_ed028tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed028tc1_refresh_display_buffer(void)
{
    265c:	b5f0      	push	{r4, r5, r6, r7, lr}
    265e:	b087      	sub	sp, #28
    uint8_t eink_data[9];
    
    /* Enable power to the display */
    eink_write_data(UC8177_PON, 0, 0);
    2660:	2200      	movs	r2, #0
    2662:	2100      	movs	r1, #0
    2664:	2004      	movs	r0, #4
    2666:	4b22      	ldr	r3, [pc, #136]	; (26f0 <eink_ed028tc1_refresh_display_buffer+0x94>)
    2668:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    266a:	4f22      	ldr	r7, [pc, #136]	; (26f4 <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    266c:	4e22      	ldr	r6, [pc, #136]	; (26f8 <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    266e:	a801      	add	r0, sp, #4
    2670:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2672:	23c0      	movs	r3, #192	; 0xc0
    2674:	05db      	lsls	r3, r3, #23
    2676:	2580      	movs	r5, #128	; 0x80
    2678:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    267a:	22a0      	movs	r2, #160	; 0xa0
    267c:	491f      	ldr	r1, [pc, #124]	; (26fc <eink_ed028tc1_refresh_display_buffer+0xa0>)
    267e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2680:	2190      	movs	r1, #144	; 0x90
    2682:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2684:	4053      	eors	r3, r2
    2686:	401c      	ands	r4, r3
    2688:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    268a:	a801      	add	r0, sp, #4
    268c:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8177_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    268e:	4225      	tst	r5, r4
    2690:	d0ed      	beq.n	266e <eink_ed028tc1_refresh_display_buffer+0x12>
    
    uc8177_wait_for_busy_low();
    
    /* Display Refresh */
    eink_data[0] = 0x18; /* Update Mode 1 */
    2692:	a903      	add	r1, sp, #12
    2694:	2318      	movs	r3, #24
    2696:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2698:	2300      	movs	r3, #0
    269a:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    269c:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    269e:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    26a0:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    26a2:	3302      	adds	r3, #2
    26a4:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    26a6:	3356      	adds	r3, #86	; 0x56
    26a8:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    26aa:	3b57      	subs	r3, #87	; 0x57
    26ac:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    26ae:	33df      	adds	r3, #223	; 0xdf
    26b0:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    26b2:	2209      	movs	r2, #9
    26b4:	2012      	movs	r0, #18
    26b6:	4c0e      	ldr	r4, [pc, #56]	; (26f0 <eink_ed028tc1_refresh_display_buffer+0x94>)
    26b8:	47a0      	blx	r4
    
    /* Disable power to the display */
    eink_write_data(UC8177_POF, 0, 0);
    26ba:	2200      	movs	r2, #0
    26bc:	2100      	movs	r1, #0
    26be:	2002      	movs	r0, #2
    26c0:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    26c2:	4f0c      	ldr	r7, [pc, #48]	; (26f4 <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    26c4:	4e0c      	ldr	r6, [pc, #48]	; (26f8 <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    26c6:	a802      	add	r0, sp, #8
    26c8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26ca:	23c0      	movs	r3, #192	; 0xc0
    26cc:	05db      	lsls	r3, r3, #23
    26ce:	2580      	movs	r5, #128	; 0x80
    26d0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26d2:	22a0      	movs	r2, #160	; 0xa0
    26d4:	4909      	ldr	r1, [pc, #36]	; (26fc <eink_ed028tc1_refresh_display_buffer+0xa0>)
    26d6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26d8:	2190      	movs	r1, #144	; 0x90
    26da:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    26dc:	4053      	eors	r3, r2
    26de:	401c      	ands	r4, r3
    26e0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    26e2:	a802      	add	r0, sp, #8
    26e4:	47b0      	blx	r6
    26e6:	4225      	tst	r5, r4
    26e8:	d0ed      	beq.n	26c6 <eink_ed028tc1_refresh_display_buffer+0x6a>
    uc8177_wait_for_busy_low();
}
    26ea:	b007      	add	sp, #28
    26ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	00001bd9 	.word	0x00001bd9
    26f4:	0000034d 	.word	0x0000034d
    26f8:	0000035b 	.word	0x0000035b
    26fc:	41004400 	.word	0x41004400

00002700 <eink_ed037tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed037tc1_refresh_display_buffer(void)
{
    2700:	b5f0      	push	{r4, r5, r6, r7, lr}
    2702:	b083      	sub	sp, #12
    /* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
    if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    2704:	4b15      	ldr	r3, [pc, #84]	; (275c <eink_ed037tc1_refresh_display_buffer+0x5c>)
    2706:	78db      	ldrb	r3, [r3, #3]
    2708:	2b00      	cmp	r3, #0
    270a:	d11f      	bne.n	274c <eink_ed037tc1_refresh_display_buffer+0x4c>
    {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    270c:	2269      	movs	r2, #105	; 0x69
    270e:	4914      	ldr	r1, [pc, #80]	; (2760 <eink_ed037tc1_refresh_display_buffer+0x60>)
    2710:	2032      	movs	r0, #50	; 0x32
    2712:	4b14      	ldr	r3, [pc, #80]	; (2764 <eink_ed037tc1_refresh_display_buffer+0x64>)
    2714:	4798      	blx	r3
    } else {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    }
    /* Display Update */
    eink_write_data(SSD1677_DSP_ACT, 0, 0);
    2716:	2200      	movs	r2, #0
    2718:	2100      	movs	r1, #0
    271a:	2020      	movs	r0, #32
    271c:	4b11      	ldr	r3, [pc, #68]	; (2764 <eink_ed037tc1_refresh_display_buffer+0x64>)
    271e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2720:	4f11      	ldr	r7, [pc, #68]	; (2768 <eink_ed037tc1_refresh_display_buffer+0x68>)
	CRITICAL_SECTION_LEAVE();
    2722:	4e12      	ldr	r6, [pc, #72]	; (276c <eink_ed037tc1_refresh_display_buffer+0x6c>)
	CRITICAL_SECTION_ENTER();
    2724:	a801      	add	r0, sp, #4
    2726:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2728:	23c0      	movs	r3, #192	; 0xc0
    272a:	05db      	lsls	r3, r3, #23
    272c:	2580      	movs	r5, #128	; 0x80
    272e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2730:	22a0      	movs	r2, #160	; 0xa0
    2732:	490f      	ldr	r1, [pc, #60]	; (2770 <eink_ed037tc1_refresh_display_buffer+0x70>)
    2734:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2736:	2190      	movs	r1, #144	; 0x90
    2738:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    273a:	4053      	eors	r3, r2
    273c:	401c      	ands	r4, r3
    273e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2740:	a801      	add	r0, sp, #4
    2742:	47b0      	blx	r6
#ifdef EINK_BUSY    
    while(gpio_get_pin_level(EINK_BUSY));
    2744:	4225      	tst	r5, r4
    2746:	d1ed      	bne.n	2724 <eink_ed037tc1_refresh_display_buffer+0x24>
#endif
}
    2748:	b003      	add	sp, #12
    274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    274c:	2269      	movs	r2, #105	; 0x69
    274e:	4904      	ldr	r1, [pc, #16]	; (2760 <eink_ed037tc1_refresh_display_buffer+0x60>)
    2750:	316c      	adds	r1, #108	; 0x6c
    2752:	2032      	movs	r0, #50	; 0x32
    2754:	4b03      	ldr	r3, [pc, #12]	; (2764 <eink_ed037tc1_refresh_display_buffer+0x64>)
    2756:	4798      	blx	r3
    2758:	e7dd      	b.n	2716 <eink_ed037tc1_refresh_display_buffer+0x16>
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	20000408 	.word	0x20000408
    2760:	00004a40 	.word	0x00004a40
    2764:	00001bd9 	.word	0x00001bd9
    2768:	0000034d 	.word	0x0000034d
    276c:	0000035b 	.word	0x0000035b
    2770:	41004400 	.word	0x41004400

00002774 <eink_ed037tc1_put_display_buffer>:
{
    2774:	b5f0      	push	{r4, r5, r6, r7, lr}
    2776:	b083      	sub	sp, #12
    2778:	0007      	movs	r7, r0
    eink_data[0] = 0x00;
    277a:	ac01      	add	r4, sp, #4
    277c:	2500      	movs	r5, #0
    277e:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    2780:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    2782:	2202      	movs	r2, #2
    2784:	0021      	movs	r1, r4
    2786:	204e      	movs	r0, #78	; 0x4e
    2788:	4e1d      	ldr	r6, [pc, #116]	; (2800 <eink_ed037tc1_put_display_buffer+0x8c>)
    278a:	47b0      	blx	r6
    eink_data[0] = 0x00;
    278c:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    278e:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    2790:	2202      	movs	r2, #2
    2792:	0021      	movs	r1, r4
    2794:	204f      	movs	r0, #79	; 0x4f
    2796:	47b0      	blx	r6
    eink_write_data(SSD1677_RAM_BW, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED037TC1_DISPLAY_BUFFER_SIZE);
    2798:	4b1a      	ldr	r3, [pc, #104]	; (2804 <eink_ed037tc1_put_display_buffer+0x90>)
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	6919      	ldr	r1, [r3, #16]
    279e:	4a1a      	ldr	r2, [pc, #104]	; (2808 <eink_ed037tc1_put_display_buffer+0x94>)
    27a0:	2024      	movs	r0, #36	; 0x24
    27a2:	47b0      	blx	r6
    if(refresh_display) {
    27a4:	2f00      	cmp	r7, #0
    27a6:	d021      	beq.n	27ec <eink_ed037tc1_put_display_buffer+0x78>
        if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    27a8:	4b18      	ldr	r3, [pc, #96]	; (280c <eink_ed037tc1_put_display_buffer+0x98>)
    27aa:	78db      	ldrb	r3, [r3, #3]
    27ac:	2b00      	cmp	r3, #0
    27ae:	d11f      	bne.n	27f0 <eink_ed037tc1_put_display_buffer+0x7c>
            eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    27b0:	2269      	movs	r2, #105	; 0x69
    27b2:	4917      	ldr	r1, [pc, #92]	; (2810 <eink_ed037tc1_put_display_buffer+0x9c>)
    27b4:	2032      	movs	r0, #50	; 0x32
    27b6:	4b12      	ldr	r3, [pc, #72]	; (2800 <eink_ed037tc1_put_display_buffer+0x8c>)
    27b8:	4798      	blx	r3
        eink_write_data(SSD1677_DSP_ACT, 0, 0);
    27ba:	2200      	movs	r2, #0
    27bc:	2100      	movs	r1, #0
    27be:	2020      	movs	r0, #32
    27c0:	4b0f      	ldr	r3, [pc, #60]	; (2800 <eink_ed037tc1_put_display_buffer+0x8c>)
    27c2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    27c4:	4f13      	ldr	r7, [pc, #76]	; (2814 <eink_ed037tc1_put_display_buffer+0xa0>)
	CRITICAL_SECTION_LEAVE();
    27c6:	4e14      	ldr	r6, [pc, #80]	; (2818 <eink_ed037tc1_put_display_buffer+0xa4>)
	CRITICAL_SECTION_ENTER();
    27c8:	4668      	mov	r0, sp
    27ca:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    27cc:	23c0      	movs	r3, #192	; 0xc0
    27ce:	05db      	lsls	r3, r3, #23
    27d0:	2580      	movs	r5, #128	; 0x80
    27d2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    27d4:	22a0      	movs	r2, #160	; 0xa0
    27d6:	4911      	ldr	r1, [pc, #68]	; (281c <eink_ed037tc1_put_display_buffer+0xa8>)
    27d8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    27da:	2190      	movs	r1, #144	; 0x90
    27dc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    27de:	4053      	eors	r3, r2
    27e0:	401c      	ands	r4, r3
    27e2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    27e4:	4668      	mov	r0, sp
    27e6:	47b0      	blx	r6
        while(gpio_get_pin_level(EINK_BUSY));
    27e8:	4225      	tst	r5, r4
    27ea:	d1ed      	bne.n	27c8 <eink_ed037tc1_put_display_buffer+0x54>
}
    27ec:	b003      	add	sp, #12
    27ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    27f0:	2269      	movs	r2, #105	; 0x69
    27f2:	4907      	ldr	r1, [pc, #28]	; (2810 <eink_ed037tc1_put_display_buffer+0x9c>)
    27f4:	316c      	adds	r1, #108	; 0x6c
    27f6:	2032      	movs	r0, #50	; 0x32
    27f8:	4b01      	ldr	r3, [pc, #4]	; (2800 <eink_ed037tc1_put_display_buffer+0x8c>)
    27fa:	4798      	blx	r3
    27fc:	e7dd      	b.n	27ba <eink_ed037tc1_put_display_buffer+0x46>
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00001bd9 	.word	0x00001bd9
    2804:	20000424 	.word	0x20000424
    2808:	000041a0 	.word	0x000041a0
    280c:	20000408 	.word	0x20000408
    2810:	00004a40 	.word	0x00004a40
    2814:	0000034d 	.word	0x0000034d
    2818:	0000035b 	.word	0x0000035b
    281c:	41004400 	.word	0x41004400

00002820 <eink_ed037tc1_put_partial_display_buffer>:
{
    2820:	b5f0      	push	{r4, r5, r6, r7, lr}
    2822:	46de      	mov	lr, fp
    2824:	4657      	mov	r7, sl
    2826:	464e      	mov	r6, r9
    2828:	4645      	mov	r5, r8
    282a:	b5e0      	push	{r5, r6, r7, lr}
    282c:	b085      	sub	sp, #20
    282e:	4681      	mov	r9, r0
    2830:	000c      	movs	r4, r1
	if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
    2832:	4940      	ldr	r1, [pc, #256]	; (2934 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2834:	7809      	ldrb	r1, [r1, #0]
    2836:	2901      	cmp	r1, #1
    2838:	d050      	beq.n	28dc <eink_ed037tc1_put_partial_display_buffer+0xbc>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
    283a:	493e      	ldr	r1, [pc, #248]	; (2934 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    283c:	7809      	ldrb	r1, [r1, #0]
    283e:	2902      	cmp	r1, #2
    2840:	d068      	beq.n	2914 <eink_ed037tc1_put_partial_display_buffer+0xf4>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
    2842:	493c      	ldr	r1, [pc, #240]	; (2934 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2844:	7809      	ldrb	r1, [r1, #0]
    2846:	2903      	cmp	r1, #3
    2848:	d06c      	beq.n	2924 <eink_ed037tc1_put_partial_display_buffer+0x104>
        x1_set = (start_x - (start_x % 8)) / 8;
    284a:	10c6      	asrs	r6, r0, #3
        byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * start_y);
    284c:	00a1      	lsls	r1, r4, #2
    284e:	1909      	adds	r1, r1, r4
    2850:	00c8      	lsls	r0, r1, #3
    2852:	1a41      	subs	r1, r0, r1
    2854:	1876      	adds	r6, r6, r1
        mod_calc_x = (start_x - (start_x % 8));
    2856:	2107      	movs	r1, #7
    2858:	4648      	mov	r0, r9
    285a:	4388      	bics	r0, r1
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    285c:	b2c0      	uxtb	r0, r0
    285e:	1880      	adds	r0, r0, r2
        mod_calc_w = 8 - (window_w % 8);
    2860:	2507      	movs	r5, #7
    2862:	402a      	ands	r2, r5
    2864:	2508      	movs	r5, #8
    2866:	1aaa      	subs	r2, r5, r2
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    2868:	b2d2      	uxtb	r2, r2
    286a:	1882      	adds	r2, r0, r2
    286c:	17d0      	asrs	r0, r2, #31
    286e:	4001      	ands	r1, r0
    2870:	1889      	adds	r1, r1, r2
    2872:	10c9      	asrs	r1, r1, #3
    2874:	b28a      	uxth	r2, r1
    2876:	9201      	str	r2, [sp, #4]
    display_buffer = (uint8_t*) ptr_eink_gfx_config->display_buffer_1_ptr;
    2878:	4a2f      	ldr	r2, [pc, #188]	; (2938 <eink_ed037tc1_put_partial_display_buffer+0x118>)
    287a:	6812      	ldr	r2, [r2, #0]
    287c:	6912      	ldr	r2, [r2, #16]
    display_buffer += byte_set;
    287e:	1996      	adds	r6, r2, r6
    for(i=0; i<window_set_h; i++)
    2880:	2b00      	cmp	r3, #0
    2882:	d024      	beq.n	28ce <eink_ed037tc1_put_partial_display_buffer+0xae>
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    2884:	464a      	mov	r2, r9
    2886:	0592      	lsls	r2, r2, #22
    2888:	0f92      	lsrs	r2, r2, #30
    288a:	4692      	mov	sl, r2
    288c:	18e3      	adds	r3, r4, r3
    288e:	b29b      	uxth	r3, r3
    2890:	4698      	mov	r8, r3
	    eink_data[0] = (window_set_x & 0xFF);
    2892:	ad03      	add	r5, sp, #12
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    2894:	4f29      	ldr	r7, [pc, #164]	; (293c <eink_ed037tc1_put_partial_display_buffer+0x11c>)
	    eink_data[1] = (temp_y >> 8) & 0x3;
    2896:	2303      	movs	r3, #3
    2898:	469b      	mov	fp, r3
	    eink_data[0] = (window_set_x & 0xFF);
    289a:	464b      	mov	r3, r9
    289c:	702b      	strb	r3, [r5, #0]
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    289e:	4653      	mov	r3, sl
    28a0:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    28a2:	2202      	movs	r2, #2
    28a4:	0029      	movs	r1, r5
    28a6:	204e      	movs	r0, #78	; 0x4e
    28a8:	47b8      	blx	r7
	    eink_data[0] = (temp_y & 0xFF);
    28aa:	702c      	strb	r4, [r5, #0]
	    eink_data[1] = (temp_y >> 8) & 0x3;
    28ac:	0a23      	lsrs	r3, r4, #8
    28ae:	465a      	mov	r2, fp
    28b0:	4013      	ands	r3, r2
    28b2:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    28b4:	2202      	movs	r2, #2
    28b6:	0029      	movs	r1, r5
    28b8:	204f      	movs	r0, #79	; 0x4f
    28ba:	47b8      	blx	r7
	    display_buffer += (GFX_ED037TC1_MAX_WIDTH / 8);
    28bc:	3623      	adds	r6, #35	; 0x23
	    eink_write_data(SSD1677_RAM_BW, display_buffer, window_set_w);
    28be:	9a01      	ldr	r2, [sp, #4]
    28c0:	0031      	movs	r1, r6
    28c2:	2024      	movs	r0, #36	; 0x24
    28c4:	47b8      	blx	r7
    28c6:	3401      	adds	r4, #1
    28c8:	b2a4      	uxth	r4, r4
    for(i=0; i<window_set_h; i++)
    28ca:	4544      	cmp	r4, r8
    28cc:	d1e5      	bne.n	289a <eink_ed037tc1_put_partial_display_buffer+0x7a>
}
    28ce:	b005      	add	sp, #20
    28d0:	bc3c      	pop	{r2, r3, r4, r5}
    28d2:	4690      	mov	r8, r2
    28d4:	4699      	mov	r9, r3
    28d6:	46a2      	mov	sl, r4
    28d8:	46ab      	mov	fp, r5
    28da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - (((start_y + window_h) - ((start_y + window_h) % 8)) / 8);
    28dc:	18e6      	adds	r6, r4, r3
    28de:	3106      	adds	r1, #6
    28e0:	438e      	bics	r6, r1
    28e2:	0031      	movs	r1, r6
    28e4:	17f0      	asrs	r0, r6, #31
    28e6:	2607      	movs	r6, #7
    28e8:	4006      	ands	r6, r0
    28ea:	1876      	adds	r6, r6, r1
    28ec:	10f6      	asrs	r6, r6, #3
    28ee:	4276      	negs	r6, r6
    28f0:	3622      	adds	r6, #34	; 0x22
		byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (start_x));
    28f2:	4649      	mov	r1, r9
    28f4:	0089      	lsls	r1, r1, #2
    28f6:	4449      	add	r1, r9
    28f8:	00c8      	lsls	r0, r1, #3
    28fa:	1a41      	subs	r1, r0, r1
    28fc:	1876      	adds	r6, r6, r1
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    28fe:	218c      	movs	r1, #140	; 0x8c
    2900:	0049      	lsls	r1, r1, #1
    2902:	1ac9      	subs	r1, r1, r3
    2904:	1b09      	subs	r1, r1, r4
		window_set_w = window_h / 8;
    2906:	08db      	lsrs	r3, r3, #3
    2908:	9301      	str	r3, [sp, #4]
		window_set_h = window_w;
    290a:	0013      	movs	r3, r2
		window_set_y = start_x;
    290c:	464c      	mov	r4, r9
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    290e:	b28a      	uxth	r2, r1
    2910:	4691      	mov	r9, r2
    2912:	e7b1      	b.n	2878 <eink_ed037tc1_put_partial_display_buffer+0x58>
        x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((start_x - (start_x % 8)) / 8);
    2914:	10c6      	asrs	r6, r0, #3
    2916:	490a      	ldr	r1, [pc, #40]	; (2940 <eink_ed037tc1_put_partial_display_buffer+0x120>)
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
    2918:	1b89      	subs	r1, r1, r6
    291a:	2623      	movs	r6, #35	; 0x23
    291c:	4276      	negs	r6, r6
    291e:	4366      	muls	r6, r4
    2920:	198e      	adds	r6, r1, r6
    2922:	e7a9      	b.n	2878 <eink_ed037tc1_put_partial_display_buffer+0x58>
        y1_set = (start_y - (start_y % 8)) / 8;
    2924:	10e2      	asrs	r2, r4, #3
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
    2926:	3926      	subs	r1, #38	; 0x26
    2928:	4361      	muls	r1, r4
    292a:	1856      	adds	r6, r2, r1
    292c:	4a05      	ldr	r2, [pc, #20]	; (2944 <eink_ed037tc1_put_partial_display_buffer+0x124>)
    292e:	4694      	mov	ip, r2
    2930:	4466      	add	r6, ip
    2932:	e7a1      	b.n	2878 <eink_ed037tc1_put_partial_display_buffer+0x58>
    2934:	20000408 	.word	0x20000408
    2938:	20000424 	.word	0x20000424
    293c:	00001bd9 	.word	0x00001bd9
    2940:	00004294 	.word	0x00004294
    2944:	0000417d 	.word	0x0000417d

00002948 <eink_hink_e0154a05_put_display_buffer>:
{
    2948:	b5f0      	push	{r4, r5, r6, r7, lr}
    294a:	46c6      	mov	lr, r8
    294c:	b500      	push	{lr}
    294e:	b086      	sub	sp, #24
    2950:	4680      	mov	r8, r0
    eink_data[0] = 0x7D;
    2952:	ac05      	add	r4, sp, #20
    2954:	237d      	movs	r3, #125	; 0x7d
    2956:	7023      	strb	r3, [r4, #0]
    eink_write_data(SSD1608_WVCOM, eink_data, 1);
    2958:	2201      	movs	r2, #1
    295a:	0021      	movs	r1, r4
    295c:	202c      	movs	r0, #44	; 0x2c
    295e:	4d3e      	ldr	r5, [pc, #248]	; (2a58 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2960:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2962:	2718      	movs	r7, #24
    2964:	7027      	strb	r7, [r4, #0]
    eink_data[1] = 0x00;
    2966:	2600      	movs	r6, #0
    2968:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RXAS, eink_data, 2);
    296a:	2202      	movs	r2, #2
    296c:	0021      	movs	r1, r4
    296e:	2044      	movs	r0, #68	; 0x44
    2970:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2972:	7027      	strb	r7, [r4, #0]
    eink_write_data(SSD1608_RXC, eink_data, 1);
    2974:	2201      	movs	r2, #1
    2976:	0021      	movs	r1, r4
    2978:	204e      	movs	r0, #78	; 0x4e
    297a:	47a8      	blx	r5
    eink_data[0] = 0xC7;
    297c:	23c7      	movs	r3, #199	; 0xc7
    297e:	7023      	strb	r3, [r4, #0]
    eink_data[1] = 0x00;
    2980:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RYC, eink_data, 2);
    2982:	2202      	movs	r2, #2
    2984:	0021      	movs	r1, r4
    2986:	204f      	movs	r0, #79	; 0x4f
    2988:	47a8      	blx	r5
    eink_write_data(SSD1608_WR, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_HINK_E0154A05_DISPLAY_BUFFER_SIZE);
    298a:	4b34      	ldr	r3, [pc, #208]	; (2a5c <eink_hink_e0154a05_put_display_buffer+0x114>)
    298c:	681b      	ldr	r3, [r3, #0]
    298e:	6919      	ldr	r1, [r3, #16]
    2990:	4a33      	ldr	r2, [pc, #204]	; (2a60 <eink_hink_e0154a05_put_display_buffer+0x118>)
    2992:	2024      	movs	r0, #36	; 0x24
    2994:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    2996:	4f33      	ldr	r7, [pc, #204]	; (2a64 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2998:	4e33      	ldr	r6, [pc, #204]	; (2a68 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    299a:	a802      	add	r0, sp, #8
    299c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    299e:	23c0      	movs	r3, #192	; 0xc0
    29a0:	05db      	lsls	r3, r3, #23
    29a2:	2580      	movs	r5, #128	; 0x80
    29a4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    29a6:	22a0      	movs	r2, #160	; 0xa0
    29a8:	4930      	ldr	r1, [pc, #192]	; (2a6c <eink_hink_e0154a05_put_display_buffer+0x124>)
    29aa:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    29ac:	2190      	movs	r1, #144	; 0x90
    29ae:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    29b0:	4053      	eors	r3, r2
    29b2:	401c      	ands	r4, r3
    29b4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    29b6:	a802      	add	r0, sp, #8
    29b8:	47b0      	blx	r6
    29ba:	4225      	tst	r5, r4
    29bc:	d1ed      	bne.n	299a <eink_hink_e0154a05_put_display_buffer+0x52>
    if(refresh_display) {
    29be:	4643      	mov	r3, r8
    29c0:	2b00      	cmp	r3, #0
    29c2:	d103      	bne.n	29cc <eink_hink_e0154a05_put_display_buffer+0x84>
}
    29c4:	b006      	add	sp, #24
    29c6:	bc04      	pop	{r2}
    29c8:	4690      	mov	r8, r2
    29ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    29cc:	4b28      	ldr	r3, [pc, #160]	; (2a70 <eink_hink_e0154a05_put_display_buffer+0x128>)
    29ce:	785b      	ldrb	r3, [r3, #1]
    29d0:	2b01      	cmp	r3, #1
    29d2:	d035      	beq.n	2a40 <eink_hink_e0154a05_put_display_buffer+0xf8>
        eink_data[0] = 0xF7; /* Slow Update */
    29d4:	22f7      	movs	r2, #247	; 0xf7
    29d6:	ab01      	add	r3, sp, #4
    29d8:	701a      	strb	r2, [r3, #0]
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    29da:	2201      	movs	r2, #1
    29dc:	a901      	add	r1, sp, #4
    29de:	2022      	movs	r0, #34	; 0x22
    29e0:	4b1d      	ldr	r3, [pc, #116]	; (2a58 <eink_hink_e0154a05_put_display_buffer+0x110>)
    29e2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    29e4:	4f1f      	ldr	r7, [pc, #124]	; (2a64 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    29e6:	4e20      	ldr	r6, [pc, #128]	; (2a68 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    29e8:	a803      	add	r0, sp, #12
    29ea:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    29ec:	23c0      	movs	r3, #192	; 0xc0
    29ee:	05db      	lsls	r3, r3, #23
    29f0:	2580      	movs	r5, #128	; 0x80
    29f2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    29f4:	22a0      	movs	r2, #160	; 0xa0
    29f6:	491d      	ldr	r1, [pc, #116]	; (2a6c <eink_hink_e0154a05_put_display_buffer+0x124>)
    29f8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    29fa:	2190      	movs	r1, #144	; 0x90
    29fc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    29fe:	4053      	eors	r3, r2
    2a00:	401c      	ands	r4, r3
    2a02:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2a04:	a803      	add	r0, sp, #12
    2a06:	47b0      	blx	r6
    2a08:	4225      	tst	r5, r4
    2a0a:	d1ed      	bne.n	29e8 <eink_hink_e0154a05_put_display_buffer+0xa0>
    eink_write_data(SSD1608_MA, 0, 0);
    2a0c:	2200      	movs	r2, #0
    2a0e:	2100      	movs	r1, #0
    2a10:	2020      	movs	r0, #32
    2a12:	4b11      	ldr	r3, [pc, #68]	; (2a58 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2a14:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2a16:	4f13      	ldr	r7, [pc, #76]	; (2a64 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2a18:	4e13      	ldr	r6, [pc, #76]	; (2a68 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2a1a:	a804      	add	r0, sp, #16
    2a1c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2a1e:	23c0      	movs	r3, #192	; 0xc0
    2a20:	05db      	lsls	r3, r3, #23
    2a22:	2580      	movs	r5, #128	; 0x80
    2a24:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2a26:	22a0      	movs	r2, #160	; 0xa0
    2a28:	4910      	ldr	r1, [pc, #64]	; (2a6c <eink_hink_e0154a05_put_display_buffer+0x124>)
    2a2a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2a2c:	2190      	movs	r1, #144	; 0x90
    2a2e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2a30:	4053      	eors	r3, r2
    2a32:	401c      	ands	r4, r3
    2a34:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2a36:	a804      	add	r0, sp, #16
    2a38:	47b0      	blx	r6
    2a3a:	4225      	tst	r5, r4
    2a3c:	d1ed      	bne.n	2a1a <eink_hink_e0154a05_put_display_buffer+0xd2>
    2a3e:	e7c1      	b.n	29c4 <eink_hink_e0154a05_put_display_buffer+0x7c>
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2a40:	4b0b      	ldr	r3, [pc, #44]	; (2a70 <eink_hink_e0154a05_put_display_buffer+0x128>)
    2a42:	789b      	ldrb	r3, [r3, #2]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d103      	bne.n	2a50 <eink_hink_e0154a05_put_display_buffer+0x108>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    2a48:	22c7      	movs	r2, #199	; 0xc7
    2a4a:	ab01      	add	r3, sp, #4
    2a4c:	701a      	strb	r2, [r3, #0]
    2a4e:	e7c4      	b.n	29da <eink_hink_e0154a05_put_display_buffer+0x92>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    2a50:	22ff      	movs	r2, #255	; 0xff
    2a52:	ab01      	add	r3, sp, #4
    2a54:	701a      	strb	r2, [r3, #0]
    2a56:	e7c0      	b.n	29da <eink_hink_e0154a05_put_display_buffer+0x92>
    2a58:	00001bd9 	.word	0x00001bd9
    2a5c:	20000424 	.word	0x20000424
    2a60:	00001388 	.word	0x00001388
    2a64:	0000034d 	.word	0x0000034d
    2a68:	0000035b 	.word	0x0000035b
    2a6c:	41004400 	.word	0x41004400
    2a70:	200003ac 	.word	0x200003ac

00002a74 <eink_et011tt2_put_display_buffer>:
{
    2a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a76:	b087      	sub	sp, #28
    2a78:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2a7a:	a904      	add	r1, sp, #16
    2a7c:	2300      	movs	r3, #0
    2a7e:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2a80:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2a82:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0xEF; /* W = 239 */
    2a84:	22ef      	movs	r2, #239	; 0xef
    2a86:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2a88:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xEF; /* H = 239 */
    2a8a:	714a      	strb	r2, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2a8c:	3ae9      	subs	r2, #233	; 0xe9
    2a8e:	2014      	movs	r0, #20
    2a90:	4c2a      	ldr	r4, [pc, #168]	; (2b3c <eink_et011tt2_put_display_buffer+0xc8>)
    2a92:	47a0      	blx	r4
    eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    2a94:	4b2a      	ldr	r3, [pc, #168]	; (2b40 <eink_et011tt2_put_display_buffer+0xcc>)
    2a96:	681b      	ldr	r3, [r3, #0]
    2a98:	6959      	ldr	r1, [r3, #20]
    2a9a:	22e1      	movs	r2, #225	; 0xe1
    2a9c:	0192      	lsls	r2, r2, #6
    2a9e:	2013      	movs	r0, #19
    2aa0:	47a0      	blx	r4
    if(refresh_display) {
    2aa2:	2d00      	cmp	r5, #0
    2aa4:	d101      	bne.n	2aaa <eink_et011tt2_put_display_buffer+0x36>
}
    2aa6:	b007      	add	sp, #28
    2aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_write_data(UC8173_PON, 0, 0);
    2aaa:	2200      	movs	r2, #0
    2aac:	2100      	movs	r1, #0
    2aae:	2004      	movs	r0, #4
    2ab0:	4b22      	ldr	r3, [pc, #136]	; (2b3c <eink_et011tt2_put_display_buffer+0xc8>)
    2ab2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2ab4:	4f23      	ldr	r7, [pc, #140]	; (2b44 <eink_et011tt2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    2ab6:	4e24      	ldr	r6, [pc, #144]	; (2b48 <eink_et011tt2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2ab8:	4668      	mov	r0, sp
    2aba:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2abc:	23c0      	movs	r3, #192	; 0xc0
    2abe:	05db      	lsls	r3, r3, #23
    2ac0:	2580      	movs	r5, #128	; 0x80
    2ac2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2ac4:	22a0      	movs	r2, #160	; 0xa0
    2ac6:	4921      	ldr	r1, [pc, #132]	; (2b4c <eink_et011tt2_put_display_buffer+0xd8>)
    2ac8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2aca:	2190      	movs	r1, #144	; 0x90
    2acc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2ace:	4053      	eors	r3, r2
    2ad0:	401c      	ands	r4, r3
    2ad2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2ad4:	4668      	mov	r0, sp
    2ad6:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2ad8:	4225      	tst	r5, r4
    2ada:	d0ed      	beq.n	2ab8 <eink_et011tt2_put_display_buffer+0x44>
	eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_VCOM_A2, 32);
    2adc:	2220      	movs	r2, #32
    2ade:	2100      	movs	r1, #0
    2ae0:	2020      	movs	r0, #32
    2ae2:	4c16      	ldr	r4, [pc, #88]	; (2b3c <eink_et011tt2_put_display_buffer+0xc8>)
    2ae4:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ET011TT2_WF_A2, 512);
    2ae6:	2280      	movs	r2, #128	; 0x80
    2ae8:	0092      	lsls	r2, r2, #2
    2aea:	21a9      	movs	r1, #169	; 0xa9
    2aec:	2022      	movs	r0, #34	; 0x22
    2aee:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ET011TT2_FT_A2, 128);
    2af0:	2280      	movs	r2, #128	; 0x80
    2af2:	2100      	movs	r1, #0
    2af4:	2026      	movs	r0, #38	; 0x26
    2af6:	47a0      	blx	r4
    eink_data[0] = 0x00; /* GU2 Update Mode */
    2af8:	a902      	add	r1, sp, #8
    2afa:	2300      	movs	r3, #0
    2afc:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2afe:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2b00:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2b02:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0xEF; /* W = 249 */
    2b04:	22ef      	movs	r2, #239	; 0xef
    2b06:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2b08:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xEF; /* H = 249 */
    2b0a:	718a      	strb	r2, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2b0c:	3ae8      	subs	r2, #232	; 0xe8
    2b0e:	2012      	movs	r0, #18
    2b10:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2b12:	4f0c      	ldr	r7, [pc, #48]	; (2b44 <eink_et011tt2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    2b14:	4e0c      	ldr	r6, [pc, #48]	; (2b48 <eink_et011tt2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2b16:	a801      	add	r0, sp, #4
    2b18:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2b1a:	23c0      	movs	r3, #192	; 0xc0
    2b1c:	05db      	lsls	r3, r3, #23
    2b1e:	2580      	movs	r5, #128	; 0x80
    2b20:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2b22:	22a0      	movs	r2, #160	; 0xa0
    2b24:	4909      	ldr	r1, [pc, #36]	; (2b4c <eink_et011tt2_put_display_buffer+0xd8>)
    2b26:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b28:	2190      	movs	r1, #144	; 0x90
    2b2a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2b2c:	4053      	eors	r3, r2
    2b2e:	401c      	ands	r4, r3
    2b30:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b32:	a801      	add	r0, sp, #4
    2b34:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2b36:	4225      	tst	r5, r4
    2b38:	d0ed      	beq.n	2b16 <eink_et011tt2_put_display_buffer+0xa2>
    2b3a:	e7b4      	b.n	2aa6 <eink_et011tt2_put_display_buffer+0x32>
    2b3c:	00001bd9 	.word	0x00001bd9
    2b40:	20000424 	.word	0x20000424
    2b44:	0000034d 	.word	0x0000034d
    2b48:	0000035b 	.word	0x0000035b
    2b4c:	41004400 	.word	0x41004400

00002b50 <eink_ed028tc1_put_display_buffer>:
{
    2b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b52:	b089      	sub	sp, #36	; 0x24
    2b54:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2b56:	a906      	add	r1, sp, #24
    2b58:	2300      	movs	r3, #0
    2b5a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2b5c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2b5e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00;
    2b60:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x02; /* W = 600 */
    2b62:	3302      	adds	r3, #2
    2b64:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x58;
    2b66:	3356      	adds	r3, #86	; 0x56
    2b68:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x01; /* H = 480 */
    2b6a:	3b57      	subs	r3, #87	; 0x57
    2b6c:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0xE0;
    2b6e:	33df      	adds	r3, #223	; 0xdf
    2b70:	71cb      	strb	r3, [r1, #7]
    eink_write_data(UC8177_DTMW, eink_data, 8);
    2b72:	2208      	movs	r2, #8
    2b74:	2083      	movs	r0, #131	; 0x83
    2b76:	4c33      	ldr	r4, [pc, #204]	; (2c44 <eink_ed028tc1_put_display_buffer+0xf4>)
    2b78:	47a0      	blx	r4
    eink_write_data(UC8177_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED028TC1_DISPLAY_BUFFER_SIZE);
    2b7a:	4b33      	ldr	r3, [pc, #204]	; (2c48 <eink_ed028tc1_put_display_buffer+0xf8>)
    2b7c:	681b      	ldr	r3, [r3, #0]
    2b7e:	6919      	ldr	r1, [r3, #16]
    2b80:	4a32      	ldr	r2, [pc, #200]	; (2c4c <eink_ed028tc1_put_display_buffer+0xfc>)
    2b82:	2010      	movs	r0, #16
    2b84:	47a0      	blx	r4
    if((uc8177_global_instance.display_config.display_rotation == ROTATE_90) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180)) {
    2b86:	4b32      	ldr	r3, [pc, #200]	; (2c50 <eink_ed028tc1_put_display_buffer+0x100>)
    2b88:	781b      	ldrb	r3, [r3, #0]
    2b8a:	2b01      	cmp	r3, #1
    2b8c:	d00f      	beq.n	2bae <eink_ed028tc1_put_display_buffer+0x5e>
    2b8e:	4b30      	ldr	r3, [pc, #192]	; (2c50 <eink_ed028tc1_put_display_buffer+0x100>)
    2b90:	781b      	ldrb	r3, [r3, #0]
    2b92:	2b02      	cmp	r3, #2
    2b94:	d00b      	beq.n	2bae <eink_ed028tc1_put_display_buffer+0x5e>
        eink_data[0] = 0x02;
    2b96:	2202      	movs	r2, #2
    2b98:	ab06      	add	r3, sp, #24
    2b9a:	701a      	strb	r2, [r3, #0]
    eink_write_data(UC8177_GDOS, eink_data, 1);
    2b9c:	2201      	movs	r2, #1
    2b9e:	a906      	add	r1, sp, #24
    2ba0:	20e0      	movs	r0, #224	; 0xe0
    2ba2:	4b28      	ldr	r3, [pc, #160]	; (2c44 <eink_ed028tc1_put_display_buffer+0xf4>)
    2ba4:	4798      	blx	r3
    if(refresh_display) {
    2ba6:	2d00      	cmp	r5, #0
    2ba8:	d105      	bne.n	2bb6 <eink_ed028tc1_put_display_buffer+0x66>
}
    2baa:	b009      	add	sp, #36	; 0x24
    2bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_data[0] = 0x03;
    2bae:	2203      	movs	r2, #3
    2bb0:	ab06      	add	r3, sp, #24
    2bb2:	701a      	strb	r2, [r3, #0]
    2bb4:	e7f2      	b.n	2b9c <eink_ed028tc1_put_display_buffer+0x4c>
    eink_write_data(UC8177_PON, 0, 0);
    2bb6:	2200      	movs	r2, #0
    2bb8:	2100      	movs	r1, #0
    2bba:	2004      	movs	r0, #4
    2bbc:	4b21      	ldr	r3, [pc, #132]	; (2c44 <eink_ed028tc1_put_display_buffer+0xf4>)
    2bbe:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2bc0:	4f24      	ldr	r7, [pc, #144]	; (2c54 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2bc2:	4e25      	ldr	r6, [pc, #148]	; (2c58 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2bc4:	a801      	add	r0, sp, #4
    2bc6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2bc8:	23c0      	movs	r3, #192	; 0xc0
    2bca:	05db      	lsls	r3, r3, #23
    2bcc:	2580      	movs	r5, #128	; 0x80
    2bce:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2bd0:	22a0      	movs	r2, #160	; 0xa0
    2bd2:	4922      	ldr	r1, [pc, #136]	; (2c5c <eink_ed028tc1_put_display_buffer+0x10c>)
    2bd4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2bd6:	2190      	movs	r1, #144	; 0x90
    2bd8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2bda:	4053      	eors	r3, r2
    2bdc:	401c      	ands	r4, r3
    2bde:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2be0:	a801      	add	r0, sp, #4
    2be2:	47b0      	blx	r6
    2be4:	4225      	tst	r5, r4
    2be6:	d0ed      	beq.n	2bc4 <eink_ed028tc1_put_display_buffer+0x74>
    eink_data[0] = 0x18; /* Update Mode 1 */
    2be8:	a903      	add	r1, sp, #12
    2bea:	2318      	movs	r3, #24
    2bec:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2bee:	2300      	movs	r3, #0
    2bf0:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2bf2:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2bf4:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    2bf6:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    2bf8:	3302      	adds	r3, #2
    2bfa:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    2bfc:	3356      	adds	r3, #86	; 0x56
    2bfe:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    2c00:	3b57      	subs	r3, #87	; 0x57
    2c02:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    2c04:	33df      	adds	r3, #223	; 0xdf
    2c06:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    2c08:	2209      	movs	r2, #9
    2c0a:	2012      	movs	r0, #18
    2c0c:	4c0d      	ldr	r4, [pc, #52]	; (2c44 <eink_ed028tc1_put_display_buffer+0xf4>)
    2c0e:	47a0      	blx	r4
    eink_write_data(UC8177_POF, 0, 0);
    2c10:	2200      	movs	r2, #0
    2c12:	2100      	movs	r1, #0
    2c14:	2002      	movs	r0, #2
    2c16:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2c18:	4f0e      	ldr	r7, [pc, #56]	; (2c54 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2c1a:	4e0f      	ldr	r6, [pc, #60]	; (2c58 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2c1c:	a802      	add	r0, sp, #8
    2c1e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c20:	23c0      	movs	r3, #192	; 0xc0
    2c22:	05db      	lsls	r3, r3, #23
    2c24:	2580      	movs	r5, #128	; 0x80
    2c26:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c28:	22a0      	movs	r2, #160	; 0xa0
    2c2a:	490c      	ldr	r1, [pc, #48]	; (2c5c <eink_ed028tc1_put_display_buffer+0x10c>)
    2c2c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c2e:	2190      	movs	r1, #144	; 0x90
    2c30:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2c32:	4053      	eors	r3, r2
    2c34:	401c      	ands	r4, r3
    2c36:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c38:	a802      	add	r0, sp, #8
    2c3a:	47b0      	blx	r6
    2c3c:	4225      	tst	r5, r4
    2c3e:	d0ed      	beq.n	2c1c <eink_ed028tc1_put_display_buffer+0xcc>
    2c40:	e7b3      	b.n	2baa <eink_ed028tc1_put_display_buffer+0x5a>
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	00001bd9 	.word	0x00001bd9
    2c48:	20000424 	.word	0x20000424
    2c4c:	00023280 	.word	0x00023280
    2c50:	200003a4 	.word	0x200003a4
    2c54:	0000034d 	.word	0x0000034d
    2c58:	0000035b 	.word	0x0000035b
    2c5c:	41004400 	.word	0x41004400

00002c60 <eink_ed013tc1_put_display_buffer>:
{
    2c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c62:	b089      	sub	sp, #36	; 0x24
    2c64:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2c66:	a906      	add	r1, sp, #24
    2c68:	2300      	movs	r3, #0
    2c6a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2c6c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2c6e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x7F; /* W = 127 */
    2c70:	227f      	movs	r2, #127	; 0x7f
    2c72:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2c74:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xFF; /* H = 255 */
    2c76:	33ff      	adds	r3, #255	; 0xff
    2c78:	714b      	strb	r3, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2c7a:	3a79      	subs	r2, #121	; 0x79
    2c7c:	2014      	movs	r0, #20
    2c7e:	4c3e      	ldr	r4, [pc, #248]	; (2d78 <eink_ed013tc1_put_display_buffer+0x118>)
    2c80:	47a0      	blx	r4
    eink_write_data(UC8173_DTM4, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    2c82:	4b3e      	ldr	r3, [pc, #248]	; (2d7c <eink_ed013tc1_put_display_buffer+0x11c>)
    2c84:	681b      	ldr	r3, [r3, #0]
    2c86:	6959      	ldr	r1, [r3, #20]
    2c88:	2280      	movs	r2, #128	; 0x80
    2c8a:	0152      	lsls	r2, r2, #5
    2c8c:	2016      	movs	r0, #22
    2c8e:	47a0      	blx	r4
    if(refresh_display) {
    2c90:	2d00      	cmp	r5, #0
    2c92:	d10d      	bne.n	2cb0 <eink_ed013tc1_put_display_buffer+0x50>
{
    2c94:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2c96:	4c39      	ldr	r4, [pc, #228]	; (2d7c <eink_ed013tc1_put_display_buffer+0x11c>)
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2c98:	2080      	movs	r0, #128	; 0x80
    2c9a:	0140      	lsls	r0, r0, #5
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2c9c:	6822      	ldr	r2, [r4, #0]
    2c9e:	6951      	ldr	r1, [r2, #20]
    2ca0:	5cc9      	ldrb	r1, [r1, r3]
    2ca2:	6912      	ldr	r2, [r2, #16]
    2ca4:	54d1      	strb	r1, [r2, r3]
    2ca6:	3301      	adds	r3, #1
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2ca8:	4283      	cmp	r3, r0
    2caa:	d1f7      	bne.n	2c9c <eink_ed013tc1_put_display_buffer+0x3c>
}
    2cac:	b009      	add	sp, #36	; 0x24
    2cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_write_data(UC8173_PON, 0, 0);
    2cb0:	2200      	movs	r2, #0
    2cb2:	2100      	movs	r1, #0
    2cb4:	2004      	movs	r0, #4
    2cb6:	4b30      	ldr	r3, [pc, #192]	; (2d78 <eink_ed013tc1_put_display_buffer+0x118>)
    2cb8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2cba:	4f31      	ldr	r7, [pc, #196]	; (2d80 <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2cbc:	4e31      	ldr	r6, [pc, #196]	; (2d84 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2cbe:	a801      	add	r0, sp, #4
    2cc0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2cc2:	23c0      	movs	r3, #192	; 0xc0
    2cc4:	05db      	lsls	r3, r3, #23
    2cc6:	2580      	movs	r5, #128	; 0x80
    2cc8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2cca:	22a0      	movs	r2, #160	; 0xa0
    2ccc:	492e      	ldr	r1, [pc, #184]	; (2d88 <eink_ed013tc1_put_display_buffer+0x128>)
    2cce:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2cd0:	2190      	movs	r1, #144	; 0x90
    2cd2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2cd4:	4053      	eors	r3, r2
    2cd6:	401c      	ands	r4, r3
    2cd8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2cda:	a801      	add	r0, sp, #4
    2cdc:	47b0      	blx	r6
    2cde:	4225      	tst	r5, r4
    2ce0:	d0ed      	beq.n	2cbe <eink_ed013tc1_put_display_buffer+0x5e>
	eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    2ce2:	2220      	movs	r2, #32
    2ce4:	2155      	movs	r1, #85	; 0x55
    2ce6:	2020      	movs	r0, #32
    2ce8:	4c23      	ldr	r4, [pc, #140]	; (2d78 <eink_ed013tc1_put_display_buffer+0x118>)
    2cea:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    2cec:	2280      	movs	r2, #128	; 0x80
    2cee:	0092      	lsls	r2, r2, #2
    2cf0:	2181      	movs	r1, #129	; 0x81
    2cf2:	2022      	movs	r0, #34	; 0x22
    2cf4:	47a0      	blx	r4
	eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);
    2cf6:	2280      	movs	r2, #128	; 0x80
    2cf8:	2100      	movs	r1, #0
    2cfa:	2026      	movs	r0, #38	; 0x26
    2cfc:	47a0      	blx	r4
    eink_data[0] = 0x01; /* GU2 Update Mode */
    2cfe:	a904      	add	r1, sp, #16
    2d00:	2301      	movs	r3, #1
    2d02:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2d04:	2300      	movs	r3, #0
    2d06:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2d08:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2d0a:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    2d0c:	227f      	movs	r2, #127	; 0x7f
    2d0e:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2d10:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    2d12:	33ff      	adds	r3, #255	; 0xff
    2d14:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2d16:	3a78      	subs	r2, #120	; 0x78
    2d18:	2012      	movs	r0, #18
    2d1a:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2d1c:	4f18      	ldr	r7, [pc, #96]	; (2d80 <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2d1e:	4e19      	ldr	r6, [pc, #100]	; (2d84 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2d20:	a802      	add	r0, sp, #8
    2d22:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2d24:	23c0      	movs	r3, #192	; 0xc0
    2d26:	05db      	lsls	r3, r3, #23
    2d28:	2580      	movs	r5, #128	; 0x80
    2d2a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d2c:	22a0      	movs	r2, #160	; 0xa0
    2d2e:	4916      	ldr	r1, [pc, #88]	; (2d88 <eink_ed013tc1_put_display_buffer+0x128>)
    2d30:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d32:	2190      	movs	r1, #144	; 0x90
    2d34:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d36:	4053      	eors	r3, r2
    2d38:	401c      	ands	r4, r3
    2d3a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2d3c:	a802      	add	r0, sp, #8
    2d3e:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2d40:	4225      	tst	r5, r4
    2d42:	d0ed      	beq.n	2d20 <eink_ed013tc1_put_display_buffer+0xc0>
    eink_write_data(UC8173_POF, 0, 0);
    2d44:	2200      	movs	r2, #0
    2d46:	2100      	movs	r1, #0
    2d48:	2002      	movs	r0, #2
    2d4a:	4b0b      	ldr	r3, [pc, #44]	; (2d78 <eink_ed013tc1_put_display_buffer+0x118>)
    2d4c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2d4e:	4f0c      	ldr	r7, [pc, #48]	; (2d80 <eink_ed013tc1_put_display_buffer+0x120>)
	CRITICAL_SECTION_LEAVE();
    2d50:	4e0c      	ldr	r6, [pc, #48]	; (2d84 <eink_ed013tc1_put_display_buffer+0x124>)
	CRITICAL_SECTION_ENTER();
    2d52:	a803      	add	r0, sp, #12
    2d54:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2d56:	23c0      	movs	r3, #192	; 0xc0
    2d58:	05db      	lsls	r3, r3, #23
    2d5a:	2580      	movs	r5, #128	; 0x80
    2d5c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d5e:	22a0      	movs	r2, #160	; 0xa0
    2d60:	4909      	ldr	r1, [pc, #36]	; (2d88 <eink_ed013tc1_put_display_buffer+0x128>)
    2d62:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d64:	2190      	movs	r1, #144	; 0x90
    2d66:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d68:	4053      	eors	r3, r2
    2d6a:	401c      	ands	r4, r3
    2d6c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2d6e:	a803      	add	r0, sp, #12
    2d70:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    2d72:	4225      	tst	r5, r4
    2d74:	d1ed      	bne.n	2d52 <eink_ed013tc1_put_display_buffer+0xf2>
    2d76:	e78d      	b.n	2c94 <eink_ed013tc1_put_display_buffer+0x34>
    2d78:	00001bd9 	.word	0x00001bd9
    2d7c:	20000424 	.word	0x20000424
    2d80:	0000034d 	.word	0x0000034d
    2d84:	0000035b 	.word	0x0000035b
    2d88:	41004400 	.word	0x41004400

00002d8c <_eink_ite_write_data>:
void _eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes,
        uint8_t fast_write)
{   
    2d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d8e:	0004      	movs	r4, r0
    2d90:	0015      	movs	r5, r2
    uint32_t i, j, sendWords_m, sendWords_r;
    
    eink_ite_wait_for_hrdy();
    2d92:	4b12      	ldr	r3, [pc, #72]	; (2ddc <_eink_ite_write_data+0x50>)
    2d94:	4798      	blx	r3
    if (command != 0) {
    2d96:	2c00      	cmp	r4, #0
    2d98:	d11d      	bne.n	2dd6 <_eink_ite_write_data+0x4a>
        /* Set CSB LOW to enable communication to the display */
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
    }
    
    eink_ite_wait_for_hrdy();
    2d9a:	4b10      	ldr	r3, [pc, #64]	; (2ddc <_eink_ite_write_data+0x50>)
    2d9c:	4798      	blx	r3
    if (data_bytes != 0) {
    2d9e:	2d00      	cmp	r5, #0
    2da0:	d018      	beq.n	2dd4 <_eink_ite_write_data+0x48>
        /* Data burst must be sent 1024 words at a time */
        sendWords_r = data_bytes % 2048;
    2da2:	056e      	lsls	r6, r5, #21
    2da4:	0d76      	lsrs	r6, r6, #21
        sendWords_m = (data_bytes - sendWords_r) / 2048;
    2da6:	1bad      	subs	r5, r5, r6
    2da8:	0aed      	lsrs	r5, r5, #11
        
        /* If we have more than 1024 words, start sending them in bursts */
        for(j=0; j<sendWords_m; j++)
    2daa:	2400      	movs	r4, #0
    2dac:	2d00      	cmp	r5, #0
    2dae:	d009      	beq.n	2dc4 <_eink_ite_write_data+0x38>
            }           
            /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
            gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
            eink_ite_wait_for_hrdy();
    2db0:	4f0a      	ldr	r7, [pc, #40]	; (2ddc <_eink_ite_write_data+0x50>)
{   
    2db2:	2380      	movs	r3, #128	; 0x80
    2db4:	011b      	lsls	r3, r3, #4
    2db6:	3b01      	subs	r3, #1
            for (i=0; i<2048; i++)
    2db8:	2b00      	cmp	r3, #0
    2dba:	d1fc      	bne.n	2db6 <_eink_ite_write_data+0x2a>
            eink_ite_wait_for_hrdy();
    2dbc:	47b8      	blx	r7
        for(j=0; j<sendWords_m; j++)
    2dbe:	3401      	adds	r4, #1
    2dc0:	42a5      	cmp	r5, r4
    2dc2:	d1f6      	bne.n	2db2 <_eink_ite_write_data+0x26>
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 0);
#endif
        eink_ite_send_raw_hword(0x0000);
        /* Send the remaining data (or all the data if there was less than 1024 words */
        for (i=0; i<sendWords_r; i++) {
    2dc4:	2e00      	cmp	r6, #0
    2dc6:	d003      	beq.n	2dd0 <_eink_ite_write_data+0x44>
    2dc8:	2300      	movs	r3, #0
    2dca:	3301      	adds	r3, #1
    2dcc:	429e      	cmp	r6, r3
    2dce:	d1fc      	bne.n	2dca <_eink_ite_write_data+0x3e>
        }
        /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
        eink_ite_wait_for_hrdy();
    2dd0:	4b02      	ldr	r3, [pc, #8]	; (2ddc <_eink_ite_write_data+0x50>)
    2dd2:	4798      	blx	r3
    }
}
    2dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eink_ite_wait_for_hrdy();
    2dd6:	4b01      	ldr	r3, [pc, #4]	; (2ddc <_eink_ite_write_data+0x50>)
    2dd8:	4798      	blx	r3
    2dda:	e7de      	b.n	2d9a <_eink_ite_write_data+0xe>
    2ddc:	00000575 	.word	0x00000575

00002de0 <eink_ite_write_data>:
 */
void eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    2de0:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 0);
    2de2:	2300      	movs	r3, #0
    2de4:	4c01      	ldr	r4, [pc, #4]	; (2dec <eink_ite_write_data+0xc>)
    2de6:	47a0      	blx	r4
}
    2de8:	bd10      	pop	{r4, pc}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	00002d8d 	.word	0x00002d8d

00002df0 <eink_it8951_refresh_partial_display>:
    eink_coordinate show_x,
    eink_coordinate show_y,
    eink_coordinate show_w,
    eink_coordinate show_h,
    uint8_t update_mode)
{
    2df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2df2:	b085      	sub	sp, #20
    2df4:	ac0a      	add	r4, sp, #40	; 0x28
    2df6:	7825      	ldrb	r5, [r4, #0]
    uint16_t eink_data[5];
    switch(it8951_global_instance.display_rotation)
    2df8:	2430      	movs	r4, #48	; 0x30
    2dfa:	4e26      	ldr	r6, [pc, #152]	; (2e94 <eink_it8951_refresh_partial_display+0xa4>)
    2dfc:	5d34      	ldrb	r4, [r6, r4]
    2dfe:	b2e4      	uxtb	r4, r4
    2e00:	2c01      	cmp	r4, #1
    2e02:	d025      	beq.n	2e50 <eink_it8951_refresh_partial_display+0x60>
    2e04:	2c00      	cmp	r4, #0
    2e06:	d01d      	beq.n	2e44 <eink_it8951_refresh_partial_display+0x54>
    2e08:	2c02      	cmp	r4, #2
    2e0a:	d02b      	beq.n	2e64 <eink_it8951_refresh_partial_display+0x74>
    2e0c:	2c03      	cmp	r4, #3
    2e0e:	d036      	beq.n	2e7e <eink_it8951_refresh_partial_display+0x8e>
            eink_data[1] = (uint16_t) show_y;
            eink_data[2] = (uint16_t) show_w;
            eink_data[3] = (uint16_t) show_h;
            break;
    }
    eink_data[4] = (uint16_t) update_mode;
    2e10:	a901      	add	r1, sp, #4
    2e12:	810d      	strh	r5, [r1, #8]
    /* Send I80 Display Command */
    eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2e14:	2201      	movs	r2, #1
    2e16:	2034      	movs	r0, #52	; 0x34
    2e18:	4c1f      	ldr	r4, [pc, #124]	; (2e98 <eink_it8951_refresh_partial_display+0xa8>)
    2e1a:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[1], 1);
    2e1c:	2201      	movs	r2, #1
    2e1e:	466b      	mov	r3, sp
    2e20:	1d99      	adds	r1, r3, #6
    2e22:	2000      	movs	r0, #0
    2e24:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[2], 1);
    2e26:	2201      	movs	r2, #1
    2e28:	a902      	add	r1, sp, #8
    2e2a:	2000      	movs	r0, #0
    2e2c:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[3], 1);
    2e2e:	2201      	movs	r2, #1
    2e30:	210a      	movs	r1, #10
    2e32:	4469      	add	r1, sp
    2e34:	2000      	movs	r0, #0
    2e36:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[4], 1);
    2e38:	2201      	movs	r2, #1
    2e3a:	a903      	add	r1, sp, #12
    2e3c:	2000      	movs	r0, #0
    2e3e:	47a0      	blx	r4
}
    2e40:	b005      	add	sp, #20
    2e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_data[0] = (uint16_t) show_y;
    2e44:	ac01      	add	r4, sp, #4
    2e46:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) show_x;
    2e48:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2e4a:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2e4c:	80e2      	strh	r2, [r4, #6]
            break;
    2e4e:	e7df      	b.n	2e10 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) show_x;
    2e50:	ac01      	add	r4, sp, #4
    2e52:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_y-show_h;
    2e54:	480f      	ldr	r0, [pc, #60]	; (2e94 <eink_it8951_refresh_partial_display+0xa4>)
    2e56:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2e58:	1a41      	subs	r1, r0, r1
    2e5a:	1ac9      	subs	r1, r1, r3
    2e5c:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    2e5e:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    2e60:	80e3      	strh	r3, [r4, #6]
            break;
    2e62:	e7d5      	b.n	2e10 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_y-show_h;
    2e64:	4f0b      	ldr	r7, [pc, #44]	; (2e94 <eink_it8951_refresh_partial_display+0xa4>)
    2e66:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
    2e68:	ac01      	add	r4, sp, #4
    2e6a:	1a71      	subs	r1, r6, r1
    2e6c:	1ac9      	subs	r1, r1, r3
    2e6e:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_x-show_w;
    2e70:	8d39      	ldrh	r1, [r7, #40]	; 0x28
    2e72:	1a08      	subs	r0, r1, r0
    2e74:	1a80      	subs	r0, r0, r2
    2e76:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2e78:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2e7a:	80e2      	strh	r2, [r4, #6]
            break;
    2e7c:	e7c8      	b.n	2e10 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_x-show_w;
    2e7e:	4c05      	ldr	r4, [pc, #20]	; (2e94 <eink_it8951_refresh_partial_display+0xa4>)
    2e80:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
    2e82:	ac01      	add	r4, sp, #4
    2e84:	1a30      	subs	r0, r6, r0
    2e86:	1a80      	subs	r0, r0, r2
    2e88:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) show_y;
    2e8a:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    2e8c:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    2e8e:	80e3      	strh	r3, [r4, #6]
            break;
    2e90:	e7be      	b.n	2e10 <eink_it8951_refresh_partial_display+0x20>
    2e92:	46c0      	nop			; (mov r8, r8)
    2e94:	200003b4 	.word	0x200003b4
    2e98:	00002de1 	.word	0x00002de1

00002e9c <eink_it8951_refresh_display_mode>:
{
    2e9c:	b510      	push	{r4, lr}
    2e9e:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    2ea0:	a901      	add	r1, sp, #4
    2ea2:	2300      	movs	r3, #0
    2ea4:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    2ea6:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    2ea8:	4b0e      	ldr	r3, [pc, #56]	; (2ee4 <eink_it8951_refresh_display_mode+0x48>)
    2eaa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    2eac:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    2eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2eb0:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    2eb2:	8108      	strh	r0, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2eb4:	2201      	movs	r2, #1
    2eb6:	2034      	movs	r0, #52	; 0x34
    2eb8:	4c0b      	ldr	r4, [pc, #44]	; (2ee8 <eink_it8951_refresh_display_mode+0x4c>)
    2eba:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    2ebc:	2201      	movs	r2, #1
    2ebe:	466b      	mov	r3, sp
    2ec0:	1d99      	adds	r1, r3, #6
    2ec2:	2000      	movs	r0, #0
    2ec4:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    2ec6:	2201      	movs	r2, #1
    2ec8:	a902      	add	r1, sp, #8
    2eca:	2000      	movs	r0, #0
    2ecc:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    2ece:	2201      	movs	r2, #1
    2ed0:	210a      	movs	r1, #10
    2ed2:	4469      	add	r1, sp
    2ed4:	2000      	movs	r0, #0
    2ed6:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    2ed8:	2201      	movs	r2, #1
    2eda:	a903      	add	r1, sp, #12
    2edc:	2000      	movs	r0, #0
    2ede:	47a0      	blx	r4
 }
    2ee0:	b004      	add	sp, #16
    2ee2:	bd10      	pop	{r4, pc}
    2ee4:	200003b4 	.word	0x200003b4
    2ee8:	00002de1 	.word	0x00002de1

00002eec <eink_it8951_put_partial_display_buffer>:
 * \param start_y starting Y coordinate start of the display buffer to send
 * \param window_w width of the display buffer to send
 * \param window_h height of the display buffer to send
 */
void eink_it8951_put_partial_display_buffer(eink_coordinate start_x, eink_coordinate start_y, eink_coordinate window_w, eink_coordinate window_h)
{
    2eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eee:	46de      	mov	lr, fp
    2ef0:	4657      	mov	r7, sl
    2ef2:	464e      	mov	r6, r9
    2ef4:	4645      	mov	r5, r8
    2ef6:	b5e0      	push	{r5, r6, r7, lr}
    2ef8:	b087      	sub	sp, #28
    2efa:	0004      	movs	r4, r0
    2efc:	000d      	movs	r5, r1
    2efe:	9201      	str	r2, [sp, #4]
    2f00:	001f      	movs	r7, r3
    uint16_t eink_data[5], rotation = 0;
    uint16_t* display_buffer;
    uint32_t i, j, k;

    /* Get pointer to Display Buffer */
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    2f02:	4b45      	ldr	r3, [pc, #276]	; (3018 <eink_it8951_put_partial_display_buffer+0x12c>)
    2f04:	681b      	ldr	r3, [r3, #0]
    2f06:	4698      	mov	r8, r3
        
    /* Set Image Buffer Base address (IT8951) */
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    2f08:	4e44      	ldr	r6, [pc, #272]	; (301c <eink_it8951_put_partial_display_buffer+0x130>)
    2f0a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    2f0c:	6b72      	ldr	r2, [r6, #52]	; 0x34
    2f0e:	4692      	mov	sl, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    2f10:	4a43      	ldr	r2, [pc, #268]	; (3020 <eink_it8951_put_partial_display_buffer+0x134>)
    2f12:	a902      	add	r1, sp, #8
    2f14:	800a      	strh	r2, [r1, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    2f16:	0c1b      	lsrs	r3, r3, #16
    2f18:	804b      	strh	r3, [r1, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    2f1a:	2202      	movs	r2, #2
    2f1c:	2011      	movs	r0, #17
    2f1e:	4b41      	ldr	r3, [pc, #260]	; (3024 <eink_it8951_put_partial_display_buffer+0x138>)
    2f20:	469b      	mov	fp, r3
    2f22:	4798      	blx	r3
    uint16_t data_send[2] = {reg_addr, reg_value};
    2f24:	2382      	movs	r3, #130	; 0x82
    2f26:	009b      	lsls	r3, r3, #2
    2f28:	aa02      	add	r2, sp, #8
    2f2a:	8013      	strh	r3, [r2, #0]
    2f2c:	0013      	movs	r3, r2
    2f2e:	4652      	mov	r2, sl
    2f30:	805a      	strh	r2, [r3, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    2f32:	2202      	movs	r2, #2
    2f34:	0019      	movs	r1, r3
    2f36:	2011      	movs	r0, #17
    2f38:	47d8      	blx	fp
    it8951_write_reg(LISAR + 2, usWordH);
    it8951_write_reg(LISAR, usWordL);
    
    /* Set arguments for Load Image Start */
    switch(it8951_global_instance.display_rotation)
    2f3a:	2330      	movs	r3, #48	; 0x30
    2f3c:	5cf3      	ldrb	r3, [r6, r3]
    2f3e:	b2db      	uxtb	r3, r3
    2f40:	2b02      	cmp	r3, #2
    2f42:	d022      	beq.n	2f8a <eink_it8951_put_partial_display_buffer+0x9e>
    2f44:	2b03      	cmp	r3, #3
    2f46:	d022      	beq.n	2f8e <eink_it8951_put_partial_display_buffer+0xa2>
    uint16_t eink_data[5], rotation = 0;
    2f48:	3b01      	subs	r3, #1
    2f4a:	425a      	negs	r2, r3
    2f4c:	4153      	adcs	r3, r2
        case ROTATE_0: rotation = 0; break;
        case ROTATE_90: rotation = 1; break;
        case ROTATE_180: rotation = 2; break;
        case ROTATE_270: rotation = 3; break;
    }
    eink_data[0] = (0 << 8) | (2 << 4) | (rotation);
    2f4e:	a903      	add	r1, sp, #12
    2f50:	2220      	movs	r2, #32
    2f52:	4313      	orrs	r3, r2
    2f54:	800b      	strh	r3, [r1, #0]
    eink_data[1] = start_y;
    2f56:	804d      	strh	r5, [r1, #2]
    eink_data[2] = start_x;
    2f58:	808c      	strh	r4, [r1, #4]
    eink_data[3] = window_h;
    2f5a:	80cf      	strh	r7, [r1, #6]
    eink_data[4] = window_w;
    2f5c:	466b      	mov	r3, sp
    2f5e:	889b      	ldrh	r3, [r3, #4]
    2f60:	810b      	strh	r3, [r1, #8]
    eink_ite_write_data(IT8951_I80_LD_IMG_AREA, eink_data, 5);
    2f62:	2205      	movs	r2, #5
    2f64:	2021      	movs	r0, #33	; 0x21
    2f66:	4b2f      	ldr	r3, [pc, #188]	; (3024 <eink_it8951_put_partial_display_buffer+0x138>)
    2f68:	4798      	blx	r3
    
    /* Move to start of the window within the display buffer */
    if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    2f6a:	2330      	movs	r3, #48	; 0x30
    2f6c:	4a2b      	ldr	r2, [pc, #172]	; (301c <eink_it8951_put_partial_display_buffer+0x130>)
    2f6e:	5cd3      	ldrb	r3, [r2, r3]
    2f70:	2b00      	cmp	r3, #0
    2f72:	d00e      	beq.n	2f92 <eink_it8951_put_partial_display_buffer+0xa6>
    2f74:	2330      	movs	r3, #48	; 0x30
    2f76:	5cd3      	ldrb	r3, [r2, r3]
    2f78:	2b02      	cmp	r3, #2
    2f7a:	d00a      	beq.n	2f92 <eink_it8951_put_partial_display_buffer+0xa6>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    else
        display_buffer += (it8951_global_instance.display_width / 4) * (start_x);
    2f7c:	4b27      	ldr	r3, [pc, #156]	; (301c <eink_it8951_put_partial_display_buffer+0x130>)
    2f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2f80:	089b      	lsrs	r3, r3, #2
    2f82:	435c      	muls	r4, r3
    2f84:	0064      	lsls	r4, r4, #1
    2f86:	4444      	add	r4, r8
    2f88:	e009      	b.n	2f9e <eink_it8951_put_partial_display_buffer+0xb2>
        case ROTATE_180: rotation = 2; break;
    2f8a:	2302      	movs	r3, #2
    2f8c:	e7df      	b.n	2f4e <eink_it8951_put_partial_display_buffer+0x62>
        case ROTATE_270: rotation = 3; break;
    2f8e:	2303      	movs	r3, #3
    2f90:	e7dd      	b.n	2f4e <eink_it8951_put_partial_display_buffer+0x62>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    2f92:	4b22      	ldr	r3, [pc, #136]	; (301c <eink_it8951_put_partial_display_buffer+0x130>)
    2f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    2f96:	089b      	lsrs	r3, r3, #2
    2f98:	435c      	muls	r4, r3
    2f9a:	0064      	lsls	r4, r4, #1
    2f9c:	4444      	add	r4, r8
    display_buffer += (start_y / 4);
    2f9e:	08ad      	lsrs	r5, r5, #2
    2fa0:	006d      	lsls	r5, r5, #1
    2fa2:	1964      	adds	r4, r4, r5
    
    /* Loop through window sending the display buffer */
    for(j = 0; j < window_w; j++)
    2fa4:	9e01      	ldr	r6, [sp, #4]
    2fa6:	2e00      	cmp	r6, #0
    2fa8:	d02a      	beq.n	3000 <eink_it8951_put_partial_display_buffer+0x114>
    {
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    2faa:	08bb      	lsrs	r3, r7, #2
    2fac:	9301      	str	r3, [sp, #4]
        display_buffer += (window_h / 4);
    2fae:	005a      	lsls	r2, r3, #1
    2fb0:	4691      	mov	r9, r2
        
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
        else
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    2fb2:	469a      	mov	sl, r3
    2fb4:	2500      	movs	r5, #0
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    2fb6:	4b1b      	ldr	r3, [pc, #108]	; (3024 <eink_it8951_put_partial_display_buffer+0x138>)
    2fb8:	4698      	mov	r8, r3
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    2fba:	4f18      	ldr	r7, [pc, #96]	; (301c <eink_it8951_put_partial_display_buffer+0x130>)
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
    2fbc:	46bb      	mov	fp, r7
    2fbe:	e009      	b.n	2fd4 <eink_it8951_put_partial_display_buffer+0xe8>
    2fc0:	465b      	mov	r3, fp
    2fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    2fc4:	089b      	lsrs	r3, r3, #2
    2fc6:	4652      	mov	r2, sl
    2fc8:	1a9b      	subs	r3, r3, r2
    2fca:	005b      	lsls	r3, r3, #1
    2fcc:	18e4      	adds	r4, r4, r3
    for(j = 0; j < window_w; j++)
    2fce:	3501      	adds	r5, #1
    2fd0:	42b5      	cmp	r5, r6
    2fd2:	d215      	bcs.n	3000 <eink_it8951_put_partial_display_buffer+0x114>
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    2fd4:	9a01      	ldr	r2, [sp, #4]
    2fd6:	0021      	movs	r1, r4
    2fd8:	2000      	movs	r0, #0
    2fda:	47c0      	blx	r8
        display_buffer += (window_h / 4);
    2fdc:	444c      	add	r4, r9
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    2fde:	2330      	movs	r3, #48	; 0x30
    2fe0:	5cfb      	ldrb	r3, [r7, r3]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d0ec      	beq.n	2fc0 <eink_it8951_put_partial_display_buffer+0xd4>
    2fe6:	2330      	movs	r3, #48	; 0x30
    2fe8:	4a0c      	ldr	r2, [pc, #48]	; (301c <eink_it8951_put_partial_display_buffer+0x130>)
    2fea:	5cd3      	ldrb	r3, [r2, r3]
    2fec:	2b02      	cmp	r3, #2
    2fee:	d0e7      	beq.n	2fc0 <eink_it8951_put_partial_display_buffer+0xd4>
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    2ff0:	4b0a      	ldr	r3, [pc, #40]	; (301c <eink_it8951_put_partial_display_buffer+0x130>)
    2ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2ff4:	089b      	lsrs	r3, r3, #2
    2ff6:	4652      	mov	r2, sl
    2ff8:	1a9b      	subs	r3, r3, r2
    2ffa:	005b      	lsls	r3, r3, #1
    2ffc:	18e4      	adds	r4, r4, r3
    2ffe:	e7e6      	b.n	2fce <eink_it8951_put_partial_display_buffer+0xe2>
    }
    
    /* Send Load Img End Command */
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    3000:	2200      	movs	r2, #0
    3002:	2100      	movs	r1, #0
    3004:	2022      	movs	r0, #34	; 0x22
    3006:	4b07      	ldr	r3, [pc, #28]	; (3024 <eink_it8951_put_partial_display_buffer+0x138>)
    3008:	4798      	blx	r3
}
    300a:	b007      	add	sp, #28
    300c:	bc3c      	pop	{r2, r3, r4, r5}
    300e:	4690      	mov	r8, r2
    3010:	4699      	mov	r9, r3
    3012:	46a2      	mov	sl, r4
    3014:	46ab      	mov	fp, r5
    3016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3018:	20000398 	.word	0x20000398
    301c:	200003b4 	.word	0x200003b4
    3020:	0000020a 	.word	0x0000020a
    3024:	00002de1 	.word	0x00002de1

00003028 <eink_it8951_refresh_display>:
{
    3028:	b510      	push	{r4, lr}
    302a:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    302c:	a901      	add	r1, sp, #4
    302e:	2300      	movs	r3, #0
    3030:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    3032:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    3034:	4b0f      	ldr	r3, [pc, #60]	; (3074 <eink_it8951_refresh_display+0x4c>)
    3036:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    3038:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    303c:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    303e:	2302      	movs	r3, #2
    3040:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    3042:	2201      	movs	r2, #1
    3044:	2034      	movs	r0, #52	; 0x34
    3046:	4c0c      	ldr	r4, [pc, #48]	; (3078 <eink_it8951_refresh_display+0x50>)
    3048:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    304a:	2201      	movs	r2, #1
    304c:	466b      	mov	r3, sp
    304e:	1d99      	adds	r1, r3, #6
    3050:	2000      	movs	r0, #0
    3052:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    3054:	2201      	movs	r2, #1
    3056:	a902      	add	r1, sp, #8
    3058:	2000      	movs	r0, #0
    305a:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    305c:	2201      	movs	r2, #1
    305e:	210a      	movs	r1, #10
    3060:	4469      	add	r1, sp
    3062:	2000      	movs	r0, #0
    3064:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    3066:	2201      	movs	r2, #1
    3068:	a903      	add	r1, sp, #12
    306a:	2000      	movs	r0, #0
    306c:	47a0      	blx	r4
}
    306e:	b004      	add	sp, #16
    3070:	bd10      	pop	{r4, pc}
    3072:	46c0      	nop			; (mov r8, r8)
    3074:	200003b4 	.word	0x200003b4
    3078:	00002de1 	.word	0x00002de1

0000307c <eink_ite_write_data_fast>:
 */
void eink_ite_write_data_fast(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    307c:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 1);
    307e:	2301      	movs	r3, #1
    3080:	4c01      	ldr	r4, [pc, #4]	; (3088 <eink_ite_write_data_fast+0xc>)
    3082:	47a0      	blx	r4
}
    3084:	bd10      	pop	{r4, pc}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	00002d8d 	.word	0x00002d8d

0000308c <eink_it8951_put_display_buffer>:
{
    308c:	b5f0      	push	{r4, r5, r6, r7, lr}
    308e:	46c6      	mov	lr, r8
    3090:	b500      	push	{lr}
    3092:	b084      	sub	sp, #16
    3094:	0005      	movs	r5, r0
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    3096:	4e31      	ldr	r6, [pc, #196]	; (315c <eink_it8951_put_display_buffer+0xd0>)
    3098:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    309a:	6b72      	ldr	r2, [r6, #52]	; 0x34
    309c:	4690      	mov	r8, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    309e:	ac01      	add	r4, sp, #4
    30a0:	4a2f      	ldr	r2, [pc, #188]	; (3160 <eink_it8951_put_display_buffer+0xd4>)
    30a2:	8022      	strh	r2, [r4, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    30a4:	0c1b      	lsrs	r3, r3, #16
    30a6:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    30a8:	2202      	movs	r2, #2
    30aa:	0021      	movs	r1, r4
    30ac:	2011      	movs	r0, #17
    30ae:	4f2d      	ldr	r7, [pc, #180]	; (3164 <eink_it8951_put_display_buffer+0xd8>)
    30b0:	47b8      	blx	r7
    uint16_t data_send[2] = {reg_addr, reg_value};
    30b2:	2382      	movs	r3, #130	; 0x82
    30b4:	009b      	lsls	r3, r3, #2
    30b6:	8023      	strh	r3, [r4, #0]
    30b8:	4643      	mov	r3, r8
    30ba:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    30bc:	2202      	movs	r2, #2
    30be:	0021      	movs	r1, r4
    30c0:	2011      	movs	r0, #17
    30c2:	47b8      	blx	r7
    switch(it8951_global_instance.display_rotation)
    30c4:	2330      	movs	r3, #48	; 0x30
    30c6:	5cf3      	ldrb	r3, [r6, r3]
    30c8:	b2db      	uxtb	r3, r3
    30ca:	2b02      	cmp	r3, #2
    30cc:	d01f      	beq.n	310e <eink_it8951_put_display_buffer+0x82>
    30ce:	2b03      	cmp	r3, #3
    30d0:	d01f      	beq.n	3112 <eink_it8951_put_display_buffer+0x86>
    uint16_t eink_data, rotation = 0;
    30d2:	3b01      	subs	r3, #1
    30d4:	425a      	negs	r2, r3
    30d6:	4153      	adcs	r3, r2
    eink_data = (0 << 8) | (2 << 4) | (rotation);
    30d8:	210e      	movs	r1, #14
    30da:	4469      	add	r1, sp
    30dc:	2220      	movs	r2, #32
    30de:	4313      	orrs	r3, r2
    30e0:	800b      	strh	r3, [r1, #0]
    eink_ite_write_data(IT8951_I80_LD_IMG, &eink_data, 1);
    30e2:	2201      	movs	r2, #1
    30e4:	2020      	movs	r0, #32
    30e6:	4c1f      	ldr	r4, [pc, #124]	; (3164 <eink_it8951_put_display_buffer+0xd8>)
    30e8:	47a0      	blx	r4
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    30ea:	4b1c      	ldr	r3, [pc, #112]	; (315c <eink_it8951_put_display_buffer+0xd0>)
    30ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    30ee:	0852      	lsrs	r2, r2, #1
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    30f0:	4b1d      	ldr	r3, [pc, #116]	; (3168 <eink_it8951_put_display_buffer+0xdc>)
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    30f2:	6819      	ldr	r1, [r3, #0]
    30f4:	2000      	movs	r0, #0
    30f6:	4b1d      	ldr	r3, [pc, #116]	; (316c <eink_it8951_put_display_buffer+0xe0>)
    30f8:	4798      	blx	r3
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    30fa:	2200      	movs	r2, #0
    30fc:	2100      	movs	r1, #0
    30fe:	2022      	movs	r0, #34	; 0x22
    3100:	47a0      	blx	r4
    if(refresh_display) eink_it8951_refresh_display();
    3102:	2d00      	cmp	r5, #0
    3104:	d107      	bne.n	3116 <eink_it8951_put_display_buffer+0x8a>
}
    3106:	b004      	add	sp, #16
    3108:	bc04      	pop	{r2}
    310a:	4690      	mov	r8, r2
    310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case ROTATE_180: rotation = 2; break;
    310e:	2302      	movs	r3, #2
    3110:	e7e2      	b.n	30d8 <eink_it8951_put_display_buffer+0x4c>
        case ROTATE_270: rotation = 3; break;
    3112:	2303      	movs	r3, #3
    3114:	e7e0      	b.n	30d8 <eink_it8951_put_display_buffer+0x4c>
     eink_data[0] = (uint16_t) 0;
    3116:	a901      	add	r1, sp, #4
    3118:	2300      	movs	r3, #0
    311a:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    311c:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    311e:	4b0f      	ldr	r3, [pc, #60]	; (315c <eink_it8951_put_display_buffer+0xd0>)
    3120:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    3122:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    3124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3126:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    3128:	2302      	movs	r3, #2
    312a:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    312c:	2201      	movs	r2, #1
    312e:	2034      	movs	r0, #52	; 0x34
    3130:	4c0c      	ldr	r4, [pc, #48]	; (3164 <eink_it8951_put_display_buffer+0xd8>)
    3132:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    3134:	2201      	movs	r2, #1
    3136:	466b      	mov	r3, sp
    3138:	1d99      	adds	r1, r3, #6
    313a:	2000      	movs	r0, #0
    313c:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    313e:	2201      	movs	r2, #1
    3140:	a902      	add	r1, sp, #8
    3142:	2000      	movs	r0, #0
    3144:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    3146:	2201      	movs	r2, #1
    3148:	210a      	movs	r1, #10
    314a:	4469      	add	r1, sp
    314c:	2000      	movs	r0, #0
    314e:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    3150:	2201      	movs	r2, #1
    3152:	a903      	add	r1, sp, #12
    3154:	2000      	movs	r0, #0
    3156:	47a0      	blx	r4
}
    3158:	e7d5      	b.n	3106 <eink_it8951_put_display_buffer+0x7a>
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	200003b4 	.word	0x200003b4
    3160:	0000020a 	.word	0x0000020a
    3164:	00002de1 	.word	0x00002de1
    3168:	20000398 	.word	0x20000398
    316c:	0000307d 	.word	0x0000307d

00003170 <eink_ite_set_bit>:
 * \param bit_value Bit value.
 */
void eink_ite_set_bit(uint8_t *byte, uint8_t bit_number, bool bit_value)
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
    3170:	2a00      	cmp	r2, #0
    3172:	d105      	bne.n	3180 <eink_ite_set_bit+0x10>
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
    3174:	2201      	movs	r2, #1
    3176:	408a      	lsls	r2, r1
    3178:	7803      	ldrb	r3, [r0, #0]
    317a:	4393      	bics	r3, r2
    317c:	7003      	strb	r3, [r0, #0]
    }
    317e:	4770      	bx	lr
        *byte |= 1 << bit_number;
    3180:	2201      	movs	r2, #1
    3182:	408a      	lsls	r2, r1
    3184:	7803      	ldrb	r3, [r0, #0]
    3186:	4313      	orrs	r3, r2
    3188:	7003      	strb	r3, [r0, #0]
    318a:	e7f8      	b.n	317e <eink_ite_set_bit+0xe>

0000318c <eink_it8951_set_pixel_raw>:
 * \param x_set X coordinate of the pixel to set.
 * \param y_set Y coordinate of the pixel to set.
 * \param pixel_value Greyscale value to set the pixel to.
 */
void eink_it8951_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value)
{
    318c:	b5f0      	push	{r4, r5, r6, r7, lr}
    318e:	46c6      	mov	lr, r8
    3190:	b500      	push	{lr}
    3192:	0015      	movs	r5, r2
    eink_coordinate x1_set, y1_set, odd_even_bit;
    uint32_t byte_set;
    
    /* Ignore any pixels being set outside of the display window */
    if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3194:	4b34      	ldr	r3, [pc, #208]	; (3268 <eink_it8951_set_pixel_raw+0xdc>)
    3196:	681f      	ldr	r7, [r3, #0]
    3198:	887b      	ldrh	r3, [r7, #2]
    319a:	4283      	cmp	r3, r0
    319c:	d93f      	bls.n	321e <eink_it8951_set_pixel_raw+0x92>
    319e:	88bb      	ldrh	r3, [r7, #4]
    31a0:	428b      	cmp	r3, r1
    31a2:	d93c      	bls.n	321e <eink_it8951_set_pixel_raw+0x92>
        
        if ( (it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180) ) {
    31a4:	2330      	movs	r3, #48	; 0x30
    31a6:	4a31      	ldr	r2, [pc, #196]	; (326c <eink_it8951_set_pixel_raw+0xe0>)
    31a8:	5cd3      	ldrb	r3, [r2, r3]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d00c      	beq.n	31c8 <eink_it8951_set_pixel_raw+0x3c>
    31ae:	2330      	movs	r3, #48	; 0x30
    31b0:	5cd3      	ldrb	r3, [r2, r3]
    31b2:	2b02      	cmp	r3, #2
    31b4:	d008      	beq.n	31c8 <eink_it8951_set_pixel_raw+0x3c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
            odd_even_bit = y_set % 2;
        } else {
            /* Calculate which byte the pixel in question is contained in */
            y1_set = (y_set - (y_set % 2)) / 2;
            byte_set = y1_set + ((it8951_global_instance.display_config.display_height / 2) * x_set);
    31b6:	4b2d      	ldr	r3, [pc, #180]	; (326c <eink_it8951_set_pixel_raw+0xe0>)
    31b8:	885c      	ldrh	r4, [r3, #2]
    31ba:	0864      	lsrs	r4, r4, #1
    31bc:	4360      	muls	r0, r4
    31be:	104c      	asrs	r4, r1, #1
    31c0:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    31c2:	2301      	movs	r3, #1
    31c4:	4019      	ands	r1, r3
    31c6:	e007      	b.n	31d8 <eink_it8951_set_pixel_raw+0x4c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
    31c8:	4b28      	ldr	r3, [pc, #160]	; (326c <eink_it8951_set_pixel_raw+0xe0>)
    31ca:	881c      	ldrh	r4, [r3, #0]
    31cc:	0864      	lsrs	r4, r4, #1
    31ce:	4360      	muls	r0, r4
    31d0:	104c      	asrs	r4, r1, #1
    31d2:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    31d4:	2301      	movs	r3, #1
    31d6:	4019      	ands	r1, r3
        }
        
        if (!odd_even_bit) {
    31d8:	2900      	cmp	r1, #0
    31da:	d023      	beq.n	3224 <eink_it8951_set_pixel_raw+0x98>
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
        } else {
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_value >> 3) & 0x1));
    31dc:	08ea      	lsrs	r2, r5, #3
    31de:	2601      	movs	r6, #1
    31e0:	4032      	ands	r2, r6
    31e2:	6938      	ldr	r0, [r7, #16]
    31e4:	1900      	adds	r0, r0, r4
    31e6:	2107      	movs	r1, #7
    31e8:	4f21      	ldr	r7, [pc, #132]	; (3270 <eink_it8951_set_pixel_raw+0xe4>)
    31ea:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_value >> 2) & 0x1));
    31ec:	08aa      	lsrs	r2, r5, #2
    31ee:	4032      	ands	r2, r6
    31f0:	4b1d      	ldr	r3, [pc, #116]	; (3268 <eink_it8951_set_pixel_raw+0xdc>)
    31f2:	4698      	mov	r8, r3
    31f4:	681b      	ldr	r3, [r3, #0]
    31f6:	6918      	ldr	r0, [r3, #16]
    31f8:	1900      	adds	r0, r0, r4
    31fa:	2106      	movs	r1, #6
    31fc:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_value >> 1) & 0x1));
    31fe:	086a      	lsrs	r2, r5, #1
    3200:	4032      	ands	r2, r6
    3202:	4643      	mov	r3, r8
    3204:	681b      	ldr	r3, [r3, #0]
    3206:	6918      	ldr	r0, [r3, #16]
    3208:	1900      	adds	r0, r0, r4
    320a:	2105      	movs	r1, #5
    320c:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_value & 0x1));
    320e:	0032      	movs	r2, r6
    3210:	402a      	ands	r2, r5
    3212:	4643      	mov	r3, r8
    3214:	681b      	ldr	r3, [r3, #0]
    3216:	6918      	ldr	r0, [r3, #16]
    3218:	1900      	adds	r0, r0, r4
    321a:	2104      	movs	r1, #4
    321c:	47b8      	blx	r7
        }
    }
}
    321e:	bc04      	pop	{r2}
    3220:	4690      	mov	r8, r2
    3222:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
    3224:	08ea      	lsrs	r2, r5, #3
    3226:	2601      	movs	r6, #1
    3228:	4032      	ands	r2, r6
    322a:	6938      	ldr	r0, [r7, #16]
    322c:	1900      	adds	r0, r0, r4
    322e:	3103      	adds	r1, #3
    3230:	4f0f      	ldr	r7, [pc, #60]	; (3270 <eink_it8951_set_pixel_raw+0xe4>)
    3232:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
    3234:	08aa      	lsrs	r2, r5, #2
    3236:	4032      	ands	r2, r6
    3238:	4b0b      	ldr	r3, [pc, #44]	; (3268 <eink_it8951_set_pixel_raw+0xdc>)
    323a:	4698      	mov	r8, r3
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	6918      	ldr	r0, [r3, #16]
    3240:	1900      	adds	r0, r0, r4
    3242:	2102      	movs	r1, #2
    3244:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
    3246:	086a      	lsrs	r2, r5, #1
    3248:	4032      	ands	r2, r6
    324a:	4643      	mov	r3, r8
    324c:	681b      	ldr	r3, [r3, #0]
    324e:	6918      	ldr	r0, [r3, #16]
    3250:	1900      	adds	r0, r0, r4
    3252:	2101      	movs	r1, #1
    3254:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
    3256:	0032      	movs	r2, r6
    3258:	402a      	ands	r2, r5
    325a:	4643      	mov	r3, r8
    325c:	681b      	ldr	r3, [r3, #0]
    325e:	6918      	ldr	r0, [r3, #16]
    3260:	1900      	adds	r0, r0, r4
    3262:	2100      	movs	r1, #0
    3264:	47b8      	blx	r7
    3266:	e7da      	b.n	321e <eink_it8951_set_pixel_raw+0x92>
    3268:	20000424 	.word	0x20000424
    326c:	200003b4 	.word	0x200003b4
    3270:	00003171 	.word	0x00003171

00003274 <eink_it8951_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_it8951_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    3274:	b5f0      	push	{r4, r5, r6, r7, lr}
    3276:	46de      	mov	lr, fp
    3278:	4657      	mov	r7, sl
    327a:	464e      	mov	r6, r9
    327c:	4645      	mov	r5, r8
    327e:	b5e0      	push	{r5, r6, r7, lr}
    3280:	b087      	sub	sp, #28
    3282:	9000      	str	r0, [sp, #0]
    3284:	0011      	movs	r1, r2
    3286:	9201      	str	r2, [sp, #4]
    3288:	4699      	mov	r9, r3
    328a:	ab10      	add	r3, sp, #64	; 0x40
    328c:	881b      	ldrh	r3, [r3, #0]
    328e:	469a      	mov	sl, r3
    3290:	ab11      	add	r3, sp, #68	; 0x44
    3292:	881b      	ldrh	r3, [r3, #0]
    3294:	469b      	mov	fp, r3
    volatile uint16_t buffer_index, i, j;
    volatile uint16_t k, l, m, bit_value_1, bit_value_2;
    eink_coordinate x_set, y_set;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    3296:	230e      	movs	r3, #14
    3298:	aa02      	add	r2, sp, #8
    329a:	4694      	mov	ip, r2
    329c:	4463      	add	r3, ip
    329e:	2200      	movs	r2, #0
    32a0:	801a      	strh	r2, [r3, #0]
    32a2:	881b      	ldrh	r3, [r3, #0]
    32a4:	b29b      	uxth	r3, r3
    32a6:	4299      	cmp	r1, r3
    32a8:	d966      	bls.n	3378 <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    32aa:	260a      	movs	r6, #10
    32ac:	4466      	add	r6, ip
        for (j = 0; j < image_height_bytes; j++) {
            x_set = x_place+i;
            y_set = y_place+m;
            
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    32ae:	4f36      	ldr	r7, [pc, #216]	; (3388 <eink_it8951_graphics_load_4bgrey_image+0x114>)
    32b0:	464d      	mov	r5, r9
    32b2:	46d1      	mov	r9, sl
    32b4:	e054      	b.n	3360 <eink_it8951_graphics_load_4bgrey_image+0xec>
                /* Set the pixel in the display buffer */
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
            }

        m += 2;
    32b6:	8833      	ldrh	r3, [r6, #0]
    32b8:	3302      	adds	r3, #2
    32ba:	b29b      	uxth	r3, r3
    32bc:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    32be:	8823      	ldrh	r3, [r4, #0]
    32c0:	3301      	adds	r3, #1
    32c2:	b29b      	uxth	r3, r3
    32c4:	8023      	strh	r3, [r4, #0]
    32c6:	8823      	ldrh	r3, [r4, #0]
    32c8:	b29b      	uxth	r3, r3
    32ca:	42ab      	cmp	r3, r5
    32cc:	d23a      	bcs.n	3344 <eink_it8951_graphics_load_4bgrey_image+0xd0>
            x_set = x_place+i;
    32ce:	230e      	movs	r3, #14
    32d0:	aa02      	add	r2, sp, #8
    32d2:	4694      	mov	ip, r2
    32d4:	4463      	add	r3, ip
    32d6:	881b      	ldrh	r3, [r3, #0]
    32d8:	444b      	add	r3, r9
    32da:	b29b      	uxth	r3, r3
    32dc:	4698      	mov	r8, r3
            y_set = y_place+m;
    32de:	8833      	ldrh	r3, [r6, #0]
    32e0:	b29b      	uxth	r3, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    32e2:	683a      	ldr	r2, [r7, #0]
    32e4:	8851      	ldrh	r1, [r2, #2]
    32e6:	4541      	cmp	r1, r8
    32e8:	d9e5      	bls.n	32b6 <eink_it8951_graphics_load_4bgrey_image+0x42>
            y_set = y_place+m;
    32ea:	4453      	add	r3, sl
    32ec:	b29b      	uxth	r3, r3
    32ee:	469b      	mov	fp, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    32f0:	8893      	ldrh	r3, [r2, #4]
    32f2:	455b      	cmp	r3, fp
    32f4:	d9df      	bls.n	32b6 <eink_it8951_graphics_load_4bgrey_image+0x42>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    32f6:	210e      	movs	r1, #14
    32f8:	4461      	add	r1, ip
    32fa:	880b      	ldrh	r3, [r1, #0]
    32fc:	8822      	ldrh	r2, [r4, #0]
    32fe:	436b      	muls	r3, r5
    3300:	9800      	ldr	r0, [sp, #0]
    3302:	4684      	mov	ip, r0
    3304:	4462      	add	r2, ip
    3306:	5cd2      	ldrb	r2, [r2, r3]
    3308:	230f      	movs	r3, #15
    330a:	4013      	ands	r3, r2
    330c:	aa04      	add	r2, sp, #16
    330e:	8013      	strh	r3, [r2, #0]
                bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    3310:	880b      	ldrh	r3, [r1, #0]
    3312:	8821      	ldrh	r1, [r4, #0]
    3314:	436b      	muls	r3, r5
    3316:	4461      	add	r1, ip
    3318:	5ccb      	ldrb	r3, [r1, r3]
    331a:	091b      	lsrs	r3, r3, #4
    331c:	a902      	add	r1, sp, #8
    331e:	80cb      	strh	r3, [r1, #6]
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
    3320:	8812      	ldrh	r2, [r2, #0]
    3322:	43d2      	mvns	r2, r2
    3324:	b2d2      	uxtb	r2, r2
    3326:	465b      	mov	r3, fp
    3328:	1c59      	adds	r1, r3, #1
    332a:	b289      	uxth	r1, r1
    332c:	4640      	mov	r0, r8
    332e:	4b17      	ldr	r3, [pc, #92]	; (338c <eink_it8951_graphics_load_4bgrey_image+0x118>)
    3330:	4798      	blx	r3
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
    3332:	ab02      	add	r3, sp, #8
    3334:	88da      	ldrh	r2, [r3, #6]
    3336:	43d2      	mvns	r2, r2
    3338:	b2d2      	uxtb	r2, r2
    333a:	4659      	mov	r1, fp
    333c:	4640      	mov	r0, r8
    333e:	4b13      	ldr	r3, [pc, #76]	; (338c <eink_it8951_graphics_load_4bgrey_image+0x118>)
    3340:	4798      	blx	r3
    3342:	e7b8      	b.n	32b6 <eink_it8951_graphics_load_4bgrey_image+0x42>
    3344:	46d3      	mov	fp, sl
    for (i = 0; i < image_width_px; i++) {
    3346:	220e      	movs	r2, #14
    3348:	ab02      	add	r3, sp, #8
    334a:	469c      	mov	ip, r3
    334c:	4462      	add	r2, ip
    334e:	8813      	ldrh	r3, [r2, #0]
    3350:	3301      	adds	r3, #1
    3352:	b29b      	uxth	r3, r3
    3354:	8013      	strh	r3, [r2, #0]
    3356:	8813      	ldrh	r3, [r2, #0]
    3358:	b29b      	uxth	r3, r3
    335a:	9a01      	ldr	r2, [sp, #4]
    335c:	4293      	cmp	r3, r2
    335e:	d20b      	bcs.n	3378 <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    3360:	2300      	movs	r3, #0
    3362:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    3364:	ab05      	add	r3, sp, #20
    3366:	2200      	movs	r2, #0
    3368:	801a      	strh	r2, [r3, #0]
    336a:	881b      	ldrh	r3, [r3, #0]
    336c:	b29b      	uxth	r3, r3
    336e:	429d      	cmp	r5, r3
    3370:	d9e9      	bls.n	3346 <eink_it8951_graphics_load_4bgrey_image+0xd2>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    3372:	ac05      	add	r4, sp, #20
    3374:	46da      	mov	sl, fp
    3376:	e7aa      	b.n	32ce <eink_it8951_graphics_load_4bgrey_image+0x5a>
        }
    }
    3378:	b007      	add	sp, #28
    337a:	bc3c      	pop	{r2, r3, r4, r5}
    337c:	4690      	mov	r8, r2
    337e:	4699      	mov	r9, r3
    3380:	46a2      	mov	sl, r4
    3382:	46ab      	mov	fp, r5
    3384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	20000424 	.word	0x20000424
    338c:	0000318d 	.word	0x0000318d

00003390 <uc8173_init>:
 *
 * Call this function to initialize the hardware interface and the UC8173 display
 * driver. When initialization is done the display is ready to receive data.
 */
void uc8173_init(void)
{
    3390:	b5f0      	push	{r4, r5, r6, r7, lr}
    3392:	b083      	sub	sp, #12
    /* Initialize delay routine */
    delay_init(SysTick);
    3394:	4812      	ldr	r0, [pc, #72]	; (33e0 <uc8173_init+0x50>)
    3396:	4b13      	ldr	r3, [pc, #76]	; (33e4 <uc8173_init+0x54>)
    3398:	4798      	blx	r3

    /* Initialize the interface */
    eink_interface_init(0);
    339a:	2000      	movs	r0, #0
    339c:	4b12      	ldr	r3, [pc, #72]	; (33e8 <uc8173_init+0x58>)
    339e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33a0:	25c0      	movs	r5, #192	; 0xc0
    33a2:	05ed      	lsls	r5, r5, #23
    33a4:	2640      	movs	r6, #64	; 0x40
    33a6:	616e      	str	r6, [r5, #20]
    delay_ms(1);
    33a8:	2001      	movs	r0, #1
    33aa:	4c10      	ldr	r4, [pc, #64]	; (33ec <uc8173_init+0x5c>)
    33ac:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33ae:	61ae      	str	r6, [r5, #24]
    delay_ms(1);
    33b0:	2001      	movs	r0, #1
    33b2:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    33b4:	4f0e      	ldr	r7, [pc, #56]	; (33f0 <uc8173_init+0x60>)
	CRITICAL_SECTION_LEAVE();
    33b6:	4e0f      	ldr	r6, [pc, #60]	; (33f4 <uc8173_init+0x64>)
	CRITICAL_SECTION_ENTER();
    33b8:	a801      	add	r0, sp, #4
    33ba:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    33bc:	23c0      	movs	r3, #192	; 0xc0
    33be:	05db      	lsls	r3, r3, #23
    33c0:	2580      	movs	r5, #128	; 0x80
    33c2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    33c4:	22a0      	movs	r2, #160	; 0xa0
    33c6:	490c      	ldr	r1, [pc, #48]	; (33f8 <uc8173_init+0x68>)
    33c8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    33ca:	2190      	movs	r1, #144	; 0x90
    33cc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    33ce:	4053      	eors	r3, r2
    33d0:	401c      	ands	r4, r3
    33d2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    33d4:	a801      	add	r0, sp, #4
    33d6:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    33d8:	4225      	tst	r5, r4
    33da:	d0ed      	beq.n	33b8 <uc8173_init+0x28>
    /* Reset display */
    uc8173_hard_reset();
    
    /* Wait for BUSY output to return HIGH */
    uc8173_wait_for_busy_low();
}
    33dc:	b003      	add	sp, #12
    33de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33e0:	e000e010 	.word	0xe000e010
    33e4:	00000369 	.word	0x00000369
    33e8:	00000dbd 	.word	0x00000dbd
    33ec:	0000037d 	.word	0x0000037d
    33f0:	0000034d 	.word	0x0000034d
    33f4:	0000035b 	.word	0x0000035b
    33f8:	41004400 	.word	0x41004400

000033fc <uc8173_set_config>:
 *
 * \param *config The configuration to write to the display driver.
 */
void uc8173_set_config(
        struct uc8173_config *const config)
{
    33fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    33fe:	46c6      	mov	lr, r8
    3400:	b500      	push	{lr}
    3402:	b084      	sub	sp, #16
    3404:	4680      	mov	r8, r0
    uint8_t eink_data[5];
    
    uc8173_global_instance.display_config = *config;
    3406:	2202      	movs	r2, #2
    3408:	0001      	movs	r1, r0
    340a:	4881      	ldr	r0, [pc, #516]	; (3610 <uc8173_set_config+0x214>)
    340c:	4b81      	ldr	r3, [pc, #516]	; (3614 <uc8173_set_config+0x218>)
    340e:	4798      	blx	r3
    
    if(config->uc8173_display == UC8173_ET011TT2) {
    3410:	4643      	mov	r3, r8
    3412:	785b      	ldrb	r3, [r3, #1]
    3414:	2b01      	cmp	r3, #1
    3416:	d00f      	beq.n	3438 <uc8173_set_config+0x3c>
    	uc8173_global_instance.display_width   = 240;
		uc8173_global_instance.display_height  = 240;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    3418:	2b00      	cmp	r3, #0
    341a:	d11e      	bne.n	345a <uc8173_set_config+0x5e>
		if((config->display_rotation == ROTATE_90) || (config->display_rotation == ROTATE_270)) {
    341c:	4643      	mov	r3, r8
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	2202      	movs	r2, #2
    3422:	4393      	bics	r3, r2
    3424:	2b01      	cmp	r3, #1
    3426:	d100      	bne.n	342a <uc8173_set_config+0x2e>
    3428:	e0c8      	b.n	35bc <uc8173_set_config+0x1c0>
			uc8173_global_instance.display_width   = 128;
			uc8173_global_instance.display_height  = 256;
		} else {
			uc8173_global_instance.display_width   = 256;
    342a:	4b79      	ldr	r3, [pc, #484]	; (3610 <uc8173_set_config+0x214>)
    342c:	2280      	movs	r2, #128	; 0x80
    342e:	0052      	lsls	r2, r2, #1
    3430:	805a      	strh	r2, [r3, #2]
			uc8173_global_instance.display_height  = 128;
    3432:	3a80      	subs	r2, #128	; 0x80
    3434:	809a      	strh	r2, [r3, #4]
    3436:	e003      	b.n	3440 <uc8173_set_config+0x44>
    	uc8173_global_instance.display_width   = 240;
    3438:	4b75      	ldr	r3, [pc, #468]	; (3610 <uc8173_set_config+0x214>)
    343a:	22f0      	movs	r2, #240	; 0xf0
    343c:	805a      	strh	r2, [r3, #2]
		uc8173_global_instance.display_height  = 240;
    343e:	809a      	strh	r2, [r3, #4]
		}
	}
	
    /* Booster Soft Start Control */
    if(config->uc8173_display == UC8173_ET011TT2) {
    3440:	4643      	mov	r3, r8
    3442:	785b      	ldrb	r3, [r3, #1]
    3444:	2b01      	cmp	r3, #1
    3446:	d100      	bne.n	344a <uc8173_set_config+0x4e>
    3448:	e0be      	b.n	35c8 <uc8173_set_config+0x1cc>
    	eink_data[0] = 0x17;
		eink_data[1] = 0x97;
		eink_data[2] = 0x20;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    344a:	2b00      	cmp	r3, #0
    344c:	d105      	bne.n	345a <uc8173_set_config+0x5e>
	    eink_data[0] = 0x17;
    344e:	ab02      	add	r3, sp, #8
    3450:	2217      	movs	r2, #23
    3452:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x17;
    3454:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x26;
    3456:	320f      	adds	r2, #15
    3458:	709a      	strb	r2, [r3, #2]
	}
	eink_write_data(UC8173_BTST, eink_data, 3);
    345a:	ac02      	add	r4, sp, #8
    345c:	2203      	movs	r2, #3
    345e:	0021      	movs	r1, r4
    3460:	2006      	movs	r0, #6
    3462:	4d6d      	ldr	r5, [pc, #436]	; (3618 <uc8173_set_config+0x21c>)
    3464:	47a8      	blx	r5
	
    /* Power Settings */
	eink_data[0] = 0x03;
    3466:	2303      	movs	r3, #3
    3468:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
    346a:	2300      	movs	r3, #0
    346c:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x2B;
    346e:	332b      	adds	r3, #43	; 0x2b
    3470:	70a3      	strb	r3, [r4, #2]
	eink_data[3] = 0x2B;
    3472:	70e3      	strb	r3, [r4, #3]
	eink_data[4] = 0x08;
    3474:	3b23      	subs	r3, #35	; 0x23
    3476:	7123      	strb	r3, [r4, #4]
	eink_write_data(UC8173_PWR, eink_data, 5);
    3478:	2205      	movs	r2, #5
    347a:	0021      	movs	r1, r4
    347c:	2001      	movs	r0, #1
    347e:	47a8      	blx	r5
	
	eink_write_data(UC8173_PON, 0, 0);
    3480:	2200      	movs	r2, #0
    3482:	2100      	movs	r1, #0
    3484:	2004      	movs	r0, #4
    3486:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    3488:	4f64      	ldr	r7, [pc, #400]	; (361c <uc8173_set_config+0x220>)
	CRITICAL_SECTION_LEAVE();
    348a:	4e65      	ldr	r6, [pc, #404]	; (3620 <uc8173_set_config+0x224>)
	CRITICAL_SECTION_ENTER();
    348c:	a801      	add	r0, sp, #4
    348e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3490:	23c0      	movs	r3, #192	; 0xc0
    3492:	05db      	lsls	r3, r3, #23
    3494:	2580      	movs	r5, #128	; 0x80
    3496:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3498:	22a0      	movs	r2, #160	; 0xa0
    349a:	4962      	ldr	r1, [pc, #392]	; (3624 <uc8173_set_config+0x228>)
    349c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    349e:	2190      	movs	r1, #144	; 0x90
    34a0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    34a2:	4053      	eors	r3, r2
    34a4:	401c      	ands	r4, r3
    34a6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    34a8:	a801      	add	r0, sp, #4
    34aa:	47b0      	blx	r6
    34ac:	4225      	tst	r5, r4
    34ae:	d0ed      	beq.n	348c <uc8173_set_config+0x90>
	uc8173_wait_for_busy_low();
	
    /* Panel Settings */
    if(config->uc8173_display == UC8173_ET011TT2) {
    34b0:	4643      	mov	r3, r8
    34b2:	785b      	ldrb	r3, [r3, #1]
    34b4:	2b01      	cmp	r3, #1
    34b6:	d100      	bne.n	34ba <uc8173_set_config+0xbe>
    34b8:	e08e      	b.n	35d8 <uc8173_set_config+0x1dc>
    	eink_data[0] = 0x0B;
		eink_data[1] = 0x86;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    34ba:	2b00      	cmp	r3, #0
    34bc:	d104      	bne.n	34c8 <uc8173_set_config+0xcc>
		eink_data[0] = 0x03;
    34be:	ab02      	add	r3, sp, #8
    34c0:	2203      	movs	r2, #3
    34c2:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    34c4:	3283      	adds	r2, #131	; 0x83
    34c6:	705a      	strb	r2, [r3, #1]
	}
	eink_write_data(UC8173_PSR, eink_data, 2);
    34c8:	ac02      	add	r4, sp, #8
    34ca:	2202      	movs	r2, #2
    34cc:	0021      	movs	r1, r4
    34ce:	2000      	movs	r0, #0
    34d0:	4d51      	ldr	r5, [pc, #324]	; (3618 <uc8173_set_config+0x21c>)
    34d2:	47a8      	blx	r5

    /* Power OFF Sequence Settings */
	eink_data[0] = 0x00;
    34d4:	2300      	movs	r3, #0
    34d6:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_PFS, eink_data, 1);
    34d8:	2201      	movs	r2, #1
    34da:	0021      	movs	r1, r4
    34dc:	2003      	movs	r0, #3
    34de:	47a8      	blx	r5
	
    /* PLL Control */
	if(config->uc8173_display == UC8173_ET011TT2) {
    34e0:	4643      	mov	r3, r8
    34e2:	785b      	ldrb	r3, [r3, #1]
    34e4:	2b01      	cmp	r3, #1
    34e6:	d100      	bne.n	34ea <uc8173_set_config+0xee>
    34e8:	e07c      	b.n	35e4 <uc8173_set_config+0x1e8>
		eink_data[0] = 0x25;
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    34ea:	2b00      	cmp	r3, #0
    34ec:	d102      	bne.n	34f4 <uc8173_set_config+0xf8>
		eink_data[0] = 0x48;
    34ee:	2248      	movs	r2, #72	; 0x48
    34f0:	ab02      	add	r3, sp, #8
    34f2:	701a      	strb	r2, [r3, #0]
	}
	eink_write_data(UC8173_LPRD, eink_data, 1);
    34f4:	ac02      	add	r4, sp, #8
    34f6:	2201      	movs	r2, #1
    34f8:	0021      	movs	r1, r4
    34fa:	2030      	movs	r0, #48	; 0x30
    34fc:	4d46      	ldr	r5, [pc, #280]	; (3618 <uc8173_set_config+0x21c>)
    34fe:	47a8      	blx	r5

    /* Temperature Sensor Enable */
	eink_data[0] = 0x00; /* Internal Sensor Enabled */
    3500:	2300      	movs	r3, #0
    3502:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_TSE, eink_data, 1);
    3504:	2201      	movs	r2, #1
    3506:	0021      	movs	r1, r4
    3508:	2041      	movs	r0, #65	; 0x41
    350a:	47a8      	blx	r5

    /* VCOM & DI Settings */
	eink_data[0] = 0xE1;
    350c:	23e1      	movs	r3, #225	; 0xe1
    350e:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x20;
    3510:	3bc1      	subs	r3, #193	; 0xc1
    3512:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x10;
    3514:	3b10      	subs	r3, #16
    3516:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_CDI, eink_data, 3);
    3518:	2203      	movs	r2, #3
    351a:	0021      	movs	r1, r4
    351c:	2050      	movs	r0, #80	; 0x50
    351e:	47a8      	blx	r5

    /* Resolution Settings */
    if(config->uc8173_display == UC8173_ET011TT2) {
    3520:	4643      	mov	r3, r8
    3522:	785b      	ldrb	r3, [r3, #1]
    3524:	2b01      	cmp	r3, #1
    3526:	d061      	beq.n	35ec <uc8173_set_config+0x1f0>
		eink_data[0] = 0xEF; /* H = 239 */
		eink_data[1] = 0x00;
		eink_data[2] = 0xEF; /* W = 239 */
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    3528:	2b00      	cmp	r3, #0
    352a:	d106      	bne.n	353a <uc8173_set_config+0x13e>
		eink_data[0] = 0x7F; /* H = 127 */
    352c:	ab02      	add	r3, sp, #8
    352e:	227f      	movs	r2, #127	; 0x7f
    3530:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x00;
    3532:	2200      	movs	r2, #0
    3534:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0xFF; /* W = 255 */
    3536:	32ff      	adds	r2, #255	; 0xff
    3538:	709a      	strb	r2, [r3, #2]
	}
	eink_write_data(UC8173_TRES, eink_data, 3);
    353a:	2203      	movs	r2, #3
    353c:	a902      	add	r1, sp, #8
    353e:	2061      	movs	r0, #97	; 0x61
    3540:	4b35      	ldr	r3, [pc, #212]	; (3618 <uc8173_set_config+0x21c>)
    3542:	4798      	blx	r3
	
	/* Gate Group Setting */
	if(config->uc8173_display == UC8173_ET011TT2) {
    3544:	4643      	mov	r3, r8
    3546:	785b      	ldrb	r3, [r3, #1]
    3548:	2b01      	cmp	r3, #1
    354a:	d056      	beq.n	35fa <uc8173_set_config+0x1fe>
		eink_data[0] = 0xA9;
		eink_data[1] = 0xA9;
		eink_data[2] = 0xEB;
		eink_data[3] = 0xEB;
		eink_data[4] = 0x02;
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    354c:	2b00      	cmp	r3, #0
    354e:	d109      	bne.n	3564 <uc8173_set_config+0x168>
		eink_data[0] = 0xCF;
    3550:	ab02      	add	r3, sp, #8
    3552:	22cf      	movs	r2, #207	; 0xcf
    3554:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0xAF;
    3556:	3a20      	subs	r2, #32
    3558:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x00;
    355a:	2200      	movs	r2, #0
    355c:	709a      	strb	r2, [r3, #2]
		eink_data[3] = 0x00;
    355e:	70da      	strb	r2, [r3, #3]
		eink_data[4] = 0x03;
    3560:	3203      	adds	r2, #3
    3562:	711a      	strb	r2, [r3, #4]
	}
	eink_write_data(UC8173_GDS, eink_data, 5);
    3564:	ac02      	add	r4, sp, #8
    3566:	2205      	movs	r2, #5
    3568:	0021      	movs	r1, r4
    356a:	2062      	movs	r0, #98	; 0x62
    356c:	4d2a      	ldr	r5, [pc, #168]	; (3618 <uc8173_set_config+0x21c>)
    356e:	47a8      	blx	r5
  
	//uc8173_measure_vcom();
	
	eink_data[0] = 0x26;
    3570:	2326      	movs	r3, #38	; 0x26
    3572:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_VDCS, eink_data, 1);
    3574:	2201      	movs	r2, #1
    3576:	0021      	movs	r1, r4
    3578:	2082      	movs	r0, #130	; 0x82
    357a:	47a8      	blx	r5
	eink_write_data(UC8173_VBDS, eink_data, 1);
    357c:	2201      	movs	r2, #1
    357e:	0021      	movs	r1, r4
    3580:	2084      	movs	r0, #132	; 0x84
    3582:	47a8      	blx	r5

	eink_data[0] = 0x02;
    3584:	2602      	movs	r6, #2
    3586:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_LVSEL, eink_data, 1);
    3588:	2201      	movs	r2, #1
    358a:	0021      	movs	r1, r4
    358c:	20e4      	movs	r0, #228	; 0xe4
    358e:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
    3590:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    3592:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GBS, eink_data, 2);
    3594:	2202      	movs	r2, #2
    3596:	0021      	movs	r1, r4
    3598:	2063      	movs	r0, #99	; 0x63
    359a:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
    359c:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    359e:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GSS, eink_data, 2);
    35a0:	2202      	movs	r2, #2
    35a2:	0021      	movs	r1, r4
    35a4:	2064      	movs	r0, #100	; 0x64
    35a6:	47a8      	blx	r5
	
	eink_data[0] = 0x1F;
    35a8:	231f      	movs	r3, #31
    35aa:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_DF, eink_data, 1);
    35ac:	2201      	movs	r2, #1
    35ae:	0021      	movs	r1, r4
    35b0:	20df      	movs	r0, #223	; 0xdf
    35b2:	47a8      	blx	r5
	
	//eink_write_data(UC8173_POF, 0, 0);
	//uc8173_wait_for_busy_high();
}
    35b4:	b004      	add	sp, #16
    35b6:	bc04      	pop	{r2}
    35b8:	4690      	mov	r8, r2
    35ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uc8173_global_instance.display_width   = 128;
    35bc:	4b14      	ldr	r3, [pc, #80]	; (3610 <uc8173_set_config+0x214>)
    35be:	327e      	adds	r2, #126	; 0x7e
    35c0:	805a      	strh	r2, [r3, #2]
			uc8173_global_instance.display_height  = 256;
    35c2:	3280      	adds	r2, #128	; 0x80
    35c4:	809a      	strh	r2, [r3, #4]
    35c6:	e73b      	b.n	3440 <uc8173_set_config+0x44>
    	eink_data[0] = 0x17;
    35c8:	ab02      	add	r3, sp, #8
    35ca:	2217      	movs	r2, #23
    35cc:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x97;
    35ce:	3280      	adds	r2, #128	; 0x80
    35d0:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x20;
    35d2:	3a77      	subs	r2, #119	; 0x77
    35d4:	709a      	strb	r2, [r3, #2]
    35d6:	e740      	b.n	345a <uc8173_set_config+0x5e>
    	eink_data[0] = 0x0B;
    35d8:	ab02      	add	r3, sp, #8
    35da:	220b      	movs	r2, #11
    35dc:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    35de:	327b      	adds	r2, #123	; 0x7b
    35e0:	705a      	strb	r2, [r3, #1]
    35e2:	e771      	b.n	34c8 <uc8173_set_config+0xcc>
		eink_data[0] = 0x25;
    35e4:	2225      	movs	r2, #37	; 0x25
    35e6:	ab02      	add	r3, sp, #8
    35e8:	701a      	strb	r2, [r3, #0]
    35ea:	e783      	b.n	34f4 <uc8173_set_config+0xf8>
		eink_data[0] = 0xEF; /* H = 239 */
    35ec:	ab02      	add	r3, sp, #8
    35ee:	22ef      	movs	r2, #239	; 0xef
    35f0:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x00;
    35f2:	2100      	movs	r1, #0
    35f4:	7059      	strb	r1, [r3, #1]
		eink_data[2] = 0xEF; /* W = 239 */
    35f6:	709a      	strb	r2, [r3, #2]
    35f8:	e79f      	b.n	353a <uc8173_set_config+0x13e>
		eink_data[0] = 0xA9;
    35fa:	ab02      	add	r3, sp, #8
    35fc:	22a9      	movs	r2, #169	; 0xa9
    35fe:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0xA9;
    3600:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0xEB;
    3602:	3242      	adds	r2, #66	; 0x42
    3604:	709a      	strb	r2, [r3, #2]
		eink_data[3] = 0xEB;
    3606:	70da      	strb	r2, [r3, #3]
		eink_data[4] = 0x02;
    3608:	3ae9      	subs	r2, #233	; 0xe9
    360a:	711a      	strb	r2, [r3, #4]
    360c:	e7aa      	b.n	3564 <uc8173_set_config+0x168>
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	20000380 	.word	0x20000380
    3614:	00004609 	.word	0x00004609
    3618:	00001bd9 	.word	0x00001bd9
    361c:	0000034d 	.word	0x0000034d
    3620:	0000035b 	.word	0x0000035b
    3624:	41004400 	.word	0x41004400

00003628 <eink_et011tt2_init>:
{    
    3628:	b5f0      	push	{r4, r5, r6, r7, lr}
    362a:	46c6      	mov	lr, r8
    362c:	b500      	push	{lr}
    362e:	b082      	sub	sp, #8
    3630:	0006      	movs	r6, r0
    3632:	4688      	mov	r8, r1
    et011tt2_dtm2_display_buffer = (uint8_t*) malloc (malloc_size);
    3634:	20e1      	movs	r0, #225	; 0xe1
    3636:	0180      	lsls	r0, r0, #6
    3638:	4b26      	ldr	r3, [pc, #152]	; (36d4 <eink_et011tt2_init+0xac>)
    363a:	4798      	blx	r3
    363c:	4b26      	ldr	r3, [pc, #152]	; (36d8 <eink_et011tt2_init+0xb0>)
    363e:	6018      	str	r0, [r3, #0]
    eink_gfx_et011tt2_config.display_buffer_2_ptr = et011tt2_dtm2_display_buffer;
    3640:	4c26      	ldr	r4, [pc, #152]	; (36dc <eink_et011tt2_init+0xb4>)
    3642:	6160      	str	r0, [r4, #20]
    uc8173_init();
    3644:	4b26      	ldr	r3, [pc, #152]	; (36e0 <eink_et011tt2_init+0xb8>)
    3646:	4798      	blx	r3
    config->uc8173_display = UC8173_ET011TT2;
    3648:	2301      	movs	r3, #1
    364a:	7073      	strb	r3, [r6, #1]
    uc8173_set_config(config);
    364c:	0030      	movs	r0, r6
    364e:	4b25      	ldr	r3, [pc, #148]	; (36e4 <eink_et011tt2_init+0xbc>)
    3650:	4798      	blx	r3
    eink_gfx_et011tt2_config.display_rotation = config->display_rotation;
    3652:	7833      	ldrb	r3, [r6, #0]
    3654:	7323      	strb	r3, [r4, #12]
    ptr_eink_gfx_config = (struct eink_gfx_config*) &eink_gfx_et011tt2_config;
    3656:	4b24      	ldr	r3, [pc, #144]	; (36e8 <eink_et011tt2_init+0xc0>)
    3658:	601c      	str	r4, [r3, #0]
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    365a:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_2_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    365c:	4c22      	ldr	r4, [pc, #136]	; (36e8 <eink_et011tt2_init+0xc0>)
    365e:	20ff      	movs	r0, #255	; 0xff
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    3660:	21e1      	movs	r1, #225	; 0xe1
    3662:	0189      	lsls	r1, r1, #6
        ptr_eink_gfx_config->display_buffer_2_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    3664:	6822      	ldr	r2, [r4, #0]
    3666:	6952      	ldr	r2, [r2, #20]
    3668:	54d0      	strb	r0, [r2, r3]
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    366a:	3301      	adds	r3, #1
    366c:	428b      	cmp	r3, r1
    366e:	d1f9      	bne.n	3664 <eink_et011tt2_init+0x3c>
    eink_data[0] = 0x00;
    3670:	2400      	movs	r4, #0
    3672:	466b      	mov	r3, sp
    3674:	701c      	strb	r4, [r3, #0]
    eink_data[1] = 0x00;
    3676:	705c      	strb	r4, [r3, #1]
    eink_data[2] = 0x00;
    3678:	709c      	strb	r4, [r3, #2]
    eink_data[3] = 0xEF;
    367a:	25ef      	movs	r5, #239	; 0xef
    367c:	70dd      	strb	r5, [r3, #3]
    eink_data[4] = 0x00;
    367e:	711c      	strb	r4, [r3, #4]
    eink_data[5] = 0xEF;
    3680:	715d      	strb	r5, [r3, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    3682:	2206      	movs	r2, #6
    3684:	4669      	mov	r1, sp
    3686:	2014      	movs	r0, #20
    3688:	4e18      	ldr	r6, [pc, #96]	; (36ec <eink_et011tt2_init+0xc4>)
    368a:	47b0      	blx	r6
	eink_write_data(UC8173_DTM1, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    368c:	4f16      	ldr	r7, [pc, #88]	; (36e8 <eink_et011tt2_init+0xc0>)
    368e:	683b      	ldr	r3, [r7, #0]
    3690:	6959      	ldr	r1, [r3, #20]
    3692:	22e1      	movs	r2, #225	; 0xe1
    3694:	0192      	lsls	r2, r2, #6
    3696:	2010      	movs	r0, #16
    3698:	47b0      	blx	r6
	eink_data[0] = 0x00;
    369a:	466b      	mov	r3, sp
    369c:	701c      	strb	r4, [r3, #0]
	eink_data[1] = 0x00;
    369e:	705c      	strb	r4, [r3, #1]
	eink_data[2] = 0x00;
    36a0:	709c      	strb	r4, [r3, #2]
	eink_data[3] = 0xEF;
    36a2:	70dd      	strb	r5, [r3, #3]
	eink_data[4] = 0x00;
    36a4:	711c      	strb	r4, [r3, #4]
	eink_data[5] = 0xEF;
    36a6:	715d      	strb	r5, [r3, #5]
	eink_write_data(UC8173_DTMW, eink_data, 6);
    36a8:	2206      	movs	r2, #6
    36aa:	4669      	mov	r1, sp
    36ac:	2014      	movs	r0, #20
    36ae:	47b0      	blx	r6
	eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    36b0:	683b      	ldr	r3, [r7, #0]
    36b2:	6959      	ldr	r1, [r3, #20]
    36b4:	22e1      	movs	r2, #225	; 0xe1
    36b6:	0192      	lsls	r2, r2, #6
    36b8:	2013      	movs	r0, #19
    36ba:	47b0      	blx	r6
    if(clear_display) eink_et011tt2_put_display_buffer(true);
    36bc:	4643      	mov	r3, r8
    36be:	2b00      	cmp	r3, #0
    36c0:	d103      	bne.n	36ca <eink_et011tt2_init+0xa2>
}
    36c2:	b002      	add	sp, #8
    36c4:	bc04      	pop	{r2}
    36c6:	4690      	mov	r8, r2
    36c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(clear_display) eink_et011tt2_put_display_buffer(true);
    36ca:	2001      	movs	r0, #1
    36cc:	4b08      	ldr	r3, [pc, #32]	; (36f0 <eink_et011tt2_init+0xc8>)
    36ce:	4798      	blx	r3
}
    36d0:	e7f7      	b.n	36c2 <eink_et011tt2_init+0x9a>
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	000045f5 	.word	0x000045f5
    36d8:	20000378 	.word	0x20000378
    36dc:	20000000 	.word	0x20000000
    36e0:	00003391 	.word	0x00003391
    36e4:	000033fd 	.word	0x000033fd
    36e8:	20000424 	.word	0x20000424
    36ec:	00001bd9 	.word	0x00001bd9
    36f0:	00002a75 	.word	0x00002a75

000036f4 <uc8151_set_psr_config>:
 *
 * \param *psr_config The PSR structure to write to the PSR register.
 */
void uc8151_set_psr_config(
        const struct uc8151_panel_settings *psr_config)
{    
    36f4:	b510      	push	{r4, lr}
    36f6:	b082      	sub	sp, #8
    36f8:	0004      	movs	r4, r0
    /* Copy configuration into UC8151 instance */
    uc8151_global_instance.panel_settings = *psr_config;
    36fa:	2205      	movs	r2, #5
    36fc:	0001      	movs	r1, r0
    36fe:	4859      	ldr	r0, [pc, #356]	; (3864 <uc8151_set_psr_config+0x170>)
    3700:	4b59      	ldr	r3, [pc, #356]	; (3868 <uc8151_set_psr_config+0x174>)
    3702:	4798      	blx	r3
    
    /* Save display resolution into UC8151 instance */
    switch (psr_config->display_resolution) {
    3704:	7823      	ldrb	r3, [r4, #0]
    3706:	2b01      	cmp	r3, #1
    3708:	d066      	beq.n	37d8 <uc8151_set_psr_config+0xe4>
    370a:	2b00      	cmp	r3, #0
    370c:	d053      	beq.n	37b6 <uc8151_set_psr_config+0xc2>
    370e:	2b02      	cmp	r3, #2
    3710:	d100      	bne.n	3714 <uc8151_set_psr_config+0x20>
    3712:	e072      	b.n	37fa <uc8151_set_psr_config+0x106>
    3714:	2b03      	cmp	r3, #3
    3716:	d100      	bne.n	371a <uc8151_set_psr_config+0x26>
    3718:	e081      	b.n	381e <uc8151_set_psr_config+0x12a>
    }
    
    uint8_t eink_data[5];

    /* Translate the panel settings structure to the required bytes to be sent to the display */
    switch (psr_config->display_resolution) {
    371a:	7823      	ldrb	r3, [r4, #0]
    371c:	2b01      	cmp	r3, #1
    371e:	d100      	bne.n	3722 <uc8151_set_psr_config+0x2e>
    3720:	e093      	b.n	384a <uc8151_set_psr_config+0x156>
    3722:	2b00      	cmp	r3, #0
    3724:	d100      	bne.n	3728 <uc8151_set_psr_config+0x34>
    3726:	e08c      	b.n	3842 <uc8151_set_psr_config+0x14e>
    3728:	2b02      	cmp	r3, #2
    372a:	d100      	bne.n	372e <uc8151_set_psr_config+0x3a>
    372c:	e091      	b.n	3852 <uc8151_set_psr_config+0x15e>
    372e:	2b03      	cmp	r3, #3
    3730:	d100      	bne.n	3734 <uc8151_set_psr_config+0x40>
    3732:	e092      	b.n	385a <uc8151_set_psr_config+0x166>
        case RES_96x230:                eink_data[0] = 0x00; break;
        case RES_96x252:                eink_data[0] = 0x01; break;
        case RES_128x296:               eink_data[0] = 0x02; break;
        case RES_160x296:               eink_data[0] = 0x03; break;
    }
    eink_data[0] = eink_data[0] << 1;
    3734:	466b      	mov	r3, sp
    3736:	781b      	ldrb	r3, [r3, #0]
    3738:	005b      	lsls	r3, r3, #1
    373a:	b2db      	uxtb	r3, r3
    373c:	466a      	mov	r2, sp
    373e:	7013      	strb	r3, [r2, #0]
    switch (psr_config->lut_selection) {
    3740:	7862      	ldrb	r2, [r4, #1]
    3742:	2a01      	cmp	r2, #1
    3744:	d102      	bne.n	374c <uc8151_set_psr_config+0x58>
        case LUT_FROM_OTP:              eink_data[0] |= 0x00; break;
        case LUT_FROM_REGISTER:         eink_data[0] |= 0x01; break;
    3746:	4313      	orrs	r3, r2
    3748:	466a      	mov	r2, sp
    374a:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    374c:	466b      	mov	r3, sp
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	005b      	lsls	r3, r3, #1
    3752:	b2db      	uxtb	r3, r3
    3754:	466a      	mov	r2, sp
    3756:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_colours) {
    3758:	78a2      	ldrb	r2, [r4, #2]
    375a:	2a00      	cmp	r2, #0
    375c:	d103      	bne.n	3766 <uc8151_set_psr_config+0x72>
        case B_W_R_PIXELS:              eink_data[0] |= 0x00; break;
        case B_W_PIXELS:                eink_data[0] |= 0x01; break;
    375e:	2201      	movs	r2, #1
    3760:	4313      	orrs	r3, r2
    3762:	466a      	mov	r2, sp
    3764:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 2;
    3766:	466b      	mov	r3, sp
    3768:	781b      	ldrb	r3, [r3, #0]
    376a:	009b      	lsls	r3, r3, #2
    376c:	b2db      	uxtb	r3, r3
    376e:	466a      	mov	r2, sp
    3770:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_rotation) {
    3772:	78e2      	ldrb	r2, [r4, #3]
    3774:	3a01      	subs	r2, #1
    3776:	2a01      	cmp	r2, #1
    3778:	d803      	bhi.n	3782 <uc8151_set_psr_config+0x8e>
        case ROTATE_0:
        case ROTATE_270:                 eink_data[0] |= 0b00; break;
        case ROTATE_180:
        case ROTATE_90:                  eink_data[0] |= 0b11; break;
    377a:	2203      	movs	r2, #3
    377c:	4313      	orrs	r3, r2
    377e:	466a      	mov	r2, sp
    3780:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    3782:	466b      	mov	r3, sp
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	005b      	lsls	r3, r3, #1
    3788:	b2db      	uxtb	r3, r3
    378a:	466a      	mov	r2, sp
    378c:	7013      	strb	r3, [r2, #0]
    switch (psr_config->booster_switch) {
    378e:	7922      	ldrb	r2, [r4, #4]
    3790:	2a01      	cmp	r2, #1
    3792:	d102      	bne.n	379a <uc8151_set_psr_config+0xa6>
        case BOOSTER_OFF:               eink_data[0] |= 0x00; break;
        case BOOSTER_ON:                eink_data[0] |= 0x01; break;
    3794:	4313      	orrs	r3, r2
    3796:	466a      	mov	r2, sp
    3798:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    379a:	466b      	mov	r3, sp
    379c:	781b      	ldrb	r3, [r3, #0]
    379e:	005b      	lsls	r3, r3, #1
    /* Add the soft reset bit */
    eink_data[0] |= 0x01;
    37a0:	2201      	movs	r2, #1
    37a2:	4313      	orrs	r3, r2
    37a4:	466a      	mov	r2, sp
    37a6:	7013      	strb	r3, [r2, #0]
    /* Send the PSR register to the display */
    eink_write_data(UC8151_PSR, eink_data, 1);
    37a8:	2201      	movs	r2, #1
    37aa:	4669      	mov	r1, sp
    37ac:	2000      	movs	r0, #0
    37ae:	4b2f      	ldr	r3, [pc, #188]	; (386c <uc8151_set_psr_config+0x178>)
    37b0:	4798      	blx	r3
    37b2:	b002      	add	sp, #8
    37b4:	bd10      	pop	{r4, pc}
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    37b6:	78e3      	ldrb	r3, [r4, #3]
    37b8:	2202      	movs	r2, #2
    37ba:	4393      	bics	r3, r2
    37bc:	2b01      	cmp	r3, #1
    37be:	d005      	beq.n	37cc <uc8151_set_psr_config+0xd8>
                uc8151_global_instance.display_width   = 230;
    37c0:	4b28      	ldr	r3, [pc, #160]	; (3864 <uc8151_set_psr_config+0x170>)
    37c2:	22e6      	movs	r2, #230	; 0xe6
    37c4:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    37c6:	3a86      	subs	r2, #134	; 0x86
    37c8:	811a      	strh	r2, [r3, #8]
    37ca:	e7a6      	b.n	371a <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    37cc:	4b25      	ldr	r3, [pc, #148]	; (3864 <uc8151_set_psr_config+0x170>)
    37ce:	325e      	adds	r2, #94	; 0x5e
    37d0:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 230;
    37d2:	3286      	adds	r2, #134	; 0x86
    37d4:	811a      	strh	r2, [r3, #8]
    37d6:	e7a0      	b.n	371a <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    37d8:	78e3      	ldrb	r3, [r4, #3]
    37da:	2202      	movs	r2, #2
    37dc:	4393      	bics	r3, r2
    37de:	2b01      	cmp	r3, #1
    37e0:	d005      	beq.n	37ee <uc8151_set_psr_config+0xfa>
                uc8151_global_instance.display_width   = 252;
    37e2:	4b20      	ldr	r3, [pc, #128]	; (3864 <uc8151_set_psr_config+0x170>)
    37e4:	22fc      	movs	r2, #252	; 0xfc
    37e6:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    37e8:	3a9c      	subs	r2, #156	; 0x9c
    37ea:	811a      	strh	r2, [r3, #8]
    37ec:	e795      	b.n	371a <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    37ee:	4b1d      	ldr	r3, [pc, #116]	; (3864 <uc8151_set_psr_config+0x170>)
    37f0:	325e      	adds	r2, #94	; 0x5e
    37f2:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 252;
    37f4:	329c      	adds	r2, #156	; 0x9c
    37f6:	811a      	strh	r2, [r3, #8]
    37f8:	e78f      	b.n	371a <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    37fa:	78e3      	ldrb	r3, [r4, #3]
    37fc:	2202      	movs	r2, #2
    37fe:	4393      	bics	r3, r2
    3800:	2b01      	cmp	r3, #1
    3802:	d006      	beq.n	3812 <uc8151_set_psr_config+0x11e>
                uc8151_global_instance.display_width   = 296;
    3804:	4b17      	ldr	r3, [pc, #92]	; (3864 <uc8151_set_psr_config+0x170>)
    3806:	2294      	movs	r2, #148	; 0x94
    3808:	0052      	lsls	r2, r2, #1
    380a:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 128;
    380c:	3aa8      	subs	r2, #168	; 0xa8
    380e:	811a      	strh	r2, [r3, #8]
    3810:	e783      	b.n	371a <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 128;
    3812:	4b14      	ldr	r3, [pc, #80]	; (3864 <uc8151_set_psr_config+0x170>)
    3814:	327e      	adds	r2, #126	; 0x7e
    3816:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    3818:	32a8      	adds	r2, #168	; 0xa8
    381a:	811a      	strh	r2, [r3, #8]
    381c:	e77d      	b.n	371a <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    381e:	78e3      	ldrb	r3, [r4, #3]
    3820:	2202      	movs	r2, #2
    3822:	4393      	bics	r3, r2
    3824:	2b01      	cmp	r3, #1
    3826:	d006      	beq.n	3836 <uc8151_set_psr_config+0x142>
                uc8151_global_instance.display_width   = 296;
    3828:	4b0e      	ldr	r3, [pc, #56]	; (3864 <uc8151_set_psr_config+0x170>)
    382a:	2294      	movs	r2, #148	; 0x94
    382c:	0052      	lsls	r2, r2, #1
    382e:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 160;
    3830:	3a88      	subs	r2, #136	; 0x88
    3832:	811a      	strh	r2, [r3, #8]
    3834:	e771      	b.n	371a <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 160;
    3836:	4b0b      	ldr	r3, [pc, #44]	; (3864 <uc8151_set_psr_config+0x170>)
    3838:	329e      	adds	r2, #158	; 0x9e
    383a:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    383c:	3288      	adds	r2, #136	; 0x88
    383e:	811a      	strh	r2, [r3, #8]
    3840:	e76b      	b.n	371a <uc8151_set_psr_config+0x26>
        case RES_96x230:                eink_data[0] = 0x00; break;
    3842:	2300      	movs	r3, #0
    3844:	466a      	mov	r2, sp
    3846:	7013      	strb	r3, [r2, #0]
    3848:	e774      	b.n	3734 <uc8151_set_psr_config+0x40>
        case RES_96x252:                eink_data[0] = 0x01; break;
    384a:	2301      	movs	r3, #1
    384c:	466a      	mov	r2, sp
    384e:	7013      	strb	r3, [r2, #0]
    3850:	e770      	b.n	3734 <uc8151_set_psr_config+0x40>
        case RES_128x296:               eink_data[0] = 0x02; break;
    3852:	2302      	movs	r3, #2
    3854:	466a      	mov	r2, sp
    3856:	7013      	strb	r3, [r2, #0]
    3858:	e76c      	b.n	3734 <uc8151_set_psr_config+0x40>
        case RES_160x296:               eink_data[0] = 0x03; break;
    385a:	2303      	movs	r3, #3
    385c:	466a      	mov	r2, sp
    385e:	7013      	strb	r3, [r2, #0]
    3860:	e768      	b.n	3734 <uc8151_set_psr_config+0x40>
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	200003ec 	.word	0x200003ec
    3868:	00004609 	.word	0x00004609
    386c:	00001bd9 	.word	0x00001bd9

00003870 <uc8151_set_config>:
{        
    3870:	b5f0      	push	{r4, r5, r6, r7, lr}
    3872:	46c6      	mov	lr, r8
    3874:	b500      	push	{lr}
    3876:	b086      	sub	sp, #24
    3878:	0004      	movs	r4, r0
    switch(config->power_settings.source_power) {
    387a:	7943      	ldrb	r3, [r0, #5]
    387c:	2b00      	cmp	r3, #0
    387e:	d020      	beq.n	38c2 <uc8151_set_config+0x52>
    3880:	2b01      	cmp	r3, #1
    3882:	d022      	beq.n	38ca <uc8151_set_config+0x5a>
    eink_data[0] = eink_data[0] << 1;
    3884:	aa04      	add	r2, sp, #16
    3886:	7813      	ldrb	r3, [r2, #0]
    3888:	005b      	lsls	r3, r3, #1
    388a:	b2db      	uxtb	r3, r3
    388c:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.gate_power) {
    388e:	79a2      	ldrb	r2, [r4, #6]
    3890:	2a01      	cmp	r2, #1
    3892:	d102      	bne.n	389a <uc8151_set_config+0x2a>
        case GATE_INTERNAL_DC_DC:       eink_data[0] |= 0x01; break;
    3894:	4313      	orrs	r3, r2
    3896:	aa04      	add	r2, sp, #16
    3898:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.vcom_voltage_level) {
    389a:	79e3      	ldrb	r3, [r4, #7]
    389c:	2b00      	cmp	r3, #0
    389e:	d018      	beq.n	38d2 <uc8151_set_config+0x62>
    38a0:	2b01      	cmp	r3, #1
    38a2:	d01a      	beq.n	38da <uc8151_set_config+0x6a>
    eink_data[1] = eink_data[1] << 2;
    38a4:	aa04      	add	r2, sp, #16
    38a6:	7853      	ldrb	r3, [r2, #1]
    38a8:	009b      	lsls	r3, r3, #2
    38aa:	b2db      	uxtb	r3, r3
    38ac:	7053      	strb	r3, [r2, #1]
    switch (config->power_settings.vg_voltage_level) {
    38ae:	7a22      	ldrb	r2, [r4, #8]
    38b0:	2a06      	cmp	r2, #6
    38b2:	d05b      	beq.n	396c <uc8151_set_config+0xfc>
    38b4:	2a07      	cmp	r2, #7
    38b6:	d05e      	beq.n	3976 <uc8151_set_config+0x106>
    38b8:	2a05      	cmp	r2, #5
    38ba:	d012      	beq.n	38e2 <uc8151_set_config+0x72>
    if( (config->power_settings.vg_voltage_level == VGx_17V) | (config->power_settings.vg_voltage_level == VGx_18V) | (config->power_settings.vg_voltage_level == VGx_19V) | (config->power_settings.vg_voltage_level == VGx_20V) )
    38bc:	2a03      	cmp	r2, #3
    38be:	d814      	bhi.n	38ea <uc8151_set_config+0x7a>
    38c0:	e7fe      	b.n	38c0 <uc8151_set_config+0x50>
        case SOURCE_EXTERNAL_POWER:     eink_data[0] = 0x00; break;
    38c2:	2200      	movs	r2, #0
    38c4:	ab04      	add	r3, sp, #16
    38c6:	701a      	strb	r2, [r3, #0]
    38c8:	e7dc      	b.n	3884 <uc8151_set_config+0x14>
        case SOURCE_INTERNAL_DC_DC:     eink_data[0] = 0x01; break;
    38ca:	2201      	movs	r2, #1
    38cc:	ab04      	add	r3, sp, #16
    38ce:	701a      	strb	r2, [r3, #0]
    38d0:	e7d8      	b.n	3884 <uc8151_set_config+0x14>
        case VCOMx_VDx_DC_VCOMD:        eink_data[1] = 0x00; break;
    38d2:	2200      	movs	r2, #0
    38d4:	ab04      	add	r3, sp, #16
    38d6:	705a      	strb	r2, [r3, #1]
    38d8:	e7e4      	b.n	38a4 <uc8151_set_config+0x34>
        case VCOMx_VGx:                 eink_data[1] = 0x01; break;
    38da:	2201      	movs	r2, #1
    38dc:	ab04      	add	r3, sp, #16
    38de:	705a      	strb	r2, [r3, #1]
    38e0:	e7e0      	b.n	38a4 <uc8151_set_config+0x34>
        case VGx_15V:                   eink_data[1] |= 0x01; break;
    38e2:	2201      	movs	r2, #1
    38e4:	4313      	orrs	r3, r2
    38e6:	aa04      	add	r2, sp, #16
    38e8:	7053      	strb	r3, [r2, #1]
    eink_data[2] = config->power_settings.pwr_vdh_level;
    38ea:	a904      	add	r1, sp, #16
    38ec:	7a63      	ldrb	r3, [r4, #9]
    38ee:	708b      	strb	r3, [r1, #2]
    eink_data[3] = config->power_settings.pwr_vdl_level;
    38f0:	7aa3      	ldrb	r3, [r4, #10]
    38f2:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = config->power_settings.pwr_vdhr_level;
    38f4:	7ae3      	ldrb	r3, [r4, #11]
    38f6:	710b      	strb	r3, [r1, #4]
    eink_write_data(UC8151_PWR, eink_data, 5);
    38f8:	2205      	movs	r2, #5
    38fa:	2001      	movs	r0, #1
    38fc:	4dd8      	ldr	r5, [pc, #864]	; (3c60 <uc8151_set_config+0x3f0>)
    38fe:	47a8      	blx	r5
    psr_config = config->panel_settings;
    3900:	2205      	movs	r2, #5
    3902:	0021      	movs	r1, r4
    3904:	a802      	add	r0, sp, #8
    3906:	4bd7      	ldr	r3, [pc, #860]	; (3c64 <uc8151_set_config+0x3f4>)
    3908:	4798      	blx	r3
    uc8151_set_psr_config(&psr_config);
    390a:	a802      	add	r0, sp, #8
    390c:	4bd6      	ldr	r3, [pc, #856]	; (3c68 <uc8151_set_config+0x3f8>)
    390e:	4798      	blx	r3
    eink_write_data(UC8151_PON, 0, 0);
    3910:	2200      	movs	r2, #0
    3912:	2100      	movs	r1, #0
    3914:	2004      	movs	r0, #4
    3916:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    3918:	4bd4      	ldr	r3, [pc, #848]	; (3c6c <uc8151_set_config+0x3fc>)
    391a:	4698      	mov	r8, r3
	CRITICAL_SECTION_LEAVE();
    391c:	4fd4      	ldr	r7, [pc, #848]	; (3c70 <uc8151_set_config+0x400>)
	CRITICAL_SECTION_ENTER();
    391e:	4668      	mov	r0, sp
    3920:	47c0      	blx	r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3922:	23c0      	movs	r3, #192	; 0xc0
    3924:	05db      	lsls	r3, r3, #23
    3926:	2680      	movs	r6, #128	; 0x80
    3928:	599d      	ldr	r5, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    392a:	22a0      	movs	r2, #160	; 0xa0
    392c:	49d1      	ldr	r1, [pc, #836]	; (3c74 <uc8151_set_config+0x404>)
    392e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3930:	2190      	movs	r1, #144	; 0x90
    3932:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3934:	4053      	eors	r3, r2
    3936:	401d      	ands	r5, r3
    3938:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    393a:	4668      	mov	r0, sp
    393c:	47b8      	blx	r7
    393e:	422e      	tst	r6, r5
    3940:	d0ed      	beq.n	391e <uc8151_set_config+0xae>
    switch (config->booster_soft_start.a_soft_start_period) {
    3942:	7b20      	ldrb	r0, [r4, #12]
    3944:	2801      	cmp	r0, #1
    3946:	d01f      	beq.n	3988 <uc8151_set_config+0x118>
    3948:	2800      	cmp	r0, #0
    394a:	d019      	beq.n	3980 <uc8151_set_config+0x110>
    394c:	2802      	cmp	r0, #2
    394e:	d01f      	beq.n	3990 <uc8151_set_config+0x120>
    3950:	2803      	cmp	r0, #3
    3952:	d021      	beq.n	3998 <uc8151_set_config+0x128>
    eink_data[0] = eink_data[0] << 3;
    3954:	aa04      	add	r2, sp, #16
    3956:	7813      	ldrb	r3, [r2, #0]
    3958:	00db      	lsls	r3, r3, #3
    395a:	b2db      	uxtb	r3, r3
    395c:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_drive_strength) {
    395e:	7b61      	ldrb	r1, [r4, #13]
    3960:	2907      	cmp	r1, #7
    3962:	d821      	bhi.n	39a8 <uc8151_set_config+0x138>
    3964:	008a      	lsls	r2, r1, #2
    3966:	4dc4      	ldr	r5, [pc, #784]	; (3c78 <uc8151_set_config+0x408>)
    3968:	58aa      	ldr	r2, [r5, r2]
    396a:	4697      	mov	pc, r2
        case VGx_14V:                   eink_data[1] |= 0x02; break;
    396c:	2202      	movs	r2, #2
    396e:	4313      	orrs	r3, r2
    3970:	aa04      	add	r2, sp, #16
    3972:	7053      	strb	r3, [r2, #1]
    3974:	e7b9      	b.n	38ea <uc8151_set_config+0x7a>
        case VGx_13V:                   eink_data[1] |= 0x03; break;
    3976:	2203      	movs	r2, #3
    3978:	4313      	orrs	r3, r2
    397a:	aa04      	add	r2, sp, #16
    397c:	7053      	strb	r3, [r2, #1]
    397e:	e7b4      	b.n	38ea <uc8151_set_config+0x7a>
        case SS_PERIOD_10MS:            eink_data[0] = 0x00; break;
    3980:	2200      	movs	r2, #0
    3982:	ab04      	add	r3, sp, #16
    3984:	701a      	strb	r2, [r3, #0]
    3986:	e7e5      	b.n	3954 <uc8151_set_config+0xe4>
        case SS_PERIOD_20MS:            eink_data[0] = 0x01; break;
    3988:	2201      	movs	r2, #1
    398a:	ab04      	add	r3, sp, #16
    398c:	701a      	strb	r2, [r3, #0]
    398e:	e7e1      	b.n	3954 <uc8151_set_config+0xe4>
        case SS_PERIOD_30MS:            eink_data[0] = 0x02; break;
    3990:	2202      	movs	r2, #2
    3992:	ab04      	add	r3, sp, #16
    3994:	701a      	strb	r2, [r3, #0]
    3996:	e7dd      	b.n	3954 <uc8151_set_config+0xe4>
        case SS_PERIOD_40MS:            eink_data[0] = 0x03; break;
    3998:	2203      	movs	r2, #3
    399a:	ab04      	add	r3, sp, #16
    399c:	701a      	strb	r2, [r3, #0]
    399e:	e7d9      	b.n	3954 <uc8151_set_config+0xe4>
        case STRENGTH_2:                eink_data[0] |= 0x01; break;
    39a0:	2201      	movs	r2, #1
    39a2:	4313      	orrs	r3, r2
    39a4:	aa04      	add	r2, sp, #16
    39a6:	7013      	strb	r3, [r2, #0]
    eink_data[0] = eink_data[0] << 3;
    39a8:	aa04      	add	r2, sp, #16
    39aa:	7813      	ldrb	r3, [r2, #0]
    39ac:	00db      	lsls	r3, r3, #3
    39ae:	b2db      	uxtb	r3, r3
    39b0:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_min_off_time) {
    39b2:	7ba2      	ldrb	r2, [r4, #14]
    39b4:	2a07      	cmp	r2, #7
    39b6:	d825      	bhi.n	3a04 <uc8151_set_config+0x194>
    39b8:	0095      	lsls	r5, r2, #2
    39ba:	4eb0      	ldr	r6, [pc, #704]	; (3c7c <uc8151_set_config+0x40c>)
    39bc:	5975      	ldr	r5, [r6, r5]
    39be:	46af      	mov	pc, r5
        case STRENGTH_3:                eink_data[0] |= 0x02; break;
    39c0:	2202      	movs	r2, #2
    39c2:	4313      	orrs	r3, r2
    39c4:	aa04      	add	r2, sp, #16
    39c6:	7013      	strb	r3, [r2, #0]
    39c8:	e7ee      	b.n	39a8 <uc8151_set_config+0x138>
        case STRENGTH_4:                eink_data[0] |= 0x03; break;
    39ca:	2203      	movs	r2, #3
    39cc:	4313      	orrs	r3, r2
    39ce:	aa04      	add	r2, sp, #16
    39d0:	7013      	strb	r3, [r2, #0]
    39d2:	e7e9      	b.n	39a8 <uc8151_set_config+0x138>
        case STRENGTH_5:                eink_data[0] |= 0x04; break;
    39d4:	2204      	movs	r2, #4
    39d6:	4313      	orrs	r3, r2
    39d8:	aa04      	add	r2, sp, #16
    39da:	7013      	strb	r3, [r2, #0]
    39dc:	e7e4      	b.n	39a8 <uc8151_set_config+0x138>
        case STRENGTH_6:                eink_data[0] |= 0x05; break;
    39de:	2205      	movs	r2, #5
    39e0:	4313      	orrs	r3, r2
    39e2:	aa04      	add	r2, sp, #16
    39e4:	7013      	strb	r3, [r2, #0]
    39e6:	e7df      	b.n	39a8 <uc8151_set_config+0x138>
        case STRENGTH_7:                eink_data[0] |= 0x06; break;
    39e8:	2206      	movs	r2, #6
    39ea:	4313      	orrs	r3, r2
    39ec:	aa04      	add	r2, sp, #16
    39ee:	7013      	strb	r3, [r2, #0]
    39f0:	e7da      	b.n	39a8 <uc8151_set_config+0x138>
        case STRENGTH_8:                eink_data[0] |= 0x07; break;
    39f2:	2207      	movs	r2, #7
    39f4:	4313      	orrs	r3, r2
    39f6:	aa04      	add	r2, sp, #16
    39f8:	7013      	strb	r3, [r2, #0]
    39fa:	e7d5      	b.n	39a8 <uc8151_set_config+0x138>
        case MIN_OFF_TIME_340_NS:       eink_data[0] |= 0x01; break;
    39fc:	2501      	movs	r5, #1
    39fe:	432b      	orrs	r3, r5
    3a00:	ad04      	add	r5, sp, #16
    3a02:	702b      	strb	r3, [r5, #0]
    switch (config->booster_soft_start.a_soft_start_period) {
    3a04:	2801      	cmp	r0, #1
    3a06:	d030      	beq.n	3a6a <uc8151_set_config+0x1fa>
    3a08:	2800      	cmp	r0, #0
    3a0a:	d02a      	beq.n	3a62 <uc8151_set_config+0x1f2>
    3a0c:	2802      	cmp	r0, #2
    3a0e:	d030      	beq.n	3a72 <uc8151_set_config+0x202>
    3a10:	2803      	cmp	r0, #3
    3a12:	d032      	beq.n	3a7a <uc8151_set_config+0x20a>
    eink_data[1] = eink_data[1] << 3;
    3a14:	ab04      	add	r3, sp, #16
    3a16:	785b      	ldrb	r3, [r3, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3a18:	2907      	cmp	r1, #7
    3a1a:	d900      	bls.n	3a1e <uc8151_set_config+0x1ae>
    3a1c:	e08c      	b.n	3b38 <uc8151_set_config+0x2c8>
    3a1e:	0088      	lsls	r0, r1, #2
    3a20:	4d97      	ldr	r5, [pc, #604]	; (3c80 <uc8151_set_config+0x410>)
    3a22:	5828      	ldr	r0, [r5, r0]
    3a24:	4687      	mov	pc, r0
        case MIN_OFF_TIME_400_NS:       eink_data[0] |= 0x02; break;
    3a26:	2502      	movs	r5, #2
    3a28:	432b      	orrs	r3, r5
    3a2a:	ad04      	add	r5, sp, #16
    3a2c:	702b      	strb	r3, [r5, #0]
    3a2e:	e7e9      	b.n	3a04 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_540_NS:       eink_data[0] |= 0x03; break;
    3a30:	2503      	movs	r5, #3
    3a32:	432b      	orrs	r3, r5
    3a34:	ad04      	add	r5, sp, #16
    3a36:	702b      	strb	r3, [r5, #0]
    3a38:	e7e4      	b.n	3a04 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_800_NS:       eink_data[0] |= 0x04; break;
    3a3a:	2504      	movs	r5, #4
    3a3c:	432b      	orrs	r3, r5
    3a3e:	ad04      	add	r5, sp, #16
    3a40:	702b      	strb	r3, [r5, #0]
    3a42:	e7df      	b.n	3a04 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_1540_NS:      eink_data[0] |= 0x05; break;
    3a44:	2505      	movs	r5, #5
    3a46:	432b      	orrs	r3, r5
    3a48:	ad04      	add	r5, sp, #16
    3a4a:	702b      	strb	r3, [r5, #0]
    3a4c:	e7da      	b.n	3a04 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_3340_NS:      eink_data[0] |= 0x06; break;
    3a4e:	2506      	movs	r5, #6
    3a50:	432b      	orrs	r3, r5
    3a52:	ad04      	add	r5, sp, #16
    3a54:	702b      	strb	r3, [r5, #0]
    3a56:	e7d5      	b.n	3a04 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_6580_NS:      eink_data[0] |= 0x07; break;
    3a58:	2507      	movs	r5, #7
    3a5a:	432b      	orrs	r3, r5
    3a5c:	ad04      	add	r5, sp, #16
    3a5e:	702b      	strb	r3, [r5, #0]
    3a60:	e7d0      	b.n	3a04 <uc8151_set_config+0x194>
        case SS_PERIOD_10MS:            eink_data[1] = 0x00; break;
    3a62:	2000      	movs	r0, #0
    3a64:	ab04      	add	r3, sp, #16
    3a66:	7058      	strb	r0, [r3, #1]
    3a68:	e7d4      	b.n	3a14 <uc8151_set_config+0x1a4>
        case SS_PERIOD_20MS:            eink_data[1] = 0x01; break;
    3a6a:	2001      	movs	r0, #1
    3a6c:	ab04      	add	r3, sp, #16
    3a6e:	7058      	strb	r0, [r3, #1]
    3a70:	e7d0      	b.n	3a14 <uc8151_set_config+0x1a4>
        case SS_PERIOD_30MS:            eink_data[1] = 0x02; break;
    3a72:	2002      	movs	r0, #2
    3a74:	ab04      	add	r3, sp, #16
    3a76:	7058      	strb	r0, [r3, #1]
    3a78:	e7cc      	b.n	3a14 <uc8151_set_config+0x1a4>
        case SS_PERIOD_40MS:            eink_data[1] = 0x03; break;
    3a7a:	2003      	movs	r0, #3
    3a7c:	ab04      	add	r3, sp, #16
    3a7e:	7058      	strb	r0, [r3, #1]
    3a80:	e7c8      	b.n	3a14 <uc8151_set_config+0x1a4>
    eink_data[1] = eink_data[1] << 3;
    3a82:	019b      	lsls	r3, r3, #6
    3a84:	2008      	movs	r0, #8
    3a86:	4303      	orrs	r3, r0
    3a88:	b2db      	uxtb	r3, r3
    3a8a:	a804      	add	r0, sp, #16
    3a8c:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3a8e:	2a07      	cmp	r2, #7
    3a90:	d900      	bls.n	3a94 <uc8151_set_config+0x224>
    3a92:	e0bd      	b.n	3c10 <uc8151_set_config+0x3a0>
    3a94:	0090      	lsls	r0, r2, #2
    3a96:	4d7b      	ldr	r5, [pc, #492]	; (3c84 <uc8151_set_config+0x414>)
    3a98:	5828      	ldr	r0, [r5, r0]
    3a9a:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3a9c:	019b      	lsls	r3, r3, #6
    3a9e:	2010      	movs	r0, #16
    3aa0:	4303      	orrs	r3, r0
    3aa2:	b2db      	uxtb	r3, r3
    3aa4:	a804      	add	r0, sp, #16
    3aa6:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3aa8:	2a07      	cmp	r2, #7
    3aaa:	d900      	bls.n	3aae <uc8151_set_config+0x23e>
    3aac:	e0b4      	b.n	3c18 <uc8151_set_config+0x3a8>
    3aae:	0090      	lsls	r0, r2, #2
    3ab0:	4d75      	ldr	r5, [pc, #468]	; (3c88 <uc8151_set_config+0x418>)
    3ab2:	5828      	ldr	r0, [r5, r0]
    3ab4:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3ab6:	019b      	lsls	r3, r3, #6
    3ab8:	2018      	movs	r0, #24
    3aba:	4303      	orrs	r3, r0
    3abc:	b2db      	uxtb	r3, r3
    3abe:	a804      	add	r0, sp, #16
    3ac0:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3ac2:	2a07      	cmp	r2, #7
    3ac4:	d900      	bls.n	3ac8 <uc8151_set_config+0x258>
    3ac6:	e0ab      	b.n	3c20 <uc8151_set_config+0x3b0>
    3ac8:	0090      	lsls	r0, r2, #2
    3aca:	4d70      	ldr	r5, [pc, #448]	; (3c8c <uc8151_set_config+0x41c>)
    3acc:	5828      	ldr	r0, [r5, r0]
    3ace:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3ad0:	019b      	lsls	r3, r3, #6
    3ad2:	2020      	movs	r0, #32
    3ad4:	4303      	orrs	r3, r0
    3ad6:	b2db      	uxtb	r3, r3
    3ad8:	a804      	add	r0, sp, #16
    3ada:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3adc:	2a07      	cmp	r2, #7
    3ade:	d900      	bls.n	3ae2 <uc8151_set_config+0x272>
    3ae0:	e0a2      	b.n	3c28 <uc8151_set_config+0x3b8>
    3ae2:	0090      	lsls	r0, r2, #2
    3ae4:	4d6a      	ldr	r5, [pc, #424]	; (3c90 <uc8151_set_config+0x420>)
    3ae6:	5828      	ldr	r0, [r5, r0]
    3ae8:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3aea:	019b      	lsls	r3, r3, #6
    3aec:	2028      	movs	r0, #40	; 0x28
    3aee:	4303      	orrs	r3, r0
    3af0:	b2db      	uxtb	r3, r3
    3af2:	a804      	add	r0, sp, #16
    3af4:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3af6:	2a07      	cmp	r2, #7
    3af8:	d900      	bls.n	3afc <uc8151_set_config+0x28c>
    3afa:	e099      	b.n	3c30 <uc8151_set_config+0x3c0>
    3afc:	0090      	lsls	r0, r2, #2
    3afe:	4d65      	ldr	r5, [pc, #404]	; (3c94 <uc8151_set_config+0x424>)
    3b00:	5828      	ldr	r0, [r5, r0]
    3b02:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3b04:	019b      	lsls	r3, r3, #6
    3b06:	2030      	movs	r0, #48	; 0x30
    3b08:	4303      	orrs	r3, r0
    3b0a:	b2db      	uxtb	r3, r3
    3b0c:	a804      	add	r0, sp, #16
    3b0e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3b10:	2a07      	cmp	r2, #7
    3b12:	d900      	bls.n	3b16 <uc8151_set_config+0x2a6>
    3b14:	e090      	b.n	3c38 <uc8151_set_config+0x3c8>
    3b16:	0090      	lsls	r0, r2, #2
    3b18:	4d5f      	ldr	r5, [pc, #380]	; (3c98 <uc8151_set_config+0x428>)
    3b1a:	5828      	ldr	r0, [r5, r0]
    3b1c:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3b1e:	019b      	lsls	r3, r3, #6
    3b20:	2038      	movs	r0, #56	; 0x38
    3b22:	4303      	orrs	r3, r0
    3b24:	b2db      	uxtb	r3, r3
    3b26:	a804      	add	r0, sp, #16
    3b28:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3b2a:	2a07      	cmp	r2, #7
    3b2c:	d900      	bls.n	3b30 <uc8151_set_config+0x2c0>
    3b2e:	e087      	b.n	3c40 <uc8151_set_config+0x3d0>
    3b30:	0090      	lsls	r0, r2, #2
    3b32:	4d5a      	ldr	r5, [pc, #360]	; (3c9c <uc8151_set_config+0x42c>)
    3b34:	5828      	ldr	r0, [r5, r0]
    3b36:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3b38:	019b      	lsls	r3, r3, #6
    3b3a:	b2db      	uxtb	r3, r3
    3b3c:	a804      	add	r0, sp, #16
    3b3e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3b40:	2a07      	cmp	r2, #7
    3b42:	d850      	bhi.n	3be6 <uc8151_set_config+0x376>
    3b44:	0090      	lsls	r0, r2, #2
    3b46:	4d56      	ldr	r5, [pc, #344]	; (3ca0 <uc8151_set_config+0x430>)
    3b48:	5828      	ldr	r0, [r5, r0]
    3b4a:	4687      	mov	pc, r0
        case MIN_OFF_TIME_340_NS:       eink_data[1] |= 0x01; break;
    3b4c:	2001      	movs	r0, #1
    3b4e:	4303      	orrs	r3, r0
    3b50:	a804      	add	r0, sp, #16
    3b52:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3b54:	2907      	cmp	r1, #7
    3b56:	d900      	bls.n	3b5a <uc8151_set_config+0x2ea>
    3b58:	e0d7      	b.n	3d0a <uc8151_set_config+0x49a>
    3b5a:	0089      	lsls	r1, r1, #2
    3b5c:	4b51      	ldr	r3, [pc, #324]	; (3ca4 <uc8151_set_config+0x434>)
    3b5e:	585b      	ldr	r3, [r3, r1]
    3b60:	469f      	mov	pc, r3
        case MIN_OFF_TIME_400_NS:       eink_data[1] |= 0x02; break;
    3b62:	2002      	movs	r0, #2
    3b64:	4303      	orrs	r3, r0
    3b66:	a804      	add	r0, sp, #16
    3b68:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3b6a:	2907      	cmp	r1, #7
    3b6c:	d900      	bls.n	3b70 <uc8151_set_config+0x300>
    3b6e:	e12c      	b.n	3dca <uc8151_set_config+0x55a>
    3b70:	0089      	lsls	r1, r1, #2
    3b72:	4b4d      	ldr	r3, [pc, #308]	; (3ca8 <uc8151_set_config+0x438>)
    3b74:	585b      	ldr	r3, [r3, r1]
    3b76:	469f      	mov	pc, r3
        case MIN_OFF_TIME_540_NS:       eink_data[1] |= 0x03; break;
    3b78:	2003      	movs	r0, #3
    3b7a:	4303      	orrs	r3, r0
    3b7c:	a804      	add	r0, sp, #16
    3b7e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3b80:	2907      	cmp	r1, #7
    3b82:	d900      	bls.n	3b86 <uc8151_set_config+0x316>
    3b84:	e12a      	b.n	3ddc <uc8151_set_config+0x56c>
    3b86:	0089      	lsls	r1, r1, #2
    3b88:	4b48      	ldr	r3, [pc, #288]	; (3cac <uc8151_set_config+0x43c>)
    3b8a:	585b      	ldr	r3, [r3, r1]
    3b8c:	469f      	mov	pc, r3
        case MIN_OFF_TIME_800_NS:       eink_data[1] |= 0x04; break;
    3b8e:	2004      	movs	r0, #4
    3b90:	4303      	orrs	r3, r0
    3b92:	a804      	add	r0, sp, #16
    3b94:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3b96:	2907      	cmp	r1, #7
    3b98:	d900      	bls.n	3b9c <uc8151_set_config+0x32c>
    3b9a:	e128      	b.n	3dee <uc8151_set_config+0x57e>
    3b9c:	0089      	lsls	r1, r1, #2
    3b9e:	4b44      	ldr	r3, [pc, #272]	; (3cb0 <uc8151_set_config+0x440>)
    3ba0:	585b      	ldr	r3, [r3, r1]
    3ba2:	469f      	mov	pc, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[1] |= 0x05; break;
    3ba4:	2005      	movs	r0, #5
    3ba6:	4303      	orrs	r3, r0
    3ba8:	a804      	add	r0, sp, #16
    3baa:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3bac:	2907      	cmp	r1, #7
    3bae:	d900      	bls.n	3bb2 <uc8151_set_config+0x342>
    3bb0:	e126      	b.n	3e00 <uc8151_set_config+0x590>
    3bb2:	0089      	lsls	r1, r1, #2
    3bb4:	4b3f      	ldr	r3, [pc, #252]	; (3cb4 <uc8151_set_config+0x444>)
    3bb6:	585b      	ldr	r3, [r3, r1]
    3bb8:	469f      	mov	pc, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[1] |= 0x06; break;
    3bba:	2006      	movs	r0, #6
    3bbc:	4303      	orrs	r3, r0
    3bbe:	a804      	add	r0, sp, #16
    3bc0:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3bc2:	2907      	cmp	r1, #7
    3bc4:	d900      	bls.n	3bc8 <uc8151_set_config+0x358>
    3bc6:	e124      	b.n	3e12 <uc8151_set_config+0x5a2>
    3bc8:	0089      	lsls	r1, r1, #2
    3bca:	4b3b      	ldr	r3, [pc, #236]	; (3cb8 <uc8151_set_config+0x448>)
    3bcc:	585b      	ldr	r3, [r3, r1]
    3bce:	469f      	mov	pc, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[1] |= 0x07; break;
    3bd0:	2007      	movs	r0, #7
    3bd2:	4303      	orrs	r3, r0
    3bd4:	a804      	add	r0, sp, #16
    3bd6:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3bd8:	2907      	cmp	r1, #7
    3bda:	d900      	bls.n	3bde <uc8151_set_config+0x36e>
    3bdc:	e122      	b.n	3e24 <uc8151_set_config+0x5b4>
    3bde:	0089      	lsls	r1, r1, #2
    3be0:	4b36      	ldr	r3, [pc, #216]	; (3cbc <uc8151_set_config+0x44c>)
    3be2:	585b      	ldr	r3, [r3, r1]
    3be4:	469f      	mov	pc, r3
    3be6:	2907      	cmp	r1, #7
    3be8:	d806      	bhi.n	3bf8 <uc8151_set_config+0x388>
    3bea:	0089      	lsls	r1, r1, #2
    3bec:	4b34      	ldr	r3, [pc, #208]	; (3cc0 <uc8151_set_config+0x450>)
    3bee:	585b      	ldr	r3, [r3, r1]
    3bf0:	469f      	mov	pc, r3
        case STRENGTH_1:                eink_data[2] = 0x00; break;
    3bf2:	2100      	movs	r1, #0
    3bf4:	ab04      	add	r3, sp, #16
    3bf6:	7099      	strb	r1, [r3, #2]
    eink_data[2] = eink_data[2] << 3;
    3bf8:	a904      	add	r1, sp, #16
    3bfa:	788b      	ldrb	r3, [r1, #2]
    3bfc:	00db      	lsls	r3, r3, #3
    3bfe:	b2db      	uxtb	r3, r3
    3c00:	708b      	strb	r3, [r1, #2]
    switch (config->booster_soft_start.a_min_off_time) {
    3c02:	2a07      	cmp	r2, #7
    3c04:	d900      	bls.n	3c08 <uc8151_set_config+0x398>
    3c06:	e088      	b.n	3d1a <uc8151_set_config+0x4aa>
    3c08:	0092      	lsls	r2, r2, #2
    3c0a:	492e      	ldr	r1, [pc, #184]	; (3cc4 <uc8151_set_config+0x454>)
    3c0c:	588a      	ldr	r2, [r1, r2]
    3c0e:	4697      	mov	pc, r2
        case STRENGTH_2:                eink_data[2] = 0x01; break;
    3c10:	2101      	movs	r1, #1
    3c12:	ab04      	add	r3, sp, #16
    3c14:	7099      	strb	r1, [r3, #2]
    3c16:	e7ef      	b.n	3bf8 <uc8151_set_config+0x388>
        case STRENGTH_3:                eink_data[2] = 0x02; break;
    3c18:	2102      	movs	r1, #2
    3c1a:	ab04      	add	r3, sp, #16
    3c1c:	7099      	strb	r1, [r3, #2]
    3c1e:	e7eb      	b.n	3bf8 <uc8151_set_config+0x388>
        case STRENGTH_4:                eink_data[2] = 0x03; break;
    3c20:	2103      	movs	r1, #3
    3c22:	ab04      	add	r3, sp, #16
    3c24:	7099      	strb	r1, [r3, #2]
    3c26:	e7e7      	b.n	3bf8 <uc8151_set_config+0x388>
        case STRENGTH_5:                eink_data[2] = 0x04; break;
    3c28:	2104      	movs	r1, #4
    3c2a:	ab04      	add	r3, sp, #16
    3c2c:	7099      	strb	r1, [r3, #2]
    3c2e:	e7e3      	b.n	3bf8 <uc8151_set_config+0x388>
        case STRENGTH_6:                eink_data[2] = 0x05; break;
    3c30:	2105      	movs	r1, #5
    3c32:	ab04      	add	r3, sp, #16
    3c34:	7099      	strb	r1, [r3, #2]
    3c36:	e7df      	b.n	3bf8 <uc8151_set_config+0x388>
        case STRENGTH_7:                eink_data[2] = 0x06; break;
    3c38:	2106      	movs	r1, #6
    3c3a:	ab04      	add	r3, sp, #16
    3c3c:	7099      	strb	r1, [r3, #2]
    3c3e:	e7db      	b.n	3bf8 <uc8151_set_config+0x388>
        case STRENGTH_8:                eink_data[2] = 0x07; break;
    3c40:	2107      	movs	r1, #7
    3c42:	ab04      	add	r3, sp, #16
    3c44:	7099      	strb	r1, [r3, #2]
    3c46:	e7d7      	b.n	3bf8 <uc8151_set_config+0x388>
        case PFS_1_FRAME:               eink_data[0] = 0x00; break;
    3c48:	2200      	movs	r2, #0
    3c4a:	ab04      	add	r3, sp, #16
    3c4c:	701a      	strb	r2, [r3, #0]
    3c4e:	e072      	b.n	3d36 <uc8151_set_config+0x4c6>
        case PFS_2_FRAMES:              eink_data[0] = 0x10; break;
    3c50:	2210      	movs	r2, #16
    3c52:	ab04      	add	r3, sp, #16
    3c54:	701a      	strb	r2, [r3, #0]
    3c56:	e06e      	b.n	3d36 <uc8151_set_config+0x4c6>
        case PFS_3_FRAMES:              eink_data[0] = 0x20; break;
    3c58:	2220      	movs	r2, #32
    3c5a:	ab04      	add	r3, sp, #16
    3c5c:	701a      	strb	r2, [r3, #0]
    3c5e:	e06a      	b.n	3d36 <uc8151_set_config+0x4c6>
    3c60:	00001bd9 	.word	0x00001bd9
    3c64:	00004609 	.word	0x00004609
    3c68:	000036f5 	.word	0x000036f5
    3c6c:	0000034d 	.word	0x0000034d
    3c70:	0000035b 	.word	0x0000035b
    3c74:	41004400 	.word	0x41004400
    3c78:	00004780 	.word	0x00004780
    3c7c:	000047a0 	.word	0x000047a0
    3c80:	000047c0 	.word	0x000047c0
    3c84:	000047e0 	.word	0x000047e0
    3c88:	00004800 	.word	0x00004800
    3c8c:	00004820 	.word	0x00004820
    3c90:	00004840 	.word	0x00004840
    3c94:	00004860 	.word	0x00004860
    3c98:	00004880 	.word	0x00004880
    3c9c:	000048a0 	.word	0x000048a0
    3ca0:	000048c0 	.word	0x000048c0
    3ca4:	000048e0 	.word	0x000048e0
    3ca8:	00004900 	.word	0x00004900
    3cac:	00004920 	.word	0x00004920
    3cb0:	00004940 	.word	0x00004940
    3cb4:	00004960 	.word	0x00004960
    3cb8:	00004980 	.word	0x00004980
    3cbc:	000049a0 	.word	0x000049a0
    3cc0:	000049c0 	.word	0x000049c0
    3cc4:	000049e0 	.word	0x000049e0
        case PFS_4_FRAMES:              eink_data[0] = 0x30; break;
    3cc8:	2230      	movs	r2, #48	; 0x30
    3cca:	ab04      	add	r3, sp, #16
    3ccc:	701a      	strb	r2, [r3, #0]
    3cce:	e032      	b.n	3d36 <uc8151_set_config+0x4c6>
        case INTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x0; break;
    3cd0:	2200      	movs	r2, #0
    3cd2:	ab04      	add	r3, sp, #16
    3cd4:	701a      	strb	r2, [r3, #0]
    3cd6:	e038      	b.n	3d4a <uc8151_set_config+0x4da>
        case EXTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x1; break;
    3cd8:	2201      	movs	r2, #1
    3cda:	ab04      	add	r3, sp, #16
    3cdc:	701a      	strb	r2, [r3, #0]
    3cde:	e034      	b.n	3d4a <uc8151_set_config+0x4da>
    } else if((config->temperature_sensor_settings.temperature_offset <= 7) && (config->temperature_sensor_settings.temperature_offset >= 0)) {
    3ce0:	b2d1      	uxtb	r1, r2
    3ce2:	2907      	cmp	r1, #7
    3ce4:	d803      	bhi.n	3cee <uc8151_set_config+0x47e>
        eink_data[0] |= config->temperature_sensor_settings.temperature_offset;
    3ce6:	4313      	orrs	r3, r2
    3ce8:	aa04      	add	r2, sp, #16
    3cea:	7013      	strb	r3, [r2, #0]
    3cec:	e039      	b.n	3d62 <uc8151_set_config+0x4f2>
    } else if(config->temperature_sensor_settings.temperature_offset < -8) {
    3cee:	0011      	movs	r1, r2
    3cf0:	3108      	adds	r1, #8
    3cf2:	da04      	bge.n	3cfe <uc8151_set_config+0x48e>
        eink_data[0] |= 0x8;
    3cf4:	2208      	movs	r2, #8
    3cf6:	4313      	orrs	r3, r2
    3cf8:	aa04      	add	r2, sp, #16
    3cfa:	7013      	strb	r3, [r2, #0]
    3cfc:	e031      	b.n	3d62 <uc8151_set_config+0x4f2>
        eink_data[0] |= (config->temperature_sensor_settings.temperature_offset & 0x0F);
    3cfe:	210f      	movs	r1, #15
    3d00:	400a      	ands	r2, r1
    3d02:	4313      	orrs	r3, r2
    3d04:	aa04      	add	r2, sp, #16
    3d06:	7013      	strb	r3, [r2, #0]
    3d08:	e02b      	b.n	3d62 <uc8151_set_config+0x4f2>
    eink_data[2] = eink_data[2] << 3;
    3d0a:	ab04      	add	r3, sp, #16
    3d0c:	789b      	ldrb	r3, [r3, #2]
    3d0e:	00db      	lsls	r3, r3, #3
    3d10:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_340_NS:       eink_data[2] |= 0x01; break;
    3d12:	2201      	movs	r2, #1
    3d14:	4313      	orrs	r3, r2
    3d16:	aa04      	add	r2, sp, #16
    3d18:	7093      	strb	r3, [r2, #2]
    eink_write_data(UC8151_BTST, eink_data, 3);
    3d1a:	2203      	movs	r2, #3
    3d1c:	a904      	add	r1, sp, #16
    3d1e:	2006      	movs	r0, #6
    3d20:	4b45      	ldr	r3, [pc, #276]	; (3e38 <uc8151_set_config+0x5c8>)
    3d22:	4798      	blx	r3
    switch (config->power_off_sequence) {
    3d24:	7d23      	ldrb	r3, [r4, #20]
    3d26:	2b01      	cmp	r3, #1
    3d28:	d092      	beq.n	3c50 <uc8151_set_config+0x3e0>
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d08c      	beq.n	3c48 <uc8151_set_config+0x3d8>
    3d2e:	2b02      	cmp	r3, #2
    3d30:	d092      	beq.n	3c58 <uc8151_set_config+0x3e8>
    3d32:	2b03      	cmp	r3, #3
    3d34:	d0c8      	beq.n	3cc8 <uc8151_set_config+0x458>
    eink_write_data(UC8151_PFS, eink_data, 1);
    3d36:	2201      	movs	r2, #1
    3d38:	a904      	add	r1, sp, #16
    3d3a:	2003      	movs	r0, #3
    3d3c:	4b3e      	ldr	r3, [pc, #248]	; (3e38 <uc8151_set_config+0x5c8>)
    3d3e:	4798      	blx	r3
    switch (config->temperature_sensor_settings.sensor_select) {
    3d40:	7d63      	ldrb	r3, [r4, #21]
    3d42:	2b00      	cmp	r3, #0
    3d44:	d0c4      	beq.n	3cd0 <uc8151_set_config+0x460>
    3d46:	2b01      	cmp	r3, #1
    3d48:	d0c6      	beq.n	3cd8 <uc8151_set_config+0x468>
    eink_data[0] = eink_data[0] << 4;
    3d4a:	ab04      	add	r3, sp, #16
    3d4c:	781b      	ldrb	r3, [r3, #0]
    3d4e:	011b      	lsls	r3, r3, #4
    3d50:	b2db      	uxtb	r3, r3
    if (config->temperature_sensor_settings.temperature_offset > 7) {
    3d52:	2216      	movs	r2, #22
    3d54:	56a2      	ldrsb	r2, [r4, r2]
    3d56:	2a07      	cmp	r2, #7
    3d58:	ddc2      	ble.n	3ce0 <uc8151_set_config+0x470>
        eink_data[0] |= 0x7;
    3d5a:	2207      	movs	r2, #7
    3d5c:	4313      	orrs	r3, r2
    3d5e:	aa04      	add	r2, sp, #16
    3d60:	7013      	strb	r3, [r2, #0]
    eink_write_data(UC8151_TSE, eink_data, 1);
    3d62:	ad04      	add	r5, sp, #16
    3d64:	2201      	movs	r2, #1
    3d66:	0029      	movs	r1, r5
    3d68:	2041      	movs	r0, #65	; 0x41
    3d6a:	4c33      	ldr	r4, [pc, #204]	; (3e38 <uc8151_set_config+0x5c8>)
    3d6c:	47a0      	blx	r4
    eink_data[0] = 0x77;
    3d6e:	2377      	movs	r3, #119	; 0x77
    3d70:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3d72:	2201      	movs	r2, #1
    3d74:	0029      	movs	r1, r5
    3d76:	2050      	movs	r0, #80	; 0x50
    3d78:	47a0      	blx	r4
    eink_data[0] = 0x22;
    3d7a:	2322      	movs	r3, #34	; 0x22
    3d7c:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_TCON, eink_data, 1);
    3d7e:	2201      	movs	r2, #1
    3d80:	0029      	movs	r1, r5
    3d82:	2060      	movs	r0, #96	; 0x60
    3d84:	47a0      	blx	r4
    eink_data[0] = 0x3C;
    3d86:	233c      	movs	r3, #60	; 0x3c
    3d88:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3d8a:	2201      	movs	r2, #1
    3d8c:	0029      	movs	r1, r5
    3d8e:	2050      	movs	r0, #80	; 0x50
    3d90:	47a0      	blx	r4
    eink_write_data(UC8151_POF, 0, 0);
    3d92:	2200      	movs	r2, #0
    3d94:	2100      	movs	r1, #0
    3d96:	2002      	movs	r0, #2
    3d98:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    3d9a:	4f28      	ldr	r7, [pc, #160]	; (3e3c <uc8151_set_config+0x5cc>)
	CRITICAL_SECTION_LEAVE();
    3d9c:	4e28      	ldr	r6, [pc, #160]	; (3e40 <uc8151_set_config+0x5d0>)
	CRITICAL_SECTION_ENTER();
    3d9e:	a801      	add	r0, sp, #4
    3da0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3da2:	23c0      	movs	r3, #192	; 0xc0
    3da4:	05db      	lsls	r3, r3, #23
    3da6:	2580      	movs	r5, #128	; 0x80
    3da8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3daa:	22a0      	movs	r2, #160	; 0xa0
    3dac:	4925      	ldr	r1, [pc, #148]	; (3e44 <uc8151_set_config+0x5d4>)
    3dae:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3db0:	2190      	movs	r1, #144	; 0x90
    3db2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3db4:	4053      	eors	r3, r2
    3db6:	401c      	ands	r4, r3
    3db8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3dba:	a801      	add	r0, sp, #4
    3dbc:	47b0      	blx	r6
    3dbe:	4225      	tst	r5, r4
    3dc0:	d0ed      	beq.n	3d9e <uc8151_set_config+0x52e>
}
    3dc2:	b006      	add	sp, #24
    3dc4:	bc04      	pop	{r2}
    3dc6:	4690      	mov	r8, r2
    3dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_data[2] = eink_data[2] << 3;
    3dca:	ab04      	add	r3, sp, #16
    3dcc:	789b      	ldrb	r3, [r3, #2]
    3dce:	00db      	lsls	r3, r3, #3
    3dd0:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_400_NS:       eink_data[2] |= 0x02; break;
    3dd2:	2202      	movs	r2, #2
    3dd4:	4313      	orrs	r3, r2
    3dd6:	aa04      	add	r2, sp, #16
    3dd8:	7093      	strb	r3, [r2, #2]
    3dda:	e79e      	b.n	3d1a <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3ddc:	ab04      	add	r3, sp, #16
    3dde:	789b      	ldrb	r3, [r3, #2]
    3de0:	00db      	lsls	r3, r3, #3
    3de2:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_540_NS:       eink_data[2] |= 0x03; break;
    3de4:	2203      	movs	r2, #3
    3de6:	4313      	orrs	r3, r2
    3de8:	aa04      	add	r2, sp, #16
    3dea:	7093      	strb	r3, [r2, #2]
    3dec:	e795      	b.n	3d1a <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3dee:	ab04      	add	r3, sp, #16
    3df0:	789b      	ldrb	r3, [r3, #2]
    3df2:	00db      	lsls	r3, r3, #3
    3df4:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_800_NS:       eink_data[2] |= 0x04; break;
    3df6:	2204      	movs	r2, #4
    3df8:	4313      	orrs	r3, r2
    3dfa:	aa04      	add	r2, sp, #16
    3dfc:	7093      	strb	r3, [r2, #2]
    3dfe:	e78c      	b.n	3d1a <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3e00:	ab04      	add	r3, sp, #16
    3e02:	789b      	ldrb	r3, [r3, #2]
    3e04:	00db      	lsls	r3, r3, #3
    3e06:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[2] |= 0x05; break;
    3e08:	2205      	movs	r2, #5
    3e0a:	4313      	orrs	r3, r2
    3e0c:	aa04      	add	r2, sp, #16
    3e0e:	7093      	strb	r3, [r2, #2]
    3e10:	e783      	b.n	3d1a <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3e12:	ab04      	add	r3, sp, #16
    3e14:	789b      	ldrb	r3, [r3, #2]
    3e16:	00db      	lsls	r3, r3, #3
    3e18:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[2] |= 0x06; break;
    3e1a:	2206      	movs	r2, #6
    3e1c:	4313      	orrs	r3, r2
    3e1e:	aa04      	add	r2, sp, #16
    3e20:	7093      	strb	r3, [r2, #2]
    3e22:	e77a      	b.n	3d1a <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3e24:	ab04      	add	r3, sp, #16
    3e26:	789b      	ldrb	r3, [r3, #2]
    3e28:	00db      	lsls	r3, r3, #3
    3e2a:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[2] |= 0x07; break;
    3e2c:	2207      	movs	r2, #7
    3e2e:	4313      	orrs	r3, r2
    3e30:	aa04      	add	r2, sp, #16
    3e32:	7093      	strb	r3, [r2, #2]
    3e34:	e771      	b.n	3d1a <uc8151_set_config+0x4aa>
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	00001bd9 	.word	0x00001bd9
    3e3c:	0000034d 	.word	0x0000034d
    3e40:	0000035b 	.word	0x0000035b
    3e44:	41004400 	.word	0x41004400

00003e48 <gfx_eink_graphics_fill_screen>:
 * \param fill_type Selects the color to fill the display buffer with.
 * 
 * \note Selecting FILL_NONE as the color will be ignored.
 */
void gfx_eink_graphics_fill_screen(enum eink_fill_colour fill_color)
{
    3e48:	b530      	push	{r4, r5, lr}
    3e4a:	b083      	sub	sp, #12
    3e4c:	0004      	movs	r4, r0
    volatile eink_coordinate dx, width_fill;
    volatile eink_coordinate dy, height_fill;
    
    width_fill = ptr_eink_gfx_config->display_width;
    3e4e:	4b5d      	ldr	r3, [pc, #372]	; (3fc4 <gfx_eink_graphics_fill_screen+0x17c>)
    3e50:	681b      	ldr	r3, [r3, #0]
    3e52:	8859      	ldrh	r1, [r3, #2]
    3e54:	aa01      	add	r2, sp, #4
    3e56:	8011      	strh	r1, [r2, #0]
    height_fill = ptr_eink_gfx_config->display_height;
    3e58:	889b      	ldrh	r3, [r3, #4]
    3e5a:	4669      	mov	r1, sp
    3e5c:	800b      	strh	r3, [r1, #0]
    
    for(dx = 0; dx < width_fill; dx++) {
    3e5e:	466b      	mov	r3, sp
    3e60:	2100      	movs	r1, #0
    3e62:	80d9      	strh	r1, [r3, #6]
    3e64:	3306      	adds	r3, #6
    3e66:	881b      	ldrh	r3, [r3, #0]
    3e68:	8812      	ldrh	r2, [r2, #0]
    3e6a:	b29b      	uxth	r3, r3
    3e6c:	4293      	cmp	r3, r2
    3e6e:	d300      	bcc.n	3e72 <gfx_eink_graphics_fill_screen+0x2a>
    3e70:	e0a5      	b.n	3fbe <gfx_eink_graphics_fill_screen+0x176>
        for(dy = 0; dy < height_fill; dy++) {
            if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
            {
                switch (fill_color) {
    3e72:	0085      	lsls	r5, r0, #2
    3e74:	4b54      	ldr	r3, [pc, #336]	; (3fc8 <gfx_eink_graphics_fill_screen+0x180>)
    3e76:	469c      	mov	ip, r3
    3e78:	4465      	add	r5, ip
    3e7a:	e095      	b.n	3fa8 <gfx_eink_graphics_fill_screen+0x160>
    3e7c:	2c07      	cmp	r4, #7
    3e7e:	d85a      	bhi.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
    3e80:	682b      	ldr	r3, [r5, #0]
    3e82:	469f      	mov	pc, r3
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    3e84:	466b      	mov	r3, sp
    3e86:	88d8      	ldrh	r0, [r3, #6]
    3e88:	b280      	uxth	r0, r0
    3e8a:	466b      	mov	r3, sp
    3e8c:	8859      	ldrh	r1, [r3, #2]
    3e8e:	b289      	uxth	r1, r1
    3e90:	2200      	movs	r2, #0
    3e92:	4b4e      	ldr	r3, [pc, #312]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3e94:	4798      	blx	r3
    3e96:	e04e      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    3e98:	466b      	mov	r3, sp
    3e9a:	88d8      	ldrh	r0, [r3, #6]
    3e9c:	b280      	uxth	r0, r0
    3e9e:	466b      	mov	r3, sp
    3ea0:	8859      	ldrh	r1, [r3, #2]
    3ea2:	b289      	uxth	r1, r1
    3ea4:	2201      	movs	r2, #1
    3ea6:	4b49      	ldr	r3, [pc, #292]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3ea8:	4798      	blx	r3
    3eaa:	e044      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_YELLOW: gfx_eink_set_pixel(dx, dy, PIXEL_YELLOW); break;
    3eac:	466b      	mov	r3, sp
    3eae:	88d8      	ldrh	r0, [r3, #6]
    3eb0:	b280      	uxth	r0, r0
    3eb2:	466b      	mov	r3, sp
    3eb4:	8859      	ldrh	r1, [r3, #2]
    3eb6:	b289      	uxth	r1, r1
    3eb8:	2203      	movs	r2, #3
    3eba:	4b44      	ldr	r3, [pc, #272]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3ebc:	4798      	blx	r3
    3ebe:	e03a      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    3ec0:	466b      	mov	r3, sp
    3ec2:	88d8      	ldrh	r0, [r3, #6]
    3ec4:	b280      	uxth	r0, r0
    3ec6:	466b      	mov	r3, sp
    3ec8:	8859      	ldrh	r1, [r3, #2]
    3eca:	b289      	uxth	r1, r1
    3ecc:	2202      	movs	r2, #2
    3ece:	4b3f      	ldr	r3, [pc, #252]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3ed0:	4798      	blx	r3
    3ed2:	e030      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_GREEN:  gfx_eink_set_pixel(dx, dy, PIXEL_GREEN); break;
    3ed4:	466b      	mov	r3, sp
    3ed6:	88d8      	ldrh	r0, [r3, #6]
    3ed8:	b280      	uxth	r0, r0
    3eda:	466b      	mov	r3, sp
    3edc:	8859      	ldrh	r1, [r3, #2]
    3ede:	b289      	uxth	r1, r1
    3ee0:	2204      	movs	r2, #4
    3ee2:	4b3a      	ldr	r3, [pc, #232]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3ee4:	4798      	blx	r3
    3ee6:	e026      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_BLUE:   gfx_eink_set_pixel(dx, dy, PIXEL_BLUE); break;
    3ee8:	466b      	mov	r3, sp
    3eea:	88d8      	ldrh	r0, [r3, #6]
    3eec:	b280      	uxth	r0, r0
    3eee:	466b      	mov	r3, sp
    3ef0:	8859      	ldrh	r1, [r3, #2]
    3ef2:	b289      	uxth	r1, r1
    3ef4:	2205      	movs	r2, #5
    3ef6:	4b35      	ldr	r3, [pc, #212]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3ef8:	4798      	blx	r3
    3efa:	e01c      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_ORANGE: gfx_eink_set_pixel(dx, dy, PIXEL_ORANGE); break;
    3efc:	466b      	mov	r3, sp
    3efe:	88d8      	ldrh	r0, [r3, #6]
    3f00:	b280      	uxth	r0, r0
    3f02:	466b      	mov	r3, sp
    3f04:	8859      	ldrh	r1, [r3, #2]
    3f06:	b289      	uxth	r1, r1
    3f08:	2206      	movs	r2, #6
    3f0a:	4b30      	ldr	r3, [pc, #192]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3f0c:	4798      	blx	r3
    3f0e:	e012      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_CLEAN:  gfx_eink_set_pixel(dx, dy, PIXEL_CLEAN); break;
    3f10:	466b      	mov	r3, sp
    3f12:	88d8      	ldrh	r0, [r3, #6]
    3f14:	b280      	uxth	r0, r0
    3f16:	466b      	mov	r3, sp
    3f18:	8859      	ldrh	r1, [r3, #2]
    3f1a:	b289      	uxth	r1, r1
    3f1c:	2207      	movs	r2, #7
    3f1e:	4b2b      	ldr	r3, [pc, #172]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3f20:	4798      	blx	r3
    3f22:	e008      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                }
            } else {
                switch (fill_color) {
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    3f24:	466b      	mov	r3, sp
    3f26:	88d8      	ldrh	r0, [r3, #6]
    3f28:	b280      	uxth	r0, r0
    3f2a:	466b      	mov	r3, sp
    3f2c:	8859      	ldrh	r1, [r3, #2]
    3f2e:	b289      	uxth	r1, r1
    3f30:	2200      	movs	r2, #0
    3f32:	4b26      	ldr	r3, [pc, #152]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3f34:	4798      	blx	r3
        for(dy = 0; dy < height_fill; dy++) {
    3f36:	466b      	mov	r3, sp
    3f38:	1c9a      	adds	r2, r3, #2
    3f3a:	885b      	ldrh	r3, [r3, #2]
    3f3c:	3301      	adds	r3, #1
    3f3e:	b29b      	uxth	r3, r3
    3f40:	8013      	strh	r3, [r2, #0]
    3f42:	8813      	ldrh	r3, [r2, #0]
    3f44:	466a      	mov	r2, sp
    3f46:	8812      	ldrh	r2, [r2, #0]
    3f48:	b29b      	uxth	r3, r3
    3f4a:	4293      	cmp	r3, r2
    3f4c:	d220      	bcs.n	3f90 <gfx_eink_graphics_fill_screen+0x148>
            if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    3f4e:	4b1d      	ldr	r3, [pc, #116]	; (3fc4 <gfx_eink_graphics_fill_screen+0x17c>)
    3f50:	681b      	ldr	r3, [r3, #0]
    3f52:	781b      	ldrb	r3, [r3, #0]
    3f54:	3b06      	subs	r3, #6
    3f56:	2b01      	cmp	r3, #1
    3f58:	d800      	bhi.n	3f5c <gfx_eink_graphics_fill_screen+0x114>
    3f5a:	e78f      	b.n	3e7c <gfx_eink_graphics_fill_screen+0x34>
                switch (fill_color) {
    3f5c:	2c01      	cmp	r4, #1
    3f5e:	d00d      	beq.n	3f7c <gfx_eink_graphics_fill_screen+0x134>
    3f60:	2c00      	cmp	r4, #0
    3f62:	d0df      	beq.n	3f24 <gfx_eink_graphics_fill_screen+0xdc>
    3f64:	2c03      	cmp	r4, #3
    3f66:	d8e6      	bhi.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
                    case FILL_YELLOW:
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    3f68:	466b      	mov	r3, sp
    3f6a:	88d8      	ldrh	r0, [r3, #6]
    3f6c:	b280      	uxth	r0, r0
    3f6e:	466b      	mov	r3, sp
    3f70:	8859      	ldrh	r1, [r3, #2]
    3f72:	b289      	uxth	r1, r1
    3f74:	2202      	movs	r2, #2
    3f76:	4b15      	ldr	r3, [pc, #84]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3f78:	4798      	blx	r3
    3f7a:	e7dc      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    3f7c:	466b      	mov	r3, sp
    3f7e:	88d8      	ldrh	r0, [r3, #6]
    3f80:	b280      	uxth	r0, r0
    3f82:	466b      	mov	r3, sp
    3f84:	8859      	ldrh	r1, [r3, #2]
    3f86:	b289      	uxth	r1, r1
    3f88:	2201      	movs	r2, #1
    3f8a:	4b10      	ldr	r3, [pc, #64]	; (3fcc <gfx_eink_graphics_fill_screen+0x184>)
    3f8c:	4798      	blx	r3
    3f8e:	e7d2      	b.n	3f36 <gfx_eink_graphics_fill_screen+0xee>
    for(dx = 0; dx < width_fill; dx++) {
    3f90:	466b      	mov	r3, sp
    3f92:	1d9a      	adds	r2, r3, #6
    3f94:	88db      	ldrh	r3, [r3, #6]
    3f96:	3301      	adds	r3, #1
    3f98:	b29b      	uxth	r3, r3
    3f9a:	8013      	strh	r3, [r2, #0]
    3f9c:	8813      	ldrh	r3, [r2, #0]
    3f9e:	aa01      	add	r2, sp, #4
    3fa0:	8812      	ldrh	r2, [r2, #0]
    3fa2:	b29b      	uxth	r3, r3
    3fa4:	4293      	cmp	r3, r2
    3fa6:	d20a      	bcs.n	3fbe <gfx_eink_graphics_fill_screen+0x176>
        for(dy = 0; dy < height_fill; dy++) {
    3fa8:	466b      	mov	r3, sp
    3faa:	2200      	movs	r2, #0
    3fac:	805a      	strh	r2, [r3, #2]
    3fae:	3302      	adds	r3, #2
    3fb0:	881b      	ldrh	r3, [r3, #0]
    3fb2:	466a      	mov	r2, sp
    3fb4:	8812      	ldrh	r2, [r2, #0]
    3fb6:	b29b      	uxth	r3, r3
    3fb8:	4293      	cmp	r3, r2
    3fba:	d3c8      	bcc.n	3f4e <gfx_eink_graphics_fill_screen+0x106>
    3fbc:	e7e8      	b.n	3f90 <gfx_eink_graphics_fill_screen+0x148>
                }
            }
        }
    }
}
    3fbe:	b003      	add	sp, #12
    3fc0:	bd30      	pop	{r4, r5, pc}
    3fc2:	46c0      	nop			; (mov r8, r8)
    3fc4:	20000424 	.word	0x20000424
    3fc8:	00004a00 	.word	0x00004a00
    3fcc:	00000585 	.word	0x00000585

00003fd0 <gfx_eink_graphics_draw_rect>:
 * \param fill_type Color of the rectangle fill.
 *
 * \note Both the border and the fill can be set to blank should you want a border-less or empty rectangle.
 */
void gfx_eink_graphics_draw_rect(eink_coordinate x0, eink_coordinate y0, eink_coordinate width, eink_coordinate height, enum eink_pixel_colour line_colour, enum eink_fill_colour fill_colour)
{
    3fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fd2:	46de      	mov	lr, fp
    3fd4:	4657      	mov	r7, sl
    3fd6:	464e      	mov	r6, r9
    3fd8:	4645      	mov	r5, r8
    3fda:	b5e0      	push	{r5, r6, r7, lr}
    3fdc:	b085      	sub	sp, #20
    3fde:	0007      	movs	r7, r0
    3fe0:	9001      	str	r0, [sp, #4]
    3fe2:	4688      	mov	r8, r1
    3fe4:	9203      	str	r2, [sp, #12]
    3fe6:	469b      	mov	fp, r3
    3fe8:	ab0e      	add	r3, sp, #56	; 0x38
    3fea:	781e      	ldrb	r6, [r3, #0]
    3fec:	ab0f      	add	r3, sp, #60	; 0x3c
    3fee:	781c      	ldrb	r4, [r3, #0]
    eink_coordinate i, j;
    
    /* Draw rectangle borders first */
    for (i = x0; i < (x0+width); i++) {
    3ff0:	4691      	mov	r9, r2
    3ff2:	4684      	mov	ip, r0
    3ff4:	44e1      	add	r9, ip
    3ff6:	4548      	cmp	r0, r9
    3ff8:	da1b      	bge.n	4032 <gfx_eink_graphics_draw_rect+0x62>
        gfx_eink_set_pixel(i, y0, line_colour);
    3ffa:	4d5a      	ldr	r5, [pc, #360]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    3ffc:	465b      	mov	r3, fp
    3ffe:	3b01      	subs	r3, #1
    4000:	4443      	add	r3, r8
    4002:	b29b      	uxth	r3, r3
    4004:	9302      	str	r3, [sp, #8]
    4006:	9600      	str	r6, [sp, #0]
    4008:	464e      	mov	r6, r9
    400a:	0023      	movs	r3, r4
    400c:	000c      	movs	r4, r1
    400e:	4698      	mov	r8, r3
        gfx_eink_set_pixel(i, y0, line_colour);
    4010:	9a00      	ldr	r2, [sp, #0]
    4012:	0021      	movs	r1, r4
    4014:	0038      	movs	r0, r7
    4016:	47a8      	blx	r5
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    4018:	9a00      	ldr	r2, [sp, #0]
    401a:	9902      	ldr	r1, [sp, #8]
    401c:	0038      	movs	r0, r7
    401e:	47a8      	blx	r5
    for (i = x0; i < (x0+width); i++) {
    4020:	3701      	adds	r7, #1
    4022:	b2bf      	uxth	r7, r7
    4024:	42b7      	cmp	r7, r6
    4026:	dbf3      	blt.n	4010 <gfx_eink_graphics_draw_rect+0x40>
    4028:	46b1      	mov	r9, r6
    402a:	9e00      	ldr	r6, [sp, #0]
    402c:	4643      	mov	r3, r8
    402e:	46a0      	mov	r8, r4
    4030:	001c      	movs	r4, r3
    }
    for (i = y0; i < (y0+height); i++) {
    4032:	46da      	mov	sl, fp
    4034:	44c2      	add	sl, r8
    4036:	45d0      	cmp	r8, sl
    4038:	da1a      	bge.n	4070 <gfx_eink_graphics_draw_rect+0xa0>
    403a:	4645      	mov	r5, r8
        gfx_eink_set_pixel(x0, i, line_colour);
    403c:	4f49      	ldr	r7, [pc, #292]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    403e:	9b03      	ldr	r3, [sp, #12]
    4040:	3b01      	subs	r3, #1
    4042:	9a01      	ldr	r2, [sp, #4]
    4044:	4694      	mov	ip, r2
    4046:	4463      	add	r3, ip
    4048:	b29b      	uxth	r3, r3
    404a:	9300      	str	r3, [sp, #0]
    404c:	0023      	movs	r3, r4
    404e:	4654      	mov	r4, sl
    4050:	469a      	mov	sl, r3
        gfx_eink_set_pixel(x0, i, line_colour);
    4052:	0032      	movs	r2, r6
    4054:	0029      	movs	r1, r5
    4056:	9801      	ldr	r0, [sp, #4]
    4058:	47b8      	blx	r7
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    405a:	0032      	movs	r2, r6
    405c:	0029      	movs	r1, r5
    405e:	9800      	ldr	r0, [sp, #0]
    4060:	47b8      	blx	r7
    for (i = y0; i < (y0+height); i++) {
    4062:	3501      	adds	r5, #1
    4064:	b2ad      	uxth	r5, r5
    4066:	42a5      	cmp	r5, r4
    4068:	dbf3      	blt.n	4052 <gfx_eink_graphics_draw_rect+0x82>
    406a:	4653      	mov	r3, sl
    406c:	46a2      	mov	sl, r4
    406e:	001c      	movs	r4, r3
    }
    
    /* Add a fill if necessary */
    if (fill_colour != FILL_NONE) {
    4070:	2c08      	cmp	r4, #8
    4072:	d06f      	beq.n	4154 <gfx_eink_graphics_draw_rect+0x184>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    4074:	9d01      	ldr	r5, [sp, #4]
    4076:	3501      	adds	r5, #1
    4078:	b2ad      	uxth	r5, r5
    407a:	2301      	movs	r3, #1
    407c:	425b      	negs	r3, r3
    407e:	469c      	mov	ip, r3
    4080:	44e1      	add	r9, ip
    4082:	454d      	cmp	r5, r9
    4084:	da66      	bge.n	4154 <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
                {
                    switch (fill_colour) {
    4086:	00a3      	lsls	r3, r4, #2
    4088:	4a37      	ldr	r2, [pc, #220]	; (4168 <gfx_eink_graphics_draw_rect+0x198>)
    408a:	4693      	mov	fp, r2
    408c:	449b      	add	fp, r3
    408e:	e059      	b.n	4144 <gfx_eink_graphics_draw_rect+0x174>
    4090:	2c07      	cmp	r4, #7
    4092:	d837      	bhi.n	4104 <gfx_eink_graphics_draw_rect+0x134>
    4094:	465b      	mov	r3, fp
    4096:	681b      	ldr	r3, [r3, #0]
    4098:	469f      	mov	pc, r3
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    409a:	2200      	movs	r2, #0
    409c:	0031      	movs	r1, r6
    409e:	0028      	movs	r0, r5
    40a0:	4b30      	ldr	r3, [pc, #192]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    40a2:	4798      	blx	r3
    40a4:	e02e      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    40a6:	2201      	movs	r2, #1
    40a8:	0031      	movs	r1, r6
    40aa:	0028      	movs	r0, r5
    40ac:	4b2d      	ldr	r3, [pc, #180]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    40ae:	4798      	blx	r3
    40b0:	e028      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_YELLOW: gfx_eink_set_pixel(i, j, PIXEL_YELLOW); break;
    40b2:	2203      	movs	r2, #3
    40b4:	0031      	movs	r1, r6
    40b6:	0028      	movs	r0, r5
    40b8:	4b2a      	ldr	r3, [pc, #168]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    40ba:	4798      	blx	r3
    40bc:	e022      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    40be:	2202      	movs	r2, #2
    40c0:	0031      	movs	r1, r6
    40c2:	0028      	movs	r0, r5
    40c4:	4b27      	ldr	r3, [pc, #156]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    40c6:	4798      	blx	r3
    40c8:	e01c      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_GREEN:  gfx_eink_set_pixel(i, j, PIXEL_GREEN); break;
    40ca:	2204      	movs	r2, #4
    40cc:	0031      	movs	r1, r6
    40ce:	0028      	movs	r0, r5
    40d0:	4b24      	ldr	r3, [pc, #144]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    40d2:	4798      	blx	r3
    40d4:	e016      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_BLUE:   gfx_eink_set_pixel(i, j, PIXEL_BLUE); break;
    40d6:	2205      	movs	r2, #5
    40d8:	0031      	movs	r1, r6
    40da:	0028      	movs	r0, r5
    40dc:	4b21      	ldr	r3, [pc, #132]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    40de:	4798      	blx	r3
    40e0:	e010      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_ORANGE: gfx_eink_set_pixel(i, j, PIXEL_ORANGE); break;
    40e2:	2206      	movs	r2, #6
    40e4:	0031      	movs	r1, r6
    40e6:	0028      	movs	r0, r5
    40e8:	4b1e      	ldr	r3, [pc, #120]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    40ea:	4798      	blx	r3
    40ec:	e00a      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_CLEAN:  gfx_eink_set_pixel(i, j, PIXEL_CLEAN); break;
    40ee:	2207      	movs	r2, #7
    40f0:	0031      	movs	r1, r6
    40f2:	0028      	movs	r0, r5
    40f4:	4b1b      	ldr	r3, [pc, #108]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    40f6:	4798      	blx	r3
    40f8:	e004      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                    }
                } else {
                    switch (fill_colour) {
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    40fa:	2200      	movs	r2, #0
    40fc:	0031      	movs	r1, r6
    40fe:	0028      	movs	r0, r5
    4100:	4b18      	ldr	r3, [pc, #96]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    4102:	4798      	blx	r3
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    4104:	3601      	adds	r6, #1
    4106:	b2b6      	uxth	r6, r6
    4108:	42be      	cmp	r6, r7
    410a:	da17      	bge.n	413c <gfx_eink_graphics_draw_rect+0x16c>
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    410c:	4b17      	ldr	r3, [pc, #92]	; (416c <gfx_eink_graphics_draw_rect+0x19c>)
    410e:	681b      	ldr	r3, [r3, #0]
    4110:	781b      	ldrb	r3, [r3, #0]
    4112:	3b06      	subs	r3, #6
    4114:	2b01      	cmp	r3, #1
    4116:	d9bb      	bls.n	4090 <gfx_eink_graphics_draw_rect+0xc0>
                    switch (fill_colour) {
    4118:	2c01      	cmp	r4, #1
    411a:	d009      	beq.n	4130 <gfx_eink_graphics_draw_rect+0x160>
    411c:	2c00      	cmp	r4, #0
    411e:	d0ec      	beq.n	40fa <gfx_eink_graphics_draw_rect+0x12a>
    4120:	2c03      	cmp	r4, #3
    4122:	d8ef      	bhi.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
                        case FILL_YELLOW:
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    4124:	2202      	movs	r2, #2
    4126:	0031      	movs	r1, r6
    4128:	0028      	movs	r0, r5
    412a:	4b0e      	ldr	r3, [pc, #56]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    412c:	4798      	blx	r3
    412e:	e7e9      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    4130:	2201      	movs	r2, #1
    4132:	0031      	movs	r1, r6
    4134:	0028      	movs	r0, r5
    4136:	4b0b      	ldr	r3, [pc, #44]	; (4164 <gfx_eink_graphics_draw_rect+0x194>)
    4138:	4798      	blx	r3
    413a:	e7e3      	b.n	4104 <gfx_eink_graphics_draw_rect+0x134>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    413c:	3501      	adds	r5, #1
    413e:	b2ad      	uxth	r5, r5
    4140:	454d      	cmp	r5, r9
    4142:	da07      	bge.n	4154 <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    4144:	4643      	mov	r3, r8
    4146:	1c5e      	adds	r6, r3, #1
    4148:	b2b6      	uxth	r6, r6
    414a:	4653      	mov	r3, sl
    414c:	1e5f      	subs	r7, r3, #1
    414e:	42be      	cmp	r6, r7
    4150:	dbdc      	blt.n	410c <gfx_eink_graphics_draw_rect+0x13c>
    4152:	e7f3      	b.n	413c <gfx_eink_graphics_draw_rect+0x16c>
                    }
                }
            }
        }
    }
}
    4154:	b005      	add	sp, #20
    4156:	bc3c      	pop	{r2, r3, r4, r5}
    4158:	4690      	mov	r8, r2
    415a:	4699      	mov	r9, r3
    415c:	46a2      	mov	sl, r4
    415e:	46ab      	mov	fp, r5
    4160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	00000585 	.word	0x00000585
    4168:	00004a20 	.word	0x00004a20
    416c:	20000424 	.word	0x20000424

00004170 <_gfx_eink_text_write_character>:
 * \param text_colour Color of character.
 * \param text_colour_value Pixel value of character.
 * \param eink_font Font structure to use. 
 */
void _gfx_eink_text_write_character(char character, eink_coordinate start_x, eink_coordinate start_y, uint8_t colour_raw, enum eink_pixel_colour text_colour, uint8_t text_colour_value, struct gfx_eink_font eink_font)
{
    4170:	b5f0      	push	{r4, r5, r6, r7, lr}
    4172:	46de      	mov	lr, fp
    4174:	4657      	mov	r7, sl
    4176:	464e      	mov	r6, r9
    4178:	4645      	mov	r5, r8
    417a:	b5e0      	push	{r5, r6, r7, lr}
    417c:	b08f      	sub	sp, #60	; 0x3c
    417e:	4694      	mov	ip, r2
    4180:	9202      	str	r2, [sp, #8]
    4182:	4698      	mov	r8, r3
    4184:	ab18      	add	r3, sp, #96	; 0x60
    4186:	781b      	ldrb	r3, [r3, #0]
    4188:	9300      	str	r3, [sp, #0]
    418a:	ab19      	add	r3, sp, #100	; 0x64
    418c:	781b      	ldrb	r3, [r3, #0]
    418e:	9301      	str	r3, [sp, #4]
    4190:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    4192:	ab1a      	add	r3, sp, #104	; 0x68
    4194:	7b5d      	ldrb	r5, [r3, #13]
    4196:	7b9e      	ldrb	r6, [r3, #14]
    4198:	46b1      	mov	r9, r6
    419a:	7bde      	ldrb	r6, [r3, #15]
    volatile eink_coordinate current_y, send_y;
    
    uint8_t *font_character_size_map_ptr;
    uint8_t *font_array_ptr;
    
    current_x = start_x;
    419c:	af04      	add	r7, sp, #16
    419e:	80f9      	strh	r1, [r7, #6]
    current_y = start_y;
    41a0:	1cba      	adds	r2, r7, #2
    41a2:	4661      	mov	r1, ip
    41a4:	8011      	strh	r1, [r2, #0]
    
    /* Get the index of the start of the character in the font array */
    start_font_index = 0;
    41a6:	2200      	movs	r2, #0
    41a8:	920a      	str	r2, [sp, #40]	; 0x28
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    current_char_index = character - eink_font.font_starting_ascii_char;
    41aa:	7b1b      	ldrb	r3, [r3, #12]
    41ac:	1ac0      	subs	r0, r0, r3
    41ae:	900b      	str	r0, [sp, #44]	; 0x2c
    for(i = 0; i < current_char_index; i++) {
    41b0:	9208      	str	r2, [sp, #32]
    41b2:	9a08      	ldr	r2, [sp, #32]
    41b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    41b6:	429a      	cmp	r2, r3
    41b8:	d237      	bcs.n	422a <_gfx_eink_text_write_character+0xba>
    41ba:	0021      	movs	r1, r4
        start_font_index += (*font_character_size_map_ptr * eink_font.font_height_bytes);
    41bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    41be:	780b      	ldrb	r3, [r1, #0]
    41c0:	436b      	muls	r3, r5
    41c2:	189b      	adds	r3, r3, r2
    41c4:	930a      	str	r3, [sp, #40]	; 0x28
        font_character_size_map_ptr++;
    41c6:	3101      	adds	r1, #1
    for(i = 0; i < current_char_index; i++) {
    41c8:	9b08      	ldr	r3, [sp, #32]
    41ca:	3301      	adds	r3, #1
    41cc:	9308      	str	r3, [sp, #32]
    41ce:	9a08      	ldr	r2, [sp, #32]
    41d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    41d2:	429a      	cmp	r2, r3
    41d4:	d3f2      	bcc.n	41bc <_gfx_eink_text_write_character+0x4c>
    }
    
    /* Ensure the chosen character is still in the font array */
    if( (start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) ) < (eink_font.font_array_size + (eink_font.font_character_size_map_ptr[current_char_index] * eink_font.font_height_bytes) )) {
    41d6:	780a      	ldrb	r2, [r1, #0]
    41d8:	436a      	muls	r2, r5
    41da:	990a      	ldr	r1, [sp, #40]	; 0x28
    41dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    41de:	1851      	adds	r1, r2, r1
    41e0:	5ce3      	ldrb	r3, [r4, r3]
    41e2:	436b      	muls	r3, r5
    41e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    41e6:	4684      	mov	ip, r0
    41e8:	4463      	add	r3, ip
    41ea:	4299      	cmp	r1, r3
    41ec:	d300      	bcc.n	41f0 <_gfx_eink_text_write_character+0x80>
    41ee:	e0ea      	b.n	43c6 <_gfx_eink_text_write_character+0x256>
        
        /* Move the pointer to the character starting byte */
        font_array_ptr = (uint8_t*) eink_font.font_array_ptr;
    41f0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
        if(ptr_eink_gfx_config->gfx_display == GFX_IT8951)
    41f2:	4b78      	ldr	r3, [pc, #480]	; (43d4 <_gfx_eink_text_write_character+0x264>)
    41f4:	681b      	ldr	r3, [r3, #0]
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	2b0a      	cmp	r3, #10
    41fa:	d018      	beq.n	422e <_gfx_eink_text_write_character+0xbe>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
        else
            font_array_ptr += start_font_index;
    41fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    41fe:	18e4      	adds	r4, r4, r3
    
       /**
        * Loop horizontally through the columns of the font first,
        * then loop vertically through each row of the font (bit by bit)
        */
        j = 0;
    4200:	2300      	movs	r3, #0
    4202:	9307      	str	r3, [sp, #28]
        end_font_index = start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) - 1;
    4204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4206:	3b01      	subs	r3, #1
    4208:	189a      	adds	r2, r3, r2
    420a:	9209      	str	r2, [sp, #36]	; 0x24
        for (i = start_font_index; i <= end_font_index; i++) {
    420c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    420e:	9308      	str	r3, [sp, #32]
    4210:	9a08      	ldr	r2, [sp, #32]
    4212:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4214:	429a      	cmp	r2, r3
    4216:	d900      	bls.n	421a <_gfx_eink_text_write_character+0xaa>
    4218:	e0d5      	b.n	43c6 <_gfx_eink_text_write_character+0x256>
            j++;
            current_y += 8;
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
            else font_array_ptr += sizeof(uint8_t);
            
            if(j == eink_font.font_height_bytes) {
    421a:	46aa      	mov	sl, r5
                j = 0;
                current_y = start_y;
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    421c:	006b      	lsls	r3, r5, #1
    421e:	9303      	str	r3, [sp, #12]
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    4220:	4b6d      	ldr	r3, [pc, #436]	; (43d8 <_gfx_eink_text_write_character+0x268>)
    4222:	469b      	mov	fp, r3
                    send_y = (current_y + (m));
    4224:	ab04      	add	r3, sp, #16
    4226:	1c9d      	adds	r5, r3, #2
    4228:	e0a3      	b.n	4372 <_gfx_eink_text_write_character+0x202>
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    422a:	0021      	movs	r1, r4
    422c:	e7d3      	b.n	41d6 <_gfx_eink_text_write_character+0x66>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
    422e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4230:	3b01      	subs	r3, #1
    4232:	195b      	adds	r3, r3, r5
    4234:	18e4      	adds	r4, r4, r3
    4236:	e7e3      	b.n	4200 <_gfx_eink_text_write_character+0x90>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    4238:	464b      	mov	r3, r9
    423a:	2b01      	cmp	r3, #1
    423c:	d009      	beq.n	4252 <_gfx_eink_text_write_character+0xe2>
                m = 0;
    423e:	2300      	movs	r3, #0
    4240:	9306      	str	r3, [sp, #24]
                for (k = 8; k > 0; k--) {
    4242:	3308      	adds	r3, #8
    4244:	930d      	str	r3, [sp, #52]	; 0x34
    4246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4248:	2b00      	cmp	r3, #0
    424a:	d100      	bne.n	424e <_gfx_eink_text_write_character+0xde>
    424c:	e07a      	b.n	4344 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    424e:	2701      	movs	r7, #1
    4250:	e051      	b.n	42f6 <_gfx_eink_text_write_character+0x186>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    4252:	4b60      	ldr	r3, [pc, #384]	; (43d4 <_gfx_eink_text_write_character+0x264>)
    4254:	681b      	ldr	r3, [r3, #0]
    4256:	781b      	ldrb	r3, [r3, #0]
    4258:	2b0a      	cmp	r3, #10
    425a:	d1f0      	bne.n	423e <_gfx_eink_text_write_character+0xce>
    425c:	e093      	b.n	4386 <_gfx_eink_text_write_character+0x216>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    425e:	2e00      	cmp	r6, #0
    4260:	d125      	bne.n	42ae <_gfx_eink_text_write_character+0x13e>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    4262:	4643      	mov	r3, r8
    4264:	2b00      	cmp	r3, #0
    4266:	d128      	bne.n	42ba <_gfx_eink_text_write_character+0x14a>
    4268:	ab05      	add	r3, sp, #20
    426a:	8818      	ldrh	r0, [r3, #0]
    426c:	b280      	uxth	r0, r0
    426e:	ab04      	add	r3, sp, #16
    4270:	8819      	ldrh	r1, [r3, #0]
    4272:	b289      	uxth	r1, r1
    4274:	9a00      	ldr	r2, [sp, #0]
    4276:	4b59      	ldr	r3, [pc, #356]	; (43dc <_gfx_eink_text_write_character+0x26c>)
    4278:	4798      	blx	r3
                for (k = 0; k < 8; k++) {
    427a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    427c:	3301      	adds	r3, #1
    427e:	930d      	str	r3, [sp, #52]	; 0x34
    4280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4282:	2b07      	cmp	r3, #7
    4284:	d85e      	bhi.n	4344 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    4286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4288:	7823      	ldrb	r3, [r4, #0]
    428a:	4113      	asrs	r3, r2
    428c:	403b      	ands	r3, r7
    428e:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    4290:	ab04      	add	r3, sp, #16
    4292:	3306      	adds	r3, #6
    4294:	881b      	ldrh	r3, [r3, #0]
    4296:	b29b      	uxth	r3, r3
    4298:	aa05      	add	r2, sp, #20
    429a:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + k);
    429c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    429e:	882b      	ldrh	r3, [r5, #0]
    42a0:	189b      	adds	r3, r3, r2
    42a2:	b29b      	uxth	r3, r3
    42a4:	aa04      	add	r2, sp, #16
    42a6:	8013      	strh	r3, [r2, #0]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    42a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    42aa:	2b01      	cmp	r3, #1
    42ac:	d0d7      	beq.n	425e <_gfx_eink_text_write_character+0xee>
    42ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    42b0:	2b00      	cmp	r3, #0
    42b2:	d1e2      	bne.n	427a <_gfx_eink_text_write_character+0x10a>
    42b4:	2e01      	cmp	r6, #1
    42b6:	d1e0      	bne.n	427a <_gfx_eink_text_write_character+0x10a>
    42b8:	e7d3      	b.n	4262 <_gfx_eink_text_write_character+0xf2>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    42ba:	ab05      	add	r3, sp, #20
    42bc:	8818      	ldrh	r0, [r3, #0]
    42be:	b280      	uxth	r0, r0
    42c0:	ab04      	add	r3, sp, #16
    42c2:	8819      	ldrh	r1, [r3, #0]
    42c4:	b289      	uxth	r1, r1
    42c6:	9a01      	ldr	r2, [sp, #4]
    42c8:	4b43      	ldr	r3, [pc, #268]	; (43d8 <_gfx_eink_text_write_character+0x268>)
    42ca:	4798      	blx	r3
    42cc:	e7d5      	b.n	427a <_gfx_eink_text_write_character+0x10a>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    42ce:	2e00      	cmp	r6, #0
    42d0:	d129      	bne.n	4326 <_gfx_eink_text_write_character+0x1b6>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    42d2:	4643      	mov	r3, r8
    42d4:	2b00      	cmp	r3, #0
    42d6:	d12c      	bne.n	4332 <_gfx_eink_text_write_character+0x1c2>
    42d8:	ab05      	add	r3, sp, #20
    42da:	8818      	ldrh	r0, [r3, #0]
    42dc:	b280      	uxth	r0, r0
    42de:	ab04      	add	r3, sp, #16
    42e0:	8819      	ldrh	r1, [r3, #0]
    42e2:	b289      	uxth	r1, r1
    42e4:	9a00      	ldr	r2, [sp, #0]
    42e6:	4b3d      	ldr	r3, [pc, #244]	; (43dc <_gfx_eink_text_write_character+0x26c>)
    42e8:	4798      	blx	r3
                for (k = 8; k > 0; k--) {
    42ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    42ec:	3b01      	subs	r3, #1
    42ee:	930d      	str	r3, [sp, #52]	; 0x34
    42f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    42f2:	2b00      	cmp	r3, #0
    42f4:	d026      	beq.n	4344 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    42f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    42f8:	7823      	ldrb	r3, [r4, #0]
    42fa:	3a01      	subs	r2, #1
    42fc:	4113      	asrs	r3, r2
    42fe:	403b      	ands	r3, r7
    4300:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    4302:	ab04      	add	r3, sp, #16
    4304:	3306      	adds	r3, #6
    4306:	881b      	ldrh	r3, [r3, #0]
    4308:	b29b      	uxth	r3, r3
    430a:	aa05      	add	r2, sp, #20
    430c:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + (m));
    430e:	9a06      	ldr	r2, [sp, #24]
    4310:	882b      	ldrh	r3, [r5, #0]
    4312:	189b      	adds	r3, r3, r2
    4314:	b29b      	uxth	r3, r3
    4316:	aa04      	add	r2, sp, #16
    4318:	8013      	strh	r3, [r2, #0]
                    m++;
    431a:	9b06      	ldr	r3, [sp, #24]
    431c:	3301      	adds	r3, #1
    431e:	9306      	str	r3, [sp, #24]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    4320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4322:	2b01      	cmp	r3, #1
    4324:	d0d3      	beq.n	42ce <_gfx_eink_text_write_character+0x15e>
    4326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4328:	2b00      	cmp	r3, #0
    432a:	d1de      	bne.n	42ea <_gfx_eink_text_write_character+0x17a>
    432c:	2e01      	cmp	r6, #1
    432e:	d1dc      	bne.n	42ea <_gfx_eink_text_write_character+0x17a>
    4330:	e7cf      	b.n	42d2 <_gfx_eink_text_write_character+0x162>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    4332:	ab05      	add	r3, sp, #20
    4334:	8818      	ldrh	r0, [r3, #0]
    4336:	b280      	uxth	r0, r0
    4338:	ab04      	add	r3, sp, #16
    433a:	8819      	ldrh	r1, [r3, #0]
    433c:	b289      	uxth	r1, r1
    433e:	9a01      	ldr	r2, [sp, #4]
    4340:	47d8      	blx	fp
    4342:	e7d2      	b.n	42ea <_gfx_eink_text_write_character+0x17a>
            j++;
    4344:	9b07      	ldr	r3, [sp, #28]
    4346:	3301      	adds	r3, #1
    4348:	9307      	str	r3, [sp, #28]
            current_y += 8;
    434a:	882b      	ldrh	r3, [r5, #0]
    434c:	3308      	adds	r3, #8
    434e:	b29b      	uxth	r3, r3
    4350:	802b      	strh	r3, [r5, #0]
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    4352:	4b20      	ldr	r3, [pc, #128]	; (43d4 <_gfx_eink_text_write_character+0x264>)
    4354:	681b      	ldr	r3, [r3, #0]
    4356:	781b      	ldrb	r3, [r3, #0]
    4358:	2b0a      	cmp	r3, #10
    435a:	d01b      	beq.n	4394 <_gfx_eink_text_write_character+0x224>
            else font_array_ptr += sizeof(uint8_t);
    435c:	3401      	adds	r4, #1
            if(j == eink_font.font_height_bytes) {
    435e:	9b07      	ldr	r3, [sp, #28]
    4360:	459a      	cmp	sl, r3
    4362:	d024      	beq.n	43ae <_gfx_eink_text_write_character+0x23e>
        for (i = start_font_index; i <= end_font_index; i++) {
    4364:	9b08      	ldr	r3, [sp, #32]
    4366:	3301      	adds	r3, #1
    4368:	9308      	str	r3, [sp, #32]
    436a:	9a08      	ldr	r2, [sp, #32]
    436c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    436e:	429a      	cmp	r2, r3
    4370:	d829      	bhi.n	43c6 <_gfx_eink_text_write_character+0x256>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    4372:	464b      	mov	r3, r9
    4374:	2b00      	cmp	r3, #0
    4376:	d000      	beq.n	437a <_gfx_eink_text_write_character+0x20a>
    4378:	e75e      	b.n	4238 <_gfx_eink_text_write_character+0xc8>
    437a:	4b16      	ldr	r3, [pc, #88]	; (43d4 <_gfx_eink_text_write_character+0x264>)
    437c:	681b      	ldr	r3, [r3, #0]
    437e:	781b      	ldrb	r3, [r3, #0]
    4380:	2b0a      	cmp	r3, #10
    4382:	d100      	bne.n	4386 <_gfx_eink_text_write_character+0x216>
    4384:	e75b      	b.n	423e <_gfx_eink_text_write_character+0xce>
                for (k = 0; k < 8; k++) {
    4386:	2300      	movs	r3, #0
    4388:	930d      	str	r3, [sp, #52]	; 0x34
    438a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    438c:	2b07      	cmp	r3, #7
    438e:	d8d9      	bhi.n	4344 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    4390:	2701      	movs	r7, #1
    4392:	e778      	b.n	4286 <_gfx_eink_text_write_character+0x116>
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    4394:	3c01      	subs	r4, #1
            if(j == eink_font.font_height_bytes) {
    4396:	9b07      	ldr	r3, [sp, #28]
    4398:	459a      	cmp	sl, r3
    439a:	d1e3      	bne.n	4364 <_gfx_eink_text_write_character+0x1f4>
                j = 0;
    439c:	2300      	movs	r3, #0
    439e:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    43a0:	466b      	mov	r3, sp
    43a2:	891b      	ldrh	r3, [r3, #8]
    43a4:	802b      	strh	r3, [r5, #0]
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    43a6:	9b03      	ldr	r3, [sp, #12]
    43a8:	469c      	mov	ip, r3
    43aa:	4464      	add	r4, ip
    43ac:	e004      	b.n	43b8 <_gfx_eink_text_write_character+0x248>
                j = 0;
    43ae:	2300      	movs	r3, #0
    43b0:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    43b2:	466b      	mov	r3, sp
    43b4:	891b      	ldrh	r3, [r3, #8]
    43b6:	802b      	strh	r3, [r5, #0]
                
                current_x++;
    43b8:	ab04      	add	r3, sp, #16
    43ba:	1d9a      	adds	r2, r3, #6
    43bc:	88db      	ldrh	r3, [r3, #6]
    43be:	3301      	adds	r3, #1
    43c0:	b29b      	uxth	r3, r3
    43c2:	8013      	strh	r3, [r2, #0]
    43c4:	e7ce      	b.n	4364 <_gfx_eink_text_write_character+0x1f4>
            }
        }
    }
}
    43c6:	b00f      	add	sp, #60	; 0x3c
    43c8:	bc3c      	pop	{r2, r3, r4, r5}
    43ca:	4690      	mov	r8, r2
    43cc:	4699      	mov	r9, r3
    43ce:	46a2      	mov	sl, r4
    43d0:	46ab      	mov	fp, r5
    43d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43d4:	20000424 	.word	0x20000424
    43d8:	00000595 	.word	0x00000595
    43dc:	00000585 	.word	0x00000585

000043e0 <gfx_eink_text_write_string_raw>:
 * \param start_y Y coordinate to start writing.
 * \param text_colour_value Pixel value of character.
 * \param eink_font Font structure to use.
 */
void gfx_eink_text_write_string_raw(char *char_array, eink_coordinate start_x, eink_coordinate start_y, uint8_t text_colour_value, struct gfx_eink_font eink_font)
{
    43e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43e2:	46de      	mov	lr, fp
    43e4:	4657      	mov	r7, sl
    43e6:	464e      	mov	r6, r9
    43e8:	4645      	mov	r5, r8
    43ea:	b5e0      	push	{r5, r6, r7, lr}
    43ec:	b089      	sub	sp, #36	; 0x24
    43ee:	4680      	mov	r8, r0
    43f0:	000c      	movs	r4, r1
    43f2:	9206      	str	r2, [sp, #24]
    43f4:	4699      	mov	r9, r3
    uint8_t i = 0;
    eink_coordinate x_send = start_x;
    
    while(char_array[i] != '\0')
    43f6:	7800      	ldrb	r0, [r0, #0]
    43f8:	2800      	cmp	r0, #0
    43fa:	d027      	beq.n	444c <gfx_eink_text_write_string_raw+0x6c>
    43fc:	4647      	mov	r7, r8
    43fe:	2500      	movs	r5, #0
    {
        _gfx_eink_text_write_character(char_array[i], x_send, start_y, 1, 0, text_colour_value, eink_font);
    4400:	ae02      	add	r6, sp, #8
    4402:	2300      	movs	r3, #0
    4404:	469b      	mov	fp, r3
    4406:	4b15      	ldr	r3, [pc, #84]	; (445c <gfx_eink_text_write_string_raw+0x7c>)
    4408:	469a      	mov	sl, r3
    440a:	4684      	mov	ip, r0
    440c:	9607      	str	r6, [sp, #28]
    440e:	9b07      	ldr	r3, [sp, #28]
    4410:	aa12      	add	r2, sp, #72	; 0x48
    4412:	ca43      	ldmia	r2!, {r0, r1, r6}
    4414:	c343      	stmia	r3!, {r0, r1, r6}
    4416:	6812      	ldr	r2, [r2, #0]
    4418:	601a      	str	r2, [r3, #0]
    441a:	464b      	mov	r3, r9
    441c:	9301      	str	r3, [sp, #4]
    441e:	465b      	mov	r3, fp
    4420:	9300      	str	r3, [sp, #0]
    4422:	2301      	movs	r3, #1
    4424:	9a06      	ldr	r2, [sp, #24]
    4426:	0021      	movs	r1, r4
    4428:	4660      	mov	r0, ip
    442a:	47d0      	blx	sl
            
        x_send += eink_font.font_character_size_map_ptr[char_array[i]-eink_font.font_starting_ascii_char];
    442c:	783b      	ldrb	r3, [r7, #0]
    442e:	aa12      	add	r2, sp, #72	; 0x48
    4430:	7b12      	ldrb	r2, [r2, #12]
    4432:	1a9b      	subs	r3, r3, r2
    4434:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4436:	5cd3      	ldrb	r3, [r2, r3]
    4438:	18e4      	adds	r4, r4, r3
    443a:	b2a4      	uxth	r4, r4
        i++;        
    443c:	3501      	adds	r5, #1
    443e:	b2ed      	uxtb	r5, r5
    while(char_array[i] != '\0')
    4440:	4643      	mov	r3, r8
    4442:	195f      	adds	r7, r3, r5
    4444:	783b      	ldrb	r3, [r7, #0]
    4446:	469c      	mov	ip, r3
    4448:	2b00      	cmp	r3, #0
    444a:	d1e0      	bne.n	440e <gfx_eink_text_write_string_raw+0x2e>
    }
    444c:	b009      	add	sp, #36	; 0x24
    444e:	bc3c      	pop	{r2, r3, r4, r5}
    4450:	4690      	mov	r8, r2
    4452:	4699      	mov	r9, r3
    4454:	46a2      	mov	sl, r4
    4456:	46ab      	mov	fp, r5
    4458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	00004171 	.word	0x00004171

00004460 <eink_init_display>:
	
	while(1);
}

void eink_init_display(void)
{
    4460:	b500      	push	{lr}
    4462:	b083      	sub	sp, #12
    config->display_rotation = ROTATE_0;
    4464:	a801      	add	r0, sp, #4
    4466:	2300      	movs	r3, #0
    4468:	7003      	strb	r3, [r0, #0]
    config->uc8173_display = UC8173_ED013TC1;
    446a:	7043      	strb	r3, [r0, #1]
	struct uc8173_config eink_conf;
	
	uc8173_get_config_defaults(&eink_conf);
	eink_conf.display_rotation = ROTATE_0;
	eink_et011tt2_init(&eink_conf, false);
    446c:	2100      	movs	r1, #0
    446e:	4b02      	ldr	r3, [pc, #8]	; (4478 <eink_init_display+0x18>)
    4470:	4798      	blx	r3
    4472:	b003      	add	sp, #12
    4474:	bd00      	pop	{pc}
    4476:	46c0      	nop			; (mov r8, r8)
    4478:	00003629 	.word	0x00003629

0000447c <main>:
{
    447c:	b5f0      	push	{r4, r5, r6, r7, lr}
    447e:	46c6      	mov	lr, r8
    4480:	b500      	push	{lr}
    4482:	b088      	sub	sp, #32
	system_init();
    4484:	4b3c      	ldr	r3, [pc, #240]	; (4578 <main+0xfc>)
    4486:	4798      	blx	r3
	eink_init_display();
    4488:	4b3c      	ldr	r3, [pc, #240]	; (457c <main+0x100>)
    448a:	4798      	blx	r3
	gfx_eink_graphics_fill_screen(FILL_WHITE);
    448c:	2001      	movs	r0, #1
    448e:	4b3c      	ldr	r3, [pc, #240]	; (4580 <main+0x104>)
    4490:	4798      	blx	r3
	gfx_eink_text_write_string_raw("Hello World!", 30, 80, 0x0, ArvoBold_18pt);
    4492:	4d3c      	ldr	r5, [pc, #240]	; (4584 <main+0x108>)
    4494:	4b3c      	ldr	r3, [pc, #240]	; (4588 <main+0x10c>)
    4496:	4698      	mov	r8, r3
    4498:	3354      	adds	r3, #84	; 0x54
    449a:	466f      	mov	r7, sp
    449c:	cb07      	ldmia	r3!, {r0, r1, r2}
    449e:	c707      	stmia	r7!, {r0, r1, r2}
    44a0:	681b      	ldr	r3, [r3, #0]
    44a2:	603b      	str	r3, [r7, #0]
    44a4:	2300      	movs	r3, #0
    44a6:	2250      	movs	r2, #80	; 0x50
    44a8:	211e      	movs	r1, #30
    44aa:	0028      	movs	r0, r5
    44ac:	4e37      	ldr	r6, [pc, #220]	; (458c <main+0x110>)
    44ae:	47b0      	blx	r6
	gfx_eink_text_write_string_raw("Hello World!", 30, 110, 0x1, ArvoBold_18pt);
    44b0:	4643      	mov	r3, r8
    44b2:	3354      	adds	r3, #84	; 0x54
    44b4:	466a      	mov	r2, sp
    44b6:	cb13      	ldmia	r3!, {r0, r1, r4}
    44b8:	c213      	stmia	r2!, {r0, r1, r4}
    44ba:	681b      	ldr	r3, [r3, #0]
    44bc:	603b      	str	r3, [r7, #0]
    44be:	2301      	movs	r3, #1
    44c0:	226e      	movs	r2, #110	; 0x6e
    44c2:	211e      	movs	r1, #30
    44c4:	0028      	movs	r0, r5
    44c6:	47b0      	blx	r6
	gfx_eink_text_write_string_raw("Hello World!", 30, 140, 0x2, ArvoBold_18pt);
    44c8:	4644      	mov	r4, r8
    44ca:	3454      	adds	r4, #84	; 0x54
    44cc:	466b      	mov	r3, sp
    44ce:	cc07      	ldmia	r4!, {r0, r1, r2}
    44d0:	c307      	stmia	r3!, {r0, r1, r2}
    44d2:	6823      	ldr	r3, [r4, #0]
    44d4:	603b      	str	r3, [r7, #0]
    44d6:	2302      	movs	r3, #2
    44d8:	228c      	movs	r2, #140	; 0x8c
    44da:	211e      	movs	r1, #30
    44dc:	0028      	movs	r0, r5
    44de:	47b0      	blx	r6
	eink_write_data(UC8173_LUT_KWVCOM, UC8173_KWVCOM_A2_LUT, 32);
    44e0:	4c2b      	ldr	r4, [pc, #172]	; (4590 <main+0x114>)
    44e2:	0021      	movs	r1, r4
    44e4:	315c      	adds	r1, #92	; 0x5c
    44e6:	2220      	movs	r2, #32
    44e8:	2020      	movs	r0, #32
    44ea:	4e2a      	ldr	r6, [pc, #168]	; (4594 <main+0x118>)
    44ec:	47b0      	blx	r6
	eink_write_data(UC8173_LUT_KW, UC8173_KW_A2_LUT, 512);
    44ee:	0021      	movs	r1, r4
    44f0:	317c      	adds	r1, #124	; 0x7c
    44f2:	2280      	movs	r2, #128	; 0x80
    44f4:	0092      	lsls	r2, r2, #2
    44f6:	2022      	movs	r0, #34	; 0x22
    44f8:	47b0      	blx	r6
	eink_write_data(UC8173_LUT_FT, UC8173_FT_A2_LUT, 128);
    44fa:	2280      	movs	r2, #128	; 0x80
    44fc:	4926      	ldr	r1, [pc, #152]	; (4598 <main+0x11c>)
    44fe:	317c      	adds	r1, #124	; 0x7c
    4500:	2026      	movs	r0, #38	; 0x26
    4502:	47b0      	blx	r6
	eink_data[0] = 0x00;
    4504:	ac06      	add	r4, sp, #24
    4506:	2500      	movs	r5, #0
    4508:	7025      	strb	r5, [r4, #0]
	eink_data[1] = 0x00;
    450a:	7065      	strb	r5, [r4, #1]
	eink_data[2] = 0x00;
    450c:	70a5      	strb	r5, [r4, #2]
	eink_data[3] = 0xEF;
    450e:	27ef      	movs	r7, #239	; 0xef
    4510:	70e7      	strb	r7, [r4, #3]
	eink_data[4] = 0x00;
    4512:	7125      	strb	r5, [r4, #4]
	eink_data[5] = 0xEF;
    4514:	7167      	strb	r7, [r4, #5]
	eink_write_data(UC8173_DTMW, eink_data, 6);
    4516:	2206      	movs	r2, #6
    4518:	0021      	movs	r1, r4
    451a:	2014      	movs	r0, #20
    451c:	47b0      	blx	r6
	eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    451e:	4b1f      	ldr	r3, [pc, #124]	; (459c <main+0x120>)
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	6959      	ldr	r1, [r3, #20]
    4524:	22e1      	movs	r2, #225	; 0xe1
    4526:	0192      	lsls	r2, r2, #6
    4528:	2013      	movs	r0, #19
    452a:	47b0      	blx	r6
	eink_data[0] = 0x00;
    452c:	7025      	strb	r5, [r4, #0]
	eink_data[1] = 0x00;
    452e:	7065      	strb	r5, [r4, #1]
	eink_data[2] = 0x00;
    4530:	70a5      	strb	r5, [r4, #2]
	eink_data[3] = 0x00;
    4532:	70e5      	strb	r5, [r4, #3]
	eink_data[4] = 0xEF;
    4534:	7127      	strb	r7, [r4, #4]
	eink_data[5] = 0x00;
    4536:	7165      	strb	r5, [r4, #5]
	eink_data[6] = 0xEF;
    4538:	71a7      	strb	r7, [r4, #6]
	eink_write_data(UC8173_DRF, eink_data, 7);
    453a:	2207      	movs	r2, #7
    453c:	0021      	movs	r1, r4
    453e:	2012      	movs	r0, #18
    4540:	47b0      	blx	r6
	CRITICAL_SECTION_ENTER();
    4542:	4f17      	ldr	r7, [pc, #92]	; (45a0 <main+0x124>)
	CRITICAL_SECTION_LEAVE();
    4544:	4e17      	ldr	r6, [pc, #92]	; (45a4 <main+0x128>)
	CRITICAL_SECTION_ENTER();
    4546:	a805      	add	r0, sp, #20
    4548:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    454a:	23c0      	movs	r3, #192	; 0xc0
    454c:	05db      	lsls	r3, r3, #23
    454e:	2580      	movs	r5, #128	; 0x80
    4550:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4552:	22a0      	movs	r2, #160	; 0xa0
    4554:	4914      	ldr	r1, [pc, #80]	; (45a8 <main+0x12c>)
    4556:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4558:	2190      	movs	r1, #144	; 0x90
    455a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    455c:	4053      	eors	r3, r2
    455e:	401c      	ands	r4, r3
    4560:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    4562:	a805      	add	r0, sp, #20
    4564:	47b0      	blx	r6
	while(!gpio_get_pin_level(EINK_BUSY));
    4566:	4225      	tst	r5, r4
    4568:	d0ed      	beq.n	4546 <main+0xca>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    456a:	2180      	movs	r1, #128	; 0x80
    456c:	05c9      	lsls	r1, r1, #23
    456e:	2398      	movs	r3, #152	; 0x98
    4570:	22c0      	movs	r2, #192	; 0xc0
    4572:	05d2      	lsls	r2, r2, #23
    4574:	50d1      	str	r1, [r2, r3]
    4576:	e7fe      	b.n	4576 <main+0xfa>
    4578:	00000211 	.word	0x00000211
    457c:	00004461 	.word	0x00004461
    4580:	00003e49 	.word	0x00003e49
    4584:	00006eac 	.word	0x00006eac
    4588:	20000280 	.word	0x20000280
    458c:	000043e1 	.word	0x000043e1
    4590:	000056c0 	.word	0x000056c0
    4594:	00001bd9 	.word	0x00001bd9
    4598:	000058c0 	.word	0x000058c0
    459c:	20000424 	.word	0x20000424
    45a0:	0000034d 	.word	0x0000034d
    45a4:	0000035b 	.word	0x0000035b
    45a8:	41004400 	.word	0x41004400

000045ac <__libc_init_array>:
    45ac:	b570      	push	{r4, r5, r6, lr}
    45ae:	2600      	movs	r6, #0
    45b0:	4d0c      	ldr	r5, [pc, #48]	; (45e4 <__libc_init_array+0x38>)
    45b2:	4c0d      	ldr	r4, [pc, #52]	; (45e8 <__libc_init_array+0x3c>)
    45b4:	1b64      	subs	r4, r4, r5
    45b6:	10a4      	asrs	r4, r4, #2
    45b8:	42a6      	cmp	r6, r4
    45ba:	d109      	bne.n	45d0 <__libc_init_array+0x24>
    45bc:	2600      	movs	r6, #0
    45be:	f002 fcad 	bl	6f1c <_init>
    45c2:	4d0a      	ldr	r5, [pc, #40]	; (45ec <__libc_init_array+0x40>)
    45c4:	4c0a      	ldr	r4, [pc, #40]	; (45f0 <__libc_init_array+0x44>)
    45c6:	1b64      	subs	r4, r4, r5
    45c8:	10a4      	asrs	r4, r4, #2
    45ca:	42a6      	cmp	r6, r4
    45cc:	d105      	bne.n	45da <__libc_init_array+0x2e>
    45ce:	bd70      	pop	{r4, r5, r6, pc}
    45d0:	00b3      	lsls	r3, r6, #2
    45d2:	58eb      	ldr	r3, [r5, r3]
    45d4:	4798      	blx	r3
    45d6:	3601      	adds	r6, #1
    45d8:	e7ee      	b.n	45b8 <__libc_init_array+0xc>
    45da:	00b3      	lsls	r3, r6, #2
    45dc:	58eb      	ldr	r3, [r5, r3]
    45de:	4798      	blx	r3
    45e0:	3601      	adds	r6, #1
    45e2:	e7f2      	b.n	45ca <__libc_init_array+0x1e>
    45e4:	00006f28 	.word	0x00006f28
    45e8:	00006f28 	.word	0x00006f28
    45ec:	00006f28 	.word	0x00006f28
    45f0:	00006f2c 	.word	0x00006f2c

000045f4 <malloc>:
    45f4:	b510      	push	{r4, lr}
    45f6:	4b03      	ldr	r3, [pc, #12]	; (4604 <malloc+0x10>)
    45f8:	0001      	movs	r1, r0
    45fa:	6818      	ldr	r0, [r3, #0]
    45fc:	f000 f80e 	bl	461c <_malloc_r>
    4600:	bd10      	pop	{r4, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	200002e4 	.word	0x200002e4

00004608 <memcpy>:
    4608:	2300      	movs	r3, #0
    460a:	b510      	push	{r4, lr}
    460c:	429a      	cmp	r2, r3
    460e:	d100      	bne.n	4612 <memcpy+0xa>
    4610:	bd10      	pop	{r4, pc}
    4612:	5ccc      	ldrb	r4, [r1, r3]
    4614:	54c4      	strb	r4, [r0, r3]
    4616:	3301      	adds	r3, #1
    4618:	e7f8      	b.n	460c <memcpy+0x4>
	...

0000461c <_malloc_r>:
    461c:	2303      	movs	r3, #3
    461e:	b570      	push	{r4, r5, r6, lr}
    4620:	1ccd      	adds	r5, r1, #3
    4622:	439d      	bics	r5, r3
    4624:	3508      	adds	r5, #8
    4626:	0006      	movs	r6, r0
    4628:	2d0c      	cmp	r5, #12
    462a:	d21e      	bcs.n	466a <_malloc_r+0x4e>
    462c:	250c      	movs	r5, #12
    462e:	42a9      	cmp	r1, r5
    4630:	d81d      	bhi.n	466e <_malloc_r+0x52>
    4632:	0030      	movs	r0, r6
    4634:	f000 f862 	bl	46fc <__malloc_lock>
    4638:	4a25      	ldr	r2, [pc, #148]	; (46d0 <_malloc_r+0xb4>)
    463a:	6814      	ldr	r4, [r2, #0]
    463c:	0021      	movs	r1, r4
    463e:	2900      	cmp	r1, #0
    4640:	d119      	bne.n	4676 <_malloc_r+0x5a>
    4642:	4c24      	ldr	r4, [pc, #144]	; (46d4 <_malloc_r+0xb8>)
    4644:	6823      	ldr	r3, [r4, #0]
    4646:	2b00      	cmp	r3, #0
    4648:	d103      	bne.n	4652 <_malloc_r+0x36>
    464a:	0030      	movs	r0, r6
    464c:	f000 f844 	bl	46d8 <_sbrk_r>
    4650:	6020      	str	r0, [r4, #0]
    4652:	0029      	movs	r1, r5
    4654:	0030      	movs	r0, r6
    4656:	f000 f83f 	bl	46d8 <_sbrk_r>
    465a:	1c43      	adds	r3, r0, #1
    465c:	d12c      	bne.n	46b8 <_malloc_r+0x9c>
    465e:	230c      	movs	r3, #12
    4660:	0030      	movs	r0, r6
    4662:	6033      	str	r3, [r6, #0]
    4664:	f000 f84b 	bl	46fe <__malloc_unlock>
    4668:	e003      	b.n	4672 <_malloc_r+0x56>
    466a:	2d00      	cmp	r5, #0
    466c:	dadf      	bge.n	462e <_malloc_r+0x12>
    466e:	230c      	movs	r3, #12
    4670:	6033      	str	r3, [r6, #0]
    4672:	2000      	movs	r0, #0
    4674:	bd70      	pop	{r4, r5, r6, pc}
    4676:	680b      	ldr	r3, [r1, #0]
    4678:	1b5b      	subs	r3, r3, r5
    467a:	d41a      	bmi.n	46b2 <_malloc_r+0x96>
    467c:	2b0b      	cmp	r3, #11
    467e:	d903      	bls.n	4688 <_malloc_r+0x6c>
    4680:	600b      	str	r3, [r1, #0]
    4682:	18cc      	adds	r4, r1, r3
    4684:	6025      	str	r5, [r4, #0]
    4686:	e003      	b.n	4690 <_malloc_r+0x74>
    4688:	428c      	cmp	r4, r1
    468a:	d10e      	bne.n	46aa <_malloc_r+0x8e>
    468c:	6863      	ldr	r3, [r4, #4]
    468e:	6013      	str	r3, [r2, #0]
    4690:	0030      	movs	r0, r6
    4692:	f000 f834 	bl	46fe <__malloc_unlock>
    4696:	0020      	movs	r0, r4
    4698:	2207      	movs	r2, #7
    469a:	300b      	adds	r0, #11
    469c:	1d23      	adds	r3, r4, #4
    469e:	4390      	bics	r0, r2
    46a0:	1ac3      	subs	r3, r0, r3
    46a2:	d0e7      	beq.n	4674 <_malloc_r+0x58>
    46a4:	425a      	negs	r2, r3
    46a6:	50e2      	str	r2, [r4, r3]
    46a8:	e7e4      	b.n	4674 <_malloc_r+0x58>
    46aa:	684b      	ldr	r3, [r1, #4]
    46ac:	6063      	str	r3, [r4, #4]
    46ae:	000c      	movs	r4, r1
    46b0:	e7ee      	b.n	4690 <_malloc_r+0x74>
    46b2:	000c      	movs	r4, r1
    46b4:	6849      	ldr	r1, [r1, #4]
    46b6:	e7c2      	b.n	463e <_malloc_r+0x22>
    46b8:	2303      	movs	r3, #3
    46ba:	1cc4      	adds	r4, r0, #3
    46bc:	439c      	bics	r4, r3
    46be:	42a0      	cmp	r0, r4
    46c0:	d0e0      	beq.n	4684 <_malloc_r+0x68>
    46c2:	1a21      	subs	r1, r4, r0
    46c4:	0030      	movs	r0, r6
    46c6:	f000 f807 	bl	46d8 <_sbrk_r>
    46ca:	1c43      	adds	r3, r0, #1
    46cc:	d1da      	bne.n	4684 <_malloc_r+0x68>
    46ce:	e7c6      	b.n	465e <_malloc_r+0x42>
    46d0:	2000036c 	.word	0x2000036c
    46d4:	20000370 	.word	0x20000370

000046d8 <_sbrk_r>:
    46d8:	2300      	movs	r3, #0
    46da:	b570      	push	{r4, r5, r6, lr}
    46dc:	4c06      	ldr	r4, [pc, #24]	; (46f8 <_sbrk_r+0x20>)
    46de:	0005      	movs	r5, r0
    46e0:	0008      	movs	r0, r1
    46e2:	6023      	str	r3, [r4, #0]
    46e4:	f7fb fe5a 	bl	39c <_sbrk>
    46e8:	1c43      	adds	r3, r0, #1
    46ea:	d103      	bne.n	46f4 <_sbrk_r+0x1c>
    46ec:	6823      	ldr	r3, [r4, #0]
    46ee:	2b00      	cmp	r3, #0
    46f0:	d000      	beq.n	46f4 <_sbrk_r+0x1c>
    46f2:	602b      	str	r3, [r5, #0]
    46f4:	bd70      	pop	{r4, r5, r6, pc}
    46f6:	46c0      	nop			; (mov r8, r8)
    46f8:	20000428 	.word	0x20000428

000046fc <__malloc_lock>:
    46fc:	4770      	bx	lr

000046fe <__malloc_unlock>:
    46fe:	4770      	bx	lr
    4700:	0000129a 	.word	0x0000129a
    4704:	000012c8 	.word	0x000012c8
    4708:	00001352 	.word	0x00001352
    470c:	00001380 	.word	0x00001380
    4710:	000012f6 	.word	0x000012f6
    4714:	00001324 	.word	0x00001324
    4718:	000013ae 	.word	0x000013ae
    471c:	000013dc 	.word	0x000013dc
    4720:	00001418 	.word	0x00001418
    4724:	00001446 	.word	0x00001446
    4728:	000014d0 	.word	0x000014d0
    472c:	000014fe 	.word	0x000014fe
    4730:	00001474 	.word	0x00001474
    4734:	000014a2 	.word	0x000014a2
    4738:	0000152c 	.word	0x0000152c
    473c:	0000155a 	.word	0x0000155a
    4740:	000015ee 	.word	0x000015ee
    4744:	0000161c 	.word	0x0000161c
    4748:	000016a6 	.word	0x000016a6
    474c:	000016d4 	.word	0x000016d4
    4750:	0000164a 	.word	0x0000164a
    4754:	00001678 	.word	0x00001678
    4758:	00001702 	.word	0x00001702
    475c:	00001730 	.word	0x00001730
    4760:	0000176c 	.word	0x0000176c
    4764:	0000179a 	.word	0x0000179a
    4768:	00001824 	.word	0x00001824
    476c:	00001852 	.word	0x00001852
    4770:	000017c8 	.word	0x000017c8
    4774:	000017f6 	.word	0x000017f6
    4778:	00001880 	.word	0x00001880
    477c:	000018ae 	.word	0x000018ae
    4780:	000039a8 	.word	0x000039a8
    4784:	000039a0 	.word	0x000039a0
    4788:	000039c0 	.word	0x000039c0
    478c:	000039ca 	.word	0x000039ca
    4790:	000039d4 	.word	0x000039d4
    4794:	000039de 	.word	0x000039de
    4798:	000039e8 	.word	0x000039e8
    479c:	000039f2 	.word	0x000039f2
    47a0:	00003a04 	.word	0x00003a04
    47a4:	000039fc 	.word	0x000039fc
    47a8:	00003a26 	.word	0x00003a26
    47ac:	00003a30 	.word	0x00003a30
    47b0:	00003a3a 	.word	0x00003a3a
    47b4:	00003a44 	.word	0x00003a44
    47b8:	00003a4e 	.word	0x00003a4e
    47bc:	00003a58 	.word	0x00003a58
    47c0:	00003b38 	.word	0x00003b38
    47c4:	00003a82 	.word	0x00003a82
    47c8:	00003a9c 	.word	0x00003a9c
    47cc:	00003ab6 	.word	0x00003ab6
    47d0:	00003ad0 	.word	0x00003ad0
    47d4:	00003aea 	.word	0x00003aea
    47d8:	00003b04 	.word	0x00003b04
    47dc:	00003b1e 	.word	0x00003b1e
    47e0:	00003c10 	.word	0x00003c10
    47e4:	00003b4c 	.word	0x00003b4c
    47e8:	00003b62 	.word	0x00003b62
    47ec:	00003b78 	.word	0x00003b78
    47f0:	00003b8e 	.word	0x00003b8e
    47f4:	00003ba4 	.word	0x00003ba4
    47f8:	00003bba 	.word	0x00003bba
    47fc:	00003bd0 	.word	0x00003bd0
    4800:	00003c18 	.word	0x00003c18
    4804:	00003b4c 	.word	0x00003b4c
    4808:	00003b62 	.word	0x00003b62
    480c:	00003b78 	.word	0x00003b78
    4810:	00003b8e 	.word	0x00003b8e
    4814:	00003ba4 	.word	0x00003ba4
    4818:	00003bba 	.word	0x00003bba
    481c:	00003bd0 	.word	0x00003bd0
    4820:	00003c20 	.word	0x00003c20
    4824:	00003b4c 	.word	0x00003b4c
    4828:	00003b62 	.word	0x00003b62
    482c:	00003b78 	.word	0x00003b78
    4830:	00003b8e 	.word	0x00003b8e
    4834:	00003ba4 	.word	0x00003ba4
    4838:	00003bba 	.word	0x00003bba
    483c:	00003bd0 	.word	0x00003bd0
    4840:	00003c28 	.word	0x00003c28
    4844:	00003b4c 	.word	0x00003b4c
    4848:	00003b62 	.word	0x00003b62
    484c:	00003b78 	.word	0x00003b78
    4850:	00003b8e 	.word	0x00003b8e
    4854:	00003ba4 	.word	0x00003ba4
    4858:	00003bba 	.word	0x00003bba
    485c:	00003bd0 	.word	0x00003bd0
    4860:	00003c30 	.word	0x00003c30
    4864:	00003b4c 	.word	0x00003b4c
    4868:	00003b62 	.word	0x00003b62
    486c:	00003b78 	.word	0x00003b78
    4870:	00003b8e 	.word	0x00003b8e
    4874:	00003ba4 	.word	0x00003ba4
    4878:	00003bba 	.word	0x00003bba
    487c:	00003bd0 	.word	0x00003bd0
    4880:	00003c38 	.word	0x00003c38
    4884:	00003b4c 	.word	0x00003b4c
    4888:	00003b62 	.word	0x00003b62
    488c:	00003b78 	.word	0x00003b78
    4890:	00003b8e 	.word	0x00003b8e
    4894:	00003ba4 	.word	0x00003ba4
    4898:	00003bba 	.word	0x00003bba
    489c:	00003bd0 	.word	0x00003bd0
    48a0:	00003c40 	.word	0x00003c40
    48a4:	00003b4c 	.word	0x00003b4c
    48a8:	00003b62 	.word	0x00003b62
    48ac:	00003b78 	.word	0x00003b78
    48b0:	00003b8e 	.word	0x00003b8e
    48b4:	00003ba4 	.word	0x00003ba4
    48b8:	00003bba 	.word	0x00003bba
    48bc:	00003bd0 	.word	0x00003bd0
    48c0:	00003be6 	.word	0x00003be6
    48c4:	00003b4c 	.word	0x00003b4c
    48c8:	00003b62 	.word	0x00003b62
    48cc:	00003b78 	.word	0x00003b78
    48d0:	00003b8e 	.word	0x00003b8e
    48d4:	00003ba4 	.word	0x00003ba4
    48d8:	00003bba 	.word	0x00003bba
    48dc:	00003bd0 	.word	0x00003bd0
    48e0:	00003bf2 	.word	0x00003bf2
    48e4:	00003c10 	.word	0x00003c10
    48e8:	00003c18 	.word	0x00003c18
    48ec:	00003c20 	.word	0x00003c20
    48f0:	00003c28 	.word	0x00003c28
    48f4:	00003c30 	.word	0x00003c30
    48f8:	00003c38 	.word	0x00003c38
    48fc:	00003c40 	.word	0x00003c40
    4900:	00003bf2 	.word	0x00003bf2
    4904:	00003c10 	.word	0x00003c10
    4908:	00003c18 	.word	0x00003c18
    490c:	00003c20 	.word	0x00003c20
    4910:	00003c28 	.word	0x00003c28
    4914:	00003c30 	.word	0x00003c30
    4918:	00003c38 	.word	0x00003c38
    491c:	00003c40 	.word	0x00003c40
    4920:	00003bf2 	.word	0x00003bf2
    4924:	00003c10 	.word	0x00003c10
    4928:	00003c18 	.word	0x00003c18
    492c:	00003c20 	.word	0x00003c20
    4930:	00003c28 	.word	0x00003c28
    4934:	00003c30 	.word	0x00003c30
    4938:	00003c38 	.word	0x00003c38
    493c:	00003c40 	.word	0x00003c40
    4940:	00003bf2 	.word	0x00003bf2
    4944:	00003c10 	.word	0x00003c10
    4948:	00003c18 	.word	0x00003c18
    494c:	00003c20 	.word	0x00003c20
    4950:	00003c28 	.word	0x00003c28
    4954:	00003c30 	.word	0x00003c30
    4958:	00003c38 	.word	0x00003c38
    495c:	00003c40 	.word	0x00003c40
    4960:	00003bf2 	.word	0x00003bf2
    4964:	00003c10 	.word	0x00003c10
    4968:	00003c18 	.word	0x00003c18
    496c:	00003c20 	.word	0x00003c20
    4970:	00003c28 	.word	0x00003c28
    4974:	00003c30 	.word	0x00003c30
    4978:	00003c38 	.word	0x00003c38
    497c:	00003c40 	.word	0x00003c40
    4980:	00003bf2 	.word	0x00003bf2
    4984:	00003c10 	.word	0x00003c10
    4988:	00003c18 	.word	0x00003c18
    498c:	00003c20 	.word	0x00003c20
    4990:	00003c28 	.word	0x00003c28
    4994:	00003c30 	.word	0x00003c30
    4998:	00003c38 	.word	0x00003c38
    499c:	00003c40 	.word	0x00003c40
    49a0:	00003bf2 	.word	0x00003bf2
    49a4:	00003c10 	.word	0x00003c10
    49a8:	00003c18 	.word	0x00003c18
    49ac:	00003c20 	.word	0x00003c20
    49b0:	00003c28 	.word	0x00003c28
    49b4:	00003c30 	.word	0x00003c30
    49b8:	00003c38 	.word	0x00003c38
    49bc:	00003c40 	.word	0x00003c40
    49c0:	00003bf2 	.word	0x00003bf2
    49c4:	00003c10 	.word	0x00003c10
    49c8:	00003c18 	.word	0x00003c18
    49cc:	00003c20 	.word	0x00003c20
    49d0:	00003c28 	.word	0x00003c28
    49d4:	00003c30 	.word	0x00003c30
    49d8:	00003c38 	.word	0x00003c38
    49dc:	00003c40 	.word	0x00003c40
    49e0:	00003d1a 	.word	0x00003d1a
    49e4:	00003d12 	.word	0x00003d12
    49e8:	00003dd2 	.word	0x00003dd2
    49ec:	00003de4 	.word	0x00003de4
    49f0:	00003df6 	.word	0x00003df6
    49f4:	00003e08 	.word	0x00003e08
    49f8:	00003e1a 	.word	0x00003e1a
    49fc:	00003e2c 	.word	0x00003e2c
    4a00:	00003e84 	.word	0x00003e84
    4a04:	00003e98 	.word	0x00003e98
    4a08:	00003ec0 	.word	0x00003ec0
    4a0c:	00003eac 	.word	0x00003eac
    4a10:	00003ed4 	.word	0x00003ed4
    4a14:	00003ee8 	.word	0x00003ee8
    4a18:	00003efc 	.word	0x00003efc
    4a1c:	00003f10 	.word	0x00003f10
    4a20:	0000409a 	.word	0x0000409a
    4a24:	000040a6 	.word	0x000040a6
    4a28:	000040be 	.word	0x000040be
    4a2c:	000040b2 	.word	0x000040b2
    4a30:	000040ca 	.word	0x000040ca
    4a34:	000040d6 	.word	0x000040d6
    4a38:	000040e2 	.word	0x000040e2
    4a3c:	000040ee 	.word	0x000040ee

00004a40 <ED037TC1_A2_LUT>:
    4a40:	0000052a 00000000 2a050000 00000000     *..........*....
    4a50:	00000000 0000152a 00000000 0a050000     ....*...........
	...
    4a70:	02000000 02000a03 00050a06 00000000     ................
	...
    4aa4:	22222222 00000022                       """""...

00004aac <ED037TC1_DU_LUT>:
	...
    4ab4:	2a010000 00000000 00000000 0000550a     ...*.........U..
	...
    4ae0:	05000505 00050503 00000000 00000000     ................
	...
    4b10:	22222222 00000022                       """""...

00004b18 <SSD1608_A45_IU_LUT>:
    4b18:	18181824 10181800 00000008 00000000     $...............
    4b28:	00000000 11111141 00000001 00000000     ....A...........

00004b38 <SSD1608_A05_IU_LUT>:
    4b38:	28181810 18181818 00000008 00000000     ...(............
    4b48:	00000000 13221233 00000011 00000000     ....3.".........

00004b58 <ED028TC1_WF_LUT>:
    4b58:	0011042e 00000000 00000000 00000000     ................
    4b68:	00000010 00000100 00000100 10040100     ................
    4b78:	00440100 00400000 00000000 00400000     ..D...@.......@.
    4b88:	00000000 10400100 10400500 00000000     ......@...@.....
    4b98:	00511400 00000000 00000000 00000010     ..Q.............
    4ba8:	00000010 00400100 00401100 10040100     ......@...@.....
    4bb8:	00440100 00400000 00000000 10440100     ..D...@.......D.
    4bc8:	00000100 10400100 10400500 00000100     ......@...@.....
    4bd8:	00511500 00100000 00000010 00000010     ..Q.............
    4be8:	00000010 00400100 10401100 10040100     ......@...@.....
    4bf8:	00441100 00400100 10400000 10444100     ..D...@...@..AD.
    4c08:	00000100 10441500 10444500 00040100     ......D..ED.....
    4c18:	00511500 00100000 00000010 00000010     ..Q.............
    4c28:	00000010 00440100 10401100 10040100     ......D...@.....
    4c38:	00441100 00404100 10400000 10444500     ..D..A@...@..ED.
    4c48:	10400100 10441500 10444500 10440500     ..@...D..ED...D.
    4c58:	00512500 00100004 00000010 00400010     .%Q...........@.
    4c68:	00400010 10440100 10401500 10040500     ..@...D...@.....
    4c78:	10441100 00404100 10401100 10444500     ..D..A@...@..ED.
    4c88:	10440100 10441500 10444500 10440500     ..D...D..ED...D.
    4c98:	00512500 00541104 00400010 00400110     .%Q...T...@...@.
    4ca8:	00444110 10440100 10405500 10044504     .AD...D..U@..E..
    4cb8:	10445500 00444500 10401100 10444500     .UD..ED...@..ED.
    4cc8:	10440100 10441500 10444500 10540500     ..D...D..ED...T.
    4cd8:	00512500 00541104 00400110 00400110     .%Q...T...@...@.
    4ce8:	00444110 10440500 14445500 10544504     .AD...D..UD..ET.
    4cf8:	10445500 10444500 10441100 10444500     .UD..ED...D..ED.
    4d08:	10440500 14545500 14544500 10540500     ..D..UT..ET...T.
    4d18:	00512500 10545504 00500114 10445110     .%Q..UT...P..QD.
    4d28:	10444114 10544500 14445504 10544504     .AD..ET..UD..ET.
    4d38:	10445500 10444500 10445500 14544500     .UD..ED..UD..ET.
    4d48:	14441500 14545500 14554500 14540500     ..D..UT..EU...T.
    4d58:	00512900 10545504 10500114 10545110     .)Q..UT...P..QT.
    4d68:	10444114 10545500 14445504 14544504     .AD..UT..UD..ET.
    4d78:	14445500 14544510 10445500 14544500     .UD..ET..UD..ET.
    4d88:	14541500 14545500 14554500 14540500     ..T..UT..EU...T.
    4d98:	00512900 10545514 10500114 14545510     .)Q..UT...P..UT.
    4da8:	10444114 10545510 14545504 14544504     .AD..UT..UT..ET.
    4db8:	14445500 14544510 10545504 14544500     .UD..ET..UT..ET.
    4dc8:	14541500 14545500 14555500 14540500     ..T..UT..UU...T.
    4dd8:	00a12900 10545514 14500114 14545510     .)...UT...P..UT.
    4de8:	10544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    4df8:	14445510 14544510 14545504 14544500     .UD..ET..UT..ET.
    4e08:	14541500 14555500 14555511 14540511     ..T..UU..UU...T.
    4e18:	00a22a00 14545518 14500114 14545510     .*...UT...P..UT.
    4e28:	14544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    4e38:	14545510 14544510 14545504 14544500     .UT..ET..UT..ET.
    4e48:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    4e58:	00a26a10 14555518 14544514 14545510     .j...UU..ET..UT.
    4e68:	14544114 14545514 14555514 14554515     .AT..UT..UU..EU.
    4e78:	14545511 14544511 14545515 14544501     .UT..ET..UT..ET.
    4e88:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    4e98:	00a6aa10 14555518 14544515 14545510     .....UU..ET..UT.
    4ea8:	14544514 14545514 15555514 15554515     .ET..UT..UU..EU.
    4eb8:	14545515 14544515 14545515 14544501     .UT..ET..UT..ET.
    4ec8:	14541511 14555511 15555511 14550511     ..T..UU..UU...U.
    4ed8:	10a6aa11 15556518 14554515 14545514     .....eU..EU..UT.
    4ee8:	14544514 14545514 15555515 15554515     .ET..UT..UU..EU.
    4ef8:	14546515 14544515 14545515 14555511     .eT..ET..UT..UU.
    4f08:	14545511 14555511 15555511 14550511     .UT..UU..UU...U.
    4f18:	10a6aa11 55a9a518 14554555 14545514     .......UUEU..UT.
    4f28:	14558515 15995515 15556515 15594515     ..U..U...eU..EY.
    4f38:	14596515 15558515 14555515 14559511     .eY...U..UU...U.
    4f48:	14545511 14555511 15555511 55550551     .UT..UU..UU.Q.UU
    4f58:	10aaaa51 55a9a518 15555559 1555a515     Q......UYUU...U.
    4f68:	14998555 15995615 55556515 55595515     U....V...eUU.UYU
    4f78:	55996515 15959515 14956515 14559511     .e.U.....e....U.
    4f88:	14545611 54556511 55959551 55551551     .VT..eUTQ..UQ.UU
    4f98:	10aaaa51 55a9aa28 15955569 1595a525     Q...(..UiU..%...
    4fa8:	14998569 15999615 5595aa15 55599a15     i..........U..YU
    4fb8:	5599a655 55999515 1495a515 14999511     U..U...U........
    4fc8:	14956611 55996911 55959951 55591551     .f...i.UQ..UQ.YU
    4fd8:	54aaaa55 55a9aa28 55a59669 5599a625     U..T(..Ui..U%..U
    4fe8:	54998669 5599aa19 5595aa15 65999a55     i..T...U...UU..e
    4ff8:	5599aa55 55999a15 1499a555 14999615     U..U...UU.......
    5008:	14996651 5599aa11 5595aa55 55991551     Qf.....UU..UQ..U
    5018:	64aaaa55 65a9aa28 55a59669 55a9aa25     U..d(..ei..U%..U
    5028:	54999669 65a9aa19 6595aa19 65999a59     i..T...e...eY..e
    5038:	5599aa55 55999a15 2499aa55 25999a15     U..U...UU..$...%
    5048:	14996a55 6599aa11 65a9aa55 55991a51     Uj.....eU..eQ..U
    5058:	a5aaaa55 65a9aa28 65a5aa69 65a9aa69     U...(..ei..ei..e
    5068:	64a99669 65a9aa59 65a9aa59 65a99a59     i..dY..eY..eY..e
    5078:	6599aa55 55999a55 6499aa55 65999a55     U..eU..UU..dU..e
    5088:	24996a55 6599aa15 65a9aa55 55a91a51     Uj.$...eU..eQ..U
    5098:	a5aaaa55 a5aaaa68 65a9aa69 65a9aa69     U...h...i..ei..e
    50a8:	65a99a69 65a9aa59 65a9aa59 65a99a59     i..eY..eY..eY..e
    50b8:	65a9aa55 65a99a55 64a9aa59 65a9aa55     U..eU..eY..dU..e
    50c8:	24a9aa55 65a9aa15 65a9aa55 65a91a51     U..$...eU..eQ..e
    50d8:	aaaaaa55 aaaaaa68 69aaaa68 69a9aa69     U...h...h..ii..i
    50e8:	65a99a69 65a9aa69 69aaaa59 65aaaa59     i..ei..eY..iY..e
    50f8:	65a9aa55 65a9aa55 65a9aa59 65a9aa55     U..eU..eY..eU..e
    5108:	64a9aa55 65a9aa55 65aaaa55 65a92a55     U..dU..eU..eU*.e
    5118:	aaaaaa55 aaaaaaa8 6aaaaaa8 69a9aa69     U..........ji..i
    5128:	69aaaa69 69a9aa69 69aaaa59 69aaaa59     i..ii..iY..iY..i
    5138:	69a9aa59 69a9aa69 65aaaa59 69a9aa55     Y..ii..iY..eU..i
    5148:	69a9aa55 69aaaa55 69aaaa55 65aa2a55     U..iU..iU..iU*.e
    5158:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    5168:	a9aaaa68 6aaaaa68 aaaaaa68 6aaaaa68     h...h..jh...h..j
    5178:	69a9aa68 69aaaa68 69aaaa58 69aaaa54     h..ih..iX..iT..i
    5188:	69a9aa54 69aaaa54 6aaaaa54 69aa2a54     T..iT..iT..jT*.i
    5198:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    51a8:	a9aaaaa8 aaaaaa68 aaaaaa68 aaaaaa68     ....h...h...h...
    51b8:	a9aaaa68 aaaaaa68 69aaaa68 69aaaa58     h...h...h..iX..i
    51c8:	69aaaa64 a9aaaa54 aaaaaa64 69aa2a64     d..iT...d...d*.i
    51d8:	aaaa9a59 aaaaaaaa aaaaaaaa aaaaaa6a     Y...........j...
    51e8:	aaaaaaaa aaaaaa6a aaaaaa6a aaaaaa6a     ....j...j...j...
    51f8:	aaaaaa6a aaaaaa6a 69aaaa6a 69aaaa6a     j...j...j..ij..i
    5208:	69aaaa6a a9aaaa6a aaaaaa6a aaaa2aa6     j..ij...j....*..
    5218:	aaaaaa68 aaaaaaaa aaaaaaaa aaaaaaaa     h...............
    5228:	aaaaaaaa aaaaaaaa aaaaaa6a aaaaaa6a     ........j...j...
    5238:	aaaaaaaa aaaaaa6a a9aaaaaa aaaaaa6a     ....j.......j...
    5248:	69aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ...ij........*..
    5258:	aaaa4aa8 aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    5268:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5278:	aaaaaaaa aaaaaa6a aaaaaaaa aaaaaaaa     ....j...........
    5288:	a9aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ....j........*..
    5298:	aaaa4aaa aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    52a8:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    52b8:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    52c8:	aaaaaaaa aaaaaa6a aaaa9aaa aaaa1aaa     ....j...........
    52d8:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    52e8:	aaaa6aaa aaaaaaaa aaaaaaaa aaaaaaaa     .j..............
    52f8:	aaaa9aaa aaaa6aaa aaaa6aaa aaaa6aaa     .....j...j...j..
    5308:	aaaa5aaa aaaaaaaa aaaaaaaa aaaa2aaa     .Z...........*..
    5318:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    5328:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa6aaa     .j...j...j...j..
    5338:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa5aaa     .j...j...j...Z..
    5348:	aaaa6aaa aaaa6aaa aaaa4aaa aaaa4aaa     .j...j...J...J..
    5358:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa5aaa     .J...Z...Z...Z..
    5368:	aaaa6aaa aaaa6aa6 aaaa6aaa aaaa5aaa     .j...j...j...Z..
    5378:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa6aaa     .J...Z...Z...j..
    5388:	aaaa49aa aaaa5aaa aa9a4aaa aaaa4aaa     .I...Z...J...J..
    5398:	aaaa52aa aa2a6aa6 aaaa6aa6 aaaa6aa6     .R...j*..j...j..
    53a8:	aaaa6aa6 aaa26aaa aa9a52aa aa2a62aa     .j...j...R...b*.
    53b8:	aa9a4aaa aaa26aaa aa2a6aaa aaaa4aaa     .J...j...j*..J..
    53c8:	aa2a4aaa aaaa62aa aa2a4aaa aa224aaa     .J*..b...J*..J".
    53d8:	aaaa12a6 6a224aaa aaaa4aaa aaaa4aaa     .....J"j.J...J..
    53e8:	aa225aaa aa225aa2 6aaa62aa aa2242aa     .Z"..Z"..b.j.B".
    53f8:	aaa242aa aaa242aa aa2042aa aaaa4aaa     .B...B...B ..J..
    5408:	aa2a40aa 6aa242a6 6a0a4aaa aa124aaa     .@*..B.j.J.j.J..
    5418:	aa5215aa aa1242a2 aa9a42a2 6a9a42a2     ..R..B...B...B.j
    5428:	6a1262a2 aa1262a2 aa8842aa aa2042aa     .b.j.b...B...B .
    5438:	aa0242aa 6a2242aa aa1042aa 6aaa4aa6     .B...B"j.B...J.j
    5448:	6a1040a6 aa2242aa aa0a42a6 aa2042aa     .@.j.B"..B...B .
    5458:	6a6216a2 2a6211a2 696a11a2 aa6211a2     ..bj..b*..ji..b.
    5468:	a96211a2 6a6251a2 2a4851a6 6a5051a6     ..b..Qbj.QH*.QPj
    5478:	6a4251a6 aa5051a6 696051a6 a95059aa     .QBj.QP..Q`i.YP.
    5488:	a96050aa 2a5251a2 2a4a51aa 694051aa     .P`..QR*.QJ*.Q@i
    5498:	aa5215a2 294216a2 aa4816a2 294216a2     ..R...B)..H...B)
    54a8:	2a4016a2 a94216a2 294816aa a96016aa     ..@*..B...H)..`.
    54b8:	aa4216aa 296016aa aa4016aa 2a6016a2     ..B...`)..@...`*
    54c8:	2a401422 296056a2 294a56a2 aa405626     ".@*.V`).VJ)&V@.
    54d8:	195555a2 1a5455a2 18545522 1a5455a2     .UU..UT."UT..UT.
    54e8:	185455a2 1a5455a2 1a5455a2 1a5455a2     .UT..UT..UT..UT.
    54f8:	195455a2 1a5455a2 18545522 18545522     .UT..UT."UT."UT.
    5508:	18545522 1a5455a2 1a545522 1854552a     "UT..UT."UT.*UT.
    5518:	2a555522 28555526 28555526 285555a6     "UU*&UU(&UU(.UU(
    5528:	28555526 28555526 285555a6 285555a6     &UU(&UU(.UU(.UU(
    5538:	2a555526 285555a6 28555526 28555526     &UU*.UU(&UU(&UU(
    5548:	28555526 28555526 28555526 28555526     &UU(&UU(&UU(&UU(
    5558:	54555526 54555506 54555506 54555506     &UUT.UUT.UUT.UUT
    5568:	54555506 54555526 54555526 54555526     .UUT&UUT&UUT&UUT
    5578:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    5588:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    5598:	55555526 55555554 55555554 55555554     &UUUTUUUTUUUTUUU
    55a8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    55b8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    55c8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    55d8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    55e8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    55f8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    5608:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    5618:	aaaa5454 aaaa54a8 aaaa54a8 aaaa54a8     TT...T...T...T..
    5628:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    5638:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    5648:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    5658:	000050a8 00005008 00005008 00005008     .P...P...P...P..
    5668:	00005008 00005008 00005008 00005008     .P...P...P...P..
    5678:	00005008 00005008 00005008 00005008     .P...P...P...P..
    5688:	00005008 00005008 00005008 00005008     .P...P...P...P..
    5698:	00004008 00004008 00004008 00004008     .@...@...@...@..
    56a8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    56b8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    56c8:	00004008 00004008 00004008 00004008     .@...@...@...@..
    56d8:	00000008 00000000 00000000 00000000     ................
	...

0000571c <UC8173_KWVCOM_A2_LUT>:
	...
    5724:	000000c0 00000000 00000000 00000000     ................
	...

0000573c <UC8173_KW_A2_LUT>:
    573c:	a9a9a9a9 a9a9a9a9 a9a9a9a9 a9a9a9a9     ................
    574c:	a9a9a9a9 a9a9a9a9 a1a9a9a9 a129a9a9     ..............).
    575c:	8121a9a8 8105a9a8 0505a1a8 150580a8     ..!.............
    576c:	54150088 54040480 54145482 54145642     ...T...T.T.TBV.T
    577c:	54565646 54565646 56565656 56565656     FVVTFVVTVVVVVVVV
    578c:	52525656 52525656 52525656 52525256     VVRRVVRRVVRRVRRR
    579c:	52525256 42525252 42525252 4a4a4a5a     VRRRRRRBRRRBZJJJ
    57ac:	6a6a6a6a 6a6a6a6a 00000000 ffffffff     jjjjjjjj........
	...

0000593c <UC8173_FT_A2_LUT>:
	...

000059bc <ArvoBold_18pt_CharCount>:
    59bc:	12080805 0410150f 0e0c0808 09050906     ................
    59cc:	0d0e0a0f 0e0e0e0e 05060d0e 0e0a0c0a     ................
    59dc:	1210111b 130f1011 13080816 13141b10     ................
    59ec:	0f121310 1c121211 080f1212 0c0e0709     ................
    59fc:	0e0f0f09 0f090e10 11070910 0f111909     ................
    5a0c:	0d0d1010 160f1108 0b0d0f0e 000b0b07     ................

00005a1c <ArvoBold_18pt_Table>:
	...
    5a38:	03cfff00 03cfff00 03cfff00 00000000     ................
	...
    5a54:	00003f00 00003f00 00001f00 00000000     .?...?..........
    5a64:	00003f00 00003f00 00001f00 00700000     .?...?........p.
    5a74:	03706000 03f07000 03fff000 00fffc00     .`p..p..........
    5a84:	007fff00 00707f00 00707300 03707000     ......p..sp..pp.
    5a94:	03f07000 03fe7000 01fff000 007ffc00     .p...p..........
    5aa4:	0071ff00 00707f00 00307300 00007000     ..q...p..s0..p..
	...
    5abc:	00f00000 00f3c000 00f7e000 01f7f000     ................
    5acc:	01e77000 0fce7f00 0fce7f00 0fceff00     .p..............
    5adc:	01ddf000 00fde000 00fde000 0079e000     ..............y.
	...
    5afc:	00007c00 0000fe00 0201ff00 0301c700     .|..............
    5b0c:	03c1c700 01e1c700 00f9ff00 003cfe00     ..............<.
    5b1c:	001f7c00 00ff8000 01ffe000 03fef000     .|..............
    5b2c:	038e7c00 038e1e00 038e0f00 03fe0300     .|..............
    5b3c:	01fc0100 00f80000 00000000 00000000     ................
    5b4c:	00780000 00fe7800 01fffe00 03c7fe00     ..x..x..........
    5b5c:	0383cf00 03878700 039f8700 03ffcf00     ................
    5b6c:	01fffe00 01fcfe00 00f8f800 01fe0000     ................
    5b7c:	03fe0000 03ce0000 01800000 00003f00     .............?..
    5b8c:	00003f00 00000f00 00000000 00000000     .?..............
    5b9c:	01ff8000 0ffff000 3ffffc00 ff00fe00     ...........?....
    5bac:	f8001f00 70000e00 00000000 00000000     .......p........
    5bbc:	70000e00 f8001f00 7f00fe00 3ffffc00     ...p...........?
    5bcc:	0ffff000 01ff8000 00000000 00000000     ................
    5bdc:	00000e00 0000ce00 0000fc00 0000ff80     ................
    5bec:	00007f80 00007f80 0000fc00 0000fc00     ................
    5bfc:	0000ce00 00000e00 00000000 00000000     ................
    5c0c:	000e0000 000e0000 000e0000 000e0000     ................
    5c1c:	00ffe000 00ffe000 00ffe000 000e0000     ................
    5c2c:	000e0000 000e0000 000e0000 00000000     ................
    5c3c:	00000000 30000000 3f000000 1f800000     .......0...?....
    5c4c:	07800000 00000000 00000000 00000000     ................
    5c5c:	001c0000 001c0000 001c0000 001c0000     ................
    5c6c:	001c0000 001c0000 001c0000 00000000     ................
    5c7c:	00000000 03c00000 03c00000 03c00000     ................
	...
    5c94:	03000000 03e00000 03fc0000 01ff8000     ................
    5ca4:	003ff000 0007fe00 0000ff00 00001f00     ..?.............
    5cb4:	00000000 001fe000 007ff800 01fffe00     ................
    5cc4:	01e01e00 03c00f00 03800700 03800700     ................
    5cd4:	03800700 03c00f00 01e01e00 01fffe00     ................
    5ce4:	007ff800 001fe000 00000000 00007800     .............x..
    5cf4:	03807c00 03803e00 03fffe00 03ffff00     .|...>..........
    5d04:	03ffff00 03800000 03800000 00000000     ................
	...
    5d1c:	03c03800 03e03c00 03f03e00 03f80f00     .8...<...>......
    5d2c:	03bc0700 039e0700 038f0700 03878700     ................
    5d3c:	0383cf00 0381fe00 0380fc00 03807800     .............x..
    5d4c:	00000000 00601800 00e01c00 01e01e00     ......`.........
    5d5c:	03c00f00 03800700 03838700 03838700     ................
    5d6c:	03838700 01c7cf00 01fffe00 00fefc00     ................
    5d7c:	007c7800 00000000 000f0000 000f8000     .x|.............
    5d8c:	000fe000 000ef000 000e7c00 000e1e00     .........|......
    5d9c:	038e0f00 038e0300 03ffc100 03ffc000     ................
    5dac:	03ffc000 038e0000 038e0000 00000000     ................
	...
    5dc4:	00e1ff00 01e1ff00 01e1ff00 03c1c700     ................
    5dd4:	0381c700 0381c700 0381c700 03c3c700     ................
    5de4:	01ff8700 00ff0700 007e0000 00000000     ..........~.....
    5df4:	00000000 003c0000 00ff0000 01ffc000     ......<.........
    5e04:	01c3f000 0381f800 0381fe00 0381cf00     ................
    5e14:	0381c700 01c38100 01ff8000 00ff0000     ................
    5e24:	003c0000 00000000 00003f00 00003f00     ..<......?...?..
    5e34:	03803f00 03800700 03e00700 03f80700     .?..............
    5e44:	03ff0700 039fc700 0387f700 0000ff00     ................
    5e54:	00003f00 00000f00 00000300 00000000     .?..............
    5e64:	00000000 007c7800 00fefc00 01fffe00     .....x|.........
    5e74:	01c7cf00 03838700 03838700 03838700     ................
    5e84:	03838700 01c7cf00 01fffe00 00fefc00     ................
    5e94:	007c7800 00000000 00000000 0001f000     .x|.............
    5ea4:	0003fc00 0007fe00 030f0e00 03ce0700     ................
    5eb4:	03ee0700 03fe0700 00fe0700 003f0e00     ..............?.
    5ec4:	000ffe00 0003fc00 0000f800 00000000     ................
    5ed4:	03c3c000 03c3c000 03c3c000 00000000     ................
    5ee4:	00000000 3f000000 1f81e000 0781e000     .......?........
    5ef4:	0301e000 00000000 001e0000 001e0000     ................
    5f04:	001f0000 003f0000 003f0000 00738000     ......?...?...s.
    5f14:	00738000 00738000 00e1c000 00000000     ..s...s.........
    5f24:	00000000 0039c000 0039c000 0039c000     ......9...9...9.
    5f34:	0039c000 0039c000 0039c000 0039c000     ..9...9...9...9.
    5f44:	0039c000 0039c000 0039c000 00000000     ..9...9...9.....
    5f54:	00e1c000 00738000 00738000 00738000     ......s...s...s.
    5f64:	003f0000 003f0000 003f0000 001e0000     ..?...?...?.....
    5f74:	001e0000 001e0000 00000000 00001c00     ................
    5f84:	00001e00 00001e00 03dc0f00 03df0700     ................
    5f94:	03df0700 00038700 0001c700 0001fe00     ................
    5fa4:	0000fe00 00007800 00000000 00000000     .....x..........
	...
    5fbc:	00ff0000 03ffc000 07ffe000 1f81f800     ................
    5fcc:	3e007c00 3c3c3c00 78ff1e00 71ff8e00     .|.>.<<<...x...q
    5fdc:	f1c38f00 e381c700 e381c700 e381c700     ................
    5fec:	e381c700 e1c3c700 f1ffcf00 73ffce00     ...............s
    5ffc:	73ffde00 03801c00 03803c00 03c0f800     ...s.....<......
	...
    6020:	03800000 03c00000 03f80000 03ff0000     ................
    6030:	03bfe000 038ff800 000eff00 000e1f00     ................
    6040:	000e0700 000e7f00 038fff00 039ff800     ................
    6050:	03ff8000 03fc0000 03e00000 03800000     ................
	...
    6068:	03800700 03800700 03ffff00 03ffff00     ................
    6078:	03ffff00 03838700 03838700 03838700     ................
    6088:	03838700 03838700 03c7cf00 01fffe00     ................
    6098:	00fffc00 007cf800 00000000 00000000     ......|.........
    60a8:	000fc000 003ff000 007ffc00 00f03e00     ......?......>..
    60b8:	01e01e00 01c00f00 03800700 03800700     ................
    60c8:	03800700 03800700 03c00f00 01e01e00     ................
    60d8:	01f03c00 00f03800 00703800 00303800     .<...8...8p..80.
    60e8:	00000000 03800700 03800700 03ffff00     ................
    60f8:	03ffff00 03ffff00 03800700 03800700     ................
    6108:	03800700 03800700 03c00f00 01c00e00     ................
    6118:	01e01e00 00f87c00 007ff800 003ff000     .....|........?.
    6128:	000fc000 00000000 00000000 03800700     ................
    6138:	03800700 03ffff00 03ffff00 03ffff00     ................
    6148:	03838700 03838700 03838700 03838700     ................
    6158:	03838700 03800700 03f03f00 03f03f00     .........?...?..
    6168:	03f03f00 00000000 00000000 03800700     .?..............
    6178:	03800700 03ffff00 03ffff00 03ffff00     ................
    6188:	03838700 03838700 00038700 00038700     ................
    6198:	00038700 00000700 00001f00 00001f00     ................
    61a8:	00001f00 00000000 000fc000 003ff000     ..............?.
    61b8:	00fff800 00f07c00 01e01e00 01c00e00     .....|..........
    61c8:	03800700 03800700 03800700 03870700     ................
    61d8:	03870700 03c70e00 01e71e00 01f73c00     .............<..
    61e8:	00ff3800 03ff3800 03ff3800 00000000     .8...8...8......
    61f8:	00000000 03800700 03800700 03ffff00     ................
    6208:	03ffff00 03ffff00 03838700 03838700     ................
    6218:	00038000 00038000 00038000 00038000     ................
    6228:	00038000 00038000 03838700 03838700     ................
    6238:	03ffff00 03ffff00 03ffff00 03800700     ................
    6248:	03800700 00000000 00000000 03800700     ................
    6258:	03800700 03ffff00 03ffff00 03ffff00     ................
    6268:	03800700 03800700 00000000 0c000700     ................
    6278:	0f000700 0fffff00 07ffff00 01ffff00     ................
    6288:	00000700 00000700 00000000 03800700     ................
    6298:	03800700 03ffff00 03ffff00 03ffff00     ................
    62a8:	03820700 03830700 00078000 000fc000     ................
    62b8:	001ce000 00387000 00383800 03f03f00     .....p8..88..?..
    62c8:	03e01f00 03c00f00 03800700 03800700     ................
    62d8:	00000700 00000000 03800700 03800700     ................
    62e8:	03ffff00 03ffff00 03ffff00 03800700     ................
    62f8:	03800700 03800000 03800000 03800000     ................
    6308:	03800000 03f80000 03f80000 03f80000     ................
	...
    6320:	03800700 03800700 03ffff00 03ffff00     ................
    6330:	03ffff00 03803f00 0000fc00 0003f800     .....?..........
    6340:	0007e000 001f8000 007e0000 01f80000     ..........~.....
    6350:	03e00000 03f80000 01fe0000 003f8000     ..............?.
    6360:	000fe000 0003f800 0000fe00 03803f00     .............?..
    6370:	03ffff00 03ffff00 03ffff00 03800700     ................
    6380:	03800700 00000000 00000000 03800700     ................
    6390:	03800700 03ffff00 03ffff00 03fffe00     ................
    63a0:	0380fc00 0381f000 0007e000 000f8000     ................
    63b0:	003f0000 007c0000 01f00700 03e00700     ..?...|.........
    63c0:	03ffff00 03ffff00 03ffff00 00000700     ................
    63d0:	00000700 00000000 00000000 000fc000     ................
    63e0:	003ff000 007ff800 00f03c00 01e01e00     ..?......<......
    63f0:	01c00e00 03800700 03800700 03800700     ................
    6400:	03800700 03800700 01c00e00 01e01e00     ................
    6410:	00f03c00 007ff800 003ff000 000fc000     .<........?.....
	...
    6428:	03800700 03800700 03ffff00 03ffff00     ................
    6438:	03ffff00 03870700 03870700 00070700     ................
    6448:	00070700 00070700 00078f00 0003fe00     ................
    6458:	0001fc00 0000f800 00000000 00000000     ................
    6468:	000fc000 003ff000 00fff800 00f03c00     ......?......<..
    6478:	01e01e00 03c00e00 03800700 3f800700     ...............?
    6488:	3f800700 3f800700 7b800700 f3c00e00     ...?...?...{....
    6498:	e1e01e00 e0f03c00 f0fff800 703ff000     .....<........?p
    64a8:	700fc000 00000000 00000000 03800700     ...p............
    64b8:	03800700 03ffff00 03ffff00 03ffff00     ................
    64c8:	03870700 03870700 00070700 00070700     ................
    64d8:	00070700 000f0700 00ff0700 03ff8f00     ................
    64e8:	03f9fe00 03e1fc00 03807800 00000000     .........x......
    64f8:	00000000 00787800 00f9fc00 01f9fe00     .....xx.........
    6508:	01c3cf00 0383c700 03878700 03878700     ................
    6518:	03878700 03870700 01cf0e00 01ff3e00     .............>..
    6528:	00fe3c00 007c3800 00000000 00003f00     .<...8|......?..
    6538:	00003f00 00003f00 00000700 03800700     .?...?..........
    6548:	03800700 03ffff00 03ffff00 03ffff00     ................
    6558:	03800700 03800700 00000700 00000700     ................
    6568:	00003f00 00003f00 00003f00 00000000     .?...?...?......
    6578:	00000700 00000700 001fff00 007fff00     ................
    6588:	00ffff00 01e00700 03c00700 03800000     ................
    6598:	03800000 03800000 03800000 03c00700     ................
    65a8:	01e00700 00ffff00 007fff00 001fff00     ................
    65b8:	00000700 00000700 00000700 00000700     ................
    65c8:	00000f00 00007f00 0003ff00 000ff700     ................
    65d8:	007f8700 01fe0000 03f00000 03f00000     ................
    65e8:	03fe0000 007f8700 000ff700 0003ff00     ................
    65f8:	00007f00 00000f00 00000700 00000700     ................
    6608:	00000700 00000700 00000f00 00007f00     ................
    6618:	0003ff00 000ff700 007fc700 01fe0000     ................
    6628:	03f80000 03e00000 03fe0000 01ffe000     ................
    6638:	001ffe00 0000ff00 0000ff00 0007fc00     ................
    6648:	003fe000 01ff0000 03f80000 03f00000     ..?.............
    6658:	01fe0000 007f8700 001ff700 0003ff00     ................
    6668:	00007f00 00000f00 00000700 00000700     ................
    6678:	03800700 03c00f00 03e01f00 03f03f00     .............?..
    6688:	03f87f00 03bcf700 001fe000 000fc000     ................
    6698:	000fc000 001fe000 03bcf700 03f87f00     ................
    66a8:	03f03f00 03e01f00 03c00f00 03800700     .?..............
	...
    66c0:	00000700 00000700 00000f00 00001f00     ................
    66d0:	00003f00 03807f00 0380f700 03ffc000     .?..............
    66e0:	03ff8000 03ffc000 0380e000 03807700     .............w..
    66f0:	00003f00 00001f00 00000f00 00000700     .?..............
    6700:	00000700 00000000 00000000 03e07f00     ................
    6710:	03f07f00 03f87f00 03de0700 038f0700     ................
    6720:	0387c700 0381e700 0380f700 03803f00     .............?..
    6730:	03801f00 03f00f00 03f00f00 03f00700     ................
	...
    6748:	ffffffe0 ffffffe0 ffffffe0 e00000e0     ................
    6758:	e00000e0 00000000 00000000 00000100     ................
    6768:	00000f00 00007f00 0001fe00 000ff800     ................
    6778:	007fc000 01fe0000 03f00000 03c00000     ................
    6788:	00000000 e00000e0 e00000e0 ffffffe0     ................
    6798:	ffffffe0 ffffffe0 00000000 00000000     ................
    67a8:	00010000 0001c000 0001f000 0001fc00     ................
    67b8:	00003f00 00000f00 00000f00 00003f00     .?...........?..
    67c8:	0000fe00 0001f800 0001c000 00010000     ................
    67d8:	00000000 38000000 38000000 38000000     .......8...8...8
    67e8:	38000000 38000000 38000000 38000000     ...8...8...8...8
    67f8:	38000000 38000000 38000000 38000000     ...8...8...8...8
    6808:	38000000 00000000 00000000 00000100     ...8............
    6818:	00000300 00000700 00000f00 00000e00     ................
    6828:	00000800 00000000 00000000 00e00000     ................
    6838:	01f18000 03f98000 0399c000 0399c000     ................
    6848:	0399c000 0399c000 039bc000 03ffc000     ................
    6858:	03ff8000 03ff0000 03800000 03800000     ................
    6868:	00000000 00000700 00000700 03ffff00     ................
    6878:	03ffff00 03ffff00 03c3c000 0381c000     ................
    6888:	0381c000 0381c000 0381c000 01c38000     ................
    6898:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
    68a8:	00000000 003e0000 00ff0000 01ff8000     ......>.........
    68b8:	01c38000 0381c000 0381c000 0381c000     ................
    68c8:	0381c000 03c3c000 01e38000 00e38000     ................
    68d8:	00638000 00000000 00000000 003c0000     ..c...........<.
    68e8:	00ff0000 01ff8000 03c38000 0381c000     ................
    68f8:	0381c000 0381c000 0381c700 03c3c700     ................
    6908:	03ffff00 03ffff00 03ffff00 03800000     ................
    6918:	03800000 00000000 00000000 003c0000     ..............<.
    6928:	00ff0000 01ff8000 01d98000 0399c000     ................
    6938:	0399c000 0399c000 0399c000 0399c000     ................
    6948:	039f8000 019f0000 001e0000 00000000     ................
    6958:	00000000 0381c000 0381c000 03fffc00     ................
    6968:	03fffe00 03ffff00 0381c700 0381c700     ................
    6978:	00000700 00000000 003c0000 60ff0000     ..........<....`
    6988:	71ff8000 f1c38000 e381c000 e381c000     ...q............
    6998:	e381c000 e381c000 f3c3c000 7fffc000     ................
    69a8:	3fffc000 1fffc000 00000000 00000000     ...?............
    69b8:	00000000 03800700 03800700 03ffff00     ................
    69c8:	03ffff00 03ffff00 03838000 0381c000     ................
    69d8:	0001c000 0001c000 0003c000 03ffc000     ................
    69e8:	03ff8000 03ff0000 03800000 03800000     ................
    69f8:	00000000 0381c000 0381c600 03ffcf00     ................
    6a08:	03ffcf00 03ffcf00 03800600 03800000     ................
    6a18:	00000000 e001c000 e001c000 ffffc600     ................
    6a28:	7fffcf00 3fffcf00 00000f00 00000600     .......?........
    6a38:	00000000 03800700 03800700 03ffff00     ................
    6a48:	03ffff00 03ffff00 039c0000 039c0000     ................
    6a58:	003c0000 007f0000 00ff8000 01e7c000     ..<.............
    6a68:	03c3c000 03c1c000 03c1c000 00000000     ................
	...
    6a80:	03800700 03800700 03ffff00 03ffff00     ................
    6a90:	03ffff00 03800000 03800000 00000000     ................
    6aa0:	00000000 0381c000 0381c000 03ffc000     ................
    6ab0:	03ffc000 03ffc000 03838000 0381c000     ................
    6ac0:	0001c000 0001c000 0003c000 03ffc000     ................
    6ad0:	03ff8000 03ff0000 03838000 0381c000     ................
    6ae0:	0001c000 0001c000 0003c000 03ffc000     ................
    6af0:	03ff8000 03ff0000 03800000 03800000     ................
    6b00:	00000000 0381c000 0381c000 03ffc000     ................
    6b10:	03ffc000 03ffc000 03838000 0381c000     ................
    6b20:	0001c000 0001c000 0001c000 0003c000     ................
    6b30:	03ffc000 03ff8000 03ff0000 03800000     ................
    6b40:	03800000 00000000 003c0000 00ff0000     ..........<.....
    6b50:	01ff8000 01c38000 03c1c000 0381c000     ................
    6b60:	0381c000 0381c000 0381c000 01c38000     ................
    6b70:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
	...
    6b88:	e001c000 e001c000 ffffc000 ffffc000     ................
    6b98:	ffffc000 e3c3c000 e381c000 0381c000     ................
    6ba8:	0381c000 0381c000 01c38000 01ff8000     ................
    6bb8:	00ff0000 003c0000 00000000 00000000     ......<.........
    6bc8:	003c0000 00ff0000 01ff8000 01c38000     ..<.............
    6bd8:	03c3c000 0381c000 0381c000 0381c000     ................
    6be8:	e381c000 e3c3c000 ffffc000 ffffc000     ................
    6bf8:	ffffc000 e0000000 e0000000 00000000     ................
    6c08:	0381c000 0381c000 03ffc000 03ffc000     ................
    6c18:	03ffc000 03838000 0381c000 0001c000     ................
    6c28:	0003c000 0003c000 0003c000 00000000     ................
    6c38:	00000000 01c70000 01cf8000 01cfc000     ................
    6c48:	03ddc000 0399c000 0399c000 0399c000     ................
    6c58:	03bbc000 01fb8000 01f38000 00e38000     ................
    6c68:	00000000 0001c000 0001c000 01fff800     ................
    6c78:	03fffc00 03fffc00 0381c000 0381c000     ................
    6c88:	01800000 0001c000 0001c000 007fc000     ................
    6c98:	01ffc000 01ffc000 03c00000 03800000     ................
    6ca8:	03800000 03800000 0381c000 01c1c000     ................
    6cb8:	03ffc000 03ffc000 03ffc000 03800000     ................
    6cc8:	03800000 00000000 0001c000 0001c000     ................
    6cd8:	0003c000 000fc000 003fc000 00fdc000     ..........?.....
    6ce8:	03f1c000 03c00000 03f00000 01fdc000     ................
    6cf8:	007fc000 000fc000 0003c000 0001c000     ................
    6d08:	0001c000 0001c000 0001c000 0007c000     ................
    6d18:	001fc000 00ffc000 03fdc000 03e1c000     ................
    6d28:	03f80000 01ff8000 003fc000 0007c000     ..........?.....
    6d38:	000fc000 007fc000 03fe0000 03f00000     ................
    6d48:	03e1c000 03fdc000 00ffc000 001fc000     ................
    6d58:	0003c000 0001c000 0001c000 0381c000     ................
    6d68:	0381c000 03c1c000 03e3c000 03f7c000     ................
    6d78:	03ffc000 003c0000 003c0000 03ffc000     ......<...<.....
    6d88:	03ffc000 03e7c000 03c3c000 0381c000     ................
    6d98:	0381c000 0001c000 0001c000 0003c000     ................
    6da8:	e00fc000 e03fc000 f0fdc000 fff00000     ......?.........
    6db8:	ffc00000 eff00000 e3fdc000 007fc000     ................
    6dc8:	001fc000 0003c000 0001c000 0001c000     ................
    6dd8:	00000000 0387c000 03c7c000 03f7c000     ................
    6de8:	03f9c000 03fdc000 039fc000 038fc000     ................
    6df8:	03e3c000 03e1c000 03e04000 00000000     .........@......
	...
    6e10:	00070000 00070000 00070000 1fffffc0     ................
    6e20:	3fffffe0 3ffdffe0 380000e0 380000e0     ...?...?...8...8
	...
    6e3c:	ffffffe0 ffffffe0 ffffffe0 00000000     ................
	...
    6e54:	380000e0 380000e0 3ffdffe0 3fffffe0     ...8...8...?...?
    6e64:	1fffffc0 00070000 00070000 00070000     ................
	...
    6e80:	00070000 00078000 0001c000 0001c000     ................
    6e90:	0003c000 00038000 00078000 00070000     ................
    6ea0:	00070000 0003c000 0001c000 6c6c6548     ............Hell
    6eb0:	6f57206f 21646c72 00000000              o World!....

00006ebc <__sf_fake_stderr>:
	...

00006edc <__sf_fake_stdin>:
	...

00006efc <__sf_fake_stdout>:
	...

00006f1c <_init>:
    6f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f22:	bc08      	pop	{r3}
    6f24:	469e      	mov	lr, r3
    6f26:	4770      	bx	lr

00006f28 <__init_array_start>:
    6f28:	000000dd 	.word	0x000000dd

00006f2c <_fini>:
    6f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f2e:	46c0      	nop			; (mov r8, r8)
    6f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f32:	bc08      	pop	{r3}
    6f34:	469e      	mov	lr, r3
    6f36:	4770      	bx	lr

00006f38 <__fini_array_start>:
    6f38:	000000b5 	.word	0x000000b5
