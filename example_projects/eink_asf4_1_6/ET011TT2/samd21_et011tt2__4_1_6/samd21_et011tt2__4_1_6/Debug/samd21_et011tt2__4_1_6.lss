
samd21_et011tt2__4_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b7c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000358  20000000  0001b7c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e0  20000358  0001bb18  00030358  2**2
                  ALLOC
  3 .stack        00002000  20000438  0001bbf8  00030358  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a80b  00000000  00000000  000303d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c80  00000000  00000000  0004abe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e908  00000000  00000000  0004c864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005f8  00000000  00000000  0005b16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007e0  00000000  00000000  0005b764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000050df  00000000  00000000  0005bf44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009d43  00000000  00000000  00061023  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00086964  00000000  00000000  0006ad66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014c4  00000000  00000000  000f16cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     8$. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000358 	.word	0x20000358
      d4:	00000000 	.word	0x00000000
      d8:	0001b7c0 	.word	0x0001b7c0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000035c 	.word	0x2000035c
     108:	0001b7c0 	.word	0x0001b7c0
     10c:	0001b7c0 	.word	0x0001b7c0
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	0001b7c0 	.word	0x0001b7c0
     1c8:	20000000 	.word	0x20000000
     1cc:	20000358 	.word	0x20000358
     1d0:	20000004 	.word	0x20000004
     1d4:	20000358 	.word	0x20000358
     1d8:	20000438 	.word	0x20000438
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00004395 	.word	0x00004395
     1f8:	0000432d 	.word	0x0000432d

000001fc <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
     1fc:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fe:	4802      	ldr	r0, [pc, #8]	; (208 <delay_driver_init+0xc>)
     200:	4b02      	ldr	r3, [pc, #8]	; (20c <delay_driver_init+0x10>)
     202:	4798      	blx	r3
}
     204:	bd10      	pop	{r4, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	e000e010 	.word	0xe000e010
     20c:	00000369 	.word	0x00000369

00000210 <system_init>:

void system_init(void)
{
     210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     212:	46de      	mov	lr, fp
     214:	4657      	mov	r7, sl
     216:	464e      	mov	r6, r9
     218:	4645      	mov	r5, r8
     21a:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     21c:	4b40      	ldr	r3, [pc, #256]	; (320 <system_init+0x110>)
     21e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     220:	22c0      	movs	r2, #192	; 0xc0
     222:	05d2      	lsls	r2, r2, #23
     224:	2310      	movs	r3, #16
     226:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     228:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22a:	4b3e      	ldr	r3, [pc, #248]	; (324 <system_init+0x114>)
     22c:	493e      	ldr	r1, [pc, #248]	; (328 <system_init+0x118>)
     22e:	6299      	str	r1, [r3, #40]	; 0x28
     230:	24c0      	movs	r4, #192	; 0xc0
     232:	0624      	lsls	r4, r4, #24
     234:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	2544      	movs	r5, #68	; 0x44
     238:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23a:	2101      	movs	r1, #1
     23c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     240:	2020      	movs	r0, #32
     242:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     244:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     246:	4839      	ldr	r0, [pc, #228]	; (32c <system_init+0x11c>)
     248:	6298      	str	r0, [r3, #40]	; 0x28
     24a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24c:	3501      	adds	r5, #1
     24e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     250:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     252:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     254:	2040      	movs	r0, #64	; 0x40
     256:	4684      	mov	ip, r0
     258:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25c:	4834      	ldr	r0, [pc, #208]	; (330 <system_init+0x120>)
     25e:	4682      	mov	sl, r0
     260:	6298      	str	r0, [r3, #40]	; 0x28
     262:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     264:	3501      	adds	r5, #1
     266:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     268:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     26c:	2080      	movs	r0, #128	; 0x80
     26e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     270:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     272:	4830      	ldr	r0, [pc, #192]	; (334 <system_init+0x124>)
     274:	4680      	mov	r8, r0
     276:	6298      	str	r0, [r3, #40]	; 0x28
     278:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	3501      	adds	r5, #1
     27c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     280:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     282:	2580      	movs	r5, #128	; 0x80
     284:	022d      	lsls	r5, r5, #8
     286:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     288:	482b      	ldr	r0, [pc, #172]	; (338 <system_init+0x128>)
     28a:	6298      	str	r0, [r3, #40]	; 0x28
     28c:	482b      	ldr	r0, [pc, #172]	; (33c <system_init+0x12c>)
     28e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     290:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     292:	204f      	movs	r0, #79	; 0x4f
     294:	5c1e      	ldrb	r6, [r3, r0]
     296:	2704      	movs	r7, #4
     298:	433e      	orrs	r6, r7
     29a:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     29c:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a2:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2a4:	2694      	movs	r6, #148	; 0x94
     2a6:	5191      	str	r1, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a8:	3039      	adds	r0, #57	; 0x39
     2aa:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ac:	3020      	adds	r0, #32
     2ae:	4f24      	ldr	r7, [pc, #144]	; (340 <system_init+0x130>)
     2b0:	501f      	str	r7, [r3, r0]
     2b2:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b4:	27c0      	movs	r7, #192	; 0xc0
     2b6:	46bb      	mov	fp, r7
     2b8:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438f      	bics	r7, r1
     2bc:	46b9      	mov	r9, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2be:	465f      	mov	r7, fp
     2c0:	464d      	mov	r5, r9
     2c2:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c4:	4665      	mov	r5, ip
     2c6:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2c8:	3f38      	subs	r7, #56	; 0x38
     2ca:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4655      	mov	r5, sl
     2ce:	501d      	str	r5, [r3, r0]
     2d0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	25c6      	movs	r5, #198	; 0xc6
     2d4:	46a9      	mov	r9, r5
     2d6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d8:	002f      	movs	r7, r5
     2da:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	464d      	mov	r5, r9
     2de:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e0:	3d46      	subs	r5, #70	; 0x46
     2e2:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2e4:	3508      	adds	r5, #8
     2e6:	2780      	movs	r7, #128	; 0x80
     2e8:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ea:	4645      	mov	r5, r8
     2ec:	501d      	str	r5, [r3, r0]
     2ee:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f0:	3747      	adds	r7, #71	; 0x47
     2f2:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2f4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f6:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f8:	2480      	movs	r4, #128	; 0x80
     2fa:	05e4      	lsls	r4, r4, #23
     2fc:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2fe:	2588      	movs	r5, #136	; 0x88
     300:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     302:	501c      	str	r4, [r3, r0]
     304:	4a0f      	ldr	r2, [pc, #60]	; (344 <system_init+0x134>)
     306:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     308:	3036      	adds	r0, #54	; 0x36
     30a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     30c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(EINK_X_LED_0_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(EINK_X_LED_0_PIN, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
     310:	4b0d      	ldr	r3, [pc, #52]	; (348 <system_init+0x138>)
     312:	4798      	blx	r3
}
     314:	bc3c      	pop	{r2, r3, r4, r5}
     316:	4690      	mov	r8, r2
     318:	4699      	mov	r9, r3
     31a:	46a2      	mov	sl, r4
     31c:	46ab      	mov	fp, r5
     31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     320:	000003cd 	.word	0x000003cd
     324:	41004400 	.word	0x41004400
     328:	40000010 	.word	0x40000010
     32c:	40000020 	.word	0x40000020
     330:	40000040 	.word	0x40000040
     334:	40000080 	.word	0x40000080
     338:	40028000 	.word	0x40028000
     33c:	c0020000 	.word	0xc0020000
     340:	40000001 	.word	0x40000001
     344:	c0004000 	.word	0xc0004000
     348:	000001fd 	.word	0x000001fd

0000034c <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     34c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     350:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     352:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     354:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     358:	4770      	bx	lr

0000035a <atomic_leave_critical>:
     35a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     35e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     360:	f383 8810 	msr	PRIMASK, r3
}
     364:	4770      	bx	lr
	...

00000368 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     368:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     36a:	4b02      	ldr	r3, [pc, #8]	; (374 <delay_init+0xc>)
     36c:	6018      	str	r0, [r3, #0]
     36e:	4b02      	ldr	r3, [pc, #8]	; (378 <delay_init+0x10>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	20000374 	.word	0x20000374
     378:	0000050d 	.word	0x0000050d

0000037c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     37c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <delay_ms+0x14>)
     380:	681c      	ldr	r4, [r3, #0]
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x18>)
     384:	4798      	blx	r3
     386:	0001      	movs	r1, r0
     388:	0020      	movs	r0, r4
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <delay_ms+0x1c>)
     38c:	4798      	blx	r3
}
     38e:	bd10      	pop	{r4, pc}
     390:	20000374 	.word	0x20000374
     394:	000003c1 	.word	0x000003c1
     398:	00000521 	.word	0x00000521

0000039c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     39c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     39e:	4a06      	ldr	r2, [pc, #24]	; (3b8 <_sbrk+0x1c>)
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	2a00      	cmp	r2, #0
     3a4:	d004      	beq.n	3b0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3a6:	4a04      	ldr	r2, [pc, #16]	; (3b8 <_sbrk+0x1c>)
     3a8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3aa:	18c3      	adds	r3, r0, r3
     3ac:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3b0:	4902      	ldr	r1, [pc, #8]	; (3bc <_sbrk+0x20>)
     3b2:	4a01      	ldr	r2, [pc, #4]	; (3b8 <_sbrk+0x1c>)
     3b4:	6011      	str	r1, [r2, #0]
     3b6:	e7f6      	b.n	3a6 <_sbrk+0xa>
     3b8:	20000378 	.word	0x20000378
     3bc:	20002438 	.word	0x20002438

000003c0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <_get_cycles_for_ms+0x8>)
     3c2:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3c4:	4770      	bx	lr
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00005dc0 	.word	0x00005dc0

000003cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3cc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3ce:	4b07      	ldr	r3, [pc, #28]	; (3ec <_init_chip+0x20>)
     3d0:	685a      	ldr	r2, [r3, #4]
     3d2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     3d4:	4b06      	ldr	r3, [pc, #24]	; (3f0 <_init_chip+0x24>)
     3d6:	4798      	blx	r3
	_sysctrl_init_sources();
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <_init_chip+0x28>)
     3da:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     3dc:	2008      	movs	r0, #8
     3de:	4c06      	ldr	r4, [pc, #24]	; (3f8 <_init_chip+0x2c>)
     3e0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <_init_chip+0x30>)
     3e4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3e6:	20f7      	movs	r0, #247	; 0xf7
     3e8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     3ea:	bd10      	pop	{r4, pc}
     3ec:	41004000 	.word	0x41004000
     3f0:	00000441 	.word	0x00000441
     3f4:	00000461 	.word	0x00000461
     3f8:	00000401 	.word	0x00000401
     3fc:	00000495 	.word	0x00000495

00000400 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     400:	07c3      	lsls	r3, r0, #31
     402:	d509      	bpl.n	418 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <_gclk_init_generators_by_fref+0x34>)
     406:	2280      	movs	r2, #128	; 0x80
     408:	0092      	lsls	r2, r2, #2
     40a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     40c:	4a0a      	ldr	r2, [pc, #40]	; (438 <_gclk_init_generators_by_fref+0x38>)
     40e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     410:	001a      	movs	r2, r3
     412:	7853      	ldrb	r3, [r2, #1]
     414:	09db      	lsrs	r3, r3, #7
     416:	d1fc      	bne.n	412 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     418:	0703      	lsls	r3, r0, #28
     41a:	d509      	bpl.n	430 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     41c:	4b05      	ldr	r3, [pc, #20]	; (434 <_gclk_init_generators_by_fref+0x34>)
     41e:	2204      	movs	r2, #4
     420:	32ff      	adds	r2, #255	; 0xff
     422:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     424:	4a05      	ldr	r2, [pc, #20]	; (43c <_gclk_init_generators_by_fref+0x3c>)
     426:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     428:	001a      	movs	r2, r3
     42a:	7853      	ldrb	r3, [r2, #1]
     42c:	09db      	lsrs	r3, r3, #7
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	40000c00 	.word	0x40000c00
     438:	00010700 	.word	0x00010700
     43c:	00010403 	.word	0x00010403

00000440 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     440:	4b06      	ldr	r3, [pc, #24]	; (45c <_pm_init+0x1c>)
     442:	7a1a      	ldrb	r2, [r3, #8]
     444:	b2d2      	uxtb	r2, r2
     446:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     448:	7a5a      	ldrb	r2, [r3, #9]
     44a:	b2d2      	uxtb	r2, r2
     44c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     44e:	7a9a      	ldrb	r2, [r3, #10]
     450:	b2d2      	uxtb	r2, r2
     452:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     454:	7ada      	ldrb	r2, [r3, #11]
     456:	b2d2      	uxtb	r2, r2
     458:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     45a:	4770      	bx	lr
     45c:	40000400 	.word	0x40000400

00000460 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     460:	4a0b      	ldr	r2, [pc, #44]	; (490 <_sysctrl_init_sources+0x30>)
     462:	6993      	ldr	r3, [r2, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     464:	21fe      	movs	r1, #254	; 0xfe
     466:	03c9      	lsls	r1, r1, #15
     468:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     46a:	214e      	movs	r1, #78	; 0x4e
     46c:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
     46e:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     470:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     472:	392f      	subs	r1, #47	; 0x2f
     474:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     476:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     478:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     47a:	2204      	movs	r2, #4
     47c:	68cb      	ldr	r3, [r1, #12]
     47e:	421a      	tst	r2, r3
     480:	d0fc      	beq.n	47c <_sysctrl_init_sources+0x1c>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
     482:	4a03      	ldr	r2, [pc, #12]	; (490 <_sysctrl_init_sources+0x30>)
     484:	6993      	ldr	r3, [r2, #24]
     486:	2180      	movs	r1, #128	; 0x80
     488:	430b      	orrs	r3, r1
     48a:	6193      	str	r3, [r2, #24]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     48c:	4770      	bx	lr
     48e:	46c0      	nop			; (mov r8, r8)
     490:	40000800 	.word	0x40000800

00000494 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     494:	2202      	movs	r2, #2
     496:	4b19      	ldr	r3, [pc, #100]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     498:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     49a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     49c:	320e      	adds	r2, #14
     49e:	68cb      	ldr	r3, [r1, #12]
     4a0:	421a      	tst	r2, r3
     4a2:	d0fc      	beq.n	49e <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     4a4:	4a16      	ldr	r2, [pc, #88]	; (500 <_sysctrl_init_referenced_generators+0x6c>)
     4a6:	4b15      	ldr	r3, [pc, #84]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4a8:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4aa:	4b16      	ldr	r3, [pc, #88]	; (504 <_sysctrl_init_referenced_generators+0x70>)
     4ac:	681b      	ldr	r3, [r3, #0]
     4ae:	0e9b      	lsrs	r3, r3, #26
     4b0:	2b3f      	cmp	r3, #63	; 0x3f
     4b2:	d01a      	beq.n	4ea <_sysctrl_init_referenced_generators+0x56>
     4b4:	029b      	lsls	r3, r3, #10
     4b6:	2280      	movs	r2, #128	; 0x80
     4b8:	0092      	lsls	r2, r2, #2
     4ba:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     4bc:	4a0f      	ldr	r2, [pc, #60]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4be:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     4c0:	2302      	movs	r3, #2
     4c2:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     4c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     4c6:	075b      	lsls	r3, r3, #29
     4c8:	d512      	bpl.n	4f0 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ca:	0011      	movs	r1, r2
	tmp &= mask;
     4cc:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ce:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     4d0:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     4d2:	2bd0      	cmp	r3, #208	; 0xd0
     4d4:	d1fb      	bne.n	4ce <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     4d6:	4a09      	ldr	r2, [pc, #36]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4d8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     4da:	2180      	movs	r1, #128	; 0x80
     4dc:	430b      	orrs	r3, r1
     4de:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     4e0:	4a09      	ldr	r2, [pc, #36]	; (508 <_sysctrl_init_referenced_generators+0x74>)
     4e2:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     4e4:	09db      	lsrs	r3, r3, #7
     4e6:	d1fc      	bne.n	4e2 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     4e8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4ea:	23fc      	movs	r3, #252	; 0xfc
     4ec:	01db      	lsls	r3, r3, #7
     4ee:	e7e5      	b.n	4bc <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     4f0:	4902      	ldr	r1, [pc, #8]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     4f2:	2210      	movs	r2, #16
     4f4:	68cb      	ldr	r3, [r1, #12]
     4f6:	421a      	tst	r2, r3
     4f8:	d0fc      	beq.n	4f4 <_sysctrl_init_referenced_generators+0x60>
     4fa:	e7ec      	b.n	4d6 <_sysctrl_init_referenced_generators+0x42>
     4fc:	40000800 	.word	0x40000800
     500:	04010000 	.word	0x04010000
     504:	00806024 	.word	0x00806024
     508:	40000c00 	.word	0x40000c00

0000050c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     50c:	4b02      	ldr	r3, [pc, #8]	; (518 <_delay_init+0xc>)
     50e:	4a03      	ldr	r2, [pc, #12]	; (51c <_delay_init+0x10>)
     510:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     512:	2205      	movs	r2, #5
     514:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     516:	4770      	bx	lr
     518:	e000e010 	.word	0xe000e010
     51c:	00ffffff 	.word	0x00ffffff

00000520 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     520:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     522:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     524:	1e5e      	subs	r6, r3, #1
     526:	b2f6      	uxtb	r6, r6
     528:	2b00      	cmp	r3, #0
     52a:	d013      	beq.n	554 <_delay_cycles+0x34>
     52c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     52e:	4a0e      	ldr	r2, [pc, #56]	; (568 <_delay_cycles+0x48>)
     530:	4d0e      	ldr	r5, [pc, #56]	; (56c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     532:	2080      	movs	r0, #128	; 0x80
     534:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     536:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     538:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     53a:	6813      	ldr	r3, [r2, #0]
     53c:	4203      	tst	r3, r0
     53e:	d0fc      	beq.n	53a <_delay_cycles+0x1a>
	while (n--) {
     540:	3c01      	subs	r4, #1
     542:	b2e4      	uxtb	r4, r4
     544:	2cff      	cmp	r4, #255	; 0xff
     546:	d1f6      	bne.n	536 <_delay_cycles+0x16>
     548:	0633      	lsls	r3, r6, #24
     54a:	1af6      	subs	r6, r6, r3
     54c:	4b08      	ldr	r3, [pc, #32]	; (570 <_delay_cycles+0x50>)
     54e:	469c      	mov	ip, r3
     550:	4461      	add	r1, ip
     552:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     554:	4b04      	ldr	r3, [pc, #16]	; (568 <_delay_cycles+0x48>)
     556:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     558:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     55a:	0019      	movs	r1, r3
     55c:	2280      	movs	r2, #128	; 0x80
     55e:	0252      	lsls	r2, r2, #9
     560:	680b      	ldr	r3, [r1, #0]
     562:	4213      	tst	r3, r2
     564:	d0fc      	beq.n	560 <_delay_cycles+0x40>
		;
}
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	e000e010 	.word	0xe000e010
     56c:	00ffffff 	.word	0x00ffffff
     570:	ff000001 	.word	0xff000001

00000574 <eink_ite_wait_for_hrdy>:
 * to use. 
 */
/**
 * \brief Wait For Host Ready function.
 */
static void eink_ite_wait_for_hrdy(void) {
     574:	b510      	push	{r4, lr}
    ptr_eink_ite_config->wait_for_hrdy();
     576:	4b02      	ldr	r3, [pc, #8]	; (580 <eink_ite_wait_for_hrdy+0xc>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	4798      	blx	r3
}
     57e:	bd10      	pop	{r4, pc}
     580:	2000039c 	.word	0x2000039c

00000584 <gfx_eink_set_pixel>:
}

/**
 * \brief Set Pixel function.
 */
static void gfx_eink_set_pixel(eink_coordinate x_set, eink_coordinate y_set, enum eink_pixel_colour pixel_colour) {
     584:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel(x_set, y_set, pixel_colour);
     586:	4b02      	ldr	r3, [pc, #8]	; (590 <gfx_eink_set_pixel+0xc>)
     588:	681b      	ldr	r3, [r3, #0]
     58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     58c:	4798      	blx	r3
}
     58e:	bd10      	pop	{r4, pc}
     590:	20000430 	.word	0x20000430

00000594 <eink_et011tt2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_et011tt2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     594:	b5f0      	push	{r4, r5, r6, r7, lr}
     596:	46de      	mov	lr, fp
     598:	4657      	mov	r7, sl
     59a:	464e      	mov	r6, r9
     59c:	4645      	mov	r5, r8
     59e:	b5e0      	push	{r5, r6, r7, lr}
     5a0:	b08b      	sub	sp, #44	; 0x2c
     5a2:	9003      	str	r0, [sp, #12]
     5a4:	9205      	str	r2, [sp, #20]
     5a6:	0018      	movs	r0, r3
     5a8:	9307      	str	r3, [sp, #28]
     5aa:	ab14      	add	r3, sp, #80	; 0x50
     5ac:	8819      	ldrh	r1, [r3, #0]
     5ae:	9108      	str	r1, [sp, #32]
     5b0:	ab15      	add	r3, sp, #84	; 0x54
     5b2:	8819      	ldrh	r1, [r3, #0]
     5b4:	9109      	str	r1, [sp, #36]	; 0x24
     5b6:	ab16      	add	r3, sp, #88	; 0x58
     5b8:	781f      	ldrb	r7, [r3, #0]
     5ba:	ab17      	add	r3, sp, #92	; 0x5c
     5bc:	7819      	ldrb	r1, [r3, #0]
     5be:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     5c0:	428f      	cmp	r7, r1
     5c2:	d051      	beq.n	668 <eink_et011tt2_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     5c4:	2a00      	cmp	r2, #0
     5c6:	d04f      	beq.n	668 <eink_et011tt2_graphics_load_mono_image+0xd4>
     5c8:	2200      	movs	r2, #0
     5ca:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     5cc:	0003      	movs	r3, r0
     5ce:	3b01      	subs	r3, #1
     5d0:	b29b      	uxth	r3, r3
     5d2:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5d4:	4b28      	ldr	r3, [pc, #160]	; (678 <eink_et011tt2_graphics_load_mono_image+0xe4>)
     5d6:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     5d8:	46b8      	mov	r8, r7
     5da:	e033      	b.n	644 <eink_et011tt2_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5dc:	464b      	mov	r3, r9
     5de:	2b08      	cmp	r3, #8
     5e0:	d003      	beq.n	5ea <eink_et011tt2_graphics_load_mono_image+0x56>
     5e2:	464a      	mov	r2, r9
     5e4:	0021      	movs	r1, r4
     5e6:	9801      	ldr	r0, [sp, #4]
     5e8:	47d8      	blx	fp
     5ea:	3501      	adds	r5, #1
     5ec:	3401      	adds	r4, #1
     5ee:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     5f0:	2d08      	cmp	r5, #8
     5f2:	d00b      	beq.n	60c <eink_et011tt2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     5f4:	7833      	ldrb	r3, [r6, #0]
     5f6:	412b      	asrs	r3, r5
                    if(bit_value) {
     5f8:	07db      	lsls	r3, r3, #31
     5fa:	d5ef      	bpl.n	5dc <eink_et011tt2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     5fc:	2f08      	cmp	r7, #8
     5fe:	d0f4      	beq.n	5ea <eink_et011tt2_graphics_load_mono_image+0x56>
     600:	003a      	movs	r2, r7
     602:	0021      	movs	r1, r4
     604:	9801      	ldr	r0, [sp, #4]
     606:	4b1c      	ldr	r3, [pc, #112]	; (678 <eink_et011tt2_graphics_load_mono_image+0xe4>)
     608:	4798      	blx	r3
     60a:	e7ee      	b.n	5ea <eink_et011tt2_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     60c:	4643      	mov	r3, r8
     60e:	3b01      	subs	r3, #1
     610:	b29b      	uxth	r3, r3
     612:	4698      	mov	r8, r3
     614:	4653      	mov	r3, sl
     616:	3308      	adds	r3, #8
     618:	b29b      	uxth	r3, r3
     61a:	469a      	mov	sl, r3
     61c:	4643      	mov	r3, r8
     61e:	2b00      	cmp	r3, #0
     620:	d008      	beq.n	634 <eink_et011tt2_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     622:	9b02      	ldr	r3, [sp, #8]
     624:	4443      	add	r3, r8
     626:	001e      	movs	r6, r3
     628:	9b03      	ldr	r3, [sp, #12]
     62a:	469c      	mov	ip, r3
     62c:	4466      	add	r6, ip
     62e:	4654      	mov	r4, sl
     630:	2500      	movs	r5, #0
     632:	e7df      	b.n	5f4 <eink_et011tt2_graphics_load_mono_image+0x60>
     634:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     636:	9b04      	ldr	r3, [sp, #16]
     638:	3301      	adds	r3, #1
     63a:	b29b      	uxth	r3, r3
     63c:	9304      	str	r3, [sp, #16]
     63e:	9a05      	ldr	r2, [sp, #20]
     640:	429a      	cmp	r2, r3
     642:	d911      	bls.n	668 <eink_et011tt2_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     644:	9b06      	ldr	r3, [sp, #24]
     646:	1e1f      	subs	r7, r3, #0
     648:	d0f5      	beq.n	636 <eink_et011tt2_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     64a:	9b07      	ldr	r3, [sp, #28]
     64c:	9a04      	ldr	r2, [sp, #16]
     64e:	4353      	muls	r3, r2
     650:	9302      	str	r3, [sp, #8]
     652:	9b09      	ldr	r3, [sp, #36]	; 0x24
     654:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     656:	9b08      	ldr	r3, [sp, #32]
     658:	4694      	mov	ip, r2
     65a:	4463      	add	r3, ip
     65c:	b29b      	uxth	r3, r3
     65e:	9301      	str	r3, [sp, #4]
     660:	4643      	mov	r3, r8
     662:	46b8      	mov	r8, r7
     664:	001f      	movs	r7, r3
     666:	e7dc      	b.n	622 <eink_et011tt2_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     668:	b00b      	add	sp, #44	; 0x2c
     66a:	bc3c      	pop	{r2, r3, r4, r5}
     66c:	4690      	mov	r8, r2
     66e:	4699      	mov	r9, r3
     670:	46a2      	mov	sl, r4
     672:	46ab      	mov	fp, r5
     674:	bdf0      	pop	{r4, r5, r6, r7, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	00000585 	.word	0x00000585

0000067c <eink_ed013tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed013tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     67c:	b5f0      	push	{r4, r5, r6, r7, lr}
     67e:	46de      	mov	lr, fp
     680:	4657      	mov	r7, sl
     682:	464e      	mov	r6, r9
     684:	4645      	mov	r5, r8
     686:	b5e0      	push	{r5, r6, r7, lr}
     688:	b08b      	sub	sp, #44	; 0x2c
     68a:	9003      	str	r0, [sp, #12]
     68c:	9205      	str	r2, [sp, #20]
     68e:	0018      	movs	r0, r3
     690:	9307      	str	r3, [sp, #28]
     692:	ab14      	add	r3, sp, #80	; 0x50
     694:	8819      	ldrh	r1, [r3, #0]
     696:	9108      	str	r1, [sp, #32]
     698:	ab15      	add	r3, sp, #84	; 0x54
     69a:	8819      	ldrh	r1, [r3, #0]
     69c:	9109      	str	r1, [sp, #36]	; 0x24
     69e:	ab16      	add	r3, sp, #88	; 0x58
     6a0:	781f      	ldrb	r7, [r3, #0]
     6a2:	ab17      	add	r3, sp, #92	; 0x5c
     6a4:	7819      	ldrb	r1, [r3, #0]
     6a6:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     6a8:	428f      	cmp	r7, r1
     6aa:	d051      	beq.n	750 <eink_ed013tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     6ac:	2a00      	cmp	r2, #0
     6ae:	d04f      	beq.n	750 <eink_ed013tc1_graphics_load_mono_image+0xd4>
     6b0:	2200      	movs	r2, #0
     6b2:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     6b4:	0003      	movs	r3, r0
     6b6:	3b01      	subs	r3, #1
     6b8:	b29b      	uxth	r3, r3
     6ba:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6bc:	4b28      	ldr	r3, [pc, #160]	; (760 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     6be:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6c0:	46b8      	mov	r8, r7
     6c2:	e033      	b.n	72c <eink_ed013tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6c4:	464b      	mov	r3, r9
     6c6:	2b08      	cmp	r3, #8
     6c8:	d003      	beq.n	6d2 <eink_ed013tc1_graphics_load_mono_image+0x56>
     6ca:	464a      	mov	r2, r9
     6cc:	0021      	movs	r1, r4
     6ce:	9801      	ldr	r0, [sp, #4]
     6d0:	47d8      	blx	fp
     6d2:	3501      	adds	r5, #1
     6d4:	3401      	adds	r4, #1
     6d6:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     6d8:	2d08      	cmp	r5, #8
     6da:	d00b      	beq.n	6f4 <eink_ed013tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     6dc:	7833      	ldrb	r3, [r6, #0]
     6de:	412b      	asrs	r3, r5
                    if(bit_value) {
     6e0:	07db      	lsls	r3, r3, #31
     6e2:	d5ef      	bpl.n	6c4 <eink_ed013tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6e4:	2f08      	cmp	r7, #8
     6e6:	d0f4      	beq.n	6d2 <eink_ed013tc1_graphics_load_mono_image+0x56>
     6e8:	003a      	movs	r2, r7
     6ea:	0021      	movs	r1, r4
     6ec:	9801      	ldr	r0, [sp, #4]
     6ee:	4b1c      	ldr	r3, [pc, #112]	; (760 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     6f0:	4798      	blx	r3
     6f2:	e7ee      	b.n	6d2 <eink_ed013tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     6f4:	4643      	mov	r3, r8
     6f6:	3b01      	subs	r3, #1
     6f8:	b29b      	uxth	r3, r3
     6fa:	4698      	mov	r8, r3
     6fc:	4653      	mov	r3, sl
     6fe:	3308      	adds	r3, #8
     700:	b29b      	uxth	r3, r3
     702:	469a      	mov	sl, r3
     704:	4643      	mov	r3, r8
     706:	2b00      	cmp	r3, #0
     708:	d008      	beq.n	71c <eink_ed013tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     70a:	9b02      	ldr	r3, [sp, #8]
     70c:	4443      	add	r3, r8
     70e:	001e      	movs	r6, r3
     710:	9b03      	ldr	r3, [sp, #12]
     712:	469c      	mov	ip, r3
     714:	4466      	add	r6, ip
     716:	4654      	mov	r4, sl
     718:	2500      	movs	r5, #0
     71a:	e7df      	b.n	6dc <eink_ed013tc1_graphics_load_mono_image+0x60>
     71c:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     71e:	9b04      	ldr	r3, [sp, #16]
     720:	3301      	adds	r3, #1
     722:	b29b      	uxth	r3, r3
     724:	9304      	str	r3, [sp, #16]
     726:	9a05      	ldr	r2, [sp, #20]
     728:	429a      	cmp	r2, r3
     72a:	d911      	bls.n	750 <eink_ed013tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     72c:	9b06      	ldr	r3, [sp, #24]
     72e:	1e1f      	subs	r7, r3, #0
     730:	d0f5      	beq.n	71e <eink_ed013tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     732:	9b07      	ldr	r3, [sp, #28]
     734:	9a04      	ldr	r2, [sp, #16]
     736:	4353      	muls	r3, r2
     738:	9302      	str	r3, [sp, #8]
     73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     73c:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     73e:	9b08      	ldr	r3, [sp, #32]
     740:	4694      	mov	ip, r2
     742:	4463      	add	r3, ip
     744:	b29b      	uxth	r3, r3
     746:	9301      	str	r3, [sp, #4]
     748:	4643      	mov	r3, r8
     74a:	46b8      	mov	r8, r7
     74c:	001f      	movs	r7, r3
     74e:	e7dc      	b.n	70a <eink_ed013tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
     750:	b00b      	add	sp, #44	; 0x2c
     752:	bc3c      	pop	{r2, r3, r4, r5}
     754:	4690      	mov	r8, r2
     756:	4699      	mov	r9, r3
     758:	46a2      	mov	sl, r4
     75a:	46ab      	mov	fp, r5
     75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	00000585 	.word	0x00000585

00000764 <eink_ed029tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed029tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     764:	b5f0      	push	{r4, r5, r6, r7, lr}
     766:	46de      	mov	lr, fp
     768:	4657      	mov	r7, sl
     76a:	464e      	mov	r6, r9
     76c:	4645      	mov	r5, r8
     76e:	b5e0      	push	{r5, r6, r7, lr}
     770:	b089      	sub	sp, #36	; 0x24
     772:	0019      	movs	r1, r3
     774:	9305      	str	r3, [sp, #20]
     776:	ab12      	add	r3, sp, #72	; 0x48
     778:	881c      	ldrh	r4, [r3, #0]
     77a:	9400      	str	r4, [sp, #0]
     77c:	ab13      	add	r3, sp, #76	; 0x4c
     77e:	881d      	ldrh	r5, [r3, #0]
     780:	9506      	str	r5, [sp, #24]
     782:	ab14      	add	r3, sp, #80	; 0x50
     784:	781d      	ldrb	r5, [r3, #0]
     786:	46a8      	mov	r8, r5
     788:	ab15      	add	r3, sp, #84	; 0x54
     78a:	781d      	ldrb	r5, [r3, #0]
     78c:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     78e:	45a8      	cmp	r8, r5
     790:	d04e      	beq.n	830 <eink_ed029tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     792:	2a00      	cmp	r2, #0
     794:	d04c      	beq.n	830 <eink_ed029tc1_graphics_load_mono_image+0xcc>
     796:	000b      	movs	r3, r1
     798:	9103      	str	r1, [sp, #12]
     79a:	3b01      	subs	r3, #1
     79c:	b29b      	uxth	r3, r3
     79e:	3902      	subs	r1, #2
     7a0:	1ac9      	subs	r1, r1, r3
     7a2:	1841      	adds	r1, r0, r1
     7a4:	9102      	str	r1, [sp, #8]
     7a6:	46a4      	mov	ip, r4
     7a8:	4462      	add	r2, ip
     7aa:	b292      	uxth	r2, r2
     7ac:	9204      	str	r2, [sp, #16]
     7ae:	3301      	adds	r3, #1
     7b0:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7b2:	4b23      	ldr	r3, [pc, #140]	; (840 <eink_ed029tc1_graphics_load_mono_image+0xdc>)
     7b4:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7b6:	469a      	mov	sl, r3
     7b8:	e02f      	b.n	81a <eink_ed029tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7ba:	464b      	mov	r3, r9
     7bc:	2b08      	cmp	r3, #8
     7be:	d003      	beq.n	7c8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     7c0:	464a      	mov	r2, r9
     7c2:	0021      	movs	r1, r4
     7c4:	9800      	ldr	r0, [sp, #0]
     7c6:	47d8      	blx	fp
     7c8:	3501      	adds	r5, #1
     7ca:	3401      	adds	r4, #1
     7cc:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     7ce:	2d08      	cmp	r5, #8
     7d0:	d00b      	beq.n	7ea <eink_ed029tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     7d2:	7833      	ldrb	r3, [r6, #0]
     7d4:	412b      	asrs	r3, r5
                    if(bit_value) {
     7d6:	421f      	tst	r7, r3
     7d8:	d0ef      	beq.n	7ba <eink_ed029tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7da:	4643      	mov	r3, r8
     7dc:	2b08      	cmp	r3, #8
     7de:	d0f3      	beq.n	7c8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     7e0:	4642      	mov	r2, r8
     7e2:	0021      	movs	r1, r4
     7e4:	9800      	ldr	r0, [sp, #0]
     7e6:	47d0      	blx	sl
     7e8:	e7ee      	b.n	7c8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     7ea:	9b01      	ldr	r3, [sp, #4]
     7ec:	3308      	adds	r3, #8
     7ee:	b29b      	uxth	r3, r3
     7f0:	9301      	str	r3, [sp, #4]
     7f2:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     7f4:	9b02      	ldr	r3, [sp, #8]
     7f6:	429e      	cmp	r6, r3
     7f8:	d003      	beq.n	802 <eink_ed029tc1_graphics_load_mono_image+0x9e>
{
     7fa:	9c01      	ldr	r4, [sp, #4]
     7fc:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     7fe:	2701      	movs	r7, #1
     800:	e7e7      	b.n	7d2 <eink_ed029tc1_graphics_load_mono_image+0x6e>
     802:	9b02      	ldr	r3, [sp, #8]
     804:	9a03      	ldr	r2, [sp, #12]
     806:	4694      	mov	ip, r2
     808:	4463      	add	r3, ip
     80a:	9302      	str	r3, [sp, #8]
     80c:	9b00      	ldr	r3, [sp, #0]
     80e:	3301      	adds	r3, #1
     810:	b29b      	uxth	r3, r3
     812:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     814:	9a04      	ldr	r2, [sp, #16]
     816:	4293      	cmp	r3, r2
     818:	d00a      	beq.n	830 <eink_ed029tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     81a:	9b05      	ldr	r3, [sp, #20]
     81c:	2b00      	cmp	r3, #0
     81e:	d0f0      	beq.n	802 <eink_ed029tc1_graphics_load_mono_image+0x9e>
     820:	9b07      	ldr	r3, [sp, #28]
     822:	9a02      	ldr	r2, [sp, #8]
     824:	4694      	mov	ip, r2
     826:	4463      	add	r3, ip
     828:	001e      	movs	r6, r3
     82a:	9b06      	ldr	r3, [sp, #24]
     82c:	9301      	str	r3, [sp, #4]
     82e:	e7e4      	b.n	7fa <eink_ed029tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     830:	b009      	add	sp, #36	; 0x24
     832:	bc3c      	pop	{r2, r3, r4, r5}
     834:	4690      	mov	r8, r2
     836:	4699      	mov	r9, r3
     838:	46a2      	mov	sl, r4
     83a:	46ab      	mov	fp, r5
     83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     83e:	46c0      	nop			; (mov r8, r8)
     840:	00000585 	.word	0x00000585

00000844 <eink_el026tr1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_el026tr1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     844:	b5f0      	push	{r4, r5, r6, r7, lr}
     846:	b085      	sub	sp, #20
     848:	ac0a      	add	r4, sp, #40	; 0x28
     84a:	8824      	ldrh	r4, [r4, #0]
     84c:	ad0b      	add	r5, sp, #44	; 0x2c
     84e:	882d      	ldrh	r5, [r5, #0]
     850:	ae0c      	add	r6, sp, #48	; 0x30
     852:	7836      	ldrb	r6, [r6, #0]
     854:	af0d      	add	r7, sp, #52	; 0x34
     856:	783f      	ldrb	r7, [r7, #0]
    /** Calls the equivalent function but for the ED029TC1 - avoid code repetition */
    eink_ed029tc1_graphics_load_mono_image(img_array, array_size, image_width_px, image_height_bytes, x_place, y_place, foreground_colour, background_colour);
     858:	9703      	str	r7, [sp, #12]
     85a:	9602      	str	r6, [sp, #8]
     85c:	9501      	str	r5, [sp, #4]
     85e:	9400      	str	r4, [sp, #0]
     860:	4c01      	ldr	r4, [pc, #4]	; (868 <eink_el026tr1_graphics_load_mono_image+0x24>)
     862:	47a0      	blx	r4
     864:	b005      	add	sp, #20
     866:	bdf0      	pop	{r4, r5, r6, r7, pc}
     868:	00000765 	.word	0x00000765

0000086c <eink_hink_e0154a05_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_hink_e0154a05_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     86c:	b5f0      	push	{r4, r5, r6, r7, lr}
     86e:	46de      	mov	lr, fp
     870:	4657      	mov	r7, sl
     872:	464e      	mov	r6, r9
     874:	4645      	mov	r5, r8
     876:	b5e0      	push	{r5, r6, r7, lr}
     878:	b089      	sub	sp, #36	; 0x24
     87a:	0019      	movs	r1, r3
     87c:	9305      	str	r3, [sp, #20]
     87e:	ab12      	add	r3, sp, #72	; 0x48
     880:	881c      	ldrh	r4, [r3, #0]
     882:	9400      	str	r4, [sp, #0]
     884:	ab13      	add	r3, sp, #76	; 0x4c
     886:	881d      	ldrh	r5, [r3, #0]
     888:	9506      	str	r5, [sp, #24]
     88a:	ab14      	add	r3, sp, #80	; 0x50
     88c:	781d      	ldrb	r5, [r3, #0]
     88e:	46a8      	mov	r8, r5
     890:	ab15      	add	r3, sp, #84	; 0x54
     892:	781d      	ldrb	r5, [r3, #0]
     894:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     896:	45a8      	cmp	r8, r5
     898:	d04e      	beq.n	938 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     89a:	2a00      	cmp	r2, #0
     89c:	d04c      	beq.n	938 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
     89e:	000b      	movs	r3, r1
     8a0:	9103      	str	r1, [sp, #12]
     8a2:	3b01      	subs	r3, #1
     8a4:	b29b      	uxth	r3, r3
     8a6:	3902      	subs	r1, #2
     8a8:	1ac9      	subs	r1, r1, r3
     8aa:	1841      	adds	r1, r0, r1
     8ac:	9102      	str	r1, [sp, #8]
     8ae:	46a4      	mov	ip, r4
     8b0:	4462      	add	r2, ip
     8b2:	b292      	uxth	r2, r2
     8b4:	9204      	str	r2, [sp, #16]
     8b6:	3301      	adds	r3, #1
     8b8:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                        } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8ba:	4b23      	ldr	r3, [pc, #140]	; (948 <eink_hink_e0154a05_graphics_load_mono_image+0xdc>)
     8bc:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8be:	469a      	mov	sl, r3
     8c0:	e02f      	b.n	922 <eink_hink_e0154a05_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8c2:	464b      	mov	r3, r9
     8c4:	2b08      	cmp	r3, #8
     8c6:	d003      	beq.n	8d0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8c8:	464a      	mov	r2, r9
     8ca:	0021      	movs	r1, r4
     8cc:	9800      	ldr	r0, [sp, #0]
     8ce:	47d8      	blx	fp
     8d0:	3501      	adds	r5, #1
     8d2:	3401      	adds	r4, #1
     8d4:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     8d6:	2d08      	cmp	r5, #8
     8d8:	d00b      	beq.n	8f2 <eink_hink_e0154a05_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     8da:	7833      	ldrb	r3, [r6, #0]
     8dc:	412b      	asrs	r3, r5
                    if(bit_value) {
     8de:	421f      	tst	r7, r3
     8e0:	d0ef      	beq.n	8c2 <eink_hink_e0154a05_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8e2:	4643      	mov	r3, r8
     8e4:	2b08      	cmp	r3, #8
     8e6:	d0f3      	beq.n	8d0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8e8:	4642      	mov	r2, r8
     8ea:	0021      	movs	r1, r4
     8ec:	9800      	ldr	r0, [sp, #0]
     8ee:	47d0      	blx	sl
     8f0:	e7ee      	b.n	8d0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8f2:	9b01      	ldr	r3, [sp, #4]
     8f4:	3308      	adds	r3, #8
     8f6:	b29b      	uxth	r3, r3
     8f8:	9301      	str	r3, [sp, #4]
     8fa:	3e01      	subs	r6, #1
            for (j = (image_height_bytes); j > 0; j--) {
     8fc:	9b02      	ldr	r3, [sp, #8]
     8fe:	429e      	cmp	r6, r3
     900:	d003      	beq.n	90a <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
{
     902:	9c01      	ldr	r4, [sp, #4]
     904:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     906:	2701      	movs	r7, #1
     908:	e7e7      	b.n	8da <eink_hink_e0154a05_graphics_load_mono_image+0x6e>
     90a:	9b02      	ldr	r3, [sp, #8]
     90c:	9a03      	ldr	r2, [sp, #12]
     90e:	4694      	mov	ip, r2
     910:	4463      	add	r3, ip
     912:	9302      	str	r3, [sp, #8]
     914:	9b00      	ldr	r3, [sp, #0]
     916:	3301      	adds	r3, #1
     918:	b29b      	uxth	r3, r3
     91a:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     91c:	9a04      	ldr	r2, [sp, #16]
     91e:	4293      	cmp	r3, r2
     920:	d00a      	beq.n	938 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
            for (j = (image_height_bytes); j > 0; j--) {
     922:	9b05      	ldr	r3, [sp, #20]
     924:	2b00      	cmp	r3, #0
     926:	d0f0      	beq.n	90a <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
     928:	9b07      	ldr	r3, [sp, #28]
     92a:	9a02      	ldr	r2, [sp, #8]
     92c:	4694      	mov	ip, r2
     92e:	4463      	add	r3, ip
     930:	001e      	movs	r6, r3
     932:	9b06      	ldr	r3, [sp, #24]
     934:	9301      	str	r3, [sp, #4]
     936:	e7e4      	b.n	902 <eink_hink_e0154a05_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     938:	b009      	add	sp, #36	; 0x24
     93a:	bc3c      	pop	{r2, r3, r4, r5}
     93c:	4690      	mov	r8, r2
     93e:	4699      	mov	r9, r3
     940:	46a2      	mov	sl, r4
     942:	46ab      	mov	fp, r5
     944:	bdf0      	pop	{r4, r5, r6, r7, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	00000585 	.word	0x00000585

0000094c <eink_ac040tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac040tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     94c:	b5f0      	push	{r4, r5, r6, r7, lr}
     94e:	46de      	mov	lr, fp
     950:	4657      	mov	r7, sl
     952:	464e      	mov	r6, r9
     954:	4645      	mov	r5, r8
     956:	b5e0      	push	{r5, r6, r7, lr}
     958:	b089      	sub	sp, #36	; 0x24
     95a:	a912      	add	r1, sp, #72	; 0x48
     95c:	8809      	ldrh	r1, [r1, #0]
     95e:	9106      	str	r1, [sp, #24]
     960:	a913      	add	r1, sp, #76	; 0x4c
     962:	8809      	ldrh	r1, [r1, #0]
     964:	ac14      	add	r4, sp, #80	; 0x50
     966:	7827      	ldrb	r7, [r4, #0]
     968:	ac15      	add	r4, sp, #84	; 0x54
     96a:	7824      	ldrb	r4, [r4, #0]
     96c:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     96e:	42a7      	cmp	r7, r4
     970:	d04e      	beq.n	a10 <eink_ac040tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     972:	9205      	str	r2, [sp, #20]
     974:	2a00      	cmp	r2, #0
     976:	d04b      	beq.n	a10 <eink_ac040tc1_graphics_load_mono_image+0xc4>
     978:	9304      	str	r3, [sp, #16]
     97a:	9003      	str	r0, [sp, #12]
     97c:	4a28      	ldr	r2, [pc, #160]	; (a20 <eink_ac040tc1_graphics_load_mono_image+0xd4>)
     97e:	4694      	mov	ip, r2
     980:	4463      	add	r3, ip
     982:	00db      	lsls	r3, r3, #3
     984:	18cb      	adds	r3, r1, r3
     986:	2200      	movs	r2, #0
     988:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     98a:	b29b      	uxth	r3, r3
     98c:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     98e:	4b25      	ldr	r3, [pc, #148]	; (a24 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     990:	469b      	mov	fp, r3
     992:	e02c      	b.n	9ee <eink_ac040tc1_graphics_load_mono_image+0xa2>
     994:	464b      	mov	r3, r9
     996:	2b08      	cmp	r3, #8
     998:	d003      	beq.n	9a2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     99a:	464a      	mov	r2, r9
     99c:	0021      	movs	r1, r4
     99e:	9801      	ldr	r0, [sp, #4]
     9a0:	47d8      	blx	fp
     9a2:	3501      	adds	r5, #1
     9a4:	3401      	adds	r4, #1
     9a6:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     9a8:	2d08      	cmp	r5, #8
     9aa:	d00b      	beq.n	9c4 <eink_ac040tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     9ac:	7833      	ldrb	r3, [r6, #0]
     9ae:	412b      	asrs	r3, r5
                    if(bit_value) {
     9b0:	07db      	lsls	r3, r3, #31
     9b2:	d5ef      	bpl.n	994 <eink_ac040tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     9b4:	2f08      	cmp	r7, #8
     9b6:	d0f4      	beq.n	9a2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9b8:	003a      	movs	r2, r7
     9ba:	0021      	movs	r1, r4
     9bc:	9801      	ldr	r0, [sp, #4]
     9be:	4b19      	ldr	r3, [pc, #100]	; (a24 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9c0:	4798      	blx	r3
     9c2:	e7ee      	b.n	9a2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9c4:	4643      	mov	r3, r8
     9c6:	3b08      	subs	r3, #8
     9c8:	b29b      	uxth	r3, r3
     9ca:	4698      	mov	r8, r3
     9cc:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     9ce:	4556      	cmp	r6, sl
     9d0:	d002      	beq.n	9d8 <eink_ac040tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     9d2:	4644      	mov	r4, r8
     9d4:	2500      	movs	r5, #0
     9d6:	e7e9      	b.n	9ac <eink_ac040tc1_graphics_load_mono_image+0x60>
     9d8:	9b02      	ldr	r3, [sp, #8]
     9da:	3301      	adds	r3, #1
     9dc:	9302      	str	r3, [sp, #8]
     9de:	9a03      	ldr	r2, [sp, #12]
     9e0:	9904      	ldr	r1, [sp, #16]
     9e2:	468c      	mov	ip, r1
     9e4:	4462      	add	r2, ip
     9e6:	9203      	str	r2, [sp, #12]
     9e8:	9a05      	ldr	r2, [sp, #20]
     9ea:	4293      	cmp	r3, r2
     9ec:	d210      	bcs.n	a10 <eink_ac040tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     9ee:	9b04      	ldr	r3, [sp, #16]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d0f1      	beq.n	9d8 <eink_ac040tc1_graphics_load_mono_image+0x8c>
     9f4:	9e03      	ldr	r6, [sp, #12]
     9f6:	0032      	movs	r2, r6
     9f8:	469c      	mov	ip, r3
     9fa:	4462      	add	r2, ip
     9fc:	4692      	mov	sl, r2
     9fe:	9b07      	ldr	r3, [sp, #28]
     a00:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a02:	9b06      	ldr	r3, [sp, #24]
     a04:	9a02      	ldr	r2, [sp, #8]
     a06:	4694      	mov	ip, r2
     a08:	4463      	add	r3, ip
     a0a:	b29b      	uxth	r3, r3
     a0c:	9301      	str	r3, [sp, #4]
     a0e:	e7e0      	b.n	9d2 <eink_ac040tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     a10:	b009      	add	sp, #36	; 0x24
     a12:	bc3c      	pop	{r2, r3, r4, r5}
     a14:	4690      	mov	r8, r2
     a16:	4699      	mov	r9, r3
     a18:	46a2      	mov	sl, r4
     a1a:	46ab      	mov	fp, r5
     a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	00001fff 	.word	0x00001fff
     a24:	00000585 	.word	0x00000585

00000a28 <eink_ac057tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac057tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	46de      	mov	lr, fp
     a2c:	4657      	mov	r7, sl
     a2e:	464e      	mov	r6, r9
     a30:	4645      	mov	r5, r8
     a32:	b5e0      	push	{r5, r6, r7, lr}
     a34:	b089      	sub	sp, #36	; 0x24
     a36:	a912      	add	r1, sp, #72	; 0x48
     a38:	8809      	ldrh	r1, [r1, #0]
     a3a:	9106      	str	r1, [sp, #24]
     a3c:	a913      	add	r1, sp, #76	; 0x4c
     a3e:	8809      	ldrh	r1, [r1, #0]
     a40:	ac14      	add	r4, sp, #80	; 0x50
     a42:	7827      	ldrb	r7, [r4, #0]
     a44:	ac15      	add	r4, sp, #84	; 0x54
     a46:	7824      	ldrb	r4, [r4, #0]
     a48:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     a4a:	42a7      	cmp	r7, r4
     a4c:	d04e      	beq.n	aec <eink_ac057tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     a4e:	9205      	str	r2, [sp, #20]
     a50:	2a00      	cmp	r2, #0
     a52:	d04b      	beq.n	aec <eink_ac057tc1_graphics_load_mono_image+0xc4>
     a54:	9304      	str	r3, [sp, #16]
     a56:	9003      	str	r0, [sp, #12]
     a58:	4a28      	ldr	r2, [pc, #160]	; (afc <eink_ac057tc1_graphics_load_mono_image+0xd4>)
     a5a:	4694      	mov	ip, r2
     a5c:	4463      	add	r3, ip
     a5e:	00db      	lsls	r3, r3, #3
     a60:	18cb      	adds	r3, r1, r3
     a62:	2200      	movs	r2, #0
     a64:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     a66:	b29b      	uxth	r3, r3
     a68:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a6a:	4b25      	ldr	r3, [pc, #148]	; (b00 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     a6c:	469b      	mov	fp, r3
     a6e:	e02c      	b.n	aca <eink_ac057tc1_graphics_load_mono_image+0xa2>
     a70:	464b      	mov	r3, r9
     a72:	2b08      	cmp	r3, #8
     a74:	d003      	beq.n	a7e <eink_ac057tc1_graphics_load_mono_image+0x56>
     a76:	464a      	mov	r2, r9
     a78:	0021      	movs	r1, r4
     a7a:	9801      	ldr	r0, [sp, #4]
     a7c:	47d8      	blx	fp
     a7e:	3501      	adds	r5, #1
     a80:	3401      	adds	r4, #1
     a82:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     a84:	2d08      	cmp	r5, #8
     a86:	d00b      	beq.n	aa0 <eink_ac057tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     a88:	7833      	ldrb	r3, [r6, #0]
     a8a:	412b      	asrs	r3, r5
                    if(bit_value) {
     a8c:	07db      	lsls	r3, r3, #31
     a8e:	d5ef      	bpl.n	a70 <eink_ac057tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     a90:	2f08      	cmp	r7, #8
     a92:	d0f4      	beq.n	a7e <eink_ac057tc1_graphics_load_mono_image+0x56>
     a94:	003a      	movs	r2, r7
     a96:	0021      	movs	r1, r4
     a98:	9801      	ldr	r0, [sp, #4]
     a9a:	4b19      	ldr	r3, [pc, #100]	; (b00 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     a9c:	4798      	blx	r3
     a9e:	e7ee      	b.n	a7e <eink_ac057tc1_graphics_load_mono_image+0x56>
     aa0:	4643      	mov	r3, r8
     aa2:	3b08      	subs	r3, #8
     aa4:	b29b      	uxth	r3, r3
     aa6:	4698      	mov	r8, r3
     aa8:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     aaa:	4556      	cmp	r6, sl
     aac:	d002      	beq.n	ab4 <eink_ac057tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     aae:	4644      	mov	r4, r8
     ab0:	2500      	movs	r5, #0
     ab2:	e7e9      	b.n	a88 <eink_ac057tc1_graphics_load_mono_image+0x60>
     ab4:	9b02      	ldr	r3, [sp, #8]
     ab6:	3301      	adds	r3, #1
     ab8:	9302      	str	r3, [sp, #8]
     aba:	9a03      	ldr	r2, [sp, #12]
     abc:	9904      	ldr	r1, [sp, #16]
     abe:	468c      	mov	ip, r1
     ac0:	4462      	add	r2, ip
     ac2:	9203      	str	r2, [sp, #12]
     ac4:	9a05      	ldr	r2, [sp, #20]
     ac6:	4293      	cmp	r3, r2
     ac8:	d210      	bcs.n	aec <eink_ac057tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     aca:	9b04      	ldr	r3, [sp, #16]
     acc:	2b00      	cmp	r3, #0
     ace:	d0f1      	beq.n	ab4 <eink_ac057tc1_graphics_load_mono_image+0x8c>
     ad0:	9e03      	ldr	r6, [sp, #12]
     ad2:	0032      	movs	r2, r6
     ad4:	469c      	mov	ip, r3
     ad6:	4462      	add	r2, ip
     ad8:	4692      	mov	sl, r2
     ada:	9b07      	ldr	r3, [sp, #28]
     adc:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     ade:	9b06      	ldr	r3, [sp, #24]
     ae0:	9a02      	ldr	r2, [sp, #8]
     ae2:	4694      	mov	ip, r2
     ae4:	4463      	add	r3, ip
     ae6:	b29b      	uxth	r3, r3
     ae8:	9301      	str	r3, [sp, #4]
     aea:	e7e0      	b.n	aae <eink_ac057tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     aec:	b009      	add	sp, #36	; 0x24
     aee:	bc3c      	pop	{r2, r3, r4, r5}
     af0:	4690      	mov	r8, r2
     af2:	4699      	mov	r9, r3
     af4:	46a2      	mov	sl, r4
     af6:	46ab      	mov	fp, r5
     af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	00001fff 	.word	0x00001fff
     b00:	00000585 	.word	0x00000585

00000b04 <eink_ed057tc2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed057tc2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	46de      	mov	lr, fp
     b08:	4657      	mov	r7, sl
     b0a:	464e      	mov	r6, r9
     b0c:	4645      	mov	r5, r8
     b0e:	b5e0      	push	{r5, r6, r7, lr}
     b10:	b089      	sub	sp, #36	; 0x24
     b12:	a912      	add	r1, sp, #72	; 0x48
     b14:	8809      	ldrh	r1, [r1, #0]
     b16:	9106      	str	r1, [sp, #24]
     b18:	a913      	add	r1, sp, #76	; 0x4c
     b1a:	8809      	ldrh	r1, [r1, #0]
     b1c:	ac14      	add	r4, sp, #80	; 0x50
     b1e:	7827      	ldrb	r7, [r4, #0]
     b20:	ac15      	add	r4, sp, #84	; 0x54
     b22:	7824      	ldrb	r4, [r4, #0]
     b24:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     b26:	42a7      	cmp	r7, r4
     b28:	d04e      	beq.n	bc8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     b2a:	9205      	str	r2, [sp, #20]
     b2c:	2a00      	cmp	r2, #0
     b2e:	d04b      	beq.n	bc8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
     b30:	9304      	str	r3, [sp, #16]
     b32:	9003      	str	r0, [sp, #12]
     b34:	4a28      	ldr	r2, [pc, #160]	; (bd8 <eink_ed057tc2_graphics_load_mono_image+0xd4>)
     b36:	4694      	mov	ip, r2
     b38:	4463      	add	r3, ip
     b3a:	00db      	lsls	r3, r3, #3
     b3c:	18cb      	adds	r3, r1, r3
     b3e:	2200      	movs	r2, #0
     b40:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     b42:	b29b      	uxth	r3, r3
     b44:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     b46:	4b25      	ldr	r3, [pc, #148]	; (bdc <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b48:	469b      	mov	fp, r3
     b4a:	e02c      	b.n	ba6 <eink_ed057tc2_graphics_load_mono_image+0xa2>
     b4c:	464b      	mov	r3, r9
     b4e:	2b08      	cmp	r3, #8
     b50:	d003      	beq.n	b5a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b52:	464a      	mov	r2, r9
     b54:	0021      	movs	r1, r4
     b56:	9801      	ldr	r0, [sp, #4]
     b58:	47d8      	blx	fp
     b5a:	3501      	adds	r5, #1
     b5c:	3401      	adds	r4, #1
     b5e:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     b60:	2d08      	cmp	r5, #8
     b62:	d00b      	beq.n	b7c <eink_ed057tc2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     b64:	7833      	ldrb	r3, [r6, #0]
     b66:	412b      	asrs	r3, r5
                    if(bit_value) {
     b68:	07db      	lsls	r3, r3, #31
     b6a:	d5ef      	bpl.n	b4c <eink_ed057tc2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     b6c:	2f08      	cmp	r7, #8
     b6e:	d0f4      	beq.n	b5a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b70:	003a      	movs	r2, r7
     b72:	0021      	movs	r1, r4
     b74:	9801      	ldr	r0, [sp, #4]
     b76:	4b19      	ldr	r3, [pc, #100]	; (bdc <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b78:	4798      	blx	r3
     b7a:	e7ee      	b.n	b5a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b7c:	4643      	mov	r3, r8
     b7e:	3b08      	subs	r3, #8
     b80:	b29b      	uxth	r3, r3
     b82:	4698      	mov	r8, r3
     b84:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     b86:	4556      	cmp	r6, sl
     b88:	d002      	beq.n	b90 <eink_ed057tc2_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     b8a:	4644      	mov	r4, r8
     b8c:	2500      	movs	r5, #0
     b8e:	e7e9      	b.n	b64 <eink_ed057tc2_graphics_load_mono_image+0x60>
     b90:	9b02      	ldr	r3, [sp, #8]
     b92:	3301      	adds	r3, #1
     b94:	9302      	str	r3, [sp, #8]
     b96:	9a03      	ldr	r2, [sp, #12]
     b98:	9904      	ldr	r1, [sp, #16]
     b9a:	468c      	mov	ip, r1
     b9c:	4462      	add	r2, ip
     b9e:	9203      	str	r2, [sp, #12]
     ba0:	9a05      	ldr	r2, [sp, #20]
     ba2:	4293      	cmp	r3, r2
     ba4:	d210      	bcs.n	bc8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     ba6:	9b04      	ldr	r3, [sp, #16]
     ba8:	2b00      	cmp	r3, #0
     baa:	d0f1      	beq.n	b90 <eink_ed057tc2_graphics_load_mono_image+0x8c>
     bac:	9e03      	ldr	r6, [sp, #12]
     bae:	0032      	movs	r2, r6
     bb0:	469c      	mov	ip, r3
     bb2:	4462      	add	r2, ip
     bb4:	4692      	mov	sl, r2
     bb6:	9b07      	ldr	r3, [sp, #28]
     bb8:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     bba:	9b06      	ldr	r3, [sp, #24]
     bbc:	9a02      	ldr	r2, [sp, #8]
     bbe:	4694      	mov	ip, r2
     bc0:	4463      	add	r3, ip
     bc2:	b29b      	uxth	r3, r3
     bc4:	9301      	str	r3, [sp, #4]
     bc6:	e7e0      	b.n	b8a <eink_ed057tc2_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     bc8:	b009      	add	sp, #36	; 0x24
     bca:	bc3c      	pop	{r2, r3, r4, r5}
     bcc:	4690      	mov	r8, r2
     bce:	4699      	mov	r9, r3
     bd0:	46a2      	mov	sl, r4
     bd2:	46ab      	mov	fp, r5
     bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00001fff 	.word	0x00001fff
     bdc:	00000585 	.word	0x00000585

00000be0 <eink_ed028tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed028tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     be0:	b5f0      	push	{r4, r5, r6, r7, lr}
     be2:	46de      	mov	lr, fp
     be4:	4657      	mov	r7, sl
     be6:	464e      	mov	r6, r9
     be8:	4645      	mov	r5, r8
     bea:	b5e0      	push	{r5, r6, r7, lr}
     bec:	b08b      	sub	sp, #44	; 0x2c
     bee:	9003      	str	r0, [sp, #12]
     bf0:	9205      	str	r2, [sp, #20]
     bf2:	0018      	movs	r0, r3
     bf4:	9307      	str	r3, [sp, #28]
     bf6:	ab14      	add	r3, sp, #80	; 0x50
     bf8:	8819      	ldrh	r1, [r3, #0]
     bfa:	9108      	str	r1, [sp, #32]
     bfc:	ab15      	add	r3, sp, #84	; 0x54
     bfe:	8819      	ldrh	r1, [r3, #0]
     c00:	9109      	str	r1, [sp, #36]	; 0x24
     c02:	ab16      	add	r3, sp, #88	; 0x58
     c04:	781f      	ldrb	r7, [r3, #0]
     c06:	ab17      	add	r3, sp, #92	; 0x5c
     c08:	7819      	ldrb	r1, [r3, #0]
     c0a:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     c0c:	428f      	cmp	r7, r1
     c0e:	d051      	beq.n	cb4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     c10:	2a00      	cmp	r2, #0
     c12:	d04f      	beq.n	cb4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
     c14:	2200      	movs	r2, #0
     c16:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     c18:	0003      	movs	r3, r0
     c1a:	3b01      	subs	r3, #1
     c1c:	b29b      	uxth	r3, r3
     c1e:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c20:	4b28      	ldr	r3, [pc, #160]	; (cc4 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c22:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c24:	46b8      	mov	r8, r7
     c26:	e033      	b.n	c90 <eink_ed028tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c28:	464b      	mov	r3, r9
     c2a:	2b08      	cmp	r3, #8
     c2c:	d003      	beq.n	c36 <eink_ed028tc1_graphics_load_mono_image+0x56>
     c2e:	464a      	mov	r2, r9
     c30:	0021      	movs	r1, r4
     c32:	9801      	ldr	r0, [sp, #4]
     c34:	47d8      	blx	fp
     c36:	3501      	adds	r5, #1
     c38:	3401      	adds	r4, #1
     c3a:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     c3c:	2d08      	cmp	r5, #8
     c3e:	d00b      	beq.n	c58 <eink_ed028tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c40:	7833      	ldrb	r3, [r6, #0]
     c42:	412b      	asrs	r3, r5
                    if(bit_value) {
     c44:	07db      	lsls	r3, r3, #31
     c46:	d5ef      	bpl.n	c28 <eink_ed028tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c48:	2f08      	cmp	r7, #8
     c4a:	d0f4      	beq.n	c36 <eink_ed028tc1_graphics_load_mono_image+0x56>
     c4c:	003a      	movs	r2, r7
     c4e:	0021      	movs	r1, r4
     c50:	9801      	ldr	r0, [sp, #4]
     c52:	4b1c      	ldr	r3, [pc, #112]	; (cc4 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c54:	4798      	blx	r3
     c56:	e7ee      	b.n	c36 <eink_ed028tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     c58:	4643      	mov	r3, r8
     c5a:	3b01      	subs	r3, #1
     c5c:	b29b      	uxth	r3, r3
     c5e:	4698      	mov	r8, r3
     c60:	4653      	mov	r3, sl
     c62:	3308      	adds	r3, #8
     c64:	b29b      	uxth	r3, r3
     c66:	469a      	mov	sl, r3
     c68:	4643      	mov	r3, r8
     c6a:	2b00      	cmp	r3, #0
     c6c:	d008      	beq.n	c80 <eink_ed028tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c6e:	9b02      	ldr	r3, [sp, #8]
     c70:	4443      	add	r3, r8
     c72:	001e      	movs	r6, r3
     c74:	9b03      	ldr	r3, [sp, #12]
     c76:	469c      	mov	ip, r3
     c78:	4466      	add	r6, ip
     c7a:	4654      	mov	r4, sl
     c7c:	2500      	movs	r5, #0
     c7e:	e7df      	b.n	c40 <eink_ed028tc1_graphics_load_mono_image+0x60>
     c80:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     c82:	9b04      	ldr	r3, [sp, #16]
     c84:	3301      	adds	r3, #1
     c86:	b29b      	uxth	r3, r3
     c88:	9304      	str	r3, [sp, #16]
     c8a:	9a05      	ldr	r2, [sp, #20]
     c8c:	429a      	cmp	r2, r3
     c8e:	d911      	bls.n	cb4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     c90:	9b06      	ldr	r3, [sp, #24]
     c92:	1e1f      	subs	r7, r3, #0
     c94:	d0f5      	beq.n	c82 <eink_ed028tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c96:	9b07      	ldr	r3, [sp, #28]
     c98:	9a04      	ldr	r2, [sp, #16]
     c9a:	4353      	muls	r3, r2
     c9c:	9302      	str	r3, [sp, #8]
     c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ca0:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     ca2:	9b08      	ldr	r3, [sp, #32]
     ca4:	4694      	mov	ip, r2
     ca6:	4463      	add	r3, ip
     ca8:	b29b      	uxth	r3, r3
     caa:	9301      	str	r3, [sp, #4]
     cac:	4643      	mov	r3, r8
     cae:	46b8      	mov	r8, r7
     cb0:	001f      	movs	r7, r3
     cb2:	e7dc      	b.n	c6e <eink_ed028tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     cb4:	b00b      	add	sp, #44	; 0x2c
     cb6:	bc3c      	pop	{r2, r3, r4, r5}
     cb8:	4690      	mov	r8, r2
     cba:	4699      	mov	r9, r3
     cbc:	46a2      	mov	sl, r4
     cbe:	46ab      	mov	fp, r5
     cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	00000585 	.word	0x00000585

00000cc8 <eink_ed037tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed037tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cca:	46de      	mov	lr, fp
     ccc:	4657      	mov	r7, sl
     cce:	464e      	mov	r6, r9
     cd0:	4645      	mov	r5, r8
     cd2:	b5e0      	push	{r5, r6, r7, lr}
     cd4:	b089      	sub	sp, #36	; 0x24
     cd6:	0019      	movs	r1, r3
     cd8:	9305      	str	r3, [sp, #20]
     cda:	ab12      	add	r3, sp, #72	; 0x48
     cdc:	881c      	ldrh	r4, [r3, #0]
     cde:	9400      	str	r4, [sp, #0]
     ce0:	ab13      	add	r3, sp, #76	; 0x4c
     ce2:	881d      	ldrh	r5, [r3, #0]
     ce4:	9506      	str	r5, [sp, #24]
     ce6:	ab14      	add	r3, sp, #80	; 0x50
     ce8:	781d      	ldrb	r5, [r3, #0]
     cea:	46a8      	mov	r8, r5
     cec:	ab15      	add	r3, sp, #84	; 0x54
     cee:	781d      	ldrb	r5, [r3, #0]
     cf0:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     cf2:	45a8      	cmp	r8, r5
     cf4:	d04e      	beq.n	d94 <eink_ed037tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     cf6:	2a00      	cmp	r2, #0
     cf8:	d04c      	beq.n	d94 <eink_ed037tc1_graphics_load_mono_image+0xcc>
     cfa:	000b      	movs	r3, r1
     cfc:	9103      	str	r1, [sp, #12]
     cfe:	3b01      	subs	r3, #1
     d00:	b29b      	uxth	r3, r3
     d02:	3902      	subs	r1, #2
     d04:	1ac9      	subs	r1, r1, r3
     d06:	1841      	adds	r1, r0, r1
     d08:	9102      	str	r1, [sp, #8]
     d0a:	46a4      	mov	ip, r4
     d0c:	4462      	add	r2, ip
     d0e:	b292      	uxth	r2, r2
     d10:	9204      	str	r2, [sp, #16]
     d12:	3301      	adds	r3, #1
     d14:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d16:	4b23      	ldr	r3, [pc, #140]	; (da4 <eink_ed037tc1_graphics_load_mono_image+0xdc>)
     d18:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d1a:	469a      	mov	sl, r3
     d1c:	e02f      	b.n	d7e <eink_ed037tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d1e:	464b      	mov	r3, r9
     d20:	2b08      	cmp	r3, #8
     d22:	d003      	beq.n	d2c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d24:	464a      	mov	r2, r9
     d26:	0021      	movs	r1, r4
     d28:	9800      	ldr	r0, [sp, #0]
     d2a:	47d8      	blx	fp
     d2c:	3501      	adds	r5, #1
     d2e:	3401      	adds	r4, #1
     d30:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     d32:	2d08      	cmp	r5, #8
     d34:	d00b      	beq.n	d4e <eink_ed037tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d36:	7833      	ldrb	r3, [r6, #0]
     d38:	412b      	asrs	r3, r5
                    if(bit_value) {
     d3a:	421f      	tst	r7, r3
     d3c:	d0ef      	beq.n	d1e <eink_ed037tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d3e:	4643      	mov	r3, r8
     d40:	2b08      	cmp	r3, #8
     d42:	d0f3      	beq.n	d2c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d44:	4642      	mov	r2, r8
     d46:	0021      	movs	r1, r4
     d48:	9800      	ldr	r0, [sp, #0]
     d4a:	47d0      	blx	sl
     d4c:	e7ee      	b.n	d2c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d4e:	9b01      	ldr	r3, [sp, #4]
     d50:	3308      	adds	r3, #8
     d52:	b29b      	uxth	r3, r3
     d54:	9301      	str	r3, [sp, #4]
     d56:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     d58:	9b02      	ldr	r3, [sp, #8]
     d5a:	429e      	cmp	r6, r3
     d5c:	d003      	beq.n	d66 <eink_ed037tc1_graphics_load_mono_image+0x9e>
{
     d5e:	9c01      	ldr	r4, [sp, #4]
     d60:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d62:	2701      	movs	r7, #1
     d64:	e7e7      	b.n	d36 <eink_ed037tc1_graphics_load_mono_image+0x6e>
     d66:	9b02      	ldr	r3, [sp, #8]
     d68:	9a03      	ldr	r2, [sp, #12]
     d6a:	4694      	mov	ip, r2
     d6c:	4463      	add	r3, ip
     d6e:	9302      	str	r3, [sp, #8]
     d70:	9b00      	ldr	r3, [sp, #0]
     d72:	3301      	adds	r3, #1
     d74:	b29b      	uxth	r3, r3
     d76:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     d78:	9a04      	ldr	r2, [sp, #16]
     d7a:	4293      	cmp	r3, r2
     d7c:	d00a      	beq.n	d94 <eink_ed037tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     d7e:	9b05      	ldr	r3, [sp, #20]
     d80:	2b00      	cmp	r3, #0
     d82:	d0f0      	beq.n	d66 <eink_ed037tc1_graphics_load_mono_image+0x9e>
     d84:	9b07      	ldr	r3, [sp, #28]
     d86:	9a02      	ldr	r2, [sp, #8]
     d88:	4694      	mov	ip, r2
     d8a:	4463      	add	r3, ip
     d8c:	001e      	movs	r6, r3
     d8e:	9b06      	ldr	r3, [sp, #24]
     d90:	9301      	str	r3, [sp, #4]
     d92:	e7e4      	b.n	d5e <eink_ed037tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     d94:	b009      	add	sp, #36	; 0x24
     d96:	bc3c      	pop	{r2, r3, r4, r5}
     d98:	4690      	mov	r8, r2
     d9a:	4699      	mov	r9, r3
     d9c:	46a2      	mov	sl, r4
     d9e:	46ab      	mov	fp, r5
     da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	00000585 	.word	0x00000585

00000da8 <it8951_wait_for_hrdy>:
static inline void it8951_wait_for_hrdy(void)
{
#ifdef EINK_HOST_RDY
    while(!gpio_get_pin_level(EINK_HOST_RDY));
#endif
}
     da8:	4770      	bx	lr
	...

00000dac <eink_interface_init>:
 *
 * \note Initializes the display controller hardware interface, regardless
 * of driver IC, interface or display. Takes definitions from conf_eink.h.
 */
static void eink_interface_init(uint8_t f_init)
{
     dac:	b5f0      	push	{r4, r5, r6, r7, lr}
     dae:	46c6      	mov	lr, r8
     db0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     db2:	22c0      	movs	r2, #192	; 0xc0
     db4:	05d2      	lsls	r2, r2, #23
     db6:	2788      	movs	r7, #136	; 0x88
     db8:	2640      	movs	r6, #64	; 0x40
     dba:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dbc:	4b2a      	ldr	r3, [pc, #168]	; (e68 <eink_interface_init+0xbc>)
     dbe:	20a8      	movs	r0, #168	; 0xa8
     dc0:	4d2a      	ldr	r5, [pc, #168]	; (e6c <eink_interface_init+0xc0>)
     dc2:	501d      	str	r5, [r3, r0]
     dc4:	24c0      	movs	r4, #192	; 0xc0
     dc6:	0624      	lsls	r4, r4, #24
     dc8:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dca:	2101      	movs	r1, #1
     dcc:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	4f28      	ldr	r7, [pc, #160]	; (e70 <eink_interface_init+0xc4>)
     dd0:	501f      	str	r7, [r3, r0]
     dd2:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dd4:	2720      	movs	r7, #32
     dd6:	46b8      	mov	r8, r7
     dd8:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dda:	4f26      	ldr	r7, [pc, #152]	; (e74 <eink_interface_init+0xc8>)
     ddc:	629f      	str	r7, [r3, #40]	; 0x28
     dde:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     de0:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     de2:	629d      	str	r5, [r3, #40]	; 0x28
     de4:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     de6:	2510      	movs	r5, #16
     de8:	46ac      	mov	ip, r5
     dea:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dec:	4d22      	ldr	r5, [pc, #136]	; (e78 <eink_interface_init+0xcc>)
     dee:	629d      	str	r5, [r3, #40]	; 0x28
     df0:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df2:	2580      	movs	r5, #128	; 0x80
     df4:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     df6:	4f21      	ldr	r7, [pc, #132]	; (e7c <eink_interface_init+0xd0>)
     df8:	629f      	str	r7, [r3, #40]	; 0x28
     dfa:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dfc:	2494      	movs	r4, #148	; 0x94
     dfe:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e00:	2798      	movs	r7, #152	; 0x98
     e02:	51d1      	str	r1, [r2, r7]
     e04:	4644      	mov	r4, r8
     e06:	6194      	str	r4, [r2, #24]
     e08:	6196      	str	r6, [r2, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e0a:	4664      	mov	r4, ip
     e0c:	6154      	str	r4, [r2, #20]
     e0e:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e10:	3474      	adds	r4, #116	; 0x74
     e12:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e14:	4e1a      	ldr	r6, [pc, #104]	; (e80 <eink_interface_init+0xd4>)
     e16:	501e      	str	r6, [r3, r0]
     e18:	4e1a      	ldr	r6, [pc, #104]	; (e84 <eink_interface_init+0xd8>)
     e1a:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e1c:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e1e:	301f      	adds	r0, #31
     e20:	5c1c      	ldrb	r4, [r3, r0]
     e22:	2604      	movs	r6, #4
     e24:	4334      	orrs	r4, r6
     e26:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e28:	51d5      	str	r5, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e2a:	24c6      	movs	r4, #198	; 0xc6
     e2c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e2e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e30:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e32:	3c06      	subs	r4, #6
     e34:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e36:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e38:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e3a:	3c7b      	subs	r4, #123	; 0x7b
     e3c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e3e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e40:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e42:	3401      	adds	r4, #1
     e44:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e46:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e4a:	3c02      	subs	r4, #2
     e4c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e4e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e50:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e52:	3403      	adds	r4, #3
     e54:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e56:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e58:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e5a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e5e:	541a      	strb	r2, [r3, r0]
#endif
    
#ifdef EINK_BUSY
    gpio_set_pin_function(EINK_BUSY, GPIO_PIN_FUNCTION_OFF);
#endif
}
     e60:	bc04      	pop	{r2}
     e62:	4690      	mov	r8, r2
     e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	41004400 	.word	0x41004400
     e6c:	40000040 	.word	0x40000040
     e70:	40000001 	.word	0x40000001
     e74:	40000020 	.word	0x40000020
     e78:	40000010 	.word	0x40000010
     e7c:	40000080 	.word	0x40000080
     e80:	40020080 	.word	0x40020080
     e84:	c0020000 	.word	0xc0020000

00000e88 <eink_ed037tc1_set_pixel>:
{
     e88:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < ssd1677_global_instance.display_width) && (y_set >= 0) && (y_set < ssd1677_global_instance.display_height) ) {
     e8a:	4b2e      	ldr	r3, [pc, #184]	; (f44 <eink_ed037tc1_set_pixel+0xbc>)
     e8c:	889b      	ldrh	r3, [r3, #4]
     e8e:	b29b      	uxth	r3, r3
     e90:	4283      	cmp	r3, r0
     e92:	d91c      	bls.n	ece <eink_ed037tc1_set_pixel+0x46>
     e94:	4b2b      	ldr	r3, [pc, #172]	; (f44 <eink_ed037tc1_set_pixel+0xbc>)
     e96:	88db      	ldrh	r3, [r3, #6]
     e98:	b29b      	uxth	r3, r3
     e9a:	428b      	cmp	r3, r1
     e9c:	d917      	bls.n	ece <eink_ed037tc1_set_pixel+0x46>
        if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
     e9e:	4b29      	ldr	r3, [pc, #164]	; (f44 <eink_ed037tc1_set_pixel+0xbc>)
     ea0:	781b      	ldrb	r3, [r3, #0]
     ea2:	2b01      	cmp	r3, #1
     ea4:	d014      	beq.n	ed0 <eink_ed037tc1_set_pixel+0x48>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
     ea6:	4b27      	ldr	r3, [pc, #156]	; (f44 <eink_ed037tc1_set_pixel+0xbc>)
     ea8:	781b      	ldrb	r3, [r3, #0]
     eaa:	2b02      	cmp	r3, #2
     eac:	d01b      	beq.n	ee6 <eink_ed037tc1_set_pixel+0x5e>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
     eae:	4b25      	ldr	r3, [pc, #148]	; (f44 <eink_ed037tc1_set_pixel+0xbc>)
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	2b03      	cmp	r3, #3
     eb4:	d025      	beq.n	f02 <eink_ed037tc1_set_pixel+0x7a>
            x1_set = (x_set - (x_set % 8)) / 8;
     eb6:	10c3      	asrs	r3, r0, #3
            byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * y_set);
     eb8:	008c      	lsls	r4, r1, #2
     eba:	1861      	adds	r1, r4, r1
     ebc:	00cc      	lsls	r4, r1, #3
     ebe:	1a61      	subs	r1, r4, r1
     ec0:	185b      	adds	r3, r3, r1
            bit_set = 7 - (x_set % 8);
     ec2:	2107      	movs	r1, #7
     ec4:	4381      	bics	r1, r0
        switch(pixel_colour) {
     ec6:	2a00      	cmp	r2, #0
     ec8:	d027      	beq.n	f1a <eink_ed037tc1_set_pixel+0x92>
     eca:	2a01      	cmp	r2, #1
     ecc:	d030      	beq.n	f30 <eink_ed037tc1_set_pixel+0xa8>
}
     ece:	bd10      	pop	{r4, pc}
            y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - ((y_set - (y_set % 8)) / 8);
     ed0:	10cc      	asrs	r4, r1, #3
     ed2:	3321      	adds	r3, #33	; 0x21
     ed4:	1b1b      	subs	r3, r3, r4
            byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (x_set));
     ed6:	0084      	lsls	r4, r0, #2
     ed8:	1820      	adds	r0, r4, r0
     eda:	00c4      	lsls	r4, r0, #3
     edc:	1a20      	subs	r0, r4, r0
     ede:	181b      	adds	r3, r3, r0
            bit_set = y_set % 8;
     ee0:	2007      	movs	r0, #7
     ee2:	4001      	ands	r1, r0
     ee4:	e7ef      	b.n	ec6 <eink_ed037tc1_set_pixel+0x3e>
            x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((x_set - (x_set % 8)) / 8);
     ee6:	10c4      	asrs	r4, r0, #3
     ee8:	2318      	movs	r3, #24
     eea:	33ff      	adds	r3, #255	; 0xff
     eec:	1b1b      	subs	r3, r3, r4
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (y_set * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
     eee:	2423      	movs	r4, #35	; 0x23
     ef0:	4264      	negs	r4, r4
     ef2:	4361      	muls	r1, r4
     ef4:	4c14      	ldr	r4, [pc, #80]	; (f48 <eink_ed037tc1_set_pixel+0xc0>)
     ef6:	46a4      	mov	ip, r4
     ef8:	4461      	add	r1, ip
     efa:	185b      	adds	r3, r3, r1
            bit_set = x_set % 8;
     efc:	2107      	movs	r1, #7
     efe:	4001      	ands	r1, r0
     f00:	e7e1      	b.n	ec6 <eink_ed037tc1_set_pixel+0x3e>
            y1_set = (y_set - (y_set % 8)) / 8;
     f02:	10cc      	asrs	r4, r1, #3
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (x_set * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
     f04:	4b10      	ldr	r3, [pc, #64]	; (f48 <eink_ed037tc1_set_pixel+0xc0>)
     f06:	469c      	mov	ip, r3
     f08:	4464      	add	r4, ip
     f0a:	2323      	movs	r3, #35	; 0x23
     f0c:	425b      	negs	r3, r3
     f0e:	4343      	muls	r3, r0
     f10:	18e3      	adds	r3, r4, r3
            bit_set = 7 - (y_set % 8);
     f12:	2007      	movs	r0, #7
     f14:	4388      	bics	r0, r1
     f16:	0001      	movs	r1, r0
     f18:	e7d5      	b.n	ec6 <eink_ed037tc1_set_pixel+0x3e>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 0);
     f1a:	4a0c      	ldr	r2, [pc, #48]	; (f4c <eink_ed037tc1_set_pixel+0xc4>)
     f1c:	6812      	ldr	r2, [r2, #0]
     f1e:	6910      	ldr	r0, [r2, #16]
     f20:	18c3      	adds	r3, r0, r3
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
     f22:	2201      	movs	r2, #1
     f24:	408a      	lsls	r2, r1
     f26:	0011      	movs	r1, r2
     f28:	781a      	ldrb	r2, [r3, #0]
     f2a:	438a      	bics	r2, r1
     f2c:	701a      	strb	r2, [r3, #0]
     f2e:	e7ce      	b.n	ece <eink_ed037tc1_set_pixel+0x46>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 1);
     f30:	4a06      	ldr	r2, [pc, #24]	; (f4c <eink_ed037tc1_set_pixel+0xc4>)
     f32:	6812      	ldr	r2, [r2, #0]
     f34:	6910      	ldr	r0, [r2, #16]
     f36:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
     f38:	2201      	movs	r2, #1
     f3a:	408a      	lsls	r2, r1
     f3c:	7819      	ldrb	r1, [r3, #0]
     f3e:	430a      	orrs	r2, r1
     f40:	701a      	strb	r2, [r3, #0]
}
     f42:	e7c4      	b.n	ece <eink_ed037tc1_set_pixel+0x46>
     f44:	20000414 	.word	0x20000414
     f48:	0000417d 	.word	0x0000417d
     f4c:	20000430 	.word	0x20000430

00000f50 <eink_ed028tc1_set_pixel_raw>:
{    
     f50:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8177_global_instance.display_width) && (y_set >= 0) && (y_set < uc8177_global_instance.display_height) ) {
     f52:	4b4e      	ldr	r3, [pc, #312]	; (108c <eink_ed028tc1_set_pixel_raw+0x13c>)
     f54:	885b      	ldrh	r3, [r3, #2]
     f56:	b29b      	uxth	r3, r3
     f58:	4283      	cmp	r3, r0
     f5a:	d944      	bls.n	fe6 <eink_ed028tc1_set_pixel_raw+0x96>
     f5c:	4b4b      	ldr	r3, [pc, #300]	; (108c <eink_ed028tc1_set_pixel_raw+0x13c>)
     f5e:	889c      	ldrh	r4, [r3, #4]
     f60:	b2a4      	uxth	r4, r4
     f62:	428c      	cmp	r4, r1
     f64:	d93f      	bls.n	fe6 <eink_ed028tc1_set_pixel_raw+0x96>
        if ( (uc8177_global_instance.display_config.display_rotation == ROTATE_0) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180) ) {
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	2b00      	cmp	r3, #0
     f6a:	d00b      	beq.n	f84 <eink_ed028tc1_set_pixel_raw+0x34>
     f6c:	4b47      	ldr	r3, [pc, #284]	; (108c <eink_ed028tc1_set_pixel_raw+0x13c>)
     f6e:	781b      	ldrb	r3, [r3, #0]
     f70:	2b02      	cmp	r3, #2
     f72:	d007      	beq.n	f84 <eink_ed028tc1_set_pixel_raw+0x34>
            byte_set = x1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * y_set);
     f74:	1044      	asrs	r4, r0, #1
     f76:	2396      	movs	r3, #150	; 0x96
     f78:	005b      	lsls	r3, r3, #1
     f7a:	434b      	muls	r3, r1
     f7c:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
     f7e:	2101      	movs	r1, #1
     f80:	4001      	ands	r1, r0
     f82:	e006      	b.n	f92 <eink_ed028tc1_set_pixel_raw+0x42>
           byte_set = y1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * x_set);
     f84:	104c      	asrs	r4, r1, #1
     f86:	2396      	movs	r3, #150	; 0x96
     f88:	005b      	lsls	r3, r3, #1
     f8a:	4343      	muls	r3, r0
     f8c:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
     f8e:	2001      	movs	r0, #1
     f90:	4001      	ands	r1, r0
        if (odd_even_bit) {
     f92:	2900      	cmp	r1, #0
     f94:	d128      	bne.n	fe8 <eink_ed028tc1_set_pixel_raw+0x98>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_set >> 3) & 0x1));
     f96:	493e      	ldr	r1, [pc, #248]	; (1090 <eink_ed028tc1_set_pixel_raw+0x140>)
     f98:	6809      	ldr	r1, [r1, #0]
     f9a:	6909      	ldr	r1, [r1, #16]
     f9c:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     f9e:	0710      	lsls	r0, r2, #28
     fa0:	d45f      	bmi.n	1062 <eink_ed028tc1_set_pixel_raw+0x112>
        *byte &= ~(1 << bit_number);
     fa2:	780c      	ldrb	r4, [r1, #0]
     fa4:	207f      	movs	r0, #127	; 0x7f
     fa6:	4020      	ands	r0, r4
     fa8:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_set >> 2) & 0x1));
     faa:	4939      	ldr	r1, [pc, #228]	; (1090 <eink_ed028tc1_set_pixel_raw+0x140>)
     fac:	6809      	ldr	r1, [r1, #0]
     fae:	6909      	ldr	r1, [r1, #16]
     fb0:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fb2:	0750      	lsls	r0, r2, #29
     fb4:	d45b      	bmi.n	106e <eink_ed028tc1_set_pixel_raw+0x11e>
        *byte &= ~(1 << bit_number);
     fb6:	7808      	ldrb	r0, [r1, #0]
     fb8:	2440      	movs	r4, #64	; 0x40
     fba:	43a0      	bics	r0, r4
     fbc:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_set >> 1) & 0x1));
     fbe:	4934      	ldr	r1, [pc, #208]	; (1090 <eink_ed028tc1_set_pixel_raw+0x140>)
     fc0:	6809      	ldr	r1, [r1, #0]
     fc2:	6909      	ldr	r1, [r1, #16]
     fc4:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fc6:	0790      	lsls	r0, r2, #30
     fc8:	d456      	bmi.n	1078 <eink_ed028tc1_set_pixel_raw+0x128>
        *byte &= ~(1 << bit_number);
     fca:	7808      	ldrb	r0, [r1, #0]
     fcc:	2420      	movs	r4, #32
     fce:	43a0      	bics	r0, r4
     fd0:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_set & 0x1));
     fd2:	492f      	ldr	r1, [pc, #188]	; (1090 <eink_ed028tc1_set_pixel_raw+0x140>)
     fd4:	6809      	ldr	r1, [r1, #0]
     fd6:	6909      	ldr	r1, [r1, #16]
     fd8:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
     fda:	07d2      	lsls	r2, r2, #31
     fdc:	d451      	bmi.n	1082 <eink_ed028tc1_set_pixel_raw+0x132>
        *byte &= ~(1 << bit_number);
     fde:	781a      	ldrb	r2, [r3, #0]
     fe0:	2110      	movs	r1, #16
     fe2:	438a      	bics	r2, r1
     fe4:	701a      	strb	r2, [r3, #0]
}
     fe6:	bd10      	pop	{r4, pc}
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_set >> 3) & 0x1));
     fe8:	4929      	ldr	r1, [pc, #164]	; (1090 <eink_ed028tc1_set_pixel_raw+0x140>)
     fea:	6809      	ldr	r1, [r1, #0]
     fec:	6909      	ldr	r1, [r1, #16]
     fee:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     ff0:	0710      	lsls	r0, r2, #28
     ff2:	d422      	bmi.n	103a <eink_ed028tc1_set_pixel_raw+0xea>
        *byte &= ~(1 << bit_number);
     ff4:	7808      	ldrb	r0, [r1, #0]
     ff6:	2408      	movs	r4, #8
     ff8:	43a0      	bics	r0, r4
     ffa:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_set >> 2) & 0x1));
     ffc:	4924      	ldr	r1, [pc, #144]	; (1090 <eink_ed028tc1_set_pixel_raw+0x140>)
     ffe:	6809      	ldr	r1, [r1, #0]
    1000:	6909      	ldr	r1, [r1, #16]
    1002:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1004:	0750      	lsls	r0, r2, #29
    1006:	d41d      	bmi.n	1044 <eink_ed028tc1_set_pixel_raw+0xf4>
        *byte &= ~(1 << bit_number);
    1008:	7808      	ldrb	r0, [r1, #0]
    100a:	2404      	movs	r4, #4
    100c:	43a0      	bics	r0, r4
    100e:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_set >> 1) & 0x1));
    1010:	491f      	ldr	r1, [pc, #124]	; (1090 <eink_ed028tc1_set_pixel_raw+0x140>)
    1012:	6809      	ldr	r1, [r1, #0]
    1014:	6909      	ldr	r1, [r1, #16]
    1016:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1018:	0790      	lsls	r0, r2, #30
    101a:	d418      	bmi.n	104e <eink_ed028tc1_set_pixel_raw+0xfe>
        *byte &= ~(1 << bit_number);
    101c:	7808      	ldrb	r0, [r1, #0]
    101e:	2402      	movs	r4, #2
    1020:	43a0      	bics	r0, r4
    1022:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_set & 0x1));
    1024:	491a      	ldr	r1, [pc, #104]	; (1090 <eink_ed028tc1_set_pixel_raw+0x140>)
    1026:	6809      	ldr	r1, [r1, #0]
    1028:	6909      	ldr	r1, [r1, #16]
    102a:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
    102c:	07d2      	lsls	r2, r2, #31
    102e:	d413      	bmi.n	1058 <eink_ed028tc1_set_pixel_raw+0x108>
        *byte &= ~(1 << bit_number);
    1030:	781a      	ldrb	r2, [r3, #0]
    1032:	2101      	movs	r1, #1
    1034:	438a      	bics	r2, r1
    1036:	701a      	strb	r2, [r3, #0]
    1038:	e7d5      	b.n	fe6 <eink_ed028tc1_set_pixel_raw+0x96>
        *byte |= 1 << bit_number;
    103a:	7808      	ldrb	r0, [r1, #0]
    103c:	2408      	movs	r4, #8
    103e:	4320      	orrs	r0, r4
    1040:	7008      	strb	r0, [r1, #0]
    1042:	e7db      	b.n	ffc <eink_ed028tc1_set_pixel_raw+0xac>
    1044:	7808      	ldrb	r0, [r1, #0]
    1046:	2404      	movs	r4, #4
    1048:	4320      	orrs	r0, r4
    104a:	7008      	strb	r0, [r1, #0]
    104c:	e7e0      	b.n	1010 <eink_ed028tc1_set_pixel_raw+0xc0>
    104e:	7808      	ldrb	r0, [r1, #0]
    1050:	2402      	movs	r4, #2
    1052:	4320      	orrs	r0, r4
    1054:	7008      	strb	r0, [r1, #0]
    1056:	e7e5      	b.n	1024 <eink_ed028tc1_set_pixel_raw+0xd4>
    1058:	781a      	ldrb	r2, [r3, #0]
    105a:	2101      	movs	r1, #1
    105c:	430a      	orrs	r2, r1
    105e:	701a      	strb	r2, [r3, #0]
    1060:	e7c1      	b.n	fe6 <eink_ed028tc1_set_pixel_raw+0x96>
    1062:	780c      	ldrb	r4, [r1, #0]
    1064:	2080      	movs	r0, #128	; 0x80
    1066:	4240      	negs	r0, r0
    1068:	4320      	orrs	r0, r4
    106a:	7008      	strb	r0, [r1, #0]
    106c:	e79d      	b.n	faa <eink_ed028tc1_set_pixel_raw+0x5a>
    106e:	7808      	ldrb	r0, [r1, #0]
    1070:	2440      	movs	r4, #64	; 0x40
    1072:	4320      	orrs	r0, r4
    1074:	7008      	strb	r0, [r1, #0]
    1076:	e7a2      	b.n	fbe <eink_ed028tc1_set_pixel_raw+0x6e>
    1078:	7808      	ldrb	r0, [r1, #0]
    107a:	2420      	movs	r4, #32
    107c:	4320      	orrs	r0, r4
    107e:	7008      	strb	r0, [r1, #0]
    1080:	e7a7      	b.n	fd2 <eink_ed028tc1_set_pixel_raw+0x82>
    1082:	781a      	ldrb	r2, [r3, #0]
    1084:	2110      	movs	r1, #16
    1086:	430a      	orrs	r2, r1
    1088:	701a      	strb	r2, [r3, #0]
    108a:	e7ac      	b.n	fe6 <eink_ed028tc1_set_pixel_raw+0x96>
    108c:	200003b0 	.word	0x200003b0
    1090:	20000430 	.word	0x20000430

00001094 <eink_ed028tc1_set_pixel>:
{    
    1094:	b510      	push	{r4, lr}
    switch(pixel_colour) {
    1096:	2a00      	cmp	r2, #0
    1098:	d003      	beq.n	10a2 <eink_ed028tc1_set_pixel+0xe>
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0xF);
    109a:	220f      	movs	r2, #15
    109c:	4b02      	ldr	r3, [pc, #8]	; (10a8 <eink_ed028tc1_set_pixel+0x14>)
    109e:	4798      	blx	r3
}
    10a0:	bd10      	pop	{r4, pc}
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0x0);
    10a2:	4b01      	ldr	r3, [pc, #4]	; (10a8 <eink_ed028tc1_set_pixel+0x14>)
    10a4:	4798      	blx	r3
            break;
    10a6:	e7fb      	b.n	10a0 <eink_ed028tc1_set_pixel+0xc>
    10a8:	00000f51 	.word	0x00000f51

000010ac <eink_ed028tc1_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_ed028tc1_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    10ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ae:	46de      	mov	lr, fp
    10b0:	4657      	mov	r7, sl
    10b2:	464e      	mov	r6, r9
    10b4:	4645      	mov	r5, r8
    10b6:	b5e0      	push	{r5, r6, r7, lr}
    10b8:	b087      	sub	sp, #28
    10ba:	9002      	str	r0, [sp, #8]
    10bc:	4693      	mov	fp, r2
    10be:	0019      	movs	r1, r3
    10c0:	9303      	str	r3, [sp, #12]
    10c2:	ab10      	add	r3, sp, #64	; 0x40
    10c4:	881a      	ldrh	r2, [r3, #0]
    10c6:	4690      	mov	r8, r2
    10c8:	ab11      	add	r3, sp, #68	; 0x44
    10ca:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value_1, bit_value_2;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    10cc:	465a      	mov	r2, fp
    10ce:	2a00      	cmp	r2, #0
    10d0:	d034      	beq.n	113c <eink_ed028tc1_graphics_load_4bgrey_image+0x90>
    10d2:	2200      	movs	r2, #0
    10d4:	4692      	mov	sl, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
    10d6:	000a      	movs	r2, r1
    10d8:	3a01      	subs	r2, #1
    10da:	b292      	uxth	r2, r2
    10dc:	4691      	mov	r9, r2
            /* Process each pixel in byte  */
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    10de:	9304      	str	r3, [sp, #16]
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
            /* Set the pixel in the display buffer */
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    10e0:	4f1a      	ldr	r7, [pc, #104]	; (114c <eink_ed028tc1_graphics_load_4bgrey_image+0xa0>)
    10e2:	4643      	mov	r3, r8
    10e4:	9305      	str	r3, [sp, #20]
        for (j = (image_height_bytes-1); j > 0; j--) {
    10e6:	464b      	mov	r3, r9
    10e8:	464d      	mov	r5, r9
    10ea:	2b00      	cmp	r3, #0
    10ec:	d020      	beq.n	1130 <eink_ed028tc1_graphics_load_4bgrey_image+0x84>
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    10ee:	9e04      	ldr	r6, [sp, #16]
    10f0:	9b03      	ldr	r3, [sp, #12]
    10f2:	4652      	mov	r2, sl
    10f4:	4353      	muls	r3, r2
    10f6:	9a02      	ldr	r2, [sp, #8]
    10f8:	4690      	mov	r8, r2
    10fa:	4498      	add	r8, r3
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    10fc:	9b05      	ldr	r3, [sp, #20]
    10fe:	4453      	add	r3, sl
    1100:	b29b      	uxth	r3, r3
    1102:	9301      	str	r3, [sp, #4]
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    1104:	4643      	mov	r3, r8
    1106:	5d5c      	ldrb	r4, [r3, r5]
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    1108:	220f      	movs	r2, #15
    110a:	4022      	ands	r2, r4
    110c:	43d2      	mvns	r2, r2
    110e:	b2d2      	uxtb	r2, r2
    1110:	0031      	movs	r1, r6
    1112:	9801      	ldr	r0, [sp, #4]
    1114:	47b8      	blx	r7
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    1116:	0924      	lsrs	r4, r4, #4
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value_2));
    1118:	43e2      	mvns	r2, r4
    111a:	b2d2      	uxtb	r2, r2
    111c:	1c71      	adds	r1, r6, #1
    111e:	b289      	uxth	r1, r1
    1120:	9801      	ldr	r0, [sp, #4]
    1122:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    1124:	3d01      	subs	r5, #1
    1126:	b2ad      	uxth	r5, r5
    1128:	3602      	adds	r6, #2
    112a:	b2b6      	uxth	r6, r6
    112c:	2d00      	cmp	r5, #0
    112e:	d1e9      	bne.n	1104 <eink_ed028tc1_graphics_load_4bgrey_image+0x58>
    for (i = 0; i < image_width_px; i++) {
    1130:	4653      	mov	r3, sl
    1132:	3301      	adds	r3, #1
    1134:	b29b      	uxth	r3, r3
    1136:	469a      	mov	sl, r3
    1138:	459b      	cmp	fp, r3
    113a:	d8d4      	bhi.n	10e6 <eink_ed028tc1_graphics_load_4bgrey_image+0x3a>
            m += 2;
        }
    }
    return;
    113c:	b007      	add	sp, #28
    113e:	bc3c      	pop	{r2, r3, r4, r5}
    1140:	4690      	mov	r8, r2
    1142:	4699      	mov	r9, r3
    1144:	46a2      	mov	sl, r4
    1146:	46ab      	mov	fp, r5
    1148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	00000f51 	.word	0x00000f51

00001150 <eink_ed057tc2_set_pixel>:
{
    1150:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1152:	4b36      	ldr	r3, [pc, #216]	; (122c <eink_ed057tc2_set_pixel+0xdc>)
    1154:	889b      	ldrh	r3, [r3, #4]
    1156:	b29b      	uxth	r3, r3
    1158:	4283      	cmp	r3, r0
    115a:	d919      	bls.n	1190 <eink_ed057tc2_set_pixel+0x40>
    115c:	4b33      	ldr	r3, [pc, #204]	; (122c <eink_ed057tc2_set_pixel+0xdc>)
    115e:	88db      	ldrh	r3, [r3, #6]
    1160:	b29b      	uxth	r3, r3
    1162:	428b      	cmp	r3, r1
    1164:	d914      	bls.n	1190 <eink_ed057tc2_set_pixel+0x40>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    1166:	4b31      	ldr	r3, [pc, #196]	; (122c <eink_ed057tc2_set_pixel+0xdc>)
    1168:	785b      	ldrb	r3, [r3, #1]
    116a:	2b01      	cmp	r3, #1
    116c:	d011      	beq.n	1192 <eink_ed057tc2_set_pixel+0x42>
    116e:	4b2f      	ldr	r3, [pc, #188]	; (122c <eink_ed057tc2_set_pixel+0xdc>)
    1170:	785b      	ldrb	r3, [r3, #1]
    1172:	2b03      	cmp	r3, #3
    1174:	d00d      	beq.n	1192 <eink_ed057tc2_set_pixel+0x42>
            byte_set = x1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * y_set);
    1176:	1044      	asrs	r4, r0, #1
    1178:	2396      	movs	r3, #150	; 0x96
    117a:	005b      	lsls	r3, r3, #1
    117c:	434b      	muls	r3, r1
    117e:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    1180:	2101      	movs	r1, #1
    1182:	4008      	ands	r0, r1
        if (odd_even_bit) {
    1184:	2800      	cmp	r0, #0
    1186:	d02c      	beq.n	11e2 <eink_ed057tc2_set_pixel+0x92>
            switch(pixel_colour) {
    1188:	2a00      	cmp	r2, #0
    118a:	d00a      	beq.n	11a2 <eink_ed057tc2_set_pixel+0x52>
    118c:	2a01      	cmp	r2, #1
    118e:	d018      	beq.n	11c2 <eink_ed057tc2_set_pixel+0x72>
}
    1190:	bd10      	pop	{r4, pc}
           byte_set = y1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * x_set);
    1192:	104c      	asrs	r4, r1, #1
    1194:	2396      	movs	r3, #150	; 0x96
    1196:	005b      	lsls	r3, r3, #1
    1198:	4343      	muls	r3, r0
    119a:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    119c:	2001      	movs	r0, #1
    119e:	4008      	ands	r0, r1
    11a0:	e7f0      	b.n	1184 <eink_ed057tc2_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    11a2:	4823      	ldr	r0, [pc, #140]	; (1230 <eink_ed057tc2_set_pixel+0xe0>)
    11a4:	6802      	ldr	r2, [r0, #0]
    11a6:	6912      	ldr	r2, [r2, #16]
    11a8:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    11aa:	7811      	ldrb	r1, [r2, #0]
    11ac:	2402      	movs	r4, #2
    11ae:	43a1      	bics	r1, r4
    11b0:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    11b2:	6802      	ldr	r2, [r0, #0]
    11b4:	6911      	ldr	r1, [r2, #16]
    11b6:	18cb      	adds	r3, r1, r3
    11b8:	781a      	ldrb	r2, [r3, #0]
    11ba:	2101      	movs	r1, #1
    11bc:	438a      	bics	r2, r1
    11be:	701a      	strb	r2, [r3, #0]
    11c0:	e7e6      	b.n	1190 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    11c2:	481b      	ldr	r0, [pc, #108]	; (1230 <eink_ed057tc2_set_pixel+0xe0>)
    11c4:	6802      	ldr	r2, [r0, #0]
    11c6:	6912      	ldr	r2, [r2, #16]
    11c8:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    11ca:	7811      	ldrb	r1, [r2, #0]
    11cc:	2402      	movs	r4, #2
    11ce:	4321      	orrs	r1, r4
    11d0:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    11d2:	6802      	ldr	r2, [r0, #0]
    11d4:	6911      	ldr	r1, [r2, #16]
    11d6:	18cb      	adds	r3, r1, r3
    11d8:	781a      	ldrb	r2, [r3, #0]
    11da:	2101      	movs	r1, #1
    11dc:	430a      	orrs	r2, r1
    11de:	701a      	strb	r2, [r3, #0]
    11e0:	e7d6      	b.n	1190 <eink_ed057tc2_set_pixel+0x40>
            switch(pixel_colour) {
    11e2:	2a00      	cmp	r2, #0
    11e4:	d011      	beq.n	120a <eink_ed057tc2_set_pixel+0xba>
    11e6:	2a01      	cmp	r2, #1
    11e8:	d1d2      	bne.n	1190 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    11ea:	4811      	ldr	r0, [pc, #68]	; (1230 <eink_ed057tc2_set_pixel+0xe0>)
    11ec:	6802      	ldr	r2, [r0, #0]
    11ee:	6912      	ldr	r2, [r2, #16]
    11f0:	18d2      	adds	r2, r2, r3
    11f2:	7811      	ldrb	r1, [r2, #0]
    11f4:	2420      	movs	r4, #32
    11f6:	4321      	orrs	r1, r4
    11f8:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    11fa:	6802      	ldr	r2, [r0, #0]
    11fc:	6911      	ldr	r1, [r2, #16]
    11fe:	18cb      	adds	r3, r1, r3
    1200:	781a      	ldrb	r2, [r3, #0]
    1202:	2110      	movs	r1, #16
    1204:	430a      	orrs	r2, r1
    1206:	701a      	strb	r2, [r3, #0]
}
    1208:	e7c2      	b.n	1190 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    120a:	4809      	ldr	r0, [pc, #36]	; (1230 <eink_ed057tc2_set_pixel+0xe0>)
    120c:	6802      	ldr	r2, [r0, #0]
    120e:	6912      	ldr	r2, [r2, #16]
    1210:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1212:	7811      	ldrb	r1, [r2, #0]
    1214:	2420      	movs	r4, #32
    1216:	43a1      	bics	r1, r4
    1218:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    121a:	6802      	ldr	r2, [r0, #0]
    121c:	6911      	ldr	r1, [r2, #16]
    121e:	18cb      	adds	r3, r1, r3
    1220:	781a      	ldrb	r2, [r3, #0]
    1222:	2110      	movs	r1, #16
    1224:	438a      	bics	r2, r1
    1226:	701a      	strb	r2, [r3, #0]
    1228:	e7b2      	b.n	1190 <eink_ed057tc2_set_pixel+0x40>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	20000408 	.word	0x20000408
    1230:	20000430 	.word	0x20000430

00001234 <eink_ac057tc1_set_pixel>:
{
    1234:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1236:	4bd0      	ldr	r3, [pc, #832]	; (1578 <eink_ac057tc1_set_pixel+0x344>)
    1238:	889b      	ldrh	r3, [r3, #4]
    123a:	b29b      	uxth	r3, r3
    123c:	4283      	cmp	r3, r0
    123e:	d93a      	bls.n	12b6 <eink_ac057tc1_set_pixel+0x82>
    1240:	4bcd      	ldr	r3, [pc, #820]	; (1578 <eink_ac057tc1_set_pixel+0x344>)
    1242:	88db      	ldrh	r3, [r3, #6]
    1244:	b29b      	uxth	r3, r3
    1246:	428b      	cmp	r3, r1
    1248:	d935      	bls.n	12b6 <eink_ac057tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    124a:	4bcb      	ldr	r3, [pc, #812]	; (1578 <eink_ac057tc1_set_pixel+0x344>)
    124c:	785b      	ldrb	r3, [r3, #1]
    124e:	2b01      	cmp	r3, #1
    1250:	d013      	beq.n	127a <eink_ac057tc1_set_pixel+0x46>
    1252:	4bc9      	ldr	r3, [pc, #804]	; (1578 <eink_ac057tc1_set_pixel+0x344>)
    1254:	785b      	ldrb	r3, [r3, #1]
    1256:	2b03      	cmp	r3, #3
    1258:	d00f      	beq.n	127a <eink_ac057tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * y_set);
    125a:	1044      	asrs	r4, r0, #1
    125c:	2396      	movs	r3, #150	; 0x96
    125e:	005b      	lsls	r3, r3, #1
    1260:	434b      	muls	r3, r1
    1262:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    1264:	2101      	movs	r1, #1
    1266:	4008      	ands	r0, r1
        if (odd_even_bit) {
    1268:	2800      	cmp	r0, #0
    126a:	d100      	bne.n	126e <eink_ac057tc1_set_pixel+0x3a>
    126c:	e0c5      	b.n	13fa <eink_ac057tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    126e:	2a07      	cmp	r2, #7
    1270:	d821      	bhi.n	12b6 <eink_ac057tc1_set_pixel+0x82>
    1272:	0092      	lsls	r2, r2, #2
    1274:	49c1      	ldr	r1, [pc, #772]	; (157c <eink_ac057tc1_set_pixel+0x348>)
    1276:	588a      	ldr	r2, [r1, r2]
    1278:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * x_set);
    127a:	104c      	asrs	r4, r1, #1
    127c:	2396      	movs	r3, #150	; 0x96
    127e:	005b      	lsls	r3, r3, #1
    1280:	4343      	muls	r3, r0
    1282:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    1284:	2001      	movs	r0, #1
    1286:	4008      	ands	r0, r1
    1288:	e7ee      	b.n	1268 <eink_ac057tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    128a:	49bd      	ldr	r1, [pc, #756]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    128c:	680a      	ldr	r2, [r1, #0]
    128e:	6912      	ldr	r2, [r2, #16]
    1290:	18d2      	adds	r2, r2, r3
    1292:	7810      	ldrb	r0, [r2, #0]
    1294:	2404      	movs	r4, #4
    1296:	43a0      	bics	r0, r4
    1298:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    129a:	680a      	ldr	r2, [r1, #0]
    129c:	6912      	ldr	r2, [r2, #16]
    129e:	18d2      	adds	r2, r2, r3
    12a0:	7810      	ldrb	r0, [r2, #0]
    12a2:	3c02      	subs	r4, #2
    12a4:	43a0      	bics	r0, r4
    12a6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    12a8:	680a      	ldr	r2, [r1, #0]
    12aa:	6911      	ldr	r1, [r2, #16]
    12ac:	18cb      	adds	r3, r1, r3
    12ae:	781a      	ldrb	r2, [r3, #0]
    12b0:	2101      	movs	r1, #1
    12b2:	438a      	bics	r2, r1
    12b4:	701a      	strb	r2, [r3, #0]
}
    12b6:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    12b8:	49b1      	ldr	r1, [pc, #708]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    12ba:	680a      	ldr	r2, [r1, #0]
    12bc:	6912      	ldr	r2, [r2, #16]
    12be:	18d2      	adds	r2, r2, r3
    12c0:	7810      	ldrb	r0, [r2, #0]
    12c2:	2404      	movs	r4, #4
    12c4:	43a0      	bics	r0, r4
    12c6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    12c8:	680a      	ldr	r2, [r1, #0]
    12ca:	6912      	ldr	r2, [r2, #16]
    12cc:	18d2      	adds	r2, r2, r3
    12ce:	7810      	ldrb	r0, [r2, #0]
    12d0:	3c02      	subs	r4, #2
    12d2:	43a0      	bics	r0, r4
    12d4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    12d6:	680a      	ldr	r2, [r1, #0]
    12d8:	6911      	ldr	r1, [r2, #16]
    12da:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    12dc:	781a      	ldrb	r2, [r3, #0]
    12de:	2101      	movs	r1, #1
    12e0:	430a      	orrs	r2, r1
    12e2:	701a      	strb	r2, [r3, #0]
    12e4:	e7e7      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    12e6:	49a6      	ldr	r1, [pc, #664]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    12e8:	680a      	ldr	r2, [r1, #0]
    12ea:	6912      	ldr	r2, [r2, #16]
    12ec:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    12ee:	7810      	ldrb	r0, [r2, #0]
    12f0:	2404      	movs	r4, #4
    12f2:	43a0      	bics	r0, r4
    12f4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    12f6:	680a      	ldr	r2, [r1, #0]
    12f8:	6912      	ldr	r2, [r2, #16]
    12fa:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    12fc:	7810      	ldrb	r0, [r2, #0]
    12fe:	2402      	movs	r4, #2
    1300:	4320      	orrs	r0, r4
    1302:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1304:	680a      	ldr	r2, [r1, #0]
    1306:	6911      	ldr	r1, [r2, #16]
    1308:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    130a:	781a      	ldrb	r2, [r3, #0]
    130c:	2101      	movs	r1, #1
    130e:	438a      	bics	r2, r1
    1310:	701a      	strb	r2, [r3, #0]
    1312:	e7d0      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1314:	499a      	ldr	r1, [pc, #616]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    1316:	680a      	ldr	r2, [r1, #0]
    1318:	6912      	ldr	r2, [r2, #16]
    131a:	18d2      	adds	r2, r2, r3
    131c:	7810      	ldrb	r0, [r2, #0]
    131e:	2404      	movs	r4, #4
    1320:	43a0      	bics	r0, r4
    1322:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1324:	680a      	ldr	r2, [r1, #0]
    1326:	6912      	ldr	r2, [r2, #16]
    1328:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    132a:	7810      	ldrb	r0, [r2, #0]
    132c:	2402      	movs	r4, #2
    132e:	4320      	orrs	r0, r4
    1330:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1332:	680a      	ldr	r2, [r1, #0]
    1334:	6911      	ldr	r1, [r2, #16]
    1336:	18cb      	adds	r3, r1, r3
    1338:	781a      	ldrb	r2, [r3, #0]
    133a:	2101      	movs	r1, #1
    133c:	430a      	orrs	r2, r1
    133e:	701a      	strb	r2, [r3, #0]
    1340:	e7b9      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1342:	498f      	ldr	r1, [pc, #572]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    1344:	680a      	ldr	r2, [r1, #0]
    1346:	6912      	ldr	r2, [r2, #16]
    1348:	18d2      	adds	r2, r2, r3
    134a:	7810      	ldrb	r0, [r2, #0]
    134c:	2404      	movs	r4, #4
    134e:	4320      	orrs	r0, r4
    1350:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1352:	680a      	ldr	r2, [r1, #0]
    1354:	6912      	ldr	r2, [r2, #16]
    1356:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1358:	7810      	ldrb	r0, [r2, #0]
    135a:	2402      	movs	r4, #2
    135c:	43a0      	bics	r0, r4
    135e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1360:	680a      	ldr	r2, [r1, #0]
    1362:	6911      	ldr	r1, [r2, #16]
    1364:	18cb      	adds	r3, r1, r3
    1366:	781a      	ldrb	r2, [r3, #0]
    1368:	2101      	movs	r1, #1
    136a:	438a      	bics	r2, r1
    136c:	701a      	strb	r2, [r3, #0]
    136e:	e7a2      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1370:	4983      	ldr	r1, [pc, #524]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    1372:	680a      	ldr	r2, [r1, #0]
    1374:	6912      	ldr	r2, [r2, #16]
    1376:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1378:	7810      	ldrb	r0, [r2, #0]
    137a:	2404      	movs	r4, #4
    137c:	4320      	orrs	r0, r4
    137e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1380:	680a      	ldr	r2, [r1, #0]
    1382:	6912      	ldr	r2, [r2, #16]
    1384:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1386:	7810      	ldrb	r0, [r2, #0]
    1388:	2402      	movs	r4, #2
    138a:	43a0      	bics	r0, r4
    138c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    138e:	680a      	ldr	r2, [r1, #0]
    1390:	6911      	ldr	r1, [r2, #16]
    1392:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1394:	781a      	ldrb	r2, [r3, #0]
    1396:	2101      	movs	r1, #1
    1398:	430a      	orrs	r2, r1
    139a:	701a      	strb	r2, [r3, #0]
    139c:	e78b      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    139e:	4978      	ldr	r1, [pc, #480]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    13a0:	680a      	ldr	r2, [r1, #0]
    13a2:	6912      	ldr	r2, [r2, #16]
    13a4:	18d2      	adds	r2, r2, r3
    13a6:	7810      	ldrb	r0, [r2, #0]
    13a8:	2404      	movs	r4, #4
    13aa:	4320      	orrs	r0, r4
    13ac:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    13ae:	680a      	ldr	r2, [r1, #0]
    13b0:	6912      	ldr	r2, [r2, #16]
    13b2:	18d2      	adds	r2, r2, r3
    13b4:	7810      	ldrb	r0, [r2, #0]
    13b6:	2402      	movs	r4, #2
    13b8:	4320      	orrs	r0, r4
    13ba:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    13bc:	680a      	ldr	r2, [r1, #0]
    13be:	6911      	ldr	r1, [r2, #16]
    13c0:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    13c2:	781a      	ldrb	r2, [r3, #0]
    13c4:	2101      	movs	r1, #1
    13c6:	438a      	bics	r2, r1
    13c8:	701a      	strb	r2, [r3, #0]
    13ca:	e774      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    13cc:	496c      	ldr	r1, [pc, #432]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    13ce:	680a      	ldr	r2, [r1, #0]
    13d0:	6912      	ldr	r2, [r2, #16]
    13d2:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    13d4:	7810      	ldrb	r0, [r2, #0]
    13d6:	2404      	movs	r4, #4
    13d8:	4320      	orrs	r0, r4
    13da:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    13dc:	680a      	ldr	r2, [r1, #0]
    13de:	6912      	ldr	r2, [r2, #16]
    13e0:	18d2      	adds	r2, r2, r3
    13e2:	7810      	ldrb	r0, [r2, #0]
    13e4:	2402      	movs	r4, #2
    13e6:	4320      	orrs	r0, r4
    13e8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    13ea:	680a      	ldr	r2, [r1, #0]
    13ec:	6911      	ldr	r1, [r2, #16]
    13ee:	18cb      	adds	r3, r1, r3
    13f0:	781a      	ldrb	r2, [r3, #0]
    13f2:	2101      	movs	r1, #1
    13f4:	430a      	orrs	r2, r1
    13f6:	701a      	strb	r2, [r3, #0]
    13f8:	e75d      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
            switch(pixel_colour) {
    13fa:	2a07      	cmp	r2, #7
    13fc:	d900      	bls.n	1400 <eink_ac057tc1_set_pixel+0x1cc>
    13fe:	e75a      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
    1400:	0092      	lsls	r2, r2, #2
    1402:	4960      	ldr	r1, [pc, #384]	; (1584 <eink_ac057tc1_set_pixel+0x350>)
    1404:	588a      	ldr	r2, [r1, r2]
    1406:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1408:	495d      	ldr	r1, [pc, #372]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    140a:	680a      	ldr	r2, [r1, #0]
    140c:	6912      	ldr	r2, [r2, #16]
    140e:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1410:	7810      	ldrb	r0, [r2, #0]
    1412:	2440      	movs	r4, #64	; 0x40
    1414:	43a0      	bics	r0, r4
    1416:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1418:	680a      	ldr	r2, [r1, #0]
    141a:	6912      	ldr	r2, [r2, #16]
    141c:	18d2      	adds	r2, r2, r3
    141e:	7810      	ldrb	r0, [r2, #0]
    1420:	3c20      	subs	r4, #32
    1422:	43a0      	bics	r0, r4
    1424:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1426:	680a      	ldr	r2, [r1, #0]
    1428:	6911      	ldr	r1, [r2, #16]
    142a:	18cb      	adds	r3, r1, r3
    142c:	781a      	ldrb	r2, [r3, #0]
    142e:	2110      	movs	r1, #16
    1430:	438a      	bics	r2, r1
    1432:	701a      	strb	r2, [r3, #0]
    1434:	e73f      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1436:	4952      	ldr	r1, [pc, #328]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    1438:	680a      	ldr	r2, [r1, #0]
    143a:	6912      	ldr	r2, [r2, #16]
    143c:	18d2      	adds	r2, r2, r3
    143e:	7810      	ldrb	r0, [r2, #0]
    1440:	2440      	movs	r4, #64	; 0x40
    1442:	43a0      	bics	r0, r4
    1444:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1446:	680a      	ldr	r2, [r1, #0]
    1448:	6912      	ldr	r2, [r2, #16]
    144a:	18d2      	adds	r2, r2, r3
    144c:	7810      	ldrb	r0, [r2, #0]
    144e:	3c20      	subs	r4, #32
    1450:	43a0      	bics	r0, r4
    1452:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1454:	680a      	ldr	r2, [r1, #0]
    1456:	6911      	ldr	r1, [r2, #16]
    1458:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    145a:	781a      	ldrb	r2, [r3, #0]
    145c:	2110      	movs	r1, #16
    145e:	430a      	orrs	r2, r1
    1460:	701a      	strb	r2, [r3, #0]
    1462:	e728      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1464:	4946      	ldr	r1, [pc, #280]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    1466:	680a      	ldr	r2, [r1, #0]
    1468:	6912      	ldr	r2, [r2, #16]
    146a:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    146c:	7810      	ldrb	r0, [r2, #0]
    146e:	2440      	movs	r4, #64	; 0x40
    1470:	43a0      	bics	r0, r4
    1472:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1474:	680a      	ldr	r2, [r1, #0]
    1476:	6912      	ldr	r2, [r2, #16]
    1478:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    147a:	7810      	ldrb	r0, [r2, #0]
    147c:	2420      	movs	r4, #32
    147e:	4320      	orrs	r0, r4
    1480:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1482:	680a      	ldr	r2, [r1, #0]
    1484:	6911      	ldr	r1, [r2, #16]
    1486:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1488:	781a      	ldrb	r2, [r3, #0]
    148a:	2110      	movs	r1, #16
    148c:	438a      	bics	r2, r1
    148e:	701a      	strb	r2, [r3, #0]
    1490:	e711      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1492:	493b      	ldr	r1, [pc, #236]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    1494:	680a      	ldr	r2, [r1, #0]
    1496:	6912      	ldr	r2, [r2, #16]
    1498:	18d2      	adds	r2, r2, r3
    149a:	7810      	ldrb	r0, [r2, #0]
    149c:	2440      	movs	r4, #64	; 0x40
    149e:	43a0      	bics	r0, r4
    14a0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    14a2:	680a      	ldr	r2, [r1, #0]
    14a4:	6912      	ldr	r2, [r2, #16]
    14a6:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    14a8:	7810      	ldrb	r0, [r2, #0]
    14aa:	2420      	movs	r4, #32
    14ac:	4320      	orrs	r0, r4
    14ae:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    14b0:	680a      	ldr	r2, [r1, #0]
    14b2:	6911      	ldr	r1, [r2, #16]
    14b4:	18cb      	adds	r3, r1, r3
    14b6:	781a      	ldrb	r2, [r3, #0]
    14b8:	2110      	movs	r1, #16
    14ba:	430a      	orrs	r2, r1
    14bc:	701a      	strb	r2, [r3, #0]
    14be:	e6fa      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    14c0:	492f      	ldr	r1, [pc, #188]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    14c2:	680a      	ldr	r2, [r1, #0]
    14c4:	6912      	ldr	r2, [r2, #16]
    14c6:	18d2      	adds	r2, r2, r3
    14c8:	7810      	ldrb	r0, [r2, #0]
    14ca:	2440      	movs	r4, #64	; 0x40
    14cc:	4320      	orrs	r0, r4
    14ce:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    14d0:	680a      	ldr	r2, [r1, #0]
    14d2:	6912      	ldr	r2, [r2, #16]
    14d4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    14d6:	7810      	ldrb	r0, [r2, #0]
    14d8:	2420      	movs	r4, #32
    14da:	43a0      	bics	r0, r4
    14dc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    14de:	680a      	ldr	r2, [r1, #0]
    14e0:	6911      	ldr	r1, [r2, #16]
    14e2:	18cb      	adds	r3, r1, r3
    14e4:	781a      	ldrb	r2, [r3, #0]
    14e6:	2110      	movs	r1, #16
    14e8:	438a      	bics	r2, r1
    14ea:	701a      	strb	r2, [r3, #0]
    14ec:	e6e3      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    14ee:	4924      	ldr	r1, [pc, #144]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    14f0:	680a      	ldr	r2, [r1, #0]
    14f2:	6912      	ldr	r2, [r2, #16]
    14f4:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    14f6:	7810      	ldrb	r0, [r2, #0]
    14f8:	2440      	movs	r4, #64	; 0x40
    14fa:	4320      	orrs	r0, r4
    14fc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    14fe:	680a      	ldr	r2, [r1, #0]
    1500:	6912      	ldr	r2, [r2, #16]
    1502:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1504:	7810      	ldrb	r0, [r2, #0]
    1506:	2420      	movs	r4, #32
    1508:	43a0      	bics	r0, r4
    150a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    150c:	680a      	ldr	r2, [r1, #0]
    150e:	6911      	ldr	r1, [r2, #16]
    1510:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1512:	781a      	ldrb	r2, [r3, #0]
    1514:	2110      	movs	r1, #16
    1516:	430a      	orrs	r2, r1
    1518:	701a      	strb	r2, [r3, #0]
    151a:	e6cc      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    151c:	4918      	ldr	r1, [pc, #96]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    151e:	680a      	ldr	r2, [r1, #0]
    1520:	6912      	ldr	r2, [r2, #16]
    1522:	18d2      	adds	r2, r2, r3
    1524:	7810      	ldrb	r0, [r2, #0]
    1526:	2440      	movs	r4, #64	; 0x40
    1528:	4320      	orrs	r0, r4
    152a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    152c:	680a      	ldr	r2, [r1, #0]
    152e:	6912      	ldr	r2, [r2, #16]
    1530:	18d2      	adds	r2, r2, r3
    1532:	7810      	ldrb	r0, [r2, #0]
    1534:	2420      	movs	r4, #32
    1536:	4320      	orrs	r0, r4
    1538:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    153a:	680a      	ldr	r2, [r1, #0]
    153c:	6911      	ldr	r1, [r2, #16]
    153e:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1540:	781a      	ldrb	r2, [r3, #0]
    1542:	2110      	movs	r1, #16
    1544:	438a      	bics	r2, r1
    1546:	701a      	strb	r2, [r3, #0]
    1548:	e6b5      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    154a:	490d      	ldr	r1, [pc, #52]	; (1580 <eink_ac057tc1_set_pixel+0x34c>)
    154c:	680a      	ldr	r2, [r1, #0]
    154e:	6912      	ldr	r2, [r2, #16]
    1550:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1552:	7810      	ldrb	r0, [r2, #0]
    1554:	2440      	movs	r4, #64	; 0x40
    1556:	4320      	orrs	r0, r4
    1558:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    155a:	680a      	ldr	r2, [r1, #0]
    155c:	6912      	ldr	r2, [r2, #16]
    155e:	18d2      	adds	r2, r2, r3
    1560:	7810      	ldrb	r0, [r2, #0]
    1562:	2420      	movs	r4, #32
    1564:	4320      	orrs	r0, r4
    1566:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1568:	680a      	ldr	r2, [r1, #0]
    156a:	6911      	ldr	r1, [r2, #16]
    156c:	18cb      	adds	r3, r1, r3
    156e:	781a      	ldrb	r2, [r3, #0]
    1570:	2110      	movs	r1, #16
    1572:	430a      	orrs	r2, r1
    1574:	701a      	strb	r2, [r3, #0]
}
    1576:	e69e      	b.n	12b6 <eink_ac057tc1_set_pixel+0x82>
    1578:	20000408 	.word	0x20000408
    157c:	000044f8 	.word	0x000044f8
    1580:	20000430 	.word	0x20000430
    1584:	00004518 	.word	0x00004518

00001588 <eink_ac040tc1_set_pixel>:
{
    1588:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    158a:	4bd0      	ldr	r3, [pc, #832]	; (18cc <eink_ac040tc1_set_pixel+0x344>)
    158c:	889b      	ldrh	r3, [r3, #4]
    158e:	b29b      	uxth	r3, r3
    1590:	4283      	cmp	r3, r0
    1592:	d93a      	bls.n	160a <eink_ac040tc1_set_pixel+0x82>
    1594:	4bcd      	ldr	r3, [pc, #820]	; (18cc <eink_ac040tc1_set_pixel+0x344>)
    1596:	88db      	ldrh	r3, [r3, #6]
    1598:	b29b      	uxth	r3, r3
    159a:	428b      	cmp	r3, r1
    159c:	d935      	bls.n	160a <eink_ac040tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    159e:	4bcb      	ldr	r3, [pc, #812]	; (18cc <eink_ac040tc1_set_pixel+0x344>)
    15a0:	785b      	ldrb	r3, [r3, #1]
    15a2:	2b01      	cmp	r3, #1
    15a4:	d013      	beq.n	15ce <eink_ac040tc1_set_pixel+0x46>
    15a6:	4bc9      	ldr	r3, [pc, #804]	; (18cc <eink_ac040tc1_set_pixel+0x344>)
    15a8:	785b      	ldrb	r3, [r3, #1]
    15aa:	2b03      	cmp	r3, #3
    15ac:	d00f      	beq.n	15ce <eink_ac040tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * y_set);
    15ae:	1043      	asrs	r3, r0, #1
    15b0:	008c      	lsls	r4, r1, #2
    15b2:	1861      	adds	r1, r4, r1
    15b4:	0189      	lsls	r1, r1, #6
    15b6:	185b      	adds	r3, r3, r1
            odd_even_bit = x_set % 2;
    15b8:	2101      	movs	r1, #1
    15ba:	4008      	ands	r0, r1
        if (odd_even_bit) {
    15bc:	2800      	cmp	r0, #0
    15be:	d100      	bne.n	15c2 <eink_ac040tc1_set_pixel+0x3a>
    15c0:	e0c5      	b.n	174e <eink_ac040tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    15c2:	2a07      	cmp	r2, #7
    15c4:	d821      	bhi.n	160a <eink_ac040tc1_set_pixel+0x82>
    15c6:	0092      	lsls	r2, r2, #2
    15c8:	49c1      	ldr	r1, [pc, #772]	; (18d0 <eink_ac040tc1_set_pixel+0x348>)
    15ca:	588a      	ldr	r2, [r1, r2]
    15cc:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * x_set);
    15ce:	104b      	asrs	r3, r1, #1
    15d0:	0084      	lsls	r4, r0, #2
    15d2:	1820      	adds	r0, r4, r0
    15d4:	0180      	lsls	r0, r0, #6
    15d6:	181b      	adds	r3, r3, r0
           odd_even_bit = y_set % 2;
    15d8:	2001      	movs	r0, #1
    15da:	4008      	ands	r0, r1
    15dc:	e7ee      	b.n	15bc <eink_ac040tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    15de:	49bd      	ldr	r1, [pc, #756]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    15e0:	680a      	ldr	r2, [r1, #0]
    15e2:	6912      	ldr	r2, [r2, #16]
    15e4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    15e6:	7810      	ldrb	r0, [r2, #0]
    15e8:	2404      	movs	r4, #4
    15ea:	43a0      	bics	r0, r4
    15ec:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    15ee:	680a      	ldr	r2, [r1, #0]
    15f0:	6912      	ldr	r2, [r2, #16]
    15f2:	18d2      	adds	r2, r2, r3
    15f4:	7810      	ldrb	r0, [r2, #0]
    15f6:	3c02      	subs	r4, #2
    15f8:	43a0      	bics	r0, r4
    15fa:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    15fc:	680a      	ldr	r2, [r1, #0]
    15fe:	6911      	ldr	r1, [r2, #16]
    1600:	18cb      	adds	r3, r1, r3
    1602:	781a      	ldrb	r2, [r3, #0]
    1604:	2101      	movs	r1, #1
    1606:	438a      	bics	r2, r1
    1608:	701a      	strb	r2, [r3, #0]
}
    160a:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    160c:	49b1      	ldr	r1, [pc, #708]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    160e:	680a      	ldr	r2, [r1, #0]
    1610:	6912      	ldr	r2, [r2, #16]
    1612:	18d2      	adds	r2, r2, r3
    1614:	7810      	ldrb	r0, [r2, #0]
    1616:	2404      	movs	r4, #4
    1618:	43a0      	bics	r0, r4
    161a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    161c:	680a      	ldr	r2, [r1, #0]
    161e:	6912      	ldr	r2, [r2, #16]
    1620:	18d2      	adds	r2, r2, r3
    1622:	7810      	ldrb	r0, [r2, #0]
    1624:	3c02      	subs	r4, #2
    1626:	43a0      	bics	r0, r4
    1628:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    162a:	680a      	ldr	r2, [r1, #0]
    162c:	6911      	ldr	r1, [r2, #16]
    162e:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1630:	781a      	ldrb	r2, [r3, #0]
    1632:	2101      	movs	r1, #1
    1634:	430a      	orrs	r2, r1
    1636:	701a      	strb	r2, [r3, #0]
    1638:	e7e7      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    163a:	49a6      	ldr	r1, [pc, #664]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    163c:	680a      	ldr	r2, [r1, #0]
    163e:	6912      	ldr	r2, [r2, #16]
    1640:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1642:	7810      	ldrb	r0, [r2, #0]
    1644:	2404      	movs	r4, #4
    1646:	43a0      	bics	r0, r4
    1648:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    164a:	680a      	ldr	r2, [r1, #0]
    164c:	6912      	ldr	r2, [r2, #16]
    164e:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1650:	7810      	ldrb	r0, [r2, #0]
    1652:	2402      	movs	r4, #2
    1654:	4320      	orrs	r0, r4
    1656:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1658:	680a      	ldr	r2, [r1, #0]
    165a:	6911      	ldr	r1, [r2, #16]
    165c:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    165e:	781a      	ldrb	r2, [r3, #0]
    1660:	2101      	movs	r1, #1
    1662:	438a      	bics	r2, r1
    1664:	701a      	strb	r2, [r3, #0]
    1666:	e7d0      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1668:	499a      	ldr	r1, [pc, #616]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    166a:	680a      	ldr	r2, [r1, #0]
    166c:	6912      	ldr	r2, [r2, #16]
    166e:	18d2      	adds	r2, r2, r3
    1670:	7810      	ldrb	r0, [r2, #0]
    1672:	2404      	movs	r4, #4
    1674:	43a0      	bics	r0, r4
    1676:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1678:	680a      	ldr	r2, [r1, #0]
    167a:	6912      	ldr	r2, [r2, #16]
    167c:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    167e:	7810      	ldrb	r0, [r2, #0]
    1680:	2402      	movs	r4, #2
    1682:	4320      	orrs	r0, r4
    1684:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1686:	680a      	ldr	r2, [r1, #0]
    1688:	6911      	ldr	r1, [r2, #16]
    168a:	18cb      	adds	r3, r1, r3
    168c:	781a      	ldrb	r2, [r3, #0]
    168e:	2101      	movs	r1, #1
    1690:	430a      	orrs	r2, r1
    1692:	701a      	strb	r2, [r3, #0]
    1694:	e7b9      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1696:	498f      	ldr	r1, [pc, #572]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    1698:	680a      	ldr	r2, [r1, #0]
    169a:	6912      	ldr	r2, [r2, #16]
    169c:	18d2      	adds	r2, r2, r3
    169e:	7810      	ldrb	r0, [r2, #0]
    16a0:	2404      	movs	r4, #4
    16a2:	4320      	orrs	r0, r4
    16a4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    16a6:	680a      	ldr	r2, [r1, #0]
    16a8:	6912      	ldr	r2, [r2, #16]
    16aa:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    16ac:	7810      	ldrb	r0, [r2, #0]
    16ae:	2402      	movs	r4, #2
    16b0:	43a0      	bics	r0, r4
    16b2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    16b4:	680a      	ldr	r2, [r1, #0]
    16b6:	6911      	ldr	r1, [r2, #16]
    16b8:	18cb      	adds	r3, r1, r3
    16ba:	781a      	ldrb	r2, [r3, #0]
    16bc:	2101      	movs	r1, #1
    16be:	438a      	bics	r2, r1
    16c0:	701a      	strb	r2, [r3, #0]
    16c2:	e7a2      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    16c4:	4983      	ldr	r1, [pc, #524]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    16c6:	680a      	ldr	r2, [r1, #0]
    16c8:	6912      	ldr	r2, [r2, #16]
    16ca:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    16cc:	7810      	ldrb	r0, [r2, #0]
    16ce:	2404      	movs	r4, #4
    16d0:	4320      	orrs	r0, r4
    16d2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    16d4:	680a      	ldr	r2, [r1, #0]
    16d6:	6912      	ldr	r2, [r2, #16]
    16d8:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    16da:	7810      	ldrb	r0, [r2, #0]
    16dc:	2402      	movs	r4, #2
    16de:	43a0      	bics	r0, r4
    16e0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    16e2:	680a      	ldr	r2, [r1, #0]
    16e4:	6911      	ldr	r1, [r2, #16]
    16e6:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    16e8:	781a      	ldrb	r2, [r3, #0]
    16ea:	2101      	movs	r1, #1
    16ec:	430a      	orrs	r2, r1
    16ee:	701a      	strb	r2, [r3, #0]
    16f0:	e78b      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    16f2:	4978      	ldr	r1, [pc, #480]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    16f4:	680a      	ldr	r2, [r1, #0]
    16f6:	6912      	ldr	r2, [r2, #16]
    16f8:	18d2      	adds	r2, r2, r3
    16fa:	7810      	ldrb	r0, [r2, #0]
    16fc:	2404      	movs	r4, #4
    16fe:	4320      	orrs	r0, r4
    1700:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1702:	680a      	ldr	r2, [r1, #0]
    1704:	6912      	ldr	r2, [r2, #16]
    1706:	18d2      	adds	r2, r2, r3
    1708:	7810      	ldrb	r0, [r2, #0]
    170a:	2402      	movs	r4, #2
    170c:	4320      	orrs	r0, r4
    170e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1710:	680a      	ldr	r2, [r1, #0]
    1712:	6911      	ldr	r1, [r2, #16]
    1714:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1716:	781a      	ldrb	r2, [r3, #0]
    1718:	2101      	movs	r1, #1
    171a:	438a      	bics	r2, r1
    171c:	701a      	strb	r2, [r3, #0]
    171e:	e774      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1720:	496c      	ldr	r1, [pc, #432]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    1722:	680a      	ldr	r2, [r1, #0]
    1724:	6912      	ldr	r2, [r2, #16]
    1726:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1728:	7810      	ldrb	r0, [r2, #0]
    172a:	2404      	movs	r4, #4
    172c:	4320      	orrs	r0, r4
    172e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1730:	680a      	ldr	r2, [r1, #0]
    1732:	6912      	ldr	r2, [r2, #16]
    1734:	18d2      	adds	r2, r2, r3
    1736:	7810      	ldrb	r0, [r2, #0]
    1738:	2402      	movs	r4, #2
    173a:	4320      	orrs	r0, r4
    173c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    173e:	680a      	ldr	r2, [r1, #0]
    1740:	6911      	ldr	r1, [r2, #16]
    1742:	18cb      	adds	r3, r1, r3
    1744:	781a      	ldrb	r2, [r3, #0]
    1746:	2101      	movs	r1, #1
    1748:	430a      	orrs	r2, r1
    174a:	701a      	strb	r2, [r3, #0]
    174c:	e75d      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
            switch(pixel_colour) {
    174e:	2a07      	cmp	r2, #7
    1750:	d900      	bls.n	1754 <eink_ac040tc1_set_pixel+0x1cc>
    1752:	e75a      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
    1754:	0092      	lsls	r2, r2, #2
    1756:	4960      	ldr	r1, [pc, #384]	; (18d8 <eink_ac040tc1_set_pixel+0x350>)
    1758:	588a      	ldr	r2, [r1, r2]
    175a:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    175c:	495d      	ldr	r1, [pc, #372]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    175e:	680a      	ldr	r2, [r1, #0]
    1760:	6912      	ldr	r2, [r2, #16]
    1762:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1764:	7810      	ldrb	r0, [r2, #0]
    1766:	2440      	movs	r4, #64	; 0x40
    1768:	43a0      	bics	r0, r4
    176a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    176c:	680a      	ldr	r2, [r1, #0]
    176e:	6912      	ldr	r2, [r2, #16]
    1770:	18d2      	adds	r2, r2, r3
    1772:	7810      	ldrb	r0, [r2, #0]
    1774:	3c20      	subs	r4, #32
    1776:	43a0      	bics	r0, r4
    1778:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    177a:	680a      	ldr	r2, [r1, #0]
    177c:	6911      	ldr	r1, [r2, #16]
    177e:	18cb      	adds	r3, r1, r3
    1780:	781a      	ldrb	r2, [r3, #0]
    1782:	2110      	movs	r1, #16
    1784:	438a      	bics	r2, r1
    1786:	701a      	strb	r2, [r3, #0]
    1788:	e73f      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    178a:	4952      	ldr	r1, [pc, #328]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    178c:	680a      	ldr	r2, [r1, #0]
    178e:	6912      	ldr	r2, [r2, #16]
    1790:	18d2      	adds	r2, r2, r3
    1792:	7810      	ldrb	r0, [r2, #0]
    1794:	2440      	movs	r4, #64	; 0x40
    1796:	43a0      	bics	r0, r4
    1798:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    179a:	680a      	ldr	r2, [r1, #0]
    179c:	6912      	ldr	r2, [r2, #16]
    179e:	18d2      	adds	r2, r2, r3
    17a0:	7810      	ldrb	r0, [r2, #0]
    17a2:	3c20      	subs	r4, #32
    17a4:	43a0      	bics	r0, r4
    17a6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    17a8:	680a      	ldr	r2, [r1, #0]
    17aa:	6911      	ldr	r1, [r2, #16]
    17ac:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    17ae:	781a      	ldrb	r2, [r3, #0]
    17b0:	2110      	movs	r1, #16
    17b2:	430a      	orrs	r2, r1
    17b4:	701a      	strb	r2, [r3, #0]
    17b6:	e728      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    17b8:	4946      	ldr	r1, [pc, #280]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    17ba:	680a      	ldr	r2, [r1, #0]
    17bc:	6912      	ldr	r2, [r2, #16]
    17be:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    17c0:	7810      	ldrb	r0, [r2, #0]
    17c2:	2440      	movs	r4, #64	; 0x40
    17c4:	43a0      	bics	r0, r4
    17c6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    17c8:	680a      	ldr	r2, [r1, #0]
    17ca:	6912      	ldr	r2, [r2, #16]
    17cc:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    17ce:	7810      	ldrb	r0, [r2, #0]
    17d0:	2420      	movs	r4, #32
    17d2:	4320      	orrs	r0, r4
    17d4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    17d6:	680a      	ldr	r2, [r1, #0]
    17d8:	6911      	ldr	r1, [r2, #16]
    17da:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    17dc:	781a      	ldrb	r2, [r3, #0]
    17de:	2110      	movs	r1, #16
    17e0:	438a      	bics	r2, r1
    17e2:	701a      	strb	r2, [r3, #0]
    17e4:	e711      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    17e6:	493b      	ldr	r1, [pc, #236]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    17e8:	680a      	ldr	r2, [r1, #0]
    17ea:	6912      	ldr	r2, [r2, #16]
    17ec:	18d2      	adds	r2, r2, r3
    17ee:	7810      	ldrb	r0, [r2, #0]
    17f0:	2440      	movs	r4, #64	; 0x40
    17f2:	43a0      	bics	r0, r4
    17f4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    17f6:	680a      	ldr	r2, [r1, #0]
    17f8:	6912      	ldr	r2, [r2, #16]
    17fa:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    17fc:	7810      	ldrb	r0, [r2, #0]
    17fe:	2420      	movs	r4, #32
    1800:	4320      	orrs	r0, r4
    1802:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1804:	680a      	ldr	r2, [r1, #0]
    1806:	6911      	ldr	r1, [r2, #16]
    1808:	18cb      	adds	r3, r1, r3
    180a:	781a      	ldrb	r2, [r3, #0]
    180c:	2110      	movs	r1, #16
    180e:	430a      	orrs	r2, r1
    1810:	701a      	strb	r2, [r3, #0]
    1812:	e6fa      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1814:	492f      	ldr	r1, [pc, #188]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    1816:	680a      	ldr	r2, [r1, #0]
    1818:	6912      	ldr	r2, [r2, #16]
    181a:	18d2      	adds	r2, r2, r3
    181c:	7810      	ldrb	r0, [r2, #0]
    181e:	2440      	movs	r4, #64	; 0x40
    1820:	4320      	orrs	r0, r4
    1822:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1824:	680a      	ldr	r2, [r1, #0]
    1826:	6912      	ldr	r2, [r2, #16]
    1828:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    182a:	7810      	ldrb	r0, [r2, #0]
    182c:	2420      	movs	r4, #32
    182e:	43a0      	bics	r0, r4
    1830:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1832:	680a      	ldr	r2, [r1, #0]
    1834:	6911      	ldr	r1, [r2, #16]
    1836:	18cb      	adds	r3, r1, r3
    1838:	781a      	ldrb	r2, [r3, #0]
    183a:	2110      	movs	r1, #16
    183c:	438a      	bics	r2, r1
    183e:	701a      	strb	r2, [r3, #0]
    1840:	e6e3      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1842:	4924      	ldr	r1, [pc, #144]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    1844:	680a      	ldr	r2, [r1, #0]
    1846:	6912      	ldr	r2, [r2, #16]
    1848:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    184a:	7810      	ldrb	r0, [r2, #0]
    184c:	2440      	movs	r4, #64	; 0x40
    184e:	4320      	orrs	r0, r4
    1850:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1852:	680a      	ldr	r2, [r1, #0]
    1854:	6912      	ldr	r2, [r2, #16]
    1856:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1858:	7810      	ldrb	r0, [r2, #0]
    185a:	2420      	movs	r4, #32
    185c:	43a0      	bics	r0, r4
    185e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1860:	680a      	ldr	r2, [r1, #0]
    1862:	6911      	ldr	r1, [r2, #16]
    1864:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1866:	781a      	ldrb	r2, [r3, #0]
    1868:	2110      	movs	r1, #16
    186a:	430a      	orrs	r2, r1
    186c:	701a      	strb	r2, [r3, #0]
    186e:	e6cc      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1870:	4918      	ldr	r1, [pc, #96]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    1872:	680a      	ldr	r2, [r1, #0]
    1874:	6912      	ldr	r2, [r2, #16]
    1876:	18d2      	adds	r2, r2, r3
    1878:	7810      	ldrb	r0, [r2, #0]
    187a:	2440      	movs	r4, #64	; 0x40
    187c:	4320      	orrs	r0, r4
    187e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1880:	680a      	ldr	r2, [r1, #0]
    1882:	6912      	ldr	r2, [r2, #16]
    1884:	18d2      	adds	r2, r2, r3
    1886:	7810      	ldrb	r0, [r2, #0]
    1888:	2420      	movs	r4, #32
    188a:	4320      	orrs	r0, r4
    188c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    188e:	680a      	ldr	r2, [r1, #0]
    1890:	6911      	ldr	r1, [r2, #16]
    1892:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1894:	781a      	ldrb	r2, [r3, #0]
    1896:	2110      	movs	r1, #16
    1898:	438a      	bics	r2, r1
    189a:	701a      	strb	r2, [r3, #0]
    189c:	e6b5      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    189e:	490d      	ldr	r1, [pc, #52]	; (18d4 <eink_ac040tc1_set_pixel+0x34c>)
    18a0:	680a      	ldr	r2, [r1, #0]
    18a2:	6912      	ldr	r2, [r2, #16]
    18a4:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    18a6:	7810      	ldrb	r0, [r2, #0]
    18a8:	2440      	movs	r4, #64	; 0x40
    18aa:	4320      	orrs	r0, r4
    18ac:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    18ae:	680a      	ldr	r2, [r1, #0]
    18b0:	6912      	ldr	r2, [r2, #16]
    18b2:	18d2      	adds	r2, r2, r3
    18b4:	7810      	ldrb	r0, [r2, #0]
    18b6:	2420      	movs	r4, #32
    18b8:	4320      	orrs	r0, r4
    18ba:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    18bc:	680a      	ldr	r2, [r1, #0]
    18be:	6911      	ldr	r1, [r2, #16]
    18c0:	18cb      	adds	r3, r1, r3
    18c2:	781a      	ldrb	r2, [r3, #0]
    18c4:	2110      	movs	r1, #16
    18c6:	430a      	orrs	r2, r1
    18c8:	701a      	strb	r2, [r3, #0]
}
    18ca:	e69e      	b.n	160a <eink_ac040tc1_set_pixel+0x82>
    18cc:	20000408 	.word	0x20000408
    18d0:	00004538 	.word	0x00004538
    18d4:	20000430 	.word	0x20000430
    18d8:	00004558 	.word	0x00004558

000018dc <eink_hink_e0154a05_set_pixel>:
{    
    18dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch(ssd1608_global_instance.display_config.display_rotation)
    18de:	4c2a      	ldr	r4, [pc, #168]	; (1988 <eink_hink_e0154a05_set_pixel+0xac>)
    18e0:	7824      	ldrb	r4, [r4, #0]
    18e2:	b2e4      	uxtb	r4, r4
    18e4:	2c01      	cmp	r4, #1
    18e6:	d014      	beq.n	1912 <eink_hink_e0154a05_set_pixel+0x36>
    18e8:	2c00      	cmp	r4, #0
    18ea:	d008      	beq.n	18fe <eink_hink_e0154a05_set_pixel+0x22>
    18ec:	2c02      	cmp	r4, #2
    18ee:	d01c      	beq.n	192a <eink_hink_e0154a05_set_pixel+0x4e>
    18f0:	2c03      	cmp	r4, #3
    18f2:	d024      	beq.n	193e <eink_hink_e0154a05_set_pixel+0x62>
    if ( (x_set >= 0) && (x_set < max_x) && (y_set >= 0) && (y_set < max_y) ) {
    18f4:	42b3      	cmp	r3, r6
    18f6:	d201      	bcs.n	18fc <eink_hink_e0154a05_set_pixel+0x20>
    18f8:	42bd      	cmp	r5, r7
    18fa:	d328      	bcc.n	194e <eink_hink_e0154a05_set_pixel+0x72>
}
    18fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            x_set = ssd1608_global_instance.display_height - y;
    18fe:	4c22      	ldr	r4, [pc, #136]	; (1988 <eink_hink_e0154a05_set_pixel+0xac>)
    1900:	88e3      	ldrh	r3, [r4, #6]
    1902:	1a5b      	subs	r3, r3, r1
    1904:	b29b      	uxth	r3, r3
            max_x = ssd1608_global_instance.display_height;
    1906:	88e6      	ldrh	r6, [r4, #6]
    1908:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    190a:	88a7      	ldrh	r7, [r4, #4]
    190c:	b2bf      	uxth	r7, r7
            y_set = x;
    190e:	0005      	movs	r5, r0
            break;
    1910:	e7f0      	b.n	18f4 <eink_hink_e0154a05_set_pixel+0x18>
            x_set = ssd1608_global_instance.display_width - x;
    1912:	4c1d      	ldr	r4, [pc, #116]	; (1988 <eink_hink_e0154a05_set_pixel+0xac>)
    1914:	88a3      	ldrh	r3, [r4, #4]
    1916:	1a1b      	subs	r3, r3, r0
    1918:	b29b      	uxth	r3, r3
            y_set = ssd1608_global_instance.display_height - y;
    191a:	88e5      	ldrh	r5, [r4, #6]
    191c:	1a6d      	subs	r5, r5, r1
    191e:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_width;
    1920:	88a6      	ldrh	r6, [r4, #4]
    1922:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1924:	88e7      	ldrh	r7, [r4, #6]
    1926:	b2bf      	uxth	r7, r7
            break;
    1928:	e7e4      	b.n	18f4 <eink_hink_e0154a05_set_pixel+0x18>
            y_set = ssd1608_global_instance.display_width - x;
    192a:	4c17      	ldr	r4, [pc, #92]	; (1988 <eink_hink_e0154a05_set_pixel+0xac>)
    192c:	88a5      	ldrh	r5, [r4, #4]
    192e:	1a2d      	subs	r5, r5, r0
    1930:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_height;
    1932:	88e6      	ldrh	r6, [r4, #6]
    1934:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    1936:	88a7      	ldrh	r7, [r4, #4]
    1938:	b2bf      	uxth	r7, r7
            x_set = y;
    193a:	000b      	movs	r3, r1
            break;
    193c:	e7da      	b.n	18f4 <eink_hink_e0154a05_set_pixel+0x18>
            max_x = ssd1608_global_instance.display_width;
    193e:	4b12      	ldr	r3, [pc, #72]	; (1988 <eink_hink_e0154a05_set_pixel+0xac>)
    1940:	889e      	ldrh	r6, [r3, #4]
    1942:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1944:	88df      	ldrh	r7, [r3, #6]
    1946:	b2bf      	uxth	r7, r7
            y_set = y;
    1948:	000d      	movs	r5, r1
            x_set = x;
    194a:	0003      	movs	r3, r0
            break;
    194c:	e7d2      	b.n	18f4 <eink_hink_e0154a05_set_pixel+0x18>
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    194e:	490f      	ldr	r1, [pc, #60]	; (198c <eink_hink_e0154a05_set_pixel+0xb0>)
    1950:	6809      	ldr	r1, [r1, #0]
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    1952:	3301      	adds	r3, #1
    1954:	0098      	lsls	r0, r3, #2
    1956:	181b      	adds	r3, r3, r0
    1958:	0098      	lsls	r0, r3, #2
    195a:	181b      	adds	r3, r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    195c:	10e8      	asrs	r0, r5, #3
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    195e:	1a1b      	subs	r3, r3, r0
    1960:	3b01      	subs	r3, #1
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    1962:	b29b      	uxth	r3, r3
    1964:	6909      	ldr	r1, [r1, #16]
    1966:	18cb      	adds	r3, r1, r3
    1968:	2107      	movs	r1, #7
    196a:	400d      	ands	r5, r1
    if (bit_value == 1) {
    196c:	2a00      	cmp	r2, #0
    196e:	d105      	bne.n	197c <eink_hink_e0154a05_set_pixel+0xa0>
        *byte &= ~(1 << bit_number);
    1970:	2101      	movs	r1, #1
    1972:	40a9      	lsls	r1, r5
    1974:	781a      	ldrb	r2, [r3, #0]
    1976:	438a      	bics	r2, r1
    1978:	701a      	strb	r2, [r3, #0]
}
    197a:	e7bf      	b.n	18fc <eink_hink_e0154a05_set_pixel+0x20>
        *byte |= 1 << bit_number;
    197c:	3906      	subs	r1, #6
    197e:	40a9      	lsls	r1, r5
    1980:	781a      	ldrb	r2, [r3, #0]
    1982:	430a      	orrs	r2, r1
    1984:	701a      	strb	r2, [r3, #0]
    1986:	e7b9      	b.n	18fc <eink_hink_e0154a05_set_pixel+0x20>
    1988:	200003b8 	.word	0x200003b8
    198c:	20000430 	.word	0x20000430

00001990 <eink_ed029tc1_set_pixel>:
{    
    1990:	b570      	push	{r4, r5, r6, lr}
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    1992:	4c37      	ldr	r4, [pc, #220]	; (1a70 <eink_ed029tc1_set_pixel+0xe0>)
    1994:	8923      	ldrh	r3, [r4, #8]
    1996:	b29b      	uxth	r3, r3
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    1998:	88e5      	ldrh	r5, [r4, #6]
    199a:	b2ad      	uxth	r5, r5
    if ( (x_set >= 0) && (x_set < uc8151_global_instance.display_width) && (y_set >= 0) && (y_set < uc8151_global_instance.display_height) ) {
    199c:	88e4      	ldrh	r4, [r4, #6]
    199e:	b2a4      	uxth	r4, r4
    19a0:	4284      	cmp	r4, r0
    19a2:	d925      	bls.n	19f0 <eink_ed029tc1_set_pixel+0x60>
    19a4:	4c32      	ldr	r4, [pc, #200]	; (1a70 <eink_ed029tc1_set_pixel+0xe0>)
    19a6:	8924      	ldrh	r4, [r4, #8]
    19a8:	b2a4      	uxth	r4, r4
    19aa:	428c      	cmp	r4, r1
    19ac:	d920      	bls.n	19f0 <eink_ed029tc1_set_pixel+0x60>
        if ( (uc8151_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8151_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    19ae:	4c30      	ldr	r4, [pc, #192]	; (1a70 <eink_ed029tc1_set_pixel+0xe0>)
    19b0:	78e4      	ldrb	r4, [r4, #3]
    19b2:	2c01      	cmp	r4, #1
    19b4:	d01d      	beq.n	19f2 <eink_ed029tc1_set_pixel+0x62>
    19b6:	4c2e      	ldr	r4, [pc, #184]	; (1a70 <eink_ed029tc1_set_pixel+0xe0>)
    19b8:	78e4      	ldrb	r4, [r4, #3]
    19ba:	2c03      	cmp	r4, #3
    19bc:	d019      	beq.n	19f2 <eink_ed029tc1_set_pixel+0x62>
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19be:	3001      	adds	r0, #1
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    19c0:	08db      	lsrs	r3, r3, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19c2:	b2db      	uxtb	r3, r3
    19c4:	4358      	muls	r0, r3
            y1_set = ((y_set - (y_set % 8)) / 8);
    19c6:	10cb      	asrs	r3, r1, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19c8:	43db      	mvns	r3, r3
    19ca:	18c3      	adds	r3, r0, r3
            bit_set = (y_set % 8);
    19cc:	2007      	movs	r0, #7
    19ce:	4001      	ands	r1, r0
        if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    19d0:	4827      	ldr	r0, [pc, #156]	; (1a70 <eink_ed029tc1_set_pixel+0xe0>)
    19d2:	7880      	ldrb	r0, [r0, #2]
    19d4:	2800      	cmp	r0, #0
    19d6:	d11b      	bne.n	1a10 <eink_ed029tc1_set_pixel+0x80>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);
    19d8:	4826      	ldr	r0, [pc, #152]	; (1a74 <eink_ed029tc1_set_pixel+0xe4>)
    19da:	6800      	ldr	r0, [r0, #0]
    19dc:	6940      	ldr	r0, [r0, #20]
    19de:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    19e0:	2a00      	cmp	r2, #0
    19e2:	d10e      	bne.n	1a02 <eink_ed029tc1_set_pixel+0x72>
        *byte &= ~(1 << bit_number);
    19e4:	2201      	movs	r2, #1
    19e6:	408a      	lsls	r2, r1
    19e8:	0011      	movs	r1, r2
    19ea:	781a      	ldrb	r2, [r3, #0]
    19ec:	438a      	bics	r2, r1
    19ee:	701a      	strb	r2, [r3, #0]
}
    19f0:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    19f2:	08ed      	lsrs	r5, r5, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - (width_bytes - 16) - x1_set);
    19f4:	b2eb      	uxtb	r3, r5
    19f6:	4359      	muls	r1, r3
            x1_set = 15 - ((x_set - (x_set % 8)) / 8);
    19f8:	10c3      	asrs	r3, r0, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - (width_bytes - 16) - x1_set);
    19fa:	18cb      	adds	r3, r1, r3
            bit_set = 7 - (x_set % 8);
    19fc:	2107      	movs	r1, #7
    19fe:	4381      	bics	r1, r0
    1a00:	e7e6      	b.n	19d0 <eink_ed029tc1_set_pixel+0x40>
        *byte |= 1 << bit_number;
    1a02:	2201      	movs	r2, #1
    1a04:	408a      	lsls	r2, r1
    1a06:	0011      	movs	r1, r2
    1a08:	781a      	ldrb	r2, [r3, #0]
    1a0a:	430a      	orrs	r2, r1
    1a0c:	701a      	strb	r2, [r3, #0]
    1a0e:	e7ef      	b.n	19f0 <eink_ed029tc1_set_pixel+0x60>
            if (pixel_colour == PIXEL_BLACK) {
    1a10:	2a00      	cmp	r2, #0
    1a12:	d017      	beq.n	1a44 <eink_ed029tc1_set_pixel+0xb4>
            } else if(pixel_colour == PIXEL_WHITE) {
    1a14:	3a02      	subs	r2, #2
    1a16:	2a01      	cmp	r2, #1
    1a18:	d801      	bhi.n	1a1e <eink_ed029tc1_set_pixel+0x8e>
                pixel_set_2 = 0;    
    1a1a:	2600      	movs	r6, #0
    1a1c:	e013      	b.n	1a46 <eink_ed029tc1_set_pixel+0xb6>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1a1e:	4d15      	ldr	r5, [pc, #84]	; (1a74 <eink_ed029tc1_set_pixel+0xe4>)
    1a20:	682a      	ldr	r2, [r5, #0]
    1a22:	6912      	ldr	r2, [r2, #16]
    1a24:	18d2      	adds	r2, r2, r3
    1a26:	2401      	movs	r4, #1
    1a28:	408c      	lsls	r4, r1
    1a2a:	7810      	ldrb	r0, [r2, #0]
    1a2c:	4320      	orrs	r0, r4
    1a2e:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1a30:	682a      	ldr	r2, [r5, #0]
    1a32:	6950      	ldr	r0, [r2, #20]
    1a34:	18c3      	adds	r3, r0, r3
    1a36:	2201      	movs	r2, #1
    1a38:	408a      	lsls	r2, r1
    1a3a:	0011      	movs	r1, r2
    1a3c:	781a      	ldrb	r2, [r3, #0]
    1a3e:	430a      	orrs	r2, r1
    1a40:	701a      	strb	r2, [r3, #0]
    1a42:	e7d5      	b.n	19f0 <eink_ed029tc1_set_pixel+0x60>
                pixel_set_2 = 1;
    1a44:	2601      	movs	r6, #1
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1a46:	4d0b      	ldr	r5, [pc, #44]	; (1a74 <eink_ed029tc1_set_pixel+0xe4>)
    1a48:	682a      	ldr	r2, [r5, #0]
    1a4a:	6912      	ldr	r2, [r2, #16]
    1a4c:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1a4e:	2401      	movs	r4, #1
    1a50:	408c      	lsls	r4, r1
    1a52:	7810      	ldrb	r0, [r2, #0]
    1a54:	43a0      	bics	r0, r4
    1a56:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1a58:	682a      	ldr	r2, [r5, #0]
    1a5a:	6950      	ldr	r0, [r2, #20]
    1a5c:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    1a5e:	2e00      	cmp	r6, #0
    1a60:	d1e9      	bne.n	1a36 <eink_ed029tc1_set_pixel+0xa6>
        *byte &= ~(1 << bit_number);
    1a62:	2201      	movs	r2, #1
    1a64:	408a      	lsls	r2, r1
    1a66:	0011      	movs	r1, r2
    1a68:	781a      	ldrb	r2, [r3, #0]
    1a6a:	438a      	bics	r2, r1
    1a6c:	701a      	strb	r2, [r3, #0]
}
    1a6e:	e7bf      	b.n	19f0 <eink_ed029tc1_set_pixel+0x60>
    1a70:	200003f8 	.word	0x200003f8
    1a74:	20000430 	.word	0x20000430

00001a78 <eink_el026tr1_set_pixel>:
{    
    1a78:	b510      	push	{r4, lr}
    eink_ed029tc1_set_pixel(x_set, y_set, pixel_colour);
    1a7a:	4b01      	ldr	r3, [pc, #4]	; (1a80 <eink_el026tr1_set_pixel+0x8>)
    1a7c:	4798      	blx	r3
}
    1a7e:	bd10      	pop	{r4, pc}
    1a80:	00001991 	.word	0x00001991

00001a84 <eink_ed013tc1_set_pixel>:
{    
    1a84:	b510      	push	{r4, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1a86:	4c16      	ldr	r4, [pc, #88]	; (1ae0 <eink_ed013tc1_set_pixel+0x5c>)
    1a88:	88e3      	ldrh	r3, [r4, #6]
    1a8a:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1a8c:	88a4      	ldrh	r4, [r4, #4]
    1a8e:	b2a4      	uxth	r4, r4
    1a90:	4284      	cmp	r4, r0
    1a92:	d918      	bls.n	1ac6 <eink_ed013tc1_set_pixel+0x42>
    1a94:	4c12      	ldr	r4, [pc, #72]	; (1ae0 <eink_ed013tc1_set_pixel+0x5c>)
    1a96:	88e4      	ldrh	r4, [r4, #6]
    1a98:	b2a4      	uxth	r4, r4
    1a9a:	428c      	cmp	r4, r1
    1a9c:	d913      	bls.n	1ac6 <eink_ed013tc1_set_pixel+0x42>
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1a9e:	08db      	lsrs	r3, r3, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1aa0:	b2db      	uxtb	r3, r3
    1aa2:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1aa4:	10c8      	asrs	r0, r1, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1aa6:	1a1b      	subs	r3, r3, r0
    1aa8:	3b01      	subs	r3, #1
        bit_set = (y_set % 8);
    1aaa:	2007      	movs	r0, #7
    1aac:	4001      	ands	r1, r0
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1aae:	2a00      	cmp	r2, #0
    1ab0:	d00a      	beq.n	1ac8 <eink_ed013tc1_set_pixel+0x44>
		else eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 1);
    1ab2:	4a0c      	ldr	r2, [pc, #48]	; (1ae4 <eink_ed013tc1_set_pixel+0x60>)
    1ab4:	6812      	ldr	r2, [r2, #0]
    1ab6:	6950      	ldr	r0, [r2, #20]
    1ab8:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
    1aba:	2201      	movs	r2, #1
    1abc:	408a      	lsls	r2, r1
    1abe:	0011      	movs	r1, r2
    1ac0:	781a      	ldrb	r2, [r3, #0]
    1ac2:	430a      	orrs	r2, r1
    1ac4:	701a      	strb	r2, [r3, #0]
}
    1ac6:	bd10      	pop	{r4, pc}
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1ac8:	4a06      	ldr	r2, [pc, #24]	; (1ae4 <eink_ed013tc1_set_pixel+0x60>)
    1aca:	6812      	ldr	r2, [r2, #0]
    1acc:	6950      	ldr	r0, [r2, #20]
    1ace:	18c3      	adds	r3, r0, r3
        *byte &= ~(1 << bit_number);
    1ad0:	2201      	movs	r2, #1
    1ad2:	408a      	lsls	r2, r1
    1ad4:	0011      	movs	r1, r2
    1ad6:	781a      	ldrb	r2, [r3, #0]
    1ad8:	438a      	bics	r2, r1
    1ada:	701a      	strb	r2, [r3, #0]
    1adc:	e7f3      	b.n	1ac6 <eink_ed013tc1_set_pixel+0x42>
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	20000390 	.word	0x20000390
    1ae4:	20000430 	.word	0x20000430

00001ae8 <eink_et011tt2_set_pixel_raw>:
{
    1ae8:	b530      	push	{r4, r5, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 4;
    1aea:	4c1e      	ldr	r4, [pc, #120]	; (1b64 <eink_et011tt2_set_pixel_raw+0x7c>)
    1aec:	88e3      	ldrh	r3, [r4, #6]
    1aee:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1af0:	88a4      	ldrh	r4, [r4, #4]
    1af2:	b2a4      	uxth	r4, r4
    1af4:	4284      	cmp	r4, r0
    1af6:	d904      	bls.n	1b02 <eink_et011tt2_set_pixel_raw+0x1a>
    1af8:	4c1a      	ldr	r4, [pc, #104]	; (1b64 <eink_et011tt2_set_pixel_raw+0x7c>)
    1afa:	88e4      	ldrh	r4, [r4, #6]
    1afc:	b2a4      	uxth	r4, r4
    1afe:	428c      	cmp	r4, r1
    1b00:	d800      	bhi.n	1b04 <eink_et011tt2_set_pixel_raw+0x1c>
}
    1b02:	bd30      	pop	{r4, r5, pc}
    uint8_t height_bytes = uc8173_global_instance.display_height / 4;
    1b04:	089b      	lsrs	r3, r3, #2
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1b06:	b2db      	uxtb	r3, r3
    1b08:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 4)) / 4);
    1b0a:	1088      	asrs	r0, r1, #2
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1b0c:	1a1b      	subs	r3, r3, r0
    1b0e:	3b01      	subs	r3, #1
        bit_set = (y_set % 4) * 2;
    1b10:	2003      	movs	r0, #3
    1b12:	4001      	ands	r1, r0
    1b14:	0049      	lsls	r1, r1, #1
		eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, (pixel_set & 0x1));
    1b16:	4814      	ldr	r0, [pc, #80]	; (1b68 <eink_et011tt2_set_pixel_raw+0x80>)
    1b18:	6800      	ldr	r0, [r0, #0]
    1b1a:	6900      	ldr	r0, [r0, #16]
    1b1c:	18c0      	adds	r0, r0, r3
    if (bit_value == 1) {
    1b1e:	07d4      	lsls	r4, r2, #31
    1b20:	d412      	bmi.n	1b48 <eink_et011tt2_set_pixel_raw+0x60>
        *byte &= ~(1 << bit_number);
    1b22:	2501      	movs	r5, #1
    1b24:	408d      	lsls	r5, r1
    1b26:	7804      	ldrb	r4, [r0, #0]
    1b28:	43ac      	bics	r4, r5
    1b2a:	7004      	strb	r4, [r0, #0]
		eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set+1, ((pixel_set >> 1) & 0x1));
    1b2c:	480e      	ldr	r0, [pc, #56]	; (1b68 <eink_et011tt2_set_pixel_raw+0x80>)
    1b2e:	6800      	ldr	r0, [r0, #0]
    1b30:	6900      	ldr	r0, [r0, #16]
    1b32:	18c3      	adds	r3, r0, r3
    1b34:	3101      	adds	r1, #1
    if (bit_value == 1) {
    1b36:	0792      	lsls	r2, r2, #30
    1b38:	d40c      	bmi.n	1b54 <eink_et011tt2_set_pixel_raw+0x6c>
        *byte &= ~(1 << bit_number);
    1b3a:	2201      	movs	r2, #1
    1b3c:	408a      	lsls	r2, r1
    1b3e:	0011      	movs	r1, r2
    1b40:	781a      	ldrb	r2, [r3, #0]
    1b42:	438a      	bics	r2, r1
    1b44:	701a      	strb	r2, [r3, #0]
}
    1b46:	e7dc      	b.n	1b02 <eink_et011tt2_set_pixel_raw+0x1a>
        *byte |= 1 << bit_number;
    1b48:	2501      	movs	r5, #1
    1b4a:	408d      	lsls	r5, r1
    1b4c:	7804      	ldrb	r4, [r0, #0]
    1b4e:	432c      	orrs	r4, r5
    1b50:	7004      	strb	r4, [r0, #0]
    1b52:	e7eb      	b.n	1b2c <eink_et011tt2_set_pixel_raw+0x44>
    1b54:	2201      	movs	r2, #1
    1b56:	408a      	lsls	r2, r1
    1b58:	0011      	movs	r1, r2
    1b5a:	781a      	ldrb	r2, [r3, #0]
    1b5c:	430a      	orrs	r2, r1
    1b5e:	701a      	strb	r2, [r3, #0]
    1b60:	e7cf      	b.n	1b02 <eink_et011tt2_set_pixel_raw+0x1a>
    1b62:	46c0      	nop			; (mov r8, r8)
    1b64:	20000390 	.word	0x20000390
    1b68:	20000430 	.word	0x20000430

00001b6c <eink_et011tt2_set_pixel>:
{    
    1b6c:	b510      	push	{r4, lr}
	switch(pixel_colour) {
    1b6e:	2a00      	cmp	r2, #0
    1b70:	d003      	beq.n	1b7a <eink_et011tt2_set_pixel+0xe>
            eink_et011tt2_set_pixel_raw(x_set, y_set, 0x3);
    1b72:	2203      	movs	r2, #3
    1b74:	4b02      	ldr	r3, [pc, #8]	; (1b80 <eink_et011tt2_set_pixel+0x14>)
    1b76:	4798      	blx	r3
}
    1b78:	bd10      	pop	{r4, pc}
            eink_et011tt2_set_pixel_raw(x_set, y_set, 0x0);
    1b7a:	4b01      	ldr	r3, [pc, #4]	; (1b80 <eink_et011tt2_set_pixel+0x14>)
    1b7c:	4798      	blx	r3
            break;
    1b7e:	e7fb      	b.n	1b78 <eink_et011tt2_set_pixel+0xc>
    1b80:	00001ae9 	.word	0x00001ae9

00001b84 <eink_send_raw_byte>:
{    
    1b84:	b570      	push	{r4, r5, r6, lr}
    if(!f_send)
    1b86:	2900      	cmp	r1, #0
    1b88:	d103      	bne.n	1b92 <eink_send_raw_byte+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b8a:	2220      	movs	r2, #32
    1b8c:	23c0      	movs	r3, #192	; 0xc0
    1b8e:	05db      	lsls	r3, r3, #23
    1b90:	615a      	str	r2, [r3, #20]
{    
    1b92:	2308      	movs	r3, #8
    1b94:	22c0      	movs	r2, #192	; 0xc0
    1b96:	05d2      	lsls	r2, r2, #23
    1b98:	2610      	movs	r6, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b9a:	2480      	movs	r4, #128	; 0x80
    1b9c:	e008      	b.n	1bb0 <eink_send_raw_byte+0x2c>
    1b9e:	6196      	str	r6, [r2, #24]
    1ba0:	6194      	str	r4, [r2, #24]
        send_byte=send_byte << 1;
    1ba2:	0040      	lsls	r0, r0, #1
    1ba4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ba6:	6154      	str	r4, [r2, #20]
    1ba8:	3b01      	subs	r3, #1
    1baa:	b2db      	uxtb	r3, r3
    for (i=0;i<8;i++) {
    1bac:	2b00      	cmp	r3, #0
    1bae:	d004      	beq.n	1bba <eink_send_raw_byte+0x36>
        if (send_byte & 0x80) {
    1bb0:	b245      	sxtb	r5, r0
    1bb2:	2d00      	cmp	r5, #0
    1bb4:	dbf3      	blt.n	1b9e <eink_send_raw_byte+0x1a>
    1bb6:	6156      	str	r6, [r2, #20]
    1bb8:	e7f2      	b.n	1ba0 <eink_send_raw_byte+0x1c>
    if(!f_send)
    1bba:	2900      	cmp	r1, #0
    1bbc:	d103      	bne.n	1bc6 <eink_send_raw_byte+0x42>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bbe:	2220      	movs	r2, #32
    1bc0:	23c0      	movs	r3, #192	; 0xc0
    1bc2:	05db      	lsls	r3, r3, #23
    1bc4:	619a      	str	r2, [r3, #24]
}
    1bc6:	bd70      	pop	{r4, r5, r6, pc}

00001bc8 <eink_write_data>:
{    
    1bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bca:	000c      	movs	r4, r1
    1bcc:	0015      	movs	r5, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bce:	26c0      	movs	r6, #192	; 0xc0
    1bd0:	05f6      	lsls	r6, r6, #23
    1bd2:	2701      	movs	r7, #1
    1bd4:	2394      	movs	r3, #148	; 0x94
    1bd6:	50f7      	str	r7, [r6, r3]
    1bd8:	3b74      	subs	r3, #116	; 0x74
    1bda:	6173      	str	r3, [r6, #20]
    eink_send_raw_byte(command, f_send);
    1bdc:	2100      	movs	r1, #0
    1bde:	4b07      	ldr	r3, [pc, #28]	; (1bfc <eink_write_data+0x34>)
    1be0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1be2:	2398      	movs	r3, #152	; 0x98
    1be4:	50f7      	str	r7, [r6, r3]
    if (data_bytes != 0) {
    1be6:	2d00      	cmp	r5, #0
    1be8:	d007      	beq.n	1bfa <eink_write_data+0x32>
    1bea:	1965      	adds	r5, r4, r5
            eink_send_raw_byte(*data, f_send);
    1bec:	4e03      	ldr	r6, [pc, #12]	; (1bfc <eink_write_data+0x34>)
    1bee:	7820      	ldrb	r0, [r4, #0]
    1bf0:	2100      	movs	r1, #0
    1bf2:	47b0      	blx	r6
            data++;
    1bf4:	3401      	adds	r4, #1
        for (i=0;i<data_bytes;i++) {
    1bf6:	42a5      	cmp	r5, r4
    1bf8:	d1f9      	bne.n	1bee <eink_write_data+0x26>
}
    1bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bfc:	00001b85 	.word	0x00001b85

00001c00 <eink_et011tt2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_et011tt2_refresh_display_buffer(void)
{
    1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c02:	b085      	sub	sp, #20
    /* Enable power to the display */   
    //eink_write_data(UC8173_PON, 0, 0);
    //uc8173_wait_for_busy_low();
    
	/* Upload update waveforms */
	if(uc8173_global_instance.display_config.update_mode == UPDATE_FAST)
    1c04:	4b2c      	ldr	r3, [pc, #176]	; (1cb8 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1c06:	785b      	ldrb	r3, [r3, #1]
    1c08:	2b01      	cmp	r3, #1
    1c0a:	d03c      	beq.n	1c86 <eink_et011tt2_refresh_display_buffer+0x86>
}

static inline void uc8173_send_et011tt2_a2_lut(void)
{
	/* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_A2)
    1c0c:	4b2a      	ldr	r3, [pc, #168]	; (1cb8 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1c0e:	78db      	ldrb	r3, [r3, #3]
    1c10:	2b02      	cmp	r3, #2
    1c12:	d014      	beq.n	1c3e <eink_et011tt2_refresh_display_buffer+0x3e>
	{
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_A2;
    1c14:	2202      	movs	r2, #2
    1c16:	4b28      	ldr	r3, [pc, #160]	; (1cb8 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1c18:	70da      	strb	r2, [r3, #3]
		
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_A2_LUT, 32);
    1c1a:	4c28      	ldr	r4, [pc, #160]	; (1cbc <eink_et011tt2_refresh_display_buffer+0xbc>)
    1c1c:	0021      	movs	r1, r4
    1c1e:	3120      	adds	r1, #32
    1c20:	321e      	adds	r2, #30
    1c22:	2020      	movs	r0, #32
    1c24:	4d26      	ldr	r5, [pc, #152]	; (1cc0 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1c26:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_A2_LUT, 512);
    1c28:	0021      	movs	r1, r4
    1c2a:	3140      	adds	r1, #64	; 0x40
    1c2c:	2280      	movs	r2, #128	; 0x80
    1c2e:	0092      	lsls	r2, r2, #2
    1c30:	2022      	movs	r0, #34	; 0x22
    1c32:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    1c34:	2280      	movs	r2, #128	; 0x80
    1c36:	4923      	ldr	r1, [pc, #140]	; (1cc4 <eink_et011tt2_refresh_display_buffer+0xc4>)
    1c38:	3120      	adds	r1, #32
    1c3a:	2026      	movs	r0, #38	; 0x26
    1c3c:	47a8      	blx	r5
    } else {
		uc8173_send_et011tt2_a2_lut();
    }
	
    /* Display Refresh */
    eink_data[0] = 0x00; /* GU2 Update Mode */
    1c3e:	a902      	add	r1, sp, #8
    1c40:	2300      	movs	r3, #0
    1c42:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1c44:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1c46:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1c48:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0xEF; /* W = 249 */
    1c4a:	22ef      	movs	r2, #239	; 0xef
    1c4c:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1c4e:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xEF; /* H = 249 */
    1c50:	718a      	strb	r2, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1c52:	3ae8      	subs	r2, #232	; 0xe8
    1c54:	2012      	movs	r0, #18
    1c56:	4b1a      	ldr	r3, [pc, #104]	; (1cc0 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1c58:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1c5a:	4f1b      	ldr	r7, [pc, #108]	; (1cc8 <eink_et011tt2_refresh_display_buffer+0xc8>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    1c5c:	4e1b      	ldr	r6, [pc, #108]	; (1ccc <eink_et011tt2_refresh_display_buffer+0xcc>)
	CRITICAL_SECTION_ENTER();
    1c5e:	a801      	add	r0, sp, #4
    1c60:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c62:	23c0      	movs	r3, #192	; 0xc0
    1c64:	05db      	lsls	r3, r3, #23
    1c66:	2580      	movs	r5, #128	; 0x80
    1c68:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c6a:	22a0      	movs	r2, #160	; 0xa0
    1c6c:	4918      	ldr	r1, [pc, #96]	; (1cd0 <eink_et011tt2_refresh_display_buffer+0xd0>)
    1c6e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c70:	2190      	movs	r1, #144	; 0x90
    1c72:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1c74:	4053      	eors	r3, r2
    1c76:	401c      	ands	r4, r3
    1c78:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1c7a:	a801      	add	r0, sp, #4
    1c7c:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1c7e:	4225      	tst	r5, r4
    1c80:	d0ed      	beq.n	1c5e <eink_et011tt2_refresh_display_buffer+0x5e>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    //eink_write_data(UC8173_POF, 0, 0);
    //uc8173_wait_for_busy_low();
}
    1c82:	b005      	add	sp, #20
    1c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_GU)
    1c86:	4b0c      	ldr	r3, [pc, #48]	; (1cb8 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1c88:	78db      	ldrb	r3, [r3, #3]
    1c8a:	2b01      	cmp	r3, #1
    1c8c:	d0d7      	beq.n	1c3e <eink_et011tt2_refresh_display_buffer+0x3e>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_GU;
    1c8e:	2201      	movs	r2, #1
    1c90:	4b09      	ldr	r3, [pc, #36]	; (1cb8 <eink_et011tt2_refresh_display_buffer+0xb8>)
    1c92:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_GU_LUT, 32);
    1c94:	4c0f      	ldr	r4, [pc, #60]	; (1cd4 <eink_et011tt2_refresh_display_buffer+0xd4>)
    1c96:	321f      	adds	r2, #31
    1c98:	0021      	movs	r1, r4
    1c9a:	2020      	movs	r0, #32
    1c9c:	4d08      	ldr	r5, [pc, #32]	; (1cc0 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1c9e:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_GU_LUT, 512);
    1ca0:	0021      	movs	r1, r4
    1ca2:	3120      	adds	r1, #32
    1ca4:	2280      	movs	r2, #128	; 0x80
    1ca6:	0092      	lsls	r2, r2, #2
    1ca8:	2022      	movs	r0, #34	; 0x22
    1caa:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    1cac:	2280      	movs	r2, #128	; 0x80
    1cae:	4905      	ldr	r1, [pc, #20]	; (1cc4 <eink_et011tt2_refresh_display_buffer+0xc4>)
    1cb0:	3120      	adds	r1, #32
    1cb2:	2026      	movs	r0, #38	; 0x26
    1cb4:	47a8      	blx	r5
    1cb6:	e7c2      	b.n	1c3e <eink_et011tt2_refresh_display_buffer+0x3e>
    1cb8:	20000390 	.word	0x20000390
    1cbc:	00004ab8 	.word	0x00004ab8
    1cc0:	00001bc9 	.word	0x00001bc9
    1cc4:	00004a38 	.word	0x00004a38
    1cc8:	0000034d 	.word	0x0000034d
    1ccc:	0000035b 	.word	0x0000035b
    1cd0:	41004400 	.word	0x41004400
    1cd4:	00004838 	.word	0x00004838

00001cd8 <eink_ed013tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed013tc1_refresh_display_buffer(void)
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	b087      	sub	sp, #28
    uint8_t eink_data[7];
    
    /* Enable power to the display */   
    eink_write_data(UC8173_PON, 0, 0);
    1cdc:	2200      	movs	r2, #0
    1cde:	2100      	movs	r1, #0
    1ce0:	2004      	movs	r0, #4
    1ce2:	4b35      	ldr	r3, [pc, #212]	; (1db8 <eink_ed013tc1_refresh_display_buffer+0xe0>)
    1ce4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1ce6:	4f35      	ldr	r7, [pc, #212]	; (1dbc <eink_ed013tc1_refresh_display_buffer+0xe4>)
	CRITICAL_SECTION_LEAVE();
    1ce8:	4e35      	ldr	r6, [pc, #212]	; (1dc0 <eink_ed013tc1_refresh_display_buffer+0xe8>)
	CRITICAL_SECTION_ENTER();
    1cea:	a801      	add	r0, sp, #4
    1cec:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1cee:	23c0      	movs	r3, #192	; 0xc0
    1cf0:	05db      	lsls	r3, r3, #23
    1cf2:	2580      	movs	r5, #128	; 0x80
    1cf4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1cf6:	22a0      	movs	r2, #160	; 0xa0
    1cf8:	4932      	ldr	r1, [pc, #200]	; (1dc4 <eink_ed013tc1_refresh_display_buffer+0xec>)
    1cfa:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1cfc:	2190      	movs	r1, #144	; 0x90
    1cfe:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d00:	4053      	eors	r3, r2
    1d02:	401c      	ands	r4, r3
    1d04:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d06:	a801      	add	r0, sp, #4
    1d08:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1d0a:	4225      	tst	r5, r4
    1d0c:	d0ed      	beq.n	1cea <eink_ed013tc1_refresh_display_buffer+0x12>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ED013TC1_GC2)
    1d0e:	4b2e      	ldr	r3, [pc, #184]	; (1dc8 <eink_ed013tc1_refresh_display_buffer+0xf0>)
    1d10:	78db      	ldrb	r3, [r3, #3]
    1d12:	2b00      	cmp	r3, #0
    1d14:	d13e      	bne.n	1d94 <eink_ed013tc1_refresh_display_buffer+0xbc>
    uc8173_wait_for_busy_low();
    
    uc8173_send_ed013tc1_gc2_lut();
	
    /* Display Refresh */
    eink_data[0] = 0x01; /* GU2 Update Mode */
    1d16:	a904      	add	r1, sp, #16
    1d18:	2301      	movs	r3, #1
    1d1a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1d1c:	2300      	movs	r3, #0
    1d1e:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1d20:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1d22:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    1d24:	227f      	movs	r2, #127	; 0x7f
    1d26:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1d28:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    1d2a:	33ff      	adds	r3, #255	; 0xff
    1d2c:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1d2e:	3a78      	subs	r2, #120	; 0x78
    1d30:	2012      	movs	r0, #18
    1d32:	4b21      	ldr	r3, [pc, #132]	; (1db8 <eink_ed013tc1_refresh_display_buffer+0xe0>)
    1d34:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1d36:	4f21      	ldr	r7, [pc, #132]	; (1dbc <eink_ed013tc1_refresh_display_buffer+0xe4>)
	CRITICAL_SECTION_LEAVE();
    1d38:	4e21      	ldr	r6, [pc, #132]	; (1dc0 <eink_ed013tc1_refresh_display_buffer+0xe8>)
	CRITICAL_SECTION_ENTER();
    1d3a:	a802      	add	r0, sp, #8
    1d3c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d3e:	23c0      	movs	r3, #192	; 0xc0
    1d40:	05db      	lsls	r3, r3, #23
    1d42:	2580      	movs	r5, #128	; 0x80
    1d44:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d46:	22a0      	movs	r2, #160	; 0xa0
    1d48:	491e      	ldr	r1, [pc, #120]	; (1dc4 <eink_ed013tc1_refresh_display_buffer+0xec>)
    1d4a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d4c:	2190      	movs	r1, #144	; 0x90
    1d4e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d50:	4053      	eors	r3, r2
    1d52:	401c      	ands	r4, r3
    1d54:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d56:	a802      	add	r0, sp, #8
    1d58:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1d5a:	4225      	tst	r5, r4
    1d5c:	d0ed      	beq.n	1d3a <eink_ed013tc1_refresh_display_buffer+0x62>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    eink_write_data(UC8173_POF, 0, 0);
    1d5e:	2200      	movs	r2, #0
    1d60:	2100      	movs	r1, #0
    1d62:	2002      	movs	r0, #2
    1d64:	4b14      	ldr	r3, [pc, #80]	; (1db8 <eink_ed013tc1_refresh_display_buffer+0xe0>)
    1d66:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1d68:	4f14      	ldr	r7, [pc, #80]	; (1dbc <eink_ed013tc1_refresh_display_buffer+0xe4>)
	CRITICAL_SECTION_LEAVE();
    1d6a:	4e15      	ldr	r6, [pc, #84]	; (1dc0 <eink_ed013tc1_refresh_display_buffer+0xe8>)
	CRITICAL_SECTION_ENTER();
    1d6c:	a803      	add	r0, sp, #12
    1d6e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d70:	23c0      	movs	r3, #192	; 0xc0
    1d72:	05db      	lsls	r3, r3, #23
    1d74:	2580      	movs	r5, #128	; 0x80
    1d76:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d78:	22a0      	movs	r2, #160	; 0xa0
    1d7a:	4912      	ldr	r1, [pc, #72]	; (1dc4 <eink_ed013tc1_refresh_display_buffer+0xec>)
    1d7c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d7e:	2190      	movs	r1, #144	; 0x90
    1d80:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d82:	4053      	eors	r3, r2
    1d84:	401c      	ands	r4, r3
    1d86:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d88:	a803      	add	r0, sp, #12
    1d8a:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    1d8c:	4225      	tst	r5, r4
    1d8e:	d1ed      	bne.n	1d6c <eink_ed013tc1_refresh_display_buffer+0x94>
    uc8173_wait_for_busy_high();
}
    1d90:	b007      	add	sp, #28
    1d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ED013TC1_GC2;
    1d94:	2200      	movs	r2, #0
    1d96:	4b0c      	ldr	r3, [pc, #48]	; (1dc8 <eink_ed013tc1_refresh_display_buffer+0xf0>)
    1d98:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    1d9a:	3220      	adds	r2, #32
    1d9c:	2155      	movs	r1, #85	; 0x55
    1d9e:	2020      	movs	r0, #32
    1da0:	4c05      	ldr	r4, [pc, #20]	; (1db8 <eink_ed013tc1_refresh_display_buffer+0xe0>)
    1da2:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    1da4:	2280      	movs	r2, #128	; 0x80
    1da6:	0092      	lsls	r2, r2, #2
    1da8:	2181      	movs	r1, #129	; 0x81
    1daa:	2022      	movs	r0, #34	; 0x22
    1dac:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);	
    1dae:	2280      	movs	r2, #128	; 0x80
    1db0:	2100      	movs	r1, #0
    1db2:	2026      	movs	r0, #38	; 0x26
    1db4:	47a0      	blx	r4
    1db6:	e7ae      	b.n	1d16 <eink_ed013tc1_refresh_display_buffer+0x3e>
    1db8:	00001bc9 	.word	0x00001bc9
    1dbc:	0000034d 	.word	0x0000034d
    1dc0:	0000035b 	.word	0x0000035b
    1dc4:	41004400 	.word	0x41004400
    1dc8:	20000390 	.word	0x20000390

00001dcc <eink_ed029tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed029tc1_refresh_display_buffer(void)
{
    1dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dce:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1dd0:	2200      	movs	r2, #0
    1dd2:	2100      	movs	r1, #0
    1dd4:	2004      	movs	r0, #4
    1dd6:	4c1a      	ldr	r4, [pc, #104]	; (1e40 <eink_ed029tc1_refresh_display_buffer+0x74>)
    1dd8:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    1dda:	2200      	movs	r2, #0
    1ddc:	2100      	movs	r1, #0
    1dde:	2012      	movs	r0, #18
    1de0:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1de2:	4f18      	ldr	r7, [pc, #96]	; (1e44 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1de4:	4e18      	ldr	r6, [pc, #96]	; (1e48 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1de6:	4668      	mov	r0, sp
    1de8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1dea:	23c0      	movs	r3, #192	; 0xc0
    1dec:	05db      	lsls	r3, r3, #23
    1dee:	2580      	movs	r5, #128	; 0x80
    1df0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1df2:	22a0      	movs	r2, #160	; 0xa0
    1df4:	4915      	ldr	r1, [pc, #84]	; (1e4c <eink_ed029tc1_refresh_display_buffer+0x80>)
    1df6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1df8:	2190      	movs	r1, #144	; 0x90
    1dfa:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1dfc:	4053      	eors	r3, r2
    1dfe:	401c      	ands	r4, r3
    1e00:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e02:	4668      	mov	r0, sp
    1e04:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8151_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1e06:	4225      	tst	r5, r4
    1e08:	d0ed      	beq.n	1de6 <eink_ed029tc1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    1e0a:	2200      	movs	r2, #0
    1e0c:	2100      	movs	r1, #0
    1e0e:	2002      	movs	r0, #2
    1e10:	4b0b      	ldr	r3, [pc, #44]	; (1e40 <eink_ed029tc1_refresh_display_buffer+0x74>)
    1e12:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1e14:	4f0b      	ldr	r7, [pc, #44]	; (1e44 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1e16:	4e0c      	ldr	r6, [pc, #48]	; (1e48 <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1e18:	a801      	add	r0, sp, #4
    1e1a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e1c:	23c0      	movs	r3, #192	; 0xc0
    1e1e:	05db      	lsls	r3, r3, #23
    1e20:	2580      	movs	r5, #128	; 0x80
    1e22:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e24:	22a0      	movs	r2, #160	; 0xa0
    1e26:	4909      	ldr	r1, [pc, #36]	; (1e4c <eink_ed029tc1_refresh_display_buffer+0x80>)
    1e28:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e2a:	2190      	movs	r1, #144	; 0x90
    1e2c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e2e:	4053      	eors	r3, r2
    1e30:	401c      	ands	r4, r3
    1e32:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e34:	a801      	add	r0, sp, #4
    1e36:	47b0      	blx	r6
    1e38:	4225      	tst	r5, r4
    1e3a:	d0ed      	beq.n	1e18 <eink_ed029tc1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    1e3c:	b003      	add	sp, #12
    1e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e40:	00001bc9 	.word	0x00001bc9
    1e44:	0000034d 	.word	0x0000034d
    1e48:	0000035b 	.word	0x0000035b
    1e4c:	41004400 	.word	0x41004400

00001e50 <eink_ed029tc1_put_display_buffer>:
{
    1e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e52:	46c6      	mov	lr, r8
    1e54:	b500      	push	{lr}
    1e56:	b084      	sub	sp, #16
    1e58:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    1e5a:	2200      	movs	r2, #0
    1e5c:	2100      	movs	r1, #0
    1e5e:	2004      	movs	r0, #4
    1e60:	4c44      	ldr	r4, [pc, #272]	; (1f74 <eink_ed029tc1_put_display_buffer+0x124>)
    1e62:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1e64:	4b44      	ldr	r3, [pc, #272]	; (1f78 <eink_ed029tc1_put_display_buffer+0x128>)
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	6919      	ldr	r1, [r3, #16]
    1e6a:	2294      	movs	r2, #148	; 0x94
    1e6c:	0152      	lsls	r2, r2, #5
    1e6e:	2010      	movs	r0, #16
    1e70:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1e72:	2200      	movs	r2, #0
    1e74:	2100      	movs	r1, #0
    1e76:	2011      	movs	r0, #17
    1e78:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1e7a:	4d40      	ldr	r5, [pc, #256]	; (1f7c <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1e7c:	4f40      	ldr	r7, [pc, #256]	; (1f80 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1e7e:	4668      	mov	r0, sp
    1e80:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e82:	23c0      	movs	r3, #192	; 0xc0
    1e84:	05db      	lsls	r3, r3, #23
    1e86:	2680      	movs	r6, #128	; 0x80
    1e88:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e8a:	22a0      	movs	r2, #160	; 0xa0
    1e8c:	493d      	ldr	r1, [pc, #244]	; (1f84 <eink_ed029tc1_put_display_buffer+0x134>)
    1e8e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e90:	2190      	movs	r1, #144	; 0x90
    1e92:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e94:	4053      	eors	r3, r2
    1e96:	401c      	ands	r4, r3
    1e98:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e9a:	4668      	mov	r0, sp
    1e9c:	47b8      	blx	r7
    1e9e:	4226      	tst	r6, r4
    1ea0:	d0ed      	beq.n	1e7e <eink_ed029tc1_put_display_buffer+0x2e>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1ea2:	4b35      	ldr	r3, [pc, #212]	; (1f78 <eink_ed029tc1_put_display_buffer+0x128>)
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	6959      	ldr	r1, [r3, #20]
    1ea8:	2294      	movs	r2, #148	; 0x94
    1eaa:	0152      	lsls	r2, r2, #5
    1eac:	2013      	movs	r0, #19
    1eae:	4c31      	ldr	r4, [pc, #196]	; (1f74 <eink_ed029tc1_put_display_buffer+0x124>)
    1eb0:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1eb2:	2200      	movs	r2, #0
    1eb4:	2100      	movs	r1, #0
    1eb6:	2011      	movs	r0, #17
    1eb8:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1eba:	4d30      	ldr	r5, [pc, #192]	; (1f7c <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1ebc:	4f30      	ldr	r7, [pc, #192]	; (1f80 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1ebe:	a801      	add	r0, sp, #4
    1ec0:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1ec2:	23c0      	movs	r3, #192	; 0xc0
    1ec4:	05db      	lsls	r3, r3, #23
    1ec6:	2680      	movs	r6, #128	; 0x80
    1ec8:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1eca:	22a0      	movs	r2, #160	; 0xa0
    1ecc:	492d      	ldr	r1, [pc, #180]	; (1f84 <eink_ed029tc1_put_display_buffer+0x134>)
    1ece:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ed0:	2190      	movs	r1, #144	; 0x90
    1ed2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ed4:	4053      	eors	r3, r2
    1ed6:	401c      	ands	r4, r3
    1ed8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1eda:	a801      	add	r0, sp, #4
    1edc:	47b8      	blx	r7
    1ede:	4226      	tst	r6, r4
    1ee0:	d0ed      	beq.n	1ebe <eink_ed029tc1_put_display_buffer+0x6e>
    if(refresh_display) {
    1ee2:	4643      	mov	r3, r8
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d12b      	bne.n	1f40 <eink_ed029tc1_put_display_buffer+0xf0>
    eink_write_data(UC8151_POF, 0, 0);
    1ee8:	2200      	movs	r2, #0
    1eea:	2100      	movs	r1, #0
    1eec:	2002      	movs	r0, #2
    1eee:	4b21      	ldr	r3, [pc, #132]	; (1f74 <eink_ed029tc1_put_display_buffer+0x124>)
    1ef0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1ef2:	4f22      	ldr	r7, [pc, #136]	; (1f7c <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1ef4:	4e22      	ldr	r6, [pc, #136]	; (1f80 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1ef6:	a803      	add	r0, sp, #12
    1ef8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1efa:	23c0      	movs	r3, #192	; 0xc0
    1efc:	05db      	lsls	r3, r3, #23
    1efe:	2580      	movs	r5, #128	; 0x80
    1f00:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f02:	22a0      	movs	r2, #160	; 0xa0
    1f04:	491f      	ldr	r1, [pc, #124]	; (1f84 <eink_ed029tc1_put_display_buffer+0x134>)
    1f06:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f08:	2190      	movs	r1, #144	; 0x90
    1f0a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f0c:	4053      	eors	r3, r2
    1f0e:	401c      	ands	r4, r3
    1f10:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f12:	a803      	add	r0, sp, #12
    1f14:	47b0      	blx	r6
    1f16:	4225      	tst	r5, r4
    1f18:	d0ed      	beq.n	1ef6 <eink_ed029tc1_put_display_buffer+0xa6>
    if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    1f1a:	4b1b      	ldr	r3, [pc, #108]	; (1f88 <eink_ed029tc1_put_display_buffer+0x138>)
    1f1c:	789b      	ldrb	r3, [r3, #2]
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d10a      	bne.n	1f38 <eink_ed029tc1_put_display_buffer+0xe8>
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1f22:	4c15      	ldr	r4, [pc, #84]	; (1f78 <eink_ed029tc1_put_display_buffer+0x128>)
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1f24:	2094      	movs	r0, #148	; 0x94
    1f26:	0140      	lsls	r0, r0, #5
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1f28:	6822      	ldr	r2, [r4, #0]
    1f2a:	6951      	ldr	r1, [r2, #20]
    1f2c:	5cc9      	ldrb	r1, [r1, r3]
    1f2e:	6912      	ldr	r2, [r2, #16]
    1f30:	54d1      	strb	r1, [r2, r3]
    1f32:	3301      	adds	r3, #1
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1f34:	4283      	cmp	r3, r0
    1f36:	d1f7      	bne.n	1f28 <eink_ed029tc1_put_display_buffer+0xd8>
}
    1f38:	b004      	add	sp, #16
    1f3a:	bc04      	pop	{r2}
    1f3c:	4690      	mov	r8, r2
    1f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    1f40:	2200      	movs	r2, #0
    1f42:	2100      	movs	r1, #0
    1f44:	2012      	movs	r0, #18
    1f46:	4b0b      	ldr	r3, [pc, #44]	; (1f74 <eink_ed029tc1_put_display_buffer+0x124>)
    1f48:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1f4a:	4f0c      	ldr	r7, [pc, #48]	; (1f7c <eink_ed029tc1_put_display_buffer+0x12c>)
	CRITICAL_SECTION_LEAVE();
    1f4c:	4e0c      	ldr	r6, [pc, #48]	; (1f80 <eink_ed029tc1_put_display_buffer+0x130>)
	CRITICAL_SECTION_ENTER();
    1f4e:	a802      	add	r0, sp, #8
    1f50:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f52:	23c0      	movs	r3, #192	; 0xc0
    1f54:	05db      	lsls	r3, r3, #23
    1f56:	2580      	movs	r5, #128	; 0x80
    1f58:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f5a:	22a0      	movs	r2, #160	; 0xa0
    1f5c:	4909      	ldr	r1, [pc, #36]	; (1f84 <eink_ed029tc1_put_display_buffer+0x134>)
    1f5e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f60:	2190      	movs	r1, #144	; 0x90
    1f62:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f64:	4053      	eors	r3, r2
    1f66:	401c      	ands	r4, r3
    1f68:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f6a:	a802      	add	r0, sp, #8
    1f6c:	47b0      	blx	r6
    1f6e:	4225      	tst	r5, r4
    1f70:	d0ed      	beq.n	1f4e <eink_ed029tc1_put_display_buffer+0xfe>
    1f72:	e7b9      	b.n	1ee8 <eink_ed029tc1_put_display_buffer+0x98>
    1f74:	00001bc9 	.word	0x00001bc9
    1f78:	20000430 	.word	0x20000430
    1f7c:	0000034d 	.word	0x0000034d
    1f80:	0000035b 	.word	0x0000035b
    1f84:	41004400 	.word	0x41004400
    1f88:	200003f8 	.word	0x200003f8

00001f8c <eink_el026tr1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_el026tr1_refresh_display_buffer(void)
{
    1f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8e:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1f90:	2200      	movs	r2, #0
    1f92:	2100      	movs	r1, #0
    1f94:	2004      	movs	r0, #4
    1f96:	4c1a      	ldr	r4, [pc, #104]	; (2000 <STACK_SIZE>)
    1f98:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    1f9a:	2200      	movs	r2, #0
    1f9c:	2100      	movs	r1, #0
    1f9e:	2012      	movs	r0, #18
    1fa0:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1fa2:	4f18      	ldr	r7, [pc, #96]	; (2004 <STACK_SIZE+0x4>)
	CRITICAL_SECTION_LEAVE();
    1fa4:	4e18      	ldr	r6, [pc, #96]	; (2008 <STACK_SIZE+0x8>)
	CRITICAL_SECTION_ENTER();
    1fa6:	4668      	mov	r0, sp
    1fa8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1faa:	23c0      	movs	r3, #192	; 0xc0
    1fac:	05db      	lsls	r3, r3, #23
    1fae:	2580      	movs	r5, #128	; 0x80
    1fb0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fb2:	22a0      	movs	r2, #160	; 0xa0
    1fb4:	4915      	ldr	r1, [pc, #84]	; (200c <STACK_SIZE+0xc>)
    1fb6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fb8:	2190      	movs	r1, #144	; 0x90
    1fba:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fbc:	4053      	eors	r3, r2
    1fbe:	401c      	ands	r4, r3
    1fc0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1fc2:	4668      	mov	r0, sp
    1fc4:	47b0      	blx	r6
    1fc6:	4225      	tst	r5, r4
    1fc8:	d0ed      	beq.n	1fa6 <eink_el026tr1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    1fca:	2200      	movs	r2, #0
    1fcc:	2100      	movs	r1, #0
    1fce:	2002      	movs	r0, #2
    1fd0:	4b0b      	ldr	r3, [pc, #44]	; (2000 <STACK_SIZE>)
    1fd2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1fd4:	4f0b      	ldr	r7, [pc, #44]	; (2004 <STACK_SIZE+0x4>)
	CRITICAL_SECTION_LEAVE();
    1fd6:	4e0c      	ldr	r6, [pc, #48]	; (2008 <STACK_SIZE+0x8>)
	CRITICAL_SECTION_ENTER();
    1fd8:	a801      	add	r0, sp, #4
    1fda:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1fdc:	23c0      	movs	r3, #192	; 0xc0
    1fde:	05db      	lsls	r3, r3, #23
    1fe0:	2580      	movs	r5, #128	; 0x80
    1fe2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fe4:	22a0      	movs	r2, #160	; 0xa0
    1fe6:	4909      	ldr	r1, [pc, #36]	; (200c <STACK_SIZE+0xc>)
    1fe8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fea:	2190      	movs	r1, #144	; 0x90
    1fec:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fee:	4053      	eors	r3, r2
    1ff0:	401c      	ands	r4, r3
    1ff2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ff4:	a801      	add	r0, sp, #4
    1ff6:	47b0      	blx	r6
    1ff8:	4225      	tst	r5, r4
    1ffa:	d0ed      	beq.n	1fd8 <eink_el026tr1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    1ffc:	b003      	add	sp, #12
    1ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2000:	00001bc9 	.word	0x00001bc9
    2004:	0000034d 	.word	0x0000034d
    2008:	0000035b 	.word	0x0000035b
    200c:	41004400 	.word	0x41004400

00002010 <eink_el026tr1_put_display_buffer>:
{
    2010:	b5f0      	push	{r4, r5, r6, r7, lr}
    2012:	46c6      	mov	lr, r8
    2014:	b500      	push	{lr}
    2016:	b084      	sub	sp, #16
    2018:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    201a:	2200      	movs	r2, #0
    201c:	2100      	movs	r1, #0
    201e:	2004      	movs	r0, #4
    2020:	4c3c      	ldr	r4, [pc, #240]	; (2114 <eink_el026tr1_put_display_buffer+0x104>)
    2022:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    2024:	4b3c      	ldr	r3, [pc, #240]	; (2118 <eink_el026tr1_put_display_buffer+0x108>)
    2026:	681b      	ldr	r3, [r3, #0]
    2028:	6919      	ldr	r1, [r3, #16]
    202a:	4a3c      	ldr	r2, [pc, #240]	; (211c <eink_el026tr1_put_display_buffer+0x10c>)
    202c:	2010      	movs	r0, #16
    202e:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    2030:	2200      	movs	r2, #0
    2032:	2100      	movs	r1, #0
    2034:	2011      	movs	r0, #17
    2036:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2038:	4d39      	ldr	r5, [pc, #228]	; (2120 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    203a:	4f3a      	ldr	r7, [pc, #232]	; (2124 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    203c:	4668      	mov	r0, sp
    203e:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2040:	23c0      	movs	r3, #192	; 0xc0
    2042:	05db      	lsls	r3, r3, #23
    2044:	2680      	movs	r6, #128	; 0x80
    2046:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2048:	22a0      	movs	r2, #160	; 0xa0
    204a:	4937      	ldr	r1, [pc, #220]	; (2128 <eink_el026tr1_put_display_buffer+0x118>)
    204c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    204e:	2190      	movs	r1, #144	; 0x90
    2050:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2052:	4053      	eors	r3, r2
    2054:	401c      	ands	r4, r3
    2056:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2058:	4668      	mov	r0, sp
    205a:	47b8      	blx	r7
    205c:	4226      	tst	r6, r4
    205e:	d0ed      	beq.n	203c <eink_el026tr1_put_display_buffer+0x2c>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    2060:	4b2d      	ldr	r3, [pc, #180]	; (2118 <eink_el026tr1_put_display_buffer+0x108>)
    2062:	681b      	ldr	r3, [r3, #0]
    2064:	6959      	ldr	r1, [r3, #20]
    2066:	4a2d      	ldr	r2, [pc, #180]	; (211c <eink_el026tr1_put_display_buffer+0x10c>)
    2068:	2013      	movs	r0, #19
    206a:	4c2a      	ldr	r4, [pc, #168]	; (2114 <eink_el026tr1_put_display_buffer+0x104>)
    206c:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    206e:	2200      	movs	r2, #0
    2070:	2100      	movs	r1, #0
    2072:	2011      	movs	r0, #17
    2074:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2076:	4d2a      	ldr	r5, [pc, #168]	; (2120 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    2078:	4f2a      	ldr	r7, [pc, #168]	; (2124 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    207a:	a801      	add	r0, sp, #4
    207c:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    207e:	23c0      	movs	r3, #192	; 0xc0
    2080:	05db      	lsls	r3, r3, #23
    2082:	2680      	movs	r6, #128	; 0x80
    2084:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2086:	22a0      	movs	r2, #160	; 0xa0
    2088:	4927      	ldr	r1, [pc, #156]	; (2128 <eink_el026tr1_put_display_buffer+0x118>)
    208a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    208c:	2190      	movs	r1, #144	; 0x90
    208e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2090:	4053      	eors	r3, r2
    2092:	401c      	ands	r4, r3
    2094:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2096:	a801      	add	r0, sp, #4
    2098:	47b8      	blx	r7
    209a:	4226      	tst	r6, r4
    209c:	d0ed      	beq.n	207a <eink_el026tr1_put_display_buffer+0x6a>
    if(refresh_display) {
    209e:	4643      	mov	r3, r8
    20a0:	2b00      	cmp	r3, #0
    20a2:	d11c      	bne.n	20de <eink_el026tr1_put_display_buffer+0xce>
    eink_write_data(UC8151_POF, 0, 0);
    20a4:	2200      	movs	r2, #0
    20a6:	2100      	movs	r1, #0
    20a8:	2002      	movs	r0, #2
    20aa:	4b1a      	ldr	r3, [pc, #104]	; (2114 <eink_el026tr1_put_display_buffer+0x104>)
    20ac:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    20ae:	4f1c      	ldr	r7, [pc, #112]	; (2120 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    20b0:	4e1c      	ldr	r6, [pc, #112]	; (2124 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    20b2:	a803      	add	r0, sp, #12
    20b4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20b6:	23c0      	movs	r3, #192	; 0xc0
    20b8:	05db      	lsls	r3, r3, #23
    20ba:	2580      	movs	r5, #128	; 0x80
    20bc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20be:	22a0      	movs	r2, #160	; 0xa0
    20c0:	4919      	ldr	r1, [pc, #100]	; (2128 <eink_el026tr1_put_display_buffer+0x118>)
    20c2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20c4:	2190      	movs	r1, #144	; 0x90
    20c6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    20c8:	4053      	eors	r3, r2
    20ca:	401c      	ands	r4, r3
    20cc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    20ce:	a803      	add	r0, sp, #12
    20d0:	47b0      	blx	r6
    20d2:	4225      	tst	r5, r4
    20d4:	d0ed      	beq.n	20b2 <eink_el026tr1_put_display_buffer+0xa2>
}
    20d6:	b004      	add	sp, #16
    20d8:	bc04      	pop	{r2}
    20da:	4690      	mov	r8, r2
    20dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    20de:	2200      	movs	r2, #0
    20e0:	2100      	movs	r1, #0
    20e2:	2012      	movs	r0, #18
    20e4:	4b0b      	ldr	r3, [pc, #44]	; (2114 <eink_el026tr1_put_display_buffer+0x104>)
    20e6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    20e8:	4f0d      	ldr	r7, [pc, #52]	; (2120 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    20ea:	4e0e      	ldr	r6, [pc, #56]	; (2124 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    20ec:	a802      	add	r0, sp, #8
    20ee:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20f0:	23c0      	movs	r3, #192	; 0xc0
    20f2:	05db      	lsls	r3, r3, #23
    20f4:	2580      	movs	r5, #128	; 0x80
    20f6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20f8:	22a0      	movs	r2, #160	; 0xa0
    20fa:	490b      	ldr	r1, [pc, #44]	; (2128 <eink_el026tr1_put_display_buffer+0x118>)
    20fc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20fe:	2190      	movs	r1, #144	; 0x90
    2100:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2102:	4053      	eors	r3, r2
    2104:	401c      	ands	r4, r3
    2106:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2108:	a802      	add	r0, sp, #8
    210a:	47b0      	blx	r6
    210c:	4225      	tst	r5, r4
    210e:	d0ed      	beq.n	20ec <eink_el026tr1_put_display_buffer+0xdc>
    2110:	e7c8      	b.n	20a4 <eink_el026tr1_put_display_buffer+0x94>
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	00001bc9 	.word	0x00001bc9
    2118:	20000430 	.word	0x20000430
    211c:	000015f8 	.word	0x000015f8
    2120:	0000034d 	.word	0x0000034d
    2124:	0000035b 	.word	0x0000035b
    2128:	41004400 	.word	0x41004400

0000212c <eink_hink_e0154a05_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_hink_e0154a05_refresh_display_buffer(void)
{
    212c:	b5f0      	push	{r4, r5, r6, r7, lr}
    212e:	b085      	sub	sp, #20
    uint8_t eink_data[1];
    uint8_t temperature_value = 20;
    
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    2130:	4b23      	ldr	r3, [pc, #140]	; (21c0 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    2132:	785b      	ldrb	r3, [r3, #1]
    2134:	2b01      	cmp	r3, #1
    2136:	d036      	beq.n	21a6 <eink_hink_e0154a05_refresh_display_buffer+0x7a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
        else
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
        
    } else {
        eink_data[0] = 0xF7; /* Slow Update */
    2138:	22f7      	movs	r2, #247	; 0xf7
    213a:	ab03      	add	r3, sp, #12
    213c:	701a      	strb	r2, [r3, #0]
    }

    /* Display Update Control 2 */
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    213e:	2201      	movs	r2, #1
    2140:	a903      	add	r1, sp, #12
    2142:	2022      	movs	r0, #34	; 0x22
    2144:	4b1f      	ldr	r3, [pc, #124]	; (21c4 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    2146:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2148:	4f1f      	ldr	r7, [pc, #124]	; (21c8 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    214a:	4e20      	ldr	r6, [pc, #128]	; (21cc <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    214c:	a801      	add	r0, sp, #4
    214e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2150:	23c0      	movs	r3, #192	; 0xc0
    2152:	05db      	lsls	r3, r3, #23
    2154:	2580      	movs	r5, #128	; 0x80
    2156:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2158:	22a0      	movs	r2, #160	; 0xa0
    215a:	491d      	ldr	r1, [pc, #116]	; (21d0 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    215c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    215e:	2190      	movs	r1, #144	; 0x90
    2160:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2162:	4053      	eors	r3, r2
    2164:	401c      	ands	r4, r3
    2166:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2168:	a801      	add	r0, sp, #4
    216a:	47b0      	blx	r6
 * hold the MCU until it returns LOW again.
 */
static inline void ssd1608_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(gpio_get_pin_level(EINK_BUSY));
    216c:	4225      	tst	r5, r4
    216e:	d1ed      	bne.n	214c <eink_hink_e0154a05_refresh_display_buffer+0x20>
    ssd1608_wait_for_busy();
    
    /* Master Activation */
    eink_write_data(SSD1608_MA, 0, 0);
    2170:	2200      	movs	r2, #0
    2172:	2100      	movs	r1, #0
    2174:	2020      	movs	r0, #32
    2176:	4b13      	ldr	r3, [pc, #76]	; (21c4 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    2178:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    217a:	4f13      	ldr	r7, [pc, #76]	; (21c8 <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    217c:	4e13      	ldr	r6, [pc, #76]	; (21cc <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    217e:	a802      	add	r0, sp, #8
    2180:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2182:	23c0      	movs	r3, #192	; 0xc0
    2184:	05db      	lsls	r3, r3, #23
    2186:	2580      	movs	r5, #128	; 0x80
    2188:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    218a:	22a0      	movs	r2, #160	; 0xa0
    218c:	4910      	ldr	r1, [pc, #64]	; (21d0 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    218e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2190:	2190      	movs	r1, #144	; 0x90
    2192:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2194:	4053      	eors	r3, r2
    2196:	401c      	ands	r4, r3
    2198:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    219a:	a802      	add	r0, sp, #8
    219c:	47b0      	blx	r6
    219e:	4225      	tst	r5, r4
    21a0:	d1ed      	bne.n	217e <eink_hink_e0154a05_refresh_display_buffer+0x52>
    ssd1608_wait_for_busy();
}
    21a2:	b005      	add	sp, #20
    21a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    21a6:	4b06      	ldr	r3, [pc, #24]	; (21c0 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    21a8:	789b      	ldrb	r3, [r3, #2]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d103      	bne.n	21b6 <eink_hink_e0154a05_refresh_display_buffer+0x8a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    21ae:	22c7      	movs	r2, #199	; 0xc7
    21b0:	ab03      	add	r3, sp, #12
    21b2:	701a      	strb	r2, [r3, #0]
    21b4:	e7c3      	b.n	213e <eink_hink_e0154a05_refresh_display_buffer+0x12>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    21b6:	22ff      	movs	r2, #255	; 0xff
    21b8:	ab03      	add	r3, sp, #12
    21ba:	701a      	strb	r2, [r3, #0]
    21bc:	e7bf      	b.n	213e <eink_hink_e0154a05_refresh_display_buffer+0x12>
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	200003b8 	.word	0x200003b8
    21c4:	00001bc9 	.word	0x00001bc9
    21c8:	0000034d 	.word	0x0000034d
    21cc:	0000035b 	.word	0x0000035b
    21d0:	41004400 	.word	0x41004400

000021d4 <eink_ac040tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac040tc1_refresh_display_buffer(void)
{
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d6:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    21d8:	2200      	movs	r2, #0
    21da:	2100      	movs	r1, #0
    21dc:	2004      	movs	r0, #4
    21de:	4b25      	ldr	r3, [pc, #148]	; (2274 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    21e0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    21e2:	4f25      	ldr	r7, [pc, #148]	; (2278 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    21e4:	4e25      	ldr	r6, [pc, #148]	; (227c <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    21e6:	a801      	add	r0, sp, #4
    21e8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    21ea:	23c0      	movs	r3, #192	; 0xc0
    21ec:	05db      	lsls	r3, r3, #23
    21ee:	2580      	movs	r5, #128	; 0x80
    21f0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    21f2:	22a0      	movs	r2, #160	; 0xa0
    21f4:	4922      	ldr	r1, [pc, #136]	; (2280 <eink_ac040tc1_refresh_display_buffer+0xac>)
    21f6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21f8:	2190      	movs	r1, #144	; 0x90
    21fa:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21fc:	4053      	eors	r3, r2
    21fe:	401c      	ands	r4, r3
    2200:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2202:	a801      	add	r0, sp, #4
    2204:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8159_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    2206:	4225      	tst	r5, r4
    2208:	d0ed      	beq.n	21e6 <eink_ac040tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    220a:	2200      	movs	r2, #0
    220c:	2100      	movs	r1, #0
    220e:	2012      	movs	r0, #18
    2210:	4b18      	ldr	r3, [pc, #96]	; (2274 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    2212:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2214:	4f18      	ldr	r7, [pc, #96]	; (2278 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2216:	4e19      	ldr	r6, [pc, #100]	; (227c <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2218:	a802      	add	r0, sp, #8
    221a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    221c:	23c0      	movs	r3, #192	; 0xc0
    221e:	05db      	lsls	r3, r3, #23
    2220:	2580      	movs	r5, #128	; 0x80
    2222:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2224:	22a0      	movs	r2, #160	; 0xa0
    2226:	4916      	ldr	r1, [pc, #88]	; (2280 <eink_ac040tc1_refresh_display_buffer+0xac>)
    2228:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    222a:	2190      	movs	r1, #144	; 0x90
    222c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    222e:	4053      	eors	r3, r2
    2230:	401c      	ands	r4, r3
    2232:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2234:	a802      	add	r0, sp, #8
    2236:	47b0      	blx	r6
    2238:	4225      	tst	r5, r4
    223a:	d0ed      	beq.n	2218 <eink_ac040tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    223c:	2200      	movs	r2, #0
    223e:	2100      	movs	r1, #0
    2240:	2002      	movs	r0, #2
    2242:	4b0c      	ldr	r3, [pc, #48]	; (2274 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    2244:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2246:	4f0c      	ldr	r7, [pc, #48]	; (2278 <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2248:	4e0c      	ldr	r6, [pc, #48]	; (227c <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    224a:	a803      	add	r0, sp, #12
    224c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    224e:	23c0      	movs	r3, #192	; 0xc0
    2250:	05db      	lsls	r3, r3, #23
    2252:	2580      	movs	r5, #128	; 0x80
    2254:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2256:	22a0      	movs	r2, #160	; 0xa0
    2258:	4909      	ldr	r1, [pc, #36]	; (2280 <eink_ac040tc1_refresh_display_buffer+0xac>)
    225a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    225c:	2190      	movs	r1, #144	; 0x90
    225e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2260:	4053      	eors	r3, r2
    2262:	401c      	ands	r4, r3
    2264:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2266:	a803      	add	r0, sp, #12
    2268:	47b0      	blx	r6
    226a:	4225      	tst	r5, r4
    226c:	d0ed      	beq.n	224a <eink_ac040tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    226e:	b005      	add	sp, #20
    2270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	00001bc9 	.word	0x00001bc9
    2278:	0000034d 	.word	0x0000034d
    227c:	0000035b 	.word	0x0000035b
    2280:	41004400 	.word	0x41004400

00002284 <eink_ac040tc1_put_display_buffer>:
{
    2284:	b5f0      	push	{r4, r5, r6, r7, lr}
    2286:	46c6      	mov	lr, r8
    2288:	b500      	push	{lr}
    228a:	b084      	sub	sp, #16
    228c:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC040TC1_DISPLAY_BUFFER_SIZE);
    228e:	4b37      	ldr	r3, [pc, #220]	; (236c <eink_ac040tc1_put_display_buffer+0xe8>)
    2290:	681b      	ldr	r3, [r3, #0]
    2292:	6919      	ldr	r1, [r3, #16]
    2294:	228c      	movs	r2, #140	; 0x8c
    2296:	0292      	lsls	r2, r2, #10
    2298:	2010      	movs	r0, #16
    229a:	4b35      	ldr	r3, [pc, #212]	; (2370 <eink_ac040tc1_put_display_buffer+0xec>)
    229c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    229e:	4f35      	ldr	r7, [pc, #212]	; (2374 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    22a0:	4e35      	ldr	r6, [pc, #212]	; (2378 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    22a2:	4668      	mov	r0, sp
    22a4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22a6:	23c0      	movs	r3, #192	; 0xc0
    22a8:	05db      	lsls	r3, r3, #23
    22aa:	2580      	movs	r5, #128	; 0x80
    22ac:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22ae:	22a0      	movs	r2, #160	; 0xa0
    22b0:	4932      	ldr	r1, [pc, #200]	; (237c <eink_ac040tc1_put_display_buffer+0xf8>)
    22b2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22b4:	2190      	movs	r1, #144	; 0x90
    22b6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22b8:	4053      	eors	r3, r2
    22ba:	401c      	ands	r4, r3
    22bc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22be:	4668      	mov	r0, sp
    22c0:	47b0      	blx	r6
    22c2:	4225      	tst	r5, r4
    22c4:	d0ed      	beq.n	22a2 <eink_ac040tc1_put_display_buffer+0x1e>
    if(refresh_display) {
    22c6:	4643      	mov	r3, r8
    22c8:	2b00      	cmp	r3, #0
    22ca:	d103      	bne.n	22d4 <eink_ac040tc1_put_display_buffer+0x50>
}
    22cc:	b004      	add	sp, #16
    22ce:	bc04      	pop	{r2}
    22d0:	4690      	mov	r8, r2
    22d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    22d4:	2200      	movs	r2, #0
    22d6:	2100      	movs	r1, #0
    22d8:	2004      	movs	r0, #4
    22da:	4b25      	ldr	r3, [pc, #148]	; (2370 <eink_ac040tc1_put_display_buffer+0xec>)
    22dc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    22de:	4f25      	ldr	r7, [pc, #148]	; (2374 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    22e0:	4e25      	ldr	r6, [pc, #148]	; (2378 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    22e2:	a801      	add	r0, sp, #4
    22e4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22e6:	23c0      	movs	r3, #192	; 0xc0
    22e8:	05db      	lsls	r3, r3, #23
    22ea:	2580      	movs	r5, #128	; 0x80
    22ec:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22ee:	22a0      	movs	r2, #160	; 0xa0
    22f0:	4922      	ldr	r1, [pc, #136]	; (237c <eink_ac040tc1_put_display_buffer+0xf8>)
    22f2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22f4:	2190      	movs	r1, #144	; 0x90
    22f6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22f8:	4053      	eors	r3, r2
    22fa:	401c      	ands	r4, r3
    22fc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22fe:	a801      	add	r0, sp, #4
    2300:	47b0      	blx	r6
    2302:	4225      	tst	r5, r4
    2304:	d0ed      	beq.n	22e2 <eink_ac040tc1_put_display_buffer+0x5e>
        eink_write_data(UC8159_DRF, 0, 0);
    2306:	2200      	movs	r2, #0
    2308:	2100      	movs	r1, #0
    230a:	2012      	movs	r0, #18
    230c:	4b18      	ldr	r3, [pc, #96]	; (2370 <eink_ac040tc1_put_display_buffer+0xec>)
    230e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2310:	4f18      	ldr	r7, [pc, #96]	; (2374 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2312:	4e19      	ldr	r6, [pc, #100]	; (2378 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2314:	a802      	add	r0, sp, #8
    2316:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2318:	23c0      	movs	r3, #192	; 0xc0
    231a:	05db      	lsls	r3, r3, #23
    231c:	2580      	movs	r5, #128	; 0x80
    231e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2320:	22a0      	movs	r2, #160	; 0xa0
    2322:	4916      	ldr	r1, [pc, #88]	; (237c <eink_ac040tc1_put_display_buffer+0xf8>)
    2324:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2326:	2190      	movs	r1, #144	; 0x90
    2328:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    232a:	4053      	eors	r3, r2
    232c:	401c      	ands	r4, r3
    232e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2330:	a802      	add	r0, sp, #8
    2332:	47b0      	blx	r6
    2334:	4225      	tst	r5, r4
    2336:	d0ed      	beq.n	2314 <eink_ac040tc1_put_display_buffer+0x90>
        eink_write_data(UC8159_POF, 0, 0);
    2338:	2200      	movs	r2, #0
    233a:	2100      	movs	r1, #0
    233c:	2002      	movs	r0, #2
    233e:	4b0c      	ldr	r3, [pc, #48]	; (2370 <eink_ac040tc1_put_display_buffer+0xec>)
    2340:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2342:	4f0c      	ldr	r7, [pc, #48]	; (2374 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2344:	4e0c      	ldr	r6, [pc, #48]	; (2378 <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2346:	a803      	add	r0, sp, #12
    2348:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    234a:	23c0      	movs	r3, #192	; 0xc0
    234c:	05db      	lsls	r3, r3, #23
    234e:	2580      	movs	r5, #128	; 0x80
    2350:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2352:	22a0      	movs	r2, #160	; 0xa0
    2354:	4909      	ldr	r1, [pc, #36]	; (237c <eink_ac040tc1_put_display_buffer+0xf8>)
    2356:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2358:	2190      	movs	r1, #144	; 0x90
    235a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    235c:	4053      	eors	r3, r2
    235e:	401c      	ands	r4, r3
    2360:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2362:	a803      	add	r0, sp, #12
    2364:	47b0      	blx	r6
    2366:	4225      	tst	r5, r4
    2368:	d0ed      	beq.n	2346 <eink_ac040tc1_put_display_buffer+0xc2>
    236a:	e7af      	b.n	22cc <eink_ac040tc1_put_display_buffer+0x48>
    236c:	20000430 	.word	0x20000430
    2370:	00001bc9 	.word	0x00001bc9
    2374:	0000034d 	.word	0x0000034d
    2378:	0000035b 	.word	0x0000035b
    237c:	41004400 	.word	0x41004400

00002380 <eink_ac057tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac057tc1_refresh_display_buffer(void)
{
    2380:	b5f0      	push	{r4, r5, r6, r7, lr}
    2382:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2384:	2200      	movs	r2, #0
    2386:	2100      	movs	r1, #0
    2388:	2004      	movs	r0, #4
    238a:	4b25      	ldr	r3, [pc, #148]	; (2420 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    238c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    238e:	4f25      	ldr	r7, [pc, #148]	; (2424 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2390:	4e25      	ldr	r6, [pc, #148]	; (2428 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2392:	a801      	add	r0, sp, #4
    2394:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2396:	23c0      	movs	r3, #192	; 0xc0
    2398:	05db      	lsls	r3, r3, #23
    239a:	2580      	movs	r5, #128	; 0x80
    239c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    239e:	22a0      	movs	r2, #160	; 0xa0
    23a0:	4922      	ldr	r1, [pc, #136]	; (242c <eink_ac057tc1_refresh_display_buffer+0xac>)
    23a2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23a4:	2190      	movs	r1, #144	; 0x90
    23a6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23a8:	4053      	eors	r3, r2
    23aa:	401c      	ands	r4, r3
    23ac:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23ae:	a801      	add	r0, sp, #4
    23b0:	47b0      	blx	r6
    23b2:	4225      	tst	r5, r4
    23b4:	d0ed      	beq.n	2392 <eink_ac057tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    23b6:	2200      	movs	r2, #0
    23b8:	2100      	movs	r1, #0
    23ba:	2012      	movs	r0, #18
    23bc:	4b18      	ldr	r3, [pc, #96]	; (2420 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    23be:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23c0:	4f18      	ldr	r7, [pc, #96]	; (2424 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    23c2:	4e19      	ldr	r6, [pc, #100]	; (2428 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    23c4:	a802      	add	r0, sp, #8
    23c6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23c8:	23c0      	movs	r3, #192	; 0xc0
    23ca:	05db      	lsls	r3, r3, #23
    23cc:	2580      	movs	r5, #128	; 0x80
    23ce:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23d0:	22a0      	movs	r2, #160	; 0xa0
    23d2:	4916      	ldr	r1, [pc, #88]	; (242c <eink_ac057tc1_refresh_display_buffer+0xac>)
    23d4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23d6:	2190      	movs	r1, #144	; 0x90
    23d8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23da:	4053      	eors	r3, r2
    23dc:	401c      	ands	r4, r3
    23de:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23e0:	a802      	add	r0, sp, #8
    23e2:	47b0      	blx	r6
    23e4:	4225      	tst	r5, r4
    23e6:	d0ed      	beq.n	23c4 <eink_ac057tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    23e8:	2200      	movs	r2, #0
    23ea:	2100      	movs	r1, #0
    23ec:	2002      	movs	r0, #2
    23ee:	4b0c      	ldr	r3, [pc, #48]	; (2420 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    23f0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23f2:	4f0c      	ldr	r7, [pc, #48]	; (2424 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    23f4:	4e0c      	ldr	r6, [pc, #48]	; (2428 <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    23f6:	a803      	add	r0, sp, #12
    23f8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23fa:	23c0      	movs	r3, #192	; 0xc0
    23fc:	05db      	lsls	r3, r3, #23
    23fe:	2580      	movs	r5, #128	; 0x80
    2400:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2402:	22a0      	movs	r2, #160	; 0xa0
    2404:	4909      	ldr	r1, [pc, #36]	; (242c <eink_ac057tc1_refresh_display_buffer+0xac>)
    2406:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2408:	2190      	movs	r1, #144	; 0x90
    240a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    240c:	4053      	eors	r3, r2
    240e:	401c      	ands	r4, r3
    2410:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2412:	a803      	add	r0, sp, #12
    2414:	47b0      	blx	r6
    2416:	4225      	tst	r5, r4
    2418:	d0ed      	beq.n	23f6 <eink_ac057tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    241a:	b005      	add	sp, #20
    241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	00001bc9 	.word	0x00001bc9
    2424:	0000034d 	.word	0x0000034d
    2428:	0000035b 	.word	0x0000035b
    242c:	41004400 	.word	0x41004400

00002430 <eink_ac057tc1_put_display_buffer>:
{
    2430:	b5f0      	push	{r4, r5, r6, r7, lr}
    2432:	46c6      	mov	lr, r8
    2434:	b500      	push	{lr}
    2436:	b084      	sub	sp, #16
    2438:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC057TC1_DISPLAY_BUFFER_SIZE);
    243a:	4b37      	ldr	r3, [pc, #220]	; (2518 <eink_ac057tc1_put_display_buffer+0xe8>)
    243c:	681b      	ldr	r3, [r3, #0]
    243e:	6919      	ldr	r1, [r3, #16]
    2440:	4a36      	ldr	r2, [pc, #216]	; (251c <eink_ac057tc1_put_display_buffer+0xec>)
    2442:	2010      	movs	r0, #16
    2444:	4b36      	ldr	r3, [pc, #216]	; (2520 <eink_ac057tc1_put_display_buffer+0xf0>)
    2446:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2448:	4f36      	ldr	r7, [pc, #216]	; (2524 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    244a:	4e37      	ldr	r6, [pc, #220]	; (2528 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    244c:	4668      	mov	r0, sp
    244e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2450:	23c0      	movs	r3, #192	; 0xc0
    2452:	05db      	lsls	r3, r3, #23
    2454:	2580      	movs	r5, #128	; 0x80
    2456:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2458:	22a0      	movs	r2, #160	; 0xa0
    245a:	4934      	ldr	r1, [pc, #208]	; (252c <eink_ac057tc1_put_display_buffer+0xfc>)
    245c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    245e:	2190      	movs	r1, #144	; 0x90
    2460:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2462:	4053      	eors	r3, r2
    2464:	401c      	ands	r4, r3
    2466:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2468:	4668      	mov	r0, sp
    246a:	47b0      	blx	r6
    246c:	4225      	tst	r5, r4
    246e:	d0ed      	beq.n	244c <eink_ac057tc1_put_display_buffer+0x1c>
    if(refresh_display) {
    2470:	4643      	mov	r3, r8
    2472:	2b00      	cmp	r3, #0
    2474:	d103      	bne.n	247e <eink_ac057tc1_put_display_buffer+0x4e>
}
    2476:	b004      	add	sp, #16
    2478:	bc04      	pop	{r2}
    247a:	4690      	mov	r8, r2
    247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    247e:	2200      	movs	r2, #0
    2480:	2100      	movs	r1, #0
    2482:	2004      	movs	r0, #4
    2484:	4b26      	ldr	r3, [pc, #152]	; (2520 <eink_ac057tc1_put_display_buffer+0xf0>)
    2486:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2488:	4f26      	ldr	r7, [pc, #152]	; (2524 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    248a:	4e27      	ldr	r6, [pc, #156]	; (2528 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    248c:	a801      	add	r0, sp, #4
    248e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2490:	23c0      	movs	r3, #192	; 0xc0
    2492:	05db      	lsls	r3, r3, #23
    2494:	2580      	movs	r5, #128	; 0x80
    2496:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2498:	22a0      	movs	r2, #160	; 0xa0
    249a:	4924      	ldr	r1, [pc, #144]	; (252c <eink_ac057tc1_put_display_buffer+0xfc>)
    249c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    249e:	2190      	movs	r1, #144	; 0x90
    24a0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    24a2:	4053      	eors	r3, r2
    24a4:	401c      	ands	r4, r3
    24a6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    24a8:	a801      	add	r0, sp, #4
    24aa:	47b0      	blx	r6
    24ac:	4225      	tst	r5, r4
    24ae:	d0ed      	beq.n	248c <eink_ac057tc1_put_display_buffer+0x5c>
        eink_write_data(UC8159_DRF, 0, 0);
    24b0:	2200      	movs	r2, #0
    24b2:	2100      	movs	r1, #0
    24b4:	2012      	movs	r0, #18
    24b6:	4b1a      	ldr	r3, [pc, #104]	; (2520 <eink_ac057tc1_put_display_buffer+0xf0>)
    24b8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    24ba:	4f1a      	ldr	r7, [pc, #104]	; (2524 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    24bc:	4e1a      	ldr	r6, [pc, #104]	; (2528 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    24be:	a802      	add	r0, sp, #8
    24c0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    24c2:	23c0      	movs	r3, #192	; 0xc0
    24c4:	05db      	lsls	r3, r3, #23
    24c6:	2580      	movs	r5, #128	; 0x80
    24c8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    24ca:	22a0      	movs	r2, #160	; 0xa0
    24cc:	4917      	ldr	r1, [pc, #92]	; (252c <eink_ac057tc1_put_display_buffer+0xfc>)
    24ce:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    24d0:	2190      	movs	r1, #144	; 0x90
    24d2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    24d4:	4053      	eors	r3, r2
    24d6:	401c      	ands	r4, r3
    24d8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    24da:	a802      	add	r0, sp, #8
    24dc:	47b0      	blx	r6
    24de:	4225      	tst	r5, r4
    24e0:	d0ed      	beq.n	24be <eink_ac057tc1_put_display_buffer+0x8e>
        eink_write_data(UC8159_POF, 0, 0);
    24e2:	2200      	movs	r2, #0
    24e4:	2100      	movs	r1, #0
    24e6:	2002      	movs	r0, #2
    24e8:	4b0d      	ldr	r3, [pc, #52]	; (2520 <eink_ac057tc1_put_display_buffer+0xf0>)
    24ea:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    24ec:	4f0d      	ldr	r7, [pc, #52]	; (2524 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    24ee:	4e0e      	ldr	r6, [pc, #56]	; (2528 <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    24f0:	a803      	add	r0, sp, #12
    24f2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    24f4:	23c0      	movs	r3, #192	; 0xc0
    24f6:	05db      	lsls	r3, r3, #23
    24f8:	2580      	movs	r5, #128	; 0x80
    24fa:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    24fc:	22a0      	movs	r2, #160	; 0xa0
    24fe:	490b      	ldr	r1, [pc, #44]	; (252c <eink_ac057tc1_put_display_buffer+0xfc>)
    2500:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2502:	2190      	movs	r1, #144	; 0x90
    2504:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2506:	4053      	eors	r3, r2
    2508:	401c      	ands	r4, r3
    250a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    250c:	a803      	add	r0, sp, #12
    250e:	47b0      	blx	r6
    2510:	4225      	tst	r5, r4
    2512:	d0ed      	beq.n	24f0 <eink_ac057tc1_put_display_buffer+0xc0>
    2514:	e7af      	b.n	2476 <eink_ac057tc1_put_display_buffer+0x46>
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	20000430 	.word	0x20000430
    251c:	00020d00 	.word	0x00020d00
    2520:	00001bc9 	.word	0x00001bc9
    2524:	0000034d 	.word	0x0000034d
    2528:	0000035b 	.word	0x0000035b
    252c:	41004400 	.word	0x41004400

00002530 <eink_ed057tc2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed057tc2_refresh_display_buffer(void)
{
    2530:	b5f0      	push	{r4, r5, r6, r7, lr}
    2532:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2534:	2200      	movs	r2, #0
    2536:	2100      	movs	r1, #0
    2538:	2004      	movs	r0, #4
    253a:	4c1a      	ldr	r4, [pc, #104]	; (25a4 <eink_ed057tc2_refresh_display_buffer+0x74>)
    253c:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    253e:	2200      	movs	r2, #0
    2540:	2100      	movs	r1, #0
    2542:	2012      	movs	r0, #18
    2544:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2546:	4f18      	ldr	r7, [pc, #96]	; (25a8 <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2548:	4e18      	ldr	r6, [pc, #96]	; (25ac <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    254a:	4668      	mov	r0, sp
    254c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    254e:	23c0      	movs	r3, #192	; 0xc0
    2550:	05db      	lsls	r3, r3, #23
    2552:	2580      	movs	r5, #128	; 0x80
    2554:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2556:	22a0      	movs	r2, #160	; 0xa0
    2558:	4915      	ldr	r1, [pc, #84]	; (25b0 <eink_ed057tc2_refresh_display_buffer+0x80>)
    255a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    255c:	2190      	movs	r1, #144	; 0x90
    255e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2560:	4053      	eors	r3, r2
    2562:	401c      	ands	r4, r3
    2564:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2566:	4668      	mov	r0, sp
    2568:	47b0      	blx	r6
    256a:	4225      	tst	r5, r4
    256c:	d0ed      	beq.n	254a <eink_ed057tc2_refresh_display_buffer+0x1a>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    256e:	2200      	movs	r2, #0
    2570:	2100      	movs	r1, #0
    2572:	2002      	movs	r0, #2
    2574:	4b0b      	ldr	r3, [pc, #44]	; (25a4 <eink_ed057tc2_refresh_display_buffer+0x74>)
    2576:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2578:	4f0b      	ldr	r7, [pc, #44]	; (25a8 <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    257a:	4e0c      	ldr	r6, [pc, #48]	; (25ac <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    257c:	a801      	add	r0, sp, #4
    257e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2580:	23c0      	movs	r3, #192	; 0xc0
    2582:	05db      	lsls	r3, r3, #23
    2584:	2580      	movs	r5, #128	; 0x80
    2586:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2588:	22a0      	movs	r2, #160	; 0xa0
    258a:	4909      	ldr	r1, [pc, #36]	; (25b0 <eink_ed057tc2_refresh_display_buffer+0x80>)
    258c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    258e:	2190      	movs	r1, #144	; 0x90
    2590:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2592:	4053      	eors	r3, r2
    2594:	401c      	ands	r4, r3
    2596:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2598:	a801      	add	r0, sp, #4
    259a:	47b0      	blx	r6
    259c:	4225      	tst	r5, r4
    259e:	d0ed      	beq.n	257c <eink_ed057tc2_refresh_display_buffer+0x4c>
    uc8159_wait_for_busy();
}
    25a0:	b003      	add	sp, #12
    25a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25a4:	00001bc9 	.word	0x00001bc9
    25a8:	0000034d 	.word	0x0000034d
    25ac:	0000035b 	.word	0x0000035b
    25b0:	41004400 	.word	0x41004400

000025b4 <eink_ed057tc2_put_display_buffer>:
{
    25b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25b6:	46c6      	mov	lr, r8
    25b8:	b500      	push	{lr}
    25ba:	b084      	sub	sp, #16
    25bc:	4680      	mov	r8, r0
    eink_write_data(UC8159_PON, 0, 0);
    25be:	2200      	movs	r2, #0
    25c0:	2100      	movs	r1, #0
    25c2:	2004      	movs	r0, #4
    25c4:	4c2c      	ldr	r4, [pc, #176]	; (2678 <eink_ed057tc2_put_display_buffer+0xc4>)
    25c6:	47a0      	blx	r4
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED057TC2_DISPLAY_BUFFER_SIZE);
    25c8:	4b2c      	ldr	r3, [pc, #176]	; (267c <eink_ed057tc2_put_display_buffer+0xc8>)
    25ca:	681b      	ldr	r3, [r3, #0]
    25cc:	6919      	ldr	r1, [r3, #16]
    25ce:	4a2c      	ldr	r2, [pc, #176]	; (2680 <eink_ed057tc2_put_display_buffer+0xcc>)
    25d0:	2010      	movs	r0, #16
    25d2:	47a0      	blx	r4
    eink_write_data(UC8159_DSP, 0, 0);
    25d4:	2200      	movs	r2, #0
    25d6:	2100      	movs	r1, #0
    25d8:	2011      	movs	r0, #17
    25da:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    25dc:	4f29      	ldr	r7, [pc, #164]	; (2684 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    25de:	4e2a      	ldr	r6, [pc, #168]	; (2688 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    25e0:	a801      	add	r0, sp, #4
    25e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25e4:	23c0      	movs	r3, #192	; 0xc0
    25e6:	05db      	lsls	r3, r3, #23
    25e8:	2580      	movs	r5, #128	; 0x80
    25ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25ec:	22a0      	movs	r2, #160	; 0xa0
    25ee:	4927      	ldr	r1, [pc, #156]	; (268c <eink_ed057tc2_put_display_buffer+0xd8>)
    25f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25f2:	2190      	movs	r1, #144	; 0x90
    25f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    25f6:	4053      	eors	r3, r2
    25f8:	401c      	ands	r4, r3
    25fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    25fc:	a801      	add	r0, sp, #4
    25fe:	47b0      	blx	r6
    2600:	4225      	tst	r5, r4
    2602:	d0ed      	beq.n	25e0 <eink_ed057tc2_put_display_buffer+0x2c>
    if(refresh_display) {
    2604:	4643      	mov	r3, r8
    2606:	2b00      	cmp	r3, #0
    2608:	d11c      	bne.n	2644 <eink_ed057tc2_put_display_buffer+0x90>
    eink_write_data(UC8159_POF, 0, 0);
    260a:	2200      	movs	r2, #0
    260c:	2100      	movs	r1, #0
    260e:	2002      	movs	r0, #2
    2610:	4b19      	ldr	r3, [pc, #100]	; (2678 <eink_ed057tc2_put_display_buffer+0xc4>)
    2612:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2614:	4f1b      	ldr	r7, [pc, #108]	; (2684 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    2616:	4e1c      	ldr	r6, [pc, #112]	; (2688 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2618:	a803      	add	r0, sp, #12
    261a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    261c:	23c0      	movs	r3, #192	; 0xc0
    261e:	05db      	lsls	r3, r3, #23
    2620:	2580      	movs	r5, #128	; 0x80
    2622:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2624:	22a0      	movs	r2, #160	; 0xa0
    2626:	4919      	ldr	r1, [pc, #100]	; (268c <eink_ed057tc2_put_display_buffer+0xd8>)
    2628:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    262a:	2190      	movs	r1, #144	; 0x90
    262c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    262e:	4053      	eors	r3, r2
    2630:	401c      	ands	r4, r3
    2632:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2634:	a803      	add	r0, sp, #12
    2636:	47b0      	blx	r6
    2638:	4225      	tst	r5, r4
    263a:	d0ed      	beq.n	2618 <eink_ed057tc2_put_display_buffer+0x64>
}
    263c:	b004      	add	sp, #16
    263e:	bc04      	pop	{r2}
    2640:	4690      	mov	r8, r2
    2642:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_DRF, 0, 0);
    2644:	2200      	movs	r2, #0
    2646:	2100      	movs	r1, #0
    2648:	2012      	movs	r0, #18
    264a:	4b0b      	ldr	r3, [pc, #44]	; (2678 <eink_ed057tc2_put_display_buffer+0xc4>)
    264c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    264e:	4f0d      	ldr	r7, [pc, #52]	; (2684 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    2650:	4e0d      	ldr	r6, [pc, #52]	; (2688 <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2652:	a802      	add	r0, sp, #8
    2654:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2656:	23c0      	movs	r3, #192	; 0xc0
    2658:	05db      	lsls	r3, r3, #23
    265a:	2580      	movs	r5, #128	; 0x80
    265c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    265e:	22a0      	movs	r2, #160	; 0xa0
    2660:	490a      	ldr	r1, [pc, #40]	; (268c <eink_ed057tc2_put_display_buffer+0xd8>)
    2662:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2664:	2190      	movs	r1, #144	; 0x90
    2666:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2668:	4053      	eors	r3, r2
    266a:	401c      	ands	r4, r3
    266c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    266e:	a802      	add	r0, sp, #8
    2670:	47b0      	blx	r6
    2672:	4225      	tst	r5, r4
    2674:	d0ed      	beq.n	2652 <eink_ed057tc2_put_display_buffer+0x9e>
    2676:	e7c8      	b.n	260a <eink_ed057tc2_put_display_buffer+0x56>
    2678:	00001bc9 	.word	0x00001bc9
    267c:	20000430 	.word	0x20000430
    2680:	00020d00 	.word	0x00020d00
    2684:	0000034d 	.word	0x0000034d
    2688:	0000035b 	.word	0x0000035b
    268c:	41004400 	.word	0x41004400

00002690 <eink_ed028tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed028tc1_refresh_display_buffer(void)
{
    2690:	b5f0      	push	{r4, r5, r6, r7, lr}
    2692:	b087      	sub	sp, #28
    uint8_t eink_data[9];
    
    /* Enable power to the display */
    eink_write_data(UC8177_PON, 0, 0);
    2694:	2200      	movs	r2, #0
    2696:	2100      	movs	r1, #0
    2698:	2004      	movs	r0, #4
    269a:	4b22      	ldr	r3, [pc, #136]	; (2724 <eink_ed028tc1_refresh_display_buffer+0x94>)
    269c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    269e:	4f22      	ldr	r7, [pc, #136]	; (2728 <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    26a0:	4e22      	ldr	r6, [pc, #136]	; (272c <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    26a2:	a801      	add	r0, sp, #4
    26a4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26a6:	23c0      	movs	r3, #192	; 0xc0
    26a8:	05db      	lsls	r3, r3, #23
    26aa:	2580      	movs	r5, #128	; 0x80
    26ac:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26ae:	22a0      	movs	r2, #160	; 0xa0
    26b0:	491f      	ldr	r1, [pc, #124]	; (2730 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    26b2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26b4:	2190      	movs	r1, #144	; 0x90
    26b6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    26b8:	4053      	eors	r3, r2
    26ba:	401c      	ands	r4, r3
    26bc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    26be:	a801      	add	r0, sp, #4
    26c0:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8177_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    26c2:	4225      	tst	r5, r4
    26c4:	d0ed      	beq.n	26a2 <eink_ed028tc1_refresh_display_buffer+0x12>
    
    uc8177_wait_for_busy_low();
    
    /* Display Refresh */
    eink_data[0] = 0x18; /* Update Mode 1 */
    26c6:	a903      	add	r1, sp, #12
    26c8:	2318      	movs	r3, #24
    26ca:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    26cc:	2300      	movs	r3, #0
    26ce:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    26d0:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    26d2:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    26d4:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    26d6:	3302      	adds	r3, #2
    26d8:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    26da:	3356      	adds	r3, #86	; 0x56
    26dc:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    26de:	3b57      	subs	r3, #87	; 0x57
    26e0:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    26e2:	33df      	adds	r3, #223	; 0xdf
    26e4:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    26e6:	2209      	movs	r2, #9
    26e8:	2012      	movs	r0, #18
    26ea:	4c0e      	ldr	r4, [pc, #56]	; (2724 <eink_ed028tc1_refresh_display_buffer+0x94>)
    26ec:	47a0      	blx	r4
    
    /* Disable power to the display */
    eink_write_data(UC8177_POF, 0, 0);
    26ee:	2200      	movs	r2, #0
    26f0:	2100      	movs	r1, #0
    26f2:	2002      	movs	r0, #2
    26f4:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    26f6:	4f0c      	ldr	r7, [pc, #48]	; (2728 <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    26f8:	4e0c      	ldr	r6, [pc, #48]	; (272c <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    26fa:	a802      	add	r0, sp, #8
    26fc:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26fe:	23c0      	movs	r3, #192	; 0xc0
    2700:	05db      	lsls	r3, r3, #23
    2702:	2580      	movs	r5, #128	; 0x80
    2704:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2706:	22a0      	movs	r2, #160	; 0xa0
    2708:	4909      	ldr	r1, [pc, #36]	; (2730 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    270a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    270c:	2190      	movs	r1, #144	; 0x90
    270e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2710:	4053      	eors	r3, r2
    2712:	401c      	ands	r4, r3
    2714:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2716:	a802      	add	r0, sp, #8
    2718:	47b0      	blx	r6
    271a:	4225      	tst	r5, r4
    271c:	d0ed      	beq.n	26fa <eink_ed028tc1_refresh_display_buffer+0x6a>
    uc8177_wait_for_busy_low();
}
    271e:	b007      	add	sp, #28
    2720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	00001bc9 	.word	0x00001bc9
    2728:	0000034d 	.word	0x0000034d
    272c:	0000035b 	.word	0x0000035b
    2730:	41004400 	.word	0x41004400

00002734 <eink_ed037tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed037tc1_refresh_display_buffer(void)
{
    2734:	b5f0      	push	{r4, r5, r6, r7, lr}
    2736:	b083      	sub	sp, #12
    /* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
    if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    2738:	4b15      	ldr	r3, [pc, #84]	; (2790 <eink_ed037tc1_refresh_display_buffer+0x5c>)
    273a:	78db      	ldrb	r3, [r3, #3]
    273c:	2b00      	cmp	r3, #0
    273e:	d120      	bne.n	2782 <eink_ed037tc1_refresh_display_buffer+0x4e>
    {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    2740:	2269      	movs	r2, #105	; 0x69
    2742:	4914      	ldr	r1, [pc, #80]	; (2794 <eink_ed037tc1_refresh_display_buffer+0x60>)
    2744:	3140      	adds	r1, #64	; 0x40
    2746:	2032      	movs	r0, #50	; 0x32
    2748:	4b13      	ldr	r3, [pc, #76]	; (2798 <eink_ed037tc1_refresh_display_buffer+0x64>)
    274a:	4798      	blx	r3
    } else {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    }
    /* Display Update */
    eink_write_data(SSD1677_DSP_ACT, 0, 0);
    274c:	2200      	movs	r2, #0
    274e:	2100      	movs	r1, #0
    2750:	2020      	movs	r0, #32
    2752:	4b11      	ldr	r3, [pc, #68]	; (2798 <eink_ed037tc1_refresh_display_buffer+0x64>)
    2754:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2756:	4f11      	ldr	r7, [pc, #68]	; (279c <eink_ed037tc1_refresh_display_buffer+0x68>)
	CRITICAL_SECTION_LEAVE();
    2758:	4e11      	ldr	r6, [pc, #68]	; (27a0 <eink_ed037tc1_refresh_display_buffer+0x6c>)
	CRITICAL_SECTION_ENTER();
    275a:	a801      	add	r0, sp, #4
    275c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    275e:	23c0      	movs	r3, #192	; 0xc0
    2760:	05db      	lsls	r3, r3, #23
    2762:	2580      	movs	r5, #128	; 0x80
    2764:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2766:	22a0      	movs	r2, #160	; 0xa0
    2768:	490e      	ldr	r1, [pc, #56]	; (27a4 <eink_ed037tc1_refresh_display_buffer+0x70>)
    276a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    276c:	2190      	movs	r1, #144	; 0x90
    276e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2770:	4053      	eors	r3, r2
    2772:	401c      	ands	r4, r3
    2774:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2776:	a801      	add	r0, sp, #4
    2778:	47b0      	blx	r6
#ifdef EINK_BUSY    
    while(gpio_get_pin_level(EINK_BUSY));
    277a:	4225      	tst	r5, r4
    277c:	d1ed      	bne.n	275a <eink_ed037tc1_refresh_display_buffer+0x26>
#endif
}
    277e:	b003      	add	sp, #12
    2780:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    2782:	2269      	movs	r2, #105	; 0x69
    2784:	4908      	ldr	r1, [pc, #32]	; (27a8 <eink_ed037tc1_refresh_display_buffer+0x74>)
    2786:	312c      	adds	r1, #44	; 0x2c
    2788:	2032      	movs	r0, #50	; 0x32
    278a:	4b03      	ldr	r3, [pc, #12]	; (2798 <eink_ed037tc1_refresh_display_buffer+0x64>)
    278c:	4798      	blx	r3
    278e:	e7dd      	b.n	274c <eink_ed037tc1_refresh_display_buffer+0x18>
    2790:	20000414 	.word	0x20000414
    2794:	00004cb8 	.word	0x00004cb8
    2798:	00001bc9 	.word	0x00001bc9
    279c:	0000034d 	.word	0x0000034d
    27a0:	0000035b 	.word	0x0000035b
    27a4:	41004400 	.word	0x41004400
    27a8:	00004d38 	.word	0x00004d38

000027ac <eink_ed037tc1_put_display_buffer>:
{
    27ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ae:	b083      	sub	sp, #12
    27b0:	0007      	movs	r7, r0
    eink_data[0] = 0x00;
    27b2:	ac01      	add	r4, sp, #4
    27b4:	2500      	movs	r5, #0
    27b6:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    27b8:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    27ba:	2202      	movs	r2, #2
    27bc:	0021      	movs	r1, r4
    27be:	204e      	movs	r0, #78	; 0x4e
    27c0:	4e1d      	ldr	r6, [pc, #116]	; (2838 <eink_ed037tc1_put_display_buffer+0x8c>)
    27c2:	47b0      	blx	r6
    eink_data[0] = 0x00;
    27c4:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    27c6:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    27c8:	2202      	movs	r2, #2
    27ca:	0021      	movs	r1, r4
    27cc:	204f      	movs	r0, #79	; 0x4f
    27ce:	47b0      	blx	r6
    eink_write_data(SSD1677_RAM_BW, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED037TC1_DISPLAY_BUFFER_SIZE);
    27d0:	4b1a      	ldr	r3, [pc, #104]	; (283c <eink_ed037tc1_put_display_buffer+0x90>)
    27d2:	681b      	ldr	r3, [r3, #0]
    27d4:	6919      	ldr	r1, [r3, #16]
    27d6:	4a1a      	ldr	r2, [pc, #104]	; (2840 <eink_ed037tc1_put_display_buffer+0x94>)
    27d8:	2024      	movs	r0, #36	; 0x24
    27da:	47b0      	blx	r6
    if(refresh_display) {
    27dc:	2f00      	cmp	r7, #0
    27de:	d022      	beq.n	2826 <eink_ed037tc1_put_display_buffer+0x7a>
        if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    27e0:	4b18      	ldr	r3, [pc, #96]	; (2844 <eink_ed037tc1_put_display_buffer+0x98>)
    27e2:	78db      	ldrb	r3, [r3, #3]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d120      	bne.n	282a <eink_ed037tc1_put_display_buffer+0x7e>
            eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    27e8:	2269      	movs	r2, #105	; 0x69
    27ea:	4917      	ldr	r1, [pc, #92]	; (2848 <eink_ed037tc1_put_display_buffer+0x9c>)
    27ec:	3140      	adds	r1, #64	; 0x40
    27ee:	2032      	movs	r0, #50	; 0x32
    27f0:	4b11      	ldr	r3, [pc, #68]	; (2838 <eink_ed037tc1_put_display_buffer+0x8c>)
    27f2:	4798      	blx	r3
        eink_write_data(SSD1677_DSP_ACT, 0, 0);
    27f4:	2200      	movs	r2, #0
    27f6:	2100      	movs	r1, #0
    27f8:	2020      	movs	r0, #32
    27fa:	4b0f      	ldr	r3, [pc, #60]	; (2838 <eink_ed037tc1_put_display_buffer+0x8c>)
    27fc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    27fe:	4f13      	ldr	r7, [pc, #76]	; (284c <eink_ed037tc1_put_display_buffer+0xa0>)
	CRITICAL_SECTION_LEAVE();
    2800:	4e13      	ldr	r6, [pc, #76]	; (2850 <eink_ed037tc1_put_display_buffer+0xa4>)
	CRITICAL_SECTION_ENTER();
    2802:	4668      	mov	r0, sp
    2804:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2806:	23c0      	movs	r3, #192	; 0xc0
    2808:	05db      	lsls	r3, r3, #23
    280a:	2580      	movs	r5, #128	; 0x80
    280c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    280e:	22a0      	movs	r2, #160	; 0xa0
    2810:	4910      	ldr	r1, [pc, #64]	; (2854 <eink_ed037tc1_put_display_buffer+0xa8>)
    2812:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2814:	2190      	movs	r1, #144	; 0x90
    2816:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2818:	4053      	eors	r3, r2
    281a:	401c      	ands	r4, r3
    281c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    281e:	4668      	mov	r0, sp
    2820:	47b0      	blx	r6
        while(gpio_get_pin_level(EINK_BUSY));
    2822:	4225      	tst	r5, r4
    2824:	d1ed      	bne.n	2802 <eink_ed037tc1_put_display_buffer+0x56>
}
    2826:	b003      	add	sp, #12
    2828:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    282a:	2269      	movs	r2, #105	; 0x69
    282c:	490a      	ldr	r1, [pc, #40]	; (2858 <eink_ed037tc1_put_display_buffer+0xac>)
    282e:	312c      	adds	r1, #44	; 0x2c
    2830:	2032      	movs	r0, #50	; 0x32
    2832:	4b01      	ldr	r3, [pc, #4]	; (2838 <eink_ed037tc1_put_display_buffer+0x8c>)
    2834:	4798      	blx	r3
    2836:	e7dd      	b.n	27f4 <eink_ed037tc1_put_display_buffer+0x48>
    2838:	00001bc9 	.word	0x00001bc9
    283c:	20000430 	.word	0x20000430
    2840:	000041a0 	.word	0x000041a0
    2844:	20000414 	.word	0x20000414
    2848:	00004cb8 	.word	0x00004cb8
    284c:	0000034d 	.word	0x0000034d
    2850:	0000035b 	.word	0x0000035b
    2854:	41004400 	.word	0x41004400
    2858:	00004d38 	.word	0x00004d38

0000285c <eink_ed037tc1_put_partial_display_buffer>:
{
    285c:	b5f0      	push	{r4, r5, r6, r7, lr}
    285e:	46de      	mov	lr, fp
    2860:	4657      	mov	r7, sl
    2862:	464e      	mov	r6, r9
    2864:	4645      	mov	r5, r8
    2866:	b5e0      	push	{r5, r6, r7, lr}
    2868:	b085      	sub	sp, #20
    286a:	4681      	mov	r9, r0
    286c:	000c      	movs	r4, r1
	if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
    286e:	4940      	ldr	r1, [pc, #256]	; (2970 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2870:	7809      	ldrb	r1, [r1, #0]
    2872:	2901      	cmp	r1, #1
    2874:	d050      	beq.n	2918 <eink_ed037tc1_put_partial_display_buffer+0xbc>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
    2876:	493e      	ldr	r1, [pc, #248]	; (2970 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2878:	7809      	ldrb	r1, [r1, #0]
    287a:	2902      	cmp	r1, #2
    287c:	d068      	beq.n	2950 <eink_ed037tc1_put_partial_display_buffer+0xf4>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
    287e:	493c      	ldr	r1, [pc, #240]	; (2970 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2880:	7809      	ldrb	r1, [r1, #0]
    2882:	2903      	cmp	r1, #3
    2884:	d06c      	beq.n	2960 <eink_ed037tc1_put_partial_display_buffer+0x104>
        x1_set = (start_x - (start_x % 8)) / 8;
    2886:	10c6      	asrs	r6, r0, #3
        byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * start_y);
    2888:	00a1      	lsls	r1, r4, #2
    288a:	1909      	adds	r1, r1, r4
    288c:	00c8      	lsls	r0, r1, #3
    288e:	1a41      	subs	r1, r0, r1
    2890:	1876      	adds	r6, r6, r1
        mod_calc_x = (start_x - (start_x % 8));
    2892:	2107      	movs	r1, #7
    2894:	4648      	mov	r0, r9
    2896:	4388      	bics	r0, r1
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    2898:	b2c0      	uxtb	r0, r0
    289a:	1880      	adds	r0, r0, r2
        mod_calc_w = 8 - (window_w % 8);
    289c:	2507      	movs	r5, #7
    289e:	402a      	ands	r2, r5
    28a0:	2508      	movs	r5, #8
    28a2:	1aaa      	subs	r2, r5, r2
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    28a4:	b2d2      	uxtb	r2, r2
    28a6:	1882      	adds	r2, r0, r2
    28a8:	17d0      	asrs	r0, r2, #31
    28aa:	4001      	ands	r1, r0
    28ac:	1889      	adds	r1, r1, r2
    28ae:	10c9      	asrs	r1, r1, #3
    28b0:	b28a      	uxth	r2, r1
    28b2:	9201      	str	r2, [sp, #4]
    display_buffer = (uint8_t*) ptr_eink_gfx_config->display_buffer_1_ptr;
    28b4:	4a2f      	ldr	r2, [pc, #188]	; (2974 <eink_ed037tc1_put_partial_display_buffer+0x118>)
    28b6:	6812      	ldr	r2, [r2, #0]
    28b8:	6912      	ldr	r2, [r2, #16]
    display_buffer += byte_set;
    28ba:	1996      	adds	r6, r2, r6
    for(i=0; i<window_set_h; i++)
    28bc:	2b00      	cmp	r3, #0
    28be:	d024      	beq.n	290a <eink_ed037tc1_put_partial_display_buffer+0xae>
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    28c0:	464a      	mov	r2, r9
    28c2:	0592      	lsls	r2, r2, #22
    28c4:	0f92      	lsrs	r2, r2, #30
    28c6:	4692      	mov	sl, r2
    28c8:	18e3      	adds	r3, r4, r3
    28ca:	b29b      	uxth	r3, r3
    28cc:	4698      	mov	r8, r3
	    eink_data[0] = (window_set_x & 0xFF);
    28ce:	ad03      	add	r5, sp, #12
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    28d0:	4f29      	ldr	r7, [pc, #164]	; (2978 <eink_ed037tc1_put_partial_display_buffer+0x11c>)
	    eink_data[1] = (temp_y >> 8) & 0x3;
    28d2:	2303      	movs	r3, #3
    28d4:	469b      	mov	fp, r3
	    eink_data[0] = (window_set_x & 0xFF);
    28d6:	464b      	mov	r3, r9
    28d8:	702b      	strb	r3, [r5, #0]
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    28da:	4653      	mov	r3, sl
    28dc:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    28de:	2202      	movs	r2, #2
    28e0:	0029      	movs	r1, r5
    28e2:	204e      	movs	r0, #78	; 0x4e
    28e4:	47b8      	blx	r7
	    eink_data[0] = (temp_y & 0xFF);
    28e6:	702c      	strb	r4, [r5, #0]
	    eink_data[1] = (temp_y >> 8) & 0x3;
    28e8:	0a23      	lsrs	r3, r4, #8
    28ea:	465a      	mov	r2, fp
    28ec:	4013      	ands	r3, r2
    28ee:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    28f0:	2202      	movs	r2, #2
    28f2:	0029      	movs	r1, r5
    28f4:	204f      	movs	r0, #79	; 0x4f
    28f6:	47b8      	blx	r7
	    display_buffer += (GFX_ED037TC1_MAX_WIDTH / 8);
    28f8:	3623      	adds	r6, #35	; 0x23
	    eink_write_data(SSD1677_RAM_BW, display_buffer, window_set_w);
    28fa:	9a01      	ldr	r2, [sp, #4]
    28fc:	0031      	movs	r1, r6
    28fe:	2024      	movs	r0, #36	; 0x24
    2900:	47b8      	blx	r7
    2902:	3401      	adds	r4, #1
    2904:	b2a4      	uxth	r4, r4
    for(i=0; i<window_set_h; i++)
    2906:	4544      	cmp	r4, r8
    2908:	d1e5      	bne.n	28d6 <eink_ed037tc1_put_partial_display_buffer+0x7a>
}
    290a:	b005      	add	sp, #20
    290c:	bc3c      	pop	{r2, r3, r4, r5}
    290e:	4690      	mov	r8, r2
    2910:	4699      	mov	r9, r3
    2912:	46a2      	mov	sl, r4
    2914:	46ab      	mov	fp, r5
    2916:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - (((start_y + window_h) - ((start_y + window_h) % 8)) / 8);
    2918:	18e6      	adds	r6, r4, r3
    291a:	3106      	adds	r1, #6
    291c:	438e      	bics	r6, r1
    291e:	0031      	movs	r1, r6
    2920:	17f0      	asrs	r0, r6, #31
    2922:	2607      	movs	r6, #7
    2924:	4006      	ands	r6, r0
    2926:	1876      	adds	r6, r6, r1
    2928:	10f6      	asrs	r6, r6, #3
    292a:	4276      	negs	r6, r6
    292c:	3622      	adds	r6, #34	; 0x22
		byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (start_x));
    292e:	4649      	mov	r1, r9
    2930:	0089      	lsls	r1, r1, #2
    2932:	4449      	add	r1, r9
    2934:	00c8      	lsls	r0, r1, #3
    2936:	1a41      	subs	r1, r0, r1
    2938:	1876      	adds	r6, r6, r1
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    293a:	218c      	movs	r1, #140	; 0x8c
    293c:	0049      	lsls	r1, r1, #1
    293e:	1ac9      	subs	r1, r1, r3
    2940:	1b09      	subs	r1, r1, r4
		window_set_w = window_h / 8;
    2942:	08db      	lsrs	r3, r3, #3
    2944:	9301      	str	r3, [sp, #4]
		window_set_h = window_w;
    2946:	0013      	movs	r3, r2
		window_set_y = start_x;
    2948:	464c      	mov	r4, r9
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    294a:	b28a      	uxth	r2, r1
    294c:	4691      	mov	r9, r2
    294e:	e7b1      	b.n	28b4 <eink_ed037tc1_put_partial_display_buffer+0x58>
        x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((start_x - (start_x % 8)) / 8);
    2950:	10c6      	asrs	r6, r0, #3
    2952:	490a      	ldr	r1, [pc, #40]	; (297c <eink_ed037tc1_put_partial_display_buffer+0x120>)
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
    2954:	1b89      	subs	r1, r1, r6
    2956:	2623      	movs	r6, #35	; 0x23
    2958:	4276      	negs	r6, r6
    295a:	4366      	muls	r6, r4
    295c:	198e      	adds	r6, r1, r6
    295e:	e7a9      	b.n	28b4 <eink_ed037tc1_put_partial_display_buffer+0x58>
        y1_set = (start_y - (start_y % 8)) / 8;
    2960:	10e2      	asrs	r2, r4, #3
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
    2962:	3926      	subs	r1, #38	; 0x26
    2964:	4361      	muls	r1, r4
    2966:	1856      	adds	r6, r2, r1
    2968:	4a05      	ldr	r2, [pc, #20]	; (2980 <eink_ed037tc1_put_partial_display_buffer+0x124>)
    296a:	4694      	mov	ip, r2
    296c:	4466      	add	r6, ip
    296e:	e7a1      	b.n	28b4 <eink_ed037tc1_put_partial_display_buffer+0x58>
    2970:	20000414 	.word	0x20000414
    2974:	20000430 	.word	0x20000430
    2978:	00001bc9 	.word	0x00001bc9
    297c:	00004294 	.word	0x00004294
    2980:	0000417d 	.word	0x0000417d

00002984 <eink_et011tt2_put_display_buffer>:
{
    2984:	b5f0      	push	{r4, r5, r6, r7, lr}
    2986:	b087      	sub	sp, #28
    2988:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    298a:	a904      	add	r1, sp, #16
    298c:	2300      	movs	r3, #0
    298e:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2990:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2992:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0xEF; /* W = 239 */
    2994:	22ef      	movs	r2, #239	; 0xef
    2996:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2998:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xEF; /* H = 239 */
    299a:	714a      	strb	r2, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    299c:	3ae9      	subs	r2, #233	; 0xe9
    299e:	2014      	movs	r0, #20
    29a0:	4c32      	ldr	r4, [pc, #200]	; (2a6c <eink_et011tt2_put_display_buffer+0xe8>)
    29a2:	47a0      	blx	r4
    eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    29a4:	4b32      	ldr	r3, [pc, #200]	; (2a70 <eink_et011tt2_put_display_buffer+0xec>)
    29a6:	681b      	ldr	r3, [r3, #0]
    29a8:	6919      	ldr	r1, [r3, #16]
    29aa:	22e1      	movs	r2, #225	; 0xe1
    29ac:	0192      	lsls	r2, r2, #6
    29ae:	2013      	movs	r0, #19
    29b0:	47a0      	blx	r4
    if(refresh_display) {
    29b2:	2d00      	cmp	r5, #0
    29b4:	d101      	bne.n	29ba <eink_et011tt2_put_display_buffer+0x36>
}
    29b6:	b007      	add	sp, #28
    29b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(uc8173_global_instance.display_config.update_mode == UPDATE_FAST)
    29ba:	4b2e      	ldr	r3, [pc, #184]	; (2a74 <eink_et011tt2_put_display_buffer+0xf0>)
    29bc:	785b      	ldrb	r3, [r3, #1]
    29be:	2b01      	cmp	r3, #1
    29c0:	d03b      	beq.n	2a3a <eink_et011tt2_put_display_buffer+0xb6>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_A2)
    29c2:	4b2c      	ldr	r3, [pc, #176]	; (2a74 <eink_et011tt2_put_display_buffer+0xf0>)
    29c4:	78db      	ldrb	r3, [r3, #3]
    29c6:	2b02      	cmp	r3, #2
    29c8:	d014      	beq.n	29f4 <eink_et011tt2_put_display_buffer+0x70>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_A2;
    29ca:	2202      	movs	r2, #2
    29cc:	4b29      	ldr	r3, [pc, #164]	; (2a74 <eink_et011tt2_put_display_buffer+0xf0>)
    29ce:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_A2_LUT, 32);
    29d0:	4c29      	ldr	r4, [pc, #164]	; (2a78 <eink_et011tt2_put_display_buffer+0xf4>)
    29d2:	0021      	movs	r1, r4
    29d4:	3120      	adds	r1, #32
    29d6:	321e      	adds	r2, #30
    29d8:	2020      	movs	r0, #32
    29da:	4d24      	ldr	r5, [pc, #144]	; (2a6c <eink_et011tt2_put_display_buffer+0xe8>)
    29dc:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_A2_LUT, 512);
    29de:	0021      	movs	r1, r4
    29e0:	3140      	adds	r1, #64	; 0x40
    29e2:	2280      	movs	r2, #128	; 0x80
    29e4:	0092      	lsls	r2, r2, #2
    29e6:	2022      	movs	r0, #34	; 0x22
    29e8:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    29ea:	2280      	movs	r2, #128	; 0x80
    29ec:	4923      	ldr	r1, [pc, #140]	; (2a7c <eink_et011tt2_put_display_buffer+0xf8>)
    29ee:	3120      	adds	r1, #32
    29f0:	2026      	movs	r0, #38	; 0x26
    29f2:	47a8      	blx	r5
    eink_data[0] = 0x00; /* GU2 Update Mode */
    29f4:	a902      	add	r1, sp, #8
    29f6:	2300      	movs	r3, #0
    29f8:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    29fa:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    29fc:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    29fe:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0xEF; /* W = 249 */
    2a00:	22ef      	movs	r2, #239	; 0xef
    2a02:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2a04:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xEF; /* H = 249 */
    2a06:	718a      	strb	r2, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2a08:	3ae8      	subs	r2, #232	; 0xe8
    2a0a:	2012      	movs	r0, #18
    2a0c:	4b17      	ldr	r3, [pc, #92]	; (2a6c <eink_et011tt2_put_display_buffer+0xe8>)
    2a0e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2a10:	4f1b      	ldr	r7, [pc, #108]	; (2a80 <eink_et011tt2_put_display_buffer+0xfc>)
	CRITICAL_SECTION_LEAVE();
    2a12:	4e1c      	ldr	r6, [pc, #112]	; (2a84 <eink_et011tt2_put_display_buffer+0x100>)
	CRITICAL_SECTION_ENTER();
    2a14:	a801      	add	r0, sp, #4
    2a16:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2a18:	23c0      	movs	r3, #192	; 0xc0
    2a1a:	05db      	lsls	r3, r3, #23
    2a1c:	2580      	movs	r5, #128	; 0x80
    2a1e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2a20:	22a0      	movs	r2, #160	; 0xa0
    2a22:	4919      	ldr	r1, [pc, #100]	; (2a88 <eink_et011tt2_put_display_buffer+0x104>)
    2a24:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2a26:	2190      	movs	r1, #144	; 0x90
    2a28:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2a2a:	4053      	eors	r3, r2
    2a2c:	401c      	ands	r4, r3
    2a2e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2a30:	a801      	add	r0, sp, #4
    2a32:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2a34:	4225      	tst	r5, r4
    2a36:	d0ed      	beq.n	2a14 <eink_et011tt2_put_display_buffer+0x90>
    2a38:	e7bd      	b.n	29b6 <eink_et011tt2_put_display_buffer+0x32>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_GU)
    2a3a:	4b0e      	ldr	r3, [pc, #56]	; (2a74 <eink_et011tt2_put_display_buffer+0xf0>)
    2a3c:	78db      	ldrb	r3, [r3, #3]
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d0d8      	beq.n	29f4 <eink_et011tt2_put_display_buffer+0x70>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_GU;
    2a42:	2201      	movs	r2, #1
    2a44:	4b0b      	ldr	r3, [pc, #44]	; (2a74 <eink_et011tt2_put_display_buffer+0xf0>)
    2a46:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_GU_LUT, 32);
    2a48:	4c10      	ldr	r4, [pc, #64]	; (2a8c <eink_et011tt2_put_display_buffer+0x108>)
    2a4a:	321f      	adds	r2, #31
    2a4c:	0021      	movs	r1, r4
    2a4e:	2020      	movs	r0, #32
    2a50:	4d06      	ldr	r5, [pc, #24]	; (2a6c <eink_et011tt2_put_display_buffer+0xe8>)
    2a52:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_GU_LUT, 512);
    2a54:	0021      	movs	r1, r4
    2a56:	3120      	adds	r1, #32
    2a58:	2280      	movs	r2, #128	; 0x80
    2a5a:	0092      	lsls	r2, r2, #2
    2a5c:	2022      	movs	r0, #34	; 0x22
    2a5e:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    2a60:	2280      	movs	r2, #128	; 0x80
    2a62:	4906      	ldr	r1, [pc, #24]	; (2a7c <eink_et011tt2_put_display_buffer+0xf8>)
    2a64:	3120      	adds	r1, #32
    2a66:	2026      	movs	r0, #38	; 0x26
    2a68:	47a8      	blx	r5
    2a6a:	e7c3      	b.n	29f4 <eink_et011tt2_put_display_buffer+0x70>
    2a6c:	00001bc9 	.word	0x00001bc9
    2a70:	20000430 	.word	0x20000430
    2a74:	20000390 	.word	0x20000390
    2a78:	00004ab8 	.word	0x00004ab8
    2a7c:	00004a38 	.word	0x00004a38
    2a80:	0000034d 	.word	0x0000034d
    2a84:	0000035b 	.word	0x0000035b
    2a88:	41004400 	.word	0x41004400
    2a8c:	00004838 	.word	0x00004838

00002a90 <eink_hink_e0154a05_put_display_buffer>:
{
    2a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a92:	46c6      	mov	lr, r8
    2a94:	b500      	push	{lr}
    2a96:	b086      	sub	sp, #24
    2a98:	4680      	mov	r8, r0
    eink_data[0] = 0x7D;
    2a9a:	ac05      	add	r4, sp, #20
    2a9c:	237d      	movs	r3, #125	; 0x7d
    2a9e:	7023      	strb	r3, [r4, #0]
    eink_write_data(SSD1608_WVCOM, eink_data, 1);
    2aa0:	2201      	movs	r2, #1
    2aa2:	0021      	movs	r1, r4
    2aa4:	202c      	movs	r0, #44	; 0x2c
    2aa6:	4d3e      	ldr	r5, [pc, #248]	; (2ba0 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2aa8:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2aaa:	2718      	movs	r7, #24
    2aac:	7027      	strb	r7, [r4, #0]
    eink_data[1] = 0x00;
    2aae:	2600      	movs	r6, #0
    2ab0:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RXAS, eink_data, 2);
    2ab2:	2202      	movs	r2, #2
    2ab4:	0021      	movs	r1, r4
    2ab6:	2044      	movs	r0, #68	; 0x44
    2ab8:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2aba:	7027      	strb	r7, [r4, #0]
    eink_write_data(SSD1608_RXC, eink_data, 1);
    2abc:	2201      	movs	r2, #1
    2abe:	0021      	movs	r1, r4
    2ac0:	204e      	movs	r0, #78	; 0x4e
    2ac2:	47a8      	blx	r5
    eink_data[0] = 0xC7;
    2ac4:	23c7      	movs	r3, #199	; 0xc7
    2ac6:	7023      	strb	r3, [r4, #0]
    eink_data[1] = 0x00;
    2ac8:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RYC, eink_data, 2);
    2aca:	2202      	movs	r2, #2
    2acc:	0021      	movs	r1, r4
    2ace:	204f      	movs	r0, #79	; 0x4f
    2ad0:	47a8      	blx	r5
    eink_write_data(SSD1608_WR, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_HINK_E0154A05_DISPLAY_BUFFER_SIZE);
    2ad2:	4b34      	ldr	r3, [pc, #208]	; (2ba4 <eink_hink_e0154a05_put_display_buffer+0x114>)
    2ad4:	681b      	ldr	r3, [r3, #0]
    2ad6:	6919      	ldr	r1, [r3, #16]
    2ad8:	4a33      	ldr	r2, [pc, #204]	; (2ba8 <eink_hink_e0154a05_put_display_buffer+0x118>)
    2ada:	2024      	movs	r0, #36	; 0x24
    2adc:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    2ade:	4f33      	ldr	r7, [pc, #204]	; (2bac <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2ae0:	4e33      	ldr	r6, [pc, #204]	; (2bb0 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2ae2:	a802      	add	r0, sp, #8
    2ae4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2ae6:	23c0      	movs	r3, #192	; 0xc0
    2ae8:	05db      	lsls	r3, r3, #23
    2aea:	2580      	movs	r5, #128	; 0x80
    2aec:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2aee:	22a0      	movs	r2, #160	; 0xa0
    2af0:	4930      	ldr	r1, [pc, #192]	; (2bb4 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2af2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2af4:	2190      	movs	r1, #144	; 0x90
    2af6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2af8:	4053      	eors	r3, r2
    2afa:	401c      	ands	r4, r3
    2afc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2afe:	a802      	add	r0, sp, #8
    2b00:	47b0      	blx	r6
    2b02:	4225      	tst	r5, r4
    2b04:	d1ed      	bne.n	2ae2 <eink_hink_e0154a05_put_display_buffer+0x52>
    if(refresh_display) {
    2b06:	4643      	mov	r3, r8
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d103      	bne.n	2b14 <eink_hink_e0154a05_put_display_buffer+0x84>
}
    2b0c:	b006      	add	sp, #24
    2b0e:	bc04      	pop	{r2}
    2b10:	4690      	mov	r8, r2
    2b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    2b14:	4b28      	ldr	r3, [pc, #160]	; (2bb8 <eink_hink_e0154a05_put_display_buffer+0x128>)
    2b16:	785b      	ldrb	r3, [r3, #1]
    2b18:	2b01      	cmp	r3, #1
    2b1a:	d035      	beq.n	2b88 <eink_hink_e0154a05_put_display_buffer+0xf8>
        eink_data[0] = 0xF7; /* Slow Update */
    2b1c:	22f7      	movs	r2, #247	; 0xf7
    2b1e:	ab01      	add	r3, sp, #4
    2b20:	701a      	strb	r2, [r3, #0]
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    2b22:	2201      	movs	r2, #1
    2b24:	a901      	add	r1, sp, #4
    2b26:	2022      	movs	r0, #34	; 0x22
    2b28:	4b1d      	ldr	r3, [pc, #116]	; (2ba0 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2b2a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2b2c:	4f1f      	ldr	r7, [pc, #124]	; (2bac <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2b2e:	4e20      	ldr	r6, [pc, #128]	; (2bb0 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2b30:	a803      	add	r0, sp, #12
    2b32:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2b34:	23c0      	movs	r3, #192	; 0xc0
    2b36:	05db      	lsls	r3, r3, #23
    2b38:	2580      	movs	r5, #128	; 0x80
    2b3a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2b3c:	22a0      	movs	r2, #160	; 0xa0
    2b3e:	491d      	ldr	r1, [pc, #116]	; (2bb4 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2b40:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b42:	2190      	movs	r1, #144	; 0x90
    2b44:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2b46:	4053      	eors	r3, r2
    2b48:	401c      	ands	r4, r3
    2b4a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b4c:	a803      	add	r0, sp, #12
    2b4e:	47b0      	blx	r6
    2b50:	4225      	tst	r5, r4
    2b52:	d1ed      	bne.n	2b30 <eink_hink_e0154a05_put_display_buffer+0xa0>
    eink_write_data(SSD1608_MA, 0, 0);
    2b54:	2200      	movs	r2, #0
    2b56:	2100      	movs	r1, #0
    2b58:	2020      	movs	r0, #32
    2b5a:	4b11      	ldr	r3, [pc, #68]	; (2ba0 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2b5c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2b5e:	4f13      	ldr	r7, [pc, #76]	; (2bac <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2b60:	4e13      	ldr	r6, [pc, #76]	; (2bb0 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2b62:	a804      	add	r0, sp, #16
    2b64:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2b66:	23c0      	movs	r3, #192	; 0xc0
    2b68:	05db      	lsls	r3, r3, #23
    2b6a:	2580      	movs	r5, #128	; 0x80
    2b6c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2b6e:	22a0      	movs	r2, #160	; 0xa0
    2b70:	4910      	ldr	r1, [pc, #64]	; (2bb4 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2b72:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b74:	2190      	movs	r1, #144	; 0x90
    2b76:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2b78:	4053      	eors	r3, r2
    2b7a:	401c      	ands	r4, r3
    2b7c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b7e:	a804      	add	r0, sp, #16
    2b80:	47b0      	blx	r6
    2b82:	4225      	tst	r5, r4
    2b84:	d1ed      	bne.n	2b62 <eink_hink_e0154a05_put_display_buffer+0xd2>
    2b86:	e7c1      	b.n	2b0c <eink_hink_e0154a05_put_display_buffer+0x7c>
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2b88:	4b0b      	ldr	r3, [pc, #44]	; (2bb8 <eink_hink_e0154a05_put_display_buffer+0x128>)
    2b8a:	789b      	ldrb	r3, [r3, #2]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d103      	bne.n	2b98 <eink_hink_e0154a05_put_display_buffer+0x108>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    2b90:	22c7      	movs	r2, #199	; 0xc7
    2b92:	ab01      	add	r3, sp, #4
    2b94:	701a      	strb	r2, [r3, #0]
    2b96:	e7c4      	b.n	2b22 <eink_hink_e0154a05_put_display_buffer+0x92>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    2b98:	22ff      	movs	r2, #255	; 0xff
    2b9a:	ab01      	add	r3, sp, #4
    2b9c:	701a      	strb	r2, [r3, #0]
    2b9e:	e7c0      	b.n	2b22 <eink_hink_e0154a05_put_display_buffer+0x92>
    2ba0:	00001bc9 	.word	0x00001bc9
    2ba4:	20000430 	.word	0x20000430
    2ba8:	00001388 	.word	0x00001388
    2bac:	0000034d 	.word	0x0000034d
    2bb0:	0000035b 	.word	0x0000035b
    2bb4:	41004400 	.word	0x41004400
    2bb8:	200003b8 	.word	0x200003b8

00002bbc <eink_ed028tc1_put_display_buffer>:
{
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bbe:	b089      	sub	sp, #36	; 0x24
    2bc0:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2bc2:	a906      	add	r1, sp, #24
    2bc4:	2300      	movs	r3, #0
    2bc6:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2bc8:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2bca:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00;
    2bcc:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x02; /* W = 600 */
    2bce:	3302      	adds	r3, #2
    2bd0:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x58;
    2bd2:	3356      	adds	r3, #86	; 0x56
    2bd4:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x01; /* H = 480 */
    2bd6:	3b57      	subs	r3, #87	; 0x57
    2bd8:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0xE0;
    2bda:	33df      	adds	r3, #223	; 0xdf
    2bdc:	71cb      	strb	r3, [r1, #7]
    eink_write_data(UC8177_DTMW, eink_data, 8);
    2bde:	2208      	movs	r2, #8
    2be0:	2083      	movs	r0, #131	; 0x83
    2be2:	4c33      	ldr	r4, [pc, #204]	; (2cb0 <eink_ed028tc1_put_display_buffer+0xf4>)
    2be4:	47a0      	blx	r4
    eink_write_data(UC8177_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED028TC1_DISPLAY_BUFFER_SIZE);
    2be6:	4b33      	ldr	r3, [pc, #204]	; (2cb4 <eink_ed028tc1_put_display_buffer+0xf8>)
    2be8:	681b      	ldr	r3, [r3, #0]
    2bea:	6919      	ldr	r1, [r3, #16]
    2bec:	4a32      	ldr	r2, [pc, #200]	; (2cb8 <eink_ed028tc1_put_display_buffer+0xfc>)
    2bee:	2010      	movs	r0, #16
    2bf0:	47a0      	blx	r4
    if((uc8177_global_instance.display_config.display_rotation == ROTATE_90) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180)) {
    2bf2:	4b32      	ldr	r3, [pc, #200]	; (2cbc <eink_ed028tc1_put_display_buffer+0x100>)
    2bf4:	781b      	ldrb	r3, [r3, #0]
    2bf6:	2b01      	cmp	r3, #1
    2bf8:	d00f      	beq.n	2c1a <eink_ed028tc1_put_display_buffer+0x5e>
    2bfa:	4b30      	ldr	r3, [pc, #192]	; (2cbc <eink_ed028tc1_put_display_buffer+0x100>)
    2bfc:	781b      	ldrb	r3, [r3, #0]
    2bfe:	2b02      	cmp	r3, #2
    2c00:	d00b      	beq.n	2c1a <eink_ed028tc1_put_display_buffer+0x5e>
        eink_data[0] = 0x02;
    2c02:	2202      	movs	r2, #2
    2c04:	ab06      	add	r3, sp, #24
    2c06:	701a      	strb	r2, [r3, #0]
    eink_write_data(UC8177_GDOS, eink_data, 1);
    2c08:	2201      	movs	r2, #1
    2c0a:	a906      	add	r1, sp, #24
    2c0c:	20e0      	movs	r0, #224	; 0xe0
    2c0e:	4b28      	ldr	r3, [pc, #160]	; (2cb0 <eink_ed028tc1_put_display_buffer+0xf4>)
    2c10:	4798      	blx	r3
    if(refresh_display) {
    2c12:	2d00      	cmp	r5, #0
    2c14:	d105      	bne.n	2c22 <eink_ed028tc1_put_display_buffer+0x66>
}
    2c16:	b009      	add	sp, #36	; 0x24
    2c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_data[0] = 0x03;
    2c1a:	2203      	movs	r2, #3
    2c1c:	ab06      	add	r3, sp, #24
    2c1e:	701a      	strb	r2, [r3, #0]
    2c20:	e7f2      	b.n	2c08 <eink_ed028tc1_put_display_buffer+0x4c>
    eink_write_data(UC8177_PON, 0, 0);
    2c22:	2200      	movs	r2, #0
    2c24:	2100      	movs	r1, #0
    2c26:	2004      	movs	r0, #4
    2c28:	4b21      	ldr	r3, [pc, #132]	; (2cb0 <eink_ed028tc1_put_display_buffer+0xf4>)
    2c2a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2c2c:	4f24      	ldr	r7, [pc, #144]	; (2cc0 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2c2e:	4e25      	ldr	r6, [pc, #148]	; (2cc4 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2c30:	a801      	add	r0, sp, #4
    2c32:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c34:	23c0      	movs	r3, #192	; 0xc0
    2c36:	05db      	lsls	r3, r3, #23
    2c38:	2580      	movs	r5, #128	; 0x80
    2c3a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c3c:	22a0      	movs	r2, #160	; 0xa0
    2c3e:	4922      	ldr	r1, [pc, #136]	; (2cc8 <eink_ed028tc1_put_display_buffer+0x10c>)
    2c40:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c42:	2190      	movs	r1, #144	; 0x90
    2c44:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2c46:	4053      	eors	r3, r2
    2c48:	401c      	ands	r4, r3
    2c4a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c4c:	a801      	add	r0, sp, #4
    2c4e:	47b0      	blx	r6
    2c50:	4225      	tst	r5, r4
    2c52:	d0ed      	beq.n	2c30 <eink_ed028tc1_put_display_buffer+0x74>
    eink_data[0] = 0x18; /* Update Mode 1 */
    2c54:	a903      	add	r1, sp, #12
    2c56:	2318      	movs	r3, #24
    2c58:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2c5a:	2300      	movs	r3, #0
    2c5c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2c5e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2c60:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    2c62:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    2c64:	3302      	adds	r3, #2
    2c66:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    2c68:	3356      	adds	r3, #86	; 0x56
    2c6a:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    2c6c:	3b57      	subs	r3, #87	; 0x57
    2c6e:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    2c70:	33df      	adds	r3, #223	; 0xdf
    2c72:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    2c74:	2209      	movs	r2, #9
    2c76:	2012      	movs	r0, #18
    2c78:	4c0d      	ldr	r4, [pc, #52]	; (2cb0 <eink_ed028tc1_put_display_buffer+0xf4>)
    2c7a:	47a0      	blx	r4
    eink_write_data(UC8177_POF, 0, 0);
    2c7c:	2200      	movs	r2, #0
    2c7e:	2100      	movs	r1, #0
    2c80:	2002      	movs	r0, #2
    2c82:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2c84:	4f0e      	ldr	r7, [pc, #56]	; (2cc0 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2c86:	4e0f      	ldr	r6, [pc, #60]	; (2cc4 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2c88:	a802      	add	r0, sp, #8
    2c8a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c8c:	23c0      	movs	r3, #192	; 0xc0
    2c8e:	05db      	lsls	r3, r3, #23
    2c90:	2580      	movs	r5, #128	; 0x80
    2c92:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c94:	22a0      	movs	r2, #160	; 0xa0
    2c96:	490c      	ldr	r1, [pc, #48]	; (2cc8 <eink_ed028tc1_put_display_buffer+0x10c>)
    2c98:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c9a:	2190      	movs	r1, #144	; 0x90
    2c9c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2c9e:	4053      	eors	r3, r2
    2ca0:	401c      	ands	r4, r3
    2ca2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2ca4:	a802      	add	r0, sp, #8
    2ca6:	47b0      	blx	r6
    2ca8:	4225      	tst	r5, r4
    2caa:	d0ed      	beq.n	2c88 <eink_ed028tc1_put_display_buffer+0xcc>
    2cac:	e7b3      	b.n	2c16 <eink_ed028tc1_put_display_buffer+0x5a>
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	00001bc9 	.word	0x00001bc9
    2cb4:	20000430 	.word	0x20000430
    2cb8:	00023280 	.word	0x00023280
    2cbc:	200003b0 	.word	0x200003b0
    2cc0:	0000034d 	.word	0x0000034d
    2cc4:	0000035b 	.word	0x0000035b
    2cc8:	41004400 	.word	0x41004400

00002ccc <eink_ed013tc1_put_display_buffer>:
{
    2ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cce:	b089      	sub	sp, #36	; 0x24
    2cd0:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2cd2:	a906      	add	r1, sp, #24
    2cd4:	2300      	movs	r3, #0
    2cd6:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2cd8:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2cda:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x7F; /* W = 127 */
    2cdc:	227f      	movs	r2, #127	; 0x7f
    2cde:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2ce0:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xFF; /* H = 255 */
    2ce2:	33ff      	adds	r3, #255	; 0xff
    2ce4:	714b      	strb	r3, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2ce6:	3a79      	subs	r2, #121	; 0x79
    2ce8:	2014      	movs	r0, #20
    2cea:	4c43      	ldr	r4, [pc, #268]	; (2df8 <eink_ed013tc1_put_display_buffer+0x12c>)
    2cec:	47a0      	blx	r4
    eink_write_data(UC8173_DTM4, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    2cee:	4b43      	ldr	r3, [pc, #268]	; (2dfc <eink_ed013tc1_put_display_buffer+0x130>)
    2cf0:	681b      	ldr	r3, [r3, #0]
    2cf2:	6959      	ldr	r1, [r3, #20]
    2cf4:	2280      	movs	r2, #128	; 0x80
    2cf6:	0152      	lsls	r2, r2, #5
    2cf8:	2016      	movs	r0, #22
    2cfa:	47a0      	blx	r4
    if(refresh_display) {
    2cfc:	2d00      	cmp	r5, #0
    2cfe:	d10d      	bne.n	2d1c <eink_ed013tc1_put_display_buffer+0x50>
{
    2d00:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2d02:	4c3e      	ldr	r4, [pc, #248]	; (2dfc <eink_ed013tc1_put_display_buffer+0x130>)
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2d04:	2080      	movs	r0, #128	; 0x80
    2d06:	0140      	lsls	r0, r0, #5
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2d08:	6822      	ldr	r2, [r4, #0]
    2d0a:	6951      	ldr	r1, [r2, #20]
    2d0c:	5cc9      	ldrb	r1, [r1, r3]
    2d0e:	6912      	ldr	r2, [r2, #16]
    2d10:	54d1      	strb	r1, [r2, r3]
    2d12:	3301      	adds	r3, #1
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2d14:	4283      	cmp	r3, r0
    2d16:	d1f7      	bne.n	2d08 <eink_ed013tc1_put_display_buffer+0x3c>
}
    2d18:	b009      	add	sp, #36	; 0x24
    2d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_write_data(UC8173_PON, 0, 0);
    2d1c:	2200      	movs	r2, #0
    2d1e:	2100      	movs	r1, #0
    2d20:	2004      	movs	r0, #4
    2d22:	4b35      	ldr	r3, [pc, #212]	; (2df8 <eink_ed013tc1_put_display_buffer+0x12c>)
    2d24:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2d26:	4f36      	ldr	r7, [pc, #216]	; (2e00 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    2d28:	4e36      	ldr	r6, [pc, #216]	; (2e04 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    2d2a:	a801      	add	r0, sp, #4
    2d2c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2d2e:	23c0      	movs	r3, #192	; 0xc0
    2d30:	05db      	lsls	r3, r3, #23
    2d32:	2580      	movs	r5, #128	; 0x80
    2d34:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d36:	22a0      	movs	r2, #160	; 0xa0
    2d38:	4933      	ldr	r1, [pc, #204]	; (2e08 <eink_ed013tc1_put_display_buffer+0x13c>)
    2d3a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d3c:	2190      	movs	r1, #144	; 0x90
    2d3e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d40:	4053      	eors	r3, r2
    2d42:	401c      	ands	r4, r3
    2d44:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2d46:	a801      	add	r0, sp, #4
    2d48:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2d4a:	4225      	tst	r5, r4
    2d4c:	d0ed      	beq.n	2d2a <eink_ed013tc1_put_display_buffer+0x5e>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ED013TC1_GC2)
    2d4e:	4b2f      	ldr	r3, [pc, #188]	; (2e0c <eink_ed013tc1_put_display_buffer+0x140>)
    2d50:	78db      	ldrb	r3, [r3, #3]
    2d52:	2b00      	cmp	r3, #0
    2d54:	d13d      	bne.n	2dd2 <eink_ed013tc1_put_display_buffer+0x106>
    eink_data[0] = 0x01; /* GU2 Update Mode */
    2d56:	a904      	add	r1, sp, #16
    2d58:	2301      	movs	r3, #1
    2d5a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2d5c:	2300      	movs	r3, #0
    2d5e:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2d60:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2d62:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    2d64:	227f      	movs	r2, #127	; 0x7f
    2d66:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2d68:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    2d6a:	33ff      	adds	r3, #255	; 0xff
    2d6c:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2d6e:	3a78      	subs	r2, #120	; 0x78
    2d70:	2012      	movs	r0, #18
    2d72:	4b21      	ldr	r3, [pc, #132]	; (2df8 <eink_ed013tc1_put_display_buffer+0x12c>)
    2d74:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2d76:	4f22      	ldr	r7, [pc, #136]	; (2e00 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    2d78:	4e22      	ldr	r6, [pc, #136]	; (2e04 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    2d7a:	a802      	add	r0, sp, #8
    2d7c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2d7e:	23c0      	movs	r3, #192	; 0xc0
    2d80:	05db      	lsls	r3, r3, #23
    2d82:	2580      	movs	r5, #128	; 0x80
    2d84:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d86:	22a0      	movs	r2, #160	; 0xa0
    2d88:	491f      	ldr	r1, [pc, #124]	; (2e08 <eink_ed013tc1_put_display_buffer+0x13c>)
    2d8a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d8c:	2190      	movs	r1, #144	; 0x90
    2d8e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d90:	4053      	eors	r3, r2
    2d92:	401c      	ands	r4, r3
    2d94:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2d96:	a802      	add	r0, sp, #8
    2d98:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2d9a:	4225      	tst	r5, r4
    2d9c:	d0ed      	beq.n	2d7a <eink_ed013tc1_put_display_buffer+0xae>
    eink_write_data(UC8173_POF, 0, 0);
    2d9e:	2200      	movs	r2, #0
    2da0:	2100      	movs	r1, #0
    2da2:	2002      	movs	r0, #2
    2da4:	4b14      	ldr	r3, [pc, #80]	; (2df8 <eink_ed013tc1_put_display_buffer+0x12c>)
    2da6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2da8:	4f15      	ldr	r7, [pc, #84]	; (2e00 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    2daa:	4e16      	ldr	r6, [pc, #88]	; (2e04 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    2dac:	a803      	add	r0, sp, #12
    2dae:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2db0:	23c0      	movs	r3, #192	; 0xc0
    2db2:	05db      	lsls	r3, r3, #23
    2db4:	2580      	movs	r5, #128	; 0x80
    2db6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2db8:	22a0      	movs	r2, #160	; 0xa0
    2dba:	4913      	ldr	r1, [pc, #76]	; (2e08 <eink_ed013tc1_put_display_buffer+0x13c>)
    2dbc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2dbe:	2190      	movs	r1, #144	; 0x90
    2dc0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2dc2:	4053      	eors	r3, r2
    2dc4:	401c      	ands	r4, r3
    2dc6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2dc8:	a803      	add	r0, sp, #12
    2dca:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    2dcc:	4225      	tst	r5, r4
    2dce:	d1ed      	bne.n	2dac <eink_ed013tc1_put_display_buffer+0xe0>
    2dd0:	e796      	b.n	2d00 <eink_ed013tc1_put_display_buffer+0x34>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ED013TC1_GC2;
    2dd2:	2200      	movs	r2, #0
    2dd4:	4b0d      	ldr	r3, [pc, #52]	; (2e0c <eink_ed013tc1_put_display_buffer+0x140>)
    2dd6:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    2dd8:	3220      	adds	r2, #32
    2dda:	2155      	movs	r1, #85	; 0x55
    2ddc:	2020      	movs	r0, #32
    2dde:	4c06      	ldr	r4, [pc, #24]	; (2df8 <eink_ed013tc1_put_display_buffer+0x12c>)
    2de0:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    2de2:	2280      	movs	r2, #128	; 0x80
    2de4:	0092      	lsls	r2, r2, #2
    2de6:	2181      	movs	r1, #129	; 0x81
    2de8:	2022      	movs	r0, #34	; 0x22
    2dea:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);	
    2dec:	2280      	movs	r2, #128	; 0x80
    2dee:	2100      	movs	r1, #0
    2df0:	2026      	movs	r0, #38	; 0x26
    2df2:	47a0      	blx	r4
    2df4:	e7af      	b.n	2d56 <eink_ed013tc1_put_display_buffer+0x8a>
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	00001bc9 	.word	0x00001bc9
    2dfc:	20000430 	.word	0x20000430
    2e00:	0000034d 	.word	0x0000034d
    2e04:	0000035b 	.word	0x0000035b
    2e08:	41004400 	.word	0x41004400
    2e0c:	20000390 	.word	0x20000390

00002e10 <_eink_ite_write_data>:
void _eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes,
        uint8_t fast_write)
{   
    2e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e12:	0004      	movs	r4, r0
    2e14:	0015      	movs	r5, r2
    uint32_t i, j, sendWords_m, sendWords_r;
    
    eink_ite_wait_for_hrdy();
    2e16:	4b12      	ldr	r3, [pc, #72]	; (2e60 <_eink_ite_write_data+0x50>)
    2e18:	4798      	blx	r3
    if (command != 0) {
    2e1a:	2c00      	cmp	r4, #0
    2e1c:	d11d      	bne.n	2e5a <_eink_ite_write_data+0x4a>
        /* Set CSB LOW to enable communication to the display */
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
    }
    
    eink_ite_wait_for_hrdy();
    2e1e:	4b10      	ldr	r3, [pc, #64]	; (2e60 <_eink_ite_write_data+0x50>)
    2e20:	4798      	blx	r3
    if (data_bytes != 0) {
    2e22:	2d00      	cmp	r5, #0
    2e24:	d018      	beq.n	2e58 <_eink_ite_write_data+0x48>
        /* Data burst must be sent 1024 words at a time */
        sendWords_r = data_bytes % 2048;
    2e26:	056e      	lsls	r6, r5, #21
    2e28:	0d76      	lsrs	r6, r6, #21
        sendWords_m = (data_bytes - sendWords_r) / 2048;
    2e2a:	1bad      	subs	r5, r5, r6
    2e2c:	0aed      	lsrs	r5, r5, #11
        
        /* If we have more than 1024 words, start sending them in bursts */
        for(j=0; j<sendWords_m; j++)
    2e2e:	2400      	movs	r4, #0
    2e30:	2d00      	cmp	r5, #0
    2e32:	d009      	beq.n	2e48 <_eink_ite_write_data+0x38>
            }           
            /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
            gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
            eink_ite_wait_for_hrdy();
    2e34:	4f0a      	ldr	r7, [pc, #40]	; (2e60 <_eink_ite_write_data+0x50>)
{   
    2e36:	2380      	movs	r3, #128	; 0x80
    2e38:	011b      	lsls	r3, r3, #4
    2e3a:	3b01      	subs	r3, #1
            for (i=0; i<2048; i++)
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d1fc      	bne.n	2e3a <_eink_ite_write_data+0x2a>
            eink_ite_wait_for_hrdy();
    2e40:	47b8      	blx	r7
        for(j=0; j<sendWords_m; j++)
    2e42:	3401      	adds	r4, #1
    2e44:	42a5      	cmp	r5, r4
    2e46:	d1f6      	bne.n	2e36 <_eink_ite_write_data+0x26>
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 0);
#endif
        eink_ite_send_raw_hword(0x0000);
        /* Send the remaining data (or all the data if there was less than 1024 words */
        for (i=0; i<sendWords_r; i++) {
    2e48:	2e00      	cmp	r6, #0
    2e4a:	d003      	beq.n	2e54 <_eink_ite_write_data+0x44>
    2e4c:	2300      	movs	r3, #0
    2e4e:	3301      	adds	r3, #1
    2e50:	429e      	cmp	r6, r3
    2e52:	d1fc      	bne.n	2e4e <_eink_ite_write_data+0x3e>
        }
        /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
        eink_ite_wait_for_hrdy();
    2e54:	4b02      	ldr	r3, [pc, #8]	; (2e60 <_eink_ite_write_data+0x50>)
    2e56:	4798      	blx	r3
    }
}
    2e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eink_ite_wait_for_hrdy();
    2e5a:	4b01      	ldr	r3, [pc, #4]	; (2e60 <_eink_ite_write_data+0x50>)
    2e5c:	4798      	blx	r3
    2e5e:	e7de      	b.n	2e1e <_eink_ite_write_data+0xe>
    2e60:	00000575 	.word	0x00000575

00002e64 <eink_ite_write_data>:
 */
void eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    2e64:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 0);
    2e66:	2300      	movs	r3, #0
    2e68:	4c01      	ldr	r4, [pc, #4]	; (2e70 <eink_ite_write_data+0xc>)
    2e6a:	47a0      	blx	r4
}
    2e6c:	bd10      	pop	{r4, pc}
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	00002e11 	.word	0x00002e11

00002e74 <eink_it8951_refresh_partial_display>:
    eink_coordinate show_x,
    eink_coordinate show_y,
    eink_coordinate show_w,
    eink_coordinate show_h,
    uint8_t update_mode)
{
    2e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e76:	b085      	sub	sp, #20
    2e78:	ac0a      	add	r4, sp, #40	; 0x28
    2e7a:	7825      	ldrb	r5, [r4, #0]
    uint16_t eink_data[5];
    switch(it8951_global_instance.display_rotation)
    2e7c:	2430      	movs	r4, #48	; 0x30
    2e7e:	4e26      	ldr	r6, [pc, #152]	; (2f18 <eink_it8951_refresh_partial_display+0xa4>)
    2e80:	5d34      	ldrb	r4, [r6, r4]
    2e82:	b2e4      	uxtb	r4, r4
    2e84:	2c01      	cmp	r4, #1
    2e86:	d025      	beq.n	2ed4 <eink_it8951_refresh_partial_display+0x60>
    2e88:	2c00      	cmp	r4, #0
    2e8a:	d01d      	beq.n	2ec8 <eink_it8951_refresh_partial_display+0x54>
    2e8c:	2c02      	cmp	r4, #2
    2e8e:	d02b      	beq.n	2ee8 <eink_it8951_refresh_partial_display+0x74>
    2e90:	2c03      	cmp	r4, #3
    2e92:	d036      	beq.n	2f02 <eink_it8951_refresh_partial_display+0x8e>
            eink_data[1] = (uint16_t) show_y;
            eink_data[2] = (uint16_t) show_w;
            eink_data[3] = (uint16_t) show_h;
            break;
    }
    eink_data[4] = (uint16_t) update_mode;
    2e94:	a901      	add	r1, sp, #4
    2e96:	810d      	strh	r5, [r1, #8]
    /* Send I80 Display Command */
    eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2e98:	2201      	movs	r2, #1
    2e9a:	2034      	movs	r0, #52	; 0x34
    2e9c:	4c1f      	ldr	r4, [pc, #124]	; (2f1c <eink_it8951_refresh_partial_display+0xa8>)
    2e9e:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[1], 1);
    2ea0:	2201      	movs	r2, #1
    2ea2:	466b      	mov	r3, sp
    2ea4:	1d99      	adds	r1, r3, #6
    2ea6:	2000      	movs	r0, #0
    2ea8:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[2], 1);
    2eaa:	2201      	movs	r2, #1
    2eac:	a902      	add	r1, sp, #8
    2eae:	2000      	movs	r0, #0
    2eb0:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[3], 1);
    2eb2:	2201      	movs	r2, #1
    2eb4:	210a      	movs	r1, #10
    2eb6:	4469      	add	r1, sp
    2eb8:	2000      	movs	r0, #0
    2eba:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[4], 1);
    2ebc:	2201      	movs	r2, #1
    2ebe:	a903      	add	r1, sp, #12
    2ec0:	2000      	movs	r0, #0
    2ec2:	47a0      	blx	r4
}
    2ec4:	b005      	add	sp, #20
    2ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_data[0] = (uint16_t) show_y;
    2ec8:	ac01      	add	r4, sp, #4
    2eca:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) show_x;
    2ecc:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2ece:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2ed0:	80e2      	strh	r2, [r4, #6]
            break;
    2ed2:	e7df      	b.n	2e94 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) show_x;
    2ed4:	ac01      	add	r4, sp, #4
    2ed6:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_y-show_h;
    2ed8:	480f      	ldr	r0, [pc, #60]	; (2f18 <eink_it8951_refresh_partial_display+0xa4>)
    2eda:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2edc:	1a41      	subs	r1, r0, r1
    2ede:	1ac9      	subs	r1, r1, r3
    2ee0:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    2ee2:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    2ee4:	80e3      	strh	r3, [r4, #6]
            break;
    2ee6:	e7d5      	b.n	2e94 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_y-show_h;
    2ee8:	4f0b      	ldr	r7, [pc, #44]	; (2f18 <eink_it8951_refresh_partial_display+0xa4>)
    2eea:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
    2eec:	ac01      	add	r4, sp, #4
    2eee:	1a71      	subs	r1, r6, r1
    2ef0:	1ac9      	subs	r1, r1, r3
    2ef2:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_x-show_w;
    2ef4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
    2ef6:	1a08      	subs	r0, r1, r0
    2ef8:	1a80      	subs	r0, r0, r2
    2efa:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2efc:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2efe:	80e2      	strh	r2, [r4, #6]
            break;
    2f00:	e7c8      	b.n	2e94 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_x-show_w;
    2f02:	4c05      	ldr	r4, [pc, #20]	; (2f18 <eink_it8951_refresh_partial_display+0xa4>)
    2f04:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
    2f06:	ac01      	add	r4, sp, #4
    2f08:	1a30      	subs	r0, r6, r0
    2f0a:	1a80      	subs	r0, r0, r2
    2f0c:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) show_y;
    2f0e:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    2f10:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    2f12:	80e3      	strh	r3, [r4, #6]
            break;
    2f14:	e7be      	b.n	2e94 <eink_it8951_refresh_partial_display+0x20>
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	200003c0 	.word	0x200003c0
    2f1c:	00002e65 	.word	0x00002e65

00002f20 <eink_it8951_refresh_display_mode>:
{
    2f20:	b510      	push	{r4, lr}
    2f22:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    2f24:	a901      	add	r1, sp, #4
    2f26:	2300      	movs	r3, #0
    2f28:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    2f2a:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    2f2c:	4b0e      	ldr	r3, [pc, #56]	; (2f68 <eink_it8951_refresh_display_mode+0x48>)
    2f2e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    2f30:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    2f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2f34:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    2f36:	8108      	strh	r0, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2f38:	2201      	movs	r2, #1
    2f3a:	2034      	movs	r0, #52	; 0x34
    2f3c:	4c0b      	ldr	r4, [pc, #44]	; (2f6c <eink_it8951_refresh_display_mode+0x4c>)
    2f3e:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    2f40:	2201      	movs	r2, #1
    2f42:	466b      	mov	r3, sp
    2f44:	1d99      	adds	r1, r3, #6
    2f46:	2000      	movs	r0, #0
    2f48:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    2f4a:	2201      	movs	r2, #1
    2f4c:	a902      	add	r1, sp, #8
    2f4e:	2000      	movs	r0, #0
    2f50:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    2f52:	2201      	movs	r2, #1
    2f54:	210a      	movs	r1, #10
    2f56:	4469      	add	r1, sp
    2f58:	2000      	movs	r0, #0
    2f5a:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    2f5c:	2201      	movs	r2, #1
    2f5e:	a903      	add	r1, sp, #12
    2f60:	2000      	movs	r0, #0
    2f62:	47a0      	blx	r4
 }
    2f64:	b004      	add	sp, #16
    2f66:	bd10      	pop	{r4, pc}
    2f68:	200003c0 	.word	0x200003c0
    2f6c:	00002e65 	.word	0x00002e65

00002f70 <eink_it8951_put_partial_display_buffer>:
 * \param start_y starting Y coordinate start of the display buffer to send
 * \param window_w width of the display buffer to send
 * \param window_h height of the display buffer to send
 */
void eink_it8951_put_partial_display_buffer(eink_coordinate start_x, eink_coordinate start_y, eink_coordinate window_w, eink_coordinate window_h)
{
    2f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f72:	46de      	mov	lr, fp
    2f74:	4657      	mov	r7, sl
    2f76:	464e      	mov	r6, r9
    2f78:	4645      	mov	r5, r8
    2f7a:	b5e0      	push	{r5, r6, r7, lr}
    2f7c:	b087      	sub	sp, #28
    2f7e:	0004      	movs	r4, r0
    2f80:	000d      	movs	r5, r1
    2f82:	9201      	str	r2, [sp, #4]
    2f84:	001f      	movs	r7, r3
    uint16_t eink_data[5], rotation = 0;
    uint16_t* display_buffer;
    uint32_t i, j, k;

    /* Get pointer to Display Buffer */
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    2f86:	4b45      	ldr	r3, [pc, #276]	; (309c <eink_it8951_put_partial_display_buffer+0x12c>)
    2f88:	681b      	ldr	r3, [r3, #0]
    2f8a:	4698      	mov	r8, r3
        
    /* Set Image Buffer Base address (IT8951) */
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    2f8c:	4e44      	ldr	r6, [pc, #272]	; (30a0 <eink_it8951_put_partial_display_buffer+0x130>)
    2f8e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    2f90:	6b72      	ldr	r2, [r6, #52]	; 0x34
    2f92:	4692      	mov	sl, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    2f94:	4a43      	ldr	r2, [pc, #268]	; (30a4 <eink_it8951_put_partial_display_buffer+0x134>)
    2f96:	a902      	add	r1, sp, #8
    2f98:	800a      	strh	r2, [r1, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    2f9a:	0c1b      	lsrs	r3, r3, #16
    2f9c:	804b      	strh	r3, [r1, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    2f9e:	2202      	movs	r2, #2
    2fa0:	2011      	movs	r0, #17
    2fa2:	4b41      	ldr	r3, [pc, #260]	; (30a8 <eink_it8951_put_partial_display_buffer+0x138>)
    2fa4:	469b      	mov	fp, r3
    2fa6:	4798      	blx	r3
    uint16_t data_send[2] = {reg_addr, reg_value};
    2fa8:	2382      	movs	r3, #130	; 0x82
    2faa:	009b      	lsls	r3, r3, #2
    2fac:	aa02      	add	r2, sp, #8
    2fae:	8013      	strh	r3, [r2, #0]
    2fb0:	0013      	movs	r3, r2
    2fb2:	4652      	mov	r2, sl
    2fb4:	805a      	strh	r2, [r3, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    2fb6:	2202      	movs	r2, #2
    2fb8:	0019      	movs	r1, r3
    2fba:	2011      	movs	r0, #17
    2fbc:	47d8      	blx	fp
    it8951_write_reg(LISAR + 2, usWordH);
    it8951_write_reg(LISAR, usWordL);
    
    /* Set arguments for Load Image Start */
    switch(it8951_global_instance.display_rotation)
    2fbe:	2330      	movs	r3, #48	; 0x30
    2fc0:	5cf3      	ldrb	r3, [r6, r3]
    2fc2:	b2db      	uxtb	r3, r3
    2fc4:	2b02      	cmp	r3, #2
    2fc6:	d022      	beq.n	300e <eink_it8951_put_partial_display_buffer+0x9e>
    2fc8:	2b03      	cmp	r3, #3
    2fca:	d022      	beq.n	3012 <eink_it8951_put_partial_display_buffer+0xa2>
    uint16_t eink_data[5], rotation = 0;
    2fcc:	3b01      	subs	r3, #1
    2fce:	425a      	negs	r2, r3
    2fd0:	4153      	adcs	r3, r2
        case ROTATE_0: rotation = 0; break;
        case ROTATE_90: rotation = 1; break;
        case ROTATE_180: rotation = 2; break;
        case ROTATE_270: rotation = 3; break;
    }
    eink_data[0] = (0 << 8) | (2 << 4) | (rotation);
    2fd2:	a903      	add	r1, sp, #12
    2fd4:	2220      	movs	r2, #32
    2fd6:	4313      	orrs	r3, r2
    2fd8:	800b      	strh	r3, [r1, #0]
    eink_data[1] = start_y;
    2fda:	804d      	strh	r5, [r1, #2]
    eink_data[2] = start_x;
    2fdc:	808c      	strh	r4, [r1, #4]
    eink_data[3] = window_h;
    2fde:	80cf      	strh	r7, [r1, #6]
    eink_data[4] = window_w;
    2fe0:	466b      	mov	r3, sp
    2fe2:	889b      	ldrh	r3, [r3, #4]
    2fe4:	810b      	strh	r3, [r1, #8]
    eink_ite_write_data(IT8951_I80_LD_IMG_AREA, eink_data, 5);
    2fe6:	2205      	movs	r2, #5
    2fe8:	2021      	movs	r0, #33	; 0x21
    2fea:	4b2f      	ldr	r3, [pc, #188]	; (30a8 <eink_it8951_put_partial_display_buffer+0x138>)
    2fec:	4798      	blx	r3
    
    /* Move to start of the window within the display buffer */
    if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    2fee:	2330      	movs	r3, #48	; 0x30
    2ff0:	4a2b      	ldr	r2, [pc, #172]	; (30a0 <eink_it8951_put_partial_display_buffer+0x130>)
    2ff2:	5cd3      	ldrb	r3, [r2, r3]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d00e      	beq.n	3016 <eink_it8951_put_partial_display_buffer+0xa6>
    2ff8:	2330      	movs	r3, #48	; 0x30
    2ffa:	5cd3      	ldrb	r3, [r2, r3]
    2ffc:	2b02      	cmp	r3, #2
    2ffe:	d00a      	beq.n	3016 <eink_it8951_put_partial_display_buffer+0xa6>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    else
        display_buffer += (it8951_global_instance.display_width / 4) * (start_x);
    3000:	4b27      	ldr	r3, [pc, #156]	; (30a0 <eink_it8951_put_partial_display_buffer+0x130>)
    3002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3004:	089b      	lsrs	r3, r3, #2
    3006:	435c      	muls	r4, r3
    3008:	0064      	lsls	r4, r4, #1
    300a:	4444      	add	r4, r8
    300c:	e009      	b.n	3022 <eink_it8951_put_partial_display_buffer+0xb2>
        case ROTATE_180: rotation = 2; break;
    300e:	2302      	movs	r3, #2
    3010:	e7df      	b.n	2fd2 <eink_it8951_put_partial_display_buffer+0x62>
        case ROTATE_270: rotation = 3; break;
    3012:	2303      	movs	r3, #3
    3014:	e7dd      	b.n	2fd2 <eink_it8951_put_partial_display_buffer+0x62>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    3016:	4b22      	ldr	r3, [pc, #136]	; (30a0 <eink_it8951_put_partial_display_buffer+0x130>)
    3018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    301a:	089b      	lsrs	r3, r3, #2
    301c:	435c      	muls	r4, r3
    301e:	0064      	lsls	r4, r4, #1
    3020:	4444      	add	r4, r8
    display_buffer += (start_y / 4);
    3022:	08ad      	lsrs	r5, r5, #2
    3024:	006d      	lsls	r5, r5, #1
    3026:	1964      	adds	r4, r4, r5
    
    /* Loop through window sending the display buffer */
    for(j = 0; j < window_w; j++)
    3028:	9e01      	ldr	r6, [sp, #4]
    302a:	2e00      	cmp	r6, #0
    302c:	d02a      	beq.n	3084 <eink_it8951_put_partial_display_buffer+0x114>
    {
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    302e:	08bb      	lsrs	r3, r7, #2
    3030:	9301      	str	r3, [sp, #4]
        display_buffer += (window_h / 4);
    3032:	005a      	lsls	r2, r3, #1
    3034:	4691      	mov	r9, r2
        
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
        else
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    3036:	469a      	mov	sl, r3
    3038:	2500      	movs	r5, #0
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    303a:	4b1b      	ldr	r3, [pc, #108]	; (30a8 <eink_it8951_put_partial_display_buffer+0x138>)
    303c:	4698      	mov	r8, r3
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    303e:	4f18      	ldr	r7, [pc, #96]	; (30a0 <eink_it8951_put_partial_display_buffer+0x130>)
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
    3040:	46bb      	mov	fp, r7
    3042:	e009      	b.n	3058 <eink_it8951_put_partial_display_buffer+0xe8>
    3044:	465b      	mov	r3, fp
    3046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    3048:	089b      	lsrs	r3, r3, #2
    304a:	4652      	mov	r2, sl
    304c:	1a9b      	subs	r3, r3, r2
    304e:	005b      	lsls	r3, r3, #1
    3050:	18e4      	adds	r4, r4, r3
    for(j = 0; j < window_w; j++)
    3052:	3501      	adds	r5, #1
    3054:	42b5      	cmp	r5, r6
    3056:	d215      	bcs.n	3084 <eink_it8951_put_partial_display_buffer+0x114>
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    3058:	9a01      	ldr	r2, [sp, #4]
    305a:	0021      	movs	r1, r4
    305c:	2000      	movs	r0, #0
    305e:	47c0      	blx	r8
        display_buffer += (window_h / 4);
    3060:	444c      	add	r4, r9
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    3062:	2330      	movs	r3, #48	; 0x30
    3064:	5cfb      	ldrb	r3, [r7, r3]
    3066:	2b00      	cmp	r3, #0
    3068:	d0ec      	beq.n	3044 <eink_it8951_put_partial_display_buffer+0xd4>
    306a:	2330      	movs	r3, #48	; 0x30
    306c:	4a0c      	ldr	r2, [pc, #48]	; (30a0 <eink_it8951_put_partial_display_buffer+0x130>)
    306e:	5cd3      	ldrb	r3, [r2, r3]
    3070:	2b02      	cmp	r3, #2
    3072:	d0e7      	beq.n	3044 <eink_it8951_put_partial_display_buffer+0xd4>
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    3074:	4b0a      	ldr	r3, [pc, #40]	; (30a0 <eink_it8951_put_partial_display_buffer+0x130>)
    3076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3078:	089b      	lsrs	r3, r3, #2
    307a:	4652      	mov	r2, sl
    307c:	1a9b      	subs	r3, r3, r2
    307e:	005b      	lsls	r3, r3, #1
    3080:	18e4      	adds	r4, r4, r3
    3082:	e7e6      	b.n	3052 <eink_it8951_put_partial_display_buffer+0xe2>
    }
    
    /* Send Load Img End Command */
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    3084:	2200      	movs	r2, #0
    3086:	2100      	movs	r1, #0
    3088:	2022      	movs	r0, #34	; 0x22
    308a:	4b07      	ldr	r3, [pc, #28]	; (30a8 <eink_it8951_put_partial_display_buffer+0x138>)
    308c:	4798      	blx	r3
}
    308e:	b007      	add	sp, #28
    3090:	bc3c      	pop	{r2, r3, r4, r5}
    3092:	4690      	mov	r8, r2
    3094:	4699      	mov	r9, r3
    3096:	46a2      	mov	sl, r4
    3098:	46ab      	mov	fp, r5
    309a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    309c:	200003a4 	.word	0x200003a4
    30a0:	200003c0 	.word	0x200003c0
    30a4:	0000020a 	.word	0x0000020a
    30a8:	00002e65 	.word	0x00002e65

000030ac <eink_it8951_refresh_display>:
{
    30ac:	b510      	push	{r4, lr}
    30ae:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    30b0:	a901      	add	r1, sp, #4
    30b2:	2300      	movs	r3, #0
    30b4:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    30b6:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    30b8:	4b0f      	ldr	r3, [pc, #60]	; (30f8 <eink_it8951_refresh_display+0x4c>)
    30ba:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    30bc:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    30be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    30c0:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    30c2:	2302      	movs	r3, #2
    30c4:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    30c6:	2201      	movs	r2, #1
    30c8:	2034      	movs	r0, #52	; 0x34
    30ca:	4c0c      	ldr	r4, [pc, #48]	; (30fc <eink_it8951_refresh_display+0x50>)
    30cc:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    30ce:	2201      	movs	r2, #1
    30d0:	466b      	mov	r3, sp
    30d2:	1d99      	adds	r1, r3, #6
    30d4:	2000      	movs	r0, #0
    30d6:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    30d8:	2201      	movs	r2, #1
    30da:	a902      	add	r1, sp, #8
    30dc:	2000      	movs	r0, #0
    30de:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    30e0:	2201      	movs	r2, #1
    30e2:	210a      	movs	r1, #10
    30e4:	4469      	add	r1, sp
    30e6:	2000      	movs	r0, #0
    30e8:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    30ea:	2201      	movs	r2, #1
    30ec:	a903      	add	r1, sp, #12
    30ee:	2000      	movs	r0, #0
    30f0:	47a0      	blx	r4
}
    30f2:	b004      	add	sp, #16
    30f4:	bd10      	pop	{r4, pc}
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	200003c0 	.word	0x200003c0
    30fc:	00002e65 	.word	0x00002e65

00003100 <eink_ite_write_data_fast>:
 */
void eink_ite_write_data_fast(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    3100:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 1);
    3102:	2301      	movs	r3, #1
    3104:	4c01      	ldr	r4, [pc, #4]	; (310c <eink_ite_write_data_fast+0xc>)
    3106:	47a0      	blx	r4
}
    3108:	bd10      	pop	{r4, pc}
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	00002e11 	.word	0x00002e11

00003110 <eink_it8951_put_display_buffer>:
{
    3110:	b5f0      	push	{r4, r5, r6, r7, lr}
    3112:	46c6      	mov	lr, r8
    3114:	b500      	push	{lr}
    3116:	b084      	sub	sp, #16
    3118:	0005      	movs	r5, r0
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    311a:	4e31      	ldr	r6, [pc, #196]	; (31e0 <eink_it8951_put_display_buffer+0xd0>)
    311c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    311e:	6b72      	ldr	r2, [r6, #52]	; 0x34
    3120:	4690      	mov	r8, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    3122:	ac01      	add	r4, sp, #4
    3124:	4a2f      	ldr	r2, [pc, #188]	; (31e4 <eink_it8951_put_display_buffer+0xd4>)
    3126:	8022      	strh	r2, [r4, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    3128:	0c1b      	lsrs	r3, r3, #16
    312a:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    312c:	2202      	movs	r2, #2
    312e:	0021      	movs	r1, r4
    3130:	2011      	movs	r0, #17
    3132:	4f2d      	ldr	r7, [pc, #180]	; (31e8 <eink_it8951_put_display_buffer+0xd8>)
    3134:	47b8      	blx	r7
    uint16_t data_send[2] = {reg_addr, reg_value};
    3136:	2382      	movs	r3, #130	; 0x82
    3138:	009b      	lsls	r3, r3, #2
    313a:	8023      	strh	r3, [r4, #0]
    313c:	4643      	mov	r3, r8
    313e:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    3140:	2202      	movs	r2, #2
    3142:	0021      	movs	r1, r4
    3144:	2011      	movs	r0, #17
    3146:	47b8      	blx	r7
    switch(it8951_global_instance.display_rotation)
    3148:	2330      	movs	r3, #48	; 0x30
    314a:	5cf3      	ldrb	r3, [r6, r3]
    314c:	b2db      	uxtb	r3, r3
    314e:	2b02      	cmp	r3, #2
    3150:	d01f      	beq.n	3192 <eink_it8951_put_display_buffer+0x82>
    3152:	2b03      	cmp	r3, #3
    3154:	d01f      	beq.n	3196 <eink_it8951_put_display_buffer+0x86>
    uint16_t eink_data, rotation = 0;
    3156:	3b01      	subs	r3, #1
    3158:	425a      	negs	r2, r3
    315a:	4153      	adcs	r3, r2
    eink_data = (0 << 8) | (2 << 4) | (rotation);
    315c:	210e      	movs	r1, #14
    315e:	4469      	add	r1, sp
    3160:	2220      	movs	r2, #32
    3162:	4313      	orrs	r3, r2
    3164:	800b      	strh	r3, [r1, #0]
    eink_ite_write_data(IT8951_I80_LD_IMG, &eink_data, 1);
    3166:	2201      	movs	r2, #1
    3168:	2020      	movs	r0, #32
    316a:	4c1f      	ldr	r4, [pc, #124]	; (31e8 <eink_it8951_put_display_buffer+0xd8>)
    316c:	47a0      	blx	r4
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    316e:	4b1c      	ldr	r3, [pc, #112]	; (31e0 <eink_it8951_put_display_buffer+0xd0>)
    3170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3172:	0852      	lsrs	r2, r2, #1
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    3174:	4b1d      	ldr	r3, [pc, #116]	; (31ec <eink_it8951_put_display_buffer+0xdc>)
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    3176:	6819      	ldr	r1, [r3, #0]
    3178:	2000      	movs	r0, #0
    317a:	4b1d      	ldr	r3, [pc, #116]	; (31f0 <eink_it8951_put_display_buffer+0xe0>)
    317c:	4798      	blx	r3
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    317e:	2200      	movs	r2, #0
    3180:	2100      	movs	r1, #0
    3182:	2022      	movs	r0, #34	; 0x22
    3184:	47a0      	blx	r4
    if(refresh_display) eink_it8951_refresh_display();
    3186:	2d00      	cmp	r5, #0
    3188:	d107      	bne.n	319a <eink_it8951_put_display_buffer+0x8a>
}
    318a:	b004      	add	sp, #16
    318c:	bc04      	pop	{r2}
    318e:	4690      	mov	r8, r2
    3190:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case ROTATE_180: rotation = 2; break;
    3192:	2302      	movs	r3, #2
    3194:	e7e2      	b.n	315c <eink_it8951_put_display_buffer+0x4c>
        case ROTATE_270: rotation = 3; break;
    3196:	2303      	movs	r3, #3
    3198:	e7e0      	b.n	315c <eink_it8951_put_display_buffer+0x4c>
     eink_data[0] = (uint16_t) 0;
    319a:	a901      	add	r1, sp, #4
    319c:	2300      	movs	r3, #0
    319e:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    31a0:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    31a2:	4b0f      	ldr	r3, [pc, #60]	; (31e0 <eink_it8951_put_display_buffer+0xd0>)
    31a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    31a6:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    31a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    31aa:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    31ac:	2302      	movs	r3, #2
    31ae:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    31b0:	2201      	movs	r2, #1
    31b2:	2034      	movs	r0, #52	; 0x34
    31b4:	4c0c      	ldr	r4, [pc, #48]	; (31e8 <eink_it8951_put_display_buffer+0xd8>)
    31b6:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    31b8:	2201      	movs	r2, #1
    31ba:	466b      	mov	r3, sp
    31bc:	1d99      	adds	r1, r3, #6
    31be:	2000      	movs	r0, #0
    31c0:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    31c2:	2201      	movs	r2, #1
    31c4:	a902      	add	r1, sp, #8
    31c6:	2000      	movs	r0, #0
    31c8:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    31ca:	2201      	movs	r2, #1
    31cc:	210a      	movs	r1, #10
    31ce:	4469      	add	r1, sp
    31d0:	2000      	movs	r0, #0
    31d2:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    31d4:	2201      	movs	r2, #1
    31d6:	a903      	add	r1, sp, #12
    31d8:	2000      	movs	r0, #0
    31da:	47a0      	blx	r4
}
    31dc:	e7d5      	b.n	318a <eink_it8951_put_display_buffer+0x7a>
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	200003c0 	.word	0x200003c0
    31e4:	0000020a 	.word	0x0000020a
    31e8:	00002e65 	.word	0x00002e65
    31ec:	200003a4 	.word	0x200003a4
    31f0:	00003101 	.word	0x00003101

000031f4 <eink_ite_set_bit>:
 * \param bit_value Bit value.
 */
void eink_ite_set_bit(uint8_t *byte, uint8_t bit_number, bool bit_value)
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
    31f4:	2a00      	cmp	r2, #0
    31f6:	d105      	bne.n	3204 <eink_ite_set_bit+0x10>
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
    31f8:	2201      	movs	r2, #1
    31fa:	408a      	lsls	r2, r1
    31fc:	7803      	ldrb	r3, [r0, #0]
    31fe:	4393      	bics	r3, r2
    3200:	7003      	strb	r3, [r0, #0]
    }
    3202:	4770      	bx	lr
        *byte |= 1 << bit_number;
    3204:	2201      	movs	r2, #1
    3206:	408a      	lsls	r2, r1
    3208:	7803      	ldrb	r3, [r0, #0]
    320a:	4313      	orrs	r3, r2
    320c:	7003      	strb	r3, [r0, #0]
    320e:	e7f8      	b.n	3202 <eink_ite_set_bit+0xe>

00003210 <eink_it8951_set_pixel_raw>:
 * \param x_set X coordinate of the pixel to set.
 * \param y_set Y coordinate of the pixel to set.
 * \param pixel_value Greyscale value to set the pixel to.
 */
void eink_it8951_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value)
{
    3210:	b5f0      	push	{r4, r5, r6, r7, lr}
    3212:	46c6      	mov	lr, r8
    3214:	b500      	push	{lr}
    3216:	0015      	movs	r5, r2
    eink_coordinate x1_set, y1_set, odd_even_bit;
    uint32_t byte_set;
    
    /* Ignore any pixels being set outside of the display window */
    if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3218:	4b34      	ldr	r3, [pc, #208]	; (32ec <eink_it8951_set_pixel_raw+0xdc>)
    321a:	681f      	ldr	r7, [r3, #0]
    321c:	887b      	ldrh	r3, [r7, #2]
    321e:	4283      	cmp	r3, r0
    3220:	d93f      	bls.n	32a2 <eink_it8951_set_pixel_raw+0x92>
    3222:	88bb      	ldrh	r3, [r7, #4]
    3224:	428b      	cmp	r3, r1
    3226:	d93c      	bls.n	32a2 <eink_it8951_set_pixel_raw+0x92>
        
        if ( (it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180) ) {
    3228:	2330      	movs	r3, #48	; 0x30
    322a:	4a31      	ldr	r2, [pc, #196]	; (32f0 <eink_it8951_set_pixel_raw+0xe0>)
    322c:	5cd3      	ldrb	r3, [r2, r3]
    322e:	2b00      	cmp	r3, #0
    3230:	d00c      	beq.n	324c <eink_it8951_set_pixel_raw+0x3c>
    3232:	2330      	movs	r3, #48	; 0x30
    3234:	5cd3      	ldrb	r3, [r2, r3]
    3236:	2b02      	cmp	r3, #2
    3238:	d008      	beq.n	324c <eink_it8951_set_pixel_raw+0x3c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
            odd_even_bit = y_set % 2;
        } else {
            /* Calculate which byte the pixel in question is contained in */
            y1_set = (y_set - (y_set % 2)) / 2;
            byte_set = y1_set + ((it8951_global_instance.display_config.display_height / 2) * x_set);
    323a:	4b2d      	ldr	r3, [pc, #180]	; (32f0 <eink_it8951_set_pixel_raw+0xe0>)
    323c:	885c      	ldrh	r4, [r3, #2]
    323e:	0864      	lsrs	r4, r4, #1
    3240:	4360      	muls	r0, r4
    3242:	104c      	asrs	r4, r1, #1
    3244:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    3246:	2301      	movs	r3, #1
    3248:	4019      	ands	r1, r3
    324a:	e007      	b.n	325c <eink_it8951_set_pixel_raw+0x4c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
    324c:	4b28      	ldr	r3, [pc, #160]	; (32f0 <eink_it8951_set_pixel_raw+0xe0>)
    324e:	881c      	ldrh	r4, [r3, #0]
    3250:	0864      	lsrs	r4, r4, #1
    3252:	4360      	muls	r0, r4
    3254:	104c      	asrs	r4, r1, #1
    3256:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    3258:	2301      	movs	r3, #1
    325a:	4019      	ands	r1, r3
        }
        
        if (!odd_even_bit) {
    325c:	2900      	cmp	r1, #0
    325e:	d023      	beq.n	32a8 <eink_it8951_set_pixel_raw+0x98>
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
        } else {
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_value >> 3) & 0x1));
    3260:	08ea      	lsrs	r2, r5, #3
    3262:	2601      	movs	r6, #1
    3264:	4032      	ands	r2, r6
    3266:	6938      	ldr	r0, [r7, #16]
    3268:	1900      	adds	r0, r0, r4
    326a:	2107      	movs	r1, #7
    326c:	4f21      	ldr	r7, [pc, #132]	; (32f4 <eink_it8951_set_pixel_raw+0xe4>)
    326e:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_value >> 2) & 0x1));
    3270:	08aa      	lsrs	r2, r5, #2
    3272:	4032      	ands	r2, r6
    3274:	4b1d      	ldr	r3, [pc, #116]	; (32ec <eink_it8951_set_pixel_raw+0xdc>)
    3276:	4698      	mov	r8, r3
    3278:	681b      	ldr	r3, [r3, #0]
    327a:	6918      	ldr	r0, [r3, #16]
    327c:	1900      	adds	r0, r0, r4
    327e:	2106      	movs	r1, #6
    3280:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_value >> 1) & 0x1));
    3282:	086a      	lsrs	r2, r5, #1
    3284:	4032      	ands	r2, r6
    3286:	4643      	mov	r3, r8
    3288:	681b      	ldr	r3, [r3, #0]
    328a:	6918      	ldr	r0, [r3, #16]
    328c:	1900      	adds	r0, r0, r4
    328e:	2105      	movs	r1, #5
    3290:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_value & 0x1));
    3292:	0032      	movs	r2, r6
    3294:	402a      	ands	r2, r5
    3296:	4643      	mov	r3, r8
    3298:	681b      	ldr	r3, [r3, #0]
    329a:	6918      	ldr	r0, [r3, #16]
    329c:	1900      	adds	r0, r0, r4
    329e:	2104      	movs	r1, #4
    32a0:	47b8      	blx	r7
        }
    }
}
    32a2:	bc04      	pop	{r2}
    32a4:	4690      	mov	r8, r2
    32a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
    32a8:	08ea      	lsrs	r2, r5, #3
    32aa:	2601      	movs	r6, #1
    32ac:	4032      	ands	r2, r6
    32ae:	6938      	ldr	r0, [r7, #16]
    32b0:	1900      	adds	r0, r0, r4
    32b2:	3103      	adds	r1, #3
    32b4:	4f0f      	ldr	r7, [pc, #60]	; (32f4 <eink_it8951_set_pixel_raw+0xe4>)
    32b6:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
    32b8:	08aa      	lsrs	r2, r5, #2
    32ba:	4032      	ands	r2, r6
    32bc:	4b0b      	ldr	r3, [pc, #44]	; (32ec <eink_it8951_set_pixel_raw+0xdc>)
    32be:	4698      	mov	r8, r3
    32c0:	681b      	ldr	r3, [r3, #0]
    32c2:	6918      	ldr	r0, [r3, #16]
    32c4:	1900      	adds	r0, r0, r4
    32c6:	2102      	movs	r1, #2
    32c8:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
    32ca:	086a      	lsrs	r2, r5, #1
    32cc:	4032      	ands	r2, r6
    32ce:	4643      	mov	r3, r8
    32d0:	681b      	ldr	r3, [r3, #0]
    32d2:	6918      	ldr	r0, [r3, #16]
    32d4:	1900      	adds	r0, r0, r4
    32d6:	2101      	movs	r1, #1
    32d8:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
    32da:	0032      	movs	r2, r6
    32dc:	402a      	ands	r2, r5
    32de:	4643      	mov	r3, r8
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	6918      	ldr	r0, [r3, #16]
    32e4:	1900      	adds	r0, r0, r4
    32e6:	2100      	movs	r1, #0
    32e8:	47b8      	blx	r7
    32ea:	e7da      	b.n	32a2 <eink_it8951_set_pixel_raw+0x92>
    32ec:	20000430 	.word	0x20000430
    32f0:	200003c0 	.word	0x200003c0
    32f4:	000031f5 	.word	0x000031f5

000032f8 <eink_it8951_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_it8951_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    32f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32fa:	46de      	mov	lr, fp
    32fc:	4657      	mov	r7, sl
    32fe:	464e      	mov	r6, r9
    3300:	4645      	mov	r5, r8
    3302:	b5e0      	push	{r5, r6, r7, lr}
    3304:	b087      	sub	sp, #28
    3306:	9000      	str	r0, [sp, #0]
    3308:	0011      	movs	r1, r2
    330a:	9201      	str	r2, [sp, #4]
    330c:	4699      	mov	r9, r3
    330e:	ab10      	add	r3, sp, #64	; 0x40
    3310:	881b      	ldrh	r3, [r3, #0]
    3312:	469a      	mov	sl, r3
    3314:	ab11      	add	r3, sp, #68	; 0x44
    3316:	881b      	ldrh	r3, [r3, #0]
    3318:	469b      	mov	fp, r3
    volatile uint16_t buffer_index, i, j;
    volatile uint16_t k, l, m, bit_value_1, bit_value_2;
    eink_coordinate x_set, y_set;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    331a:	230e      	movs	r3, #14
    331c:	aa02      	add	r2, sp, #8
    331e:	4694      	mov	ip, r2
    3320:	4463      	add	r3, ip
    3322:	2200      	movs	r2, #0
    3324:	801a      	strh	r2, [r3, #0]
    3326:	881b      	ldrh	r3, [r3, #0]
    3328:	b29b      	uxth	r3, r3
    332a:	4299      	cmp	r1, r3
    332c:	d966      	bls.n	33fc <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    332e:	260a      	movs	r6, #10
    3330:	4466      	add	r6, ip
        for (j = 0; j < image_height_bytes; j++) {
            x_set = x_place+i;
            y_set = y_place+m;
            
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3332:	4f36      	ldr	r7, [pc, #216]	; (340c <eink_it8951_graphics_load_4bgrey_image+0x114>)
    3334:	464d      	mov	r5, r9
    3336:	46d1      	mov	r9, sl
    3338:	e054      	b.n	33e4 <eink_it8951_graphics_load_4bgrey_image+0xec>
                /* Set the pixel in the display buffer */
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
            }

        m += 2;
    333a:	8833      	ldrh	r3, [r6, #0]
    333c:	3302      	adds	r3, #2
    333e:	b29b      	uxth	r3, r3
    3340:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    3342:	8823      	ldrh	r3, [r4, #0]
    3344:	3301      	adds	r3, #1
    3346:	b29b      	uxth	r3, r3
    3348:	8023      	strh	r3, [r4, #0]
    334a:	8823      	ldrh	r3, [r4, #0]
    334c:	b29b      	uxth	r3, r3
    334e:	42ab      	cmp	r3, r5
    3350:	d23a      	bcs.n	33c8 <eink_it8951_graphics_load_4bgrey_image+0xd0>
            x_set = x_place+i;
    3352:	230e      	movs	r3, #14
    3354:	aa02      	add	r2, sp, #8
    3356:	4694      	mov	ip, r2
    3358:	4463      	add	r3, ip
    335a:	881b      	ldrh	r3, [r3, #0]
    335c:	444b      	add	r3, r9
    335e:	b29b      	uxth	r3, r3
    3360:	4698      	mov	r8, r3
            y_set = y_place+m;
    3362:	8833      	ldrh	r3, [r6, #0]
    3364:	b29b      	uxth	r3, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3366:	683a      	ldr	r2, [r7, #0]
    3368:	8851      	ldrh	r1, [r2, #2]
    336a:	4541      	cmp	r1, r8
    336c:	d9e5      	bls.n	333a <eink_it8951_graphics_load_4bgrey_image+0x42>
            y_set = y_place+m;
    336e:	4453      	add	r3, sl
    3370:	b29b      	uxth	r3, r3
    3372:	469b      	mov	fp, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3374:	8893      	ldrh	r3, [r2, #4]
    3376:	455b      	cmp	r3, fp
    3378:	d9df      	bls.n	333a <eink_it8951_graphics_load_4bgrey_image+0x42>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    337a:	210e      	movs	r1, #14
    337c:	4461      	add	r1, ip
    337e:	880b      	ldrh	r3, [r1, #0]
    3380:	8822      	ldrh	r2, [r4, #0]
    3382:	436b      	muls	r3, r5
    3384:	9800      	ldr	r0, [sp, #0]
    3386:	4684      	mov	ip, r0
    3388:	4462      	add	r2, ip
    338a:	5cd2      	ldrb	r2, [r2, r3]
    338c:	230f      	movs	r3, #15
    338e:	4013      	ands	r3, r2
    3390:	aa04      	add	r2, sp, #16
    3392:	8013      	strh	r3, [r2, #0]
                bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    3394:	880b      	ldrh	r3, [r1, #0]
    3396:	8821      	ldrh	r1, [r4, #0]
    3398:	436b      	muls	r3, r5
    339a:	4461      	add	r1, ip
    339c:	5ccb      	ldrb	r3, [r1, r3]
    339e:	091b      	lsrs	r3, r3, #4
    33a0:	a902      	add	r1, sp, #8
    33a2:	80cb      	strh	r3, [r1, #6]
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
    33a4:	8812      	ldrh	r2, [r2, #0]
    33a6:	43d2      	mvns	r2, r2
    33a8:	b2d2      	uxtb	r2, r2
    33aa:	465b      	mov	r3, fp
    33ac:	1c59      	adds	r1, r3, #1
    33ae:	b289      	uxth	r1, r1
    33b0:	4640      	mov	r0, r8
    33b2:	4b17      	ldr	r3, [pc, #92]	; (3410 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    33b4:	4798      	blx	r3
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
    33b6:	ab02      	add	r3, sp, #8
    33b8:	88da      	ldrh	r2, [r3, #6]
    33ba:	43d2      	mvns	r2, r2
    33bc:	b2d2      	uxtb	r2, r2
    33be:	4659      	mov	r1, fp
    33c0:	4640      	mov	r0, r8
    33c2:	4b13      	ldr	r3, [pc, #76]	; (3410 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    33c4:	4798      	blx	r3
    33c6:	e7b8      	b.n	333a <eink_it8951_graphics_load_4bgrey_image+0x42>
    33c8:	46d3      	mov	fp, sl
    for (i = 0; i < image_width_px; i++) {
    33ca:	220e      	movs	r2, #14
    33cc:	ab02      	add	r3, sp, #8
    33ce:	469c      	mov	ip, r3
    33d0:	4462      	add	r2, ip
    33d2:	8813      	ldrh	r3, [r2, #0]
    33d4:	3301      	adds	r3, #1
    33d6:	b29b      	uxth	r3, r3
    33d8:	8013      	strh	r3, [r2, #0]
    33da:	8813      	ldrh	r3, [r2, #0]
    33dc:	b29b      	uxth	r3, r3
    33de:	9a01      	ldr	r2, [sp, #4]
    33e0:	4293      	cmp	r3, r2
    33e2:	d20b      	bcs.n	33fc <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    33e4:	2300      	movs	r3, #0
    33e6:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    33e8:	ab05      	add	r3, sp, #20
    33ea:	2200      	movs	r2, #0
    33ec:	801a      	strh	r2, [r3, #0]
    33ee:	881b      	ldrh	r3, [r3, #0]
    33f0:	b29b      	uxth	r3, r3
    33f2:	429d      	cmp	r5, r3
    33f4:	d9e9      	bls.n	33ca <eink_it8951_graphics_load_4bgrey_image+0xd2>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    33f6:	ac05      	add	r4, sp, #20
    33f8:	46da      	mov	sl, fp
    33fa:	e7aa      	b.n	3352 <eink_it8951_graphics_load_4bgrey_image+0x5a>
        }
    }
    33fc:	b007      	add	sp, #28
    33fe:	bc3c      	pop	{r2, r3, r4, r5}
    3400:	4690      	mov	r8, r2
    3402:	4699      	mov	r9, r3
    3404:	46a2      	mov	sl, r4
    3406:	46ab      	mov	fp, r5
    3408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	20000430 	.word	0x20000430
    3410:	00003211 	.word	0x00003211

00003414 <uc8173_init>:
 *
 * Call this function to initialize the hardware interface and the UC8173 display
 * driver. When initialization is done the display is ready to receive data.
 */
void uc8173_init(void)
{
    3414:	b5f0      	push	{r4, r5, r6, r7, lr}
    3416:	b083      	sub	sp, #12
    /* Initialize delay routine */
    delay_init(SysTick);
    3418:	4812      	ldr	r0, [pc, #72]	; (3464 <uc8173_init+0x50>)
    341a:	4b13      	ldr	r3, [pc, #76]	; (3468 <uc8173_init+0x54>)
    341c:	4798      	blx	r3

    /* Initialize the interface */
    eink_interface_init(0);
    341e:	2000      	movs	r0, #0
    3420:	4b12      	ldr	r3, [pc, #72]	; (346c <uc8173_init+0x58>)
    3422:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3424:	25c0      	movs	r5, #192	; 0xc0
    3426:	05ed      	lsls	r5, r5, #23
    3428:	2640      	movs	r6, #64	; 0x40
    342a:	616e      	str	r6, [r5, #20]
    delay_ms(1);
    342c:	2001      	movs	r0, #1
    342e:	4c10      	ldr	r4, [pc, #64]	; (3470 <uc8173_init+0x5c>)
    3430:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3432:	61ae      	str	r6, [r5, #24]
    delay_ms(1);
    3434:	2001      	movs	r0, #1
    3436:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    3438:	4f0e      	ldr	r7, [pc, #56]	; (3474 <uc8173_init+0x60>)
	CRITICAL_SECTION_LEAVE();
    343a:	4e0f      	ldr	r6, [pc, #60]	; (3478 <uc8173_init+0x64>)
	CRITICAL_SECTION_ENTER();
    343c:	a801      	add	r0, sp, #4
    343e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3440:	23c0      	movs	r3, #192	; 0xc0
    3442:	05db      	lsls	r3, r3, #23
    3444:	2580      	movs	r5, #128	; 0x80
    3446:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3448:	22a0      	movs	r2, #160	; 0xa0
    344a:	490c      	ldr	r1, [pc, #48]	; (347c <uc8173_init+0x68>)
    344c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    344e:	2190      	movs	r1, #144	; 0x90
    3450:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3452:	4053      	eors	r3, r2
    3454:	401c      	ands	r4, r3
    3456:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3458:	a801      	add	r0, sp, #4
    345a:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    345c:	4225      	tst	r5, r4
    345e:	d0ed      	beq.n	343c <uc8173_init+0x28>
    /* Reset display */
    uc8173_hard_reset();
    
    /* Wait for BUSY output to return HIGH */
    uc8173_wait_for_busy_low();
}
    3460:	b003      	add	sp, #12
    3462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3464:	e000e010 	.word	0xe000e010
    3468:	00000369 	.word	0x00000369
    346c:	00000dad 	.word	0x00000dad
    3470:	0000037d 	.word	0x0000037d
    3474:	0000034d 	.word	0x0000034d
    3478:	0000035b 	.word	0x0000035b
    347c:	41004400 	.word	0x41004400

00003480 <uc8173_set_config>:
 *
 * \param *config The configuration to write to the display driver.
 */
void uc8173_set_config(
        struct uc8173_config *const config)
{
    3480:	b5f0      	push	{r4, r5, r6, r7, lr}
    3482:	46c6      	mov	lr, r8
    3484:	b500      	push	{lr}
    3486:	b084      	sub	sp, #16
    3488:	4680      	mov	r8, r0
    uint8_t eink_data[5];
    
    uc8173_global_instance.display_config = *config;
    348a:	2204      	movs	r2, #4
    348c:	0001      	movs	r1, r0
    348e:	4881      	ldr	r0, [pc, #516]	; (3694 <uc8173_set_config+0x214>)
    3490:	4b81      	ldr	r3, [pc, #516]	; (3698 <uc8173_set_config+0x218>)
    3492:	4798      	blx	r3
    
    if(config->uc8173_display == UC8173_ET011TT2) {
    3494:	4643      	mov	r3, r8
    3496:	789b      	ldrb	r3, [r3, #2]
    3498:	2b01      	cmp	r3, #1
    349a:	d00f      	beq.n	34bc <uc8173_set_config+0x3c>
    	uc8173_global_instance.display_width   = 240;
		uc8173_global_instance.display_height  = 240;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    349c:	2b00      	cmp	r3, #0
    349e:	d11e      	bne.n	34de <uc8173_set_config+0x5e>
		if((config->display_rotation == ROTATE_90) || (config->display_rotation == ROTATE_270)) {
    34a0:	4643      	mov	r3, r8
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	2202      	movs	r2, #2
    34a6:	4393      	bics	r3, r2
    34a8:	2b01      	cmp	r3, #1
    34aa:	d100      	bne.n	34ae <uc8173_set_config+0x2e>
    34ac:	e0c8      	b.n	3640 <uc8173_set_config+0x1c0>
			uc8173_global_instance.display_width   = 128;
			uc8173_global_instance.display_height  = 256;
		} else {
			uc8173_global_instance.display_width   = 256;
    34ae:	4b79      	ldr	r3, [pc, #484]	; (3694 <uc8173_set_config+0x214>)
    34b0:	2280      	movs	r2, #128	; 0x80
    34b2:	0052      	lsls	r2, r2, #1
    34b4:	809a      	strh	r2, [r3, #4]
			uc8173_global_instance.display_height  = 128;
    34b6:	3a80      	subs	r2, #128	; 0x80
    34b8:	80da      	strh	r2, [r3, #6]
    34ba:	e003      	b.n	34c4 <uc8173_set_config+0x44>
    	uc8173_global_instance.display_width   = 240;
    34bc:	4b75      	ldr	r3, [pc, #468]	; (3694 <uc8173_set_config+0x214>)
    34be:	22f0      	movs	r2, #240	; 0xf0
    34c0:	809a      	strh	r2, [r3, #4]
		uc8173_global_instance.display_height  = 240;
    34c2:	80da      	strh	r2, [r3, #6]
		}
	}
	
    /* Booster Soft Start Control */
    if(config->uc8173_display == UC8173_ET011TT2) {
    34c4:	4643      	mov	r3, r8
    34c6:	789b      	ldrb	r3, [r3, #2]
    34c8:	2b01      	cmp	r3, #1
    34ca:	d100      	bne.n	34ce <uc8173_set_config+0x4e>
    34cc:	e0be      	b.n	364c <uc8173_set_config+0x1cc>
    	eink_data[0] = 0x17;
		eink_data[1] = 0x97;
		eink_data[2] = 0x20;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    34ce:	2b00      	cmp	r3, #0
    34d0:	d105      	bne.n	34de <uc8173_set_config+0x5e>
	    eink_data[0] = 0x17;
    34d2:	ab02      	add	r3, sp, #8
    34d4:	2217      	movs	r2, #23
    34d6:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x17;
    34d8:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x26;
    34da:	320f      	adds	r2, #15
    34dc:	709a      	strb	r2, [r3, #2]
	}
	eink_write_data(UC8173_BTST, eink_data, 3);
    34de:	ac02      	add	r4, sp, #8
    34e0:	2203      	movs	r2, #3
    34e2:	0021      	movs	r1, r4
    34e4:	2006      	movs	r0, #6
    34e6:	4d6d      	ldr	r5, [pc, #436]	; (369c <uc8173_set_config+0x21c>)
    34e8:	47a8      	blx	r5
	
    /* Power Settings */
	eink_data[0] = 0x03;
    34ea:	2303      	movs	r3, #3
    34ec:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
    34ee:	2300      	movs	r3, #0
    34f0:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x2B;
    34f2:	332b      	adds	r3, #43	; 0x2b
    34f4:	70a3      	strb	r3, [r4, #2]
	eink_data[3] = 0x2B;
    34f6:	70e3      	strb	r3, [r4, #3]
	eink_data[4] = 0x08;
    34f8:	3b23      	subs	r3, #35	; 0x23
    34fa:	7123      	strb	r3, [r4, #4]
	eink_write_data(UC8173_PWR, eink_data, 5);
    34fc:	2205      	movs	r2, #5
    34fe:	0021      	movs	r1, r4
    3500:	2001      	movs	r0, #1
    3502:	47a8      	blx	r5
	
	eink_write_data(UC8173_PON, 0, 0);
    3504:	2200      	movs	r2, #0
    3506:	2100      	movs	r1, #0
    3508:	2004      	movs	r0, #4
    350a:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    350c:	4f64      	ldr	r7, [pc, #400]	; (36a0 <uc8173_set_config+0x220>)
	CRITICAL_SECTION_LEAVE();
    350e:	4e65      	ldr	r6, [pc, #404]	; (36a4 <uc8173_set_config+0x224>)
	CRITICAL_SECTION_ENTER();
    3510:	a801      	add	r0, sp, #4
    3512:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3514:	23c0      	movs	r3, #192	; 0xc0
    3516:	05db      	lsls	r3, r3, #23
    3518:	2580      	movs	r5, #128	; 0x80
    351a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    351c:	22a0      	movs	r2, #160	; 0xa0
    351e:	4962      	ldr	r1, [pc, #392]	; (36a8 <uc8173_set_config+0x228>)
    3520:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3522:	2190      	movs	r1, #144	; 0x90
    3524:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3526:	4053      	eors	r3, r2
    3528:	401c      	ands	r4, r3
    352a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    352c:	a801      	add	r0, sp, #4
    352e:	47b0      	blx	r6
    3530:	4225      	tst	r5, r4
    3532:	d0ed      	beq.n	3510 <uc8173_set_config+0x90>
	uc8173_wait_for_busy_low();
	
    /* Panel Settings */
    if(config->uc8173_display == UC8173_ET011TT2) {
    3534:	4643      	mov	r3, r8
    3536:	789b      	ldrb	r3, [r3, #2]
    3538:	2b01      	cmp	r3, #1
    353a:	d100      	bne.n	353e <uc8173_set_config+0xbe>
    353c:	e08e      	b.n	365c <uc8173_set_config+0x1dc>
    	eink_data[0] = 0x0B;
		eink_data[1] = 0x86;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    353e:	2b00      	cmp	r3, #0
    3540:	d104      	bne.n	354c <uc8173_set_config+0xcc>
		eink_data[0] = 0x03;
    3542:	ab02      	add	r3, sp, #8
    3544:	2203      	movs	r2, #3
    3546:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    3548:	3283      	adds	r2, #131	; 0x83
    354a:	705a      	strb	r2, [r3, #1]
	}
	eink_write_data(UC8173_PSR, eink_data, 2);
    354c:	ac02      	add	r4, sp, #8
    354e:	2202      	movs	r2, #2
    3550:	0021      	movs	r1, r4
    3552:	2000      	movs	r0, #0
    3554:	4d51      	ldr	r5, [pc, #324]	; (369c <uc8173_set_config+0x21c>)
    3556:	47a8      	blx	r5

    /* Power OFF Sequence Settings */
	eink_data[0] = 0x00;
    3558:	2300      	movs	r3, #0
    355a:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_PFS, eink_data, 1);
    355c:	2201      	movs	r2, #1
    355e:	0021      	movs	r1, r4
    3560:	2003      	movs	r0, #3
    3562:	47a8      	blx	r5
	
    /* PLL Control */
	if(config->uc8173_display == UC8173_ET011TT2) {
    3564:	4643      	mov	r3, r8
    3566:	789b      	ldrb	r3, [r3, #2]
    3568:	2b01      	cmp	r3, #1
    356a:	d100      	bne.n	356e <uc8173_set_config+0xee>
    356c:	e07c      	b.n	3668 <uc8173_set_config+0x1e8>
		eink_data[0] = 0x25;
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    356e:	2b00      	cmp	r3, #0
    3570:	d102      	bne.n	3578 <uc8173_set_config+0xf8>
		eink_data[0] = 0x48;
    3572:	2248      	movs	r2, #72	; 0x48
    3574:	ab02      	add	r3, sp, #8
    3576:	701a      	strb	r2, [r3, #0]
	}
	eink_write_data(UC8173_LPRD, eink_data, 1);
    3578:	ac02      	add	r4, sp, #8
    357a:	2201      	movs	r2, #1
    357c:	0021      	movs	r1, r4
    357e:	2030      	movs	r0, #48	; 0x30
    3580:	4d46      	ldr	r5, [pc, #280]	; (369c <uc8173_set_config+0x21c>)
    3582:	47a8      	blx	r5

    /* Temperature Sensor Enable */
	eink_data[0] = 0x00; /* Internal Sensor Enabled */
    3584:	2300      	movs	r3, #0
    3586:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_TSE, eink_data, 1);
    3588:	2201      	movs	r2, #1
    358a:	0021      	movs	r1, r4
    358c:	2041      	movs	r0, #65	; 0x41
    358e:	47a8      	blx	r5

    /* VCOM & DI Settings */
	eink_data[0] = 0xE1;
    3590:	23e1      	movs	r3, #225	; 0xe1
    3592:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x20;
    3594:	3bc1      	subs	r3, #193	; 0xc1
    3596:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x10;
    3598:	3b10      	subs	r3, #16
    359a:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_CDI, eink_data, 3);
    359c:	2203      	movs	r2, #3
    359e:	0021      	movs	r1, r4
    35a0:	2050      	movs	r0, #80	; 0x50
    35a2:	47a8      	blx	r5

    /* Resolution Settings */
    if(config->uc8173_display == UC8173_ET011TT2) {
    35a4:	4643      	mov	r3, r8
    35a6:	789b      	ldrb	r3, [r3, #2]
    35a8:	2b01      	cmp	r3, #1
    35aa:	d061      	beq.n	3670 <uc8173_set_config+0x1f0>
		eink_data[0] = 0xEF; /* H = 239 */
		eink_data[1] = 0x00;
		eink_data[2] = 0xEF; /* W = 239 */
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    35ac:	2b00      	cmp	r3, #0
    35ae:	d106      	bne.n	35be <uc8173_set_config+0x13e>
		eink_data[0] = 0x7F; /* H = 127 */
    35b0:	ab02      	add	r3, sp, #8
    35b2:	227f      	movs	r2, #127	; 0x7f
    35b4:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x00;
    35b6:	2200      	movs	r2, #0
    35b8:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0xFF; /* W = 255 */
    35ba:	32ff      	adds	r2, #255	; 0xff
    35bc:	709a      	strb	r2, [r3, #2]
	}
	eink_write_data(UC8173_TRES, eink_data, 3);
    35be:	2203      	movs	r2, #3
    35c0:	a902      	add	r1, sp, #8
    35c2:	2061      	movs	r0, #97	; 0x61
    35c4:	4b35      	ldr	r3, [pc, #212]	; (369c <uc8173_set_config+0x21c>)
    35c6:	4798      	blx	r3
	
	/* Gate Group Setting */
	if(config->uc8173_display == UC8173_ET011TT2) {
    35c8:	4643      	mov	r3, r8
    35ca:	789b      	ldrb	r3, [r3, #2]
    35cc:	2b01      	cmp	r3, #1
    35ce:	d056      	beq.n	367e <uc8173_set_config+0x1fe>
		eink_data[0] = 0xA9;
		eink_data[1] = 0xA9;
		eink_data[2] = 0xEB;
		eink_data[3] = 0xEB;
		eink_data[4] = 0x02;
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    35d0:	2b00      	cmp	r3, #0
    35d2:	d109      	bne.n	35e8 <uc8173_set_config+0x168>
		eink_data[0] = 0xCF;
    35d4:	ab02      	add	r3, sp, #8
    35d6:	22cf      	movs	r2, #207	; 0xcf
    35d8:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0xAF;
    35da:	3a20      	subs	r2, #32
    35dc:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x00;
    35de:	2200      	movs	r2, #0
    35e0:	709a      	strb	r2, [r3, #2]
		eink_data[3] = 0x00;
    35e2:	70da      	strb	r2, [r3, #3]
		eink_data[4] = 0x03;
    35e4:	3203      	adds	r2, #3
    35e6:	711a      	strb	r2, [r3, #4]
	}
	eink_write_data(UC8173_GDS, eink_data, 5);
    35e8:	ac02      	add	r4, sp, #8
    35ea:	2205      	movs	r2, #5
    35ec:	0021      	movs	r1, r4
    35ee:	2062      	movs	r0, #98	; 0x62
    35f0:	4d2a      	ldr	r5, [pc, #168]	; (369c <uc8173_set_config+0x21c>)
    35f2:	47a8      	blx	r5
  
	//uc8173_measure_vcom();
	/* Set's VCOM value automatically for demo purposes, but should be read from display */
	eink_data[0] = 0x26;
    35f4:	2326      	movs	r3, #38	; 0x26
    35f6:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_VDCS, eink_data, 1);
    35f8:	2201      	movs	r2, #1
    35fa:	0021      	movs	r1, r4
    35fc:	2082      	movs	r0, #130	; 0x82
    35fe:	47a8      	blx	r5
	eink_write_data(UC8173_VBDS, eink_data, 1);
    3600:	2201      	movs	r2, #1
    3602:	0021      	movs	r1, r4
    3604:	2084      	movs	r0, #132	; 0x84
    3606:	47a8      	blx	r5

	eink_data[0] = 0x02;
    3608:	2602      	movs	r6, #2
    360a:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_LVSEL, eink_data, 1);
    360c:	2201      	movs	r2, #1
    360e:	0021      	movs	r1, r4
    3610:	20e4      	movs	r0, #228	; 0xe4
    3612:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
    3614:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    3616:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GBS, eink_data, 2);
    3618:	2202      	movs	r2, #2
    361a:	0021      	movs	r1, r4
    361c:	2063      	movs	r0, #99	; 0x63
    361e:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
    3620:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    3622:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GSS, eink_data, 2);
    3624:	2202      	movs	r2, #2
    3626:	0021      	movs	r1, r4
    3628:	2064      	movs	r0, #100	; 0x64
    362a:	47a8      	blx	r5
	
	eink_data[0] = 0x1F;
    362c:	231f      	movs	r3, #31
    362e:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_DF, eink_data, 1);
    3630:	2201      	movs	r2, #1
    3632:	0021      	movs	r1, r4
    3634:	20df      	movs	r0, #223	; 0xdf
    3636:	47a8      	blx	r5
	
	//eink_write_data(UC8173_POF, 0, 0);
	//uc8173_wait_for_busy_high();
}
    3638:	b004      	add	sp, #16
    363a:	bc04      	pop	{r2}
    363c:	4690      	mov	r8, r2
    363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uc8173_global_instance.display_width   = 128;
    3640:	4b14      	ldr	r3, [pc, #80]	; (3694 <uc8173_set_config+0x214>)
    3642:	327e      	adds	r2, #126	; 0x7e
    3644:	809a      	strh	r2, [r3, #4]
			uc8173_global_instance.display_height  = 256;
    3646:	3280      	adds	r2, #128	; 0x80
    3648:	80da      	strh	r2, [r3, #6]
    364a:	e73b      	b.n	34c4 <uc8173_set_config+0x44>
    	eink_data[0] = 0x17;
    364c:	ab02      	add	r3, sp, #8
    364e:	2217      	movs	r2, #23
    3650:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x97;
    3652:	3280      	adds	r2, #128	; 0x80
    3654:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x20;
    3656:	3a77      	subs	r2, #119	; 0x77
    3658:	709a      	strb	r2, [r3, #2]
    365a:	e740      	b.n	34de <uc8173_set_config+0x5e>
    	eink_data[0] = 0x0B;
    365c:	ab02      	add	r3, sp, #8
    365e:	220b      	movs	r2, #11
    3660:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    3662:	327b      	adds	r2, #123	; 0x7b
    3664:	705a      	strb	r2, [r3, #1]
    3666:	e771      	b.n	354c <uc8173_set_config+0xcc>
		eink_data[0] = 0x25;
    3668:	2225      	movs	r2, #37	; 0x25
    366a:	ab02      	add	r3, sp, #8
    366c:	701a      	strb	r2, [r3, #0]
    366e:	e783      	b.n	3578 <uc8173_set_config+0xf8>
		eink_data[0] = 0xEF; /* H = 239 */
    3670:	ab02      	add	r3, sp, #8
    3672:	22ef      	movs	r2, #239	; 0xef
    3674:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x00;
    3676:	2100      	movs	r1, #0
    3678:	7059      	strb	r1, [r3, #1]
		eink_data[2] = 0xEF; /* W = 239 */
    367a:	709a      	strb	r2, [r3, #2]
    367c:	e79f      	b.n	35be <uc8173_set_config+0x13e>
		eink_data[0] = 0xA9;
    367e:	ab02      	add	r3, sp, #8
    3680:	22a9      	movs	r2, #169	; 0xa9
    3682:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0xA9;
    3684:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0xEB;
    3686:	3242      	adds	r2, #66	; 0x42
    3688:	709a      	strb	r2, [r3, #2]
		eink_data[3] = 0xEB;
    368a:	70da      	strb	r2, [r3, #3]
		eink_data[4] = 0x02;
    368c:	3ae9      	subs	r2, #233	; 0xe9
    368e:	711a      	strb	r2, [r3, #4]
    3690:	e7aa      	b.n	35e8 <uc8173_set_config+0x168>
    3692:	46c0      	nop			; (mov r8, r8)
    3694:	20000390 	.word	0x20000390
    3698:	000043f1 	.word	0x000043f1
    369c:	00001bc9 	.word	0x00001bc9
    36a0:	0000034d 	.word	0x0000034d
    36a4:	0000035b 	.word	0x0000035b
    36a8:	41004400 	.word	0x41004400

000036ac <eink_et011tt2_init>:
{    
    36ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ae:	46c6      	mov	lr, r8
    36b0:	b500      	push	{lr}
    36b2:	b082      	sub	sp, #8
    36b4:	0006      	movs	r6, r0
    36b6:	4688      	mov	r8, r1
    et011tt2_dtm2_display_buffer = (uint8_t*) malloc (malloc_size);
    36b8:	20e1      	movs	r0, #225	; 0xe1
    36ba:	0180      	lsls	r0, r0, #6
    36bc:	4b26      	ldr	r3, [pc, #152]	; (3758 <eink_et011tt2_init+0xac>)
    36be:	4798      	blx	r3
    36c0:	4b26      	ldr	r3, [pc, #152]	; (375c <eink_et011tt2_init+0xb0>)
    36c2:	6018      	str	r0, [r3, #0]
    eink_gfx_et011tt2_config.display_buffer_1_ptr = et011tt2_dtm2_display_buffer;
    36c4:	4c26      	ldr	r4, [pc, #152]	; (3760 <eink_et011tt2_init+0xb4>)
    36c6:	6120      	str	r0, [r4, #16]
    uc8173_init();
    36c8:	4b26      	ldr	r3, [pc, #152]	; (3764 <eink_et011tt2_init+0xb8>)
    36ca:	4798      	blx	r3
    config->uc8173_display = UC8173_ET011TT2;
    36cc:	2301      	movs	r3, #1
    36ce:	70b3      	strb	r3, [r6, #2]
    uc8173_set_config(config);
    36d0:	0030      	movs	r0, r6
    36d2:	4b25      	ldr	r3, [pc, #148]	; (3768 <eink_et011tt2_init+0xbc>)
    36d4:	4798      	blx	r3
    eink_gfx_et011tt2_config.display_rotation = config->display_rotation;
    36d6:	7833      	ldrb	r3, [r6, #0]
    36d8:	7323      	strb	r3, [r4, #12]
    ptr_eink_gfx_config = (struct eink_gfx_config*) &eink_gfx_et011tt2_config;
    36da:	4b24      	ldr	r3, [pc, #144]	; (376c <eink_et011tt2_init+0xc0>)
    36dc:	601c      	str	r4, [r3, #0]
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    36de:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    36e0:	4c22      	ldr	r4, [pc, #136]	; (376c <eink_et011tt2_init+0xc0>)
    36e2:	20ff      	movs	r0, #255	; 0xff
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    36e4:	21e1      	movs	r1, #225	; 0xe1
    36e6:	0189      	lsls	r1, r1, #6
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    36e8:	6822      	ldr	r2, [r4, #0]
    36ea:	6912      	ldr	r2, [r2, #16]
    36ec:	54d0      	strb	r0, [r2, r3]
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    36ee:	3301      	adds	r3, #1
    36f0:	428b      	cmp	r3, r1
    36f2:	d1f9      	bne.n	36e8 <eink_et011tt2_init+0x3c>
    eink_data[0] = 0x00;
    36f4:	2400      	movs	r4, #0
    36f6:	466b      	mov	r3, sp
    36f8:	701c      	strb	r4, [r3, #0]
    eink_data[1] = 0x00;
    36fa:	705c      	strb	r4, [r3, #1]
    eink_data[2] = 0x00;
    36fc:	709c      	strb	r4, [r3, #2]
    eink_data[3] = 0xEF;
    36fe:	25ef      	movs	r5, #239	; 0xef
    3700:	70dd      	strb	r5, [r3, #3]
    eink_data[4] = 0x00;
    3702:	711c      	strb	r4, [r3, #4]
    eink_data[5] = 0xEF;
    3704:	715d      	strb	r5, [r3, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    3706:	2206      	movs	r2, #6
    3708:	4669      	mov	r1, sp
    370a:	2014      	movs	r0, #20
    370c:	4e18      	ldr	r6, [pc, #96]	; (3770 <eink_et011tt2_init+0xc4>)
    370e:	47b0      	blx	r6
	eink_write_data(UC8173_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    3710:	4f16      	ldr	r7, [pc, #88]	; (376c <eink_et011tt2_init+0xc0>)
    3712:	683b      	ldr	r3, [r7, #0]
    3714:	6919      	ldr	r1, [r3, #16]
    3716:	22e1      	movs	r2, #225	; 0xe1
    3718:	0192      	lsls	r2, r2, #6
    371a:	2010      	movs	r0, #16
    371c:	47b0      	blx	r6
	eink_data[0] = 0x00;
    371e:	466b      	mov	r3, sp
    3720:	701c      	strb	r4, [r3, #0]
	eink_data[1] = 0x00;
    3722:	705c      	strb	r4, [r3, #1]
	eink_data[2] = 0x00;
    3724:	709c      	strb	r4, [r3, #2]
	eink_data[3] = 0xEF;
    3726:	70dd      	strb	r5, [r3, #3]
	eink_data[4] = 0x00;
    3728:	711c      	strb	r4, [r3, #4]
	eink_data[5] = 0xEF;
    372a:	715d      	strb	r5, [r3, #5]
	eink_write_data(UC8173_DTMW, eink_data, 6);
    372c:	2206      	movs	r2, #6
    372e:	4669      	mov	r1, sp
    3730:	2014      	movs	r0, #20
    3732:	47b0      	blx	r6
	eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    3734:	683b      	ldr	r3, [r7, #0]
    3736:	6919      	ldr	r1, [r3, #16]
    3738:	22e1      	movs	r2, #225	; 0xe1
    373a:	0192      	lsls	r2, r2, #6
    373c:	2013      	movs	r0, #19
    373e:	47b0      	blx	r6
    if(clear_display) eink_et011tt2_put_display_buffer(true);
    3740:	4643      	mov	r3, r8
    3742:	2b00      	cmp	r3, #0
    3744:	d103      	bne.n	374e <eink_et011tt2_init+0xa2>
}
    3746:	b002      	add	sp, #8
    3748:	bc04      	pop	{r2}
    374a:	4690      	mov	r8, r2
    374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(clear_display) eink_et011tt2_put_display_buffer(true);
    374e:	2001      	movs	r0, #1
    3750:	4b08      	ldr	r3, [pc, #32]	; (3774 <eink_et011tt2_init+0xc8>)
    3752:	4798      	blx	r3
}
    3754:	e7f7      	b.n	3746 <eink_et011tt2_init+0x9a>
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	000043dd 	.word	0x000043dd
    375c:	20000388 	.word	0x20000388
    3760:	20000000 	.word	0x20000000
    3764:	00003415 	.word	0x00003415
    3768:	00003481 	.word	0x00003481
    376c:	20000430 	.word	0x20000430
    3770:	00001bc9 	.word	0x00001bc9
    3774:	00002985 	.word	0x00002985

00003778 <eink_et011tt2_graphics_load_2bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_et011tt2_graphics_load_2bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    3778:	b5f0      	push	{r4, r5, r6, r7, lr}
    377a:	46de      	mov	lr, fp
    377c:	4657      	mov	r7, sl
    377e:	464e      	mov	r6, r9
    3780:	4645      	mov	r5, r8
    3782:	b5e0      	push	{r5, r6, r7, lr}
    3784:	b089      	sub	sp, #36	; 0x24
    3786:	9004      	str	r0, [sp, #16]
    3788:	4691      	mov	r9, r2
    378a:	0019      	movs	r1, r3
    378c:	9305      	str	r3, [sp, #20]
    378e:	ab12      	add	r3, sp, #72	; 0x48
    3790:	881a      	ldrh	r2, [r3, #0]
    3792:	9206      	str	r2, [sp, #24]
    3794:	ab13      	add	r3, sp, #76	; 0x4c
    3796:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value[4];
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    3798:	464a      	mov	r2, r9
    379a:	2a00      	cmp	r2, #0
    379c:	d04a      	beq.n	3834 <eink_et011tt2_graphics_load_2bgrey_image+0xbc>
    379e:	2200      	movs	r2, #0
    37a0:	4693      	mov	fp, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
    37a2:	000a      	movs	r2, r1
    37a4:	3a01      	subs	r2, #1
    37a6:	b292      	uxth	r2, r2
    37a8:	9202      	str	r2, [sp, #8]
            /* Process each pixel in byte  */
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    37aa:	9307      	str	r3, [sp, #28]
            bit_value[1] = ((img_array[(i*image_height_bytes)+j] >> 2) & 0x3);
            bit_value[2] = ((img_array[(i*image_height_bytes)+j] >> 4) & 0x3);
            bit_value[3] = ((img_array[(i*image_height_bytes)+j] >> 6) & 0x3);
            /* Set the pixel in the display buffer */
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    37ac:	4f25      	ldr	r7, [pc, #148]	; (3844 <eink_et011tt2_graphics_load_2bgrey_image+0xcc>)
    37ae:	464b      	mov	r3, r9
    37b0:	9303      	str	r3, [sp, #12]
        for (j = (image_height_bytes-1); j > 0; j--) {
    37b2:	9a02      	ldr	r2, [sp, #8]
    37b4:	4691      	mov	r9, r2
    37b6:	2a00      	cmp	r2, #0
    37b8:	d035      	beq.n	3826 <eink_et011tt2_graphics_load_2bgrey_image+0xae>
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    37ba:	9e07      	ldr	r6, [sp, #28]
    37bc:	9b05      	ldr	r3, [sp, #20]
    37be:	465a      	mov	r2, fp
    37c0:	4353      	muls	r3, r2
    37c2:	9a04      	ldr	r2, [sp, #16]
    37c4:	4692      	mov	sl, r2
    37c6:	449a      	add	sl, r3
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    37c8:	9b06      	ldr	r3, [sp, #24]
    37ca:	445b      	add	r3, fp
    37cc:	b29b      	uxth	r3, r3
    37ce:	9301      	str	r3, [sp, #4]
    37d0:	464d      	mov	r5, r9
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    37d2:	4653      	mov	r3, sl
    37d4:	5d5c      	ldrb	r4, [r3, r5]
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    37d6:	2303      	movs	r3, #3
    37d8:	4698      	mov	r8, r3
    37da:	001a      	movs	r2, r3
    37dc:	4022      	ands	r2, r4
    37de:	43d2      	mvns	r2, r2
    37e0:	b2d2      	uxtb	r2, r2
    37e2:	0031      	movs	r1, r6
    37e4:	9801      	ldr	r0, [sp, #4]
    37e6:	47b8      	blx	r7
            bit_value[1] = ((img_array[(i*image_height_bytes)+j] >> 2) & 0x3);
    37e8:	08a2      	lsrs	r2, r4, #2
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value[1]));
    37ea:	4643      	mov	r3, r8
    37ec:	401a      	ands	r2, r3
    37ee:	43d2      	mvns	r2, r2
    37f0:	b2d2      	uxtb	r2, r2
    37f2:	1c71      	adds	r1, r6, #1
    37f4:	b289      	uxth	r1, r1
    37f6:	9801      	ldr	r0, [sp, #4]
    37f8:	47b8      	blx	r7
            bit_value[2] = ((img_array[(i*image_height_bytes)+j] >> 4) & 0x3);
    37fa:	0922      	lsrs	r2, r4, #4
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+2), (~bit_value[2]));
    37fc:	4643      	mov	r3, r8
    37fe:	401a      	ands	r2, r3
    3800:	43d2      	mvns	r2, r2
    3802:	b2d2      	uxtb	r2, r2
    3804:	1cb1      	adds	r1, r6, #2
    3806:	b289      	uxth	r1, r1
    3808:	9801      	ldr	r0, [sp, #4]
    380a:	47b8      	blx	r7
            bit_value[3] = ((img_array[(i*image_height_bytes)+j] >> 6) & 0x3);
    380c:	09a4      	lsrs	r4, r4, #6
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+3), (~bit_value[3]));
    380e:	43e2      	mvns	r2, r4
    3810:	b2d2      	uxtb	r2, r2
    3812:	1cf1      	adds	r1, r6, #3
    3814:	b289      	uxth	r1, r1
    3816:	9801      	ldr	r0, [sp, #4]
    3818:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    381a:	3d01      	subs	r5, #1
    381c:	b2ad      	uxth	r5, r5
    381e:	3604      	adds	r6, #4
    3820:	b2b6      	uxth	r6, r6
    3822:	2d00      	cmp	r5, #0
    3824:	d1d5      	bne.n	37d2 <eink_et011tt2_graphics_load_2bgrey_image+0x5a>
    for (i = 0; i < image_width_px; i++) {
    3826:	465b      	mov	r3, fp
    3828:	3301      	adds	r3, #1
    382a:	b29b      	uxth	r3, r3
    382c:	469b      	mov	fp, r3
    382e:	9b03      	ldr	r3, [sp, #12]
    3830:	455b      	cmp	r3, fp
    3832:	d8be      	bhi.n	37b2 <eink_et011tt2_graphics_load_2bgrey_image+0x3a>
            m += 4;
        }
    }
    return;
    3834:	b009      	add	sp, #36	; 0x24
    3836:	bc3c      	pop	{r2, r3, r4, r5}
    3838:	4690      	mov	r8, r2
    383a:	4699      	mov	r9, r3
    383c:	46a2      	mov	sl, r4
    383e:	46ab      	mov	fp, r5
    3840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	00001ae9 	.word	0x00001ae9

00003848 <uc8151_set_psr_config>:
 *
 * \param *psr_config The PSR structure to write to the PSR register.
 */
void uc8151_set_psr_config(
        const struct uc8151_panel_settings *psr_config)
{    
    3848:	b510      	push	{r4, lr}
    384a:	b082      	sub	sp, #8
    384c:	0004      	movs	r4, r0
    /* Copy configuration into UC8151 instance */
    uc8151_global_instance.panel_settings = *psr_config;
    384e:	2205      	movs	r2, #5
    3850:	0001      	movs	r1, r0
    3852:	4859      	ldr	r0, [pc, #356]	; (39b8 <uc8151_set_psr_config+0x170>)
    3854:	4b59      	ldr	r3, [pc, #356]	; (39bc <uc8151_set_psr_config+0x174>)
    3856:	4798      	blx	r3
    
    /* Save display resolution into UC8151 instance */
    switch (psr_config->display_resolution) {
    3858:	7823      	ldrb	r3, [r4, #0]
    385a:	2b01      	cmp	r3, #1
    385c:	d066      	beq.n	392c <uc8151_set_psr_config+0xe4>
    385e:	2b00      	cmp	r3, #0
    3860:	d053      	beq.n	390a <uc8151_set_psr_config+0xc2>
    3862:	2b02      	cmp	r3, #2
    3864:	d100      	bne.n	3868 <uc8151_set_psr_config+0x20>
    3866:	e072      	b.n	394e <uc8151_set_psr_config+0x106>
    3868:	2b03      	cmp	r3, #3
    386a:	d100      	bne.n	386e <uc8151_set_psr_config+0x26>
    386c:	e081      	b.n	3972 <uc8151_set_psr_config+0x12a>
    }
    
    uint8_t eink_data[5];

    /* Translate the panel settings structure to the required bytes to be sent to the display */
    switch (psr_config->display_resolution) {
    386e:	7823      	ldrb	r3, [r4, #0]
    3870:	2b01      	cmp	r3, #1
    3872:	d100      	bne.n	3876 <uc8151_set_psr_config+0x2e>
    3874:	e093      	b.n	399e <uc8151_set_psr_config+0x156>
    3876:	2b00      	cmp	r3, #0
    3878:	d100      	bne.n	387c <uc8151_set_psr_config+0x34>
    387a:	e08c      	b.n	3996 <uc8151_set_psr_config+0x14e>
    387c:	2b02      	cmp	r3, #2
    387e:	d100      	bne.n	3882 <uc8151_set_psr_config+0x3a>
    3880:	e091      	b.n	39a6 <uc8151_set_psr_config+0x15e>
    3882:	2b03      	cmp	r3, #3
    3884:	d100      	bne.n	3888 <uc8151_set_psr_config+0x40>
    3886:	e092      	b.n	39ae <uc8151_set_psr_config+0x166>
        case RES_96x230:                eink_data[0] = 0x00; break;
        case RES_96x252:                eink_data[0] = 0x01; break;
        case RES_128x296:               eink_data[0] = 0x02; break;
        case RES_160x296:               eink_data[0] = 0x03; break;
    }
    eink_data[0] = eink_data[0] << 1;
    3888:	466b      	mov	r3, sp
    388a:	781b      	ldrb	r3, [r3, #0]
    388c:	005b      	lsls	r3, r3, #1
    388e:	b2db      	uxtb	r3, r3
    3890:	466a      	mov	r2, sp
    3892:	7013      	strb	r3, [r2, #0]
    switch (psr_config->lut_selection) {
    3894:	7862      	ldrb	r2, [r4, #1]
    3896:	2a01      	cmp	r2, #1
    3898:	d102      	bne.n	38a0 <uc8151_set_psr_config+0x58>
        case LUT_FROM_OTP:              eink_data[0] |= 0x00; break;
        case LUT_FROM_REGISTER:         eink_data[0] |= 0x01; break;
    389a:	4313      	orrs	r3, r2
    389c:	466a      	mov	r2, sp
    389e:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    38a0:	466b      	mov	r3, sp
    38a2:	781b      	ldrb	r3, [r3, #0]
    38a4:	005b      	lsls	r3, r3, #1
    38a6:	b2db      	uxtb	r3, r3
    38a8:	466a      	mov	r2, sp
    38aa:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_colours) {
    38ac:	78a2      	ldrb	r2, [r4, #2]
    38ae:	2a00      	cmp	r2, #0
    38b0:	d103      	bne.n	38ba <uc8151_set_psr_config+0x72>
        case B_W_R_PIXELS:              eink_data[0] |= 0x00; break;
        case B_W_PIXELS:                eink_data[0] |= 0x01; break;
    38b2:	2201      	movs	r2, #1
    38b4:	4313      	orrs	r3, r2
    38b6:	466a      	mov	r2, sp
    38b8:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 2;
    38ba:	466b      	mov	r3, sp
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	009b      	lsls	r3, r3, #2
    38c0:	b2db      	uxtb	r3, r3
    38c2:	466a      	mov	r2, sp
    38c4:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_rotation) {
    38c6:	78e2      	ldrb	r2, [r4, #3]
    38c8:	3a01      	subs	r2, #1
    38ca:	2a01      	cmp	r2, #1
    38cc:	d803      	bhi.n	38d6 <uc8151_set_psr_config+0x8e>
        case ROTATE_0:
        case ROTATE_270:                 eink_data[0] |= 0b00; break;
        case ROTATE_180:
        case ROTATE_90:                  eink_data[0] |= 0b11; break;
    38ce:	2203      	movs	r2, #3
    38d0:	4313      	orrs	r3, r2
    38d2:	466a      	mov	r2, sp
    38d4:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    38d6:	466b      	mov	r3, sp
    38d8:	781b      	ldrb	r3, [r3, #0]
    38da:	005b      	lsls	r3, r3, #1
    38dc:	b2db      	uxtb	r3, r3
    38de:	466a      	mov	r2, sp
    38e0:	7013      	strb	r3, [r2, #0]
    switch (psr_config->booster_switch) {
    38e2:	7922      	ldrb	r2, [r4, #4]
    38e4:	2a01      	cmp	r2, #1
    38e6:	d102      	bne.n	38ee <uc8151_set_psr_config+0xa6>
        case BOOSTER_OFF:               eink_data[0] |= 0x00; break;
        case BOOSTER_ON:                eink_data[0] |= 0x01; break;
    38e8:	4313      	orrs	r3, r2
    38ea:	466a      	mov	r2, sp
    38ec:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    38ee:	466b      	mov	r3, sp
    38f0:	781b      	ldrb	r3, [r3, #0]
    38f2:	005b      	lsls	r3, r3, #1
    /* Add the soft reset bit */
    eink_data[0] |= 0x01;
    38f4:	2201      	movs	r2, #1
    38f6:	4313      	orrs	r3, r2
    38f8:	466a      	mov	r2, sp
    38fa:	7013      	strb	r3, [r2, #0]
    /* Send the PSR register to the display */
    eink_write_data(UC8151_PSR, eink_data, 1);
    38fc:	2201      	movs	r2, #1
    38fe:	4669      	mov	r1, sp
    3900:	2000      	movs	r0, #0
    3902:	4b2f      	ldr	r3, [pc, #188]	; (39c0 <uc8151_set_psr_config+0x178>)
    3904:	4798      	blx	r3
    3906:	b002      	add	sp, #8
    3908:	bd10      	pop	{r4, pc}
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    390a:	78e3      	ldrb	r3, [r4, #3]
    390c:	2202      	movs	r2, #2
    390e:	4393      	bics	r3, r2
    3910:	2b01      	cmp	r3, #1
    3912:	d005      	beq.n	3920 <uc8151_set_psr_config+0xd8>
                uc8151_global_instance.display_width   = 230;
    3914:	4b28      	ldr	r3, [pc, #160]	; (39b8 <uc8151_set_psr_config+0x170>)
    3916:	22e6      	movs	r2, #230	; 0xe6
    3918:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    391a:	3a86      	subs	r2, #134	; 0x86
    391c:	811a      	strh	r2, [r3, #8]
    391e:	e7a6      	b.n	386e <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    3920:	4b25      	ldr	r3, [pc, #148]	; (39b8 <uc8151_set_psr_config+0x170>)
    3922:	325e      	adds	r2, #94	; 0x5e
    3924:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 230;
    3926:	3286      	adds	r2, #134	; 0x86
    3928:	811a      	strh	r2, [r3, #8]
    392a:	e7a0      	b.n	386e <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    392c:	78e3      	ldrb	r3, [r4, #3]
    392e:	2202      	movs	r2, #2
    3930:	4393      	bics	r3, r2
    3932:	2b01      	cmp	r3, #1
    3934:	d005      	beq.n	3942 <uc8151_set_psr_config+0xfa>
                uc8151_global_instance.display_width   = 252;
    3936:	4b20      	ldr	r3, [pc, #128]	; (39b8 <uc8151_set_psr_config+0x170>)
    3938:	22fc      	movs	r2, #252	; 0xfc
    393a:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    393c:	3a9c      	subs	r2, #156	; 0x9c
    393e:	811a      	strh	r2, [r3, #8]
    3940:	e795      	b.n	386e <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    3942:	4b1d      	ldr	r3, [pc, #116]	; (39b8 <uc8151_set_psr_config+0x170>)
    3944:	325e      	adds	r2, #94	; 0x5e
    3946:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 252;
    3948:	329c      	adds	r2, #156	; 0x9c
    394a:	811a      	strh	r2, [r3, #8]
    394c:	e78f      	b.n	386e <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    394e:	78e3      	ldrb	r3, [r4, #3]
    3950:	2202      	movs	r2, #2
    3952:	4393      	bics	r3, r2
    3954:	2b01      	cmp	r3, #1
    3956:	d006      	beq.n	3966 <uc8151_set_psr_config+0x11e>
                uc8151_global_instance.display_width   = 296;
    3958:	4b17      	ldr	r3, [pc, #92]	; (39b8 <uc8151_set_psr_config+0x170>)
    395a:	2294      	movs	r2, #148	; 0x94
    395c:	0052      	lsls	r2, r2, #1
    395e:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 128;
    3960:	3aa8      	subs	r2, #168	; 0xa8
    3962:	811a      	strh	r2, [r3, #8]
    3964:	e783      	b.n	386e <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 128;
    3966:	4b14      	ldr	r3, [pc, #80]	; (39b8 <uc8151_set_psr_config+0x170>)
    3968:	327e      	adds	r2, #126	; 0x7e
    396a:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    396c:	32a8      	adds	r2, #168	; 0xa8
    396e:	811a      	strh	r2, [r3, #8]
    3970:	e77d      	b.n	386e <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    3972:	78e3      	ldrb	r3, [r4, #3]
    3974:	2202      	movs	r2, #2
    3976:	4393      	bics	r3, r2
    3978:	2b01      	cmp	r3, #1
    397a:	d006      	beq.n	398a <uc8151_set_psr_config+0x142>
                uc8151_global_instance.display_width   = 296;
    397c:	4b0e      	ldr	r3, [pc, #56]	; (39b8 <uc8151_set_psr_config+0x170>)
    397e:	2294      	movs	r2, #148	; 0x94
    3980:	0052      	lsls	r2, r2, #1
    3982:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 160;
    3984:	3a88      	subs	r2, #136	; 0x88
    3986:	811a      	strh	r2, [r3, #8]
    3988:	e771      	b.n	386e <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 160;
    398a:	4b0b      	ldr	r3, [pc, #44]	; (39b8 <uc8151_set_psr_config+0x170>)
    398c:	329e      	adds	r2, #158	; 0x9e
    398e:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    3990:	3288      	adds	r2, #136	; 0x88
    3992:	811a      	strh	r2, [r3, #8]
    3994:	e76b      	b.n	386e <uc8151_set_psr_config+0x26>
        case RES_96x230:                eink_data[0] = 0x00; break;
    3996:	2300      	movs	r3, #0
    3998:	466a      	mov	r2, sp
    399a:	7013      	strb	r3, [r2, #0]
    399c:	e774      	b.n	3888 <uc8151_set_psr_config+0x40>
        case RES_96x252:                eink_data[0] = 0x01; break;
    399e:	2301      	movs	r3, #1
    39a0:	466a      	mov	r2, sp
    39a2:	7013      	strb	r3, [r2, #0]
    39a4:	e770      	b.n	3888 <uc8151_set_psr_config+0x40>
        case RES_128x296:               eink_data[0] = 0x02; break;
    39a6:	2302      	movs	r3, #2
    39a8:	466a      	mov	r2, sp
    39aa:	7013      	strb	r3, [r2, #0]
    39ac:	e76c      	b.n	3888 <uc8151_set_psr_config+0x40>
        case RES_160x296:               eink_data[0] = 0x03; break;
    39ae:	2303      	movs	r3, #3
    39b0:	466a      	mov	r2, sp
    39b2:	7013      	strb	r3, [r2, #0]
    39b4:	e768      	b.n	3888 <uc8151_set_psr_config+0x40>
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	200003f8 	.word	0x200003f8
    39bc:	000043f1 	.word	0x000043f1
    39c0:	00001bc9 	.word	0x00001bc9

000039c4 <uc8151_set_config>:
{        
    39c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39c6:	46c6      	mov	lr, r8
    39c8:	b500      	push	{lr}
    39ca:	b086      	sub	sp, #24
    39cc:	0004      	movs	r4, r0
    switch(config->power_settings.source_power) {
    39ce:	7943      	ldrb	r3, [r0, #5]
    39d0:	2b00      	cmp	r3, #0
    39d2:	d020      	beq.n	3a16 <uc8151_set_config+0x52>
    39d4:	2b01      	cmp	r3, #1
    39d6:	d022      	beq.n	3a1e <uc8151_set_config+0x5a>
    eink_data[0] = eink_data[0] << 1;
    39d8:	aa04      	add	r2, sp, #16
    39da:	7813      	ldrb	r3, [r2, #0]
    39dc:	005b      	lsls	r3, r3, #1
    39de:	b2db      	uxtb	r3, r3
    39e0:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.gate_power) {
    39e2:	79a2      	ldrb	r2, [r4, #6]
    39e4:	2a01      	cmp	r2, #1
    39e6:	d102      	bne.n	39ee <uc8151_set_config+0x2a>
        case GATE_INTERNAL_DC_DC:       eink_data[0] |= 0x01; break;
    39e8:	4313      	orrs	r3, r2
    39ea:	aa04      	add	r2, sp, #16
    39ec:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.vcom_voltage_level) {
    39ee:	79e3      	ldrb	r3, [r4, #7]
    39f0:	2b00      	cmp	r3, #0
    39f2:	d018      	beq.n	3a26 <uc8151_set_config+0x62>
    39f4:	2b01      	cmp	r3, #1
    39f6:	d01a      	beq.n	3a2e <uc8151_set_config+0x6a>
    eink_data[1] = eink_data[1] << 2;
    39f8:	aa04      	add	r2, sp, #16
    39fa:	7853      	ldrb	r3, [r2, #1]
    39fc:	009b      	lsls	r3, r3, #2
    39fe:	b2db      	uxtb	r3, r3
    3a00:	7053      	strb	r3, [r2, #1]
    switch (config->power_settings.vg_voltage_level) {
    3a02:	7a22      	ldrb	r2, [r4, #8]
    3a04:	2a06      	cmp	r2, #6
    3a06:	d05b      	beq.n	3ac0 <uc8151_set_config+0xfc>
    3a08:	2a07      	cmp	r2, #7
    3a0a:	d05e      	beq.n	3aca <uc8151_set_config+0x106>
    3a0c:	2a05      	cmp	r2, #5
    3a0e:	d012      	beq.n	3a36 <uc8151_set_config+0x72>
    if( (config->power_settings.vg_voltage_level == VGx_17V) | (config->power_settings.vg_voltage_level == VGx_18V) | (config->power_settings.vg_voltage_level == VGx_19V) | (config->power_settings.vg_voltage_level == VGx_20V) )
    3a10:	2a03      	cmp	r2, #3
    3a12:	d814      	bhi.n	3a3e <uc8151_set_config+0x7a>
    3a14:	e7fe      	b.n	3a14 <uc8151_set_config+0x50>
        case SOURCE_EXTERNAL_POWER:     eink_data[0] = 0x00; break;
    3a16:	2200      	movs	r2, #0
    3a18:	ab04      	add	r3, sp, #16
    3a1a:	701a      	strb	r2, [r3, #0]
    3a1c:	e7dc      	b.n	39d8 <uc8151_set_config+0x14>
        case SOURCE_INTERNAL_DC_DC:     eink_data[0] = 0x01; break;
    3a1e:	2201      	movs	r2, #1
    3a20:	ab04      	add	r3, sp, #16
    3a22:	701a      	strb	r2, [r3, #0]
    3a24:	e7d8      	b.n	39d8 <uc8151_set_config+0x14>
        case VCOMx_VDx_DC_VCOMD:        eink_data[1] = 0x00; break;
    3a26:	2200      	movs	r2, #0
    3a28:	ab04      	add	r3, sp, #16
    3a2a:	705a      	strb	r2, [r3, #1]
    3a2c:	e7e4      	b.n	39f8 <uc8151_set_config+0x34>
        case VCOMx_VGx:                 eink_data[1] = 0x01; break;
    3a2e:	2201      	movs	r2, #1
    3a30:	ab04      	add	r3, sp, #16
    3a32:	705a      	strb	r2, [r3, #1]
    3a34:	e7e0      	b.n	39f8 <uc8151_set_config+0x34>
        case VGx_15V:                   eink_data[1] |= 0x01; break;
    3a36:	2201      	movs	r2, #1
    3a38:	4313      	orrs	r3, r2
    3a3a:	aa04      	add	r2, sp, #16
    3a3c:	7053      	strb	r3, [r2, #1]
    eink_data[2] = config->power_settings.pwr_vdh_level;
    3a3e:	a904      	add	r1, sp, #16
    3a40:	7a63      	ldrb	r3, [r4, #9]
    3a42:	708b      	strb	r3, [r1, #2]
    eink_data[3] = config->power_settings.pwr_vdl_level;
    3a44:	7aa3      	ldrb	r3, [r4, #10]
    3a46:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = config->power_settings.pwr_vdhr_level;
    3a48:	7ae3      	ldrb	r3, [r4, #11]
    3a4a:	710b      	strb	r3, [r1, #4]
    eink_write_data(UC8151_PWR, eink_data, 5);
    3a4c:	2205      	movs	r2, #5
    3a4e:	2001      	movs	r0, #1
    3a50:	4dd8      	ldr	r5, [pc, #864]	; (3db4 <uc8151_set_config+0x3f0>)
    3a52:	47a8      	blx	r5
    psr_config = config->panel_settings;
    3a54:	2205      	movs	r2, #5
    3a56:	0021      	movs	r1, r4
    3a58:	a802      	add	r0, sp, #8
    3a5a:	4bd7      	ldr	r3, [pc, #860]	; (3db8 <uc8151_set_config+0x3f4>)
    3a5c:	4798      	blx	r3
    uc8151_set_psr_config(&psr_config);
    3a5e:	a802      	add	r0, sp, #8
    3a60:	4bd6      	ldr	r3, [pc, #856]	; (3dbc <uc8151_set_config+0x3f8>)
    3a62:	4798      	blx	r3
    eink_write_data(UC8151_PON, 0, 0);
    3a64:	2200      	movs	r2, #0
    3a66:	2100      	movs	r1, #0
    3a68:	2004      	movs	r0, #4
    3a6a:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    3a6c:	4bd4      	ldr	r3, [pc, #848]	; (3dc0 <uc8151_set_config+0x3fc>)
    3a6e:	4698      	mov	r8, r3
	CRITICAL_SECTION_LEAVE();
    3a70:	4fd4      	ldr	r7, [pc, #848]	; (3dc4 <uc8151_set_config+0x400>)
	CRITICAL_SECTION_ENTER();
    3a72:	4668      	mov	r0, sp
    3a74:	47c0      	blx	r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3a76:	23c0      	movs	r3, #192	; 0xc0
    3a78:	05db      	lsls	r3, r3, #23
    3a7a:	2680      	movs	r6, #128	; 0x80
    3a7c:	599d      	ldr	r5, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3a7e:	22a0      	movs	r2, #160	; 0xa0
    3a80:	49d1      	ldr	r1, [pc, #836]	; (3dc8 <uc8151_set_config+0x404>)
    3a82:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3a84:	2190      	movs	r1, #144	; 0x90
    3a86:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3a88:	4053      	eors	r3, r2
    3a8a:	401d      	ands	r5, r3
    3a8c:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    3a8e:	4668      	mov	r0, sp
    3a90:	47b8      	blx	r7
    3a92:	422e      	tst	r6, r5
    3a94:	d0ed      	beq.n	3a72 <uc8151_set_config+0xae>
    switch (config->booster_soft_start.a_soft_start_period) {
    3a96:	7b20      	ldrb	r0, [r4, #12]
    3a98:	2801      	cmp	r0, #1
    3a9a:	d01f      	beq.n	3adc <uc8151_set_config+0x118>
    3a9c:	2800      	cmp	r0, #0
    3a9e:	d019      	beq.n	3ad4 <uc8151_set_config+0x110>
    3aa0:	2802      	cmp	r0, #2
    3aa2:	d01f      	beq.n	3ae4 <uc8151_set_config+0x120>
    3aa4:	2803      	cmp	r0, #3
    3aa6:	d021      	beq.n	3aec <uc8151_set_config+0x128>
    eink_data[0] = eink_data[0] << 3;
    3aa8:	aa04      	add	r2, sp, #16
    3aaa:	7813      	ldrb	r3, [r2, #0]
    3aac:	00db      	lsls	r3, r3, #3
    3aae:	b2db      	uxtb	r3, r3
    3ab0:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_drive_strength) {
    3ab2:	7b61      	ldrb	r1, [r4, #13]
    3ab4:	2907      	cmp	r1, #7
    3ab6:	d821      	bhi.n	3afc <uc8151_set_config+0x138>
    3ab8:	008a      	lsls	r2, r1, #2
    3aba:	4dc4      	ldr	r5, [pc, #784]	; (3dcc <uc8151_set_config+0x408>)
    3abc:	58aa      	ldr	r2, [r5, r2]
    3abe:	4697      	mov	pc, r2
        case VGx_14V:                   eink_data[1] |= 0x02; break;
    3ac0:	2202      	movs	r2, #2
    3ac2:	4313      	orrs	r3, r2
    3ac4:	aa04      	add	r2, sp, #16
    3ac6:	7053      	strb	r3, [r2, #1]
    3ac8:	e7b9      	b.n	3a3e <uc8151_set_config+0x7a>
        case VGx_13V:                   eink_data[1] |= 0x03; break;
    3aca:	2203      	movs	r2, #3
    3acc:	4313      	orrs	r3, r2
    3ace:	aa04      	add	r2, sp, #16
    3ad0:	7053      	strb	r3, [r2, #1]
    3ad2:	e7b4      	b.n	3a3e <uc8151_set_config+0x7a>
        case SS_PERIOD_10MS:            eink_data[0] = 0x00; break;
    3ad4:	2200      	movs	r2, #0
    3ad6:	ab04      	add	r3, sp, #16
    3ad8:	701a      	strb	r2, [r3, #0]
    3ada:	e7e5      	b.n	3aa8 <uc8151_set_config+0xe4>
        case SS_PERIOD_20MS:            eink_data[0] = 0x01; break;
    3adc:	2201      	movs	r2, #1
    3ade:	ab04      	add	r3, sp, #16
    3ae0:	701a      	strb	r2, [r3, #0]
    3ae2:	e7e1      	b.n	3aa8 <uc8151_set_config+0xe4>
        case SS_PERIOD_30MS:            eink_data[0] = 0x02; break;
    3ae4:	2202      	movs	r2, #2
    3ae6:	ab04      	add	r3, sp, #16
    3ae8:	701a      	strb	r2, [r3, #0]
    3aea:	e7dd      	b.n	3aa8 <uc8151_set_config+0xe4>
        case SS_PERIOD_40MS:            eink_data[0] = 0x03; break;
    3aec:	2203      	movs	r2, #3
    3aee:	ab04      	add	r3, sp, #16
    3af0:	701a      	strb	r2, [r3, #0]
    3af2:	e7d9      	b.n	3aa8 <uc8151_set_config+0xe4>
        case STRENGTH_2:                eink_data[0] |= 0x01; break;
    3af4:	2201      	movs	r2, #1
    3af6:	4313      	orrs	r3, r2
    3af8:	aa04      	add	r2, sp, #16
    3afa:	7013      	strb	r3, [r2, #0]
    eink_data[0] = eink_data[0] << 3;
    3afc:	aa04      	add	r2, sp, #16
    3afe:	7813      	ldrb	r3, [r2, #0]
    3b00:	00db      	lsls	r3, r3, #3
    3b02:	b2db      	uxtb	r3, r3
    3b04:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_min_off_time) {
    3b06:	7ba2      	ldrb	r2, [r4, #14]
    3b08:	2a07      	cmp	r2, #7
    3b0a:	d825      	bhi.n	3b58 <uc8151_set_config+0x194>
    3b0c:	0095      	lsls	r5, r2, #2
    3b0e:	4eb0      	ldr	r6, [pc, #704]	; (3dd0 <uc8151_set_config+0x40c>)
    3b10:	5975      	ldr	r5, [r6, r5]
    3b12:	46af      	mov	pc, r5
        case STRENGTH_3:                eink_data[0] |= 0x02; break;
    3b14:	2202      	movs	r2, #2
    3b16:	4313      	orrs	r3, r2
    3b18:	aa04      	add	r2, sp, #16
    3b1a:	7013      	strb	r3, [r2, #0]
    3b1c:	e7ee      	b.n	3afc <uc8151_set_config+0x138>
        case STRENGTH_4:                eink_data[0] |= 0x03; break;
    3b1e:	2203      	movs	r2, #3
    3b20:	4313      	orrs	r3, r2
    3b22:	aa04      	add	r2, sp, #16
    3b24:	7013      	strb	r3, [r2, #0]
    3b26:	e7e9      	b.n	3afc <uc8151_set_config+0x138>
        case STRENGTH_5:                eink_data[0] |= 0x04; break;
    3b28:	2204      	movs	r2, #4
    3b2a:	4313      	orrs	r3, r2
    3b2c:	aa04      	add	r2, sp, #16
    3b2e:	7013      	strb	r3, [r2, #0]
    3b30:	e7e4      	b.n	3afc <uc8151_set_config+0x138>
        case STRENGTH_6:                eink_data[0] |= 0x05; break;
    3b32:	2205      	movs	r2, #5
    3b34:	4313      	orrs	r3, r2
    3b36:	aa04      	add	r2, sp, #16
    3b38:	7013      	strb	r3, [r2, #0]
    3b3a:	e7df      	b.n	3afc <uc8151_set_config+0x138>
        case STRENGTH_7:                eink_data[0] |= 0x06; break;
    3b3c:	2206      	movs	r2, #6
    3b3e:	4313      	orrs	r3, r2
    3b40:	aa04      	add	r2, sp, #16
    3b42:	7013      	strb	r3, [r2, #0]
    3b44:	e7da      	b.n	3afc <uc8151_set_config+0x138>
        case STRENGTH_8:                eink_data[0] |= 0x07; break;
    3b46:	2207      	movs	r2, #7
    3b48:	4313      	orrs	r3, r2
    3b4a:	aa04      	add	r2, sp, #16
    3b4c:	7013      	strb	r3, [r2, #0]
    3b4e:	e7d5      	b.n	3afc <uc8151_set_config+0x138>
        case MIN_OFF_TIME_340_NS:       eink_data[0] |= 0x01; break;
    3b50:	2501      	movs	r5, #1
    3b52:	432b      	orrs	r3, r5
    3b54:	ad04      	add	r5, sp, #16
    3b56:	702b      	strb	r3, [r5, #0]
    switch (config->booster_soft_start.a_soft_start_period) {
    3b58:	2801      	cmp	r0, #1
    3b5a:	d030      	beq.n	3bbe <uc8151_set_config+0x1fa>
    3b5c:	2800      	cmp	r0, #0
    3b5e:	d02a      	beq.n	3bb6 <uc8151_set_config+0x1f2>
    3b60:	2802      	cmp	r0, #2
    3b62:	d030      	beq.n	3bc6 <uc8151_set_config+0x202>
    3b64:	2803      	cmp	r0, #3
    3b66:	d032      	beq.n	3bce <uc8151_set_config+0x20a>
    eink_data[1] = eink_data[1] << 3;
    3b68:	ab04      	add	r3, sp, #16
    3b6a:	785b      	ldrb	r3, [r3, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3b6c:	2907      	cmp	r1, #7
    3b6e:	d900      	bls.n	3b72 <uc8151_set_config+0x1ae>
    3b70:	e08c      	b.n	3c8c <uc8151_set_config+0x2c8>
    3b72:	0088      	lsls	r0, r1, #2
    3b74:	4d97      	ldr	r5, [pc, #604]	; (3dd4 <uc8151_set_config+0x410>)
    3b76:	5828      	ldr	r0, [r5, r0]
    3b78:	4687      	mov	pc, r0
        case MIN_OFF_TIME_400_NS:       eink_data[0] |= 0x02; break;
    3b7a:	2502      	movs	r5, #2
    3b7c:	432b      	orrs	r3, r5
    3b7e:	ad04      	add	r5, sp, #16
    3b80:	702b      	strb	r3, [r5, #0]
    3b82:	e7e9      	b.n	3b58 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_540_NS:       eink_data[0] |= 0x03; break;
    3b84:	2503      	movs	r5, #3
    3b86:	432b      	orrs	r3, r5
    3b88:	ad04      	add	r5, sp, #16
    3b8a:	702b      	strb	r3, [r5, #0]
    3b8c:	e7e4      	b.n	3b58 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_800_NS:       eink_data[0] |= 0x04; break;
    3b8e:	2504      	movs	r5, #4
    3b90:	432b      	orrs	r3, r5
    3b92:	ad04      	add	r5, sp, #16
    3b94:	702b      	strb	r3, [r5, #0]
    3b96:	e7df      	b.n	3b58 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_1540_NS:      eink_data[0] |= 0x05; break;
    3b98:	2505      	movs	r5, #5
    3b9a:	432b      	orrs	r3, r5
    3b9c:	ad04      	add	r5, sp, #16
    3b9e:	702b      	strb	r3, [r5, #0]
    3ba0:	e7da      	b.n	3b58 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_3340_NS:      eink_data[0] |= 0x06; break;
    3ba2:	2506      	movs	r5, #6
    3ba4:	432b      	orrs	r3, r5
    3ba6:	ad04      	add	r5, sp, #16
    3ba8:	702b      	strb	r3, [r5, #0]
    3baa:	e7d5      	b.n	3b58 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_6580_NS:      eink_data[0] |= 0x07; break;
    3bac:	2507      	movs	r5, #7
    3bae:	432b      	orrs	r3, r5
    3bb0:	ad04      	add	r5, sp, #16
    3bb2:	702b      	strb	r3, [r5, #0]
    3bb4:	e7d0      	b.n	3b58 <uc8151_set_config+0x194>
        case SS_PERIOD_10MS:            eink_data[1] = 0x00; break;
    3bb6:	2000      	movs	r0, #0
    3bb8:	ab04      	add	r3, sp, #16
    3bba:	7058      	strb	r0, [r3, #1]
    3bbc:	e7d4      	b.n	3b68 <uc8151_set_config+0x1a4>
        case SS_PERIOD_20MS:            eink_data[1] = 0x01; break;
    3bbe:	2001      	movs	r0, #1
    3bc0:	ab04      	add	r3, sp, #16
    3bc2:	7058      	strb	r0, [r3, #1]
    3bc4:	e7d0      	b.n	3b68 <uc8151_set_config+0x1a4>
        case SS_PERIOD_30MS:            eink_data[1] = 0x02; break;
    3bc6:	2002      	movs	r0, #2
    3bc8:	ab04      	add	r3, sp, #16
    3bca:	7058      	strb	r0, [r3, #1]
    3bcc:	e7cc      	b.n	3b68 <uc8151_set_config+0x1a4>
        case SS_PERIOD_40MS:            eink_data[1] = 0x03; break;
    3bce:	2003      	movs	r0, #3
    3bd0:	ab04      	add	r3, sp, #16
    3bd2:	7058      	strb	r0, [r3, #1]
    3bd4:	e7c8      	b.n	3b68 <uc8151_set_config+0x1a4>
    eink_data[1] = eink_data[1] << 3;
    3bd6:	019b      	lsls	r3, r3, #6
    3bd8:	2008      	movs	r0, #8
    3bda:	4303      	orrs	r3, r0
    3bdc:	b2db      	uxtb	r3, r3
    3bde:	a804      	add	r0, sp, #16
    3be0:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3be2:	2a07      	cmp	r2, #7
    3be4:	d900      	bls.n	3be8 <uc8151_set_config+0x224>
    3be6:	e0bd      	b.n	3d64 <uc8151_set_config+0x3a0>
    3be8:	0090      	lsls	r0, r2, #2
    3bea:	4d7b      	ldr	r5, [pc, #492]	; (3dd8 <uc8151_set_config+0x414>)
    3bec:	5828      	ldr	r0, [r5, r0]
    3bee:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3bf0:	019b      	lsls	r3, r3, #6
    3bf2:	2010      	movs	r0, #16
    3bf4:	4303      	orrs	r3, r0
    3bf6:	b2db      	uxtb	r3, r3
    3bf8:	a804      	add	r0, sp, #16
    3bfa:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3bfc:	2a07      	cmp	r2, #7
    3bfe:	d900      	bls.n	3c02 <uc8151_set_config+0x23e>
    3c00:	e0b4      	b.n	3d6c <uc8151_set_config+0x3a8>
    3c02:	0090      	lsls	r0, r2, #2
    3c04:	4d75      	ldr	r5, [pc, #468]	; (3ddc <uc8151_set_config+0x418>)
    3c06:	5828      	ldr	r0, [r5, r0]
    3c08:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c0a:	019b      	lsls	r3, r3, #6
    3c0c:	2018      	movs	r0, #24
    3c0e:	4303      	orrs	r3, r0
    3c10:	b2db      	uxtb	r3, r3
    3c12:	a804      	add	r0, sp, #16
    3c14:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c16:	2a07      	cmp	r2, #7
    3c18:	d900      	bls.n	3c1c <uc8151_set_config+0x258>
    3c1a:	e0ab      	b.n	3d74 <uc8151_set_config+0x3b0>
    3c1c:	0090      	lsls	r0, r2, #2
    3c1e:	4d70      	ldr	r5, [pc, #448]	; (3de0 <uc8151_set_config+0x41c>)
    3c20:	5828      	ldr	r0, [r5, r0]
    3c22:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c24:	019b      	lsls	r3, r3, #6
    3c26:	2020      	movs	r0, #32
    3c28:	4303      	orrs	r3, r0
    3c2a:	b2db      	uxtb	r3, r3
    3c2c:	a804      	add	r0, sp, #16
    3c2e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c30:	2a07      	cmp	r2, #7
    3c32:	d900      	bls.n	3c36 <uc8151_set_config+0x272>
    3c34:	e0a2      	b.n	3d7c <uc8151_set_config+0x3b8>
    3c36:	0090      	lsls	r0, r2, #2
    3c38:	4d6a      	ldr	r5, [pc, #424]	; (3de4 <uc8151_set_config+0x420>)
    3c3a:	5828      	ldr	r0, [r5, r0]
    3c3c:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c3e:	019b      	lsls	r3, r3, #6
    3c40:	2028      	movs	r0, #40	; 0x28
    3c42:	4303      	orrs	r3, r0
    3c44:	b2db      	uxtb	r3, r3
    3c46:	a804      	add	r0, sp, #16
    3c48:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c4a:	2a07      	cmp	r2, #7
    3c4c:	d900      	bls.n	3c50 <uc8151_set_config+0x28c>
    3c4e:	e099      	b.n	3d84 <uc8151_set_config+0x3c0>
    3c50:	0090      	lsls	r0, r2, #2
    3c52:	4d65      	ldr	r5, [pc, #404]	; (3de8 <uc8151_set_config+0x424>)
    3c54:	5828      	ldr	r0, [r5, r0]
    3c56:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c58:	019b      	lsls	r3, r3, #6
    3c5a:	2030      	movs	r0, #48	; 0x30
    3c5c:	4303      	orrs	r3, r0
    3c5e:	b2db      	uxtb	r3, r3
    3c60:	a804      	add	r0, sp, #16
    3c62:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c64:	2a07      	cmp	r2, #7
    3c66:	d900      	bls.n	3c6a <uc8151_set_config+0x2a6>
    3c68:	e090      	b.n	3d8c <uc8151_set_config+0x3c8>
    3c6a:	0090      	lsls	r0, r2, #2
    3c6c:	4d5f      	ldr	r5, [pc, #380]	; (3dec <uc8151_set_config+0x428>)
    3c6e:	5828      	ldr	r0, [r5, r0]
    3c70:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c72:	019b      	lsls	r3, r3, #6
    3c74:	2038      	movs	r0, #56	; 0x38
    3c76:	4303      	orrs	r3, r0
    3c78:	b2db      	uxtb	r3, r3
    3c7a:	a804      	add	r0, sp, #16
    3c7c:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c7e:	2a07      	cmp	r2, #7
    3c80:	d900      	bls.n	3c84 <uc8151_set_config+0x2c0>
    3c82:	e087      	b.n	3d94 <uc8151_set_config+0x3d0>
    3c84:	0090      	lsls	r0, r2, #2
    3c86:	4d5a      	ldr	r5, [pc, #360]	; (3df0 <uc8151_set_config+0x42c>)
    3c88:	5828      	ldr	r0, [r5, r0]
    3c8a:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c8c:	019b      	lsls	r3, r3, #6
    3c8e:	b2db      	uxtb	r3, r3
    3c90:	a804      	add	r0, sp, #16
    3c92:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c94:	2a07      	cmp	r2, #7
    3c96:	d850      	bhi.n	3d3a <uc8151_set_config+0x376>
    3c98:	0090      	lsls	r0, r2, #2
    3c9a:	4d56      	ldr	r5, [pc, #344]	; (3df4 <uc8151_set_config+0x430>)
    3c9c:	5828      	ldr	r0, [r5, r0]
    3c9e:	4687      	mov	pc, r0
        case MIN_OFF_TIME_340_NS:       eink_data[1] |= 0x01; break;
    3ca0:	2001      	movs	r0, #1
    3ca2:	4303      	orrs	r3, r0
    3ca4:	a804      	add	r0, sp, #16
    3ca6:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3ca8:	2907      	cmp	r1, #7
    3caa:	d900      	bls.n	3cae <uc8151_set_config+0x2ea>
    3cac:	e0d7      	b.n	3e5e <uc8151_set_config+0x49a>
    3cae:	0089      	lsls	r1, r1, #2
    3cb0:	4b51      	ldr	r3, [pc, #324]	; (3df8 <uc8151_set_config+0x434>)
    3cb2:	585b      	ldr	r3, [r3, r1]
    3cb4:	469f      	mov	pc, r3
        case MIN_OFF_TIME_400_NS:       eink_data[1] |= 0x02; break;
    3cb6:	2002      	movs	r0, #2
    3cb8:	4303      	orrs	r3, r0
    3cba:	a804      	add	r0, sp, #16
    3cbc:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3cbe:	2907      	cmp	r1, #7
    3cc0:	d900      	bls.n	3cc4 <uc8151_set_config+0x300>
    3cc2:	e12c      	b.n	3f1e <uc8151_set_config+0x55a>
    3cc4:	0089      	lsls	r1, r1, #2
    3cc6:	4b4d      	ldr	r3, [pc, #308]	; (3dfc <uc8151_set_config+0x438>)
    3cc8:	585b      	ldr	r3, [r3, r1]
    3cca:	469f      	mov	pc, r3
        case MIN_OFF_TIME_540_NS:       eink_data[1] |= 0x03; break;
    3ccc:	2003      	movs	r0, #3
    3cce:	4303      	orrs	r3, r0
    3cd0:	a804      	add	r0, sp, #16
    3cd2:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3cd4:	2907      	cmp	r1, #7
    3cd6:	d900      	bls.n	3cda <uc8151_set_config+0x316>
    3cd8:	e12a      	b.n	3f30 <uc8151_set_config+0x56c>
    3cda:	0089      	lsls	r1, r1, #2
    3cdc:	4b48      	ldr	r3, [pc, #288]	; (3e00 <uc8151_set_config+0x43c>)
    3cde:	585b      	ldr	r3, [r3, r1]
    3ce0:	469f      	mov	pc, r3
        case MIN_OFF_TIME_800_NS:       eink_data[1] |= 0x04; break;
    3ce2:	2004      	movs	r0, #4
    3ce4:	4303      	orrs	r3, r0
    3ce6:	a804      	add	r0, sp, #16
    3ce8:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3cea:	2907      	cmp	r1, #7
    3cec:	d900      	bls.n	3cf0 <uc8151_set_config+0x32c>
    3cee:	e128      	b.n	3f42 <uc8151_set_config+0x57e>
    3cf0:	0089      	lsls	r1, r1, #2
    3cf2:	4b44      	ldr	r3, [pc, #272]	; (3e04 <uc8151_set_config+0x440>)
    3cf4:	585b      	ldr	r3, [r3, r1]
    3cf6:	469f      	mov	pc, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[1] |= 0x05; break;
    3cf8:	2005      	movs	r0, #5
    3cfa:	4303      	orrs	r3, r0
    3cfc:	a804      	add	r0, sp, #16
    3cfe:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d00:	2907      	cmp	r1, #7
    3d02:	d900      	bls.n	3d06 <uc8151_set_config+0x342>
    3d04:	e126      	b.n	3f54 <uc8151_set_config+0x590>
    3d06:	0089      	lsls	r1, r1, #2
    3d08:	4b3f      	ldr	r3, [pc, #252]	; (3e08 <uc8151_set_config+0x444>)
    3d0a:	585b      	ldr	r3, [r3, r1]
    3d0c:	469f      	mov	pc, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[1] |= 0x06; break;
    3d0e:	2006      	movs	r0, #6
    3d10:	4303      	orrs	r3, r0
    3d12:	a804      	add	r0, sp, #16
    3d14:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d16:	2907      	cmp	r1, #7
    3d18:	d900      	bls.n	3d1c <uc8151_set_config+0x358>
    3d1a:	e124      	b.n	3f66 <uc8151_set_config+0x5a2>
    3d1c:	0089      	lsls	r1, r1, #2
    3d1e:	4b3b      	ldr	r3, [pc, #236]	; (3e0c <uc8151_set_config+0x448>)
    3d20:	585b      	ldr	r3, [r3, r1]
    3d22:	469f      	mov	pc, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[1] |= 0x07; break;
    3d24:	2007      	movs	r0, #7
    3d26:	4303      	orrs	r3, r0
    3d28:	a804      	add	r0, sp, #16
    3d2a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d2c:	2907      	cmp	r1, #7
    3d2e:	d900      	bls.n	3d32 <uc8151_set_config+0x36e>
    3d30:	e122      	b.n	3f78 <uc8151_set_config+0x5b4>
    3d32:	0089      	lsls	r1, r1, #2
    3d34:	4b36      	ldr	r3, [pc, #216]	; (3e10 <uc8151_set_config+0x44c>)
    3d36:	585b      	ldr	r3, [r3, r1]
    3d38:	469f      	mov	pc, r3
    3d3a:	2907      	cmp	r1, #7
    3d3c:	d806      	bhi.n	3d4c <uc8151_set_config+0x388>
    3d3e:	0089      	lsls	r1, r1, #2
    3d40:	4b34      	ldr	r3, [pc, #208]	; (3e14 <uc8151_set_config+0x450>)
    3d42:	585b      	ldr	r3, [r3, r1]
    3d44:	469f      	mov	pc, r3
        case STRENGTH_1:                eink_data[2] = 0x00; break;
    3d46:	2100      	movs	r1, #0
    3d48:	ab04      	add	r3, sp, #16
    3d4a:	7099      	strb	r1, [r3, #2]
    eink_data[2] = eink_data[2] << 3;
    3d4c:	a904      	add	r1, sp, #16
    3d4e:	788b      	ldrb	r3, [r1, #2]
    3d50:	00db      	lsls	r3, r3, #3
    3d52:	b2db      	uxtb	r3, r3
    3d54:	708b      	strb	r3, [r1, #2]
    switch (config->booster_soft_start.a_min_off_time) {
    3d56:	2a07      	cmp	r2, #7
    3d58:	d900      	bls.n	3d5c <uc8151_set_config+0x398>
    3d5a:	e088      	b.n	3e6e <uc8151_set_config+0x4aa>
    3d5c:	0092      	lsls	r2, r2, #2
    3d5e:	492e      	ldr	r1, [pc, #184]	; (3e18 <uc8151_set_config+0x454>)
    3d60:	588a      	ldr	r2, [r1, r2]
    3d62:	4697      	mov	pc, r2
        case STRENGTH_2:                eink_data[2] = 0x01; break;
    3d64:	2101      	movs	r1, #1
    3d66:	ab04      	add	r3, sp, #16
    3d68:	7099      	strb	r1, [r3, #2]
    3d6a:	e7ef      	b.n	3d4c <uc8151_set_config+0x388>
        case STRENGTH_3:                eink_data[2] = 0x02; break;
    3d6c:	2102      	movs	r1, #2
    3d6e:	ab04      	add	r3, sp, #16
    3d70:	7099      	strb	r1, [r3, #2]
    3d72:	e7eb      	b.n	3d4c <uc8151_set_config+0x388>
        case STRENGTH_4:                eink_data[2] = 0x03; break;
    3d74:	2103      	movs	r1, #3
    3d76:	ab04      	add	r3, sp, #16
    3d78:	7099      	strb	r1, [r3, #2]
    3d7a:	e7e7      	b.n	3d4c <uc8151_set_config+0x388>
        case STRENGTH_5:                eink_data[2] = 0x04; break;
    3d7c:	2104      	movs	r1, #4
    3d7e:	ab04      	add	r3, sp, #16
    3d80:	7099      	strb	r1, [r3, #2]
    3d82:	e7e3      	b.n	3d4c <uc8151_set_config+0x388>
        case STRENGTH_6:                eink_data[2] = 0x05; break;
    3d84:	2105      	movs	r1, #5
    3d86:	ab04      	add	r3, sp, #16
    3d88:	7099      	strb	r1, [r3, #2]
    3d8a:	e7df      	b.n	3d4c <uc8151_set_config+0x388>
        case STRENGTH_7:                eink_data[2] = 0x06; break;
    3d8c:	2106      	movs	r1, #6
    3d8e:	ab04      	add	r3, sp, #16
    3d90:	7099      	strb	r1, [r3, #2]
    3d92:	e7db      	b.n	3d4c <uc8151_set_config+0x388>
        case STRENGTH_8:                eink_data[2] = 0x07; break;
    3d94:	2107      	movs	r1, #7
    3d96:	ab04      	add	r3, sp, #16
    3d98:	7099      	strb	r1, [r3, #2]
    3d9a:	e7d7      	b.n	3d4c <uc8151_set_config+0x388>
        case PFS_1_FRAME:               eink_data[0] = 0x00; break;
    3d9c:	2200      	movs	r2, #0
    3d9e:	ab04      	add	r3, sp, #16
    3da0:	701a      	strb	r2, [r3, #0]
    3da2:	e072      	b.n	3e8a <uc8151_set_config+0x4c6>
        case PFS_2_FRAMES:              eink_data[0] = 0x10; break;
    3da4:	2210      	movs	r2, #16
    3da6:	ab04      	add	r3, sp, #16
    3da8:	701a      	strb	r2, [r3, #0]
    3daa:	e06e      	b.n	3e8a <uc8151_set_config+0x4c6>
        case PFS_3_FRAMES:              eink_data[0] = 0x20; break;
    3dac:	2220      	movs	r2, #32
    3dae:	ab04      	add	r3, sp, #16
    3db0:	701a      	strb	r2, [r3, #0]
    3db2:	e06a      	b.n	3e8a <uc8151_set_config+0x4c6>
    3db4:	00001bc9 	.word	0x00001bc9
    3db8:	000043f1 	.word	0x000043f1
    3dbc:	00003849 	.word	0x00003849
    3dc0:	0000034d 	.word	0x0000034d
    3dc4:	0000035b 	.word	0x0000035b
    3dc8:	41004400 	.word	0x41004400
    3dcc:	00004578 	.word	0x00004578
    3dd0:	00004598 	.word	0x00004598
    3dd4:	000045b8 	.word	0x000045b8
    3dd8:	000045d8 	.word	0x000045d8
    3ddc:	000045f8 	.word	0x000045f8
    3de0:	00004618 	.word	0x00004618
    3de4:	00004638 	.word	0x00004638
    3de8:	00004658 	.word	0x00004658
    3dec:	00004678 	.word	0x00004678
    3df0:	00004698 	.word	0x00004698
    3df4:	000046b8 	.word	0x000046b8
    3df8:	000046d8 	.word	0x000046d8
    3dfc:	000046f8 	.word	0x000046f8
    3e00:	00004718 	.word	0x00004718
    3e04:	00004738 	.word	0x00004738
    3e08:	00004758 	.word	0x00004758
    3e0c:	00004778 	.word	0x00004778
    3e10:	00004798 	.word	0x00004798
    3e14:	000047b8 	.word	0x000047b8
    3e18:	000047d8 	.word	0x000047d8
        case PFS_4_FRAMES:              eink_data[0] = 0x30; break;
    3e1c:	2230      	movs	r2, #48	; 0x30
    3e1e:	ab04      	add	r3, sp, #16
    3e20:	701a      	strb	r2, [r3, #0]
    3e22:	e032      	b.n	3e8a <uc8151_set_config+0x4c6>
        case INTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x0; break;
    3e24:	2200      	movs	r2, #0
    3e26:	ab04      	add	r3, sp, #16
    3e28:	701a      	strb	r2, [r3, #0]
    3e2a:	e038      	b.n	3e9e <uc8151_set_config+0x4da>
        case EXTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x1; break;
    3e2c:	2201      	movs	r2, #1
    3e2e:	ab04      	add	r3, sp, #16
    3e30:	701a      	strb	r2, [r3, #0]
    3e32:	e034      	b.n	3e9e <uc8151_set_config+0x4da>
    } else if((config->temperature_sensor_settings.temperature_offset <= 7) && (config->temperature_sensor_settings.temperature_offset >= 0)) {
    3e34:	b2d1      	uxtb	r1, r2
    3e36:	2907      	cmp	r1, #7
    3e38:	d803      	bhi.n	3e42 <uc8151_set_config+0x47e>
        eink_data[0] |= config->temperature_sensor_settings.temperature_offset;
    3e3a:	4313      	orrs	r3, r2
    3e3c:	aa04      	add	r2, sp, #16
    3e3e:	7013      	strb	r3, [r2, #0]
    3e40:	e039      	b.n	3eb6 <uc8151_set_config+0x4f2>
    } else if(config->temperature_sensor_settings.temperature_offset < -8) {
    3e42:	0011      	movs	r1, r2
    3e44:	3108      	adds	r1, #8
    3e46:	da04      	bge.n	3e52 <uc8151_set_config+0x48e>
        eink_data[0] |= 0x8;
    3e48:	2208      	movs	r2, #8
    3e4a:	4313      	orrs	r3, r2
    3e4c:	aa04      	add	r2, sp, #16
    3e4e:	7013      	strb	r3, [r2, #0]
    3e50:	e031      	b.n	3eb6 <uc8151_set_config+0x4f2>
        eink_data[0] |= (config->temperature_sensor_settings.temperature_offset & 0x0F);
    3e52:	210f      	movs	r1, #15
    3e54:	400a      	ands	r2, r1
    3e56:	4313      	orrs	r3, r2
    3e58:	aa04      	add	r2, sp, #16
    3e5a:	7013      	strb	r3, [r2, #0]
    3e5c:	e02b      	b.n	3eb6 <uc8151_set_config+0x4f2>
    eink_data[2] = eink_data[2] << 3;
    3e5e:	ab04      	add	r3, sp, #16
    3e60:	789b      	ldrb	r3, [r3, #2]
    3e62:	00db      	lsls	r3, r3, #3
    3e64:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_340_NS:       eink_data[2] |= 0x01; break;
    3e66:	2201      	movs	r2, #1
    3e68:	4313      	orrs	r3, r2
    3e6a:	aa04      	add	r2, sp, #16
    3e6c:	7093      	strb	r3, [r2, #2]
    eink_write_data(UC8151_BTST, eink_data, 3);
    3e6e:	2203      	movs	r2, #3
    3e70:	a904      	add	r1, sp, #16
    3e72:	2006      	movs	r0, #6
    3e74:	4b45      	ldr	r3, [pc, #276]	; (3f8c <uc8151_set_config+0x5c8>)
    3e76:	4798      	blx	r3
    switch (config->power_off_sequence) {
    3e78:	7d23      	ldrb	r3, [r4, #20]
    3e7a:	2b01      	cmp	r3, #1
    3e7c:	d092      	beq.n	3da4 <uc8151_set_config+0x3e0>
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d08c      	beq.n	3d9c <uc8151_set_config+0x3d8>
    3e82:	2b02      	cmp	r3, #2
    3e84:	d092      	beq.n	3dac <uc8151_set_config+0x3e8>
    3e86:	2b03      	cmp	r3, #3
    3e88:	d0c8      	beq.n	3e1c <uc8151_set_config+0x458>
    eink_write_data(UC8151_PFS, eink_data, 1);
    3e8a:	2201      	movs	r2, #1
    3e8c:	a904      	add	r1, sp, #16
    3e8e:	2003      	movs	r0, #3
    3e90:	4b3e      	ldr	r3, [pc, #248]	; (3f8c <uc8151_set_config+0x5c8>)
    3e92:	4798      	blx	r3
    switch (config->temperature_sensor_settings.sensor_select) {
    3e94:	7d63      	ldrb	r3, [r4, #21]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d0c4      	beq.n	3e24 <uc8151_set_config+0x460>
    3e9a:	2b01      	cmp	r3, #1
    3e9c:	d0c6      	beq.n	3e2c <uc8151_set_config+0x468>
    eink_data[0] = eink_data[0] << 4;
    3e9e:	ab04      	add	r3, sp, #16
    3ea0:	781b      	ldrb	r3, [r3, #0]
    3ea2:	011b      	lsls	r3, r3, #4
    3ea4:	b2db      	uxtb	r3, r3
    if (config->temperature_sensor_settings.temperature_offset > 7) {
    3ea6:	2216      	movs	r2, #22
    3ea8:	56a2      	ldrsb	r2, [r4, r2]
    3eaa:	2a07      	cmp	r2, #7
    3eac:	ddc2      	ble.n	3e34 <uc8151_set_config+0x470>
        eink_data[0] |= 0x7;
    3eae:	2207      	movs	r2, #7
    3eb0:	4313      	orrs	r3, r2
    3eb2:	aa04      	add	r2, sp, #16
    3eb4:	7013      	strb	r3, [r2, #0]
    eink_write_data(UC8151_TSE, eink_data, 1);
    3eb6:	ad04      	add	r5, sp, #16
    3eb8:	2201      	movs	r2, #1
    3eba:	0029      	movs	r1, r5
    3ebc:	2041      	movs	r0, #65	; 0x41
    3ebe:	4c33      	ldr	r4, [pc, #204]	; (3f8c <uc8151_set_config+0x5c8>)
    3ec0:	47a0      	blx	r4
    eink_data[0] = 0x77;
    3ec2:	2377      	movs	r3, #119	; 0x77
    3ec4:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3ec6:	2201      	movs	r2, #1
    3ec8:	0029      	movs	r1, r5
    3eca:	2050      	movs	r0, #80	; 0x50
    3ecc:	47a0      	blx	r4
    eink_data[0] = 0x22;
    3ece:	2322      	movs	r3, #34	; 0x22
    3ed0:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_TCON, eink_data, 1);
    3ed2:	2201      	movs	r2, #1
    3ed4:	0029      	movs	r1, r5
    3ed6:	2060      	movs	r0, #96	; 0x60
    3ed8:	47a0      	blx	r4
    eink_data[0] = 0x3C;
    3eda:	233c      	movs	r3, #60	; 0x3c
    3edc:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3ede:	2201      	movs	r2, #1
    3ee0:	0029      	movs	r1, r5
    3ee2:	2050      	movs	r0, #80	; 0x50
    3ee4:	47a0      	blx	r4
    eink_write_data(UC8151_POF, 0, 0);
    3ee6:	2200      	movs	r2, #0
    3ee8:	2100      	movs	r1, #0
    3eea:	2002      	movs	r0, #2
    3eec:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    3eee:	4f28      	ldr	r7, [pc, #160]	; (3f90 <uc8151_set_config+0x5cc>)
	CRITICAL_SECTION_LEAVE();
    3ef0:	4e28      	ldr	r6, [pc, #160]	; (3f94 <uc8151_set_config+0x5d0>)
	CRITICAL_SECTION_ENTER();
    3ef2:	a801      	add	r0, sp, #4
    3ef4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3ef6:	23c0      	movs	r3, #192	; 0xc0
    3ef8:	05db      	lsls	r3, r3, #23
    3efa:	2580      	movs	r5, #128	; 0x80
    3efc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3efe:	22a0      	movs	r2, #160	; 0xa0
    3f00:	4925      	ldr	r1, [pc, #148]	; (3f98 <uc8151_set_config+0x5d4>)
    3f02:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3f04:	2190      	movs	r1, #144	; 0x90
    3f06:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3f08:	4053      	eors	r3, r2
    3f0a:	401c      	ands	r4, r3
    3f0c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3f0e:	a801      	add	r0, sp, #4
    3f10:	47b0      	blx	r6
    3f12:	4225      	tst	r5, r4
    3f14:	d0ed      	beq.n	3ef2 <uc8151_set_config+0x52e>
}
    3f16:	b006      	add	sp, #24
    3f18:	bc04      	pop	{r2}
    3f1a:	4690      	mov	r8, r2
    3f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_data[2] = eink_data[2] << 3;
    3f1e:	ab04      	add	r3, sp, #16
    3f20:	789b      	ldrb	r3, [r3, #2]
    3f22:	00db      	lsls	r3, r3, #3
    3f24:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_400_NS:       eink_data[2] |= 0x02; break;
    3f26:	2202      	movs	r2, #2
    3f28:	4313      	orrs	r3, r2
    3f2a:	aa04      	add	r2, sp, #16
    3f2c:	7093      	strb	r3, [r2, #2]
    3f2e:	e79e      	b.n	3e6e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f30:	ab04      	add	r3, sp, #16
    3f32:	789b      	ldrb	r3, [r3, #2]
    3f34:	00db      	lsls	r3, r3, #3
    3f36:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_540_NS:       eink_data[2] |= 0x03; break;
    3f38:	2203      	movs	r2, #3
    3f3a:	4313      	orrs	r3, r2
    3f3c:	aa04      	add	r2, sp, #16
    3f3e:	7093      	strb	r3, [r2, #2]
    3f40:	e795      	b.n	3e6e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f42:	ab04      	add	r3, sp, #16
    3f44:	789b      	ldrb	r3, [r3, #2]
    3f46:	00db      	lsls	r3, r3, #3
    3f48:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_800_NS:       eink_data[2] |= 0x04; break;
    3f4a:	2204      	movs	r2, #4
    3f4c:	4313      	orrs	r3, r2
    3f4e:	aa04      	add	r2, sp, #16
    3f50:	7093      	strb	r3, [r2, #2]
    3f52:	e78c      	b.n	3e6e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f54:	ab04      	add	r3, sp, #16
    3f56:	789b      	ldrb	r3, [r3, #2]
    3f58:	00db      	lsls	r3, r3, #3
    3f5a:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[2] |= 0x05; break;
    3f5c:	2205      	movs	r2, #5
    3f5e:	4313      	orrs	r3, r2
    3f60:	aa04      	add	r2, sp, #16
    3f62:	7093      	strb	r3, [r2, #2]
    3f64:	e783      	b.n	3e6e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f66:	ab04      	add	r3, sp, #16
    3f68:	789b      	ldrb	r3, [r3, #2]
    3f6a:	00db      	lsls	r3, r3, #3
    3f6c:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[2] |= 0x06; break;
    3f6e:	2206      	movs	r2, #6
    3f70:	4313      	orrs	r3, r2
    3f72:	aa04      	add	r2, sp, #16
    3f74:	7093      	strb	r3, [r2, #2]
    3f76:	e77a      	b.n	3e6e <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3f78:	ab04      	add	r3, sp, #16
    3f7a:	789b      	ldrb	r3, [r3, #2]
    3f7c:	00db      	lsls	r3, r3, #3
    3f7e:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[2] |= 0x07; break;
    3f80:	2207      	movs	r2, #7
    3f82:	4313      	orrs	r3, r2
    3f84:	aa04      	add	r2, sp, #16
    3f86:	7093      	strb	r3, [r2, #2]
    3f88:	e771      	b.n	3e6e <uc8151_set_config+0x4aa>
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	00001bc9 	.word	0x00001bc9
    3f90:	0000034d 	.word	0x0000034d
    3f94:	0000035b 	.word	0x0000035b
    3f98:	41004400 	.word	0x41004400

00003f9c <gfx_eink_graphics_fill_screen_raw>:
 * \brief Fill display buffers with a single color
 *
 * \param fill_value The pixel value to fill the display buffer with.
 */
void gfx_eink_graphics_fill_screen_raw(uint8_t fill_value)
{
    3f9c:	b510      	push	{r4, lr}
    3f9e:	0001      	movs	r1, r0
    /* Fill entire display buffer. */
    memset(ptr_eink_gfx_config->display_buffer_1_ptr, fill_value, ptr_eink_gfx_config->display_buffer_size);
    3fa0:	4b03      	ldr	r3, [pc, #12]	; (3fb0 <gfx_eink_graphics_fill_screen_raw+0x14>)
    3fa2:	681b      	ldr	r3, [r3, #0]
    3fa4:	689a      	ldr	r2, [r3, #8]
    3fa6:	6918      	ldr	r0, [r3, #16]
    3fa8:	4b02      	ldr	r3, [pc, #8]	; (3fb4 <gfx_eink_graphics_fill_screen_raw+0x18>)
    3faa:	4798      	blx	r3
}
    3fac:	bd10      	pop	{r4, pc}
    3fae:	46c0      	nop			; (mov r8, r8)
    3fb0:	20000430 	.word	0x20000430
    3fb4:	00004403 	.word	0x00004403

00003fb8 <gfx_eink_graphics_fill_screen>:
 * \param fill_type Selects the color to fill the display buffer with.
 * 
 * \note Selecting FILL_NONE as the color will be ignored.
 */
void gfx_eink_graphics_fill_screen(enum eink_fill_colour fill_color)
{
    3fb8:	b530      	push	{r4, r5, lr}
    3fba:	b083      	sub	sp, #12
    3fbc:	0004      	movs	r4, r0
    volatile eink_coordinate dx, width_fill;
    volatile eink_coordinate dy, height_fill;
    
    width_fill = ptr_eink_gfx_config->display_width;
    3fbe:	4b68      	ldr	r3, [pc, #416]	; (4160 <gfx_eink_graphics_fill_screen+0x1a8>)
    3fc0:	681b      	ldr	r3, [r3, #0]
    3fc2:	8859      	ldrh	r1, [r3, #2]
    3fc4:	aa01      	add	r2, sp, #4
    3fc6:	8011      	strh	r1, [r2, #0]
    height_fill = ptr_eink_gfx_config->display_height;
    3fc8:	889b      	ldrh	r3, [r3, #4]
    3fca:	4669      	mov	r1, sp
    3fcc:	800b      	strh	r3, [r1, #0]
    
    for(dx = 0; dx < width_fill; dx++) {
    3fce:	466b      	mov	r3, sp
    3fd0:	2100      	movs	r1, #0
    3fd2:	80d9      	strh	r1, [r3, #6]
    3fd4:	3306      	adds	r3, #6
    3fd6:	881b      	ldrh	r3, [r3, #0]
    3fd8:	8812      	ldrh	r2, [r2, #0]
    3fda:	b29b      	uxth	r3, r3
    3fdc:	4293      	cmp	r3, r2
    3fde:	d300      	bcc.n	3fe2 <gfx_eink_graphics_fill_screen+0x2a>
    3fe0:	e0bb      	b.n	415a <gfx_eink_graphics_fill_screen+0x1a2>
        for(dy = 0; dy < height_fill; dy++) {
            if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
            {
                switch (fill_color) {
    3fe2:	0085      	lsls	r5, r0, #2
    3fe4:	4b5f      	ldr	r3, [pc, #380]	; (4164 <gfx_eink_graphics_fill_screen+0x1ac>)
    3fe6:	469c      	mov	ip, r3
    3fe8:	4465      	add	r5, ip
    3fea:	e0ab      	b.n	4144 <gfx_eink_graphics_fill_screen+0x18c>
    3fec:	2c07      	cmp	r4, #7
    3fee:	d85a      	bhi.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
    3ff0:	682b      	ldr	r3, [r5, #0]
    3ff2:	469f      	mov	pc, r3
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    3ff4:	466b      	mov	r3, sp
    3ff6:	88d8      	ldrh	r0, [r3, #6]
    3ff8:	b280      	uxth	r0, r0
    3ffa:	466b      	mov	r3, sp
    3ffc:	8859      	ldrh	r1, [r3, #2]
    3ffe:	b289      	uxth	r1, r1
    4000:	2200      	movs	r2, #0
    4002:	4b59      	ldr	r3, [pc, #356]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    4004:	4798      	blx	r3
    4006:	e04e      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    4008:	466b      	mov	r3, sp
    400a:	88d8      	ldrh	r0, [r3, #6]
    400c:	b280      	uxth	r0, r0
    400e:	466b      	mov	r3, sp
    4010:	8859      	ldrh	r1, [r3, #2]
    4012:	b289      	uxth	r1, r1
    4014:	2201      	movs	r2, #1
    4016:	4b54      	ldr	r3, [pc, #336]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    4018:	4798      	blx	r3
    401a:	e044      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_YELLOW: gfx_eink_set_pixel(dx, dy, PIXEL_YELLOW); break;
    401c:	466b      	mov	r3, sp
    401e:	88d8      	ldrh	r0, [r3, #6]
    4020:	b280      	uxth	r0, r0
    4022:	466b      	mov	r3, sp
    4024:	8859      	ldrh	r1, [r3, #2]
    4026:	b289      	uxth	r1, r1
    4028:	2203      	movs	r2, #3
    402a:	4b4f      	ldr	r3, [pc, #316]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    402c:	4798      	blx	r3
    402e:	e03a      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    4030:	466b      	mov	r3, sp
    4032:	88d8      	ldrh	r0, [r3, #6]
    4034:	b280      	uxth	r0, r0
    4036:	466b      	mov	r3, sp
    4038:	8859      	ldrh	r1, [r3, #2]
    403a:	b289      	uxth	r1, r1
    403c:	2202      	movs	r2, #2
    403e:	4b4a      	ldr	r3, [pc, #296]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    4040:	4798      	blx	r3
    4042:	e030      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_GREEN:  gfx_eink_set_pixel(dx, dy, PIXEL_GREEN); break;
    4044:	466b      	mov	r3, sp
    4046:	88d8      	ldrh	r0, [r3, #6]
    4048:	b280      	uxth	r0, r0
    404a:	466b      	mov	r3, sp
    404c:	8859      	ldrh	r1, [r3, #2]
    404e:	b289      	uxth	r1, r1
    4050:	2204      	movs	r2, #4
    4052:	4b45      	ldr	r3, [pc, #276]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    4054:	4798      	blx	r3
    4056:	e026      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_BLUE:   gfx_eink_set_pixel(dx, dy, PIXEL_BLUE); break;
    4058:	466b      	mov	r3, sp
    405a:	88d8      	ldrh	r0, [r3, #6]
    405c:	b280      	uxth	r0, r0
    405e:	466b      	mov	r3, sp
    4060:	8859      	ldrh	r1, [r3, #2]
    4062:	b289      	uxth	r1, r1
    4064:	2205      	movs	r2, #5
    4066:	4b40      	ldr	r3, [pc, #256]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    4068:	4798      	blx	r3
    406a:	e01c      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_ORANGE: gfx_eink_set_pixel(dx, dy, PIXEL_ORANGE); break;
    406c:	466b      	mov	r3, sp
    406e:	88d8      	ldrh	r0, [r3, #6]
    4070:	b280      	uxth	r0, r0
    4072:	466b      	mov	r3, sp
    4074:	8859      	ldrh	r1, [r3, #2]
    4076:	b289      	uxth	r1, r1
    4078:	2206      	movs	r2, #6
    407a:	4b3b      	ldr	r3, [pc, #236]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    407c:	4798      	blx	r3
    407e:	e012      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_CLEAN:  gfx_eink_set_pixel(dx, dy, PIXEL_CLEAN); break;
    4080:	466b      	mov	r3, sp
    4082:	88d8      	ldrh	r0, [r3, #6]
    4084:	b280      	uxth	r0, r0
    4086:	466b      	mov	r3, sp
    4088:	8859      	ldrh	r1, [r3, #2]
    408a:	b289      	uxth	r1, r1
    408c:	2207      	movs	r2, #7
    408e:	4b36      	ldr	r3, [pc, #216]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    4090:	4798      	blx	r3
    4092:	e008      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                }
            } else {
                switch (fill_color) {
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    4094:	466b      	mov	r3, sp
    4096:	88d8      	ldrh	r0, [r3, #6]
    4098:	b280      	uxth	r0, r0
    409a:	466b      	mov	r3, sp
    409c:	8859      	ldrh	r1, [r3, #2]
    409e:	b289      	uxth	r1, r1
    40a0:	2200      	movs	r2, #0
    40a2:	4b31      	ldr	r3, [pc, #196]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    40a4:	4798      	blx	r3
                    case FILL_YELLOW:
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
                }
            }
			
			if((dx == 239) && (dy == 239))
    40a6:	466b      	mov	r3, sp
    40a8:	3306      	adds	r3, #6
    40aa:	881b      	ldrh	r3, [r3, #0]
    40ac:	b29b      	uxth	r3, r3
    40ae:	2bef      	cmp	r3, #239	; 0xef
    40b0:	d02c      	beq.n	410c <gfx_eink_graphics_fill_screen+0x154>
        for(dy = 0; dy < height_fill; dy++) {
    40b2:	466b      	mov	r3, sp
    40b4:	1c9a      	adds	r2, r3, #2
    40b6:	885b      	ldrh	r3, [r3, #2]
    40b8:	3301      	adds	r3, #1
    40ba:	b29b      	uxth	r3, r3
    40bc:	8013      	strh	r3, [r2, #0]
    40be:	8813      	ldrh	r3, [r2, #0]
    40c0:	466a      	mov	r2, sp
    40c2:	8812      	ldrh	r2, [r2, #0]
    40c4:	b29b      	uxth	r3, r3
    40c6:	4293      	cmp	r3, r2
    40c8:	d230      	bcs.n	412c <gfx_eink_graphics_fill_screen+0x174>
            if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    40ca:	4b25      	ldr	r3, [pc, #148]	; (4160 <gfx_eink_graphics_fill_screen+0x1a8>)
    40cc:	681b      	ldr	r3, [r3, #0]
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	3b06      	subs	r3, #6
    40d2:	2b01      	cmp	r3, #1
    40d4:	d800      	bhi.n	40d8 <gfx_eink_graphics_fill_screen+0x120>
    40d6:	e789      	b.n	3fec <gfx_eink_graphics_fill_screen+0x34>
                switch (fill_color) {
    40d8:	2c01      	cmp	r4, #1
    40da:	d00d      	beq.n	40f8 <gfx_eink_graphics_fill_screen+0x140>
    40dc:	2c00      	cmp	r4, #0
    40de:	d0d9      	beq.n	4094 <gfx_eink_graphics_fill_screen+0xdc>
    40e0:	2c03      	cmp	r4, #3
    40e2:	d8e0      	bhi.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    40e4:	466b      	mov	r3, sp
    40e6:	88d8      	ldrh	r0, [r3, #6]
    40e8:	b280      	uxth	r0, r0
    40ea:	466b      	mov	r3, sp
    40ec:	8859      	ldrh	r1, [r3, #2]
    40ee:	b289      	uxth	r1, r1
    40f0:	2202      	movs	r2, #2
    40f2:	4b1d      	ldr	r3, [pc, #116]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    40f4:	4798      	blx	r3
    40f6:	e7d6      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    40f8:	466b      	mov	r3, sp
    40fa:	88d8      	ldrh	r0, [r3, #6]
    40fc:	b280      	uxth	r0, r0
    40fe:	466b      	mov	r3, sp
    4100:	8859      	ldrh	r1, [r3, #2]
    4102:	b289      	uxth	r1, r1
    4104:	2201      	movs	r2, #1
    4106:	4b18      	ldr	r3, [pc, #96]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    4108:	4798      	blx	r3
    410a:	e7cc      	b.n	40a6 <gfx_eink_graphics_fill_screen+0xee>
			if((dx == 239) && (dy == 239))
    410c:	466b      	mov	r3, sp
    410e:	3302      	adds	r3, #2
    4110:	881b      	ldrh	r3, [r3, #0]
    4112:	b29b      	uxth	r3, r3
    4114:	2bef      	cmp	r3, #239	; 0xef
    4116:	d1cc      	bne.n	40b2 <gfx_eink_graphics_fill_screen+0xfa>
			{
				 gfx_eink_set_pixel(dx, dy, PIXEL_WHITE);
    4118:	466b      	mov	r3, sp
    411a:	88d8      	ldrh	r0, [r3, #6]
    411c:	b280      	uxth	r0, r0
    411e:	466b      	mov	r3, sp
    4120:	8859      	ldrh	r1, [r3, #2]
    4122:	b289      	uxth	r1, r1
    4124:	2201      	movs	r2, #1
    4126:	4b10      	ldr	r3, [pc, #64]	; (4168 <gfx_eink_graphics_fill_screen+0x1b0>)
    4128:	4798      	blx	r3
    412a:	e7c2      	b.n	40b2 <gfx_eink_graphics_fill_screen+0xfa>
    for(dx = 0; dx < width_fill; dx++) {
    412c:	466b      	mov	r3, sp
    412e:	1d9a      	adds	r2, r3, #6
    4130:	88db      	ldrh	r3, [r3, #6]
    4132:	3301      	adds	r3, #1
    4134:	b29b      	uxth	r3, r3
    4136:	8013      	strh	r3, [r2, #0]
    4138:	8813      	ldrh	r3, [r2, #0]
    413a:	aa01      	add	r2, sp, #4
    413c:	8812      	ldrh	r2, [r2, #0]
    413e:	b29b      	uxth	r3, r3
    4140:	4293      	cmp	r3, r2
    4142:	d20a      	bcs.n	415a <gfx_eink_graphics_fill_screen+0x1a2>
        for(dy = 0; dy < height_fill; dy++) {
    4144:	466b      	mov	r3, sp
    4146:	2200      	movs	r2, #0
    4148:	805a      	strh	r2, [r3, #2]
    414a:	3302      	adds	r3, #2
    414c:	881b      	ldrh	r3, [r3, #0]
    414e:	466a      	mov	r2, sp
    4150:	8812      	ldrh	r2, [r2, #0]
    4152:	b29b      	uxth	r3, r3
    4154:	4293      	cmp	r3, r2
    4156:	d3b8      	bcc.n	40ca <gfx_eink_graphics_fill_screen+0x112>
    4158:	e7e8      	b.n	412c <gfx_eink_graphics_fill_screen+0x174>
			}
        }
    }
}
    415a:	b003      	add	sp, #12
    415c:	bd30      	pop	{r4, r5, pc}
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	20000430 	.word	0x20000430
    4164:	000047f8 	.word	0x000047f8
    4168:	00000585 	.word	0x00000585

0000416c <gfx_eink_graphics_draw_rect>:
 * \param fill_type Color of the rectangle fill.
 *
 * \note Both the border and the fill can be set to blank should you want a border-less or empty rectangle.
 */
void gfx_eink_graphics_draw_rect(eink_coordinate x0, eink_coordinate y0, eink_coordinate width, eink_coordinate height, enum eink_pixel_colour line_colour, enum eink_fill_colour fill_colour)
{
    416c:	b5f0      	push	{r4, r5, r6, r7, lr}
    416e:	46de      	mov	lr, fp
    4170:	4657      	mov	r7, sl
    4172:	464e      	mov	r6, r9
    4174:	4645      	mov	r5, r8
    4176:	b5e0      	push	{r5, r6, r7, lr}
    4178:	b085      	sub	sp, #20
    417a:	0007      	movs	r7, r0
    417c:	9001      	str	r0, [sp, #4]
    417e:	4688      	mov	r8, r1
    4180:	9203      	str	r2, [sp, #12]
    4182:	469b      	mov	fp, r3
    4184:	ab0e      	add	r3, sp, #56	; 0x38
    4186:	781e      	ldrb	r6, [r3, #0]
    4188:	ab0f      	add	r3, sp, #60	; 0x3c
    418a:	781c      	ldrb	r4, [r3, #0]
    eink_coordinate i, j;
    
    /* Draw rectangle borders first */
    for (i = x0; i < (x0+width); i++) {
    418c:	4691      	mov	r9, r2
    418e:	4684      	mov	ip, r0
    4190:	44e1      	add	r9, ip
    4192:	4548      	cmp	r0, r9
    4194:	da1b      	bge.n	41ce <gfx_eink_graphics_draw_rect+0x62>
        gfx_eink_set_pixel(i, y0, line_colour);
    4196:	4d5a      	ldr	r5, [pc, #360]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    4198:	465b      	mov	r3, fp
    419a:	3b01      	subs	r3, #1
    419c:	4443      	add	r3, r8
    419e:	b29b      	uxth	r3, r3
    41a0:	9302      	str	r3, [sp, #8]
    41a2:	9600      	str	r6, [sp, #0]
    41a4:	464e      	mov	r6, r9
    41a6:	0023      	movs	r3, r4
    41a8:	000c      	movs	r4, r1
    41aa:	4698      	mov	r8, r3
        gfx_eink_set_pixel(i, y0, line_colour);
    41ac:	9a00      	ldr	r2, [sp, #0]
    41ae:	0021      	movs	r1, r4
    41b0:	0038      	movs	r0, r7
    41b2:	47a8      	blx	r5
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    41b4:	9a00      	ldr	r2, [sp, #0]
    41b6:	9902      	ldr	r1, [sp, #8]
    41b8:	0038      	movs	r0, r7
    41ba:	47a8      	blx	r5
    for (i = x0; i < (x0+width); i++) {
    41bc:	3701      	adds	r7, #1
    41be:	b2bf      	uxth	r7, r7
    41c0:	42b7      	cmp	r7, r6
    41c2:	dbf3      	blt.n	41ac <gfx_eink_graphics_draw_rect+0x40>
    41c4:	46b1      	mov	r9, r6
    41c6:	9e00      	ldr	r6, [sp, #0]
    41c8:	4643      	mov	r3, r8
    41ca:	46a0      	mov	r8, r4
    41cc:	001c      	movs	r4, r3
    }
    for (i = y0; i < (y0+height); i++) {
    41ce:	46da      	mov	sl, fp
    41d0:	44c2      	add	sl, r8
    41d2:	45d0      	cmp	r8, sl
    41d4:	da1a      	bge.n	420c <gfx_eink_graphics_draw_rect+0xa0>
    41d6:	4645      	mov	r5, r8
        gfx_eink_set_pixel(x0, i, line_colour);
    41d8:	4f49      	ldr	r7, [pc, #292]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    41da:	9b03      	ldr	r3, [sp, #12]
    41dc:	3b01      	subs	r3, #1
    41de:	9a01      	ldr	r2, [sp, #4]
    41e0:	4694      	mov	ip, r2
    41e2:	4463      	add	r3, ip
    41e4:	b29b      	uxth	r3, r3
    41e6:	9300      	str	r3, [sp, #0]
    41e8:	0023      	movs	r3, r4
    41ea:	4654      	mov	r4, sl
    41ec:	469a      	mov	sl, r3
        gfx_eink_set_pixel(x0, i, line_colour);
    41ee:	0032      	movs	r2, r6
    41f0:	0029      	movs	r1, r5
    41f2:	9801      	ldr	r0, [sp, #4]
    41f4:	47b8      	blx	r7
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    41f6:	0032      	movs	r2, r6
    41f8:	0029      	movs	r1, r5
    41fa:	9800      	ldr	r0, [sp, #0]
    41fc:	47b8      	blx	r7
    for (i = y0; i < (y0+height); i++) {
    41fe:	3501      	adds	r5, #1
    4200:	b2ad      	uxth	r5, r5
    4202:	42a5      	cmp	r5, r4
    4204:	dbf3      	blt.n	41ee <gfx_eink_graphics_draw_rect+0x82>
    4206:	4653      	mov	r3, sl
    4208:	46a2      	mov	sl, r4
    420a:	001c      	movs	r4, r3
    }
    
    /* Add a fill if necessary */
    if (fill_colour != FILL_NONE) {
    420c:	2c08      	cmp	r4, #8
    420e:	d06f      	beq.n	42f0 <gfx_eink_graphics_draw_rect+0x184>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    4210:	9d01      	ldr	r5, [sp, #4]
    4212:	3501      	adds	r5, #1
    4214:	b2ad      	uxth	r5, r5
    4216:	2301      	movs	r3, #1
    4218:	425b      	negs	r3, r3
    421a:	469c      	mov	ip, r3
    421c:	44e1      	add	r9, ip
    421e:	454d      	cmp	r5, r9
    4220:	da66      	bge.n	42f0 <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
                {
                    switch (fill_colour) {
    4222:	00a3      	lsls	r3, r4, #2
    4224:	4a37      	ldr	r2, [pc, #220]	; (4304 <gfx_eink_graphics_draw_rect+0x198>)
    4226:	4693      	mov	fp, r2
    4228:	449b      	add	fp, r3
    422a:	e059      	b.n	42e0 <gfx_eink_graphics_draw_rect+0x174>
    422c:	2c07      	cmp	r4, #7
    422e:	d837      	bhi.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
    4230:	465b      	mov	r3, fp
    4232:	681b      	ldr	r3, [r3, #0]
    4234:	469f      	mov	pc, r3
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    4236:	2200      	movs	r2, #0
    4238:	0031      	movs	r1, r6
    423a:	0028      	movs	r0, r5
    423c:	4b30      	ldr	r3, [pc, #192]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    423e:	4798      	blx	r3
    4240:	e02e      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    4242:	2201      	movs	r2, #1
    4244:	0031      	movs	r1, r6
    4246:	0028      	movs	r0, r5
    4248:	4b2d      	ldr	r3, [pc, #180]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    424a:	4798      	blx	r3
    424c:	e028      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_YELLOW: gfx_eink_set_pixel(i, j, PIXEL_YELLOW); break;
    424e:	2203      	movs	r2, #3
    4250:	0031      	movs	r1, r6
    4252:	0028      	movs	r0, r5
    4254:	4b2a      	ldr	r3, [pc, #168]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    4256:	4798      	blx	r3
    4258:	e022      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    425a:	2202      	movs	r2, #2
    425c:	0031      	movs	r1, r6
    425e:	0028      	movs	r0, r5
    4260:	4b27      	ldr	r3, [pc, #156]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    4262:	4798      	blx	r3
    4264:	e01c      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_GREEN:  gfx_eink_set_pixel(i, j, PIXEL_GREEN); break;
    4266:	2204      	movs	r2, #4
    4268:	0031      	movs	r1, r6
    426a:	0028      	movs	r0, r5
    426c:	4b24      	ldr	r3, [pc, #144]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    426e:	4798      	blx	r3
    4270:	e016      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_BLUE:   gfx_eink_set_pixel(i, j, PIXEL_BLUE); break;
    4272:	2205      	movs	r2, #5
    4274:	0031      	movs	r1, r6
    4276:	0028      	movs	r0, r5
    4278:	4b21      	ldr	r3, [pc, #132]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    427a:	4798      	blx	r3
    427c:	e010      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_ORANGE: gfx_eink_set_pixel(i, j, PIXEL_ORANGE); break;
    427e:	2206      	movs	r2, #6
    4280:	0031      	movs	r1, r6
    4282:	0028      	movs	r0, r5
    4284:	4b1e      	ldr	r3, [pc, #120]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    4286:	4798      	blx	r3
    4288:	e00a      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_CLEAN:  gfx_eink_set_pixel(i, j, PIXEL_CLEAN); break;
    428a:	2207      	movs	r2, #7
    428c:	0031      	movs	r1, r6
    428e:	0028      	movs	r0, r5
    4290:	4b1b      	ldr	r3, [pc, #108]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    4292:	4798      	blx	r3
    4294:	e004      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                    }
                } else {
                    switch (fill_colour) {
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    4296:	2200      	movs	r2, #0
    4298:	0031      	movs	r1, r6
    429a:	0028      	movs	r0, r5
    429c:	4b18      	ldr	r3, [pc, #96]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    429e:	4798      	blx	r3
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    42a0:	3601      	adds	r6, #1
    42a2:	b2b6      	uxth	r6, r6
    42a4:	42be      	cmp	r6, r7
    42a6:	da17      	bge.n	42d8 <gfx_eink_graphics_draw_rect+0x16c>
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    42a8:	4b17      	ldr	r3, [pc, #92]	; (4308 <gfx_eink_graphics_draw_rect+0x19c>)
    42aa:	681b      	ldr	r3, [r3, #0]
    42ac:	781b      	ldrb	r3, [r3, #0]
    42ae:	3b06      	subs	r3, #6
    42b0:	2b01      	cmp	r3, #1
    42b2:	d9bb      	bls.n	422c <gfx_eink_graphics_draw_rect+0xc0>
                    switch (fill_colour) {
    42b4:	2c01      	cmp	r4, #1
    42b6:	d009      	beq.n	42cc <gfx_eink_graphics_draw_rect+0x160>
    42b8:	2c00      	cmp	r4, #0
    42ba:	d0ec      	beq.n	4296 <gfx_eink_graphics_draw_rect+0x12a>
    42bc:	2c03      	cmp	r4, #3
    42be:	d8ef      	bhi.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
                        case FILL_YELLOW:
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    42c0:	2202      	movs	r2, #2
    42c2:	0031      	movs	r1, r6
    42c4:	0028      	movs	r0, r5
    42c6:	4b0e      	ldr	r3, [pc, #56]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    42c8:	4798      	blx	r3
    42ca:	e7e9      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    42cc:	2201      	movs	r2, #1
    42ce:	0031      	movs	r1, r6
    42d0:	0028      	movs	r0, r5
    42d2:	4b0b      	ldr	r3, [pc, #44]	; (4300 <gfx_eink_graphics_draw_rect+0x194>)
    42d4:	4798      	blx	r3
    42d6:	e7e3      	b.n	42a0 <gfx_eink_graphics_draw_rect+0x134>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    42d8:	3501      	adds	r5, #1
    42da:	b2ad      	uxth	r5, r5
    42dc:	454d      	cmp	r5, r9
    42de:	da07      	bge.n	42f0 <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    42e0:	4643      	mov	r3, r8
    42e2:	1c5e      	adds	r6, r3, #1
    42e4:	b2b6      	uxth	r6, r6
    42e6:	4653      	mov	r3, sl
    42e8:	1e5f      	subs	r7, r3, #1
    42ea:	42be      	cmp	r6, r7
    42ec:	dbdc      	blt.n	42a8 <gfx_eink_graphics_draw_rect+0x13c>
    42ee:	e7f3      	b.n	42d8 <gfx_eink_graphics_draw_rect+0x16c>
                    }
                }
            }
        }
    }
}
    42f0:	b005      	add	sp, #20
    42f2:	bc3c      	pop	{r2, r3, r4, r5}
    42f4:	4690      	mov	r8, r2
    42f6:	4699      	mov	r9, r3
    42f8:	46a2      	mov	sl, r4
    42fa:	46ab      	mov	fp, r5
    42fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	00000585 	.word	0x00000585
    4304:	00004818 	.word	0x00004818
    4308:	20000430 	.word	0x20000430

0000430c <eink_init_display>:
	//gfx_eink_text_write_string_raw("Hello World!", 30, 80, 0x1, ArvoBold_18pt);
	//gfx_eink_text_write_string_raw("Hello World!", 30, 110, 0x2, ArvoBold_18pt);
}

void eink_init_display(void)
{
    430c:	b500      	push	{lr}
    430e:	b083      	sub	sp, #12
    config->display_rotation = ROTATE_0;
    4310:	a801      	add	r0, sp, #4
    4312:	2300      	movs	r3, #0
    4314:	7003      	strb	r3, [r0, #0]
    config->update_mode = UPDATE_SLOW;
    4316:	7043      	strb	r3, [r0, #1]
    config->uc8173_display = UC8173_ED013TC1;
    4318:	7083      	strb	r3, [r0, #2]
    config->uc8173_current_lut = UC8173_LUT_NONE;
    431a:	3303      	adds	r3, #3
    431c:	70c3      	strb	r3, [r0, #3]
	struct uc8173_config eink_conf;
	
	uc8173_get_config_defaults(&eink_conf);
	eink_conf.display_rotation = ROTATE_0;
	eink_conf.update_mode = UPDATE_SLOW;
	eink_et011tt2_init(&eink_conf, false);
    431e:	2100      	movs	r1, #0
    4320:	4b01      	ldr	r3, [pc, #4]	; (4328 <eink_init_display+0x1c>)
    4322:	4798      	blx	r3
    4324:	b003      	add	sp, #12
    4326:	bd00      	pop	{pc}
    4328:	000036ad 	.word	0x000036ad

0000432c <main>:
{
    432c:	b510      	push	{r4, lr}
    432e:	b082      	sub	sp, #8
	system_init();
    4330:	4b10      	ldr	r3, [pc, #64]	; (4374 <main+0x48>)
    4332:	4798      	blx	r3
	eink_init_display();
    4334:	4b10      	ldr	r3, [pc, #64]	; (4378 <main+0x4c>)
    4336:	4798      	blx	r3
	gfx_eink_graphics_fill_screen_raw(0xFF);
    4338:	20ff      	movs	r0, #255	; 0xff
    433a:	4b10      	ldr	r3, [pc, #64]	; (437c <main+0x50>)
    433c:	4798      	blx	r3
	eink_et011tt2_graphics_load_2bgrey_image(eink_GSephElecLogo_2bGrey, sizeof(eink_GSephElecLogo_2bGrey), eink_GSephElecLogo_2bGrey_width_px, eink_GSephElecLogo_2bGrey_height_bytes, 40, 68);
    433e:	2344      	movs	r3, #68	; 0x44
    4340:	9301      	str	r3, [sp, #4]
    4342:	3b1c      	subs	r3, #28
    4344:	9300      	str	r3, [sp, #0]
    4346:	3b0e      	subs	r3, #14
    4348:	22a0      	movs	r2, #160	; 0xa0
    434a:	490d      	ldr	r1, [pc, #52]	; (4380 <main+0x54>)
    434c:	480d      	ldr	r0, [pc, #52]	; (4384 <main+0x58>)
    434e:	301c      	adds	r0, #28
    4350:	4c0d      	ldr	r4, [pc, #52]	; (4388 <main+0x5c>)
    4352:	47a0      	blx	r4
	uc8173_global_instance.display_config.update_mode = UPDATE_SLOW;
    4354:	2200      	movs	r2, #0
    4356:	4b0d      	ldr	r3, [pc, #52]	; (438c <main+0x60>)
    4358:	705a      	strb	r2, [r3, #1]
    ptr_eink_gfx_config->put_display_buffer(refresh_display);
    435a:	4b0d      	ldr	r3, [pc, #52]	; (4390 <main+0x64>)
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4360:	2001      	movs	r0, #1
    4362:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4364:	2180      	movs	r1, #128	; 0x80
    4366:	05c9      	lsls	r1, r1, #23
    4368:	2398      	movs	r3, #152	; 0x98
    436a:	22c0      	movs	r2, #192	; 0xc0
    436c:	05d2      	lsls	r2, r2, #23
    436e:	50d1      	str	r1, [r2, r3]
    4370:	e7fe      	b.n	4370 <main+0x44>
    4372:	46c0      	nop			; (mov r8, r8)
    4374:	00000211 	.word	0x00000211
    4378:	0000430d 	.word	0x0000430d
    437c:	00003f9d 	.word	0x00003f9d
    4380:	0000103b 	.word	0x0000103b
    4384:	000059b8 	.word	0x000059b8
    4388:	00003779 	.word	0x00003779
    438c:	20000390 	.word	0x20000390
    4390:	20000430 	.word	0x20000430

00004394 <__libc_init_array>:
    4394:	b570      	push	{r4, r5, r6, lr}
    4396:	2600      	movs	r6, #0
    4398:	4d0c      	ldr	r5, [pc, #48]	; (43cc <__libc_init_array+0x38>)
    439a:	4c0d      	ldr	r4, [pc, #52]	; (43d0 <__libc_init_array+0x3c>)
    439c:	1b64      	subs	r4, r4, r5
    439e:	10a4      	asrs	r4, r4, #2
    43a0:	42a6      	cmp	r6, r4
    43a2:	d109      	bne.n	43b8 <__libc_init_array+0x24>
    43a4:	2600      	movs	r6, #0
    43a6:	f017 f9fb 	bl	1b7a0 <_init>
    43aa:	4d0a      	ldr	r5, [pc, #40]	; (43d4 <__libc_init_array+0x40>)
    43ac:	4c0a      	ldr	r4, [pc, #40]	; (43d8 <__libc_init_array+0x44>)
    43ae:	1b64      	subs	r4, r4, r5
    43b0:	10a4      	asrs	r4, r4, #2
    43b2:	42a6      	cmp	r6, r4
    43b4:	d105      	bne.n	43c2 <__libc_init_array+0x2e>
    43b6:	bd70      	pop	{r4, r5, r6, pc}
    43b8:	00b3      	lsls	r3, r6, #2
    43ba:	58eb      	ldr	r3, [r5, r3]
    43bc:	4798      	blx	r3
    43be:	3601      	adds	r6, #1
    43c0:	e7ee      	b.n	43a0 <__libc_init_array+0xc>
    43c2:	00b3      	lsls	r3, r6, #2
    43c4:	58eb      	ldr	r3, [r5, r3]
    43c6:	4798      	blx	r3
    43c8:	3601      	adds	r6, #1
    43ca:	e7f2      	b.n	43b2 <__libc_init_array+0x1e>
    43cc:	0001b7ac 	.word	0x0001b7ac
    43d0:	0001b7ac 	.word	0x0001b7ac
    43d4:	0001b7ac 	.word	0x0001b7ac
    43d8:	0001b7b0 	.word	0x0001b7b0

000043dc <malloc>:
    43dc:	b510      	push	{r4, lr}
    43de:	4b03      	ldr	r3, [pc, #12]	; (43ec <malloc+0x10>)
    43e0:	0001      	movs	r1, r0
    43e2:	6818      	ldr	r0, [r3, #0]
    43e4:	f000 f816 	bl	4414 <_malloc_r>
    43e8:	bd10      	pop	{r4, pc}
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	200002f4 	.word	0x200002f4

000043f0 <memcpy>:
    43f0:	2300      	movs	r3, #0
    43f2:	b510      	push	{r4, lr}
    43f4:	429a      	cmp	r2, r3
    43f6:	d100      	bne.n	43fa <memcpy+0xa>
    43f8:	bd10      	pop	{r4, pc}
    43fa:	5ccc      	ldrb	r4, [r1, r3]
    43fc:	54c4      	strb	r4, [r0, r3]
    43fe:	3301      	adds	r3, #1
    4400:	e7f8      	b.n	43f4 <memcpy+0x4>

00004402 <memset>:
    4402:	0003      	movs	r3, r0
    4404:	1882      	adds	r2, r0, r2
    4406:	4293      	cmp	r3, r2
    4408:	d100      	bne.n	440c <memset+0xa>
    440a:	4770      	bx	lr
    440c:	7019      	strb	r1, [r3, #0]
    440e:	3301      	adds	r3, #1
    4410:	e7f9      	b.n	4406 <memset+0x4>
	...

00004414 <_malloc_r>:
    4414:	2303      	movs	r3, #3
    4416:	b570      	push	{r4, r5, r6, lr}
    4418:	1ccd      	adds	r5, r1, #3
    441a:	439d      	bics	r5, r3
    441c:	3508      	adds	r5, #8
    441e:	0006      	movs	r6, r0
    4420:	2d0c      	cmp	r5, #12
    4422:	d21e      	bcs.n	4462 <_malloc_r+0x4e>
    4424:	250c      	movs	r5, #12
    4426:	42a9      	cmp	r1, r5
    4428:	d81d      	bhi.n	4466 <_malloc_r+0x52>
    442a:	0030      	movs	r0, r6
    442c:	f000 f862 	bl	44f4 <__malloc_lock>
    4430:	4a25      	ldr	r2, [pc, #148]	; (44c8 <_malloc_r+0xb4>)
    4432:	6814      	ldr	r4, [r2, #0]
    4434:	0021      	movs	r1, r4
    4436:	2900      	cmp	r1, #0
    4438:	d119      	bne.n	446e <_malloc_r+0x5a>
    443a:	4c24      	ldr	r4, [pc, #144]	; (44cc <_malloc_r+0xb8>)
    443c:	6823      	ldr	r3, [r4, #0]
    443e:	2b00      	cmp	r3, #0
    4440:	d103      	bne.n	444a <_malloc_r+0x36>
    4442:	0030      	movs	r0, r6
    4444:	f000 f844 	bl	44d0 <_sbrk_r>
    4448:	6020      	str	r0, [r4, #0]
    444a:	0029      	movs	r1, r5
    444c:	0030      	movs	r0, r6
    444e:	f000 f83f 	bl	44d0 <_sbrk_r>
    4452:	1c43      	adds	r3, r0, #1
    4454:	d12c      	bne.n	44b0 <_malloc_r+0x9c>
    4456:	230c      	movs	r3, #12
    4458:	0030      	movs	r0, r6
    445a:	6033      	str	r3, [r6, #0]
    445c:	f000 f84b 	bl	44f6 <__malloc_unlock>
    4460:	e003      	b.n	446a <_malloc_r+0x56>
    4462:	2d00      	cmp	r5, #0
    4464:	dadf      	bge.n	4426 <_malloc_r+0x12>
    4466:	230c      	movs	r3, #12
    4468:	6033      	str	r3, [r6, #0]
    446a:	2000      	movs	r0, #0
    446c:	bd70      	pop	{r4, r5, r6, pc}
    446e:	680b      	ldr	r3, [r1, #0]
    4470:	1b5b      	subs	r3, r3, r5
    4472:	d41a      	bmi.n	44aa <_malloc_r+0x96>
    4474:	2b0b      	cmp	r3, #11
    4476:	d903      	bls.n	4480 <_malloc_r+0x6c>
    4478:	600b      	str	r3, [r1, #0]
    447a:	18cc      	adds	r4, r1, r3
    447c:	6025      	str	r5, [r4, #0]
    447e:	e003      	b.n	4488 <_malloc_r+0x74>
    4480:	428c      	cmp	r4, r1
    4482:	d10e      	bne.n	44a2 <_malloc_r+0x8e>
    4484:	6863      	ldr	r3, [r4, #4]
    4486:	6013      	str	r3, [r2, #0]
    4488:	0030      	movs	r0, r6
    448a:	f000 f834 	bl	44f6 <__malloc_unlock>
    448e:	0020      	movs	r0, r4
    4490:	2207      	movs	r2, #7
    4492:	300b      	adds	r0, #11
    4494:	1d23      	adds	r3, r4, #4
    4496:	4390      	bics	r0, r2
    4498:	1ac3      	subs	r3, r0, r3
    449a:	d0e7      	beq.n	446c <_malloc_r+0x58>
    449c:	425a      	negs	r2, r3
    449e:	50e2      	str	r2, [r4, r3]
    44a0:	e7e4      	b.n	446c <_malloc_r+0x58>
    44a2:	684b      	ldr	r3, [r1, #4]
    44a4:	6063      	str	r3, [r4, #4]
    44a6:	000c      	movs	r4, r1
    44a8:	e7ee      	b.n	4488 <_malloc_r+0x74>
    44aa:	000c      	movs	r4, r1
    44ac:	6849      	ldr	r1, [r1, #4]
    44ae:	e7c2      	b.n	4436 <_malloc_r+0x22>
    44b0:	2303      	movs	r3, #3
    44b2:	1cc4      	adds	r4, r0, #3
    44b4:	439c      	bics	r4, r3
    44b6:	42a0      	cmp	r0, r4
    44b8:	d0e0      	beq.n	447c <_malloc_r+0x68>
    44ba:	1a21      	subs	r1, r4, r0
    44bc:	0030      	movs	r0, r6
    44be:	f000 f807 	bl	44d0 <_sbrk_r>
    44c2:	1c43      	adds	r3, r0, #1
    44c4:	d1da      	bne.n	447c <_malloc_r+0x68>
    44c6:	e7c6      	b.n	4456 <_malloc_r+0x42>
    44c8:	2000037c 	.word	0x2000037c
    44cc:	20000380 	.word	0x20000380

000044d0 <_sbrk_r>:
    44d0:	2300      	movs	r3, #0
    44d2:	b570      	push	{r4, r5, r6, lr}
    44d4:	4c06      	ldr	r4, [pc, #24]	; (44f0 <_sbrk_r+0x20>)
    44d6:	0005      	movs	r5, r0
    44d8:	0008      	movs	r0, r1
    44da:	6023      	str	r3, [r4, #0]
    44dc:	f7fb ff5e 	bl	39c <_sbrk>
    44e0:	1c43      	adds	r3, r0, #1
    44e2:	d103      	bne.n	44ec <_sbrk_r+0x1c>
    44e4:	6823      	ldr	r3, [r4, #0]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d000      	beq.n	44ec <_sbrk_r+0x1c>
    44ea:	602b      	str	r3, [r5, #0]
    44ec:	bd70      	pop	{r4, r5, r6, pc}
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	20000434 	.word	0x20000434

000044f4 <__malloc_lock>:
    44f4:	4770      	bx	lr

000044f6 <__malloc_unlock>:
    44f6:	4770      	bx	lr
    44f8:	0000128a 	.word	0x0000128a
    44fc:	000012b8 	.word	0x000012b8
    4500:	00001342 	.word	0x00001342
    4504:	00001370 	.word	0x00001370
    4508:	000012e6 	.word	0x000012e6
    450c:	00001314 	.word	0x00001314
    4510:	0000139e 	.word	0x0000139e
    4514:	000013cc 	.word	0x000013cc
    4518:	00001408 	.word	0x00001408
    451c:	00001436 	.word	0x00001436
    4520:	000014c0 	.word	0x000014c0
    4524:	000014ee 	.word	0x000014ee
    4528:	00001464 	.word	0x00001464
    452c:	00001492 	.word	0x00001492
    4530:	0000151c 	.word	0x0000151c
    4534:	0000154a 	.word	0x0000154a
    4538:	000015de 	.word	0x000015de
    453c:	0000160c 	.word	0x0000160c
    4540:	00001696 	.word	0x00001696
    4544:	000016c4 	.word	0x000016c4
    4548:	0000163a 	.word	0x0000163a
    454c:	00001668 	.word	0x00001668
    4550:	000016f2 	.word	0x000016f2
    4554:	00001720 	.word	0x00001720
    4558:	0000175c 	.word	0x0000175c
    455c:	0000178a 	.word	0x0000178a
    4560:	00001814 	.word	0x00001814
    4564:	00001842 	.word	0x00001842
    4568:	000017b8 	.word	0x000017b8
    456c:	000017e6 	.word	0x000017e6
    4570:	00001870 	.word	0x00001870
    4574:	0000189e 	.word	0x0000189e
    4578:	00003afc 	.word	0x00003afc
    457c:	00003af4 	.word	0x00003af4
    4580:	00003b14 	.word	0x00003b14
    4584:	00003b1e 	.word	0x00003b1e
    4588:	00003b28 	.word	0x00003b28
    458c:	00003b32 	.word	0x00003b32
    4590:	00003b3c 	.word	0x00003b3c
    4594:	00003b46 	.word	0x00003b46
    4598:	00003b58 	.word	0x00003b58
    459c:	00003b50 	.word	0x00003b50
    45a0:	00003b7a 	.word	0x00003b7a
    45a4:	00003b84 	.word	0x00003b84
    45a8:	00003b8e 	.word	0x00003b8e
    45ac:	00003b98 	.word	0x00003b98
    45b0:	00003ba2 	.word	0x00003ba2
    45b4:	00003bac 	.word	0x00003bac
    45b8:	00003c8c 	.word	0x00003c8c
    45bc:	00003bd6 	.word	0x00003bd6
    45c0:	00003bf0 	.word	0x00003bf0
    45c4:	00003c0a 	.word	0x00003c0a
    45c8:	00003c24 	.word	0x00003c24
    45cc:	00003c3e 	.word	0x00003c3e
    45d0:	00003c58 	.word	0x00003c58
    45d4:	00003c72 	.word	0x00003c72
    45d8:	00003d64 	.word	0x00003d64
    45dc:	00003ca0 	.word	0x00003ca0
    45e0:	00003cb6 	.word	0x00003cb6
    45e4:	00003ccc 	.word	0x00003ccc
    45e8:	00003ce2 	.word	0x00003ce2
    45ec:	00003cf8 	.word	0x00003cf8
    45f0:	00003d0e 	.word	0x00003d0e
    45f4:	00003d24 	.word	0x00003d24
    45f8:	00003d6c 	.word	0x00003d6c
    45fc:	00003ca0 	.word	0x00003ca0
    4600:	00003cb6 	.word	0x00003cb6
    4604:	00003ccc 	.word	0x00003ccc
    4608:	00003ce2 	.word	0x00003ce2
    460c:	00003cf8 	.word	0x00003cf8
    4610:	00003d0e 	.word	0x00003d0e
    4614:	00003d24 	.word	0x00003d24
    4618:	00003d74 	.word	0x00003d74
    461c:	00003ca0 	.word	0x00003ca0
    4620:	00003cb6 	.word	0x00003cb6
    4624:	00003ccc 	.word	0x00003ccc
    4628:	00003ce2 	.word	0x00003ce2
    462c:	00003cf8 	.word	0x00003cf8
    4630:	00003d0e 	.word	0x00003d0e
    4634:	00003d24 	.word	0x00003d24
    4638:	00003d7c 	.word	0x00003d7c
    463c:	00003ca0 	.word	0x00003ca0
    4640:	00003cb6 	.word	0x00003cb6
    4644:	00003ccc 	.word	0x00003ccc
    4648:	00003ce2 	.word	0x00003ce2
    464c:	00003cf8 	.word	0x00003cf8
    4650:	00003d0e 	.word	0x00003d0e
    4654:	00003d24 	.word	0x00003d24
    4658:	00003d84 	.word	0x00003d84
    465c:	00003ca0 	.word	0x00003ca0
    4660:	00003cb6 	.word	0x00003cb6
    4664:	00003ccc 	.word	0x00003ccc
    4668:	00003ce2 	.word	0x00003ce2
    466c:	00003cf8 	.word	0x00003cf8
    4670:	00003d0e 	.word	0x00003d0e
    4674:	00003d24 	.word	0x00003d24
    4678:	00003d8c 	.word	0x00003d8c
    467c:	00003ca0 	.word	0x00003ca0
    4680:	00003cb6 	.word	0x00003cb6
    4684:	00003ccc 	.word	0x00003ccc
    4688:	00003ce2 	.word	0x00003ce2
    468c:	00003cf8 	.word	0x00003cf8
    4690:	00003d0e 	.word	0x00003d0e
    4694:	00003d24 	.word	0x00003d24
    4698:	00003d94 	.word	0x00003d94
    469c:	00003ca0 	.word	0x00003ca0
    46a0:	00003cb6 	.word	0x00003cb6
    46a4:	00003ccc 	.word	0x00003ccc
    46a8:	00003ce2 	.word	0x00003ce2
    46ac:	00003cf8 	.word	0x00003cf8
    46b0:	00003d0e 	.word	0x00003d0e
    46b4:	00003d24 	.word	0x00003d24
    46b8:	00003d3a 	.word	0x00003d3a
    46bc:	00003ca0 	.word	0x00003ca0
    46c0:	00003cb6 	.word	0x00003cb6
    46c4:	00003ccc 	.word	0x00003ccc
    46c8:	00003ce2 	.word	0x00003ce2
    46cc:	00003cf8 	.word	0x00003cf8
    46d0:	00003d0e 	.word	0x00003d0e
    46d4:	00003d24 	.word	0x00003d24
    46d8:	00003d46 	.word	0x00003d46
    46dc:	00003d64 	.word	0x00003d64
    46e0:	00003d6c 	.word	0x00003d6c
    46e4:	00003d74 	.word	0x00003d74
    46e8:	00003d7c 	.word	0x00003d7c
    46ec:	00003d84 	.word	0x00003d84
    46f0:	00003d8c 	.word	0x00003d8c
    46f4:	00003d94 	.word	0x00003d94
    46f8:	00003d46 	.word	0x00003d46
    46fc:	00003d64 	.word	0x00003d64
    4700:	00003d6c 	.word	0x00003d6c
    4704:	00003d74 	.word	0x00003d74
    4708:	00003d7c 	.word	0x00003d7c
    470c:	00003d84 	.word	0x00003d84
    4710:	00003d8c 	.word	0x00003d8c
    4714:	00003d94 	.word	0x00003d94
    4718:	00003d46 	.word	0x00003d46
    471c:	00003d64 	.word	0x00003d64
    4720:	00003d6c 	.word	0x00003d6c
    4724:	00003d74 	.word	0x00003d74
    4728:	00003d7c 	.word	0x00003d7c
    472c:	00003d84 	.word	0x00003d84
    4730:	00003d8c 	.word	0x00003d8c
    4734:	00003d94 	.word	0x00003d94
    4738:	00003d46 	.word	0x00003d46
    473c:	00003d64 	.word	0x00003d64
    4740:	00003d6c 	.word	0x00003d6c
    4744:	00003d74 	.word	0x00003d74
    4748:	00003d7c 	.word	0x00003d7c
    474c:	00003d84 	.word	0x00003d84
    4750:	00003d8c 	.word	0x00003d8c
    4754:	00003d94 	.word	0x00003d94
    4758:	00003d46 	.word	0x00003d46
    475c:	00003d64 	.word	0x00003d64
    4760:	00003d6c 	.word	0x00003d6c
    4764:	00003d74 	.word	0x00003d74
    4768:	00003d7c 	.word	0x00003d7c
    476c:	00003d84 	.word	0x00003d84
    4770:	00003d8c 	.word	0x00003d8c
    4774:	00003d94 	.word	0x00003d94
    4778:	00003d46 	.word	0x00003d46
    477c:	00003d64 	.word	0x00003d64
    4780:	00003d6c 	.word	0x00003d6c
    4784:	00003d74 	.word	0x00003d74
    4788:	00003d7c 	.word	0x00003d7c
    478c:	00003d84 	.word	0x00003d84
    4790:	00003d8c 	.word	0x00003d8c
    4794:	00003d94 	.word	0x00003d94
    4798:	00003d46 	.word	0x00003d46
    479c:	00003d64 	.word	0x00003d64
    47a0:	00003d6c 	.word	0x00003d6c
    47a4:	00003d74 	.word	0x00003d74
    47a8:	00003d7c 	.word	0x00003d7c
    47ac:	00003d84 	.word	0x00003d84
    47b0:	00003d8c 	.word	0x00003d8c
    47b4:	00003d94 	.word	0x00003d94
    47b8:	00003d46 	.word	0x00003d46
    47bc:	00003d64 	.word	0x00003d64
    47c0:	00003d6c 	.word	0x00003d6c
    47c4:	00003d74 	.word	0x00003d74
    47c8:	00003d7c 	.word	0x00003d7c
    47cc:	00003d84 	.word	0x00003d84
    47d0:	00003d8c 	.word	0x00003d8c
    47d4:	00003d94 	.word	0x00003d94
    47d8:	00003e6e 	.word	0x00003e6e
    47dc:	00003e66 	.word	0x00003e66
    47e0:	00003f26 	.word	0x00003f26
    47e4:	00003f38 	.word	0x00003f38
    47e8:	00003f4a 	.word	0x00003f4a
    47ec:	00003f5c 	.word	0x00003f5c
    47f0:	00003f6e 	.word	0x00003f6e
    47f4:	00003f80 	.word	0x00003f80
    47f8:	00003ff4 	.word	0x00003ff4
    47fc:	00004008 	.word	0x00004008
    4800:	00004030 	.word	0x00004030
    4804:	0000401c 	.word	0x0000401c
    4808:	00004044 	.word	0x00004044
    480c:	00004058 	.word	0x00004058
    4810:	0000406c 	.word	0x0000406c
    4814:	00004080 	.word	0x00004080
    4818:	00004236 	.word	0x00004236
    481c:	00004242 	.word	0x00004242
    4820:	0000425a 	.word	0x0000425a
    4824:	0000424e 	.word	0x0000424e
    4828:	00004266 	.word	0x00004266
    482c:	00004272 	.word	0x00004272
    4830:	0000427e 	.word	0x0000427e
    4834:	0000428a 	.word	0x0000428a

00004838 <ET011TT2_KWVCOM_GU_LUT>:
	...
    4844:	0c000000 00000000 00000000 00000000     ................
    4854:	00000000                                ....

00004858 <ET011TT2_KW_GU_LUT>:
    4858:	80000001 80000001 80000001 80000001     ................
    4868:	80000001 80000001 80000001 80000001     ................
    4878:	80000001 80000001 40000002 40000002     ...........@...@
    4888:	40000002 40000002 40000002 40000002     ...@...@...@...@
    4898:	40000002 40000002 40000002 40000002     ...@...@...@...@
    48a8:	40000002 40000002 40000002 40000002     ...@...@...@...@
    48b8:	40000002 40000002 40000002 40000002     ...@...@...@...@
    48c8:	40000002 40000002 40000002 40000002     ...@...@...@...@
    48d8:	40000002 40000002 40000002 40000002     ...@...@...@...@
    48e8:	40000002 40000002 40000002 40000002     ...@...@...@...@
    48f8:	40000002 40000002 40000002 40000002     ...@...@...@...@
    4908:	40000002 40000002 40000002 40000002     ...@...@...@...@
    4918:	40000002 40000002 40000002 40000002     ...@...@...@...@
    4928:	40000002 40000002 40000002 40000002     ...@...@...@...@
    4938:	40000002 40000002 40000002 40000002     ...@...@...@...@
    4948:	00000000 ffffffff 00000000 00000000     ................
	...

00004a58 <ET011TT2_FT_LUT>:
	...

00004ad8 <ET011TT2_KWVCOM_A2_LUT>:
	...
    4ae0:	000000c0 00000000 00000000 00000000     ................
	...

00004af8 <ET011TT2_KW_A2_LUT>:
    4af8:	a9a9a9a9 a9a9a9a9 a9a9a9a9 a9a9a9a9     ................
    4b08:	a9a9a9a9 a9a9a9a9 a1a9a9a9 a129a9a9     ..............).
    4b18:	8121a9a8 8105a9a8 0505a1a8 150580a8     ..!.............
    4b28:	54150088 54040480 54145482 54145642     ...T...T.T.TBV.T
    4b38:	54565646 54565646 56565656 56565656     FVVTFVVTVVVVVVVV
    4b48:	52525656 52525656 52525656 52525256     VVRRVVRRVVRRVRRR
    4b58:	52525256 42525252 42525252 4a4a4a5a     VRRRRRRBRRRBZJJJ
    4b68:	6a6a6a6a 6a6a6a6a 00000000 ffffffff     jjjjjjjj........
	...

00004cf8 <ED037TC1_A2_LUT>:
    4cf8:	0000052a 00000000 2a050000 00000000     *..........*....
    4d08:	00000000 0000152a 00000000 0a050000     ....*...........
	...
    4d28:	02000000 02000a03 00050a06 00000000     ................
	...
    4d5c:	22222222 00000022                       """""...

00004d64 <ED037TC1_DU_LUT>:
	...
    4d6c:	2a010000 00000000 00000000 0000550a     ...*.........U..
	...
    4d98:	05000505 00050503 00000000 00000000     ................
	...
    4dc8:	22222222 00000022                       """""...

00004dd0 <SSD1608_A45_IU_LUT>:
    4dd0:	18181824 10181800 00000008 00000000     $...............
    4de0:	00000000 11111141 00000001 00000000     ....A...........

00004df0 <SSD1608_A05_IU_LUT>:
    4df0:	28181810 18181818 00000008 00000000     ...(............
    4e00:	00000000 13221233 00000011 00000000     ....3.".........

00004e10 <ED028TC1_WF_LUT>:
    4e10:	0011042e 00000000 00000000 00000000     ................
    4e20:	00000010 00000100 00000100 10040100     ................
    4e30:	00440100 00400000 00000000 00400000     ..D...@.......@.
    4e40:	00000000 10400100 10400500 00000000     ......@...@.....
    4e50:	00511400 00000000 00000000 00000010     ..Q.............
    4e60:	00000010 00400100 00401100 10040100     ......@...@.....
    4e70:	00440100 00400000 00000000 10440100     ..D...@.......D.
    4e80:	00000100 10400100 10400500 00000100     ......@...@.....
    4e90:	00511500 00100000 00000010 00000010     ..Q.............
    4ea0:	00000010 00400100 10401100 10040100     ......@...@.....
    4eb0:	00441100 00400100 10400000 10444100     ..D...@...@..AD.
    4ec0:	00000100 10441500 10444500 00040100     ......D..ED.....
    4ed0:	00511500 00100000 00000010 00000010     ..Q.............
    4ee0:	00000010 00440100 10401100 10040100     ......D...@.....
    4ef0:	00441100 00404100 10400000 10444500     ..D..A@...@..ED.
    4f00:	10400100 10441500 10444500 10440500     ..@...D..ED...D.
    4f10:	00512500 00100004 00000010 00400010     .%Q...........@.
    4f20:	00400010 10440100 10401500 10040500     ..@...D...@.....
    4f30:	10441100 00404100 10401100 10444500     ..D..A@...@..ED.
    4f40:	10440100 10441500 10444500 10440500     ..D...D..ED...D.
    4f50:	00512500 00541104 00400010 00400110     .%Q...T...@...@.
    4f60:	00444110 10440100 10405500 10044504     .AD...D..U@..E..
    4f70:	10445500 00444500 10401100 10444500     .UD..ED...@..ED.
    4f80:	10440100 10441500 10444500 10540500     ..D...D..ED...T.
    4f90:	00512500 00541104 00400110 00400110     .%Q...T...@...@.
    4fa0:	00444110 10440500 14445500 10544504     .AD...D..UD..ET.
    4fb0:	10445500 10444500 10441100 10444500     .UD..ED...D..ED.
    4fc0:	10440500 14545500 14544500 10540500     ..D..UT..ET...T.
    4fd0:	00512500 10545504 00500114 10445110     .%Q..UT...P..QD.
    4fe0:	10444114 10544500 14445504 10544504     .AD..ET..UD..ET.
    4ff0:	10445500 10444500 10445500 14544500     .UD..ED..UD..ET.
    5000:	14441500 14545500 14554500 14540500     ..D..UT..EU...T.
    5010:	00512900 10545504 10500114 10545110     .)Q..UT...P..QT.
    5020:	10444114 10545500 14445504 14544504     .AD..UT..UD..ET.
    5030:	14445500 14544510 10445500 14544500     .UD..ET..UD..ET.
    5040:	14541500 14545500 14554500 14540500     ..T..UT..EU...T.
    5050:	00512900 10545514 10500114 14545510     .)Q..UT...P..UT.
    5060:	10444114 10545510 14545504 14544504     .AD..UT..UT..ET.
    5070:	14445500 14544510 10545504 14544500     .UD..ET..UT..ET.
    5080:	14541500 14545500 14555500 14540500     ..T..UT..UU...T.
    5090:	00a12900 10545514 14500114 14545510     .)...UT...P..UT.
    50a0:	10544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    50b0:	14445510 14544510 14545504 14544500     .UD..ET..UT..ET.
    50c0:	14541500 14555500 14555511 14540511     ..T..UU..UU...T.
    50d0:	00a22a00 14545518 14500114 14545510     .*...UT...P..UT.
    50e0:	14544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    50f0:	14545510 14544510 14545504 14544500     .UT..ET..UT..ET.
    5100:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    5110:	00a26a10 14555518 14544514 14545510     .j...UU..ET..UT.
    5120:	14544114 14545514 14555514 14554515     .AT..UT..UU..EU.
    5130:	14545511 14544511 14545515 14544501     .UT..ET..UT..ET.
    5140:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    5150:	00a6aa10 14555518 14544515 14545510     .....UU..ET..UT.
    5160:	14544514 14545514 15555514 15554515     .ET..UT..UU..EU.
    5170:	14545515 14544515 14545515 14544501     .UT..ET..UT..ET.
    5180:	14541511 14555511 15555511 14550511     ..T..UU..UU...U.
    5190:	10a6aa11 15556518 14554515 14545514     .....eU..EU..UT.
    51a0:	14544514 14545514 15555515 15554515     .ET..UT..UU..EU.
    51b0:	14546515 14544515 14545515 14555511     .eT..ET..UT..UU.
    51c0:	14545511 14555511 15555511 14550511     .UT..UU..UU...U.
    51d0:	10a6aa11 55a9a518 14554555 14545514     .......UUEU..UT.
    51e0:	14558515 15995515 15556515 15594515     ..U..U...eU..EY.
    51f0:	14596515 15558515 14555515 14559511     .eY...U..UU...U.
    5200:	14545511 14555511 15555511 55550551     .UT..UU..UU.Q.UU
    5210:	10aaaa51 55a9a518 15555559 1555a515     Q......UYUU...U.
    5220:	14998555 15995615 55556515 55595515     U....V...eUU.UYU
    5230:	55996515 15959515 14956515 14559511     .e.U.....e....U.
    5240:	14545611 54556511 55959551 55551551     .VT..eUTQ..UQ.UU
    5250:	10aaaa51 55a9aa28 15955569 1595a525     Q...(..UiU..%...
    5260:	14998569 15999615 5595aa15 55599a15     i..........U..YU
    5270:	5599a655 55999515 1495a515 14999511     U..U...U........
    5280:	14956611 55996911 55959951 55591551     .f...i.UQ..UQ.YU
    5290:	54aaaa55 55a9aa28 55a59669 5599a625     U..T(..Ui..U%..U
    52a0:	54998669 5599aa19 5595aa15 65999a55     i..T...U...UU..e
    52b0:	5599aa55 55999a15 1499a555 14999615     U..U...UU.......
    52c0:	14996651 5599aa11 5595aa55 55991551     Qf.....UU..UQ..U
    52d0:	64aaaa55 65a9aa28 55a59669 55a9aa25     U..d(..ei..U%..U
    52e0:	54999669 65a9aa19 6595aa19 65999a59     i..T...e...eY..e
    52f0:	5599aa55 55999a15 2499aa55 25999a15     U..U...UU..$...%
    5300:	14996a55 6599aa11 65a9aa55 55991a51     Uj.....eU..eQ..U
    5310:	a5aaaa55 65a9aa28 65a5aa69 65a9aa69     U...(..ei..ei..e
    5320:	64a99669 65a9aa59 65a9aa59 65a99a59     i..dY..eY..eY..e
    5330:	6599aa55 55999a55 6499aa55 65999a55     U..eU..UU..dU..e
    5340:	24996a55 6599aa15 65a9aa55 55a91a51     Uj.$...eU..eQ..U
    5350:	a5aaaa55 a5aaaa68 65a9aa69 65a9aa69     U...h...i..ei..e
    5360:	65a99a69 65a9aa59 65a9aa59 65a99a59     i..eY..eY..eY..e
    5370:	65a9aa55 65a99a55 64a9aa59 65a9aa55     U..eU..eY..dU..e
    5380:	24a9aa55 65a9aa15 65a9aa55 65a91a51     U..$...eU..eQ..e
    5390:	aaaaaa55 aaaaaa68 69aaaa68 69a9aa69     U...h...h..ii..i
    53a0:	65a99a69 65a9aa69 69aaaa59 65aaaa59     i..ei..eY..iY..e
    53b0:	65a9aa55 65a9aa55 65a9aa59 65a9aa55     U..eU..eY..eU..e
    53c0:	64a9aa55 65a9aa55 65aaaa55 65a92a55     U..dU..eU..eU*.e
    53d0:	aaaaaa55 aaaaaaa8 6aaaaaa8 69a9aa69     U..........ji..i
    53e0:	69aaaa69 69a9aa69 69aaaa59 69aaaa59     i..ii..iY..iY..i
    53f0:	69a9aa59 69a9aa69 65aaaa59 69a9aa55     Y..ii..iY..eU..i
    5400:	69a9aa55 69aaaa55 69aaaa55 65aa2a55     U..iU..iU..iU*.e
    5410:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    5420:	a9aaaa68 6aaaaa68 aaaaaa68 6aaaaa68     h...h..jh...h..j
    5430:	69a9aa68 69aaaa68 69aaaa58 69aaaa54     h..ih..iX..iT..i
    5440:	69a9aa54 69aaaa54 6aaaaa54 69aa2a54     T..iT..iT..jT*.i
    5450:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    5460:	a9aaaaa8 aaaaaa68 aaaaaa68 aaaaaa68     ....h...h...h...
    5470:	a9aaaa68 aaaaaa68 69aaaa68 69aaaa58     h...h...h..iX..i
    5480:	69aaaa64 a9aaaa54 aaaaaa64 69aa2a64     d..iT...d...d*.i
    5490:	aaaa9a59 aaaaaaaa aaaaaaaa aaaaaa6a     Y...........j...
    54a0:	aaaaaaaa aaaaaa6a aaaaaa6a aaaaaa6a     ....j...j...j...
    54b0:	aaaaaa6a aaaaaa6a 69aaaa6a 69aaaa6a     j...j...j..ij..i
    54c0:	69aaaa6a a9aaaa6a aaaaaa6a aaaa2aa6     j..ij...j....*..
    54d0:	aaaaaa68 aaaaaaaa aaaaaaaa aaaaaaaa     h...............
    54e0:	aaaaaaaa aaaaaaaa aaaaaa6a aaaaaa6a     ........j...j...
    54f0:	aaaaaaaa aaaaaa6a a9aaaaaa aaaaaa6a     ....j.......j...
    5500:	69aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ...ij........*..
    5510:	aaaa4aa8 aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    5520:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5530:	aaaaaaaa aaaaaa6a aaaaaaaa aaaaaaaa     ....j...........
    5540:	a9aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ....j........*..
    5550:	aaaa4aaa aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    5560:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5570:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5580:	aaaaaaaa aaaaaa6a aaaa9aaa aaaa1aaa     ....j...........
    5590:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    55a0:	aaaa6aaa aaaaaaaa aaaaaaaa aaaaaaaa     .j..............
    55b0:	aaaa9aaa aaaa6aaa aaaa6aaa aaaa6aaa     .....j...j...j..
    55c0:	aaaa5aaa aaaaaaaa aaaaaaaa aaaa2aaa     .Z...........*..
    55d0:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    55e0:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa6aaa     .j...j...j...j..
    55f0:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa5aaa     .j...j...j...Z..
    5600:	aaaa6aaa aaaa6aaa aaaa4aaa aaaa4aaa     .j...j...J...J..
    5610:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa5aaa     .J...Z...Z...Z..
    5620:	aaaa6aaa aaaa6aa6 aaaa6aaa aaaa5aaa     .j...j...j...Z..
    5630:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa6aaa     .J...Z...Z...j..
    5640:	aaaa49aa aaaa5aaa aa9a4aaa aaaa4aaa     .I...Z...J...J..
    5650:	aaaa52aa aa2a6aa6 aaaa6aa6 aaaa6aa6     .R...j*..j...j..
    5660:	aaaa6aa6 aaa26aaa aa9a52aa aa2a62aa     .j...j...R...b*.
    5670:	aa9a4aaa aaa26aaa aa2a6aaa aaaa4aaa     .J...j...j*..J..
    5680:	aa2a4aaa aaaa62aa aa2a4aaa aa224aaa     .J*..b...J*..J".
    5690:	aaaa12a6 6a224aaa aaaa4aaa aaaa4aaa     .....J"j.J...J..
    56a0:	aa225aaa aa225aa2 6aaa62aa aa2242aa     .Z"..Z"..b.j.B".
    56b0:	aaa242aa aaa242aa aa2042aa aaaa4aaa     .B...B...B ..J..
    56c0:	aa2a40aa 6aa242a6 6a0a4aaa aa124aaa     .@*..B.j.J.j.J..
    56d0:	aa5215aa aa1242a2 aa9a42a2 6a9a42a2     ..R..B...B...B.j
    56e0:	6a1262a2 aa1262a2 aa8842aa aa2042aa     .b.j.b...B...B .
    56f0:	aa0242aa 6a2242aa aa1042aa 6aaa4aa6     .B...B"j.B...J.j
    5700:	6a1040a6 aa2242aa aa0a42a6 aa2042aa     .@.j.B"..B...B .
    5710:	6a6216a2 2a6211a2 696a11a2 aa6211a2     ..bj..b*..ji..b.
    5720:	a96211a2 6a6251a2 2a4851a6 6a5051a6     ..b..Qbj.QH*.QPj
    5730:	6a4251a6 aa5051a6 696051a6 a95059aa     .QBj.QP..Q`i.YP.
    5740:	a96050aa 2a5251a2 2a4a51aa 694051aa     .P`..QR*.QJ*.Q@i
    5750:	aa5215a2 294216a2 aa4816a2 294216a2     ..R...B)..H...B)
    5760:	2a4016a2 a94216a2 294816aa a96016aa     ..@*..B...H)..`.
    5770:	aa4216aa 296016aa aa4016aa 2a6016a2     ..B...`)..@...`*
    5780:	2a401422 296056a2 294a56a2 aa405626     ".@*.V`).VJ)&V@.
    5790:	195555a2 1a5455a2 18545522 1a5455a2     .UU..UT."UT..UT.
    57a0:	185455a2 1a5455a2 1a5455a2 1a5455a2     .UT..UT..UT..UT.
    57b0:	195455a2 1a5455a2 18545522 18545522     .UT..UT."UT."UT.
    57c0:	18545522 1a5455a2 1a545522 1854552a     "UT..UT."UT.*UT.
    57d0:	2a555522 28555526 28555526 285555a6     "UU*&UU(&UU(.UU(
    57e0:	28555526 28555526 285555a6 285555a6     &UU(&UU(.UU(.UU(
    57f0:	2a555526 285555a6 28555526 28555526     &UU*.UU(&UU(&UU(
    5800:	28555526 28555526 28555526 28555526     &UU(&UU(&UU(&UU(
    5810:	54555526 54555506 54555506 54555506     &UUT.UUT.UUT.UUT
    5820:	54555506 54555526 54555526 54555526     .UUT&UUT&UUT&UUT
    5830:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    5840:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    5850:	55555526 55555554 55555554 55555554     &UUUTUUUTUUUTUUU
    5860:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    5870:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    5880:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    5890:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    58a0:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    58b0:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    58c0:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    58d0:	aaaa5454 aaaa54a8 aaaa54a8 aaaa54a8     TT...T...T...T..
    58e0:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    58f0:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    5900:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    5910:	000050a8 00005008 00005008 00005008     .P...P...P...P..
    5920:	00005008 00005008 00005008 00005008     .P...P...P...P..
    5930:	00005008 00005008 00005008 00005008     .P...P...P...P..
    5940:	00005008 00005008 00005008 00005008     .P...P...P...P..
    5950:	00004008 00004008 00004008 00004008     .@...@...@...@..
    5960:	00004008 00004008 00004008 00004008     .@...@...@...@..
    5970:	00004008 00004008 00004008 00004008     .@...@...@...@..
    5980:	00004008 00004008 00004008 00004008     .@...@...@...@..
    5990:	00000008 00000000 00000000 00000000     ................
	...

000059d4 <eink_GSephElecLogo_2bGrey>:
	...
    5a28:	ff030000 ffffffff 80ffffff 00000000     ................
	...
    5a44:	aaaaaa1e aaaaaaaa 0000f0aa 00000000     ................
	...
    5a5c:	aa3a0000 aaaaaaaa a8aaaaaa 00000000     ..:.............
	...
    5a78:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    5a90:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    5aac:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    5ac4:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    5ae0:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    5af8:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    5b14:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    5b2c:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    5b48:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    5b60:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    5b7c:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
    5b8c:	01000000 55555555 aa7a5555 aaaaaaaa     ....UUUUUUz.....
    5b9c:	adaaaaaa 55555555 00405555 ffff1600     ....UUUUUU@.....
    5bac:	ffffffff aaaaaafa aaaaaaaa ffffafaa     ................
    5bbc:	ffffffff 6f000094 ffffffff aaaaaaea     .......o........
    5bcc:	aaaaaaaa aaaaaaaa aaaaaaaa 00f9afaa     ................
    5bdc:	ffffff01 aaaafeff aaaaaaaa aaaaaaaa     ................
    5bec:	aaaaaaaa afaaaaaa ff0740ff faffffff     .........@......
    5bfc:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5c0c:	d0ffafaa ffffff0b aaaaeaff aaaaaaaa     ................
    5c1c:	aaaaaaaa aaaaaaaa afaaaaaa ff0fe0ff     ................
    5c2c:	aaffffff aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5c3c:	aaaaaaaa f0ffafaa ffffff1f aaaaaafe     ................
    5c4c:	aaaaaaaa aaaaaaaa aaaaaaaa afaaaaaa     ................
    5c5c:	ff1ff4ff aafaffff aaaaaaaa aaaaaaaa     ................
    5c6c:	aaaaaaaa aaaaaaaa f8ffafaa ffffff2f     ............/...
    5c7c:	aaaaaaea aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5c8c:	afaaaaaa ff2ff8ff aaaaffff aaaaaaaa     ....../.........
    5c9c:	aaaaaaaa aaaaaaaa aaaaaaaa f8ffafaa     ................
    5cac:	feffff2f aaaaaaaa aaaaaaaa aaaaaaaa     /...............
    5cbc:	aaaaaaaa afaaaaaa ff2ff8ff aaaafaff     ........../.....
    5ccc:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5cdc:	f8ffafaa eaffff2f aaaaaaaa aaaaaaaa     ..../...........
    5cec:	aaaaaaaa aaaaaaaa afaaaaaa ff2ff8ff     ............../.
    5cfc:	aaaaeaff aaaaaaaa aaaaaaaa aaaaaaaa     ................
    5d0c:	aaaaaaaa f8ffafaa aaffff2f aaaaaaaa     ......../.......
    5d1c:	55aaaaaa 55555555 56555555 afaaaaaa     ...UUUUUUUUV....
    5d2c:	ff2ff8ff aaaaaaff aaaaaaaa 000000aa     ../.............
    5d3c:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    5d4c:	aaaaaaaa 00aaaaaa 00000000 05000000     ................
    5d5c:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    5d6c:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    5d7c:	aafeff2f aaaaaaaa 00aaaaaa 00000000     /...............
    5d8c:	05000000 afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    5d9c:	aaaaaaaa 000000aa 00000000 aaaa0500     ................
    5dac:	f8ffafaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    5dbc:	00000000 05000000 afaaaaaa ff2ff8ff     ............../.
    5dcc:	aaaaaafe aaaaaaaa 000000aa 00000000     ................
    5ddc:	aaaa0500 f8ffafaa aafeff2f aaaaaaaa     ......../.......
    5dec:	00aaaaaa 00000000 05000000 afaaaaaa     ................
    5dfc:	ff2ff8ff aaaaaafe aaaaaaaa 000000aa     ../.............
    5e0c:	00005501 aaaa0500 f8ffafaa aafeff2f     .U........../...
    5e1c:	aaaaaaaa 00aaaaaa fe5a0100 05000094     ..........Z.....
    5e2c:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    5e3c:	160000aa 80feffff aaaa0500 f8ffafaa     ................
    5e4c:	aafeff2f aaaaaaaa 00aaaaaa ffff6f00     /............o..
    5e5c:	0500d4ff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    5e6c:	aaaaaaaa bf0100aa fdffffff aaaa0500     ................
    5e7c:	f8ffafaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    5e8c:	ffffff07 0540ffff afaaaaaa ff2ff8ff     ......@......./.
    5e9c:	aaaaaafe aaaaaaaa ff1f00aa ffffffff     ................
    5eac:	aaaa05d0 f8ffafaa aafeff2f aaaaaaaa     ......../.......
    5ebc:	00aaaaaa ffffff6f 05f4ffff afaaaaaa     ....o...........
    5ecc:	ff2ff8ff aaaaaafe aaaaaaaa ffbf01aa     ../.............
    5edc:	ffffffff aaaa05f8 f8ffafaa aafeff2f     ............/...
    5eec:	aaaaaaaa 01aaaaaa ffffffff 05fdffff     ................
    5efc:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    5f0c:	ffff06aa ffffffff aaaa05ff f8ffafaa     ................
    5f1c:	aafeff2f aaaaaaaa 06aaaaaa ffffffff     /...............
    5f2c:	45ffffff afaaaaaa ff2ff8ff aaaaaafe     ...E....../.....
    5f3c:	aaaaaaaa ffff07aa ffffffff aaaa85ff     ................
    5f4c:	f8ffafaa aafeff2f aaaaaaaa 1baaaaaa     ..../...........
    5f5c:	ffffffff c5ffffff afaaaaaa ff2ff8ff     ............../.
    5f6c:	aaaaaafe aaaaaaaa ffff1baa ffebffff     ................
    5f7c:	aaaac5ff f8ffafaa aafeff2f abaaaaaa     ......../.......
    5f8c:	1baaaafa f9ffffff c5ff7f55 afaaaaaa     ........U.......
    5f9c:	ff2ff8ff aaaaaafe aafeffbf ffff1baa     ../.............
    5fac:	1f00e4ff aaaac5ff f8ffafaa aafeff2f     ............/...
    5fbc:	ffffffab 1baaaafa 90ffffff c5ff0700     ................
    5fcc:	afaaaaaa ff2ff8ff ffafaafe aaaaaaff     ....../.........
    5fdc:	ffff1baa 010080ff aaaac5ff f8ffafaa     ................
    5fec:	aafeff2f aabefeaf 17aaaaaa 40ffffff     /..............@
    5ffc:	85ff0000 afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    600c:	aaaaaabe ffff06aa 000040ff aaaa45ff     .........@...E..
    601c:	f8ffafaa aafeff2f aabeaaaa 06aaaaaa     ..../...........
    602c:	40ffffff 05ff0000 afaaaaaa ff2ff8ff     ...@........../.
    603c:	aaaaaafe aaaaaafe ffff01aa 020040ff     .............@..
    604c:	aaaa05fe f8ffafaa aafeff2f aafeaaaa     ......../.......
    605c:	01aaaaaa d0ffffbf 05fc0300 afaaaaaa     ................
    606c:	ff2ff8ff aaaaaafe aaaaaafe ff7f00aa     ../.............
    607c:	0f00e4ff aaaa05f4 f8ffafaa aafeff2f     ............/...
    608c:	aafeaaaa 00aaaaaa fdffff1f 05e07f00     ................
    609c:	afaaaaaa ff2ff8ff aaaaaafe aaaaaafe     ....../.........
    60ac:	ff1b00aa ffffffff aaaa05c0 f8ffafaa     ................
    60bc:	aafeff2f aafeaaaa 00aaaaaa ffffff06     /...............
    60cc:	0500ffff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    60dc:	aaaaaafe 7f0000aa f8ffffff aaaa0500     ................
    60ec:	f8ffafaa aafeff2f aafaaaaa 00aaaaaa     ..../...........
    60fc:	ffff1b00 0500c0ff afaaaaaa ff2ff8ff     ............../.
    610c:	aaaaaafe aaaaaafa 010000aa 40f9ffbf     ...............@
    611c:	aaaa0500 f8ffafaa aafeff2f aafaaaaa     ......../.......
    612c:	00aaaaaa 55050000 05000050 afaaaaaa     .......UP.......
    613c:	ff2ff8ff aaaaaafe aaaaaafa 000000aa     ../.............
    614c:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    615c:	aafaabaa 00aaaaaa 00000000 05000000     ................
    616c:	afaaaaaa ff2ff8ff abaaaafe aaaaaafa     ....../.........
    617c:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    618c:	aafeff2f aafaabaa 00aaaaaa 00000000     /...............
    619c:	05000000 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    61ac:	aaaaaafa 000000aa 00000000 aaaa0500     ................
    61bc:	f8ffafaa aafeff2f aafaabaa 00aaaaaa     ..../...........
    61cc:	00000000 05000000 afaaaaaa ff2ff8ff     ............../.
    61dc:	abaaaafe aaaaaafa 000000aa 00000000     ................
    61ec:	aaaa0500 f8ffafaa aafeff2f aafaabaa     ......../.......
    61fc:	00aaaaaa 00000000 05000000 afaaaaaa     ................
    620c:	ff2ff8ff abaaaafe aaaaaafa 000000aa     ../.............
    621c:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    622c:	aafaabaa 00aaaaaa 00000000 05000000     ................
    623c:	afaaaaaa ff2ff8ff abaaaafe aaaaaafa     ....../.........
    624c:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    625c:	aafeff2f aafaabaa 00aaaaaa 00000000     /...............
    626c:	05000000 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    627c:	aaaaaafa 000000aa 00000000 aaaa0500     ................
    628c:	f8ffafaa aafeff2f aafaaaaa 00aaaaaa     ..../...........
    629c:	54050000 05000000 afaaaaaa ff2ff8ff     ...T........../.
    62ac:	aaaaaafe aaaaaafa 010000aa 40f9ffbf     ...............@
    62bc:	aaaa0500 f8ffafaa aafeff2f aafaaaaa     ......../.......
    62cc:	00aaaaaa ffff1b00 0500c0ff afaaaaaa     ................
    62dc:	ff2ff8ff aaaaaafe aaaaaafa 7f0000aa     ../.............
    62ec:	f8ffffff aaaa0500 f8ffafaa aafeff2f     ............/...
    62fc:	aafeaaaa 00aaaaaa ffffff06 0500ffff     ................
    630c:	afaaaaaa ff2ff8ff aaaaaafe aaaaaafe     ....../.........
    631c:	ff1b00aa ffffffff aaaa05c0 f8ffafaa     ................
    632c:	aafeff2f aafeaaaa 00aaaaaa ffffff1f     /...............
    633c:	05e0ffff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    634c:	aaaaaafe ff7f00aa ffffffff aaaa05f4     ................
    635c:	f8ffafaa aafeff2f aafeaaaa 01aaaaaa     ..../...........
    636c:	ffffffbf 05fcffff afaaaaaa ff2ff8ff     ............../.
    637c:	aaaaaafe aaaaaafe ffff01aa ffffffff     ................
    638c:	aaaa05fe f8ffafaa aafeff2f aafeaaaa     ......../.......
    639c:	06aaaaaa ffffffff 05ffffff afaaaaaa     ................
    63ac:	ff2ff8ff aaaaaafe aaaaaabe ffff06aa     ../.............
    63bc:	ffffffff aaaa45ff f8ffafaa aafeff2f     .....E....../...
    63cc:	aabeeaab 17aaaaaa ffffffff 85ffffff     ................
    63dc:	afaaaaaa ff2ff8ff ffafaafe aaaaaaff     ....../.........
    63ec:	ffff1baa ffffffff aaaac5ff f8ffafaa     ................
    63fc:	aafeff2f ffffffab 1baaaaea feffffff     /...............
    640c:	c5ffbf95 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    641c:	aafaffff ffff1baa 1f00f4ff aaaac5ff     ................
    642c:	f8ffafaa aafeff2f bfaaaaaa 1baaaafa     ..../...........
    643c:	d0ffffff c5ff0700 afaaaaaa ff2ff8ff     ............../.
    644c:	aaaaaafe aaaaaaaa ffff1baa 030090ff     ................
    645c:	aaaac5ff f8ffafaa aafeff2f aaaaaaaa     ......../.......
    646c:	1baaaaaa 40ffffff c5ff0100 afaaaaaa     .......@........
    647c:	ff2ff8ff aaaaaafe aaaaaaaa ffff07aa     ../.............
    648c:	000040ff aaaa85ff f8ffafaa aafeff2f     .@........../...
    649c:	aaaaaaaa 06aaaaaa 40ffffff 05ff0000     ...........@....
    64ac:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    64bc:	ffff06aa 010040ff aaaa05ff f8ffbfaa     .....@..........
    64cc:	aafeff2f aaaaaaaa 01aaaaaa 90ffffff     /...............
    64dc:	05fd0300 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    64ec:	aaaaaaaa ffbf01aa 0b00d0ff aaaa05f8     ................
    64fc:	f8ffbfaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    650c:	f8ffff6f 05f42f00 bfaaaaaa ff2ff8ff     o..../......../.
    651c:	aaaaaafe aaaaaaaa ff1f00aa bfaafeff     ................
    652c:	aaaa05d0 f8ffbfaa aafeff2f aaaaaaaa     ......../.......
    653c:	00aaaaaa ffffff07 0540ffff bfaaaaaa     ..........@.....
    654c:	ff2ff8ff aaaaaafe aaaaaaaa bf0100aa     ../.............
    655c:	fdffffff aaaa0500 f8ffbfaa aafeff2f     ............/...
    656c:	aaaaaaaa 00aaaaaa ffff6f00 0500d4ff     .........o......
    657c:	bfaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    658c:	160000aa 80feffff aaaa0500 f8ffbfaa     ................
    659c:	aafeff2f aaaaaaaa 00aaaaaa fe5a0100     /.............Z.
    65ac:	05000094 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    65bc:	aaaaaaaa 000000aa 00005501 aaaa0500     .........U......
    65cc:	f8ffbfaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    65dc:	00000000 05000000 bfaaaaaa ff2ff8ff     ............../.
    65ec:	aaaaaafe aaaaaaaa 000000aa 00000000     ................
    65fc:	aaaa0500 f8ffbfaa aafeff2f aaaaaaaa     ......../.......
    660c:	00aaaaaa 00000000 05000000 bfaaaaaa     ................
    661c:	ff2ff8ff aaaaaafe aaaaaaaa 000000aa     ../.............
    662c:	00000000 aaaa0500 f8ffbfaa aafeff2f     ............/...
    663c:	aaaaaaaa 00aaaaaa 00000000 05000000     ................
    664c:	bfaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    665c:	000000aa 00000000 aaaa0500 f8ffbfaa     ................
    666c:	aafeff2f aaaaaaaa 00aaaaaa 00000000     /...............
    667c:	05000000 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    668c:	aaaaaaaa 000000aa 00000000 aaaa0500     ................
    669c:	f8ffbfaa aafeff2f aaaaaaaa 55aaaaaa     ..../..........U
    66ac:	55555555 56555555 ffaaaaaa ff2ff8ff     UUUUUUUV....../.
    66bc:	aaaaaafe aaaaaaaa aaaaaaaa aaaaaaaa     ................
    66cc:	aaaaaaaa f8ffffaa aafeff2f aaaaaaaa     ......../.......
    66dc:	aaaaaaaa aaaaaaaa aaaaaaaa ffabaaaa     ................
    66ec:	ff2ff8ff aaaaaafe aaaaaaaa aaaaaaaa     ../.............
    66fc:	aaaaaaaa aaaaaaaa f8ffffab aafeff2f     ............/...
    670c:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    671c:	ffafaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    672c:	aaaaaaaa aaaaaaaa aaaaaaaa f8ffffbf     ................
    673c:	aafeff2f aaaaaaaa aaaaaaaa aaaaaaaa     /...............
    674c:	aaaaaaaa ffffaaaa ff2ff8ff aaaaaafe     ........../.....
    675c:	aaaaaaaa aaaaaaaa aaaaaaaa abaaaaaa     ................
    676c:	f8ffffff aafeff1f aaaaaaaa aaaaaaaa     ................
    677c:	aaaaaaaa aaaaaaaa ffffafaa ff0ff4ff     ................
    678c:	aaaaaafe aaaaaaaa aaaaaaaa aaaaaaaa     ................
    679c:	bfaaaaaa f0ffffff aafeff0b aaaaaaaa     ................
    67ac:	aaaaaaaa aaaaaaaa aaaaaaaa ffffffaa     ................
    67bc:	ff07e0ff aaaaaafe aaaaaaaa aaaaaaaa     ................
    67cc:	aaaaaaaa ffabaaaa d0ffffff aafeff01     ................
    67dc:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    67ec:	ffffffaf 6f0040ff aaaaaaff aaaaaaaa     .....@.o........
    67fc:	aaaaaaaa aaaaaaaa ffffabaa 00f9ffff     ................
    680c:	ffff1600 ffffffff aaaaaafa aaaaaaaa     ................
    681c:	ffffafaa ffffffff 010000d4 55555555     ............UUUU
    682c:	aa7a5555 aaaaaaaa adaaaaaa 55555555     UUz.........UUUU
    683c:	00405555 00000000 00000000 aaaaaa7a     UU@.........z...
    684c:	aaaaaaaa 0000acaa 00000000 00000000     ................
    685c:	00000000 aa7a0000 aaaaaaaa acaaaaaa     ......z.........
	...
    687c:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    6894:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    68b0:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    68c8:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    68e4:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    68fc:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    6918:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    6930:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    694c:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    6964:	aa3a0000 aaaaaaaa bcaaaaaa 00000000     ..:.............
	...
    6980:	aaaaaa1e aaaaaaaa 0000f0aa 00000000     ................
	...
    6998:	ff030000 ffffffff c0ffffff 00000000     ................
	...

00006a10 <RobotoBold_76pt_CharCount>:
    6a10:	3c201b19 10424b3a 372e2423 261d2719     .. <:KB.#$.7.'.&
    6a20:	3a3a3a3a 3a3a3a3a 1a1d3a3a 32343a33     ::::::::::..3:42
    6a30:	4240445a 45373942 40381d47 46475837     ZD@BB97EG.8@7XGF
    6a40:	3e404641 5842423e 1c3d3e40 2d2c1c2b     AF@>>BBX@>=.+.,-
    6a50:	35393621 3a243739 361a1b39 3939571b     !69597$:9..6.W99
    6a60:	34253939 4a333922 21333333 0042211a     99%4"93J333!.!B.

00006a70 <RobotoBold_76pt_Table>:
	...
    6c60:	80000000 000000ff e0000000 0000000f     ................
    6c70:	80000000 ffffffff f000001f 0000001f     ................
    6c80:	80000000 ffffffff f801ffff 0000003f     ............?...
    6c90:	80000000 ffffffff fc01ffff 0000007f     ................
    6ca0:	80000000 ffffffff fc01ffff 0000007f     ................
    6cb0:	80000000 ffffffff fe01ffff 000000ff     ................
    6cc0:	80000000 ffffffff fe01ffff 000000ff     ................
    6cd0:	80000000 ffffffff fe01ffff 000000ff     ................
    6ce0:	80000000 ffffffff fe01ffff 000000ff     ................
    6cf0:	80000000 ffffffff fe01ffff 000000ff     ................
    6d00:	80000000 ffffffff fe01ffff 000000ff     ................
    6d10:	80000000 ffffffff fc01ffff 0000007f     ................
    6d20:	80000000 ffffffff fc01ffff 0000007f     ................
    6d30:	80000000 ffffffff f801ffff 0000003f     ............?...
    6d40:	80000000 03ffffff f0000000 0000001f     ................
	...
    6d58:	c0000000 00000007 00000000 00000000     ................
	...
    6de0:	f8000000 003fffff 00000000 00000000     ......?.........
    6df0:	f8000000 003fffff 00000000 00000000     ......?.........
    6e00:	f8000000 003fffff 00000000 00000000     ......?.........
    6e10:	f8000000 003fffff 00000000 00000000     ......?.........
    6e20:	f8000000 003fffff 00000000 00000000     ......?.........
    6e30:	f8000000 003fffff 00000000 00000000     ......?.........
    6e40:	f8000000 003fffff 00000000 00000000     ......?.........
    6e50:	f8000000 003fffff 00000000 00000000     ......?.........
    6e60:	f8000000 0001ffff 00000000 00000000     ................
    6e70:	f8000000 0000003f 00000000 00000000     ....?...........
	...
    6ee0:	f8000000 003fffff 00000000 00000000     ......?.........
    6ef0:	f8000000 003fffff 00000000 00000000     ......?.........
    6f00:	f8000000 003fffff 00000000 00000000     ......?.........
    6f10:	f8000000 003fffff 00000000 00000000     ......?.........
    6f20:	f8000000 003fffff 00000000 00000000     ......?.........
    6f30:	f8000000 003fffff 00000000 00000000     ......?.........
    6f40:	f8000000 003fffff 00000000 00000000     ......?.........
    6f50:	f8000000 003fffff 00000000 00000000     ......?.........
    6f60:	f8000000 0001ffff 00000000 00000000     ................
    6f70:	f8000000 0000007f 00000000 00000000     ................
	...
    6fe8:	0003fc00 00000000 00000000 00000000     ................
    6ff8:	0003fc00 00000000 00000000 00000000     ................
    7008:	0003fc00 00000000 00000000 00000000     ................
    7018:	0003fc00 00000000 00000000 07f80000     ................
    7028:	0003fc00 00000000 00000000 07f80000     ................
    7038:	0003fc00 00000000 00000000 07f80000     ................
    7048:	0003fc00 00000000 00000000 07f80000     ................
    7058:	0003fc00 00000000 00000000 07f80000     ................
    7068:	0003fc00 0000007c 00000000 07f80000     ....|...........
    7078:	e003fc00 0000007f 00000000 07f80000     ................
    7088:	ff83fc00 0000007f 00000000 07f80000     ................
    7098:	fffffc00 0000007f 00000000 07f80000     ................
    70a8:	fffffc00 0000007f 00000000 07f80000     ................
    70b8:	ffffffc0 0000007f 00000000 87f80000     ................
    70c8:	ffffffff 0000007f 00000000 fff80000     ................
    70d8:	ffffffff 0000007f 00000000 fff80000     ................
    70e8:	ffffffff 0000007f 00000000 ffff8000     ................
    70f8:	ffffffff 00000007 00000000 fffffe00     ................
    7108:	1fffffff 00000000 00000000 fffffff0     ................
    7118:	007fffff 00000000 80000000 ffffffff     ................
    7128:	0003ffff 00000000 80000000 ffffffff     ................
    7138:	0003ffff 00000000 80000000 ffffffff     ................
    7148:	0003fc3f 00000000 80000000 7fffffff     ?...............
    7158:	0003fc00 00000000 80000000 07ffffff     ................
    7168:	0003fc00 00000000 80000000 07ffffff     ................
    7178:	0003fc00 00000000 80000000 07f87fff     ................
    7188:	0003fc00 00000040 80000000 07f801ff     ....@...........
    7198:	0003fc00 0000007f 80000000 07f8000f     ................
    71a8:	fc03fc00 0000007f 00000000 07f80000     ................
    71b8:	fff3fc00 0000007f 00000000 07f80000     ................
    71c8:	fffffc00 0000007f 00000000 07f80000     ................
    71d8:	fffffe00 0000007f 00000000 07f80000     ................
    71e8:	fffffff8 0000007f 00000000 e7f80000     ................
    71f8:	ffffffff 0000007f 00000000 fff80000     ................
    7208:	ffffffff 0000007f 00000000 fffc0000     ................
    7218:	ffffffff 0000003f 00000000 fffff000     ....?...........
    7228:	ffffffff 00000000 00000000 ffffff80     ................
    7238:	03ffffff 00000000 00000000 fffffffe     ................
    7248:	000fffff 00000000 80000000 ffffffff     ................
    7258:	0003ffff 00000000 80000000 ffffffff     ................
    7268:	0003fdff 00000000 80000000 ffffffff     ................
    7278:	0003fc07 00000000 80000000 1fffffff     ................
    7288:	0003fc00 00000000 80000000 07ffffff     ................
    7298:	0003fc00 00000000 80000000 07fbffff     ................
    72a8:	0003fc00 00000000 80000000 07f81fff     ................
    72b8:	0003fc00 00000000 80000000 07f8007f     ................
    72c8:	0003fc00 00000000 80000000 07f80001     ................
    72d8:	0003fc00 00000000 00000000 07f80000     ................
    72e8:	0003fc00 00000000 00000000 07f80000     ................
    72f8:	0003fc00 00000000 00000000 07f80000     ................
    7308:	0003fc00 00000000 00000000 07f80000     ................
	...
    7324:	07f80000 00000000 00000000 00000000     ................
    7334:	07f80000 00000000 00000000 00000000     ................
    7344:	07f80000 00000000 00000000 00000000     ................
	...
    73c8:	00ff0000 00000000 00000000 00000000     ................
    73d8:	07ff0000 00000000 00000000 003f8000     ..............?.
    73e8:	1fff0000 00000000 00000000 03fff800     ................
    73f8:	7fff0000 00000000 00000000 0fffff00     ................
    7408:	ffff0000 00000000 00000000 1fffff80     ................
    7418:	ffff0000 00000001 00000000 7fffffe0     ................
    7428:	ffff0000 00000003 00000000 fffffff0     ................
    7438:	ffff0000 00000007 00000000 fffffff8     ................
    7448:	ffff0001 0000000f 00000000 fffffff8     ................
    7458:	ffff0003 0000000f 00000000 fffffffc     ................
    7468:	ffff0007 0000001f 00000000 fffffffe     ................
    7478:	ffff0007 0000003f 00000000 fffffffe     ....?...........
    7488:	ffff000f 0000003f 00000000 ffffffff     ....?...........
    7498:	ffff000f 0000003f 00000000 ffffffff     ....?...........
    74a8:	ffc0001f 0000007f 80000000 ffffffff     ................
    74b8:	ff00003f 0000007f 80000000 ffffffff     ?...............
    74c8:	fc00003f 0000007f 80000000 ff801fff     ?...............
    74d8:	f800003f 000000ff 80000000 fe000fff     ?...............
    74e8:	f800007f 000000ff c0000000 fc0007ff     ................
    74f8:	f000007f 000000ff c0000000 fc0003ff     ................
    7508:	f00000ff 000000ff c0000000 f80003ff     ................
    7518:	e00000ff 0003ffff fff80000 f00001ff     ................
    7528:	e00001ff 0003ffff fff80000 f00001ff     ................
    7538:	e00001ff 0003ffff fff80000 e00001ff     ................
    7548:	e00001ff 0003ffff fff80000 e00001ff     ................
    7558:	e00003ff 0003ffff fff80000 c00001ff     ................
    7568:	e00003ff 0003ffff fff80000 c00001ff     ................
    7578:	e00007ff 0003ffff fff80000 800003ff     ................
    7588:	f00007ff 0003ffff fff80000 800003ff     ................
    7598:	f0000fff 000000ff c0000000 800007ff     ................
    75a8:	f8001fff 000000ff c0000000 00000fff     ................
    75b8:	f8001fff 000000ff 80000000 00003fff     .............?..
    75c8:	fe007fff 0000007f 80000000 0000ffff     ................
    75d8:	ff81fffe 0000007f 80000000 001fffff     ................
    75e8:	fffffffe 0000007f 00000000 001fffff     ................
    75f8:	fffffffc 0000007f 00000000 001fffff     ................
    7608:	fffffffc 0000003f 00000000 001ffffe     ....?...........
    7618:	fffffff8 0000003f 00000000 001ffffe     ....?...........
    7628:	fffffff0 0000001f 00000000 001ffffc     ................
    7638:	fffffff0 0000001f 00000000 001ffff8     ................
    7648:	ffffffe0 0000000f 00000000 001ffff0     ................
    7658:	ffffffc0 00000007 00000000 001fffe0     ................
    7668:	ffffff80 00000003 00000000 001fffc0     ................
    7678:	ffffff00 00000001 00000000 001fff80     ................
    7688:	fffffe00 00000000 00000000 001ffe00     ................
    7698:	7ffffc00 00000000 00000000 001ff800     ................
    76a8:	1ffff000 00000000 00000000 001fc000     ................
    76b8:	03ff8000 00000000 00000000 00000000     ................
	...
    7764:	001fff00 00000000 00000000 00000000     ................
    7774:	007fffc0 00000000 00000000 00000000     ................
    7784:	01fffff0 00000000 00000000 00000000     ................
    7794:	03fffff8 00000000 00000000 00000000     ................
    77a4:	07fffffc 00000000 00000000 00000000     ................
    77b4:	0ffffffe 00000000 00000000 00000000     ................
    77c4:	1fffffff 00000000 00000000 00000000     ................
    77d4:	1fffffff 00000000 00000000 80000000     ................
    77e4:	3fffffff 00000000 00000000 80000000     ...?............
    77f4:	3ffe0fff 00000000 00000000 80000000     ...?............
    7804:	3ff001ff 00000000 00000000 c0000000     ...?............
    7814:	7fc0007f 40000000 00000000 c0000000     .......@........
    7824:	7fc0007f 60000000 00000000 c0000000     .......`........
    7834:	7f80003f 78000000 00000000 c0000000     ?......x........
    7844:	7f80003f fe000000 00000000 c0000000     ?...............
    7854:	7f80003f ff000000 00000000 c0000000     ?...............
    7864:	7f80003f ffc00000 00000001 c0000000     ?...............
    7874:	7f80003f ffe00000 00000003 c0000000     ?...............
    7884:	7fc0007f fff80000 00000003 c0000000     ................
    7894:	7fc0007f fffe0000 00000000 80000000     ................
    78a4:	3fe000ff 7fff0000 00000000 80000000     ...?............
    78b4:	3ffc07ff 1fffc000 00000000 80000000     ...?............
    78c4:	3fffffff 07ffe000 00000000 00000000     ...?............
    78d4:	1fffffff 03fff800 00000000 00000000     ................
    78e4:	1fffffff 00fffe00 00000000 00000000     ................
    78f4:	0ffffffe 007fff00 00000000 00000000     ................
    7904:	07fffffc 001fffc0 00000000 00000000     ................
    7914:	03fffff8 0007ffe0 00000000 00000000     ................
    7924:	01fffff0 0003fff8 00000000 00000000     ................
    7934:	00ffffc0 0000fffe 00000000 00000000     ................
    7944:	001fff00 00007fff 00000000 00000000     ................
    7954:	c0000000 00001fff 00000000 00000000     ................
    7964:	e0000000 000007ff 00000000 00000000     ................
    7974:	f8000000 000003ff 00000000 00000000     ................
    7984:	fe000000 0ff800ff 00000000 00000000     ................
    7994:	ff000000 ffff807f 00000000 00000000     ................
    79a4:	ffc00000 ffffc01f 00000001 00000000     ................
    79b4:	fff00000 fffff007 00000007 00000000     ................
    79c4:	fff80000 fffff803 0000000f 00000000     ................
    79d4:	fffe0000 fffffc00 0000001f 00000000     ................
    79e4:	7fff0000 fffffc00 0000001f 00000000     ................
    79f4:	1fffc000 fffffe00 0000003f 00000000     ........?.......
    7a04:	07fff000 ffffff00 0000007f 00000000     ................
    7a14:	03fff800 ffffff00 0000007f 00000000     ................
    7a24:	00fffe00 e003ff00 0000007f 00000000     ................
    7a34:	007fff00 c001ff80 000000ff 00000000     ................
    7a44:	001fffc0 8000ff80 000000ff 00000000     ................
    7a54:	0007ff80 80007f80 000000ff 00000000     ................
    7a64:	0003ff80 00007f80 000000ff 00000000     ................
    7a74:	0000ff00 00007f80 000000ff 00000000     ................
    7a84:	00007f00 00007f80 000000ff 00000000     ................
    7a94:	00001e00 00007f80 000000ff 00000000     ................
    7aa4:	00000600 00007f80 000000ff 00000000     ................
    7ab4:	00000000 8000ff80 000000ff 00000000     ................
    7ac4:	00000000 c001ff80 000000ff 00000000     ................
    7ad4:	00000000 e007ff00 0000007f 00000000     ................
    7ae4:	00000000 ffffff00 0000007f 00000000     ................
    7af4:	00000000 fffffe00 0000007f 00000000     ................
    7b04:	00000000 fffffe00 0000003f 00000000     ........?.......
    7b14:	00000000 fffffc00 0000001f 00000000     ................
    7b24:	00000000 fffffc00 0000001f 00000000     ................
    7b34:	00000000 fffff800 0000000f 00000000     ................
    7b44:	00000000 fffff000 00000007 00000000     ................
    7b54:	00000000 ffffc000 00000001 00000000     ................
    7b64:	00000000 7fff0000 00000000 00000000     ................
    7b74:	00000000 03e00000 00000000 00000000     ................
	...
    7bf8:	003e0000 00000000 00000000 00000000     ..>.............
    7c08:	07ffc000 00000000 00000000 00000000     ................
    7c18:	1ffff800 00000000 00000000 00000000     ................
    7c28:	7ffffc00 00000000 00000000 00000000     ................
    7c38:	fffffe00 00000000 00000000 00000000     ................
    7c48:	ffffff80 00000001 00000000 00000000     ................
    7c58:	ffffffc0 00000003 00000000 007ffc00     ................
    7c68:	ffffffc0 00000007 00000000 01ffff00     ................
    7c78:	ffffffe0 0000000f 00000000 07ffffc0     ................
    7c88:	fffffff0 0000000f 00000000 1fffffe0     ................
    7c98:	fffffff8 0000001f 00000000 3ffffff0     ...............?
    7ca8:	fffffffc 0000001f 00000000 fffffff8     ................
    7cb8:	fffffffc 0000003f 00000000 fffffffc     ....?...........
    7cc8:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    7cd8:	ffffffff 0000007f 00000000 ffffffff     ................
    7ce8:	ff807fff 0000007f 00000000 ffffffff     ................
    7cf8:	fe001fff 0000007f 00000000 ffffffff     ................
    7d08:	fc000fff 0000007f 80000000 ffffffff     ................
    7d18:	f80003ff 000000ff 80000000 fffc3fff     .............?..
    7d28:	f00003ff 000000ff 80000000 ffe00fff     ................
    7d38:	f00003ff 000000ff c0000000 ff8007ff     ................
    7d48:	e00007ff 000000ff c0000000 ff0003ff     ................
    7d58:	e0000fff 000000ff c0000000 fc0001ff     ................
    7d68:	e0001fff 000000ff c0000000 fc0001ff     ................
    7d78:	e0003fff 000000ff c0000000 fe0001ff     .?..............
    7d88:	e000ffff 000000ff c0000000 ff0001ff     ................
    7d98:	e001ffff 000000ff c0000000 ff8001ff     ................
    7da8:	e003ffff 000000ff c0000000 ff8001ff     ................
    7db8:	e007ffff 000000ff c0000000 ffc003ff     ................
    7dc8:	f00fffff 000000ff c0000000 ffe007ff     ................
    7dd8:	f03fffff 0000007f 80000000 fff00fff     ..?.............
    7de8:	f07ffff9 0000007f 80000000 ffff3fff     .............?..
    7df8:	f8ffffe0 0000007f 80000000 ffffffff     ................
    7e08:	f9ffffc0 0000007f 00000000 7fffffff     ................
    7e18:	ffffff80 0000003f 00000000 3fffffff     ....?..........?
    7e28:	ffffff00 0000003f 00000000 1ffffffe     ....?...........
    7e38:	fffffe00 0000003f 00000000 1ffffffe     ....?...........
    7e48:	fffffc00 0000001f 00000000 0ffffffc     ................
    7e58:	fffff000 0000001f 00000000 07fffff8     ................
    7e68:	ffffe000 0000000f 00000000 01fffff0     ................
    7e78:	ffffc000 0000000f 00000000 00ffffe0     ................
    7e88:	ffff8000 00000007 00000000 003fff80     ..............?.
    7e98:	ffff0000 00000007 00000000 000ffe00     ................
    7ea8:	ffffc000 0000000f 00000000 00000000     ................
    7eb8:	fffff000 0000003f 00000000 00000000     ....?...........
    7ec8:	ffffffe0 0000007f 00000000 00000000     ................
    7ed8:	fffffff0 0000007f 00000000 00000000     ................
    7ee8:	fffffff0 0000007f 00000000 00000000     ................
    7ef8:	fffffff0 0000007f 00000000 00000000     ................
    7f08:	fffffff0 0000007f 00000000 00000000     ................
    7f18:	fffffff0 0000007f 00000000 00000000     ................
    7f28:	fbfffff0 0000007f 00000000 00000000     ................
    7f38:	f1fffff0 0000007f 00000000 00000000     ................
    7f48:	e07ffff0 0000007f 00000000 00000000     ................
    7f58:	c01ffff0 0000007f 00000000 00000000     ................
    7f68:	8003fff0 0000007f 00000000 00000000     ................
    7f78:	00007ff0 0000007e 00000000 00000000     ....~...........
    7f88:	000000f0 0000007c 00000000 00000000     ....|...........
    7f98:	00000000 00000078 00000000 00000000     ....x...........
    7fa8:	00000000 00000070 00000000 00000000     ....p...........
    7fb8:	00000000 00000060 00000000 00000000     ....`...........
    7fc8:	00000000 00000040 00000000 00000000     ....@...........
	...
    8010:	f8000000 003fffff 00000000 00000000     ......?.........
    8020:	f8000000 003fffff 00000000 00000000     ......?.........
    8030:	f8000000 003fffff 00000000 00000000     ......?.........
    8040:	f8000000 003fffff 00000000 00000000     ......?.........
    8050:	f8000000 003fffff 00000000 00000000     ......?.........
    8060:	f8000000 003fffff 00000000 00000000     ......?.........
    8070:	f8000000 003fffff 00000000 00000000     ......?.........
    8080:	f8000000 003fffff 00000000 00000000     ......?.........
    8090:	f8000000 003fffff 00000000 00000000     ......?.........
    80a0:	f8000000 00003fff 00000000 00000000     .....?..........
	...
    8144:	80000000 001fffff 00000000 00000000     ................
    8154:	fe000000 03ffffff 00000000 00000000     ................
    8164:	ffe00000 7fffffff 00000000 00000000     ................
    8174:	fffc0000 ffffffff 00000003 00000000     ................
    8184:	ffff8000 ffffffff 0000001f 00000000     ................
    8194:	ffffe000 ffffffff 0000007f 00000000     ................
    81a4:	fffff800 ffffffff 000001ff 00000000     ................
    81b4:	fffffe00 ffffffff 000007ff 00000000     ................
    81c4:	ffffff80 ffffffff 00001fff 00000000     ................
    81d4:	ffffffe0 ffffffff 00007fff 00000000     ................
    81e4:	fffffff0 ffffffff 0000ffff 00000000     ................
    81f4:	fffffffc ffffffff 0003ffff 00000000     ................
    8204:	7ffffffe ffe00000 0007ffff 00000000     ................
    8214:	00ffffff f0000000 000fffff 80000000     ................
    8224:	000fffff 00000000 001fffff e0000000     ................
    8234:	0001ffff 00000000 003ffff8 e0000000     ..........?.....
    8244:	00003fff 00000000 007fffc0 f0000000     .?..............
    8254:	000007ff 00000000 00fffe00 f8000000     ................
    8264:	000001ff 00000000 01fff800 fc000000     ................
    8274:	000000ff 00000000 03fff000 fe000000     ................
    8284:	0000003f 00000000 07ffc000 fe000000     ?...............
    8294:	0000001f 00000000 07ff0000 ff000000     ................
    82a4:	00000007 00000000 0ffe0000 ff800000     ................
    82b4:	00000003 00000000 1ffc0000 ff800000     ................
    82c4:	00000001 00000000 1ff80000 fc000000     ................
	...
    82dc:	03f00000 60000000 00000000 00000000     .......`........
    82ec:	00e00000 00000000 00000000 00000000     ................
	...
    8330:	40000000 00000000 00000000 00200000     ...@.......... .
    8340:	f8000000 00000000 00000000 01f00000     ................
    8350:	ff000000 00000001 00000000 0ff80000     ................
    8360:	ff800000 00000003 00000000 1ffc0000     ................
    8370:	ff000000 00000007 00000000 0ffe0000     ................
    8380:	ff000000 0000000f 00000000 0fff0000     ................
    8390:	fe000000 0000001f 00000000 07ff8000     ................
    83a0:	fc000000 0000007f 00000000 03ffe000     ................
    83b0:	fc000000 000001ff 00000000 03fff800     ................
    83c0:	f8000000 000007ff 00000000 01fffe00     ................
    83d0:	f0000000 00001fff 00000000 00ffff80     ................
    83e0:	e0000000 0000ffff 00000000 007ffff0     ................
    83f0:	c0000000 0007ffff 00000000 003ffffe     ..............?.
    8400:	80000000 007fffff e0000000 001fffff     ................
    8410:	00000000 0fffffff ff000000 000fffff     ................
    8420:	00000000 fffffffe ffffffff 0007ffff     ................
    8430:	00000000 fffffff8 ffffffff 0001ffff     ................
    8440:	00000000 fffffff0 ffffffff 0000ffff     ................
    8450:	00000000 ffffffc0 ffffffff 00003fff     .............?..
    8460:	00000000 ffffff80 ffffffff 00001fff     ................
    8470:	00000000 fffffe00 ffffffff 000007ff     ................
    8480:	00000000 fffff800 ffffffff 000001ff     ................
    8490:	00000000 ffffe000 ffffffff 0000007f     ................
    84a0:	00000000 ffff0000 ffffffff 0000000f     ................
    84b0:	00000000 fffc0000 ffffffff 00000003     ................
    84c0:	00000000 ffc00000 3fffffff 00000000     ...........?....
    84d0:	00000000 fc000000 03ffffff 00000000     ................
    84e0:	00000000 80000000 001fffff 00000000     ................
	...
    8564:	00080000 00000000 00000000 00000000     ................
    8574:	00078000 00000000 00000000 00000000     ................
    8584:	000ff000 00000000 00000000 00000000     ................
    8594:	000ffc00 00000000 00000000 00000000     ................
    85a4:	000ff800 00000000 00000000 00000000     ................
    85b4:	001ff800 00000020 00000000 00000000     .... ...........
    85c4:	001ff800 00000030 00000000 00000000     ....0...........
    85d4:	001ff000 0000007c 00000000 00000000     ....|...........
    85e4:	001ff000 000000fe 00000000 00000000     ................
    85f4:	003fe000 000000ff 00000000 00000000     ..?.............
    8604:	c03fe000 000001ff 00000000 00000000     ..?.............
    8614:	e03fe000 000003ff 00000000 00000000     ..?.............
    8624:	f07fc000 000007ff 00000000 00000000     ................
    8634:	f87fc000 000003ff 00000000 00000000     ................
    8644:	fe7f8000 000000ff 00000000 00000000     ................
    8654:	ff7f8000 0000007f 00000000 00000000     ................
    8664:	ffff8000 0000001f 00000000 00000000     ................
    8674:	ffff0000 0000000f 00000000 80000000     ................
    8684:	ffff7fff 00000003 00000000 80000000     ................
    8694:	ffffffff 00000001 00000000 80000000     ................
    86a4:	7fffffff 00000000 00000000 80000000     ................
    86b4:	1fffffff 00000000 00000000 80000000     ................
    86c4:	3fffffff 00000000 00000000 80000000     ...?............
    86d4:	7fffffff 00000000 00000000 80000000     ................
    86e4:	ffffffff 00000001 00000000 80000000     ................
    86f4:	ffffffff 00000007 00000000 80000000     ................
    8704:	fffe1fff 0000000f 00000000 00000000     ................
    8714:	ffff0000 0000003f 00000000 00000000     ....?...........
    8724:	feff0000 0000007f 00000000 00000000     ................
    8734:	fcff0000 000001ff 00000000 00000000     ................
    8744:	f8ff8000 000007ff 00000000 00000000     ................
    8754:	f0ff8000 000007ff 00000000 00000000     ................
    8764:	c07fc000 000003ff 00000000 00000000     ................
    8774:	807fc000 000001ff 00000000 00000000     ................
    8784:	007fc000 000001ff 00000000 00000000     ................
    8794:	003fe000 000000fc 00000000 00000000     ..?.............
    87a4:	003fe000 00000078 00000000 00000000     ..?.x...........
    87b4:	003ff000 00000030 00000000 00000000     ..?.0...........
    87c4:	003ff000 00000020 00000000 00000000     ..?. ...........
    87d4:	001ff800 00000000 00000000 00000000     ................
    87e4:	001ff800 00000000 00000000 00000000     ................
    87f4:	001ff000 00000000 00000000 00000000     ................
    8804:	000f8000 00000000 00000000 00000000     ................
    8814:	000c0000 00000000 00000000 00000000     ................
	...
    8864:	80000000 00000fff 00000000 00000000     ................
    8874:	80000000 00000fff 00000000 00000000     ................
    8884:	80000000 00000fff 00000000 00000000     ................
    8894:	80000000 00000fff 00000000 00000000     ................
    88a4:	80000000 00000fff 00000000 00000000     ................
    88b4:	80000000 00000fff 00000000 00000000     ................
    88c4:	80000000 00000fff 00000000 00000000     ................
    88d4:	80000000 00000fff 00000000 00000000     ................
    88e4:	80000000 00000fff 00000000 00000000     ................
    88f4:	80000000 00000fff 00000000 00000000     ................
    8904:	80000000 00000fff 00000000 00000000     ................
    8914:	80000000 00000fff 00000000 00000000     ................
    8924:	80000000 00000fff 00000000 00000000     ................
    8934:	80000000 00000fff 00000000 00000000     ................
    8944:	80000000 00000fff 00000000 00000000     ................
    8954:	80000000 00000fff 00000000 00000000     ................
    8964:	80000000 00000fff 00000000 00000000     ................
    8974:	80000000 00000fff 00000000 00000000     ................
    8984:	fffff000 ffffffff 00000000 00000000     ................
    8994:	fffff000 ffffffff 00000000 00000000     ................
    89a4:	fffff000 ffffffff 00000000 00000000     ................
    89b4:	fffff000 ffffffff 00000000 00000000     ................
    89c4:	fffff000 ffffffff 00000000 00000000     ................
    89d4:	fffff000 ffffffff 00000000 00000000     ................
    89e4:	fffff000 ffffffff 00000000 00000000     ................
    89f4:	fffff000 ffffffff 00000000 00000000     ................
    8a04:	fffff000 ffffffff 00000000 00000000     ................
    8a14:	fffff000 ffffffff 00000000 00000000     ................
    8a24:	fffff000 ffffffff 00000000 00000000     ................
    8a34:	fffff000 ffffffff 00000000 00000000     ................
    8a44:	fffff000 ffffffff 00000000 00000000     ................
    8a54:	80000000 00000fff 00000000 00000000     ................
    8a64:	80000000 00000fff 00000000 00000000     ................
    8a74:	80000000 00000fff 00000000 00000000     ................
    8a84:	80000000 00000fff 00000000 00000000     ................
    8a94:	80000000 00000fff 00000000 00000000     ................
    8aa4:	80000000 00000fff 00000000 00000000     ................
    8ab4:	80000000 00000fff 00000000 00000000     ................
    8ac4:	80000000 00000fff 00000000 00000000     ................
    8ad4:	80000000 00000fff 00000000 00000000     ................
    8ae4:	80000000 00000fff 00000000 00000000     ................
    8af4:	80000000 00000fff 00000000 00000000     ................
    8b04:	80000000 00000fff 00000000 00000000     ................
    8b14:	80000000 00000fff 00000000 00000000     ................
    8b24:	80000000 00000fff 00000000 00000000     ................
    8b34:	80000000 00000fff 00000000 00000000     ................
    8b44:	80000000 00000fff 00000000 00000000     ................
    8b54:	80000000 00000fff 00000000 00000000     ................
    8b64:	80000000 00000fff 00000000 00000000     ................
	...
    8bcc:	00100000 00000000 00000000 00000000     ................
    8bdc:	003c0000 00000000 00000000 00000000     ..<.............
    8bec:	003f0000 00000000 00000000 00000000     ..?.............
    8bfc:	007fc000 00000000 00000000 00000000     ................
    8c0c:	00fff800 00000000 00000000 f8000000     ................
    8c1c:	00ffffff 00000000 00000000 f8000000     ................
    8c2c:	01ffffff 00000000 00000000 f8000000     ................
    8c3c:	01ffffff 00000000 00000000 f8000000     ................
    8c4c:	00ffffff 00000000 00000000 f8000000     ................
    8c5c:	007fffff 00000000 00000000 f8000000     ................
    8c6c:	003fffff 00000000 00000000 f8000000     ..?.............
    8c7c:	000fffff 00000000 00000000 f8000000     ................
    8c8c:	0007ffff 00000000 00000000 f8000000     ................
    8c9c:	0001ffff 00000000 00000000 f8000000     ................
    8cac:	00007fff 00000000 00000000 f8000000     ................
    8cbc:	00001fff 00000000 00000000 f8000000     ................
    8ccc:	000003ff 00000000 00000000 00000000     ................
	...
    8d88:	00001ffc 00000000 00000000 00000000     ................
    8d98:	00001ffc 00000000 00000000 00000000     ................
    8da8:	00001ffc 00000000 00000000 00000000     ................
    8db8:	00001ffc 00000000 00000000 00000000     ................
    8dc8:	00001ffc 00000000 00000000 00000000     ................
    8dd8:	00001ffc 00000000 00000000 00000000     ................
    8de8:	00001ffc 00000000 00000000 00000000     ................
    8df8:	00001ffc 00000000 00000000 00000000     ................
    8e08:	00001ffc 00000000 00000000 00000000     ................
    8e18:	00001ffc 00000000 00000000 00000000     ................
    8e28:	00001ffc 00000000 00000000 00000000     ................
    8e38:	00001ffc 00000000 00000000 00000000     ................
    8e48:	00001ffc 00000000 00000000 00000000     ................
    8e58:	00001ffc 00000000 00000000 00000000     ................
    8e68:	00001ffc 00000000 00000000 00000000     ................
    8e78:	00001ffc 00000000 00000000 00000000     ................
    8e88:	00001ffc 00000000 00000000 00000000     ................
    8e98:	00001ffc 00000000 00000000 00000000     ................
    8ea8:	00001ffc 00000000 00000000 00000000     ................
    8eb8:	00001ffc 00000000 00000000 00000000     ................
    8ec8:	00001ffc 00000000 00000000 00000000     ................
    8ed8:	00001ffc 00000000 00000000 00000000     ................
    8ee8:	00001ffc 00000000 00000000 00000000     ................
    8ef8:	00001ffc 00000000 00000000 00000000     ................
    8f08:	00001ffc 00000000 00000000 00000000     ................
    8f18:	00001ffc 00000000 00000000 00000000     ................
    8f28:	00001ffc 00000000 00000000 00000000     ................
    8f38:	00001ffc 00000000 00000000 00000000     ................
	...
    9008:	c0000000 00000007 00000000 00000000     ................
    9018:	f0000000 0000001f 00000000 00000000     ................
    9028:	f8000000 0000003f 00000000 00000000     ....?...........
    9038:	fc000000 0000007f 00000000 00000000     ................
    9048:	fc000000 0000007f 00000000 00000000     ................
    9058:	fe000000 000000ff 00000000 00000000     ................
    9068:	fe000000 000000ff 00000000 00000000     ................
    9078:	fe000000 000000ff 00000000 00000000     ................
    9088:	fe000000 000000ff 00000000 00000000     ................
    9098:	fe000000 000000ff 00000000 00000000     ................
    90a8:	fe000000 000000ff 00000000 00000000     ................
    90b8:	fc000000 0000007f 00000000 00000000     ................
    90c8:	fc000000 0000007f 00000000 00000000     ................
    90d8:	f8000000 0000003f 00000000 00000000     ....?...........
    90e8:	f0000000 0000001f 00000000 00000000     ................
    90f8:	e0000000 0000000f 00000000 00000000     ................
	...
    917c:	00001c00 00000000 00000000 00000000     ................
    918c:	00001f80 00000000 00000000 00000000     ................
    919c:	00001ff0 00000000 00000000 00000000     ................
    91ac:	00001ffe 00000000 00000000 c0000000     ................
    91bc:	00001fff 00000000 00000000 f8000000     ................
    91cc:	00001fff 00000000 00000000 ff000000     ................
    91dc:	00001fff 00000000 00000000 ffe00000     ................
    91ec:	00001fff 00000000 00000000 fffc0000     ................
    91fc:	00001fff 00000000 00000000 ffff8000     ................
    920c:	00001fff 00000000 00000000 fffff000     ................
    921c:	000007ff 00000000 00000000 fffffe00     ................
    922c:	000000ff 00000000 00000000 ffffffc0     ................
    923c:	0000003f 00000000 00000000 fffffff8     ?...............
    924c:	00000007 00000000 00000000 ffffffff     ................
	...
    9264:	e0000000 1fffffff 00000000 00000000     ................
    9274:	fc000000 03ffffff 00000000 00000000     ................
    9284:	ff800000 007fffff 00000000 00000000     ................
    9294:	ffe00000 000fffff 00000000 00000000     ................
    92a4:	fffc0000 0001ffff 00000000 00000000     ................
    92b4:	ffff8000 00003fff 00000000 00000000     .....?..........
    92c4:	fffff000 000007ff 00000000 00000000     ................
    92d4:	fffffe00 000000ff 00000000 00000000     ................
    92e4:	ffffffc0 0000001f 00000000 00000000     ................
    92f4:	fffffff8 00000003 00000000 00000000     ................
    9304:	7fffffff 00000000 00000000 80000000     ................
    9314:	0fffffff 00000000 00000000 80000000     ................
    9324:	01ffffff 00000000 00000000 80000000     ................
    9334:	003fffff 00000000 00000000 80000000     ..?.............
    9344:	0007ffff 00000000 00000000 80000000     ................
    9354:	0000ffff 00000000 00000000 80000000     ................
    9364:	00001fff 00000000 00000000 80000000     ................
    9374:	000003ff 00000000 00000000 80000000     ................
    9384:	000000ff 00000000 00000000 80000000     ................
    9394:	0000001f 00000000 00000000 80000000     ................
    93a4:	00000003 00000000 00000000 00000000     ................
	...
    9424:	fff80000 0007ffff 00000000 00000000     ................
    9434:	ffff8000 007fffff 00000000 00000000     ................
    9444:	fffff000 03ffffff 00000000 00000000     ................
    9454:	fffffc00 0fffffff 00000000 00000000     ................
    9464:	ffffff00 3fffffff 00000000 00000000     .......?........
    9474:	ffffffc0 7fffffff 00000000 00000000     ................
    9484:	ffffffe0 ffffffff 00000001 00000000     ................
    9494:	fffffff0 ffffffff 00000003 00000000     ................
    94a4:	fffffff8 ffffffff 00000007 00000000     ................
    94b4:	fffffffc ffffffff 0000000f 00000000     ................
    94c4:	fffffffc ffffffff 0000000f 00000000     ................
    94d4:	fffffffe ffffffff 0000001f 00000000     ................
    94e4:	ffffffff ffffffff 0000003f 00000000     ........?.......
    94f4:	ffffffff ffffffff 0000003f 00000000     ........?.......
    9504:	0007ffff fff80000 0000003f 80000000     ........?.......
    9514:	00007fff ff800000 0000007f 80000000     ................
    9524:	00001fff fe000000 0000007f 80000000     ................
    9534:	00000fff fc000000 0000007f c0000000     ................
    9544:	000007ff f8000000 000000ff c0000000     ................
    9554:	000003ff f0000000 000000ff c0000000     ................
    9564:	000003ff f0000000 000000ff c0000000     ................
    9574:	000001ff e0000000 000000ff c0000000     ................
    9584:	000001ff e0000000 000000ff c0000000     ................
    9594:	000001ff e0000000 000000ff c0000000     ................
    95a4:	000001ff e0000000 000000ff c0000000     ................
    95b4:	000001ff e0000000 000000ff c0000000     ................
    95c4:	000001ff e0000000 000000ff c0000000     ................
    95d4:	000003ff f0000000 000000ff c0000000     ................
    95e4:	000003ff f0000000 000000ff c0000000     ................
    95f4:	000007ff f8000000 000000ff 80000000     ................
    9604:	00000fff fc000000 0000007f 80000000     ................
    9614:	00001fff fe000000 0000007f 80000000     ................
    9624:	00007fff ff800000 0000007f 00000000     ................
    9634:	0007ffff fff80000 0000003f 00000000     ........?.......
    9644:	ffffffff ffffffff 0000003f 00000000     ........?.......
    9654:	ffffffff ffffffff 0000003f 00000000     ........?.......
    9664:	fffffffe ffffffff 0000001f 00000000     ................
    9674:	fffffffc ffffffff 0000000f 00000000     ................
    9684:	fffffffc ffffffff 0000000f 00000000     ................
    9694:	fffffff8 ffffffff 00000007 00000000     ................
    96a4:	fffffff0 ffffffff 00000003 00000000     ................
    96b4:	ffffffe0 ffffffff 00000001 00000000     ................
    96c4:	ffffff80 ffffffff 00000000 00000000     ................
    96d4:	ffffff00 3fffffff 00000000 00000000     .......?........
    96e4:	fffffc00 0fffffff 00000000 00000000     ................
    96f4:	fffff000 03ffffff 00000000 00000000     ................
    9704:	ffff8000 007fffff 00000000 00000000     ................
    9714:	fff80000 0007ffff 00000000 00000000     ................
	...
    97f4:	001ffc00 00000000 00000000 00000000     ................
    9804:	001ffc00 00000000 00000000 00000000     ................
    9814:	000ffe00 00000000 00000000 00000000     ................
    9824:	000ffe00 00000000 00000000 00000000     ................
    9834:	000fff00 00000000 00000000 00000000     ................
    9844:	0007ff00 00000000 00000000 00000000     ................
    9854:	0007ff00 00000000 00000000 00000000     ................
    9864:	0007ff80 00000000 00000000 00000000     ................
    9874:	0003ff80 00000000 00000000 00000000     ................
    9884:	0003ff80 00000000 00000000 00000000     ................
    9894:	0003ffc0 00000000 00000000 00000000     ................
    98a4:	0003ffc0 00000000 00000000 00000000     ................
    98b4:	0001ffe0 00000000 00000000 00000000     ................
    98c4:	0001ffe0 00000000 00000000 00000000     ................
    98d4:	0001ffe0 00000000 00000000 00000000     ................
    98e4:	0000fff0 00000000 00000000 00000000     ................
    98f4:	0000fff0 00000000 00000000 00000000     ................
    9904:	fffffff0 ffffffff 0000007f 00000000     ................
    9914:	fffffff8 ffffffff 0000007f 00000000     ................
    9924:	fffffff8 ffffffff 0000007f 00000000     ................
    9934:	fffffff8 ffffffff 0000007f 00000000     ................
    9944:	fffffffc ffffffff 0000007f 00000000     ................
    9954:	fffffffc ffffffff 0000007f 00000000     ................
    9964:	fffffffe ffffffff 0000007f 00000000     ................
    9974:	fffffffe ffffffff 0000007f 00000000     ................
    9984:	fffffffe ffffffff 0000007f 00000000     ................
    9994:	ffffffff ffffffff 0000007f 00000000     ................
    99a4:	ffffffff ffffffff 0000007f 00000000     ................
    99b4:	ffffffff ffffffff 0000007f 80000000     ................
    99c4:	ffffffff ffffffff 0000007f 80000000     ................
    99d4:	ffffffff ffffffff 0000007f 80000000     ................
    99e4:	ffffffff ffffffff 0000007f 00000000     ................
	...
    9b44:	00200000 00000000 00000000 00000000     .. .............
    9b54:	003f8000 00000000 00000000 00000000     ..?.............
    9b64:	003ff000 e0000000 0000007f 00000000     ..?.............
    9b74:	003ffc00 f0000000 0000007f 00000000     ..?.............
    9b84:	003fff00 f8000000 0000007f 00000000     ..?.............
    9b94:	003fff80 fc000000 0000007f 00000000     ..?.............
    9ba4:	003fffc0 fe000000 0000007f 00000000     ..?.............
    9bb4:	003fffe0 ff000000 0000007f 00000000     ..?.............
    9bc4:	003ffff0 ffc00000 0000007f 00000000     ..?.............
    9bd4:	003ffff8 ffe00000 0000007f 00000000     ..?.............
    9be4:	003ffffc fff00000 0000007f 00000000     ..?.............
    9bf4:	003ffffc fff80000 0000007f 00000000     ..?.............
    9c04:	003ffffe fffc0000 0000007f 00000000     ..?.............
    9c14:	003ffffe fffe0000 0000007f 00000000     ..?.............
    9c24:	003fffff ffff0000 0000007f 00000000     ..?.............
    9c34:	0000ffff ffff8000 0000007f 80000000     ................
    9c44:	00003fff ffffc000 0000007f 80000000     .?..............
    9c54:	00001fff ffffe000 0000007f 80000000     ................
    9c64:	000007ff fffff000 0000007f 80000000     ................
    9c74:	000007ff fffff800 0000007f c0000000     ................
    9c84:	000003ff fffffe00 0000007f c0000000     ................
    9c94:	000003ff f7ffff00 0000007f c0000000     ................
    9ca4:	000001ff f3ffff80 0000007f c0000000     ................
    9cb4:	000001ff f1ffffc0 0000007f c0000000     ................
    9cc4:	000001ff f07fffe0 0000007f c0000000     ................
    9cd4:	000001ff f03ffff0 0000007f c0000000     ......?.........
    9ce4:	000001ff f01ffff8 0000007f c0000000     ................
    9cf4:	000001ff f00ffffc 0000007f c0000000     ................
    9d04:	000001ff f007ffff 0000007f c0000000     ................
    9d14:	800003ff f003ffff 0000007f c0000000     ................
    9d24:	c00003ff f001ffff 0000007f c0000000     ................
    9d34:	f00007ff f000ffff 0000007f 80000000     ................
    9d44:	f8000fff f0007fff 0000007f 80000000     ................
    9d54:	ff003fff f0003fff 0000007f 80000000     .?...?..........
    9d64:	fff7ffff f0001fff 0000007f 80000000     ................
    9d74:	ffffffff f0000fff 0000007f 00000000     ................
    9d84:	ffffffff f00003ff 0000007f 00000000     ................
    9d94:	ffffffff f00001ff 0000007f 00000000     ................
    9da4:	fffffffe f00000ff 0000007f 00000000     ................
    9db4:	fffffffe f000007f 0000007f 00000000     ................
    9dc4:	fffffffc f000003f 0000007f 00000000     ....?...........
    9dd4:	fffffffc f000000f 0000007f 00000000     ................
    9de4:	fffffff8 f0000007 0000007f 00000000     ................
    9df4:	fffffff0 f0000003 0000007f 00000000     ................
    9e04:	ffffffe0 f0000000 0000007f 00000000     ................
    9e14:	3fffffc0 f0000000 0000007f 00000000     ...?............
    9e24:	0fffff00 f0000000 0000007f 00000000     ................
    9e34:	03fffc00 f0000000 0000007f 00000000     ................
    9e44:	003fc000 f0000000 0000007f 00000000     ..?.............
    9e54:	00000000 f0000000 0000007f 00000000     ................
    9e64:	00000000 f0000000 0000007f 00000000     ................
	...
    9ee8:	00780000 00000000 00000000 0003c000     ..x.............
    9ef8:	07f80000 00000000 00000000 0003fc00     ................
    9f08:	1ff80000 00000000 00000000 0003ff00     ................
    9f18:	7ff80000 00000000 00000000 0003ff80     ................
    9f28:	fff80000 00000000 00000000 0003ffc0     ................
    9f38:	fff80000 00000001 00000000 0003ffe0     ................
    9f48:	fff80000 00000003 00000000 0003fff0     ................
    9f58:	fff80000 00000007 00000000 0003fff8     ................
    9f68:	fff80000 00000007 00000000 0003fffc     ................
    9f78:	fff80000 0000000f 00000000 0003fffc     ................
    9f88:	fff80000 0000001f 00000000 0003fffe     ................
    9f98:	fff80000 0000001f 00000000 0003fffe     ................
    9fa8:	fff80000 0000003f 00000000 0003ffff     ....?...........
    9fb8:	fff80000 0000003f 00000000 0003ffff     ....?...........
    9fc8:	fff00000 0000003f 80000000 0000ffff     ....?...........
    9fd8:	ff000000 0000007f 80000000 e0001fff     ................
    9fe8:	fe0000ff 0000007f 80000000 e0000fff     ................
    9ff8:	fc0000ff 0000007f 80000000 e00007ff     ................
    a008:	f80000ff 0000007f c0000000 e00003ff     ................
    a018:	f00000ff 000000ff c0000000 e00003ff     ................
    a028:	f00000ff 000000ff c0000000 e00001ff     ................
    a038:	e00000ff 000000ff c0000000 e00001ff     ................
    a048:	e00000ff 000000ff c0000000 e00001ff     ................
    a058:	e00000ff 000000ff c0000000 e00001ff     ................
    a068:	e00000ff 000000ff c0000000 e00001ff     ................
    a078:	e00000ff 000000ff c0000000 e00001ff     ................
    a088:	e00000ff 000000ff c0000000 e00001ff     ................
    a098:	e00000ff 000000ff c0000000 f00001ff     ................
    a0a8:	e00001ff 000000ff c0000000 f00003ff     ................
    a0b8:	f00001ff 000000ff c0000000 f80003ff     ................
    a0c8:	f00001ff 000000ff 80000000 f80007ff     ................
    a0d8:	f80003ff 0000007f 80000000 fc000fff     ................
    a0e8:	f80003ff 0000007f 80000000 ff001fff     ................
    a0f8:	fc0007ff 0000007f 80000000 ffe0ffff     ................
    a108:	ff001fff 0000007f 00000000 ffffffff     ................
    a118:	ffc0ffff 0000003f 00000000 ffffffff     ....?...........
    a128:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    a138:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    a148:	ffffffff 0000001f 00000000 fffffffe     ................
    a158:	fffffffb 0000001f 00000000 fffffffc     ................
    a168:	fffffff9 0000000f 00000000 fffffff8     ................
    a178:	fffffff0 00000007 00000000 7ffffff0     ................
    a188:	fffffff0 00000007 00000000 7ffffff0     ................
    a198:	ffffffe0 00000003 00000000 3fffffc0     ...............?
    a1a8:	ffffffc0 00000001 00000000 0fffff80     ................
    a1b8:	ffffff80 00000000 00000000 07ffff00     ................
    a1c8:	7fffff00 00000000 00000000 01fff800     ................
    a1d8:	1ffffe00 00000000 00000000 003fc000     ..............?.
    a1e8:	07fff800 00000000 00000000 00000000     ................
    a1f8:	00ffc000 00000000 00000000 00000000     ................
	...
    a288:	007fe000 00000000 00000000 00000000     ................
    a298:	007ff000 00000000 00000000 00000000     ................
    a2a8:	007ffc00 00000000 00000000 00000000     ................
    a2b8:	007fff00 00000000 00000000 00000000     ................
    a2c8:	007fff80 00000000 00000000 00000000     ................
    a2d8:	007fffe0 00000000 00000000 00000000     ................
    a2e8:	007ffff0 00000000 00000000 00000000     ................
    a2f8:	007ffffc 00000000 00000000 00000000     ................
    a308:	007fffff 00000000 00000000 80000000     ................
    a318:	007fffff 00000000 00000000 e0000000     ................
    a328:	007fffff 00000000 00000000 f0000000     ................
    a338:	007fffff 00000000 00000000 fc000000     ................
    a348:	007fffff 00000000 00000000 fe000000     ................
    a358:	007fffff 00000000 00000000 ff800000     ................
    a368:	007ff7ff 00000000 00000000 ffe00000     ................
    a378:	007ff1ff 00000000 00000000 fff00000     ................
    a388:	007ff0ff 00000000 00000000 fffc0000     ................
    a398:	007ff03f 00000000 00000000 fffe0000     ?...............
    a3a8:	007ff01f 00000000 00000000 ffff8000     ................
    a3b8:	007ff007 00000000 00000000 ffffe000     ................
    a3c8:	007ff001 00000000 00000000 fffff000     ................
    a3d8:	007ff000 00000000 00000000 3ffffc00     ...............?
    a3e8:	007ff000 00000000 00000000 1ffffe00     ................
    a3f8:	007ff000 00000000 00000000 07ffff80     ................
    a408:	007ff000 00000000 00000000 01ffffc0     ................
    a418:	007ff000 00000000 00000000 00fffff0     ................
    a428:	007ff000 00000000 00000000 003ffffc     ..............?.
    a438:	007ff000 00000000 00000000 001ffffe     ................
    a448:	007ff000 00000000 80000000 0007ffff     ................
    a458:	007ff000 00000000 80000000 ffffffff     ................
    a468:	ffffffff 0000007f 80000000 ffffffff     ................
    a478:	ffffffff 0000007f 80000000 ffffffff     ................
    a488:	ffffffff 0000007f 80000000 ffffffff     ................
    a498:	ffffffff 0000007f 80000000 ffffffff     ................
    a4a8:	ffffffff 0000007f 80000000 ffffffff     ................
    a4b8:	ffffffff 0000007f 80000000 ffffffff     ................
    a4c8:	ffffffff 0000007f 80000000 ffffffff     ................
    a4d8:	ffffffff 0000007f 80000000 ffffffff     ................
    a4e8:	ffffffff 0000007f 80000000 ffffffff     ................
    a4f8:	ffffffff 0000007f 80000000 ffffffff     ................
    a508:	ffffffff 0000007f 80000000 ffffffff     ................
    a518:	ffffffff 0000007f 80000000 ffffffff     ................
    a528:	ffffffff 0000007f 80000000 ffffffff     ................
    a538:	ffffffff 0000007f 00000000 00000000     ................
    a548:	007ff000 00000000 00000000 00000000     ................
    a558:	007ff000 00000000 00000000 00000000     ................
    a568:	007ff000 00000000 00000000 00000000     ................
    a578:	007ff000 00000000 00000000 00000000     ................
    a588:	007ff000 00000000 00000000 00000000     ................
    a598:	007ff000 00000000 00000000 00000000     ................
    a5a8:	007ff000 00000000 00000000 00000000     ................
    a5b8:	007ff000 00000000 00000000 00000000     ................
	...
    a648:	00300000 00000000 00000000 00000000     ..0.............
    a658:	03f00000 00000000 00000000 00000000     ................
    a668:	0ff0000f 00000000 00000000 ff800000     ................
    a678:	3ff0000f 00000000 00000000 ffffc000     ...?............
    a688:	7ff0001f 00000000 00000000 ffffffe0     ................
    a698:	fff0001f 00000000 80000000 ffffffff     ................
    a6a8:	fff0001f 00000001 80000000 ffffffff     ................
    a6b8:	fff0001f 00000003 80000000 ffffffff     ................
    a6c8:	fff0003f 00000007 80000000 ffffffff     ?...............
    a6d8:	fff0003f 0000000f 80000000 ffffffff     ?...............
    a6e8:	fff0003f 0000000f 80000000 ffffffff     ?...............
    a6f8:	fff0003f 0000001f 80000000 ffffffff     ?...............
    a708:	fff0007f 0000001f 80000000 ffffffff     ................
    a718:	fff0007f 0000003f 80000000 ffffffff     ....?...........
    a728:	ffe0003f 0000003f 80000000 ffffffff     ?...?...........
    a738:	ff00001f 0000007f 80000000 f87fffff     ................
    a748:	fe00000f 0000007f 80000000 fc001fff     ................
    a758:	f800000f 0000007f 80000000 fc0003ff     ................
    a768:	f800000f 0000007f 80000000 fe0003ff     ................
    a778:	f0000007 000000ff 80000000 fe0003ff     ................
    a788:	f0000007 000000ff 80000000 fe0003ff     ................
    a798:	e0000007 000000ff 80000000 ff0003ff     ................
    a7a8:	e0000007 000000ff 80000000 ff0003ff     ................
    a7b8:	e0000007 000000ff 80000000 ff0003ff     ................
    a7c8:	e0000007 000000ff 80000000 ff0003ff     ................
    a7d8:	e0000007 000000ff 80000000 ff0003ff     ................
    a7e8:	e0000007 000000ff 80000000 ff0003ff     ................
    a7f8:	e000000f 000000ff 80000000 ff0003ff     ................
    a808:	f000000f 000000ff 80000000 ff0003ff     ................
    a818:	f000001f 000000ff 80000000 ff0003ff     ................
    a828:	f800001f 0000007f 80000000 ff0003ff     ................
    a838:	fc00003f 0000007f 80000000 fe0003ff     ?...............
    a848:	fe0000ff 0000007f 80000000 fe0003ff     ................
    a858:	ff8001ff 0000007f 80000000 fe0003ff     ................
    a868:	fffe3fff 0000003f 80000000 fe0003ff     .?..?...........
    a878:	ffffffff 0000003f 80000000 fc0003ff     ....?...........
    a888:	ffffffff 0000001f 80000000 fc0003ff     ................
    a898:	ffffffff 0000001f 80000000 f80003ff     ................
    a8a8:	ffffffff 0000000f 80000000 f80003ff     ................
    a8b8:	ffffffff 0000000f 80000000 f00003ff     ................
    a8c8:	ffffffff 00000007 80000000 e00003ff     ................
    a8d8:	ffffffff 00000003 80000000 c00003ff     ................
    a8e8:	ffffffff 00000001 80000000 800003ff     ................
    a8f8:	ffffffff 00000000 80000000 000003ff     ................
    a908:	7fffffff 00000000 80000000 000003ff     ................
    a918:	1ffffffc 00000000 00000000 00000000     ................
    a928:	07fffff0 00000000 00000000 00000000     ................
    a938:	01ffffc0 00000000 00000000 00000000     ................
    a948:	000ff800 00000000 00000000 00000000     ................
	...
    a9e4:	c0000000 0003ffff 00000000 00000000     ................
    a9f4:	fe000000 003fffff 00000000 00000000     ......?.........
    aa04:	ffc00000 01ffffff 00000000 00000000     ................
    aa14:	fff80000 07ffffff 00000000 00000000     ................
    aa24:	fffe0000 1fffffff 00000000 00000000     ................
    aa34:	ffff8000 3fffffff 00000000 00000000     .......?........
    aa44:	ffffe000 ffffffff 00000000 00000000     ................
    aa54:	fffff000 ffffffff 00000001 00000000     ................
    aa64:	fffffc00 ffffffff 00000003 00000000     ................
    aa74:	fffffe00 ffffffff 00000007 00000000     ................
    aa84:	ffffff00 ffffffff 00000007 00000000     ................
    aa94:	ffffff80 ffffffff 0000000f 00000000     ................
    aaa4:	ffffffc0 ffffffff 0000001f 00000000     ................
    aab4:	ffffffe0 ffffffff 0000001f 00000000     ................
    aac4:	ffffffe0 fffe00ff 0000003f 00000000     ........?.......
    aad4:	f0fffff0 ffc0007f 0000003f 00000000     ........?.......
    aae4:	f83ffff8 ff00001f 0000007f 00000000     ..?.............
    aaf4:	fc0ffff8 fe00001f 0000007f 00000000     ................
    ab04:	fc03fffc f800000f 0000007f 00000000     ................
    ab14:	fe01fffc f8000007 0000007f 00000000     ................
    ab24:	fe00fffe f0000007 000000ff 00000000     ................
    ab34:	ff007ffe f0000003 000000ff 00000000     ................
    ab44:	ff003fff e0000003 000000ff 00000000     .?..............
    ab54:	ff001fff e0000003 000000ff 00000000     ................
    ab64:	ff800fff e0000003 000000ff 80000000     ................
    ab74:	ff800fff e0000003 000000ff 80000000     ................
    ab84:	ff8007ff e0000003 000000ff 80000000     ................
    ab94:	ff8007ff e0000003 000000ff 80000000     ................
    aba4:	ff8003ff f0000007 000000ff 80000000     ................
    abb4:	ff8003ff f0000007 000000ff c0000000     ................
    abc4:	ff8003ff f800000f 000000ff c0000000     ................
    abd4:	ff8003ff fc00001f 0000007f c0000000     ................
    abe4:	ff8001ff fe00003f 0000007f c0000000     ....?...........
    abf4:	ff8001ff ff8000ff 0000007f c0000000     ................
    ac04:	ff0001ff ffe003ff 0000003f c0000000     ........?.......
    ac14:	ff0001ff ffffffff 0000003f c0000000     ........?.......
    ac24:	ff0001ff ffffffff 0000003f c0000000     ........?.......
    ac34:	fe0001ff ffffffff 0000001f c0000000     ................
    ac44:	fe0001ff ffffffff 0000000f 00000000     ................
    ac54:	fc000000 ffffffff 0000000f 00000000     ................
    ac64:	fc000000 ffffffff 00000007 00000000     ................
    ac74:	f8000000 ffffffff 00000003 00000000     ................
    ac84:	f0000000 ffffffff 00000001 00000000     ................
    ac94:	e0000000 ffffffff 00000000 00000000     ................
    aca4:	c0000000 7fffffff 00000000 00000000     ................
    acb4:	00000000 3fffffff 00000000 00000000     .......?........
    acc4:	00000000 0ffffffc 00000000 00000000     ................
    acd4:	00000000 03fffff0 00000000 00000000     ................
    ace4:	00000000 007fff80 00000000 00000000     ................
	...
    ad60:	80000000 000003ff 00000000 00000000     ................
    ad70:	80000000 000003ff 00000000 00000000     ................
    ad80:	80000000 000003ff 00000000 00000000     ................
    ad90:	80000000 000003ff 00000000 00000000     ................
    ada0:	80000000 000003ff 00000000 00000000     ................
    adb0:	80000000 000003ff 00000000 00000000     ................
    adc0:	80000000 000003ff 00000000 00000000     ................
    add0:	80000000 000003ff 00000000 00000000     ................
    ade0:	80000000 000003ff 00000000 00000040     ............@...
    adf0:	80000000 000003ff 00000000 00000070     ............p...
    ae00:	80000000 000003ff 00000000 0000007e     ............~...
    ae10:	80000000 000003ff 80000000 0000007f     ................
    ae20:	80000000 000003ff e0000000 0000007f     ................
    ae30:	80000000 000003ff f8000000 0000007f     ................
    ae40:	80000000 000003ff fe000000 0000007f     ................
    ae50:	80000000 000003ff ffc00000 0000007f     ................
    ae60:	80000000 000003ff fff00000 0000007f     ................
    ae70:	80000000 000003ff fffc0000 0000007f     ................
    ae80:	80000000 000003ff ffff0000 0000007f     ................
    ae90:	80000000 000003ff ffffc000 0000007f     ................
    aea0:	80000000 000003ff fffff800 0000007f     ................
    aeb0:	80000000 000003ff fffffe00 0000007f     ................
    aec0:	80000000 000003ff ffffff80 0000007f     ................
    aed0:	80000000 000003ff ffffffe0 0000003f     ............?...
    aee0:	80000000 000003ff fffffff8 00000007     ................
    aef0:	80000000 000003ff ffffffff 00000001     ................
    af00:	80000000 c00003ff 7fffffff 00000000     ................
    af10:	80000000 f00003ff 0fffffff 00000000     ................
    af20:	80000000 fc0003ff 03ffffff 00000000     ................
    af30:	80000000 ff0003ff 00ffffff 00000000     ................
    af40:	80000000 ffe003ff 001fffff 00000000     ................
    af50:	80000000 fff803ff 0007ffff 00000000     ................
    af60:	80000000 fffe03ff 0001ffff 00000000     ................
    af70:	80000000 ffff83ff 00007fff 00000000     ................
    af80:	80000000 ffffe3ff 00000fff 00000000     ................
    af90:	80000000 ffffffff 000003ff 00000000     ................
    afa0:	80000000 ffffffff 000000ff 00000000     ................
    afb0:	80000000 ffffffff 0000001f 00000000     ................
    afc0:	80000000 ffffffff 00000007 00000000     ................
    afd0:	80000000 ffffffff 00000001 00000000     ................
    afe0:	80000000 3fffffff 00000000 00000000     .......?........
    aff0:	80000000 0fffffff 00000000 00000000     ................
    b000:	80000000 03ffffff 00000000 00000000     ................
    b010:	80000000 007fffff 00000000 00000000     ................
    b020:	80000000 001fffff 00000000 00000000     ................
    b030:	80000000 0007ffff 00000000 00000000     ................
    b040:	80000000 0000ffff 00000000 00000000     ................
    b050:	80000000 00003fff 00000000 00000000     .....?..........
    b060:	80000000 00000fff 00000000 00000000     ................
    b070:	80000000 000001ff 00000000 00000000     ................
    b080:	80000000 0000007f 00000000 00000000     ................
	...
    b128:	01ffe000 00000000 00000000 001fc000     ................
    b138:	0ffff800 00000000 00000000 00fffc00     ................
    b148:	3ffffe00 00000000 00000000 03ffff00     ...?............
    b158:	7fffff80 00000000 00000000 0fffff80     ................
    b168:	ffffffc0 00000001 00000000 1fffffe0     ................
    b178:	ffffffe0 00000003 00000000 3ffffff0     ...............?
    b188:	fffffff0 00000007 00000000 7ffffff8     ................
    b198:	fffffff8 00000007 00000000 fffffffc     ................
    b1a8:	fffffff8 0000000f 00000000 fffffffc     ................
    b1b8:	fffffffc 0000001f 00000000 fffffffe     ................
    b1c8:	fffffffd 0000001f 00000000 fffffffe     ................
    b1d8:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    b1e8:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    b1f8:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    b208:	ffc03fff 0000007f 80000000 ffffffff     .?..............
    b218:	ff000fff 0000007f 80000000 ff801fff     ................
    b228:	fc0003ff 0000007f 80000000 fe000fff     ................
    b238:	f80001ff 0000007f c0000000 fc0007ff     ................
    b248:	f00000ff 000000ff c0000000 f80003ff     ................
    b258:	f00000ff 000000ff c0000000 f80003ff     ................
    b268:	f00000ff 000000ff c0000000 f00001ff     ................
    b278:	e000007f 000000ff c0000000 f00001ff     ................
    b288:	e000007f 000000ff c0000000 f00001ff     ................
    b298:	e000007f 000000ff c0000000 f00001ff     ................
    b2a8:	e000007f 000000ff c0000000 f00001ff     ................
    b2b8:	e000007f 000000ff c0000000 f00001ff     ................
    b2c8:	e000007f 000000ff c0000000 f80003ff     ................
    b2d8:	e00000ff 000000ff c0000000 f80003ff     ................
    b2e8:	f00000ff 000000ff c0000000 fc0007ff     ................
    b2f8:	f00001ff 000000ff 80000000 fe000fff     ................
    b308:	f80001ff 0000007f 80000000 ff803fff     .............?..
    b318:	fc0003ff 0000007f 80000000 ffffffff     ................
    b328:	ff000fff 0000007f 80000000 ffffffff     ................
    b338:	ffc03fff 0000007f 00000000 ffffffff     .?..............
    b348:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    b358:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    b368:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    b378:	fffffffd 0000001f 00000000 fffffffc     ................
    b388:	fffffffc 0000001f 00000000 fffffffc     ................
    b398:	fffffff8 0000000f 00000000 7ffffff8     ................
    b3a8:	fffffff8 00000007 00000000 3ffffff0     ...............?
    b3b8:	fffffff0 00000007 00000000 1fffffe0     ................
    b3c8:	ffffffe0 00000003 00000000 0fffff80     ................
    b3d8:	ffffffc0 00000001 00000000 03ffff00     ................
    b3e8:	7fffff80 00000000 00000000 00fffc00     ................
    b3f8:	3ffffe00 00000000 00000000 001f8000     ...?............
    b408:	0ffff800 00000000 00000000 00000000     ................
    b418:	01ffe000 00000000 00000000 00000000     ................
	...
    b4b4:	07f80000 00000000 00000000 00000000     ................
    b4c4:	ffff8000 00000000 00000000 00000000     ................
    b4d4:	fffff000 00000007 00000000 00000000     ................
    b4e4:	fffffc00 0000001f 00000000 00000000     ................
    b4f4:	ffffff00 0000007f 00000000 00000000     ................
    b504:	ffffff80 000000ff 00000000 00000000     ................
    b514:	ffffffc0 000001ff 00000000 00000000     ................
    b524:	ffffffe0 000003ff 00000000 00000000     ................
    b534:	fffffff0 000007ff 00000000 00000000     ................
    b544:	fffffff8 00000fff 00000000 00000000     ................
    b554:	fffffffc 00000fff 00000000 00000000     ................
    b564:	fffffffc e0001fff 000000ff 00000000     ................
    b574:	fffffffe e0001fff 000000ff 00000000     ................
    b584:	ffffffff e0003fff 000000ff 00000000     .....?..........
    b594:	ff1fffff e0003fff 000000ff 00000000     .....?..........
    b5a4:	e000ffff e0003fff 000000ff 80000000     .....?..........
    b5b4:	80003fff e0007fff 000000ff 80000000     .?..............
    b5c4:	00001fff e0007ffe 000000ff 80000000     ................
    b5d4:	000007ff f0007ffc 000000ff c0000000     ................
    b5e4:	000007ff f0007ff8 0000007f c0000000     ................
    b5f4:	000003ff f0007ff8 0000007f c0000000     ................
    b604:	000001ff f0007ff0 0000007f c0000000     ................
    b614:	000001ff f8007ff0 0000007f c0000000     ................
    b624:	000001ff f8007ff0 0000007f c0000000     ................
    b634:	000001ff fc007ff0 0000003f c0000000     ........?.......
    b644:	000001ff fc007ff0 0000003f c0000000     ........?.......
    b654:	000001ff fe003ff0 0000003f c0000000     .....?..?.......
    b664:	000003ff ff003ff0 0000001f c0000000     .....?..........
    b674:	000003ff ff003ff8 0000001f 80000000     .....?..........
    b684:	000007ff ffc01ff8 0000001f 80000000     ................
    b694:	00000fff ffe00ffc 0000000f 80000000     ................
    b6a4:	00001fff fff00ffc 0000000f 80000000     ................
    b6b4:	00003fff fffe07fe 00000007 00000000     .?..............
    b6c4:	0001ffff ffffc3ff 00000003 00000000     ................
    b6d4:	ffffffff ffffffff 00000003 00000000     ................
    b6e4:	fffffffe ffffffff 00000001 00000000     ................
    b6f4:	fffffffe ffffffff 00000000 00000000     ................
    b704:	fffffffc 7fffffff 00000000 00000000     ................
    b714:	fffffff8 3fffffff 00000000 00000000     .......?........
    b724:	fffffff8 1fffffff 00000000 00000000     ................
    b734:	fffffff0 0fffffff 00000000 00000000     ................
    b744:	ffffffe0 07ffffff 00000000 00000000     ................
    b754:	ffffff80 01ffffff 00000000 00000000     ................
    b764:	ffffff00 00ffffff 00000000 00000000     ................
    b774:	fffffc00 003fffff 00000000 00000000     ......?.........
    b784:	fffff000 0007ffff 00000000 00000000     ................
    b794:	ffffc000 0001ffff 00000000 00000000     ................
    b7a4:	fffe0000 00001fff 00000000 00000000     ................
    b7b4:	ff800000 0000003f 00000000 00000000     ....?...........
	...
    b874:	07c00000 c0000000 00000007 00000000     ................
    b884:	1ff00000 f0000000 0000001f 00000000     ................
    b894:	3ff80000 f8000000 0000003f 00000000     ...?....?.......
    b8a4:	7ffc0000 fc000000 0000007f 00000000     ................
    b8b4:	7ffc0000 fc000000 0000007f 00000000     ................
    b8c4:	fffe0000 fe000000 000000ff 00000000     ................
    b8d4:	fffe0000 fe000000 000000ff 00000000     ................
    b8e4:	fffe0000 fe000000 000000ff 00000000     ................
    b8f4:	fffe0000 fe000000 000000ff 00000000     ................
    b904:	fffe0000 fe000000 000000ff 00000000     ................
    b914:	fffe0000 fe000000 000000ff 00000000     ................
    b924:	7ffc0000 fc000000 0000007f 00000000     ................
    b934:	7ffc0000 fc000000 0000007f 00000000     ................
    b944:	3ff80000 f8000000 0000003f 00000000     ...?....?.......
    b954:	1ff00000 f0000000 0000001f 00000000     ................
    b964:	0fe00000 e0000000 0000000f 00000000     ................
	...
    ba1c:	00100000 00000000 00000000 00000000     ................
    ba2c:	003c0000 00000000 07c00000 00000000     ..<.............
    ba3c:	003f0000 00000000 1ff00000 00000000     ..?.............
    ba4c:	007fc000 00000000 3ff80000 00000000     ...........?....
    ba5c:	00fff800 00000000 7ffc0000 f8000000     ................
    ba6c:	00ffffff 00000000 7ffc0000 f8000000     ................
    ba7c:	01ffffff 00000000 fffe0000 f8000000     ................
    ba8c:	01ffffff 00000000 fffe0000 f8000000     ................
    ba9c:	00ffffff 00000000 fffe0000 f8000000     ................
    baac:	007fffff 00000000 fffe0000 f8000000     ................
    babc:	003fffff 00000000 fffe0000 f8000000     ..?.............
    bacc:	000fffff 00000000 fffe0000 f8000000     ................
    badc:	0007ffff 00000000 7ffc0000 f8000000     ................
    baec:	0001ffff 00000000 7ffc0000 f8000000     ................
    bafc:	00007fff 00000000 3ff80000 f8000000     ...........?....
    bb0c:	00001fff 00000000 1ff00000 f8000000     ................
    bb1c:	000003ff 00000000 0fe00000 00000000     ................
	...
    bbb8:	00007ff8 00000000 00000000 00000000     ................
    bbc8:	0000fffc 00000000 00000000 00000000     ................
    bbd8:	0000fffc 00000000 00000000 00000000     ................
    bbe8:	0001fffe 00000000 00000000 00000000     ................
    bbf8:	0001fffe 00000000 00000000 00000000     ................
    bc08:	0001fffe 00000000 00000000 00000000     ................
    bc18:	0003ffff 00000000 00000000 00000000     ................
    bc28:	0003ffff 00000000 00000000 80000000     ................
    bc38:	0007ffff 00000000 00000000 80000000     ................
    bc48:	0007ffff 00000000 00000000 80000000     ................
    bc58:	0007ffff 00000000 00000000 c0000000     ................
    bc68:	000fffff 00000000 00000000 c0000000     ................
    bc78:	000fffff 00000000 00000000 e0000000     ................
    bc88:	001fffff 00000000 00000000 e0000000     ................
    bc98:	001fffff 00000000 00000000 f0000000     ................
    bca8:	003ffdff 00000000 00000000 f0000000     ..?.............
    bcb8:	003ffcff 00000000 00000000 f0000000     ..?.............
    bcc8:	003ffcff 00000000 00000000 f8000000     ..?.............
    bcd8:	007ff87f 00000000 00000000 f8000000     ................
    bce8:	007ff87f 00000000 00000000 fc000000     ................
    bcf8:	00fff87f 00000000 00000000 fc000000     ................
    bd08:	00fff03f 00000000 00000000 fe000000     ?...............
    bd18:	01fff03f 00000000 00000000 fe000000     ?...............
    bd28:	01fff03f 00000000 00000000 fe000000     ?...............
    bd38:	01ffe01f 00000000 00000000 ff000000     ................
    bd48:	03ffe01f 00000000 00000000 ff000000     ................
    bd58:	03ffc01f 00000000 00000000 ff800000     ................
    bd68:	07ffc00f 00000000 00000000 ff800000     ................
    bd78:	07ffc00f 00000000 00000000 ffc00000     ................
    bd88:	0fff8007 00000000 00000000 ffc00000     ................
    bd98:	0fff8007 00000000 00000000 ffc00000     ................
    bda8:	0fff8007 00000000 00000000 ffe00000     ................
    bdb8:	1fff0003 00000000 00000000 ffe00000     ................
    bdc8:	1fff0003 00000000 00000000 fff00000     ................
    bdd8:	3fff0003 00000000 00000000 fff00000     ...?............
    bde8:	3ffe0001 00000000 00000000 fff80000     ...?............
    bdf8:	7ffe0001 00000000 00000000 fff80000     ................
    be08:	7ffe0001 00000000 00000000 fff80000     ................
    be18:	7ffc0000 00000000 00000000 fffc0000     ................
    be28:	fffc0000 00000000 00000000 7ffc0000     ................
    be38:	fff80000 00000000 00000000 7ffe0000     ................
    be48:	fff80000 00000001 00000000 00000000     ................
	...
    bf24:	ff800000 007ff003 00000000 00000000     ................
    bf34:	ff800000 007ff003 00000000 00000000     ................
    bf44:	ff800000 007ff003 00000000 00000000     ................
    bf54:	ff800000 007ff003 00000000 00000000     ................
    bf64:	ff800000 007ff003 00000000 00000000     ................
    bf74:	ff800000 007ff003 00000000 00000000     ................
    bf84:	ff800000 007ff003 00000000 00000000     ................
    bf94:	ff800000 007ff003 00000000 00000000     ................
    bfa4:	ff800000 007ff003 00000000 00000000     ................
    bfb4:	ff800000 007ff003 00000000 00000000     ................
    bfc4:	ff800000 007ff003 00000000 00000000     ................
    bfd4:	ff800000 007ff003 00000000 00000000     ................
    bfe4:	ff800000 007ff003 00000000 00000000     ................
    bff4:	ff800000 007ff003 00000000 00000000     ................
    c004:	ff800000 007ff003 00000000 00000000     ................
    c014:	ff800000 007ff003 00000000 00000000     ................
    c024:	ff800000 007ff003 00000000 00000000     ................
    c034:	ff800000 007ff003 00000000 00000000     ................
    c044:	ff800000 007ff003 00000000 00000000     ................
    c054:	ff800000 007ff003 00000000 00000000     ................
    c064:	ff800000 007ff003 00000000 00000000     ................
    c074:	ff800000 007ff003 00000000 00000000     ................
    c084:	ff800000 007ff003 00000000 00000000     ................
    c094:	ff800000 007ff003 00000000 00000000     ................
    c0a4:	ff800000 007ff003 00000000 00000000     ................
    c0b4:	ff800000 007ff003 00000000 00000000     ................
    c0c4:	ff800000 007ff003 00000000 00000000     ................
    c0d4:	ff800000 007ff003 00000000 00000000     ................
    c0e4:	ff800000 007ff003 00000000 00000000     ................
    c0f4:	ff800000 007ff003 00000000 00000000     ................
    c104:	ff800000 007ff003 00000000 00000000     ................
    c114:	ff800000 007ff003 00000000 00000000     ................
    c124:	ff800000 007ff003 00000000 00000000     ................
    c134:	ff800000 007ff003 00000000 00000000     ................
    c144:	ff800000 007ff003 00000000 00000000     ................
    c154:	ff800000 007ff003 00000000 00000000     ................
    c164:	ff800000 007ff003 00000000 00000000     ................
    c174:	ff800000 007ff003 00000000 00000000     ................
    c184:	ff800000 007ff003 00000000 00000000     ................
    c194:	ff800000 007ff003 00000000 00000000     ................
    c1a4:	ff800000 007ff003 00000000 00000000     ................
    c1b4:	ff800000 007ff003 00000000 00000000     ................
    c1c4:	ff800000 007ff003 00000000 00000000     ................
    c1d4:	ff800000 007ff003 00000000 00000000     ................
	...
    c2b4:	7ffe0000 fff80000 00000001 00000000     ................
    c2c4:	7ffc0000 fff80000 00000000 00000000     ................
    c2d4:	fffc0000 fffc0000 00000000 00000000     ................
    c2e4:	fff80000 7ffc0000 00000000 00000000     ................
    c2f4:	fff80000 7ffc0000 00000000 00000000     ................
    c304:	fff80000 7ffe0001 00000000 00000000     ................
    c314:	fff00000 3ffe0001 00000000 00000000     .......?........
    c324:	fff00000 3fff0001 00000000 00000000     .......?........
    c334:	ffe00000 1fff0003 00000000 00000000     ................
    c344:	ffe00000 1fff0003 00000000 00000000     ................
    c354:	ffe00000 1fff8007 00000000 00000000     ................
    c364:	ffc00000 0fff8007 00000000 00000000     ................
    c374:	ffc00000 0fff8007 00000000 00000000     ................
    c384:	ff800000 07ffc00f 00000000 00000000     ................
    c394:	ff800000 07ffc00f 00000000 00000000     ................
    c3a4:	ff000000 03ffc00f 00000000 00000000     ................
    c3b4:	ff000000 03ffe01f 00000000 00000000     ................
    c3c4:	ff000000 03ffe01f 00000000 00000000     ................
    c3d4:	fe000000 01ffe01f 00000000 00000000     ................
    c3e4:	fe000000 01fff03f 00000000 00000000     ....?...........
    c3f4:	fc000000 00fff03f 00000000 00000000     ....?...........
    c404:	fc000000 00fff83f 00000000 00000000     ....?...........
    c414:	f8000000 007ff87f 00000000 00000000     ................
    c424:	f8000000 007ff87f 00000000 00000000     ................
    c434:	f8000000 007ffc7f 00000000 00000000     ................
    c444:	f0000000 003ffcff 00000000 00000000     ......?.........
    c454:	f0000000 003ffcff 00000000 00000000     ......?.........
    c464:	e0000000 001fffff 00000000 00000000     ................
    c474:	e0000000 001fffff 00000000 00000000     ................
    c484:	e0000000 000fffff 00000000 00000000     ................
    c494:	c0000000 000fffff 00000000 00000000     ................
    c4a4:	c0000000 000fffff 00000000 00000000     ................
    c4b4:	80000000 0007ffff 00000000 00000000     ................
    c4c4:	80000000 0007ffff 00000000 00000000     ................
    c4d4:	00000000 0003ffff 00000000 00000000     ................
    c4e4:	00000000 0003ffff 00000000 00000000     ................
    c4f4:	00000000 0003ffff 00000000 00000000     ................
    c504:	00000000 0001fffe 00000000 00000000     ................
    c514:	00000000 0001fffe 00000000 00000000     ................
    c524:	00000000 0000fffc 00000000 00000000     ................
    c534:	00000000 0000fffc 00000000 00000000     ................
    c544:	00000000 00007ff8 00000000 00000000     ................
    c554:	00000000 00007ff8 00000000 00000000     ................
	...
    c5b4:	0003c000 00000000 00000000 00000000     ................
    c5c4:	0003fc00 00000000 00000000 00000000     ................
    c5d4:	0003ff00 00000000 00000000 00000000     ................
    c5e4:	0003ffc0 00000000 00000000 00000000     ................
    c5f4:	0003ffe0 00000000 00000000 00000000     ................
    c604:	0003fff0 00000000 00000000 00000000     ................
    c614:	0003fff8 00000000 00000000 00000000     ................
    c624:	0003fffc 00000000 00000000 00000000     ................
    c634:	0003fffc 00000000 00000000 00000000     ................
    c644:	0003fffe 00000000 00000000 00000000     ................
    c654:	0003ffff 00000000 00000000 00000000     ................
    c664:	0003ffff 00000000 00000000 00000000     ................
    c674:	0003ffff 00000000 00000000 80000000     ................
    c684:	0003ffff 00000000 00000000 80000000     ................
    c694:	0001ffff e0000000 0000000f 80000000     ................
    c6a4:	00001fff f801fc00 0000003f 80000000     ........?.......
    c6b4:	00000fff f801ffc0 0000007f c0000000     ................
    c6c4:	000007ff fc01fff0 0000007f c0000000     ................
    c6d4:	000003ff fe01fff8 000000ff c0000000     ................
    c6e4:	000003ff fe01fffe 000000ff c0000000     ................
    c6f4:	000001ff fe01ffff 000000ff c0000000     ................
    c704:	800001ff fe01ffff 000000ff c0000000     ................
    c714:	c00001ff fe01ffff 000000ff c0000000     ................
    c724:	e00001ff fe01ffff 000000ff c0000000     ................
    c734:	f00001ff fe01ffff 000000ff c0000000     ................
    c744:	f80001ff fc01ffff 0000007f c0000000     ................
    c754:	fc0003ff fc01ffff 0000007f c0000000     ................
    c764:	fe0003ff f801ffff 0000003f c0000000     ........?.......
    c774:	ff0007ff e00007ff 0000000f 80000000     ................
    c784:	ffc01fff 000001ff 00000001 80000000     ................
    c794:	ffffffff 0000007f 00000000 80000000     ................
    c7a4:	ffffffff 0000003f 00000000 80000000     ....?...........
    c7b4:	ffffffff 0000001f 00000000 00000000     ................
    c7c4:	ffffffff 0000000f 00000000 00000000     ................
    c7d4:	ffffffff 00000007 00000000 00000000     ................
    c7e4:	fffffffe 00000003 00000000 00000000     ................
    c7f4:	fffffffe 00000001 00000000 00000000     ................
    c804:	fffffffc 00000000 00000000 00000000     ................
    c814:	7ffffff8 00000000 00000000 00000000     ................
    c824:	3ffffff0 00000000 00000000 00000000     ...?............
    c834:	1fffffe0 00000000 00000000 00000000     ................
    c844:	07ffffc0 00000000 00000000 00000000     ................
    c854:	03ffff00 00000000 00000000 00000000     ................
    c864:	007ffc00 00000000 00000000 00000000     ................
    c874:	00070000 00000000 00000000 00000000     ................
	...
    c8f8:	07fff800 00000000 00000000 00000000     ................
    c908:	ffffffe0 00000001 00000000 00000000     ................
    c918:	fffffffe 0000000f 00000000 c0000000     ................
    c928:	ffffffff 0000007f 00000000 f8000000     ................
    c938:	ffffffff 000001ff 00000000 fe000000     ................
    c948:	ffffffff 000007ff 00000000 ff800000     ................
    c958:	ffffffff 00001fff 00000000 ffe00000     ................
    c968:	ffffffff 00003fff 00000000 fff00000     .....?..........
    c978:	ffffffff 0000ffff 00000000 fffc0000     ................
    c988:	ffffffff 0001ffff 00000000 fffe0000     ................
    c998:	e00001ff 0003ffff 00000000 ffff0000     ................
    c9a8:	0000000f 0007fffe 00000000 ffff8000     ................
    c9b8:	00000001 000ffff0 00000000 3fffe000     ...............?
    c9c8:	00000000 001fffc0 00000000 0ffff000     ................
    c9d8:	00000000 003fff00 00000000 03fff800     ......?.........
    c9e8:	00000000 003ffc00 00000000 00fff800     ......?.........
    c9f8:	00000000 007ff800 00000000 007ffc00     ................
    ca08:	00000000 00fff000 00000000 001ffe00     ................
    ca18:	00000000 00ffe000 00000000 000fff00     ................
    ca28:	00000000 01ffc000 00000000 0007ff00     ................
    ca38:	00000000 01ff8000 00000000 0003ff80     ................
    ca48:	01fc0000 03ff0000 00000000 0001ffc0     ................
    ca58:	3ffff000 03fe0000 00000000 0000ffc0     ...?............
    ca68:	ffffff00 03fe0000 00000000 00007fe0     ................
    ca78:	ffffffc0 07fc0003 00000000 00003fe0     .............?..
    ca88:	fffffff0 07fc0007 00000000 00003ff0     .............?..
    ca98:	fffffffc 07f8000f 00000000 00001ff0     ................
    caa8:	ffffffff 0ff8001f 00000000 80001ff0     ................
    cab8:	ffffffff 0ff8003f 00000000 e0000ff8     ....?...........
    cac8:	ffffffff 0ff0007f 00000000 f0000ff8     ................
    cad8:	ffffffff 0ff0007f 00000000 f80007f8     ................
    cae8:	ffffffff 0ff0007f 00000000 fc0007fc     ................
    caf8:	ff03ffff 1ff000ff 00000000 fc0003fc     ................
    cb08:	f00007ff 1fe000ff 00000000 fe0003fc     ................
    cb18:	c00000ff 1fe000ff 00000000 ff0003fc     ................
    cb28:	8000001f 1fe000ff 00000000 ff0003fc     ................
    cb38:	80000007 1fe000ff 00000000 ff8001fe     ................
    cb48:	00000003 1fe000ff 00000000 ff8001fe     ................
    cb58:	00000001 1fe000ff 00000000 ff8001fe     ................
    cb68:	00000000 1fe000ff 00000000 7fc001fe     ................
    cb78:	00000000 1fe0007f 00000000 7fc001fe     ................
    cb88:	80000000 1fe0007f 00000000 3fc001fe     ...............?
    cb98:	80000000 1fe0007f 00000000 3fc001fe     ...............?
    cba8:	c0000000 1fe0003f 00000000 3fc001fe     ....?..........?
    cbb8:	e0000000 1fe0001f 00000000 3fc001fe     ...............?
    cbc8:	f8000000 1fe0001f 00000000 3fc001fe     ...............?
    cbd8:	fe000000 1ff0000f 00000000 3fc001fe     ...............?
    cbe8:	fff00000 0ff00007 00000000 3fc001fe     ...............?
    cbf8:	ffffff00 0ff00003 00000000 ffc001fe     ................
    cc08:	ffffffff 0ff00007 00000000 ff8003fe     ................
    cc18:	ffffffff 0ff0000f 00000000 ff8003fc     ................
    cc28:	ffffffff 0ff8001f 00000000 ff8003fc     ................
    cc38:	ffffffff 07f8003f 00000000 ff0003fc     ....?...........
    cc48:	ffffffff 07f8007f 00000000 ff0007fc     ................
    cc58:	ffffffff 07fc007f 00000000 fe0007fc     ................
    cc68:	ffffffff 03fc007f 00000000 fe0007f8     ................
    cc78:	ffffffff 03fc00ff 00000000 fc000ff8     ................
    cc88:	c00fffff 01c000ff 00000000 f8000ff8     ................
    cc98:	000001ff 000000ff 00000000 18001ff0     ................
    cca8:	00000000 000000ff 00000000 00001ff0     ................
    ccb8:	00000000 000000fe 00000000 00003fe0     .............?..
    ccc8:	00000000 000000fe 00000000 00007fe0     ................
    ccd8:	00000000 000000fe 00000000 0000ffc0     ................
    cce8:	00000000 000000fe 00000000 0000ffc0     ................
    ccf8:	00000000 000000fe 00000000 0003ff80     ................
    cd08:	00000000 000000ff 00000000 0007ff80     ................
    cd18:	00000000 0000007f 00000000 000fff00     ................
    cd28:	80000000 0000007f 00000000 003ffe00     ..............?.
    cd38:	c0000000 0000007f 00000000 007ffc00     ................
    cd48:	f0000000 0000003f 00000000 03fff800     ....?...........
    cd58:	fc000000 0000003f 00000000 0ffff000     ....?...........
    cd68:	ff000000 0000001f 00000000 ffffe000     ................
    cd78:	fff00001 0000000f 00000000 ffffc000     ................
    cd88:	ffffffff 00000007 00000000 ffff8000     ................
    cd98:	ffffffff 00000003 00000000 fffe0000     ................
    cda8:	ffffffff 00000001 00000000 fffc0000     ................
    cdb8:	ffffffff 00000000 00000000 fff00000     ................
    cdc8:	3fffffff 00000000 00000000 ffc00000     ...?............
    cdd8:	0fffffff 00000000 00000000 fe000000     ................
    cde8:	03ffffff 00000000 00000000 f0000000     ................
    cdf8:	007fffff 00000000 00000000 00000000     ................
    ce08:	0003fffe 00000000 00000000 00000000     ................
	...
    ce5c:	00000040 00000000 00000000 00000000     @...............
    ce6c:	00000070 00000000 00000000 00000000     p...............
    ce7c:	0000007e 00000000 00000000 c0000000     ~...............
    ce8c:	0000007f 00000000 00000000 f0000000     ................
    ce9c:	0000007f 00000000 00000000 fe000000     ................
    ceac:	0000007f 00000000 00000000 ffc00000     ................
    cebc:	0000007f 00000000 00000000 fff00000     ................
    cecc:	0000007f 00000000 00000000 fffe0000     ................
    cedc:	0000007f 00000000 00000000 ffffc000     ................
    ceec:	0000007f 00000000 00000000 fffff000     ................
    cefc:	0000007f 00000000 00000000 fffffe00     ................
    cf0c:	0000007f 00000000 00000000 ffffffc0     ................
    cf1c:	0000007f 00000000 00000000 fffffff0     ................
    cf2c:	0000007f 00000000 00000000 fffffffe     ................
    cf3c:	0000007f 00000000 c0000000 ffffffff     ................
    cf4c:	0000007f 00000000 f8000000 ffffffff     ................
    cf5c:	0000003f 00000000 fe000000 ffffffff     ?...............
    cf6c:	00000003 00000000 ffc00000 7fffffff     ................
	...
    cf84:	fff80000 0fffffff 00000000 00000000     ................
    cf94:	fffe0000 01ffffff 00000000 00000000     ................
    cfa4:	ffffc000 007fffff 00000000 00000000     ................
    cfb4:	fffff800 007fffff 00000000 00000000     ................
    cfc4:	fffffe00 007fffff 00000000 00000000     ................
    cfd4:	ffffffc0 007fffff 00000000 00000000     ................
    cfe4:	fffffff8 007ff7ff 00000000 00000000     ................
    cff4:	fffffffe 007ff0ff 00000000 80000000     ................
    d004:	ffffffff 007ff01f 00000000 80000000     ................
    d014:	ffffffff 007ff003 00000000 80000000     ................
    d024:	7fffffff 007ff000 00000000 80000000     ................
    d034:	0fffffff 007ff000 00000000 80000000     ................
    d044:	01ffffff 007ff000 00000000 80000000     ................
    d054:	003fffff 007ff000 00000000 80000000     ..?.............
    d064:	0007ffff 007ff000 00000000 80000000     ................
    d074:	0007ffff 007ff000 00000000 80000000     ................
    d084:	003fffff 007ff000 00000000 80000000     ..?.............
    d094:	01ffffff 007ff000 00000000 80000000     ................
    d0a4:	0fffffff 007ff000 00000000 80000000     ................
    d0b4:	7fffffff 007ff000 00000000 80000000     ................
    d0c4:	ffffffff 007ff003 00000000 80000000     ................
    d0d4:	ffffffff 007ff01f 00000000 00000000     ................
    d0e4:	fffffffe 007ff0ff 00000000 00000000     ................
    d0f4:	fffffff0 007ff7ff 00000000 00000000     ................
    d104:	ffffffc0 007fffff 00000000 00000000     ................
    d114:	fffffe00 007fffff 00000000 00000000     ................
    d124:	fffff000 007fffff 00000000 00000000     ................
    d134:	ffffc000 007fffff 00000000 00000000     ................
    d144:	fffe0000 01ffffff 00000000 00000000     ................
    d154:	fff00000 0fffffff 00000000 00000000     ................
    d164:	ffc00000 7fffffff 00000000 00000000     ................
    d174:	fe000000 ffffffff 00000003 00000000     ................
    d184:	f0000000 ffffffff 0000003f 00000000     ........?.......
    d194:	c0000000 ffffffff 0000007f 00000000     ................
    d1a4:	00000000 fffffffe 0000007f 00000000     ................
    d1b4:	00000000 fffffff0 0000007f 00000000     ................
    d1c4:	00000000 ffffffc0 0000007f 00000000     ................
    d1d4:	00000000 fffffe00 0000007f 00000000     ................
    d1e4:	00000000 fffff000 0000007f 00000000     ................
    d1f4:	00000000 ffffc000 0000007f 00000000     ................
    d204:	00000000 fffe0000 0000007f 00000000     ................
    d214:	00000000 fff00000 0000007f 00000000     ................
    d224:	00000000 ff800000 0000007f 00000000     ................
    d234:	00000000 fe000000 0000007f 00000000     ................
    d244:	00000000 f0000000 0000007f 00000000     ................
    d254:	00000000 80000000 0000007f 00000000     ................
	...
    d26c:	0000007e 00000000 00000000 00000000     ~...............
    d27c:	00000070 00000000 00000000 00000000     p...............
    d28c:	00000040 00000000 00000000 00000000     @...............
	...
    d2f0:	80000000 ffffffff ffffffff 0000007f     ................
    d300:	80000000 ffffffff ffffffff 0000007f     ................
    d310:	80000000 ffffffff ffffffff 0000007f     ................
    d320:	80000000 ffffffff ffffffff 0000007f     ................
    d330:	80000000 ffffffff ffffffff 0000007f     ................
    d340:	80000000 ffffffff ffffffff 0000007f     ................
    d350:	80000000 ffffffff ffffffff 0000007f     ................
    d360:	80000000 ffffffff ffffffff 0000007f     ................
    d370:	80000000 ffffffff ffffffff 0000007f     ................
    d380:	80000000 ffffffff ffffffff 0000007f     ................
    d390:	80000000 ffffffff ffffffff 0000007f     ................
    d3a0:	80000000 ffffffff ffffffff 0000007f     ................
    d3b0:	80000000 ffffffff ffffffff 0000007f     ................
    d3c0:	80000000 ffffffff ffffffff 0000007f     ................
    d3d0:	80000000 ffffffff ffffffff 0000007f     ................
    d3e0:	80000000 e00003ff f00000ff 0000007f     ................
    d3f0:	80000000 e00003ff f00000ff 0000007f     ................
    d400:	80000000 e00003ff f00000ff 0000007f     ................
    d410:	80000000 e00003ff f00000ff 0000007f     ................
    d420:	80000000 e00003ff f00000ff 0000007f     ................
    d430:	80000000 e00003ff f00000ff 0000007f     ................
    d440:	80000000 e00003ff f00000ff 0000007f     ................
    d450:	80000000 e00003ff f00000ff 0000007f     ................
    d460:	80000000 e00003ff f00000ff 0000007f     ................
    d470:	80000000 e00003ff f00000ff 0000007f     ................
    d480:	80000000 e00003ff f00000ff 0000007f     ................
    d490:	80000000 e00003ff f00000ff 0000007f     ................
    d4a0:	80000000 e00003ff f00000ff 0000007f     ................
    d4b0:	80000000 e00003ff f00000ff 0000007f     ................
    d4c0:	80000000 e00003ff f00000ff 0000007f     ................
    d4d0:	80000000 f00007ff f00000ff 0000007f     ................
    d4e0:	80000000 f00007ff f00000ff 0000007f     ................
    d4f0:	80000000 f00007ff f80001ff 0000007f     ................
    d500:	00000000 f8000fff f80001ff 0000007f     ................
    d510:	00000000 fc000fff fc0001ff 0000007f     ................
    d520:	00000000 fe003fff fc0003ff 0000003f     .....?......?...
    d530:	00000000 ff807fff fe0007ff 0000003f     ............?...
    d540:	00000000 ffffffff ff800fff 0000003f     ............?...
    d550:	00000000 fffffffe ffe07fff 0000003f     ............?...
    d560:	00000000 fffffffe ffffffff 0000001f     ................
    d570:	00000000 fffffffe ffffffff 0000001f     ................
    d580:	00000000 fffffffc ffffffff 0000001f     ................
    d590:	00000000 fffffffc ffffffff 0000000f     ................
    d5a0:	00000000 fffffff8 fffffff9 0000000f     ................
    d5b0:	00000000 fffffff0 fffffff9 00000007     ................
    d5c0:	00000000 fffffff0 fffffff8 00000007     ................
    d5d0:	00000000 7fffffe0 fffffff0 00000003     ................
    d5e0:	00000000 3fffffc0 ffffffe0 00000001     .......?........
    d5f0:	00000000 1fffff80 ffffffc0 00000000     ................
    d600:	00000000 0ffffe00 7fffff80 00000000     ................
    d610:	00000000 03fff800 3fffff00 00000000     ...........?....
    d620:	00000000 007fc000 0ffffe00 00000000     ................
	...
    d638:	01fff000 00000000 00000000 00000000     ................
    d648:	00060000 00000000 00000000 00000000     ................
	...
    d6d4:	f8000000 000007ff 00000000 00000000     ................
    d6e4:	ffe00000 0001ffff 00000000 00000000     ................
    d6f4:	fffc0000 001fffff 00000000 00000000     ................
    d704:	ffff8000 007fffff 00000000 00000000     ................
    d714:	ffffe000 01ffffff 00000000 00000000     ................
    d724:	fffff800 07ffffff 00000000 00000000     ................
    d734:	fffffc00 1fffffff 00000000 00000000     ................
    d744:	ffffff00 3fffffff 00000000 00000000     .......?........
    d754:	ffffff80 7fffffff 00000000 00000000     ................
    d764:	ffffffc0 ffffffff 00000000 00000000     ................
    d774:	ffffffe0 ffffffff 00000001 00000000     ................
    d784:	fffffff0 ffffffff 00000003 00000000     ................
    d794:	fffffff8 ffffffff 00000007 00000000     ................
    d7a4:	fffffff8 ffffffff 00000007 00000000     ................
    d7b4:	fffffffc ffffffff 0000000f 00000000     ................
    d7c4:	07fffffc fffff000 0000001f 00000000     ................
    d7d4:	001ffffe fffe0000 0000001f 00000000     ................
    d7e4:	0003fffe fff00000 0000003f 00000000     ........?.......
    d7f4:	0000ffff ffc00000 0000003f 00000000     ........?.......
    d804:	00007fff ff000000 0000003f 80000000     ........?.......
    d814:	00003fff fe000000 0000007f 80000000     .?..............
    d824:	00001fff fc000000 0000007f 80000000     ................
    d834:	00000fff fc000000 0000007f 80000000     ................
    d844:	000007ff f8000000 0000007f c0000000     ................
    d854:	000007ff f8000000 000000ff c0000000     ................
    d864:	000007ff f8000000 000000ff c0000000     ................
    d874:	000003ff f0000000 000000ff c0000000     ................
    d884:	000003ff f0000000 000000ff c0000000     ................
    d894:	000003ff f0000000 000000ff c0000000     ................
    d8a4:	000003ff f0000000 000000ff c0000000     ................
    d8b4:	000003ff f0000000 000000ff c0000000     ................
    d8c4:	000003ff f0000000 000000ff c0000000     ................
    d8d4:	000003ff f0000000 000000ff c0000000     ................
    d8e4:	000003ff f0000000 000000ff c0000000     ................
    d8f4:	000003ff f0000000 000000ff c0000000     ................
    d904:	000007ff f8000000 000000ff c0000000     ................
    d914:	000007ff f8000000 0000007f 80000000     ................
    d924:	000007ff f8000000 0000007f 80000000     ................
    d934:	00000fff fc000000 0000007f 80000000     ................
    d944:	00001fff fe000000 0000007f 80000000     ................
    d954:	00001fff ff000000 0000007f 00000000     ................
    d964:	00007fff ff800000 0000003f 00000000     ........?.......
    d974:	0000ffff ffe00000 0000003f 00000000     ........?.......
    d984:	0007fffe fffc0000 0000003f 00000000     ........?.......
    d994:	007ffffe ffff8000 0000001f 00000000     ................
    d9a4:	007ffffe ffff8000 0000001f 00000000     ................
    d9b4:	007ffffc ffff8000 0000000f 00000000     ................
    d9c4:	007ffff8 ffff8000 00000007 00000000     ................
    d9d4:	007ffff8 ffff8000 00000007 00000000     ................
    d9e4:	007ffff0 ffff8000 00000003 00000000     ................
    d9f4:	007fffe0 ffff8000 00000001 00000000     ................
    da04:	007fffc0 ffff8000 00000000 00000000     ................
    da14:	007fff80 7fff8000 00000000 00000000     ................
    da24:	007fff00 3fff8000 00000000 00000000     .......?........
    da34:	007ffc00 1fff8000 00000000 00000000     ................
    da44:	007ff800 07ff8000 00000000 00000000     ................
    da54:	007fc000 01ff8000 00000000 00000000     ................
    da64:	007f0000 003f8000 00000000 00000000     ......?.........
    da74:	00600000 00038000 00000000 00000000     ..`.............
	...
    db10:	80000000 ffffffff ffffffff 0000007f     ................
    db20:	80000000 ffffffff ffffffff 0000007f     ................
    db30:	80000000 ffffffff ffffffff 0000007f     ................
    db40:	80000000 ffffffff ffffffff 0000007f     ................
    db50:	80000000 ffffffff ffffffff 0000007f     ................
    db60:	80000000 ffffffff ffffffff 0000007f     ................
    db70:	80000000 ffffffff ffffffff 0000007f     ................
    db80:	80000000 ffffffff ffffffff 0000007f     ................
    db90:	80000000 ffffffff ffffffff 0000007f     ................
    dba0:	80000000 ffffffff ffffffff 0000007f     ................
    dbb0:	80000000 ffffffff ffffffff 0000007f     ................
    dbc0:	80000000 ffffffff ffffffff 0000007f     ................
    dbd0:	80000000 ffffffff ffffffff 0000007f     ................
    dbe0:	80000000 ffffffff ffffffff 0000007f     ................
    dbf0:	80000000 ffffffff ffffffff 0000007f     ................
    dc00:	80000000 000003ff f0000000 0000007f     ................
    dc10:	80000000 000003ff f0000000 0000007f     ................
    dc20:	80000000 000003ff f0000000 0000007f     ................
    dc30:	80000000 000003ff f0000000 0000007f     ................
    dc40:	80000000 000003ff f0000000 0000007f     ................
    dc50:	80000000 000003ff f0000000 0000007f     ................
    dc60:	80000000 000003ff f0000000 0000007f     ................
    dc70:	80000000 000003ff f0000000 0000007f     ................
    dc80:	80000000 000003ff f0000000 0000007f     ................
    dc90:	80000000 000003ff f0000000 0000007f     ................
    dca0:	80000000 000003ff f0000000 0000007f     ................
    dcb0:	80000000 000003ff f0000000 0000007f     ................
    dcc0:	80000000 000007ff f8000000 0000007f     ................
    dcd0:	80000000 000007ff f8000000 0000007f     ................
    dce0:	00000000 000007ff f8000000 0000003f     ............?...
    dcf0:	00000000 00000fff fc000000 0000003f     ............?...
    dd00:	00000000 00000fff fc000000 0000003f     ............?...
    dd10:	00000000 00001fff fe000000 0000003f     ............?...
    dd20:	00000000 00003ffe ff000000 0000001f     .....?..........
    dd30:	00000000 00003ffe ff800000 0000001f     .....?..........
    dd40:	00000000 0000fffe ffc00000 0000001f     ................
    dd50:	00000000 0001fffc ffe00000 0000000f     ................
    dd60:	00000000 0007fffc fff80000 0000000f     ................
    dd70:	00000000 001ffff8 fffe0000 00000007     ................
    dd80:	00000000 01fffff8 ffffe000 00000007     ................
    dd90:	00000000 fffffff0 ffffffff 00000003     ................
    dda0:	00000000 ffffffe0 ffffffff 00000001     ................
    ddb0:	00000000 ffffffe0 ffffffff 00000001     ................
    ddc0:	00000000 ffffffc0 ffffffff 00000000     ................
    ddd0:	00000000 ffffff80 7fffffff 00000000     ................
    dde0:	00000000 ffffff00 3fffffff 00000000     ...........?....
    ddf0:	00000000 fffffe00 1fffffff 00000000     ................
    de00:	00000000 fffffc00 0fffffff 00000000     ................
    de10:	00000000 fffff800 07ffffff 00000000     ................
    de20:	00000000 ffffe000 01ffffff 00000000     ................
    de30:	00000000 ffffc000 00ffffff 00000000     ................
    de40:	00000000 ffff0000 003fffff 00000000     ..........?.....
    de50:	00000000 fffc0000 000fffff 00000000     ................
    de60:	00000000 ffe00000 0001ffff 00000000     ................
    de70:	00000000 fe000000 00001fff 00000000     ................
	...
    df30:	80000000 ffffffff ffffffff 0000007f     ................
    df40:	80000000 ffffffff ffffffff 0000007f     ................
    df50:	80000000 ffffffff ffffffff 0000007f     ................
    df60:	80000000 ffffffff ffffffff 0000007f     ................
    df70:	80000000 ffffffff ffffffff 0000007f     ................
    df80:	80000000 ffffffff ffffffff 0000007f     ................
    df90:	80000000 ffffffff ffffffff 0000007f     ................
    dfa0:	80000000 ffffffff ffffffff 0000007f     ................
    dfb0:	80000000 ffffffff ffffffff 0000007f     ................
    dfc0:	80000000 ffffffff ffffffff 0000007f     ................
    dfd0:	80000000 ffffffff ffffffff 0000007f     ................
    dfe0:	80000000 ffffffff ffffffff 0000007f     ................
    dff0:	80000000 ffffffff ffffffff 0000007f     ................
    e000:	80000000 ffffffff ffffffff 0000007f     ................
    e010:	80000000 ffffffff ffffffff 0000007f     ................
    e020:	80000000 f00003ff f000007f 0000007f     ................
    e030:	80000000 f00003ff f000007f 0000007f     ................
    e040:	80000000 f00003ff f000007f 0000007f     ................
    e050:	80000000 f00003ff f000007f 0000007f     ................
    e060:	80000000 f00003ff f000007f 0000007f     ................
    e070:	80000000 f00003ff f000007f 0000007f     ................
    e080:	80000000 f00003ff f000007f 0000007f     ................
    e090:	80000000 f00003ff f000007f 0000007f     ................
    e0a0:	80000000 f00003ff f000007f 0000007f     ................
    e0b0:	80000000 f00003ff f000007f 0000007f     ................
    e0c0:	80000000 f00003ff f000007f 0000007f     ................
    e0d0:	80000000 f00003ff f000007f 0000007f     ................
    e0e0:	80000000 f00003ff f000007f 0000007f     ................
    e0f0:	80000000 f00003ff f000007f 0000007f     ................
    e100:	80000000 f00003ff f000007f 0000007f     ................
    e110:	80000000 f00003ff f000007f 0000007f     ................
    e120:	80000000 f00003ff f000007f 0000007f     ................
    e130:	80000000 f00003ff f000007f 0000007f     ................
    e140:	80000000 f00003ff f000007f 0000007f     ................
    e150:	80000000 f00003ff f000007f 0000007f     ................
    e160:	80000000 f00003ff f000007f 0000007f     ................
    e170:	80000000 f00003ff f000007f 0000007f     ................
    e180:	80000000 f00003ff f000007f 0000007f     ................
    e190:	80000000 f00003ff f000007f 0000007f     ................
    e1a0:	80000000 f00003ff f000007f 0000007f     ................
    e1b0:	80000000 f00003ff f000007f 0000007f     ................
    e1c0:	80000000 f00003ff f000007f 0000007f     ................
    e1d0:	80000000 f00003ff f000007f 0000007f     ................
    e1e0:	80000000 f00003ff f000007f 0000007f     ................
    e1f0:	80000000 000003ff f0000000 0000007f     ................
    e200:	80000000 000003ff f0000000 0000007f     ................
    e210:	80000000 000003ff f0000000 0000007f     ................
    e220:	80000000 000003ff f0000000 0000007f     ................
	...
    e238:	f0000000 0000007f 00000000 00000000     ................
	...
    e2c0:	80000000 ffffffff ffffffff 0000007f     ................
    e2d0:	80000000 ffffffff ffffffff 0000007f     ................
    e2e0:	80000000 ffffffff ffffffff 0000007f     ................
    e2f0:	80000000 ffffffff ffffffff 0000007f     ................
    e300:	80000000 ffffffff ffffffff 0000007f     ................
    e310:	80000000 ffffffff ffffffff 0000007f     ................
    e320:	80000000 ffffffff ffffffff 0000007f     ................
    e330:	80000000 ffffffff ffffffff 0000007f     ................
    e340:	80000000 ffffffff ffffffff 0000007f     ................
    e350:	80000000 ffffffff ffffffff 0000007f     ................
    e360:	80000000 ffffffff ffffffff 0000007f     ................
    e370:	80000000 ffffffff ffffffff 0000007f     ................
    e380:	80000000 ffffffff ffffffff 0000007f     ................
    e390:	80000000 ffffffff ffffffff 0000007f     ................
    e3a0:	80000000 ffffffff ffffffff 0000007f     ................
    e3b0:	80000000 c00003ff 000001ff 00000000     ................
    e3c0:	80000000 c00003ff 000001ff 00000000     ................
    e3d0:	80000000 c00003ff 000001ff 00000000     ................
    e3e0:	80000000 c00003ff 000001ff 00000000     ................
    e3f0:	80000000 c00003ff 000001ff 00000000     ................
    e400:	80000000 c00003ff 000001ff 00000000     ................
    e410:	80000000 c00003ff 000001ff 00000000     ................
    e420:	80000000 c00003ff 000001ff 00000000     ................
    e430:	80000000 c00003ff 000001ff 00000000     ................
    e440:	80000000 c00003ff 000001ff 00000000     ................
    e450:	80000000 c00003ff 000001ff 00000000     ................
    e460:	80000000 c00003ff 000001ff 00000000     ................
    e470:	80000000 c00003ff 000001ff 00000000     ................
    e480:	80000000 c00003ff 000001ff 00000000     ................
    e490:	80000000 c00003ff 000001ff 00000000     ................
    e4a0:	80000000 c00003ff 000001ff 00000000     ................
    e4b0:	80000000 c00003ff 000001ff 00000000     ................
    e4c0:	80000000 c00003ff 000001ff 00000000     ................
    e4d0:	80000000 c00003ff 000001ff 00000000     ................
    e4e0:	80000000 c00003ff 000001ff 00000000     ................
    e4f0:	80000000 c00003ff 000001ff 00000000     ................
    e500:	80000000 c00003ff 000001ff 00000000     ................
    e510:	80000000 c00003ff 000001ff 00000000     ................
    e520:	80000000 c00003ff 000001ff 00000000     ................
    e530:	80000000 c00003ff 000001ff 00000000     ................
    e540:	80000000 c00003ff 000001ff 00000000     ................
    e550:	80000000 c00003ff 000001ff 00000000     ................
    e560:	80000000 c00003ff 000001ff 00000000     ................
    e570:	80000000 c00003ff 000001ff 00000000     ................
    e580:	80000000 000003ff 00000000 00000000     ................
    e590:	80000000 000003ff 00000000 00000000     ................
    e5a0:	80000000 000003ff 00000000 00000000     ................
	...
    e624:	ff000000 00003fff 00000000 00000000     .....?..........
    e634:	fff80000 0003ffff 00000000 00000000     ................
    e644:	ffff0000 001fffff 00000000 00000000     ................
    e654:	ffffc000 00ffffff 00000000 00000000     ................
    e664:	fffff000 03ffffff 00000000 00000000     ................
    e674:	fffffc00 07ffffff 00000000 00000000     ................
    e684:	fffffe00 1fffffff 00000000 00000000     ................
    e694:	ffffff00 3fffffff 00000000 00000000     .......?........
    e6a4:	ffffff80 7fffffff 00000000 00000000     ................
    e6b4:	ffffffc0 ffffffff 00000000 00000000     ................
    e6c4:	ffffffe0 ffffffff 00000001 00000000     ................
    e6d4:	fffffff0 ffffffff 00000003 00000000     ................
    e6e4:	fffffff8 ffffffff 00000007 00000000     ................
    e6f4:	fffffffc ffffffff 00000007 00000000     ................
    e704:	fffffffc ffffffff 0000000f 00000000     ................
    e714:	00fffffe ffffc000 0000000f 00000000     ................
    e724:	000ffffe fffc0000 0000001f 00000000     ................
    e734:	0001ffff fff00000 0000001f 00000000     ................
    e744:	00007fff ffc00000 0000003f 00000000     ........?.......
    e754:	00003fff ff000000 0000003f 80000000     .?......?.......
    e764:	00001fff fe000000 0000007f 80000000     ................
    e774:	00000fff fc000000 0000007f 80000000     ................
    e784:	000007ff fc000000 0000007f 80000000     ................
    e794:	000007ff f8000000 0000007f c0000000     ................
    e7a4:	000003ff f0000000 0000007f c0000000     ................
    e7b4:	000003ff f0000000 000000ff c0000000     ................
    e7c4:	000001ff f0000000 000000ff c0000000     ................
    e7d4:	000001ff e0000000 000000ff c0000000     ................
    e7e4:	000001ff e0000000 000000ff c0000000     ................
    e7f4:	000001ff e0000000 000000ff c0000000     ................
    e804:	000001ff e0000ffe 000000ff c0000000     ................
    e814:	000001ff e0000ffe 000000ff c0000000     ................
    e824:	000001ff e0000ffe 000000ff c0000000     ................
    e834:	000001ff e0000ffe 000000ff c0000000     ................
    e844:	000001ff e0000ffe 000000ff c0000000     ................
    e854:	000003ff e0000ffe 000000ff c0000000     ................
    e864:	000003ff e0000ffe 000000ff 80000000     ................
    e874:	000007ff f0000ffe 000000ff 80000000     ................
    e884:	000007ff f0000ffe 0000007f 80000000     ................
    e894:	00000fff f0000ffe 0000007f 80000000     ................
    e8a4:	00001fff f8000ffe 0000007f 00000000     ................
    e8b4:	00003fff f8000ffe 0000007f 00000000     .?..............
    e8c4:	0000ffff fc000ffe 0000007f 00000000     ................
    e8d4:	0007ffff fe000ffe 0000003f 00000000     ........?.......
    e8e4:	003ffffe fffffffe 0000003f 00000000     ..?.....?.......
    e8f4:	003ffffe fffffffe 0000003f 00000000     ..?.....?.......
    e904:	003ffffc fffffffe 0000003f 00000000     ..?.....?.......
    e914:	003ffffc fffffffe 0000001f 00000000     ..?.............
    e924:	003ffff8 fffffffe 0000001f 00000000     ..?.............
    e934:	003ffff0 fffffffe 0000000f 00000000     ..?.............
    e944:	003fffe0 fffffffe 0000000f 00000000     ..?.............
    e954:	003fffc0 fffffffe 00000007 00000000     ..?.............
    e964:	003fff80 fffffffe 00000007 00000000     ..?.............
    e974:	003fff00 fffffffe 00000003 00000000     ..?.............
    e984:	003ffc00 fffffffe 00000001 00000000     ..?.............
    e994:	003ff800 fffffffe 00000001 00000000     ..?.............
    e9a4:	003fc000 fffffffe 00000000 00000000     ..?.............
    e9b4:	003e0000 7ffffffe 00000000 00000000     ..>.............
	...
    ea80:	80000000 ffffffff ffffffff 0000007f     ................
    ea90:	80000000 ffffffff ffffffff 0000007f     ................
    eaa0:	80000000 ffffffff ffffffff 0000007f     ................
    eab0:	80000000 ffffffff ffffffff 0000007f     ................
    eac0:	80000000 ffffffff ffffffff 0000007f     ................
    ead0:	80000000 ffffffff ffffffff 0000007f     ................
    eae0:	80000000 ffffffff ffffffff 0000007f     ................
    eaf0:	80000000 ffffffff ffffffff 0000007f     ................
    eb00:	80000000 ffffffff ffffffff 0000007f     ................
    eb10:	80000000 ffffffff ffffffff 0000007f     ................
    eb20:	80000000 ffffffff ffffffff 0000007f     ................
    eb30:	80000000 ffffffff ffffffff 0000007f     ................
    eb40:	80000000 ffffffff ffffffff 0000007f     ................
    eb50:	80000000 ffffffff ffffffff 0000007f     ................
    eb60:	80000000 ffffffff ffffffff 0000007f     ................
    eb70:	00000000 f0000000 0000007f 00000000     ................
    eb80:	00000000 f0000000 0000007f 00000000     ................
    eb90:	00000000 f0000000 0000007f 00000000     ................
    eba0:	00000000 f0000000 0000007f 00000000     ................
    ebb0:	00000000 f0000000 0000007f 00000000     ................
    ebc0:	00000000 f0000000 0000007f 00000000     ................
    ebd0:	00000000 f0000000 0000007f 00000000     ................
    ebe0:	00000000 f0000000 0000007f 00000000     ................
    ebf0:	00000000 f0000000 0000007f 00000000     ................
    ec00:	00000000 f0000000 0000007f 00000000     ................
    ec10:	00000000 f0000000 0000007f 00000000     ................
    ec20:	00000000 f0000000 0000007f 00000000     ................
    ec30:	00000000 f0000000 0000007f 00000000     ................
    ec40:	00000000 f0000000 0000007f 00000000     ................
    ec50:	00000000 f0000000 0000007f 00000000     ................
    ec60:	00000000 f0000000 0000007f 00000000     ................
    ec70:	00000000 f0000000 0000007f 00000000     ................
    ec80:	00000000 f0000000 0000007f 00000000     ................
    ec90:	00000000 f0000000 0000007f 00000000     ................
    eca0:	00000000 f0000000 0000007f 00000000     ................
    ecb0:	00000000 f0000000 0000007f 00000000     ................
    ecc0:	00000000 f0000000 0000007f 00000000     ................
    ecd0:	00000000 f0000000 0000007f 00000000     ................
    ece0:	00000000 f0000000 0000007f 00000000     ................
    ecf0:	00000000 f0000000 0000007f 00000000     ................
    ed00:	00000000 f0000000 0000007f 00000000     ................
    ed10:	00000000 f0000000 0000007f 00000000     ................
    ed20:	00000000 f0000000 0000007f 00000000     ................
    ed30:	00000000 f0000000 0000007f 00000000     ................
    ed40:	80000000 ffffffff ffffffff 0000007f     ................
    ed50:	80000000 ffffffff ffffffff 0000007f     ................
    ed60:	80000000 ffffffff ffffffff 0000007f     ................
    ed70:	80000000 ffffffff ffffffff 0000007f     ................
    ed80:	80000000 ffffffff ffffffff 0000007f     ................
    ed90:	80000000 ffffffff ffffffff 0000007f     ................
    eda0:	80000000 ffffffff ffffffff 0000007f     ................
    edb0:	80000000 ffffffff ffffffff 0000007f     ................
    edc0:	80000000 ffffffff ffffffff 0000007f     ................
    edd0:	80000000 ffffffff ffffffff 0000007f     ................
    ede0:	80000000 ffffffff ffffffff 0000007f     ................
    edf0:	80000000 ffffffff ffffffff 0000007f     ................
    ee00:	80000000 ffffffff ffffffff 0000007f     ................
    ee10:	80000000 ffffffff ffffffff 0000007f     ................
    ee20:	80000000 ffffffff ffffffff 0000007f     ................
	...
    ef00:	80000000 ffffffff ffffffff 0000007f     ................
    ef10:	80000000 ffffffff ffffffff 0000007f     ................
    ef20:	80000000 ffffffff ffffffff 0000007f     ................
    ef30:	80000000 ffffffff ffffffff 0000007f     ................
    ef40:	80000000 ffffffff ffffffff 0000007f     ................
    ef50:	80000000 ffffffff ffffffff 0000007f     ................
    ef60:	80000000 ffffffff ffffffff 0000007f     ................
    ef70:	80000000 ffffffff ffffffff 0000007f     ................
    ef80:	80000000 ffffffff ffffffff 0000007f     ................
    ef90:	80000000 ffffffff ffffffff 0000007f     ................
    efa0:	80000000 ffffffff ffffffff 0000007f     ................
    efb0:	80000000 ffffffff ffffffff 0000007f     ................
    efc0:	80000000 ffffffff ffffffff 0000007f     ................
    efd0:	80000000 ffffffff ffffffff 0000007f     ................
    efe0:	80000000 ffffffff ffffffff 0000007f     ................
	...
    f088:	01f80000 00000000 00000000 00000000     ................
    f098:	0ff80000 00000000 00000000 00000000     ................
    f0a8:	3ff80000 00000000 00000000 00000000     ...?............
    f0b8:	fff80000 00000000 00000000 00000000     ................
    f0c8:	fff80000 00000001 00000000 00000000     ................
    f0d8:	fff80000 00000003 00000000 00000000     ................
    f0e8:	fff80000 00000007 00000000 00000000     ................
    f0f8:	fff80000 0000000f 00000000 00000000     ................
    f108:	fff80000 0000000f 00000000 00000000     ................
    f118:	fff80000 0000001f 00000000 00000000     ................
    f128:	fff80000 0000001f 00000000 00000000     ................
    f138:	fff80000 0000003f 00000000 00000000     ....?...........
    f148:	fff80000 0000003f 00000000 00000000     ....?...........
    f158:	fff80000 0000007f 00000000 00000000     ................
    f168:	fff80000 0000007f 00000000 00000000     ................
    f178:	ff000000 0000007f 00000000 00000000     ................
    f188:	fc000000 0000007f 00000000 00000000     ................
    f198:	f8000000 000000ff 00000000 00000000     ................
    f1a8:	f0000000 000000ff 00000000 00000000     ................
    f1b8:	f0000000 000000ff 00000000 00000000     ................
    f1c8:	e0000000 000000ff 00000000 00000000     ................
    f1d8:	e0000000 000000ff 00000000 00000000     ................
    f1e8:	e0000000 000000ff 00000000 00000000     ................
    f1f8:	e0000000 000000ff 00000000 00000000     ................
    f208:	e0000000 000000ff 00000000 00000000     ................
    f218:	e0000000 000000ff 00000000 00000000     ................
    f228:	e0000000 000000ff 00000000 00000000     ................
    f238:	f0000000 000000ff 00000000 00000000     ................
    f248:	f0000000 000000ff 00000000 00000000     ................
    f258:	f8000000 0000007f 00000000 00000000     ................
    f268:	fc000000 0000007f 00000000 00000000     ................
    f278:	fe000000 0000007f 00000000 00000000     ................
    f288:	ff800000 0000007f 80000000 ffffffff     ................
    f298:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    f2a8:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    f2b8:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    f2c8:	ffffffff 0000001f 80000000 ffffffff     ................
    f2d8:	ffffffff 0000001f 80000000 ffffffff     ................
    f2e8:	ffffffff 0000000f 80000000 ffffffff     ................
    f2f8:	ffffffff 00000007 80000000 ffffffff     ................
    f308:	ffffffff 00000003 80000000 ffffffff     ................
    f318:	ffffffff 00000001 80000000 ffffffff     ................
    f328:	ffffffff 00000000 80000000 ffffffff     ................
    f338:	7fffffff 00000000 80000000 ffffffff     ................
    f348:	3fffffff 00000000 80000000 ffffffff     ...?............
    f358:	0fffffff 00000000 80000000 ffffffff     ................
    f368:	03ffffff 00000000 80000000 ffffffff     ................
    f378:	003fffff 00000000 00000000 00000000     ..?.............
	...
    f440:	80000000 ffffffff ffffffff 0000007f     ................
    f450:	80000000 ffffffff ffffffff 0000007f     ................
    f460:	80000000 ffffffff ffffffff 0000007f     ................
    f470:	80000000 ffffffff ffffffff 0000007f     ................
    f480:	80000000 ffffffff ffffffff 0000007f     ................
    f490:	80000000 ffffffff ffffffff 0000007f     ................
    f4a0:	80000000 ffffffff ffffffff 0000007f     ................
    f4b0:	80000000 ffffffff ffffffff 0000007f     ................
    f4c0:	80000000 ffffffff ffffffff 0000007f     ................
    f4d0:	80000000 ffffffff ffffffff 0000007f     ................
    f4e0:	80000000 ffffffff ffffffff 0000007f     ................
    f4f0:	80000000 ffffffff ffffffff 0000007f     ................
    f500:	80000000 ffffffff ffffffff 0000007f     ................
    f510:	80000000 ffffffff ffffffff 0000007f     ................
    f520:	80000000 ffffffff ffffffff 0000007f     ................
    f530:	00000000 80000000 0003ffff 00000000     ................
    f540:	00000000 c0000000 0001ffff 00000000     ................
    f550:	00000000 f0000000 0000ffff 00000000     ................
    f560:	00000000 f8000000 00007fff 00000000     ................
    f570:	00000000 fc000000 00003fff 00000000     .........?......
    f580:	00000000 ff000000 00001fff 00000000     ................
    f590:	00000000 ff800000 00000fff 00000000     ................
    f5a0:	00000000 ffc00000 000003ff 00000000     ................
    f5b0:	00000000 fff00000 000007ff 00000000     ................
    f5c0:	00000000 fff80000 00001fff 00000000     ................
    f5d0:	00000000 fffc0000 00003fff 00000000     .........?......
    f5e0:	00000000 ffff0000 0000ffff 00000000     ................
    f5f0:	00000000 ffff8000 0001ffff 00000000     ................
    f600:	00000000 ffffc000 0007ffff 00000000     ................
    f610:	00000000 ffffe000 001fffff 00000000     ................
    f620:	00000000 fffff800 003fffff 00000000     ..........?.....
    f630:	00000000 fffffc00 00ffffff 00000000     ................
    f640:	00000000 fffffe00 01ffffff 00000000     ................
    f650:	00000000 3fffff80 07ffffff 00000000     .......?........
    f660:	00000000 1fffffc0 0ffffffc 00000000     ................
    f670:	00000000 07ffffe0 3ffffff8 00000000     ...........?....
    f680:	00000000 03fffff8 ffffffe0 00000000     ................
    f690:	00000000 01fffffc ffffffc0 00000001     ................
    f6a0:	00000000 00fffffe ffffff00 00000007     ................
    f6b0:	00000000 003fffff fffffe00 0000000f     ......?.........
    f6c0:	80000000 001fffff fffff800 0000003f     ............?...
    f6d0:	80000000 000fffff fffff000 0000007f     ................
    f6e0:	80000000 0007ffff ffffc000 0000007f     ................
    f6f0:	80000000 0001ffff ffff0000 0000007f     ................
    f700:	80000000 0000ffff fffe0000 0000007f     ................
    f710:	80000000 00007fff fff80000 0000007f     ................
    f720:	80000000 00003fff fff00000 0000007f     .....?..........
    f730:	80000000 00000fff ffc00000 0000007f     ................
    f740:	80000000 000007ff ff800000 0000007f     ................
    f750:	80000000 000003ff fe000000 0000007f     ................
    f760:	80000000 000001ff fc000000 0000007f     ................
    f770:	80000000 0000007f f0000000 0000007f     ................
    f780:	80000000 0000003f e0000000 0000007f     ....?...........
    f790:	80000000 0000001f 80000000 0000007f     ................
    f7a0:	80000000 0000000f 00000000 0000007f     ................
    f7b0:	80000000 00000003 00000000 0000007c     ............|...
    f7c0:	80000000 00000001 00000000 00000078     ............x...
    f7d0:	80000000 00000000 00000000 00000060     ............`...
	...
    f840:	80000000 ffffffff ffffffff 0000007f     ................
    f850:	80000000 ffffffff ffffffff 0000007f     ................
    f860:	80000000 ffffffff ffffffff 0000007f     ................
    f870:	80000000 ffffffff ffffffff 0000007f     ................
    f880:	80000000 ffffffff ffffffff 0000007f     ................
    f890:	80000000 ffffffff ffffffff 0000007f     ................
    f8a0:	80000000 ffffffff ffffffff 0000007f     ................
    f8b0:	80000000 ffffffff ffffffff 0000007f     ................
    f8c0:	80000000 ffffffff ffffffff 0000007f     ................
    f8d0:	80000000 ffffffff ffffffff 0000007f     ................
    f8e0:	80000000 ffffffff ffffffff 0000007f     ................
    f8f0:	80000000 ffffffff ffffffff 0000007f     ................
    f900:	80000000 ffffffff ffffffff 0000007f     ................
    f910:	80000000 ffffffff ffffffff 0000007f     ................
    f920:	80000000 ffffffff ffffffff 0000007f     ................
	...
    f938:	f0000000 0000007f 00000000 00000000     ................
    f948:	f0000000 0000007f 00000000 00000000     ................
    f958:	f0000000 0000007f 00000000 00000000     ................
    f968:	f0000000 0000007f 00000000 00000000     ................
    f978:	f0000000 0000007f 00000000 00000000     ................
    f988:	f0000000 0000007f 00000000 00000000     ................
    f998:	f0000000 0000007f 00000000 00000000     ................
    f9a8:	f0000000 0000007f 00000000 00000000     ................
    f9b8:	f0000000 0000007f 00000000 00000000     ................
    f9c8:	f0000000 0000007f 00000000 00000000     ................
    f9d8:	f0000000 0000007f 00000000 00000000     ................
    f9e8:	f0000000 0000007f 00000000 00000000     ................
    f9f8:	f0000000 0000007f 00000000 00000000     ................
    fa08:	f0000000 0000007f 00000000 00000000     ................
    fa18:	f0000000 0000007f 00000000 00000000     ................
    fa28:	f0000000 0000007f 00000000 00000000     ................
    fa38:	f0000000 0000007f 00000000 00000000     ................
    fa48:	f0000000 0000007f 00000000 00000000     ................
    fa58:	f0000000 0000007f 00000000 00000000     ................
    fa68:	f0000000 0000007f 00000000 00000000     ................
    fa78:	f0000000 0000007f 00000000 00000000     ................
    fa88:	f0000000 0000007f 00000000 00000000     ................
    fa98:	f0000000 0000007f 00000000 00000000     ................
    faa8:	f0000000 0000007f 00000000 00000000     ................
    fab8:	f0000000 0000007f 00000000 00000000     ................
    fac8:	f0000000 0000007f 00000000 00000000     ................
    fad8:	f0000000 0000007f 00000000 00000000     ................
    fae8:	f0000000 0000007f 00000000 00000000     ................
    faf8:	f0000000 0000007f 00000000 00000000     ................
    fb08:	f0000000 0000007f 00000000 00000000     ................
    fb18:	f0000000 0000007f 00000000 00000000     ................
    fb28:	f0000000 0000007f 00000000 00000000     ................
	...
    fbb0:	80000000 ffffffff ffffffff 0000007f     ................
    fbc0:	80000000 ffffffff ffffffff 0000007f     ................
    fbd0:	80000000 ffffffff ffffffff 0000007f     ................
    fbe0:	80000000 ffffffff ffffffff 0000007f     ................
    fbf0:	80000000 ffffffff ffffffff 0000007f     ................
    fc00:	80000000 ffffffff ffffffff 0000007f     ................
    fc10:	80000000 ffffffff ffffffff 0000007f     ................
    fc20:	80000000 ffffffff ffffffff 0000007f     ................
    fc30:	80000000 ffffffff ffffffff 0000007f     ................
    fc40:	80000000 ffffffff ffffffff 0000007f     ................
    fc50:	80000000 ffffffff ffffffff 0000007f     ................
    fc60:	80000000 ffffffff ffffffff 0000007f     ................
    fc70:	80000000 ffffffff ffffffff 0000007f     ................
    fc80:	80000000 ffffffff ffffffff 0000007f     ................
    fc90:	80000000 000fffff fffffff8 0000007f     ................
    fca0:	80000000 003fffff 00000000 00000000     ......?.........
    fcb0:	80000000 01ffffff 00000000 00000000     ................
    fcc0:	80000000 0fffffff 00000000 00000000     ................
    fcd0:	80000000 7fffffff 00000000 00000000     ................
    fce0:	80000000 ffffffff 00000001 00000000     ................
    fcf0:	00000000 fffffffe 0000000f 00000000     ................
    fd00:	00000000 fffffff0 0000007f 00000000     ................
    fd10:	00000000 ffffff80 000003ff 00000000     ................
    fd20:	00000000 fffffc00 00000fff 00000000     ................
    fd30:	00000000 fffff000 00007fff 00000000     ................
    fd40:	00000000 ffff8000 0003ffff 00000000     ................
    fd50:	00000000 fffc0000 001fffff 00000000     ................
    fd60:	00000000 ffe00000 00ffffff 00000000     ................
    fd70:	00000000 ff000000 03ffffff 00000000     ................
    fd80:	00000000 f8000000 1fffffff 00000000     ................
    fd90:	00000000 e0000000 ffffffff 00000000     ................
	...
    fda8:	ffffffff 00000007 00000000 00000000     ................
    fdb8:	fffffff8 0000001f 00000000 00000000     ................
    fdc8:	ffffffc0 0000007f 00000000 00000000     ................
    fdd8:	fffffe00 0000007f 00000000 00000000     ................
    fde8:	fffff000 0000007f 00000000 00000000     ................
    fdf8:	ffffc000 0000007f 00000000 00000000     ................
    fe08:	fffe0000 0000007f 00000000 00000000     ................
    fe18:	fffc0000 0000007f 00000000 00000000     ................
    fe28:	ffff8000 0000007f 00000000 00000000     ................
    fe38:	ffffe000 0000007f 00000000 00000000     ................
    fe48:	fffffc00 0000007f 00000000 00000000     ................
    fe58:	ffffff80 0000007f 00000000 00000000     ................
    fe68:	fffffff0 0000003f 00000000 00000000     ....?...........
    fe78:	fffffffe 00000007 00000000 c0000000     ................
    fe88:	ffffffff 00000001 00000000 f0000000     ................
    fe98:	3fffffff 00000000 00000000 fe000000     ...?............
    fea8:	07ffffff 00000000 00000000 ffc00000     ................
    feb8:	00ffffff 00000000 00000000 fff80000     ................
    fec8:	003fffff 00000000 00000000 ffff0000     ..?.............
    fed8:	0007ffff 00000000 00000000 ffffe000     ................
    fee8:	0000ffff 00000000 00000000 fffffc00     ................
    fef8:	00001fff 00000000 00000000 ffffff00     ................
    ff08:	000007ff 00000000 00000000 ffffffe0     ................
    ff18:	000000ff 00000000 00000000 fffffffc     ................
    ff28:	0000001f 00000000 80000000 ffffffff     ................
    ff38:	00000003 00000000 80000000 7fffffff     ................
	...
    ff50:	80000000 1fffffff 00000000 00000000     ................
    ff60:	80000000 03ffffff 00000000 00000000     ................
    ff70:	80000000 007fffff 00000000 00000000     ................
    ff80:	80000000 000fffff fffff800 0000007f     ................
    ff90:	80000000 fff3ffff ffffffff 0000007f     ................
    ffa0:	80000000 ffffffff ffffffff 0000007f     ................
    ffb0:	80000000 ffffffff ffffffff 0000007f     ................
    ffc0:	80000000 ffffffff ffffffff 0000007f     ................
    ffd0:	80000000 ffffffff ffffffff 0000007f     ................
    ffe0:	80000000 ffffffff ffffffff 0000007f     ................
    fff0:	80000000 ffffffff ffffffff 0000007f     ................
   10000:	80000000 ffffffff ffffffff 0000007f     ................
   10010:	80000000 ffffffff ffffffff 0000007f     ................
   10020:	80000000 ffffffff ffffffff 0000007f     ................
   10030:	80000000 ffffffff ffffffff 0000007f     ................
   10040:	80000000 ffffffff ffffffff 0000007f     ................
   10050:	80000000 ffffffff ffffffff 0000007f     ................
   10060:	80000000 ffffffff ffffffff 0000007f     ................
	...
   10130:	80000000 ffffffff ffffffff 0000007f     ................
   10140:	80000000 ffffffff ffffffff 0000007f     ................
   10150:	80000000 ffffffff ffffffff 0000007f     ................
   10160:	80000000 ffffffff ffffffff 0000007f     ................
   10170:	80000000 ffffffff ffffffff 0000007f     ................
   10180:	80000000 ffffffff ffffffff 0000007f     ................
   10190:	80000000 ffffffff ffffffff 0000007f     ................
   101a0:	80000000 ffffffff ffffffff 0000007f     ................
   101b0:	80000000 ffffffff ffffffff 0000007f     ................
   101c0:	80000000 ffffffff ffffffff 0000007f     ................
   101d0:	80000000 ffffffff ffffffff 0000007f     ................
   101e0:	80000000 ffffffff ffffffff 0000007f     ................
   101f0:	80000000 ffffffff ffffffff 0000007f     ................
   10200:	80000000 ffffffff ffffffff 0000007f     ................
   10210:	80000000 ffffffff ffffffff 0000007f     ................
   10220:	00000000 00ffffff 00000000 00000000     ................
   10230:	00000000 03fffffe 00000000 00000000     ................
   10240:	00000000 0ffffff8 00000000 00000000     ................
   10250:	00000000 1fffffe0 00000000 00000000     ................
   10260:	00000000 7fffffc0 00000000 00000000     ................
   10270:	00000000 ffffff00 00000001 00000000     ................
   10280:	00000000 fffffc00 00000003 00000000     ................
   10290:	00000000 fffff800 0000000f 00000000     ................
   102a0:	00000000 ffffe000 0000003f 00000000     ........?.......
   102b0:	00000000 ffff8000 0000007f 00000000     ................
   102c0:	00000000 ffff0000 000001ff 00000000     ................
   102d0:	00000000 fffc0000 000007ff 00000000     ................
   102e0:	00000000 fff00000 00000fff 00000000     ................
   102f0:	00000000 ffe00000 00003fff 00000000     .........?......
   10300:	00000000 ff800000 0000ffff 00000000     ................
   10310:	00000000 fe000000 0001ffff 00000000     ................
   10320:	00000000 fc000000 0007ffff 00000000     ................
   10330:	00000000 f0000000 000fffff 00000000     ................
   10340:	00000000 e0000000 003fffff 00000000     ..........?.....
   10350:	00000000 80000000 00ffffff 00000000     ................
	...
   10368:	01fffffe 00000000 00000000 00000000     ................
   10378:	07fffffc 00000000 00000000 00000000     ................
   10388:	1ffffff0 00000000 00000000 00000000     ................
   10398:	3fffffc0 00000000 00000000 00000000     ...?............
   103a8:	ffffff80 00000000 00000000 00000000     ................
   103b8:	fffffe00 00000003 00000000 00000000     ................
   103c8:	fffff800 00000007 00000000 00000000     ................
   103d8:	fffff000 0000001f 00000000 00000000     ................
   103e8:	ffffc000 0000007f 80000000 ffffffff     ................
   103f8:	ffffffff 0000007f 80000000 ffffffff     ................
   10408:	ffffffff 0000007f 80000000 ffffffff     ................
   10418:	ffffffff 0000007f 80000000 ffffffff     ................
   10428:	ffffffff 0000007f 80000000 ffffffff     ................
   10438:	ffffffff 0000007f 80000000 ffffffff     ................
   10448:	ffffffff 0000007f 80000000 ffffffff     ................
   10458:	ffffffff 0000007f 80000000 ffffffff     ................
   10468:	ffffffff 0000007f 80000000 ffffffff     ................
   10478:	ffffffff 0000007f 80000000 ffffffff     ................
   10488:	ffffffff 0000007f 80000000 ffffffff     ................
   10498:	ffffffff 0000007f 80000000 ffffffff     ................
   104a8:	ffffffff 0000007f 80000000 ffffffff     ................
   104b8:	ffffffff 0000007f 80000000 ffffffff     ................
   104c8:	ffffffff 0000007f 80000000 ffffffff     ................
   104d8:	ffffffff 0000007f 00000000 00000000     ................
	...
   10584:	e0000000 000000ff 00000000 00000000     ................
   10594:	ff800000 00007fff 00000000 00000000     ................
   105a4:	fff80000 0007ffff 00000000 00000000     ................
   105b4:	ffff0000 003fffff 00000000 00000000     ......?.........
   105c4:	ffffc000 00ffffff 00000000 00000000     ................
   105d4:	fffff000 03ffffff 00000000 00000000     ................
   105e4:	fffff800 07ffffff 00000000 00000000     ................
   105f4:	fffffe00 1fffffff 00000000 00000000     ................
   10604:	ffffff00 3fffffff 00000000 00000000     .......?........
   10614:	ffffff80 7fffffff 00000000 00000000     ................
   10624:	ffffffc0 ffffffff 00000000 00000000     ................
   10634:	ffffffe0 ffffffff 00000001 00000000     ................
   10644:	fffffff0 ffffffff 00000003 00000000     ................
   10654:	fffffff8 ffffffff 00000007 00000000     ................
   10664:	fffffff8 ffffffff 00000007 00000000     ................
   10674:	1ffffffc ffffff00 0000000f 00000000     ................
   10684:	007ffffe ffff8000 0000000f 00000000     ................
   10694:	000ffffe fffc0000 0000001f 00000000     ................
   106a4:	0001ffff fff00000 0000001f 00000000     ................
   106b4:	0000ffff ffc00000 0000003f 00000000     ........?.......
   106c4:	00007fff ff800000 0000003f 80000000     ........?.......
   106d4:	00001fff ff000000 0000007f 80000000     ................
   106e4:	00001fff fe000000 0000007f 80000000     ................
   106f4:	00000fff fc000000 0000007f 80000000     ................
   10704:	000007ff f8000000 0000007f c0000000     ................
   10714:	000007ff f8000000 000000ff c0000000     ................
   10724:	000007ff f8000000 000000ff c0000000     ................
   10734:	000003ff f0000000 000000ff c0000000     ................
   10744:	000003ff f0000000 000000ff c0000000     ................
   10754:	000003ff f0000000 000000ff c0000000     ................
   10764:	000003ff f0000000 000000ff c0000000     ................
   10774:	000003ff f0000000 000000ff c0000000     ................
   10784:	000003ff f0000000 000000ff c0000000     ................
   10794:	000003ff f0000000 000000ff c0000000     ................
   107a4:	000003ff f0000000 000000ff c0000000     ................
   107b4:	000007ff f8000000 000000ff c0000000     ................
   107c4:	000007ff f8000000 000000ff 80000000     ................
   107d4:	000007ff f8000000 0000007f 80000000     ................
   107e4:	00000fff fc000000 0000007f 80000000     ................
   107f4:	00001fff fe000000 0000007f 80000000     ................
   10804:	00003fff ff000000 0000007f 00000000     .?..............
   10814:	00007fff ff800000 0000003f 00000000     ........?.......
   10824:	0000ffff ffc00000 0000003f 00000000     ........?.......
   10834:	0003fffe fff00000 0000003f 00000000     ........?.......
   10844:	000ffffe fffc0000 0000001f 00000000     ................
   10854:	007ffffc ffff8000 0000001f 00000000     ................
   10864:	7ffffffc ffffff80 0000000f 00000000     ................
   10874:	fffffff8 ffffffff 00000007 00000000     ................
   10884:	fffffff8 ffffffff 00000007 00000000     ................
   10894:	fffffff0 ffffffff 00000003 00000000     ................
   108a4:	ffffffe0 ffffffff 00000001 00000000     ................
   108b4:	ffffffc0 ffffffff 00000000 00000000     ................
   108c4:	ffffff80 7fffffff 00000000 00000000     ................
   108d4:	ffffff00 3fffffff 00000000 00000000     .......?........
   108e4:	fffffe00 1fffffff 00000000 00000000     ................
   108f4:	fffff800 07ffffff 00000000 00000000     ................
   10904:	fffff000 03ffffff 00000000 00000000     ................
   10914:	ffffc000 00ffffff 00000000 00000000     ................
   10924:	fffe0000 003fffff 00000000 00000000     ......?.........
   10934:	fff80000 0007ffff 00000000 00000000     ................
   10944:	ff800000 00007fff 00000000 00000000     ................
   10954:	00000000 0000007e 00000000 00000000     ....~...........
	...
   10a00:	80000000 ffffffff ffffffff 0000007f     ................
   10a10:	80000000 ffffffff ffffffff 0000007f     ................
   10a20:	80000000 ffffffff ffffffff 0000007f     ................
   10a30:	80000000 ffffffff ffffffff 0000007f     ................
   10a40:	80000000 ffffffff ffffffff 0000007f     ................
   10a50:	80000000 ffffffff ffffffff 0000007f     ................
   10a60:	80000000 ffffffff ffffffff 0000007f     ................
   10a70:	80000000 ffffffff ffffffff 0000007f     ................
   10a80:	80000000 ffffffff ffffffff 0000007f     ................
   10a90:	80000000 ffffffff ffffffff 0000007f     ................
   10aa0:	80000000 ffffffff ffffffff 0000007f     ................
   10ab0:	80000000 ffffffff ffffffff 0000007f     ................
   10ac0:	80000000 ffffffff ffffffff 0000007f     ................
   10ad0:	80000000 ffffffff ffffffff 0000007f     ................
   10ae0:	80000000 ffffffff ffffffff 0000007f     ................
   10af0:	80000000 000003ff 00001ffc 00000000     ................
   10b00:	80000000 000003ff 00001ffc 00000000     ................
   10b10:	80000000 000003ff 00001ffc 00000000     ................
   10b20:	80000000 000003ff 00001ffc 00000000     ................
   10b30:	80000000 000003ff 00001ffc 00000000     ................
   10b40:	80000000 000003ff 00001ffc 00000000     ................
   10b50:	80000000 000003ff 00001ffc 00000000     ................
   10b60:	80000000 000003ff 00001ffc 00000000     ................
   10b70:	80000000 000003ff 00001ffc 00000000     ................
   10b80:	80000000 000003ff 00001ffc 00000000     ................
   10b90:	80000000 000003ff 00001ffc 00000000     ................
   10ba0:	80000000 000003ff 00001ffc 00000000     ................
   10bb0:	80000000 000003ff 00001ffc 00000000     ................
   10bc0:	80000000 000003ff 00001ffc 00000000     ................
   10bd0:	80000000 000003ff 00001ffc 00000000     ................
   10be0:	80000000 000003ff 00001ffc 00000000     ................
   10bf0:	80000000 000003ff 00001ffc 00000000     ................
   10c00:	80000000 000007ff 00001ffc 00000000     ................
   10c10:	80000000 000007ff 00001ffe 00000000     ................
   10c20:	80000000 000007ff 00001ffe 00000000     ................
   10c30:	00000000 00000fff 00000fff 00000000     ................
   10c40:	00000000 00001fff 00000fff 00000000     ................
   10c50:	00000000 80003fff 00000fff 00000000     .....?..........
   10c60:	00000000 c0007fff 00000fff 00000000     ................
   10c70:	00000000 f001fffe 000007ff 00000000     ................
   10c80:	00000000 fffffffe 000007ff 00000000     ................
   10c90:	00000000 fffffffe 000007ff 00000000     ................
   10ca0:	00000000 fffffffc 000003ff 00000000     ................
   10cb0:	00000000 fffffffc 000003ff 00000000     ................
   10cc0:	00000000 fffffff8 000001ff 00000000     ................
   10cd0:	00000000 fffffff0 000001ff 00000000     ................
   10ce0:	00000000 fffffff0 000000ff 00000000     ................
   10cf0:	00000000 ffffffe0 0000007f 00000000     ................
   10d00:	00000000 ffffffc0 0000007f 00000000     ................
   10d10:	00000000 ffffff80 0000003f 00000000     ........?.......
   10d20:	00000000 ffffff00 0000001f 00000000     ................
   10d30:	00000000 fffffe00 00000007 00000000     ................
   10d40:	00000000 fffff800 00000003 00000000     ................
   10d50:	00000000 ffffe000 00000000 00000000     ................
   10d60:	00000000 1fff0000 00000000 00000000     ................
	...
   10df4:	e0000000 000003ff 00000000 00000000     ................
   10e04:	ffc00000 0000ffff 00000000 00000000     ................
   10e14:	fff80000 0007ffff 00000000 00000000     ................
   10e24:	ffff0000 003fffff 00000000 00000000     ......?.........
   10e34:	ffffc000 00ffffff 00000000 00000000     ................
   10e44:	fffff000 03ffffff 00000000 00000000     ................
   10e54:	fffffc00 07ffffff 00000000 00000000     ................
   10e64:	fffffe00 1fffffff 00000000 00000000     ................
   10e74:	ffffff00 3fffffff 00000000 00000000     .......?........
   10e84:	ffffff80 7fffffff 00000000 00000000     ................
   10e94:	ffffffc0 ffffffff 00000000 00000000     ................
   10ea4:	ffffffe0 ffffffff 00000001 00000000     ................
   10eb4:	fffffff0 ffffffff 00000003 00000000     ................
   10ec4:	fffffff8 ffffffff 00000007 00000000     ................
   10ed4:	fffffff8 ffffffff 00000007 00000000     ................
   10ee4:	0ffffffc fffffe00 0000000f 00000000     ................
   10ef4:	003ffffe ffff8000 0000001f 00000000     ..?.............
   10f04:	0007fffe fffc0000 0000001f 00000000     ................
   10f14:	0001ffff fff00000 0000003f 00000000     ........?.......
   10f24:	0000ffff ffc00000 0000003f 00000000     ........?.......
   10f34:	00003fff ff800000 0000003f 80000000     .?......?.......
   10f44:	00001fff ff000000 0000007f 80000000     ................
   10f54:	00001fff fe000000 0000007f 80000000     ................
   10f64:	00000fff fc000000 0000007f 80000000     ................
   10f74:	000007ff f8000000 0000007f c0000000     ................
   10f84:	000007ff f8000000 000000ff c0000000     ................
   10f94:	000007ff f8000000 000000ff c0000000     ................
   10fa4:	000003ff f0000000 000000ff c0000000     ................
   10fb4:	000003ff f0000000 000000ff c0000000     ................
   10fc4:	000003ff f0000000 000000ff c0000000     ................
   10fd4:	000003ff f0000000 000000ff c0000000     ................
   10fe4:	000003ff f0000000 000000ff c0000000     ................
   10ff4:	000003ff f0000000 000000ff c0000000     ................
   11004:	000003ff f0000000 000000ff c0000000     ................
   11014:	000003ff f0000000 000000ff c0000000     ................
   11024:	000007ff f8000000 000000ff c0000000     ................
   11034:	000007ff f8000000 000000ff 80000000     ................
   11044:	000007ff f8000000 000000ff 80000000     ................
   11054:	00000fff fc000000 000001ff 80000000     ................
   11064:	00001fff fe000000 000003ff 80000000     ................
   11074:	00003fff ff000000 000007ff 00000000     .?..............
   11084:	00007fff ff800000 00000fff 00000000     ................
   11094:	0000ffff ffc00000 00000fff 00000000     ................
   110a4:	0003fffe fff00000 00001fff 00000000     ................
   110b4:	000ffffe fffc0000 00003fff 00000000     .........?......
   110c4:	00fffffc ffffc000 00007fff 00000000     ................
   110d4:	fffffffc ffffffff 0000ffff 00000000     ................
   110e4:	fffffff8 ffffffff 0000ffff 00000000     ................
   110f4:	fffffff8 ffffffff 0001ffff 00000000     ................
   11104:	fffffff0 ffffffff 0003ffff 00000000     ................
   11114:	ffffffe0 ffffffff 0007fff9 00000000     ................
   11124:	ffffffc0 ffffffff 000ffff0 00000000     ................
   11134:	ffffff80 7fffffff 0007ffe0 00000000     ................
   11144:	ffffff00 3fffffff 0003ffc0 00000000     .......?........
   11154:	fffffe00 1fffffff 0001ffc0 00000000     ................
   11164:	fffff800 07ffffff 0000ff80 00000000     ................
   11174:	ffffe000 03ffffff 0000ff00 00000000     ................
   11184:	ffffc000 00ffffff 00007e00 00000000     .........~......
   11194:	fffe0000 001fffff 00003e00 00000000     .........>......
   111a4:	fff00000 0007ffff 00001c00 00000000     ................
   111b4:	ff000000 00007fff 00000800 00000000     ................
	...
   11270:	80000000 ffffffff ffffffff 0000007f     ................
   11280:	80000000 ffffffff ffffffff 0000007f     ................
   11290:	80000000 ffffffff ffffffff 0000007f     ................
   112a0:	80000000 ffffffff ffffffff 0000007f     ................
   112b0:	80000000 ffffffff ffffffff 0000007f     ................
   112c0:	80000000 ffffffff ffffffff 0000007f     ................
   112d0:	80000000 ffffffff ffffffff 0000007f     ................
   112e0:	80000000 ffffffff ffffffff 0000007f     ................
   112f0:	80000000 ffffffff ffffffff 0000007f     ................
   11300:	80000000 ffffffff ffffffff 0000007f     ................
   11310:	80000000 ffffffff ffffffff 0000007f     ................
   11320:	80000000 ffffffff ffffffff 0000007f     ................
   11330:	80000000 ffffffff ffffffff 0000007f     ................
   11340:	80000000 ffffffff ffffffff 0000007f     ................
   11350:	80000000 ffffffff ffffffff 0000007f     ................
   11360:	80000000 000003ff 00000ffe 00000000     ................
   11370:	80000000 000003ff 00000ffe 00000000     ................
   11380:	80000000 000003ff 00000ffe 00000000     ................
   11390:	80000000 000003ff 00000ffe 00000000     ................
   113a0:	80000000 000003ff 00000ffe 00000000     ................
   113b0:	80000000 000003ff 00000ffe 00000000     ................
   113c0:	80000000 000003ff 00000ffe 00000000     ................
   113d0:	80000000 000003ff 00000ffe 00000000     ................
   113e0:	80000000 000003ff 00000ffe 00000000     ................
   113f0:	80000000 000003ff 00000ffe 00000000     ................
   11400:	80000000 000003ff 00000ffe 00000000     ................
   11410:	80000000 000003ff 00000ffe 00000000     ................
   11420:	80000000 000003ff 00001ffe 00000000     ................
   11430:	80000000 000003ff 00007ffe 00000000     ................
   11440:	80000000 000003ff 0001fffe 00000000     ................
   11450:	80000000 000003ff 0007fffe 00000000     ................
   11460:	80000000 000007ff 003fffff 00000000     ..........?.....
   11470:	80000000 000007ff 00ffffff 00000000     ................
   11480:	80000000 000007ff 03ffffff 00000000     ................
   11490:	00000000 80000fff 0fffffff 00000000     ................
   114a0:	00000000 c0001fff 3fffffff 00000000     ...........?....
   114b0:	00000000 e0003fff ffffffff 00000000     .....?..........
   114c0:	00000000 f800ffff ffffffff 00000003     ................
   114d0:	00000000 ff8ffffe ffffffff 0000000f     ................
   114e0:	00000000 fffffffe ffffffff 0000003f     ............?...
   114f0:	00000000 fffffffe ffffffff 0000007f     ................
   11500:	00000000 fffffffc fffffcff 0000007f     ................
   11510:	00000000 fffffffc fffff07f 0000007f     ................
   11520:	00000000 fffffff8 ffffc07f 0000007f     ................
   11530:	00000000 fffffff8 ffff003f 0000007f     ........?.......
   11540:	00000000 fffffff0 fffc001f 0000007f     ................
   11550:	00000000 ffffffe0 fff0001f 0000007f     ................
   11560:	00000000 ffffffe0 ffc0000f 0000007f     ................
   11570:	00000000 ffffff80 ff000007 0000007f     ................
   11580:	00000000 ffffff00 fc000003 0000007f     ................
   11590:	00000000 fffffe00 f8000000 0000007f     ................
   115a0:	00000000 3ffff800 e0000000 0000007f     .......?........
   115b0:	00000000 07ffc000 80000000 0000007f     ................
	...
   115cc:	0000007e 00000000 00000000 00000000     ~...............
   115dc:	00000078 00000000 00000000 00000000     x...............
   115ec:	00000060 00000000 00000000 00000000     `...............
	...
   11648:	00070000 00000000 00000000 00000000     ................
   11658:	00ff0000 00000000 00000000 00000000     ................
   11668:	03ff0000 00000000 00000000 00fff000     ................
   11678:	0fff0000 00000000 00000000 03fffc00     ................
   11688:	1fff0000 00000000 00000000 0fffff00     ................
   11698:	7fff0000 00000000 00000000 1fffff80     ................
   116a8:	ffff0000 00000000 00000000 7fffffc0     ................
   116b8:	ffff0000 00000001 00000000 ffffffe0     ................
   116c8:	ffff0000 00000003 00000000 fffffff0     ................
   116d8:	ffff0000 00000003 00000000 fffffff8     ................
   116e8:	ffff0001 00000007 00000000 fffffff8     ................
   116f8:	ffff0003 0000000f 00000000 fffffffc     ................
   11708:	ffff0007 0000000f 00000000 fffffffe     ................
   11718:	ffff0007 0000001f 00000000 fffffffe     ................
   11728:	ffff000f 0000001f 00000000 ffffffff     ................
   11738:	fff0000f 0000001f 00000000 ffffffff     ................
   11748:	ff80001f 0000003f 00000000 fff1ffff     ....?...........
   11758:	ff00001f 0000003f 80000000 ffc03fff     ....?........?..
   11768:	fc00003f 0000003f 80000000 ff000fff     ?...?...........
   11778:	fc00003f 0000007f 80000000 ff0007ff     ?...............
   11788:	f800007f 0000007f 80000000 fe0007ff     ................
   11798:	f000007f 0000007f 80000000 fc0003ff     ................
   117a8:	f000007f 0000007f c0000000 fc0003ff     ................
   117b8:	f00000ff 000000ff c0000000 f80001ff     ................
   117c8:	e00000ff 000000ff c0000000 f80001ff     ................
   117d8:	e00000ff 000000ff c0000000 f00001ff     ................
   117e8:	e00001ff 000000ff c0000000 f00001ff     ................
   117f8:	e00001ff 000000ff c0000000 e00001ff     ................
   11808:	e00003ff 000000ff c0000000 e00001ff     ................
   11818:	e00003ff 000000ff c0000000 e00001ff     ................
   11828:	e00003ff 000000ff c0000000 c00001ff     ................
   11838:	e00007ff 000000ff c0000000 c00001ff     ................
   11848:	e00007ff 000000ff c0000000 c00003ff     ................
   11858:	e00007ff 000000ff c0000000 c00003ff     ................
   11868:	f0000fff 000000ff 80000000 800003ff     ................
   11878:	f0001fff 000000ff 80000000 800007ff     ................
   11888:	f8001fff 0000007f 80000000 00000fff     ................
   11898:	f8003fff 0000007f 80000000 00001fff     .?..............
   118a8:	fc007fff 0000007f 00000000 00007fff     ................
   118b8:	fe00ffff 0000007f 00000000 0003ffff     ................
   118c8:	ffc7fffe 0000007f 00000000 000fffff     ................
   118d8:	fffffffe 0000003f 00000000 000ffffe     ....?...........
   118e8:	fffffffc 0000003f 00000000 000ffffe     ....?...........
   118f8:	fffffffc 0000003f 00000000 000ffffc     ....?...........
   11908:	fffffff8 0000001f 00000000 000ffffc     ................
   11918:	fffffff8 0000001f 00000000 000ffff8     ................
   11928:	fffffff0 0000000f 00000000 000ffff0     ................
   11938:	ffffffe0 00000007 00000000 000fffe0     ................
   11948:	ffffffc0 00000007 00000000 000fffe0     ................
   11958:	ffffff80 00000003 00000000 000fff80     ................
   11968:	ffffff00 00000001 00000000 000fff00     ................
   11978:	fffffe00 00000000 00000000 000ffe00     ................
   11988:	7ffffc00 00000000 00000000 000ff800     ................
   11998:	1ffff000 00000000 00000000 000fc000     ................
   119a8:	07ffc000 00000000 00000000 00000000     ................
	...
   11a10:	80000000 000003ff 00000000 00000000     ................
   11a20:	80000000 000003ff 00000000 00000000     ................
   11a30:	80000000 000003ff 00000000 00000000     ................
   11a40:	80000000 000003ff 00000000 00000000     ................
   11a50:	80000000 000003ff 00000000 00000000     ................
   11a60:	80000000 000003ff 00000000 00000000     ................
   11a70:	80000000 000003ff 00000000 00000000     ................
   11a80:	80000000 000003ff 00000000 00000000     ................
   11a90:	80000000 000003ff 00000000 00000000     ................
   11aa0:	80000000 000003ff 00000000 00000000     ................
   11ab0:	80000000 000003ff 00000000 00000000     ................
   11ac0:	80000000 000003ff 00000000 00000000     ................
   11ad0:	80000000 000003ff 00000000 00000000     ................
   11ae0:	80000000 000003ff 00000000 00000000     ................
   11af0:	80000000 000003ff 00000000 00000000     ................
   11b00:	80000000 000003ff 00000000 00000000     ................
   11b10:	80000000 000003ff 00000000 00000000     ................
   11b20:	80000000 000003ff 00000000 00000000     ................
   11b30:	80000000 000003ff 00000000 00000000     ................
   11b40:	80000000 000003ff 00000000 00000000     ................
   11b50:	80000000 000003ff 00000000 00000000     ................
   11b60:	80000000 000003ff 00000000 00000000     ................
   11b70:	80000000 ffffffff ffffffff 0000007f     ................
   11b80:	80000000 ffffffff ffffffff 0000007f     ................
   11b90:	80000000 ffffffff ffffffff 0000007f     ................
   11ba0:	80000000 ffffffff ffffffff 0000007f     ................
   11bb0:	80000000 ffffffff ffffffff 0000007f     ................
   11bc0:	80000000 ffffffff ffffffff 0000007f     ................
   11bd0:	80000000 ffffffff ffffffff 0000007f     ................
   11be0:	80000000 ffffffff ffffffff 0000007f     ................
   11bf0:	80000000 ffffffff ffffffff 0000007f     ................
   11c00:	80000000 ffffffff ffffffff 0000007f     ................
   11c10:	80000000 ffffffff ffffffff 0000007f     ................
   11c20:	80000000 ffffffff ffffffff 0000007f     ................
   11c30:	80000000 ffffffff ffffffff 0000007f     ................
   11c40:	80000000 ffffffff ffffffff 0000007f     ................
   11c50:	80000000 000003ff 00000000 00000000     ................
   11c60:	80000000 000003ff 00000000 00000000     ................
   11c70:	80000000 000003ff 00000000 00000000     ................
   11c80:	80000000 000003ff 00000000 00000000     ................
   11c90:	80000000 000003ff 00000000 00000000     ................
   11ca0:	80000000 000003ff 00000000 00000000     ................
   11cb0:	80000000 000003ff 00000000 00000000     ................
   11cc0:	80000000 000003ff 00000000 00000000     ................
   11cd0:	80000000 000003ff 00000000 00000000     ................
   11ce0:	80000000 000003ff 00000000 00000000     ................
   11cf0:	80000000 000003ff 00000000 00000000     ................
   11d00:	80000000 000003ff 00000000 00000000     ................
   11d10:	80000000 000003ff 00000000 00000000     ................
   11d20:	80000000 000003ff 00000000 00000000     ................
   11d30:	80000000 000003ff 00000000 00000000     ................
   11d40:	80000000 000003ff 00000000 00000000     ................
   11d50:	80000000 000003ff 00000000 00000000     ................
   11d60:	80000000 000003ff 00000000 00000000     ................
   11d70:	80000000 000003ff 00000000 00000000     ................
   11d80:	80000000 000003ff 00000000 00000000     ................
   11d90:	80000000 000003ff 00000000 00000000     ................
   11da0:	80000000 000003ff 00000000 00000000     ................
	...
   11e20:	80000000 ffffffff 0000ffff 00000000     ................
   11e30:	80000000 ffffffff 007fffff 00000000     ................
   11e40:	80000000 ffffffff 03ffffff 00000000     ................
   11e50:	80000000 ffffffff 0fffffff 00000000     ................
   11e60:	80000000 ffffffff 1fffffff 00000000     ................
   11e70:	80000000 ffffffff 7fffffff 00000000     ................
   11e80:	80000000 ffffffff ffffffff 00000000     ................
   11e90:	80000000 ffffffff ffffffff 00000001     ................
   11ea0:	80000000 ffffffff ffffffff 00000003     ................
   11eb0:	80000000 ffffffff ffffffff 00000007     ................
   11ec0:	80000000 ffffffff ffffffff 00000007     ................
   11ed0:	80000000 ffffffff ffffffff 0000000f     ................
   11ee0:	80000000 ffffffff ffffffff 0000000f     ................
   11ef0:	80000000 ffffffff ffffffff 0000001f     ................
   11f00:	80000000 ffffffff ffffffff 0000001f     ................
	...
   11f18:	fff80000 0000003f 00000000 00000000     ....?...........
   11f28:	ffc00000 0000003f 00000000 00000000     ....?...........
   11f38:	ff000000 0000007f 00000000 00000000     ................
   11f48:	fc000000 0000007f 00000000 00000000     ................
   11f58:	fc000000 0000007f 00000000 00000000     ................
   11f68:	f8000000 0000007f 00000000 00000000     ................
   11f78:	f0000000 0000007f 00000000 00000000     ................
   11f88:	f0000000 000000ff 00000000 00000000     ................
   11f98:	f0000000 000000ff 00000000 00000000     ................
   11fa8:	e0000000 000000ff 00000000 00000000     ................
   11fb8:	e0000000 000000ff 00000000 00000000     ................
   11fc8:	e0000000 000000ff 00000000 00000000     ................
   11fd8:	e0000000 000000ff 00000000 00000000     ................
   11fe8:	e0000000 000000ff 00000000 00000000     ................
   11ff8:	e0000000 000000ff 00000000 00000000     ................
   12008:	e0000000 000000ff 00000000 00000000     ................
   12018:	e0000000 000000ff 00000000 00000000     ................
   12028:	f0000000 000000ff 00000000 00000000     ................
   12038:	f0000000 000000ff 00000000 00000000     ................
   12048:	f0000000 000000ff 00000000 00000000     ................
   12058:	f8000000 0000007f 00000000 00000000     ................
   12068:	f8000000 0000007f 00000000 00000000     ................
   12078:	fc000000 0000007f 00000000 00000000     ................
   12088:	ff000000 0000007f 00000000 00000000     ................
   12098:	ffc00000 0000003f 00000000 00000000     ....?...........
   120a8:	fffc0000 0000003f 80000000 ffffffff     ....?...........
   120b8:	ffffffff 0000001f 80000000 ffffffff     ................
   120c8:	ffffffff 0000001f 80000000 ffffffff     ................
   120d8:	ffffffff 0000000f 80000000 ffffffff     ................
   120e8:	ffffffff 0000000f 80000000 ffffffff     ................
   120f8:	ffffffff 00000007 80000000 ffffffff     ................
   12108:	ffffffff 00000007 80000000 ffffffff     ................
   12118:	ffffffff 00000003 80000000 ffffffff     ................
   12128:	ffffffff 00000001 80000000 ffffffff     ................
   12138:	ffffffff 00000000 80000000 ffffffff     ................
   12148:	7fffffff 00000000 80000000 ffffffff     ................
   12158:	1fffffff 00000000 80000000 ffffffff     ................
   12168:	0fffffff 00000000 80000000 ffffffff     ................
   12178:	01ffffff 00000000 80000000 ffffffff     ................
   12188:	007fffff 00000000 80000000 ffffffff     ................
   12198:	0000ffff 00000000 00000000 00000000     ................
	...
   121f0:	80000000 00000000 00000000 00000000     ................
   12200:	80000000 00000003 00000000 00000000     ................
   12210:	80000000 0000001f 00000000 00000000     ................
   12220:	80000000 000000ff 00000000 00000000     ................
   12230:	80000000 000007ff 00000000 00000000     ................
   12240:	80000000 00003fff 00000000 00000000     .....?..........
   12250:	80000000 0001ffff 00000000 00000000     ................
   12260:	80000000 000fffff 00000000 00000000     ................
   12270:	80000000 007fffff 00000000 00000000     ................
   12280:	80000000 03ffffff 00000000 00000000     ................
   12290:	80000000 0fffffff 00000000 00000000     ................
   122a0:	80000000 7fffffff 00000000 00000000     ................
   122b0:	80000000 ffffffff 00000003 00000000     ................
   122c0:	80000000 ffffffff 0000001f 00000000     ................
   122d0:	80000000 ffffffff 000000ff 00000000     ................
   122e0:	80000000 ffffffff 000007ff 00000000     ................
   122f0:	80000000 ffffffff 00003fff 00000000     .........?......
   12300:	00000000 fffffffc 0001ffff 00000000     ................
   12310:	00000000 ffffffe0 000fffff 00000000     ................
   12320:	00000000 ffffff00 003fffff 00000000     ..........?.....
   12330:	00000000 fffff000 01ffffff 00000000     ................
   12340:	00000000 ffff8000 0fffffff 00000000     ................
   12350:	00000000 fffc0000 7fffffff 00000000     ................
   12360:	00000000 ffc00000 ffffffff 00000003     ................
   12370:	00000000 fe000000 ffffffff 0000001f     ................
   12380:	00000000 f0000000 ffffffff 0000007f     ................
	...
   12398:	ffffffff 0000007f 00000000 00000000     ................
   123a8:	fffffff8 0000007f 00000000 00000000     ................
   123b8:	ffffffc0 0000007f 00000000 00000000     ................
   123c8:	fffffc00 0000007f 00000000 00000000     ................
   123d8:	ffffe000 0000007f 00000000 00000000     ................
   123e8:	ffff0000 0000007f 00000000 00000000     ................
   123f8:	fff00000 0000007f 00000000 00000000     ................
   12408:	fff80000 0000007f 00000000 00000000     ................
   12418:	ffff0000 0000007f 00000000 00000000     ................
   12428:	ffffe000 0000007f 00000000 00000000     ................
   12438:	fffffe00 0000007f 00000000 00000000     ................
   12448:	ffffffc0 0000007f 00000000 00000000     ................
   12458:	fffffff8 0000007f 00000000 80000000     ................
   12468:	ffffffff 0000007f 00000000 f0000000     ................
   12478:	ffffffff 0000007f 00000000 fe000000     ................
   12488:	ffffffff 0000001f 00000000 ffe00000     ................
   12498:	ffffffff 00000003 00000000 fffc0000     ................
   124a8:	7fffffff 00000000 00000000 ffff8000     ................
   124b8:	0fffffff 00000000 00000000 fffff800     ................
   124c8:	01ffffff 00000000 00000000 ffffff00     ................
   124d8:	003fffff 00000000 00000000 ffffffe0     ..?.............
   124e8:	0007ffff 00000000 00000000 fffffffe     ................
   124f8:	0000ffff 00000000 80000000 ffffffff     ................
   12508:	00003fff 00000000 80000000 ffffffff     .?..............
   12518:	000007ff 00000000 80000000 ffffffff     ................
   12528:	000000ff 00000000 80000000 ffffffff     ................
   12538:	0000001f 00000000 80000000 ffffffff     ................
   12548:	00000003 00000000 80000000 7fffffff     ................
	...
   12560:	80000000 0fffffff 00000000 00000000     ................
   12570:	80000000 01ffffff 00000000 00000000     ................
   12580:	80000000 007fffff 00000000 00000000     ................
   12590:	80000000 000fffff 00000000 00000000     ................
   125a0:	80000000 0001ffff 00000000 00000000     ................
   125b0:	80000000 00003fff 00000000 00000000     .....?..........
   125c0:	80000000 000007ff 00000000 00000000     ................
   125d0:	80000000 000000ff 00000000 00000000     ................
   125e0:	80000000 0000001f 00000000 00000000     ................
   125f0:	80000000 00000003 00000000 00000000     ................
   12600:	80000000 00000000 00000000 00000000     ................
	...
   12630:	80000000 00000007 00000000 00000000     ................
   12640:	80000000 000000ff 00000000 00000000     ................
   12650:	80000000 00000fff 00000000 00000000     ................
   12660:	80000000 0001ffff 00000000 00000000     ................
   12670:	80000000 001fffff 00000000 00000000     ................
   12680:	80000000 03ffffff 00000000 00000000     ................
   12690:	80000000 3fffffff 00000000 00000000     .......?........
   126a0:	80000000 ffffffff 00000007 00000000     ................
   126b0:	80000000 ffffffff 0000007f 00000000     ................
   126c0:	80000000 ffffffff 00000fff 00000000     ................
   126d0:	80000000 ffffffff 0000ffff 00000000     ................
   126e0:	80000000 ffffffff 001fffff 00000000     ................
   126f0:	80000000 ffffffff 01ffffff 00000000     ................
   12700:	80000000 ffffffff 3fffffff 00000000     ...........?....
   12710:	00000000 ffffffff ffffffff 00000003     ................
   12720:	00000000 ffffffe0 ffffffff 0000007f     ................
   12730:	00000000 fffff800 ffffffff 0000007f     ................
   12740:	00000000 ffff0000 ffffffff 0000007f     ................
   12750:	00000000 ffe00000 ffffffff 0000007f     ................
   12760:	00000000 fc000000 ffffffff 0000007f     ................
	...
   12778:	ffffffff 0000007f 00000000 00000000     ................
   12788:	ffffffe0 0000007f 00000000 00000000     ................
   12798:	fffffc00 0000007f 00000000 00000000     ................
   127a8:	ffff8000 0000007f 00000000 00000000     ................
   127b8:	ffff0000 0000007f 00000000 00000000     ................
   127c8:	fffff000 0000007f 00000000 00000000     ................
   127d8:	ffffff80 0000007f 00000000 00000000     ................
   127e8:	fffffff8 0000007f 00000000 80000000     ................
   127f8:	ffffffff 0000007f 00000000 fc000000     ................
   12808:	ffffffff 0000007f 00000000 ffc00000     ................
   12818:	ffffffff 0000007f 00000000 fffc0000     ................
   12828:	ffffffff 00000003 00000000 ffffc000     ................
   12838:	3fffffff 00000000 00000000 fffffe00     ...?............
   12848:	03ffffff 00000000 00000000 ffffffe0     ................
   12858:	003fffff 00000000 00000000 fffffffe     ..?.............
   12868:	0003ffff 00000000 80000000 ffffffff     ................
   12878:	00003fff 00000000 80000000 ffffffff     .?..............
   12888:	000003ff 00000000 80000000 ffffffff     ................
   12898:	0000003f 00000000 80000000 ffffffff     ?...............
   128a8:	00000001 00000000 80000000 1fffffff     ................
	...
   128c0:	80000000 01ffffff 00000000 00000000     ................
   128d0:	80000000 01ffffff 00000000 00000000     ................
   128e0:	80000000 1fffffff 00000000 00000000     ................
   128f0:	80000000 ffffffff 00000001 00000000     ................
   12900:	80000000 ffffffff 0000001f 00000000     ................
   12910:	80000000 ffffffff 000001ff 00000000     ................
   12920:	80000000 ffffffff 00001fff 00000000     ................
   12930:	80000000 ffffffff 0001ffff 00000000     ................
   12940:	00000000 fffffff0 001fffff 00000000     ................
   12950:	00000000 ffffff00 03ffffff 00000000     ................
   12960:	00000000 ffffe000 3fffffff 00000000     ...........?....
   12970:	00000000 fffe0000 ffffffff 00000003     ................
   12980:	00000000 ffe00000 ffffffff 0000003f     ............?...
   12990:	00000000 fc000000 ffffffff 0000007f     ................
   129a0:	00000000 c0000000 ffffffff 0000007f     ................
	...
   129b8:	fffffffc 0000007f 00000000 00000000     ................
   129c8:	ffffff80 0000007f 00000000 00000000     ................
   129d8:	fffff800 0000007f 00000000 00000000     ................
   129e8:	ffff8000 0000007f 00000000 00000000     ................
   129f8:	fffe0000 0000007f 00000000 00000000     ................
   12a08:	fffff800 0000007f 00000000 00000000     ................
   12a18:	ffffffc0 0000007f 00000000 00000000     ................
   12a28:	fffffffe 0000007f 00000000 f8000000     ................
   12a38:	ffffffff 0000007f 00000000 ffc00000     ................
   12a48:	ffffffff 0000007f 00000000 fffe0000     ................
   12a58:	ffffffff 0000007f 00000000 fffff800     ................
   12a68:	ffffffff 0000007f 00000000 ffffffc0     ................
   12a78:	ffffffff 0000007f 00000000 fffffffe     ................
   12a88:	ffffffff 00000007 80000000 ffffffff     ................
   12a98:	7fffffff 00000000 80000000 ffffffff     ................
   12aa8:	03ffffff 00000000 80000000 ffffffff     ................
   12ab8:	003fffff 00000000 80000000 ffffffff     ..?.............
   12ac8:	0001ffff 00000000 80000000 ffffffff     ................
   12ad8:	00001fff 00000000 80000000 ffffffff     ................
   12ae8:	000000ff 00000000 80000000 ffffffff     ................
   12af8:	0000000f 00000000 80000000 7fffffff     ................
	...
   12b10:	80000000 07ffffff 00000000 00000000     ................
   12b20:	80000000 003fffff 00000000 00000000     ......?.........
   12b30:	80000000 0001ffff 00000000 00000000     ................
   12b40:	80000000 00001fff 00000000 00000000     ................
   12b50:	80000000 000000ff 00000000 00000000     ................
   12b60:	80000000 0000000f 00000000 00000000     ................
   12b70:	80000000 00000000 00000000 00000000     ................
	...
   12bac:	00000040 80000000 00000000 00000000     @...............
   12bbc:	00000060 80000000 00000003 00000000     `...............
   12bcc:	00000078 80000000 0000000f 00000000     x...............
   12bdc:	0000007e 80000000 0000003f 00000000     ~.......?.......
   12bec:	0000007f 80000000 0000007f c0000000     ................
   12bfc:	0000007f 80000000 000001ff f0000000     ................
   12c0c:	0000007f 80000000 000007ff fc000000     ................
   12c1c:	0000007f 80000000 00000fff fe000000     ................
   12c2c:	0000007f 80000000 00003fff ff800000     .........?......
   12c3c:	0000007f 80000000 0000ffff ffe00000     ................
   12c4c:	0000007f 80000000 0003ffff fff00000     ................
   12c5c:	0000007f 80000000 0007ffff fffc0000     ................
   12c6c:	0000007f 80000000 001fffff ffff0000     ................
   12c7c:	0000007f 80000000 007fffff ffff8000     ................
   12c8c:	0000007f 80000000 00ffffff ffffe000     ................
   12c9c:	0000007f 80000000 03ffffff fffff800     ................
   12cac:	0000007f 80000000 0fffffff fffffc00     ................
   12cbc:	0000007f 00000000 3ffffffe ffffff00     ...........?....
   12ccc:	0000001f 00000000 7ffffffc ffffffc0     ................
   12cdc:	00000007 00000000 fffffff0 fffffff1     ................
   12cec:	00000001 00000000 ffffffc0 7fffffff     ................
	...
   12d04:	ffffff00 3fffffff 00000000 00000000     .......?........
   12d14:	fffffc00 0fffffff 00000000 00000000     ................
   12d24:	fffff000 03ffffff 00000000 00000000     ................
   12d34:	ffffe000 00ffffff 00000000 00000000     ................
   12d44:	ffff8000 003fffff 00000000 00000000     ......?.........
   12d54:	fffe0000 000fffff 00000000 00000000     ................
   12d64:	fff80000 0007ffff 00000000 00000000     ................
   12d74:	ffe00000 0001ffff 00000000 00000000     ................
   12d84:	ff800000 00007fff 00000000 00000000     ................
   12d94:	ff800000 00003fff 00000000 00000000     .....?..........
   12da4:	ffe00000 0000ffff 00000000 00000000     ................
   12db4:	fff80000 0003ffff 00000000 00000000     ................
   12dc4:	fffc0000 000fffff 00000000 00000000     ................
   12dd4:	ffff0000 003fffff 00000000 00000000     ......?.........
   12de4:	ffffc000 00ffffff 00000000 00000000     ................
   12df4:	fffff000 01ffffff 00000000 00000000     ................
   12e04:	fffffc00 07ffffff 00000000 00000000     ................
   12e14:	ffffff00 1fffffff 00000000 00000000     ................
   12e24:	ffffffc0 7fffffff 00000000 00000000     ................
   12e34:	ffffffe0 fffffff1 00000001 00000000     ................
   12e44:	fffffff8 ffffffc0 00000007 00000000     ................
   12e54:	3ffffffe ffffff80 0000000f 80000000     ...?............
   12e64:	0fffffff fffffe00 0000003f 80000000     ........?.......
   12e74:	03ffffff fffff800 0000007f 80000000     ................
   12e84:	01ffffff ffffe000 0000007f 80000000     ................
   12e94:	007fffff ffffc000 0000007f 80000000     ................
   12ea4:	001fffff ffff0000 0000007f 80000000     ................
   12eb4:	000fffff fffc0000 0000007f 80000000     ................
   12ec4:	0003ffff fff80000 0000007f 80000000     ................
   12ed4:	0000ffff ffe00000 0000007f 80000000     ................
   12ee4:	00007fff ff800000 0000007f 80000000     ................
   12ef4:	00001fff ff000000 0000007f 80000000     ................
   12f04:	000007ff fc000000 0000007f 80000000     ................
   12f14:	000001ff f0000000 0000007f 80000000     ................
   12f24:	000000ff e0000000 0000007f 80000000     ................
   12f34:	0000003f 80000000 0000007f 80000000     ?...............
   12f44:	0000000f 00000000 0000007e 80000000     ........~.......
   12f54:	00000007 00000000 00000078 80000000     ........x.......
   12f64:	00000001 00000000 00000070 80000000     ........p.......
	...
   12f7c:	00000040 00000000 00000000 00000000     @...............
   12f8c:	00000000 80000000 00000000 00000000     ................
   12f9c:	00000000 80000000 00000003 00000000     ................
   12fac:	00000000 80000000 0000000f 00000000     ................
   12fbc:	00000000 80000000 0000003f 00000000     ........?.......
   12fcc:	00000000 80000000 000000ff 00000000     ................
   12fdc:	00000000 80000000 000003ff 00000000     ................
   12fec:	00000000 80000000 000007ff 00000000     ................
   12ffc:	00000000 80000000 00001fff 00000000     ................
   1300c:	00000000 80000000 00007fff 00000000     ................
   1301c:	00000000 80000000 0001ffff 00000000     ................
   1302c:	00000000 80000000 0007ffff 00000000     ................
   1303c:	00000000 80000000 001fffff 00000000     ................
   1304c:	00000000 80000000 007fffff 00000000     ................
   1305c:	00000000 80000000 01ffffff 00000000     ................
   1306c:	00000000 80000000 07ffffff 00000000     ................
   1307c:	00000000 80000000 1fffffff 00000000     ................
   1308c:	00000000 80000000 7fffffff 00000000     ................
	...
   130a4:	fffffffc 00000001 00000000 00000000     ................
   130b4:	fffffff0 00000007 00000000 00000000     ................
   130c4:	ffffffc0 0000001f 00000000 00000000     ................
   130d4:	ffffff00 0000007f 00000000 00000000     ................
   130e4:	fffffc00 000001ff 00000000 00000000     ................
   130f4:	fffff000 000007ff 00000000 00000000     ................
   13104:	ffff8000 00001fff 00000000 00000000     ................
   13114:	fffe0000 ffffffff 0000007f 00000000     ................
   13124:	fff80000 ffffffff 0000007f 00000000     ................
   13134:	ffe00000 ffffffff 0000007f 00000000     ................
   13144:	ff800000 ffffffff 0000007f 00000000     ................
   13154:	fc000000 ffffffff 0000007f 00000000     ................
   13164:	f0000000 ffffffff 0000007f 00000000     ................
   13174:	c0000000 ffffffff 0000007f 00000000     ................
   13184:	80000000 ffffffff 0000007f 00000000     ................
   13194:	e0000000 ffffffff 0000007f 00000000     ................
   131a4:	fc000000 ffffffff 0000007f 00000000     ................
   131b4:	ff000000 ffffffff 0000007f 00000000     ................
   131c4:	ffc00000 ffffffff 0000007f 00000000     ................
   131d4:	fff00000 ffffffff 0000007f 00000000     ................
   131e4:	fffc0000 ffffffff 0000007f 00000000     ................
   131f4:	ffff0000 ffffffff 0000007f 00000000     ................
   13204:	ffffe000 000007ff 00000000 00000000     ................
   13214:	fffff800 000001ff 00000000 00000000     ................
   13224:	fffffe00 0000007f 00000000 00000000     ................
   13234:	ffffff80 0000003f 00000000 00000000     ....?...........
   13244:	ffffffe0 0000000f 00000000 00000000     ................
   13254:	fffffffc 00000003 00000000 00000000     ................
   13264:	ffffffff 00000000 00000000 80000000     ................
   13274:	3fffffff 00000000 00000000 80000000     ...?............
   13284:	0fffffff 00000000 00000000 80000000     ................
   13294:	03ffffff 00000000 00000000 80000000     ................
   132a4:	00ffffff 00000000 00000000 80000000     ................
   132b4:	003fffff 00000000 00000000 80000000     ..?.............
   132c4:	000fffff 00000000 00000000 80000000     ................
   132d4:	0003ffff 00000000 00000000 80000000     ................
   132e4:	0000ffff 00000000 00000000 80000000     ................
   132f4:	00003fff 00000000 00000000 80000000     .?..............
   13304:	00000fff 00000000 00000000 80000000     ................
   13314:	000003ff 00000000 00000000 80000000     ................
   13324:	000000ff 00000000 00000000 80000000     ................
   13334:	0000003f 00000000 00000000 80000000     ?...............
   13344:	0000000f 00000000 00000000 80000000     ................
   13354:	00000003 00000000 00000000 80000000     ................
   13364:	00000001 00000000 00000000 00000000     ................
	...
   133b0:	80000000 000003ff c0000000 0000007f     ................
   133c0:	80000000 000003ff f0000000 0000007f     ................
   133d0:	80000000 000003ff f8000000 0000007f     ................
   133e0:	80000000 000003ff fe000000 0000007f     ................
   133f0:	80000000 000003ff ff000000 0000007f     ................
   13400:	80000000 000003ff ffc00000 0000007f     ................
   13410:	80000000 000003ff ffe00000 0000007f     ................
   13420:	80000000 000003ff fff80000 0000007f     ................
   13430:	80000000 000003ff fffc0000 0000007f     ................
   13440:	80000000 000003ff ffff0000 0000007f     ................
   13450:	80000000 000003ff ffff8000 0000007f     ................
   13460:	80000000 000003ff ffffe000 0000007f     ................
   13470:	80000000 000003ff fffff000 0000007f     ................
   13480:	80000000 000003ff fffffc00 0000007f     ................
   13490:	80000000 000003ff fffffe00 0000007f     ................
   134a0:	80000000 000003ff ffffff80 0000007f     ................
   134b0:	80000000 000003ff ffffffc0 0000007f     ................
   134c0:	80000000 000003ff fffffff0 0000007f     ................
   134d0:	80000000 000003ff f7fffff8 0000007f     ................
   134e0:	80000000 000003ff f3fffffe 0000007f     ................
   134f0:	80000000 000003ff f0ffffff 0000007f     ................
   13500:	80000000 c00003ff f07fffff 0000007f     ................
   13510:	80000000 e00003ff f01fffff 0000007f     ................
   13520:	80000000 f80003ff f00fffff 0000007f     ................
   13530:	80000000 fc0003ff f003ffff 0000007f     ................
   13540:	80000000 ff0003ff f001ffff 0000007f     ................
   13550:	80000000 ff8003ff f0007fff 0000007f     ................
   13560:	80000000 ffe003ff f0003fff 0000007f     .........?......
   13570:	80000000 fff003ff f0000fff 0000007f     ................
   13580:	80000000 fffc03ff f00007ff 0000007f     ................
   13590:	80000000 fffe03ff f00001ff 0000007f     ................
   135a0:	80000000 ffff83ff f00000ff 0000007f     ................
   135b0:	80000000 ffffc3ff f000003f 0000007f     ........?.......
   135c0:	80000000 fffff3ff f000001f 0000007f     ................
   135d0:	80000000 fffffbff f0000007 0000007f     ................
   135e0:	80000000 ffffffff f0000003 0000007f     ................
   135f0:	80000000 ffffffff f0000000 0000007f     ................
   13600:	80000000 7fffffff f0000000 0000007f     ................
   13610:	80000000 1fffffff f0000000 0000007f     ................
   13620:	80000000 0fffffff f0000000 0000007f     ................
   13630:	80000000 03ffffff f0000000 0000007f     ................
   13640:	80000000 01ffffff f0000000 0000007f     ................
   13650:	80000000 007fffff f0000000 0000007f     ................
   13660:	80000000 003fffff f0000000 0000007f     ......?.........
   13670:	80000000 000fffff f0000000 0000007f     ................
   13680:	80000000 0007ffff f0000000 0000007f     ................
   13690:	80000000 0001ffff f0000000 0000007f     ................
   136a0:	80000000 0000ffff f0000000 0000007f     ................
   136b0:	80000000 00003fff f0000000 0000007f     .....?..........
   136c0:	80000000 00001fff f0000000 0000007f     ................
   136d0:	80000000 000007ff f0000000 0000007f     ................
   136e0:	80000000 000003ff f0000000 0000007f     ................
   136f0:	80000000 000000ff f0000000 0000007f     ................
   13700:	80000000 0000007f f0000000 0000007f     ................
	...
   137a0:	fff80000 ffffffff ffffffff 00ffffff     ................
   137b0:	fff80000 ffffffff ffffffff 00ffffff     ................
   137c0:	fff80000 ffffffff ffffffff 00ffffff     ................
   137d0:	fff80000 ffffffff ffffffff 00ffffff     ................
   137e0:	fff80000 ffffffff ffffffff 00ffffff     ................
   137f0:	fff80000 ffffffff ffffffff 00ffffff     ................
   13800:	fff80000 ffffffff ffffffff 00ffffff     ................
   13810:	fff80000 ffffffff ffffffff 00ffffff     ................
   13820:	fff80000 ffffffff ffffffff 00ffffff     ................
   13830:	fff80000 ffffffff ffffffff 00ffffff     ................
   13840:	fff80000 ffffffff ffffffff 00ffffff     ................
   13850:	fff80000 ffffffff ffffffff 00ffffff     ................
   13860:	fff80000 ffffffff ffffffff 00ffffff     ................
   13870:	fff80000 ffffffff ffffffff 00ffffff     ................
   13880:	3ff80000 00000000 00000000 00ffe000     ...?............
   13890:	3ff80000 00000000 00000000 00ffe000     ...?............
   138a0:	3ff80000 00000000 00000000 00ffe000     ...?............
   138b0:	3ff80000 00000000 00000000 00ffe000     ...?............
   138c0:	3ff80000 00000000 00000000 00ffe000     ...?............
   138d0:	3ff80000 00000000 00000000 00ffe000     ...?............
   138e0:	3ff80000 00000000 00000000 00ffe000     ...?............
	...
   13900:	80000000 00000000 00000000 00000000     ................
   13910:	80000000 00000007 00000000 00000000     ................
   13920:	80000000 0000003f 00000000 00000000     ....?...........
   13930:	80000000 000000ff 00000000 00000000     ................
   13940:	80000000 000007ff 00000000 00000000     ................
   13950:	80000000 00001fff 00000000 00000000     ................
   13960:	80000000 0000ffff 00000000 00000000     ................
   13970:	80000000 0007ffff 00000000 00000000     ................
   13980:	80000000 001fffff 00000000 00000000     ................
   13990:	80000000 00ffffff 00000000 00000000     ................
   139a0:	80000000 03ffffff 00000000 00000000     ................
   139b0:	80000000 1fffffff 00000000 00000000     ................
   139c0:	80000000 ffffffff 00000000 00000000     ................
   139d0:	80000000 ffffffff 00000003 00000000     ................
   139e0:	80000000 ffffffff 0000001f 00000000     ................
   139f0:	00000000 fffffffe 0000007f 00000000     ................
   13a00:	00000000 fffffff0 000003ff 00000000     ................
   13a10:	00000000 ffffff80 00001fff 00000000     ................
   13a20:	00000000 fffffe00 00007fff 00000000     ................
   13a30:	00000000 fffff000 0003ffff 00000000     ................
   13a40:	00000000 ffffc000 000fffff 00000000     ................
   13a50:	00000000 fffe0000 007fffff 00000000     ................
   13a60:	00000000 fff00000 03ffffff 00000000     ................
   13a70:	00000000 ffc00000 0fffffff 00000000     ................
   13a80:	00000000 fe000000 7fffffff 00000000     ................
   13a90:	00000000 f8000000 ffffffff 00000001     ................
   13aa0:	00000000 c0000000 ffffffff 0000000f     ................
	...
   13ab8:	fffffffe 0000007f 00000000 00000000     ................
   13ac8:	fffffff8 000001ff 00000000 00000000     ................
   13ad8:	ffffffc0 00000fff 00000000 00000000     ................
   13ae8:	ffffff00 00001fff 00000000 00000000     ................
   13af8:	fffff800 00001fff 00000000 00000000     ................
   13b08:	ffffc000 00001fff 00000000 00000000     ................
   13b18:	ffff0000 00001fff 00000000 00000000     ................
   13b28:	fff80000 00001fff 00000000 00000000     ................
   13b38:	ffc00000 00001fff 00000000 00000000     ................
   13b48:	ff000000 00001fff 00000000 00000000     ................
   13b58:	f8000000 00001fff 00000000 00000000     ................
   13b68:	e0000000 00001fff 00000000 00000000     ................
   13b78:	00000000 00001fff 00000000 00000000     ................
   13b88:	00000000 00001ff8 00000000 00000000     ................
   13b98:	00000000 00001fe0 00000000 00000000     ................
   13ba8:	00000000 00001f00 00000000 00000000     ................
	...
   13bc0:	3ff80000 00000000 00000000 00ffe000     ...?............
   13bd0:	3ff80000 00000000 00000000 00ffe000     ...?............
   13be0:	3ff80000 00000000 00000000 00ffe000     ...?............
   13bf0:	3ff80000 00000000 00000000 00ffe000     ...?............
   13c00:	3ff80000 00000000 00000000 00ffe000     ...?............
   13c10:	3ff80000 00000000 00000000 00ffe000     ...?............
   13c20:	3ff80000 00000000 00000000 00ffe000     ...?............
   13c30:	fff80000 ffffffff ffffffff 00ffffff     ................
   13c40:	fff80000 ffffffff ffffffff 00ffffff     ................
   13c50:	fff80000 ffffffff ffffffff 00ffffff     ................
   13c60:	fff80000 ffffffff ffffffff 00ffffff     ................
   13c70:	fff80000 ffffffff ffffffff 00ffffff     ................
   13c80:	fff80000 ffffffff ffffffff 00ffffff     ................
   13c90:	fff80000 ffffffff ffffffff 00ffffff     ................
   13ca0:	fff80000 ffffffff ffffffff 00ffffff     ................
   13cb0:	fff80000 ffffffff ffffffff 00ffffff     ................
   13cc0:	fff80000 ffffffff ffffffff 00ffffff     ................
   13cd0:	fff80000 ffffffff ffffffff 00ffffff     ................
   13ce0:	fff80000 ffffffff ffffffff 00ffffff     ................
   13cf0:	fff80000 ffffffff ffffffff 00ffffff     ................
   13d00:	fff80000 ffffffff ffffffff 00ffffff     ................
	...
   13d98:	00000004 00000000 00000000 00000000     ................
   13da8:	00000007 00000000 00000000 e0000000     ................
   13db8:	00000007 00000000 00000000 f8000000     ................
   13dc8:	00000007 00000000 00000000 ff000000     ................
   13dd8:	00000007 00000000 00000000 ffc00000     ................
   13de8:	00000007 00000000 00000000 fff80000     ................
   13df8:	00000007 00000000 00000000 fffe0000     ................
   13e08:	00000007 00000000 00000000 ffff8000     ................
   13e18:	00000007 00000000 00000000 fffff000     ................
   13e28:	00000007 00000000 00000000 fffffc00     ................
   13e38:	00000007 00000000 00000000 ffffff80     ................
   13e48:	00000007 00000000 00000000 ffffffe0     ................
	...
   13e64:	3ffffffc 00000000 00000000 00000000     ...?............
   13e74:	07ffffff 00000000 00000000 80000000     ................
   13e84:	00ffffff 00000000 00000000 80000000     ................
   13e94:	003fffff 00000000 00000000 80000000     ..?.............
   13ea4:	0007ffff 00000000 00000000 80000000     ................
   13eb4:	0000ffff 00000000 00000000 80000000     ................
   13ec4:	00003fff 00000000 00000000 80000000     .?..............
   13ed4:	00003fff 00000000 00000000 80000000     .?..............
   13ee4:	0000ffff 00000000 00000000 80000000     ................
   13ef4:	0007ffff 00000000 00000000 80000000     ................
   13f04:	001fffff 00000000 00000000 80000000     ................
   13f14:	00ffffff 00000000 00000000 00000000     ................
   13f24:	07ffffff 00000000 00000000 00000000     ................
   13f34:	1ffffffc 00000000 00000000 00000000     ................
   13f44:	ffffffe0 00000000 00000000 00000000     ................
   13f54:	ffffff80 00000007 00000000 00000000     ................
   13f64:	fffffe00 00000007 00000000 00000000     ................
   13f74:	fffff000 00000007 00000000 00000000     ................
   13f84:	ffffc000 00000007 00000000 00000000     ................
   13f94:	fffe0000 00000007 00000000 00000000     ................
   13fa4:	fff80000 00000007 00000000 00000000     ................
   13fb4:	ffc00000 00000007 00000000 00000000     ................
   13fc4:	ff000000 00000007 00000000 00000000     ................
   13fd4:	f8000000 00000007 00000000 00000000     ................
   13fe4:	e0000000 00000007 00000000 00000000     ................
   13ff4:	80000000 00000007 00000000 00000000     ................
   14004:	00000000 00000004 00000000 00000000     ................
	...
   1403c:	0003ff80 00000000 00000000 00000000     ................
   1404c:	0003ff80 00000000 00000000 00000000     ................
   1405c:	0003ff80 00000000 00000000 00000000     ................
   1406c:	0003ff80 00000000 00000000 00000000     ................
   1407c:	0003ff80 00000000 00000000 00000000     ................
   1408c:	0003ff80 00000000 00000000 00000000     ................
   1409c:	0003ff80 00000000 00000000 00000000     ................
   140ac:	0003ff80 00000000 00000000 00000000     ................
   140bc:	0003ff80 00000000 00000000 00000000     ................
   140cc:	0003ff80 00000000 00000000 00000000     ................
   140dc:	0003ff80 00000000 00000000 00000000     ................
   140ec:	0003ff80 00000000 00000000 00000000     ................
   140fc:	0003ff80 00000000 00000000 00000000     ................
   1410c:	0003ff80 00000000 00000000 00000000     ................
   1411c:	0003ff80 00000000 00000000 00000000     ................
   1412c:	0003ff80 00000000 00000000 00000000     ................
   1413c:	0003ff80 00000000 00000000 00000000     ................
   1414c:	0003ff80 00000000 00000000 00000000     ................
   1415c:	0003ff80 00000000 00000000 00000000     ................
   1416c:	0003ff80 00000000 00000000 00000000     ................
   1417c:	0003ff80 00000000 00000000 00000000     ................
   1418c:	0003ff80 00000000 00000000 00000000     ................
   1419c:	0003ff80 00000000 00000000 00000000     ................
   141ac:	0003ff80 00000000 00000000 00000000     ................
   141bc:	0003ff80 00000000 00000000 00000000     ................
   141cc:	0003ff80 00000000 00000000 00000000     ................
   141dc:	0003ff80 00000000 00000000 00000000     ................
   141ec:	0003ff80 00000000 00000000 00000000     ................
   141fc:	0003ff80 00000000 00000000 00000000     ................
   1420c:	0003ff80 00000000 00000000 00000000     ................
   1421c:	0003ff80 00000000 00000000 00000000     ................
   1422c:	0003ff80 00000000 00000000 00000000     ................
   1423c:	0003ff80 00000000 00000000 00000000     ................
   1424c:	0003ff80 00000000 00000000 00000000     ................
   1425c:	0003ff80 00000000 00000000 00000000     ................
   1426c:	0003ff80 00000000 00000000 00000000     ................
   1427c:	0003ff80 00000000 00000000 00000000     ................
   1428c:	0003ff80 00000000 00000000 00000000     ................
   1429c:	0003ff80 00000000 00000000 00000000     ................
   142ac:	0003ff80 00000000 00000000 00000000     ................
   142bc:	0003ff80 00000000 00000000 00000000     ................
   142cc:	0003ff80 00000000 00000000 00000000     ................
   142dc:	0003ff80 00000000 00000000 00000000     ................
   142ec:	0003ff80 00000000 00000000 00000000     ................
   142fc:	0003ff80 00000000 00000000 00000000     ................
	...
   14330:	10000000 00000000 00000000 00000000     ................
   14340:	30000000 00000000 00000000 00000000     ...0............
   14350:	70000000 00000000 00000000 00000000     ...p............
   14360:	f0000000 00000000 00000000 00000000     ................
   14370:	f0000000 00000001 00000000 00000000     ................
   14380:	f0000000 00000007 00000000 00000000     ................
   14390:	f0000000 0000000f 00000000 00000000     ................
   143a0:	f0000000 0000001f 00000000 00000000     ................
   143b0:	f0000000 0000003f 00000000 00000000     ....?...........
   143c0:	f0000000 0000007f 00000000 00000000     ................
   143d0:	f0000000 000000ff 00000000 00000000     ................
   143e0:	f0000000 000001ff 00000000 00000000     ................
   143f0:	f0000000 000003ff 00000000 00000000     ................
   14400:	f0000000 000007ff 00000000 00000000     ................
   14410:	f0000000 000007ff 00000000 00000000     ................
   14420:	e0000000 000007ff 00000000 00000000     ................
   14430:	c0000000 000007ff 00000000 00000000     ................
   14440:	00000000 000007ff 00000000 00000000     ................
   14450:	00000000 000007fe 00000000 00000000     ................
   14460:	00000000 000007f8 00000000 00000000     ................
   14470:	00000000 000007f0 00000000 00000000     ................
   14480:	00000000 000007c0 00000000 00000000     ................
   14490:	00000000 00000780 00000000 00000000     ................
   144a0:	00000000 00000600 00000000 00000000     ................
   144b0:	00000000 00000400 00000000 00000000     ................
	...
   14548:	03c00000 00000000 00000000 00000000     ................
   14558:	3ffc0000 00000000 00000000 e0000000     ...?............
   14568:	ffff0003 00000000 00000000 f8000000     ................
   14578:	ffffc003 00000001 00000000 fe000000     ................
   14588:	ffffe003 00000007 00000000 ff000000     ................
   14598:	fffff003 0000000f 00000000 ff800000     ................
   145a8:	fffff003 0000000f 00000000 ffc00000     ................
   145b8:	fffff803 0000001f 00000000 ffe00000     ................
   145c8:	fffffc03 0000003f 00000000 ffe00000     ....?...........
   145d8:	fffffc03 0000003f 00000000 fff00000     ....?...........
   145e8:	fffffe03 0000007f 00000000 fff00000     ................
   145f8:	fffffe03 0000007f 00000000 fff80000     ................
   14608:	fffffe03 0000007f 00000000 fff80000     ................
   14618:	ffffff03 0000007f 00000000 fffc0000     ................
   14628:	ffffff03 000000ff 00000000 fffc0000     ................
   14638:	fc07ff03 000000ff 00000000 7ffc0000     ................
   14648:	f803ff00 000000ff 00000000 3ffc0000     ...............?
   14658:	f001ff00 000000ff 00000000 1ffe0000     ................
   14668:	e000ff80 000000ff 00000000 1ffe0000     ................
   14678:	e000ff80 000000ff 00000000 0ffe0000     ................
   14688:	e000ff80 000000ff 00000000 0ffe0000     ................
   14698:	e0007f80 000000ff 00000000 0ffe0000     ................
   146a8:	e0007f80 000000ff 00000000 0ffe0000     ................
   146b8:	e0007f80 0000007f 00000000 0ffe0000     ................
   146c8:	e0007f80 0000007f 00000000 0ffe0000     ................
   146d8:	f0007f80 0000007f 00000000 0ffe0000     ................
   146e8:	f0007f80 0000003f 00000000 1ffe0000     ....?...........
   146f8:	f0007f80 0000003f 00000000 1ffe0000     ....?...........
   14708:	f8007f80 0000001f 00000000 3ffe0000     ...............?
   14718:	fc007f80 0000001f 00000000 fffc0000     ................
   14728:	fe007f80 0000000f 00000000 fffc0000     ................
   14738:	ffffffff 00000007 00000000 fffc0000     ................
   14748:	ffffffff 0000001f 00000000 fffc0000     ................
   14758:	ffffffff 0000007f 00000000 fff80000     ................
   14768:	ffffffff 0000007f 00000000 fff80000     ................
   14778:	ffffffff 0000007f 00000000 fff00000     ................
   14788:	ffffffff 0000007f 00000000 fff00000     ................
   14798:	ffffffff 0000007f 00000000 ffe00000     ................
   147a8:	ffffffff 0000007f 00000000 ffc00000     ................
   147b8:	ffffffff 0000007f 00000000 ffc00000     ................
   147c8:	ffffffff 0000007f 00000000 ff800000     ................
   147d8:	ffffffff 0000007f 00000000 fe000000     ................
   147e8:	ffffffff 0000007f 00000000 fc000000     ................
   147f8:	ffffffff 0000007f 00000000 e0000000     ................
   14808:	ffffffff 0000007f 00000000 00000000     ................
   14818:	fffffffe 0000007f 00000000 00000000     ................
   14828:	00000000 00000078 00000000 00000000     ....x...........
   14838:	00000000 00000040 00000000 00000000     ....@...........
	...
   148d0:	f8000000 ffffffff ffffffff 0000007f     ................
   148e0:	f8000000 ffffffff ffffffff 0000007f     ................
   148f0:	f8000000 ffffffff ffffffff 0000007f     ................
   14900:	f8000000 ffffffff ffffffff 0000007f     ................
   14910:	f8000000 ffffffff ffffffff 0000007f     ................
   14920:	f8000000 ffffffff ffffffff 0000007f     ................
   14930:	f8000000 ffffffff ffffffff 0000007f     ................
   14940:	f8000000 ffffffff ffffffff 0000007f     ................
   14950:	f8000000 ffffffff ffffffff 0000007f     ................
   14960:	f8000000 ffffffff ffffffff 0000007f     ................
   14970:	f8000000 ffffffff ffffffff 0000007f     ................
   14980:	f8000000 ffffffff ffffffff 0000007f     ................
   14990:	f8000000 ffffffff ffffffff 0000003f     ............?...
   149a0:	f8000000 ffffffff ffffffff 00000003     ................
   149b0:	00000000 ffc00000 fe000000 00000007     ................
   149c0:	00000000 7fe00000 fc000000 0000000f     ................
   149d0:	00000000 3ff00000 f8000000 0000001f     .......?........
   149e0:	00000000 1ff00000 f0000000 0000001f     ................
   149f0:	00000000 1ff80000 f0000000 0000003f     ............?...
   14a00:	00000000 1ffc0000 f0000000 0000007f     ................
   14a10:	00000000 0ffc0000 e0000000 0000007f     ................
   14a20:	00000000 0ffc0000 e0000000 0000007f     ................
   14a30:	00000000 0ffe0000 e0000000 000000ff     ................
   14a40:	00000000 0ffe0000 e0000000 000000ff     ................
   14a50:	00000000 0ffe0000 e0000000 000000ff     ................
   14a60:	00000000 0ffe0000 e0000000 000000ff     ................
   14a70:	00000000 0ffe0000 e0000000 000000ff     ................
   14a80:	00000000 1ffe0000 f0000000 000000ff     ................
   14a90:	00000000 1ffe0000 f0000000 000000ff     ................
   14aa0:	00000000 3ffe0000 f8000000 000000ff     .......?........
   14ab0:	00000000 7ffe0000 fc000000 000000ff     ................
   14ac0:	00000000 fffe0000 ff000001 000000ff     ................
   14ad0:	00000000 fffc0000 ffe0000f 0000007f     ................
   14ae0:	00000000 fffc0000 ffffffff 0000007f     ................
   14af0:	00000000 fffc0000 ffffffff 0000007f     ................
   14b00:	00000000 fff80000 ffffffff 0000003f     ............?...
   14b10:	00000000 fff80000 ffffffff 0000003f     ............?...
   14b20:	00000000 fff00000 ffffffff 0000001f     ................
   14b30:	00000000 ffe00000 ffffffff 0000000f     ................
   14b40:	00000000 ffe00000 ffffffff 0000000f     ................
   14b50:	00000000 ffc00000 ffffffff 00000007     ................
   14b60:	00000000 ff800000 ffffffff 00000003     ................
   14b70:	00000000 fe000000 ffffffff 00000000     ................
   14b80:	00000000 fc000000 7fffffff 00000000     ................
   14b90:	00000000 f0000000 1fffffff 00000000     ................
   14ba0:	00000000 c0000000 07ffffff 00000000     ................
	...
   14bb8:	00fffffc 00000000 00000000 00000000     ................
   14bc8:	0001ff00 00000000 00000000 00000000     ................
	...
   14c38:	0000fe00 00000000 00000000 00000000     ................
   14c48:	003ffff8 00000000 00000000 00000000     ..?.............
   14c58:	01ffffff 00000000 00000000 e0000000     ................
   14c68:	0fffffff 00000000 00000000 f0000000     ................
   14c78:	1fffffff 00000000 00000000 fc000000     ................
   14c88:	7fffffff 00000000 00000000 fe000000     ................
   14c98:	ffffffff 00000000 00000000 ff000000     ................
   14ca8:	ffffffff 00000001 00000000 ff800000     ................
   14cb8:	ffffffff 00000003 00000000 ffc00000     ................
   14cc8:	ffffffff 00000007 00000000 ffe00000     ................
   14cd8:	ffffffff 0000000f 00000000 fff00000     ................
   14ce8:	ffffffff 0000000f 00000000 fff00000     ................
   14cf8:	ffffffff 0000001f 00000000 fff80000     ................
   14d08:	ffffffff 0000003f 00000000 fff80000     ....?...........
   14d18:	ffffffff 0000003f 00000000 fff80000     ....?...........
   14d28:	ffe0000f 0000003f 00000000 fffc0000     ....?...........
   14d38:	ff000001 0000007f 00000000 7ffc0000     ................
   14d48:	fc000000 0000007f 00000000 3ffc0000     ...............?
   14d58:	f8000000 0000007f 00000000 1ffe0000     ................
   14d68:	f0000000 000000ff 00000000 1ffe0000     ................
   14d78:	f0000000 000000ff 00000000 0ffe0000     ................
   14d88:	e0000000 000000ff 00000000 0ffe0000     ................
   14d98:	e0000000 000000ff 00000000 0ffe0000     ................
   14da8:	e0000000 000000ff 00000000 0ffe0000     ................
   14db8:	e0000000 000000ff 00000000 0ffe0000     ................
   14dc8:	e0000000 000000ff 00000000 0ffe0000     ................
   14dd8:	e0000000 000000ff 00000000 0ffe0000     ................
   14de8:	e0000000 000000ff 00000000 1ffe0000     ................
   14df8:	f0000000 000000ff 00000000 1ffe0000     ................
   14e08:	f0000000 000000ff 00000000 3ffe0000     ...............?
   14e18:	f8000000 0000007f 00000000 7ffc0000     ................
   14e28:	fc000000 0000007f 00000000 fffc0000     ................
   14e38:	fe000000 0000007f 00000000 fffc0000     ................
   14e48:	ff800007 0000007f 00000000 fff80000     ................
   14e58:	ffe0003f 0000003f 00000000 fff80000     ?...?...........
   14e68:	ffe0003f 0000003f 00000000 fff80000     ?...?...........
   14e78:	ffe0003f 0000001f 00000000 fff00000     ?...............
   14e88:	ffe0003f 0000001f 00000000 ffe00000     ?...............
   14e98:	ffe0003f 0000000f 00000000 ffe00000     ?...............
   14ea8:	ffe0003f 0000000f 00000000 ffc00000     ?...............
   14eb8:	ffe0003f 00000007 00000000 ff800000     ?...............
   14ec8:	ffe0003f 00000003 00000000 ff000000     ?...............
   14ed8:	ffe0003f 00000001 00000000 fe000000     ?...............
   14ee8:	ffe0003f 00000000 00000000 f8000000     ?...............
   14ef8:	3fe0003f 00000000 00000000 e0000000     ?..?............
   14f08:	0fe0003f 00000000 00000000 00000000     ?...............
   14f18:	03e0003f 00000000 00000000 00000000     ?...............
	...
   14f88:	0001ff80 00000000 00000000 00000000     ................
   14f98:	007ffffc 00000000 00000000 80000000     ................
   14fa8:	03ffffff 00000000 00000000 f0000000     ................
   14fb8:	1fffffff 00000000 00000000 fc000000     ................
   14fc8:	3fffffff 00000000 00000000 fe000000     ...?............
   14fd8:	ffffffff 00000000 00000000 ff000000     ................
   14fe8:	ffffffff 00000001 00000000 ffc00000     ................
   14ff8:	ffffffff 00000003 00000000 ffc00000     ................
   15008:	ffffffff 00000007 00000000 ffe00000     ................
   15018:	ffffffff 0000000f 00000000 fff00000     ................
   15028:	ffffffff 0000001f 00000000 fff80000     ................
   15038:	ffffffff 0000003f 00000000 fff80000     ....?...........
   15048:	ffffffff 0000003f 00000000 fffc0000     ....?...........
   15058:	ffffffff 0000007f 00000000 fffc0000     ................
   15068:	ffffffff 0000007f 00000000 fffc0000     ................
   15078:	ffe0000f 0000007f 00000000 fffe0000     ................
   15088:	ff000001 000000ff 00000000 fffe0000     ................
   15098:	fe000000 000000ff 00000000 7ffe0000     ................
   150a8:	f8000000 000000ff 00000000 3ffe0000     ...............?
   150b8:	f8000000 000000ff 00000000 1ffe0000     ................
   150c8:	f0000000 000000ff 00000000 1ffe0000     ................
   150d8:	f0000000 000000ff 00000000 0ffe0000     ................
   150e8:	e0000000 000000ff 00000000 0ffe0000     ................
   150f8:	e0000000 000000ff 00000000 0ffe0000     ................
   15108:	e0000000 000000ff 00000000 0ffe0000     ................
   15118:	e0000000 0000007f 00000000 0ffc0000     ................
   15128:	e0000000 0000007f 00000000 0ffc0000     ................
   15138:	e0000000 0000007f 00000000 1ff80000     ................
   15148:	f0000000 0000003f 00000000 1ff80000     ....?...........
   15158:	f0000000 0000003f 00000000 1ff00000     ....?...........
   15168:	f0000000 0000001f 00000000 3ff00000     ...............?
   15178:	f8000000 0000001f 00000000 7fe00000     ................
   15188:	fc000000 0000000f 00000000 ffc00000     ................
   15198:	ff000001 00000007 f8000000 ffffffff     ................
   151a8:	ffffffff 00000003 f8000000 ffffffff     ................
   151b8:	ffffffff 0000007f f8000000 ffffffff     ................
   151c8:	ffffffff 0000007f f8000000 ffffffff     ................
   151d8:	ffffffff 0000007f f8000000 ffffffff     ................
   151e8:	ffffffff 0000007f f8000000 ffffffff     ................
   151f8:	ffffffff 0000007f f8000000 ffffffff     ................
   15208:	ffffffff 0000007f f8000000 ffffffff     ................
   15218:	ffffffff 0000007f f8000000 ffffffff     ................
   15228:	ffffffff 0000007f f8000000 ffffffff     ................
   15238:	ffffffff 0000007f f8000000 ffffffff     ................
   15248:	ffffffff 0000007f f8000000 ffffffff     ................
   15258:	ffffffff 0000007f f8000000 ffffffff     ................
   15268:	ffffffff 0000007f f8000000 ffffffff     ................
   15278:	ffffffff 0000007f 00000000 00000000     ................
	...
   15328:	001fffe0 00000000 00000000 00000000     ................
   15338:	00fffffe 00000000 00000000 80000000     ................
   15348:	03ffffff 00000000 00000000 e0000000     ................
   15358:	0fffffff 00000000 00000000 f8000000     ................
   15368:	3fffffff 00000000 00000000 fc000000     ...?............
   15378:	7fffffff 00000000 00000000 fe000000     ................
   15388:	ffffffff 00000000 00000000 ff000000     ................
   15398:	ffffffff 00000001 00000000 ff800000     ................
   153a8:	ffffffff 00000003 00000000 ffc00000     ................
   153b8:	ffffffff 00000007 00000000 ffe00000     ................
   153c8:	ffffffff 0000000f 00000000 ffe00000     ................
   153d8:	ffffffff 0000000f 00000000 fff00000     ................
   153e8:	ffffffff 0000001f 00000000 fff80000     ................
   153f8:	ffffffff 0000001f 00000000 fff80000     ................
   15408:	fff9ffbf 0000003f 00000000 fff80000     ....?...........
   15418:	ffc1ff87 0000003f 00000000 fffc0000     ....?...........
   15428:	ff81ff81 0000007f 00000000 7ffc0000     ................
   15438:	fe01ff80 0000007f 00000000 3ffc0000     ...............?
   15448:	fc01ff80 0000007f 00000000 1ffe0000     ................
   15458:	f801ff80 0000007f 00000000 1ffe0000     ................
   15468:	f801ff80 000000ff 00000000 0ffe0000     ................
   15478:	f001ff80 000000ff 00000000 0ffe0000     ................
   15488:	f001ff80 000000ff 00000000 0ffe0000     ................
   15498:	e001ff80 000000ff 00000000 0ffe0000     ................
   154a8:	e001ff80 000000ff 00000000 0ffe0000     ................
   154b8:	e001ff80 000000ff 00000000 0ffe0000     ................
   154c8:	e001ff80 000000ff 00000000 0ffe0000     ................
   154d8:	e001ff80 000000ff 00000000 1ffe0000     ................
   154e8:	e001ff80 000000ff 00000000 1ffe0000     ................
   154f8:	e001ff80 000000ff 00000000 3ffc0000     ...............?
   15508:	e001ff80 000000ff 00000000 3ffc0000     ...............?
   15518:	f001ff80 000000ff 00000000 fffc0000     ................
   15528:	f001ff80 0000007f 00000000 fffc0000     ................
   15538:	f001ff83 0000007f 00000000 fff80000     ................
   15548:	f801ffff 0000007f 00000000 fff80000     ................
   15558:	f801ffff 0000007f 00000000 fff00000     ................
   15568:	fc01ffff 0000003f 00000000 fff00000     ....?...........
   15578:	fe01ffff 0000003f 00000000 ffe00000     ....?...........
   15588:	ff01ffff 0000001f 00000000 ffc00000     ................
   15598:	ff81ffff 0000001f 00000000 ffc00000     ................
   155a8:	ff81ffff 0000000f 00000000 ff800000     ................
   155b8:	ff01ffff 0000000f 00000000 ff000000     ................
   155c8:	fe01ffff 00000007 00000000 fc000000     ................
   155d8:	fc01ffff 00000003 00000000 f8000000     ................
   155e8:	f001ffff 00000001 00000000 e0000000     ................
   155f8:	e001ffff 00000000 00000000 00000000     ................
   15608:	4001ffff 00000000 00000000 00000000     ...@............
   15618:	0001fff0 00000000 00000000 00000000     ................
	...
   15664:	0ffc0000 00000000 00000000 00000000     ................
   15674:	0ffc0000 00000000 00000000 00000000     ................
   15684:	0ffc0000 00000000 00000000 00000000     ................
   15694:	0ffc0000 00000000 00000000 00000000     ................
   156a4:	0ffc0000 00000000 00000000 00000000     ................
   156b4:	0ffc0000 00000000 00000000 00000000     ................
   156c4:	0ffc0000 00000000 00000000 00000000     ................
   156d4:	0ffc0000 00000000 00000000 00000000     ................
   156e4:	fffffc00 ffffffff 0000007f 00000000     ................
   156f4:	ffffffe0 ffffffff 0000007f 00000000     ................
   15704:	fffffff8 ffffffff 0000007f 00000000     ................
   15714:	fffffffe ffffffff 0000007f 00000000     ................
   15724:	ffffffff ffffffff 0000007f 80000000     ................
   15734:	ffffffff ffffffff 0000007f c0000000     ................
   15744:	ffffffff ffffffff 0000007f e0000000     ................
   15754:	ffffffff ffffffff 0000007f e0000000     ................
   15764:	ffffffff ffffffff 0000007f f0000000     ................
   15774:	ffffffff ffffffff 0000007f f0000000     ................
   15784:	ffffffff ffffffff 0000007f f8000000     ................
   15794:	ffffffff ffffffff 0000007f f8000000     ................
   157a4:	ffffffff ffffffff 0000007f f8000000     ................
   157b4:	ffffffff ffffffff 0000007f fc000000     ................
   157c4:	ffffffff ffffffff 0000007f fc000000     ................
   157d4:	0ffc01ff 00000000 00000000 fc000000     ................
   157e4:	0ffc007f 00000000 00000000 fc000000     ................
   157f4:	0ffc003f 00000000 00000000 fc000000     ?...............
   15804:	0ffc003f 00000000 00000000 fc000000     ?...............
   15814:	0ffc001f 00000000 00000000 fc000000     ................
   15824:	0ffc001f 00000000 00000000 fc000000     ................
   15834:	0ffc001f 00000000 00000000 fc000000     ................
   15844:	0ffc001f 00000000 00000000 fc000000     ................
   15854:	0ffc001f 00000000 00000000 fc000000     ................
   15864:	0ffc001f 00000000 00000000 f8000000     ................
   15874:	0000001f 00000000 00000000 f8000000     ................
   15884:	0000001f 00000000 00000000 00000000     ................
	...
   158d8:	003ffff8 00000000 00000000 00000000     ..?.............
   158e8:	01ffffff 00000000 00000000 e0000000     ................
   158f8:	0fffffff 00000000 00000000 f8000000     ................
   15908:	3fffffff 00080000 00000000 fc000000     ...?............
   15918:	7fffffff 001e0000 00000000 ff000000     ................
   15928:	ffffffff 003f0000 00000000 ff800000     ......?.........
   15938:	ffffffff 007f8003 00000000 ffc00000     ................
   15948:	ffffffff 00ffe007 00000000 ffe00000     ................
   15958:	ffffffff 00fff00f 00000000 fff00000     ................
   15968:	ffffffff 01fff80f 00000000 fff00000     ................
   15978:	ffffffff 01fff01f 00000000 fff80000     ................
   15988:	ffffffff 03ffe03f 00000000 fff80000     ....?...........
   15998:	ffffffff 03ffc03f 00000000 fffc0000     ....?...........
   159a8:	ffffffff 03ff807f 00000000 fffc0000     ................
   159b8:	fff0003f 07ff807f 00000000 fffc0000     ?...............
   159c8:	ff800007 07ff007f 00000000 fffe0000     ................
   159d8:	ff000001 07ff00ff 00000000 7ffe0000     ................
   159e8:	fc000000 0fff00ff 00000000 3ffe0000     ...............?
   159f8:	f8000000 0ffe00ff 00000000 3ffe0000     ...............?
   15a08:	f0000000 0ffe00ff 00000000 1ffe0000     ................
   15a18:	f0000000 0ffe00ff 00000000 1ffe0000     ................
   15a28:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   15a38:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   15a48:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   15a58:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   15a68:	e0000000 0ffe00ff 00000000 0ffc0000     ................
   15a78:	e0000000 0fff007f 00000000 0ffc0000     ................
   15a88:	e0000000 0fff007f 00000000 0ffc0000     ................
   15a98:	f0000000 0fff007f 00000000 1ff80000     ................
   15aa8:	f0000000 07ff803f 00000000 1ff80000     ....?...........
   15ab8:	f0000000 07ffc01f 00000000 3ff00000     ...............?
   15ac8:	f8000000 07ffe01f 00000000 7fe00000     ................
   15ad8:	fc000000 07fff00f 00000000 ffc00000     ................
   15ae8:	fe000000 03fffc07 00000000 ff800000     ................
   15af8:	ffffffff 03ffffff 00000000 fffc0000     ................
   15b08:	ffffffff 03ffffff 00000000 fffc0000     ................
   15b18:	ffffffff 01ffffff 00000000 fffc0000     ................
   15b28:	ffffffff 01ffffff 00000000 fffc0000     ................
   15b38:	ffffffff 00ffffff 00000000 fffc0000     ................
   15b48:	ffffffff 007fffff 00000000 fffc0000     ................
   15b58:	ffffffff 007fffff 00000000 fffc0000     ................
   15b68:	ffffffff 003fffff 00000000 fffc0000     ......?.........
   15b78:	ffffffff 001fffff 00000000 fffc0000     ................
   15b88:	ffffffff 000fffff 00000000 fffc0000     ................
   15b98:	ffffffff 0003ffff 00000000 fffc0000     ................
   15ba8:	ffffffff 0001ffff 00000000 fffc0000     ................
   15bb8:	ffffffff 00007fff 00000000 fffc0000     ................
   15bc8:	ffffffff 00000fff 00000000 00000000     ................
	...
   15c80:	f8000000 ffffffff ffffffff 0000007f     ................
   15c90:	f8000000 ffffffff ffffffff 0000007f     ................
   15ca0:	f8000000 ffffffff ffffffff 0000007f     ................
   15cb0:	f8000000 ffffffff ffffffff 0000007f     ................
   15cc0:	f8000000 ffffffff ffffffff 0000007f     ................
   15cd0:	f8000000 ffffffff ffffffff 0000007f     ................
   15ce0:	f8000000 ffffffff ffffffff 0000007f     ................
   15cf0:	f8000000 ffffffff ffffffff 0000007f     ................
   15d00:	f8000000 ffffffff ffffffff 0000007f     ................
   15d10:	f8000000 ffffffff ffffffff 0000007f     ................
   15d20:	f8000000 ffffffff ffffffff 0000007f     ................
   15d30:	f8000000 ffffffff ffffffff 0000007f     ................
   15d40:	f8000000 ffffffff ffffffff 0000007f     ................
   15d50:	f8000000 ffffffff ffffffff 0000007f     ................
   15d60:	f8000000 ffffffff ffffffff 0000007f     ................
   15d70:	00000000 ff800000 00000000 00000000     ................
   15d80:	00000000 3fc00000 00000000 00000000     .......?........
   15d90:	00000000 3fe00000 00000000 00000000     .......?........
   15da0:	00000000 1ff00000 00000000 00000000     ................
   15db0:	00000000 1ff00000 00000000 00000000     ................
   15dc0:	00000000 0ff80000 00000000 00000000     ................
   15dd0:	00000000 0ffc0000 00000000 00000000     ................
   15de0:	00000000 0ffc0000 00000000 00000000     ................
   15df0:	00000000 0ffc0000 00000000 00000000     ................
   15e00:	00000000 0ffe0000 00000000 00000000     ................
   15e10:	00000000 0ffe0000 00000000 00000000     ................
   15e20:	00000000 0ffe0000 00000000 00000000     ................
   15e30:	00000000 1ffe0000 00000000 00000000     ................
   15e40:	00000000 1ffe0000 00000000 00000000     ................
   15e50:	00000000 3ffe0000 00000000 00000000     .......?........
   15e60:	00000000 3ffe0000 00000000 00000000     .......?........
   15e70:	00000000 fffe0000 00000000 00000000     ................
   15e80:	00000000 fffe0000 ffffffff 0000007f     ................
   15e90:	00000000 fffe0000 ffffffff 0000007f     ................
   15ea0:	00000000 fffc0000 ffffffff 0000007f     ................
   15eb0:	00000000 fffc0000 ffffffff 0000007f     ................
   15ec0:	00000000 fffc0000 ffffffff 0000007f     ................
   15ed0:	00000000 fff80000 ffffffff 0000007f     ................
   15ee0:	00000000 fff80000 ffffffff 0000007f     ................
   15ef0:	00000000 fff00000 ffffffff 0000007f     ................
   15f00:	00000000 ffe00000 ffffffff 0000007f     ................
   15f10:	00000000 ffc00000 ffffffff 0000007f     ................
   15f20:	00000000 ff800000 ffffffff 0000007f     ................
   15f30:	00000000 ff000000 ffffffff 0000007f     ................
   15f40:	00000000 fc000000 ffffffff 0000007f     ................
   15f50:	00000000 e0000000 ffffffff 0000007f     ................
	...
   16014:	00000010 00000000 00000000 00000000     ................
   16024:	fffc00fe ffffffff 0000007f 80000000     ................
   16034:	fffc03ff ffffffff 0000007f c0000000     ................
   16044:	fffc07ff ffffffff 0000007f c0000000     ................
   16054:	fffc07ff ffffffff 0000007f e0000000     ................
   16064:	fffc0fff ffffffff 0000007f e0000000     ................
   16074:	fffc0fff ffffffff 0000007f e0000000     ................
   16084:	fffc0fff ffffffff 0000007f e0000000     ................
   16094:	fffc0fff ffffffff 0000007f e0000000     ................
   160a4:	fffc0fff ffffffff 0000007f e0000000     ................
   160b4:	fffc0fff ffffffff 0000007f e0000000     ................
   160c4:	fffc0fff ffffffff 0000007f c0000000     ................
   160d4:	fffc07ff ffffffff 0000007f c0000000     ................
   160e4:	fffc07ff ffffffff 0000007f 80000000     ................
   160f4:	fffc03ff ffffffff 0000007f 00000000     ................
   16104:	fffc00fe ffffffff 0000007f 00000000     ................
	...
   1617c:	1ffc0000 00000000 00000000 00000000     ................
   1618c:	1ffc0000 00000000 00000000 00000000     ................
   1619c:	1ffc0000 00000000 00000000 00000000     ................
   161ac:	1ffe0000 00000000 00000000 00000000     ................
   161bc:	1fff0000 00000000 0000007c 00000000     ........|.......
   161cc:	1fff8000 00000000 fffc01ff ffffffff     ................
   161dc:	1fffffff 80000000 fffc03ff ffffffff     ................
   161ec:	0fffffff c0000000 fffc07ff ffffffff     ................
   161fc:	0fffffff c0000000 fffc07ff ffffffff     ................
   1620c:	0fffffff e0000000 fffc0fff ffffffff     ................
   1621c:	0fffffff e0000000 fffc0fff ffffffff     ................
   1622c:	07ffffff e0000000 fffc0fff ffffffff     ................
   1623c:	07ffffff e0000000 fffc0fff ffffffff     ................
   1624c:	03ffffff e0000000 fffc0fff ffffffff     ................
   1625c:	01ffffff e0000000 fffc0fff ffffffff     ................
   1626c:	00ffffff c0000000 fffc07ff ffffffff     ................
   1627c:	007fffff c0000000 fffc07ff ffffffff     ................
   1628c:	003fffff 80000000 fffc03ff ffffffff     ..?.............
   1629c:	000fffff 00000000 fffc01ff ffffffff     ................
   162ac:	0003ffff 00000000 0000007c 00000000     ........|.......
	...
   16360:	f8000000 ffffffff ffffffff 0000007f     ................
   16370:	f8000000 ffffffff ffffffff 0000007f     ................
   16380:	f8000000 ffffffff ffffffff 0000007f     ................
   16390:	f8000000 ffffffff ffffffff 0000007f     ................
   163a0:	f8000000 ffffffff ffffffff 0000007f     ................
   163b0:	f8000000 ffffffff ffffffff 0000007f     ................
   163c0:	f8000000 ffffffff ffffffff 0000007f     ................
   163d0:	f8000000 ffffffff ffffffff 0000007f     ................
   163e0:	f8000000 ffffffff ffffffff 0000007f     ................
   163f0:	f8000000 ffffffff ffffffff 0000007f     ................
   16400:	f8000000 ffffffff ffffffff 0000007f     ................
   16410:	f8000000 ffffffff ffffffff 0000007f     ................
   16420:	f8000000 ffffffff ffffffff 0000007f     ................
   16430:	f8000000 ffffffff ffffffff 0000007f     ................
   16440:	f8000000 ffffffff ffffffff 0000007f     ................
	...
   16458:	003ffff0 00000000 00000000 00000000     ..?.............
   16468:	001ffff8 00000000 00000000 00000000     ................
   16478:	000ffffc 00000000 00000000 00000000     ................
   16488:	0007fffe 00000000 00000000 00000000     ................
   16498:	0003ffff 00000000 00000000 c0000000     ................
   164a8:	0007ffff 00000000 00000000 e0000000     ................
   164b8:	000fffff 00000000 00000000 f0000000     ................
   164c8:	003fffff 00000000 00000000 f8000000     ..?.............
   164d8:	007fffff 00000000 00000000 fc000000     ................
   164e8:	01ffffff 00000000 00000000 fe000000     ................
   164f8:	03ffffff 00000000 00000000 ff800000     ................
   16508:	0fffffff 00000000 00000000 ffc00000     ................
   16518:	3fffffff 00000000 00000000 ffe00000     ...?............
   16528:	7fffffff 00000000 00000000 fff00000     ................
   16538:	fffffeff 00000001 00000000 fff80000     ................
   16548:	fffffc3f 00000003 00000000 fffc0000     ?...............
   16558:	fffff01f 0000000f 00000000 fffc0000     ................
   16568:	ffffe00f 0000001f 00000000 fffc0000     ................
   16578:	ffff8007 0000007f 00000000 fffc0000     ................
   16588:	ffff0003 0000007f 00000000 fffc0000     ................
   16598:	fffc0001 0000007f 00000000 7ffc0000     ................
   165a8:	fff80000 0000007f 00000000 3ffc0000     ...............?
   165b8:	ffe00000 0000007f 00000000 1ffc0000     ................
   165c8:	ffc00000 0000007f 00000000 0ffc0000     ................
   165d8:	ff000000 0000007f 00000000 07fc0000     ................
   165e8:	fe000000 0000007f 00000000 03fc0000     ................
   165f8:	f8000000 0000007f 00000000 01fc0000     ................
   16608:	f0000000 0000007f 00000000 007c0000     ..............|.
   16618:	c0000000 0000007f 00000000 003c0000     ..............<.
   16628:	80000000 0000007f 00000000 001c0000     ................
   16638:	00000000 0000007f 00000000 000c0000     ................
   16648:	00000000 0000007c 00000000 00040000     ....|...........
   16658:	00000000 00000078 00000000 00000000     ....x...........
   16668:	00000000 00000060 00000000 00000000     ....`...........
	...
   166d0:	f8000000 ffffffff ffffffff 0000007f     ................
   166e0:	f8000000 ffffffff ffffffff 0000007f     ................
   166f0:	f8000000 ffffffff ffffffff 0000007f     ................
   16700:	f8000000 ffffffff ffffffff 0000007f     ................
   16710:	f8000000 ffffffff ffffffff 0000007f     ................
   16720:	f8000000 ffffffff ffffffff 0000007f     ................
   16730:	f8000000 ffffffff ffffffff 0000007f     ................
   16740:	f8000000 ffffffff ffffffff 0000007f     ................
   16750:	f8000000 ffffffff ffffffff 0000007f     ................
   16760:	f8000000 ffffffff ffffffff 0000007f     ................
   16770:	f8000000 ffffffff ffffffff 0000007f     ................
   16780:	f8000000 ffffffff ffffffff 0000007f     ................
   16790:	f8000000 ffffffff ffffffff 0000007f     ................
   167a0:	f8000000 ffffffff ffffffff 0000007f     ................
   167b0:	f8000000 ffffffff ffffffff 0000007f     ................
	...
   16874:	fffc0000 ffffffff 0000007f 00000000     ................
   16884:	fffc0000 ffffffff 0000007f 00000000     ................
   16894:	fffc0000 ffffffff 0000007f 00000000     ................
   168a4:	fffc0000 ffffffff 0000007f 00000000     ................
   168b4:	fffc0000 ffffffff 0000007f 00000000     ................
   168c4:	fffc0000 ffffffff 0000007f 00000000     ................
   168d4:	fffc0000 ffffffff 0000007f 00000000     ................
   168e4:	fffc0000 ffffffff 0000007f 00000000     ................
   168f4:	fffc0000 ffffffff 0000007f 00000000     ................
   16904:	fffc0000 ffffffff 0000007f 00000000     ................
   16914:	fffc0000 ffffffff 0000007f 00000000     ................
   16924:	fffc0000 ffffffff 0000007f 00000000     ................
   16934:	fffc0000 ffffffff 0000007f 00000000     ................
   16944:	fffc0000 ffffffff 0000007f 00000000     ................
   16954:	ff800000 ffffffff 0000007f 00000000     ................
   16964:	ffc00000 00000000 00000000 00000000     ................
   16974:	3fe00000 00000000 00000000 00000000     ...?............
   16984:	3fe00000 00000000 00000000 00000000     ...?............
   16994:	1ff00000 00000000 00000000 00000000     ................
   169a4:	1ff80000 00000000 00000000 00000000     ................
   169b4:	0ff80000 00000000 00000000 00000000     ................
   169c4:	0ffc0000 00000000 00000000 00000000     ................
   169d4:	0ffc0000 00000000 00000000 00000000     ................
   169e4:	0ffc0000 00000000 00000000 00000000     ................
   169f4:	0ffe0000 00000000 00000000 00000000     ................
   16a04:	0ffe0000 00000000 00000000 00000000     ................
   16a14:	0ffe0000 00000000 00000000 00000000     ................
   16a24:	1ffe0000 00000000 00000000 00000000     ................
   16a34:	1ffe0000 00000000 00000000 00000000     ................
   16a44:	3ffe0000 00000000 00000000 00000000     ...?............
   16a54:	fffe0000 00000000 00000000 00000000     ................
   16a64:	fffe0000 ffffffff 0000007f 00000000     ................
   16a74:	fffe0000 ffffffff 0000007f 00000000     ................
   16a84:	fffe0000 ffffffff 0000007f 00000000     ................
   16a94:	fffc0000 ffffffff 0000007f 00000000     ................
   16aa4:	fffc0000 ffffffff 0000007f 00000000     ................
   16ab4:	fffc0000 ffffffff 0000007f 00000000     ................
   16ac4:	fff80000 ffffffff 0000007f 00000000     ................
   16ad4:	fff80000 ffffffff 0000007f 00000000     ................
   16ae4:	fff00000 ffffffff 0000007f 00000000     ................
   16af4:	ffe00000 ffffffff 0000007f 00000000     ................
   16b04:	ffc00000 ffffffff 0000007f 00000000     ................
   16b14:	ff800000 ffffffff 0000007f 00000000     ................
   16b24:	fe000000 ffffffff 0000007f 00000000     ................
   16b34:	ff000000 ffffffff 0000007f 00000000     ................
   16b44:	ff800000 ffffffff 0000007f 00000000     ................
   16b54:	ffc00000 00000000 00000000 00000000     ................
   16b64:	7fe00000 00000000 00000000 00000000     ................
   16b74:	3ff00000 00000000 00000000 00000000     ...?............
   16b84:	1ff00000 00000000 00000000 00000000     ................
   16b94:	1ff80000 00000000 00000000 00000000     ................
   16ba4:	0ff80000 00000000 00000000 00000000     ................
   16bb4:	0ffc0000 00000000 00000000 00000000     ................
   16bc4:	0ffc0000 00000000 00000000 00000000     ................
   16bd4:	0ffc0000 00000000 00000000 00000000     ................
   16be4:	0ffe0000 00000000 00000000 00000000     ................
   16bf4:	0ffe0000 00000000 00000000 00000000     ................
   16c04:	0ffe0000 00000000 00000000 00000000     ................
   16c14:	1ffe0000 00000000 00000000 00000000     ................
   16c24:	1ffe0000 00000000 00000000 00000000     ................
   16c34:	3ffe0000 00000000 00000000 00000000     ...?............
   16c44:	7ffe0000 00000000 00000000 00000000     ................
   16c54:	fffe0000 ffffffff 0000007f 00000000     ................
   16c64:	fffe0000 ffffffff 0000007f 00000000     ................
   16c74:	fffe0000 ffffffff 0000007f 00000000     ................
   16c84:	fffc0000 ffffffff 0000007f 00000000     ................
   16c94:	fffc0000 ffffffff 0000007f 00000000     ................
   16ca4:	fffc0000 ffffffff 0000007f 00000000     ................
   16cb4:	fff80000 ffffffff 0000007f 00000000     ................
   16cc4:	fff80000 ffffffff 0000007f 00000000     ................
   16cd4:	fff00000 ffffffff 0000007f 00000000     ................
   16ce4:	ffe00000 ffffffff 0000007f 00000000     ................
   16cf4:	ffc00000 ffffffff 0000007f 00000000     ................
   16d04:	ff800000 ffffffff 0000007f 00000000     ................
   16d14:	fe000000 ffffffff 0000007f 00000000     ................
   16d24:	f0000000 ffffffff 0000007f 00000000     ................
   16d34:	00000000 fffffffe 0000007f 00000000     ................
	...
   16de4:	fffc0000 ffffffff 0000007f 00000000     ................
   16df4:	fffc0000 ffffffff 0000007f 00000000     ................
   16e04:	fffc0000 ffffffff 0000007f 00000000     ................
   16e14:	fffc0000 ffffffff 0000007f 00000000     ................
   16e24:	fffc0000 ffffffff 0000007f 00000000     ................
   16e34:	fffc0000 ffffffff 0000007f 00000000     ................
   16e44:	fffc0000 ffffffff 0000007f 00000000     ................
   16e54:	fffc0000 ffffffff 0000007f 00000000     ................
   16e64:	fffc0000 ffffffff 0000007f 00000000     ................
   16e74:	fffc0000 ffffffff 0000007f 00000000     ................
   16e84:	fffc0000 ffffffff 0000007f 00000000     ................
   16e94:	fffc0000 ffffffff 0000007f 00000000     ................
   16ea4:	fffc0000 ffffffff 0000007f 00000000     ................
   16eb4:	fffc0000 ffffffff 0000007f 00000000     ................
   16ec4:	ff000000 ffffffff 0000007f 00000000     ................
   16ed4:	ff800000 00000000 00000000 00000000     ................
   16ee4:	7fc00000 00000000 00000000 00000000     ................
   16ef4:	3fe00000 00000000 00000000 00000000     ...?............
   16f04:	1ff00000 00000000 00000000 00000000     ................
   16f14:	1ff00000 00000000 00000000 00000000     ................
   16f24:	0ff80000 00000000 00000000 00000000     ................
   16f34:	0ff80000 00000000 00000000 00000000     ................
   16f44:	0ffc0000 00000000 00000000 00000000     ................
   16f54:	0ffc0000 00000000 00000000 00000000     ................
   16f64:	0ffc0000 00000000 00000000 00000000     ................
   16f74:	0ffe0000 00000000 00000000 00000000     ................
   16f84:	0ffe0000 00000000 00000000 00000000     ................
   16f94:	0ffe0000 00000000 00000000 00000000     ................
   16fa4:	1ffe0000 00000000 00000000 00000000     ................
   16fb4:	1ffe0000 00000000 00000000 00000000     ................
   16fc4:	3ffe0000 00000000 00000000 00000000     ...?............
   16fd4:	fffe0000 00000000 00000000 00000000     ................
   16fe4:	fffe0000 ffffffff 0000007f 00000000     ................
   16ff4:	fffe0000 ffffffff 0000007f 00000000     ................
   17004:	fffe0000 ffffffff 0000007f 00000000     ................
   17014:	fffc0000 ffffffff 0000007f 00000000     ................
   17024:	fffc0000 ffffffff 0000007f 00000000     ................
   17034:	fffc0000 ffffffff 0000007f 00000000     ................
   17044:	fff80000 ffffffff 0000007f 00000000     ................
   17054:	fff00000 ffffffff 0000007f 00000000     ................
   17064:	fff00000 ffffffff 0000007f 00000000     ................
   17074:	ffe00000 ffffffff 0000007f 00000000     ................
   17084:	ffc00000 ffffffff 0000007f 00000000     ................
   17094:	ff000000 ffffffff 0000007f 00000000     ................
   170a4:	fc000000 ffffffff 0000007f 00000000     ................
   170b4:	e0000000 ffffffff 0000007f 00000000     ................
	...
   17158:	0003ff80 00000000 00000000 00000000     ................
   17168:	007ffffc 00000000 00000000 00000000     ................
   17178:	03ffffff 00000000 00000000 e0000000     ................
   17188:	0fffffff 00000000 00000000 f0000000     ................
   17198:	1fffffff 00000000 00000000 fc000000     ................
   171a8:	7fffffff 00000000 00000000 fe000000     ................
   171b8:	ffffffff 00000000 00000000 ff000000     ................
   171c8:	ffffffff 00000001 00000000 ff800000     ................
   171d8:	ffffffff 00000003 00000000 ffc00000     ................
   171e8:	ffffffff 00000007 00000000 ffe00000     ................
   171f8:	ffffffff 0000000f 00000000 ffe00000     ................
   17208:	ffffffff 0000000f 00000000 fff00000     ................
   17218:	ffffffff 0000001f 00000000 fff00000     ................
   17228:	ffffffff 0000001f 00000000 fff80000     ................
   17238:	ffff87ff 0000003f 00000000 fff80000     ....?...........
   17248:	ffe0000f 0000003f 00000000 fffc0000     ....?...........
   17258:	ff000003 0000007f 00000000 fffc0000     ................
   17268:	fe000000 0000007f 00000000 7ffc0000     ................
   17278:	fc000000 0000007f 00000000 3ffc0000     ...............?
   17288:	f8000000 0000007f 00000000 1ffe0000     ................
   17298:	f0000000 000000ff 00000000 1ffe0000     ................
   172a8:	f0000000 000000ff 00000000 0ffe0000     ................
   172b8:	e0000000 000000ff 00000000 0ffe0000     ................
   172c8:	e0000000 000000ff 00000000 0ffe0000     ................
   172d8:	e0000000 000000ff 00000000 0ffe0000     ................
   172e8:	e0000000 000000ff 00000000 0ffe0000     ................
   172f8:	e0000000 000000ff 00000000 0ffe0000     ................
   17308:	e0000000 000000ff 00000000 0ffe0000     ................
   17318:	e0000000 000000ff 00000000 1ffe0000     ................
   17328:	f0000000 000000ff 00000000 1ffe0000     ................
   17338:	f0000000 000000ff 00000000 3ffc0000     ...............?
   17348:	f8000000 0000007f 00000000 7ffc0000     ................
   17358:	fc000000 0000007f 00000000 fffc0000     ................
   17368:	fe000000 0000007f 00000000 fffc0000     ................
   17378:	ff800003 0000007f 00000000 fff80000     ................
   17388:	ffe0000f 0000003f 00000000 fff80000     ....?...........
   17398:	ffffffff 0000003f 00000000 fff00000     ....?...........
   173a8:	ffffffff 0000001f 00000000 fff00000     ................
   173b8:	ffffffff 0000001f 00000000 ffe00000     ................
   173c8:	ffffffff 0000000f 00000000 ffe00000     ................
   173d8:	ffffffff 0000000f 00000000 ffc00000     ................
   173e8:	ffffffff 00000007 00000000 ff800000     ................
   173f8:	ffffffff 00000003 00000000 ff000000     ................
   17408:	ffffffff 00000001 00000000 fe000000     ................
   17418:	ffffffff 00000000 00000000 fc000000     ................
   17428:	7fffffff 00000000 00000000 f0000000     ................
   17438:	1fffffff 00000000 00000000 c0000000     ................
   17448:	0fffffff 00000000 00000000 00000000     ................
   17458:	01ffffff 00000000 00000000 00000000     ................
   17468:	007ffff8 00000000 00000000 00000000     ................
   17478:	0003ff00 00000000 00000000 00000000     ................
	...
   17514:	fffc0000 ffffffff 0fffffff 00000000     ................
   17524:	fffc0000 ffffffff 0fffffff 00000000     ................
   17534:	fffc0000 ffffffff 0fffffff 00000000     ................
   17544:	fffc0000 ffffffff 0fffffff 00000000     ................
   17554:	fffc0000 ffffffff 0fffffff 00000000     ................
   17564:	fffc0000 ffffffff 0fffffff 00000000     ................
   17574:	fffc0000 ffffffff 0fffffff 00000000     ................
   17584:	fffc0000 ffffffff 0fffffff 00000000     ................
   17594:	fffc0000 ffffffff 0fffffff 00000000     ................
   175a4:	fffc0000 ffffffff 0fffffff 00000000     ................
   175b4:	fffc0000 ffffffff 0fffffff 00000000     ................
   175c4:	fffc0000 ffffffff 0fffffff 00000000     ................
   175d4:	fffc0000 ffffffff 0fffffff 00000000     ................
   175e4:	ff800000 ffffffff 0fffffff 00000000     ................
   175f4:	ffc00000 fe000000 00000007 00000000     ................
   17604:	7fe00000 fc000000 0000000f 00000000     ................
   17614:	3ff00000 f8000000 0000001f 00000000     ...?............
   17624:	1ff80000 f0000000 0000003f 00000000     ........?.......
   17634:	1ff80000 f0000000 0000003f 00000000     ........?.......
   17644:	0ffc0000 e0000000 0000007f 00000000     ................
   17654:	0ffc0000 e0000000 0000007f 00000000     ................
   17664:	0ffc0000 e0000000 0000007f 00000000     ................
   17674:	0ffe0000 e0000000 000000ff 00000000     ................
   17684:	0ffe0000 e0000000 000000ff 00000000     ................
   17694:	0ffe0000 e0000000 000000ff 00000000     ................
   176a4:	0ffe0000 e0000000 000000ff 00000000     ................
   176b4:	1ffe0000 f0000000 000000ff 00000000     ................
   176c4:	1ffe0000 f0000000 000000ff 00000000     ................
   176d4:	3ffe0000 f8000000 000000ff 00000000     ...?............
   176e4:	7ffe0000 fc000000 000000ff 00000000     ................
   176f4:	fffe0000 fe000000 000000ff 00000000     ................
   17704:	fffe0000 ff800003 000000ff 00000000     ................
   17714:	fffc0000 fff0000f 0000007f 00000000     ................
   17724:	fffc0000 ffffffff 0000007f 00000000     ................
   17734:	fffc0000 ffffffff 0000007f 00000000     ................
   17744:	fff80000 ffffffff 0000003f 00000000     ........?.......
   17754:	fff80000 ffffffff 0000003f 00000000     ........?.......
   17764:	fff00000 ffffffff 0000001f 00000000     ................
   17774:	ffe00000 ffffffff 0000000f 00000000     ................
   17784:	ffe00000 ffffffff 00000007 00000000     ................
   17794:	ffc00000 ffffffff 00000003 00000000     ................
   177a4:	ff800000 ffffffff 00000001 00000000     ................
   177b4:	fe000000 ffffffff 00000000 00000000     ................
   177c4:	fc000000 3fffffff 00000000 00000000     .......?........
   177d4:	f0000000 1fffffff 00000000 00000000     ................
   177e4:	80000000 03ffffff 00000000 00000000     ................
   177f4:	00000000 007ffffc 00000000 00000000     ................
   17804:	00000000 0000fe00 00000000 00000000     ................
	...
   17878:	0003ffc0 00000000 00000000 00000000     ................
   17888:	007ffffe 00000000 00000000 c0000000     ................
   17898:	07ffffff 00000000 00000000 f0000000     ................
   178a8:	1fffffff 00000000 00000000 fc000000     ................
   178b8:	7fffffff 00000000 00000000 fe000000     ................
   178c8:	ffffffff 00000000 00000000 ff800000     ................
   178d8:	ffffffff 00000001 00000000 ffc00000     ................
   178e8:	ffffffff 00000007 00000000 ffe00000     ................
   178f8:	ffffffff 00000007 00000000 ffe00000     ................
   17908:	ffffffff 0000000f 00000000 fff00000     ................
   17918:	ffffffff 0000001f 00000000 fff80000     ................
   17928:	ffffffff 0000003f 00000000 fff80000     ....?...........
   17938:	ffffffff 0000003f 00000000 fffc0000     ....?...........
   17948:	ffffffff 0000007f 00000000 fffc0000     ................
   17958:	ffff87ff 0000007f 00000000 fffc0000     ................
   17968:	ffe0000f 0000007f 00000000 fffe0000     ................
   17978:	ff000001 000000ff 00000000 fffe0000     ................
   17988:	fe000000 000000ff 00000000 3ffe0000     ...............?
   17998:	f8000000 000000ff 00000000 3ffe0000     ...............?
   179a8:	f8000000 000000ff 00000000 1ffe0000     ................
   179b8:	f0000000 000000ff 00000000 1ffe0000     ................
   179c8:	f0000000 000000ff 00000000 0ffe0000     ................
   179d8:	e0000000 000000ff 00000000 0ffe0000     ................
   179e8:	e0000000 000000ff 00000000 0ffe0000     ................
   179f8:	e0000000 000000ff 00000000 0ffe0000     ................
   17a08:	e0000000 000000ff 00000000 0ffc0000     ................
   17a18:	e0000000 0000007f 00000000 0ffc0000     ................
   17a28:	e0000000 0000007f 00000000 0ffc0000     ................
   17a38:	f0000000 0000007f 00000000 1ff80000     ................
   17a48:	f0000000 0000003f 00000000 1ff00000     ....?...........
   17a58:	f0000000 0000001f 00000000 3ff00000     ...............?
   17a68:	f8000000 0000001f 00000000 7fe00000     ................
   17a78:	fc000000 0000000f 00000000 ffc00000     ................
   17a88:	fe000000 00000007 00000000 ff800000     ................
   17a98:	ffffffff 0fffffff 00000000 fff00000     ................
   17aa8:	ffffffff 0fffffff 00000000 fffc0000     ................
   17ab8:	ffffffff 0fffffff 00000000 fffc0000     ................
   17ac8:	ffffffff 0fffffff 00000000 fffc0000     ................
   17ad8:	ffffffff 0fffffff 00000000 fffc0000     ................
   17ae8:	ffffffff 0fffffff 00000000 fffc0000     ................
   17af8:	ffffffff 0fffffff 00000000 fffc0000     ................
   17b08:	ffffffff 0fffffff 00000000 fffc0000     ................
   17b18:	ffffffff 0fffffff 00000000 fffc0000     ................
   17b28:	ffffffff 0fffffff 00000000 fffc0000     ................
   17b38:	ffffffff 0fffffff 00000000 fffc0000     ................
   17b48:	ffffffff 0fffffff 00000000 fffc0000     ................
   17b58:	ffffffff 0fffffff 00000000 fffc0000     ................
   17b68:	ffffffff 0fffffff 00000000 00000000     ................
	...
   17c34:	fffc0000 ffffffff 0000007f 00000000     ................
   17c44:	fffc0000 ffffffff 0000007f 00000000     ................
   17c54:	fffc0000 ffffffff 0000007f 00000000     ................
   17c64:	fffc0000 ffffffff 0000007f 00000000     ................
   17c74:	fffc0000 ffffffff 0000007f 00000000     ................
   17c84:	fffc0000 ffffffff 0000007f 00000000     ................
   17c94:	fffc0000 ffffffff 0000007f 00000000     ................
   17ca4:	fffc0000 ffffffff 0000007f 00000000     ................
   17cb4:	fffc0000 ffffffff 0000007f 00000000     ................
   17cc4:	fffc0000 ffffffff 0000007f 00000000     ................
   17cd4:	fffc0000 ffffffff 0000007f 00000000     ................
   17ce4:	fffc0000 ffffffff 0000007f 00000000     ................
   17cf4:	fffc0000 ffffffff 0000007f 00000000     ................
   17d04:	ff000000 ffffffff 0000007f 00000000     ................
   17d14:	ff800000 00000007 00000000 00000000     ................
   17d24:	ffe00000 00000003 00000000 00000000     ................
   17d34:	fff00000 00000001 00000000 00000000     ................
   17d44:	fff00000 00000000 00000000 00000000     ................
   17d54:	fff80000 00000000 00000000 00000000     ................
   17d64:	fffc0000 00000000 00000000 00000000     ................
   17d74:	7ffc0000 00000000 00000000 00000000     ................
   17d84:	7ffc0000 00000000 00000000 00000000     ................
   17d94:	7ffe0000 00000000 00000000 00000000     ................
   17da4:	7ffe0000 00000000 00000000 00000000     ................
   17db4:	7ffe0000 00000000 00000000 00000000     ................
   17dc4:	7ffe0000 00000000 00000000 00000000     ................
   17dd4:	7ffe0000 00000000 00000000 00000000     ................
   17de4:	7ffe0000 00000000 00000000 00000000     ................
   17df4:	7ffe0000 00000000 00000000 00000000     ................
   17e04:	7ffc0000 00000000 00000000 00000000     ................
	...
   17e58:	07c00000 00000000 00000000 00000000     ................
   17e68:	1fc00006 00000000 00000000 f0000000     ................
   17e78:	7fc0007f 00000000 00000000 fc000000     ................
   17e88:	ffc001ff 00000000 00000000 fe000000     ................
   17e98:	ffc003ff 00000001 00000000 ff800000     ................
   17ea8:	ffc007ff 00000003 00000000 ffc00000     ................
   17eb8:	ffc00fff 00000007 00000000 ffc00000     ................
   17ec8:	ffc01fff 0000000f 00000000 ffe00000     ................
   17ed8:	ffc01fff 0000000f 00000000 fff00000     ................
   17ee8:	ffc03fff 0000001f 00000000 fff00000     .?..............
   17ef8:	ffc03fff 0000001f 00000000 fff80000     .?..............
   17f08:	ffc07fff 0000003f 00000000 fff80000     ....?...........
   17f18:	ffc07fff 0000003f 00000000 fffc0000     ....?...........
   17f28:	ff00ffff 0000007f 00000000 fffc0000     ................
   17f38:	fc00ffff 0000007f 00000000 7ffc0000     ................
   17f48:	f800fffc 0000007f 00000000 1ffc0000     ................
   17f58:	f001fff0 0000007f 00000000 0ffe0000     ................
   17f68:	e001ffe0 000000ff 00000000 0ffe0000     ................
   17f78:	e001ffe0 000000ff 00000000 07fe0000     ................
   17f88:	c001ffc0 000000ff 00000000 07fe0000     ................
   17f98:	c003ffc0 000000ff 00000000 07fe0000     ................
   17fa8:	c003ffc0 000000ff 00000000 07fe0000     ................
   17fb8:	c003ff80 000000ff 00000000 07fe0000     ................
   17fc8:	c003ff80 000000ff 00000000 07fe0000     ................
   17fd8:	c007ff80 000000ff 00000000 07fe0000     ................
   17fe8:	c007ff80 000000ff 00000000 0ffe0000     ................
   17ff8:	c007ff80 000000ff 00000000 0ffe0000     ................
   18008:	e00fff00 000000ff 00000000 1ffe0000     ................
   18018:	e00fff00 000000ff 00000000 3ffc0000     ...............?
   18028:	f01fff00 0000007f 00000000 fffc0000     ................
   18038:	f83fff00 0000007f 00000000 fffc0000     ..?.............
   18048:	fffffe03 0000007f 00000000 fffc0000     ................
   18058:	fffffe03 0000007f 00000000 fff80000     ................
   18068:	fffffe03 0000003f 00000000 fff80000     ....?...........
   18078:	fffffc03 0000003f 00000000 fff00000     ....?...........
   18088:	fffffc03 0000003f 00000000 fff00000     ....?...........
   18098:	fffff803 0000001f 00000000 ffe00000     ................
   180a8:	fffff803 0000000f 00000000 ffe00000     ................
   180b8:	fffff003 0000000f 00000000 ffc00000     ................
   180c8:	fffff003 00000007 00000000 ff800000     ................
   180d8:	ffffe003 00000003 00000000 ff000000     ................
   180e8:	ffffc003 00000001 00000000 fe000000     ................
   180f8:	ffff8003 00000000 00000000 f8000000     ................
   18108:	7ffe0003 00000000 00000000 c0000000     ................
   18118:	0ff80003 00000000 00000000 00000000     ................
	...
   18164:	0ffc0000 00000000 00000000 00000000     ................
   18174:	0ffc0000 00000000 00000000 00000000     ................
   18184:	0ffc0000 00000000 00000000 00000000     ................
   18194:	0ffc0000 00000000 00000000 00000000     ................
   181a4:	0ffc0000 00000000 00000000 00000000     ................
   181b4:	0ffc0000 00000000 00000000 00000000     ................
   181c4:	0ffc0000 00000000 00000000 00000000     ................
   181d4:	0ffc0000 00000000 00000000 00000000     ................
   181e4:	ffffffe0 0fffffff 00000000 00000000     ................
   181f4:	ffffffe0 ffffffff 00000000 00000000     ................
   18204:	ffffffe0 ffffffff 00000003 00000000     ................
   18214:	ffffffe0 ffffffff 00000007 00000000     ................
   18224:	ffffffe0 ffffffff 0000001f 00000000     ................
   18234:	ffffffe0 ffffffff 0000001f 00000000     ................
   18244:	ffffffe0 ffffffff 0000003f 00000000     ........?.......
   18254:	ffffffe0 ffffffff 0000003f 00000000     ........?.......
   18264:	ffffffe0 ffffffff 0000007f 00000000     ................
   18274:	ffffffe0 ffffffff 0000007f 00000000     ................
   18284:	ffffffe0 ffffffff 0000007f 00000000     ................
   18294:	ffffffe0 ffffffff 000000ff 00000000     ................
   182a4:	ffffffe0 ffffffff 000000ff 00000000     ................
   182b4:	ffffffe0 ffffffff 000000ff 00000000     ................
   182c4:	0ffc0000 ff000000 000000ff 00000000     ................
   182d4:	0ffc0000 f0000000 000000ff 00000000     ................
   182e4:	0ffc0000 f0000000 000000ff 00000000     ................
   182f4:	0ffc0000 e0000000 000000ff 00000000     ................
   18304:	0ffc0000 e0000000 000000ff 00000000     ................
   18314:	0ffc0000 e0000000 000000ff 00000000     ................
   18324:	0ffc0000 e0000000 000000ff 00000000     ................
   18334:	0ffc0000 e0000000 0000007f 00000000     ................
   18344:	0ffc0000 e0000000 0000007f 00000000     ................
   18354:	0ffc0000 e0000000 0000007f 00000000     ................
	...
   183d4:	fffc0000 00ffffff 00000000 00000000     ................
   183e4:	fffc0000 1fffffff 00000000 00000000     ................
   183f4:	fffc0000 7fffffff 00000000 00000000     ................
   18404:	fffc0000 ffffffff 00000001 00000000     ................
   18414:	fffc0000 ffffffff 00000007 00000000     ................
   18424:	fffc0000 ffffffff 0000000f 00000000     ................
   18434:	fffc0000 ffffffff 0000001f 00000000     ................
   18444:	fffc0000 ffffffff 0000001f 00000000     ................
   18454:	fffc0000 ffffffff 0000003f 00000000     ........?.......
   18464:	fffc0000 ffffffff 0000003f 00000000     ........?.......
   18474:	fffc0000 ffffffff 0000007f 00000000     ................
   18484:	fffc0000 ffffffff 0000007f 00000000     ................
   18494:	fffc0000 ffffffff 0000007f 00000000     ................
   184a4:	fffc0000 ffffffff 000000ff 00000000     ................
   184b4:	fffc0000 ffffffff 000000ff 00000000     ................
   184c4:	00000000 fe000000 000000ff 00000000     ................
   184d4:	00000000 f8000000 000000ff 00000000     ................
   184e4:	00000000 f0000000 000000ff 00000000     ................
   184f4:	00000000 f0000000 000000ff 00000000     ................
   18504:	00000000 e0000000 000000ff 00000000     ................
   18514:	00000000 e0000000 000000ff 00000000     ................
   18524:	00000000 e0000000 000000ff 00000000     ................
   18534:	00000000 e0000000 000000ff 00000000     ................
   18544:	00000000 e0000000 0000007f 00000000     ................
   18554:	00000000 e0000000 0000007f 00000000     ................
   18564:	00000000 e0000000 0000007f 00000000     ................
   18574:	00000000 f0000000 0000003f 00000000     ........?.......
   18584:	00000000 f0000000 0000003f 00000000     ........?.......
   18594:	00000000 f0000000 0000001f 00000000     ................
   185a4:	00000000 f8000000 0000001f 00000000     ................
   185b4:	00000000 fc000000 0000000f 00000000     ................
   185c4:	00000000 fe000000 00000007 00000000     ................
   185d4:	fffc0000 ffffffff 00000003 00000000     ................
   185e4:	fffc0000 ffffffff 0000007f 00000000     ................
   185f4:	fffc0000 ffffffff 0000007f 00000000     ................
   18604:	fffc0000 ffffffff 0000007f 00000000     ................
   18614:	fffc0000 ffffffff 0000007f 00000000     ................
   18624:	fffc0000 ffffffff 0000007f 00000000     ................
   18634:	fffc0000 ffffffff 0000007f 00000000     ................
   18644:	fffc0000 ffffffff 0000007f 00000000     ................
   18654:	fffc0000 ffffffff 0000007f 00000000     ................
   18664:	fffc0000 ffffffff 0000007f 00000000     ................
   18674:	fffc0000 ffffffff 0000007f 00000000     ................
   18684:	fffc0000 ffffffff 0000007f 00000000     ................
   18694:	fffc0000 ffffffff 0000007f 00000000     ................
   186a4:	fffc0000 ffffffff 0000007f 00000000     ................
	...
   18724:	001c0000 00000000 00000000 00000000     ................
   18734:	00fc0000 00000000 00000000 00000000     ................
   18744:	07fc0000 00000000 00000000 00000000     ................
   18754:	1ffc0000 00000000 00000000 00000000     ................
   18764:	fffc0000 00000000 00000000 00000000     ................
   18774:	fffc0000 00000007 00000000 00000000     ................
   18784:	fffc0000 0000003f 00000000 00000000     ....?...........
   18794:	fffc0000 000001ff 00000000 00000000     ................
   187a4:	fffc0000 00000fff 00000000 00000000     ................
   187b4:	fffc0000 00007fff 00000000 00000000     ................
   187c4:	fffc0000 0003ffff 00000000 00000000     ................
   187d4:	fffc0000 001fffff 00000000 00000000     ................
   187e4:	fffc0000 00ffffff 00000000 00000000     ................
   187f4:	fffc0000 07ffffff 00000000 00000000     ................
   18804:	fffc0000 3fffffff 00000000 00000000     .......?........
   18814:	ffc00000 ffffffff 00000001 00000000     ................
   18824:	fe000000 ffffffff 0000000f 00000000     ................
   18834:	e0000000 ffffffff 0000007f 00000000     ................
   18844:	00000000 ffffffff 0000007f 00000000     ................
   18854:	00000000 fffffff0 0000007f 00000000     ................
   18864:	00000000 ffffff00 0000007f 00000000     ................
   18874:	00000000 fffff800 0000007f 00000000     ................
   18884:	00000000 ffff8000 0000007f 00000000     ................
   18894:	00000000 fffc0000 0000007f 00000000     ................
   188a4:	00000000 ffe00000 0000007f 00000000     ................
   188b4:	00000000 fffc0000 0000007f 00000000     ................
   188c4:	00000000 ffffc000 0000007f 00000000     ................
   188d4:	00000000 fffff800 0000007f 00000000     ................
   188e4:	00000000 ffffff80 0000007f 00000000     ................
   188f4:	00000000 fffffff8 0000007f 00000000     ................
   18904:	00000000 ffffffff 0000007f 00000000     ................
   18914:	f0000000 ffffffff 0000003f 00000000     ........?.......
   18924:	fe000000 ffffffff 00000007 00000000     ................
   18934:	ffe00000 ffffffff 00000000 00000000     ................
   18944:	fffc0000 1fffffff 00000000 00000000     ................
   18954:	fffc0000 03ffffff 00000000 00000000     ................
   18964:	fffc0000 007fffff 00000000 00000000     ................
   18974:	fffc0000 001fffff 00000000 00000000     ................
   18984:	fffc0000 0003ffff 00000000 00000000     ................
   18994:	fffc0000 00007fff 00000000 00000000     ................
   189a4:	fffc0000 00000fff 00000000 00000000     ................
   189b4:	fffc0000 000001ff 00000000 00000000     ................
   189c4:	fffc0000 0000003f 00000000 00000000     ....?...........
   189d4:	fffc0000 00000007 00000000 00000000     ................
   189e4:	fffc0000 00000000 00000000 00000000     ................
   189f4:	1ffc0000 00000000 00000000 00000000     ................
   18a04:	03fc0000 00000000 00000000 00000000     ................
   18a14:	007c0000 00000000 00000000 00000000     ..|.............
   18a24:	000c0000 00000000 00000000 00000000     ................
	...
   18a54:	00040000 00000000 00000000 00000000     ................
   18a64:	007c0000 00000000 00000000 00000000     ..|.............
   18a74:	07fc0000 00000000 00000000 00000000     ................
   18a84:	7ffc0000 00000000 00000000 00000000     ................
   18a94:	fffc0000 00000003 00000000 00000000     ................
   18aa4:	fffc0000 0000003f 00000000 00000000     ....?...........
   18ab4:	fffc0000 000003ff 00000000 00000000     ................
   18ac4:	fffc0000 00003fff 00000000 00000000     .....?..........
   18ad4:	fffc0000 0003ffff 00000000 00000000     ................
   18ae4:	fffc0000 003fffff 00000000 00000000     ......?.........
   18af4:	fffc0000 03ffffff 00000000 00000000     ................
   18b04:	fffc0000 3fffffff 00000000 00000000     .......?........
   18b14:	fffc0000 ffffffff 00000003 00000000     ................
   18b24:	fffc0000 ffffffff 0000001f 00000000     ................
   18b34:	fff00000 ffffffff 0000007f 00000000     ................
   18b44:	fe000000 ffffffff 0000007f 00000000     ................
   18b54:	c0000000 ffffffff 0000007f 00000000     ................
   18b64:	00000000 fffffff8 0000007f 00000000     ................
   18b74:	00000000 ffffff00 0000007f 00000000     ................
   18b84:	00000000 ffffe000 0000007f 00000000     ................
   18b94:	00000000 fffe0000 0000007f 00000000     ................
   18ba4:	00000000 fffc0000 0000007f 00000000     ................
   18bb4:	00000000 ffffc000 0000007f 00000000     ................
   18bc4:	00000000 fffff800 0000007f 00000000     ................
   18bd4:	00000000 ffffff00 0000007f 00000000     ................
   18be4:	00000000 fffffff0 0000007f 00000000     ................
   18bf4:	00000000 fffffffe 0000001f 00000000     ................
   18c04:	e0000000 ffffffff 00000001 00000000     ................
   18c14:	fc000000 3fffffff 00000000 00000000     .......?........
   18c24:	ffc00000 07ffffff 00000000 00000000     ................
   18c34:	fff80000 007fffff 00000000 00000000     ................
   18c44:	fffc0000 000fffff 00000000 00000000     ................
   18c54:	fffc0000 0001ffff 00000000 00000000     ................
   18c64:	fffc0000 00001fff 00000000 00000000     ................
   18c74:	fffc0000 000003ff 00000000 00000000     ................
   18c84:	fffc0000 0000007f 00000000 00000000     ................
   18c94:	fffc0000 000000ff 00000000 00000000     ................
   18ca4:	fffc0000 000007ff 00000000 00000000     ................
   18cb4:	fffc0000 00003fff 00000000 00000000     .....?..........
   18cc4:	fffc0000 0003ffff 00000000 00000000     ................
   18cd4:	fffc0000 001fffff 00000000 00000000     ................
   18ce4:	fff00000 00ffffff 00000000 00000000     ................
   18cf4:	ff800000 0fffffff 00000000 00000000     ................
   18d04:	fc000000 7fffffff 00000000 00000000     ................
   18d14:	c0000000 ffffffff 00000003 00000000     ................
   18d24:	00000000 fffffffe 0000001f 00000000     ................
   18d34:	00000000 ffffffe0 0000007f 00000000     ................
   18d44:	00000000 ffffff00 0000007f 00000000     ................
   18d54:	00000000 fffff000 0000007f 00000000     ................
   18d64:	00000000 ffff8000 0000007f 00000000     ................
   18d74:	00000000 fff80000 0000007f 00000000     ................
   18d84:	00000000 ffff0000 0000007f 00000000     ................
   18d94:	00000000 fffff800 0000007f 00000000     ................
   18da4:	00000000 ffffff80 0000007f 00000000     ................
   18db4:	00000000 fffffffc 0000007f 00000000     ................
   18dc4:	e0000000 ffffffff 0000007f 00000000     ................
   18dd4:	ff000000 ffffffff 0000007f 00000000     ................
   18de4:	fff80000 ffffffff 0000007f 00000000     ................
   18df4:	fffc0000 ffffffff 0000001f 00000000     ................
   18e04:	fffc0000 ffffffff 00000001 00000000     ................
   18e14:	fffc0000 1fffffff 00000000 00000000     ................
   18e24:	fffc0000 01ffffff 00000000 00000000     ................
   18e34:	fffc0000 001fffff 00000000 00000000     ................
   18e44:	fffc0000 0001ffff 00000000 00000000     ................
   18e54:	fffc0000 00001fff 00000000 00000000     ................
   18e64:	fffc0000 000001ff 00000000 00000000     ................
   18e74:	fffc0000 0000003f 00000000 00000000     ....?...........
   18e84:	fffc0000 00000003 00000000 00000000     ................
   18e94:	3ffc0000 00000000 00000000 00000000     ...?............
   18ea4:	03fc0000 00000000 00000000 00000000     ................
   18eb4:	003c0000 00000000 00000000 00000000     ..<.............
   18ec4:	00040000 00000000 00000000 00000000     ................
	...
   18efc:	00000040 00000000 00040000 00000000     @...............
   18f0c:	00000070 00000000 001c0000 00000000     p...............
   18f1c:	00000078 00000000 007c0000 00000000     x.........|.....
   18f2c:	0000007e 00000000 00fc0000 80000000     ~...............
   18f3c:	0000007f 00000000 03fc0000 c0000000     ................
   18f4c:	0000007f 00000000 0ffc0000 f0000000     ................
   18f5c:	0000007f 00000000 3ffc0000 fc000000     ...........?....
   18f6c:	0000007f 00000000 7ffc0000 fe000000     ................
   18f7c:	0000007f 00000000 fffc0000 ff800001     ................
   18f8c:	0000007f 00000000 fffc0000 ffe00007     ................
   18f9c:	0000007f 00000000 fffc0000 fff8000f     ................
   18fac:	0000007f 00000000 fffc0000 fffc003f     ............?...
   18fbc:	0000007f 00000000 fffc0000 ffff00ff     ................
   18fcc:	0000007f 00000000 fffc0000 ffffc3ff     ................
   18fdc:	0000007f 00000000 fffc0000 ffffe7ff     ................
   18fec:	0000007f 00000000 fff80000 ffffffff     ................
   18ffc:	0000001f 00000000 ffe00000 ffffffff     ................
   1900c:	00000007 00000000 ffc00000 ffffffff     ................
   1901c:	00000003 00000000 ff000000 ffffffff     ................
	...
   19034:	fc000000 3fffffff 00000000 00000000     .......?........
   19044:	f0000000 0fffffff 00000000 00000000     ................
   19054:	c0000000 03ffffff 00000000 00000000     ................
   19064:	80000000 01ffffff 00000000 00000000     ................
   19074:	00000000 007ffffe 00000000 00000000     ................
   19084:	00000000 007ffffe 00000000 00000000     ................
   19094:	80000000 01ffffff 00000000 00000000     ................
   190a4:	e0000000 07ffffff 00000000 00000000     ................
   190b4:	f8000000 1fffffff 00000000 00000000     ................
   190c4:	fc000000 3fffffff 00000000 00000000     .......?........
   190d4:	ff000000 ffffffff 00000000 00000000     ................
   190e4:	ffc00000 ffffffff 00000003 00000000     ................
   190f4:	fff00000 ffffffff 0000000f 00000000     ................
   19104:	fffc0000 ffffffff 0000001f 00000000     ................
   19114:	fffc0000 ffffe7ff 0000007f 00000000     ................
   19124:	fffc0000 ffff81ff 0000007f 00000000     ................
   19134:	fffc0000 fffe007f 0000007f 00000000     ................
   19144:	fffc0000 fffc003f 0000007f 00000000     ....?...........
   19154:	fffc0000 fff0000f 0000007f 00000000     ................
   19164:	fffc0000 ffc00003 0000007f 00000000     ................
   19174:	fffc0000 ff800001 0000007f 00000000     ................
   19184:	7ffc0000 fe000000 0000007f 00000000     ................
   19194:	1ffc0000 f8000000 0000007f 00000000     ................
   191a4:	07fc0000 e0000000 0000007f 00000000     ................
   191b4:	03fc0000 c0000000 0000007f 00000000     ................
   191c4:	00fc0000 00000000 0000007f 00000000     ................
   191d4:	003c0000 00000000 0000007c 00000000     ..<.....|.......
   191e4:	001c0000 00000000 00000078 00000000     ........x.......
   191f4:	00040000 00000000 00000060 00000000     ........`.......
	...
   1920c:	00000040 00000000 00040000 00000000     @...............
	...
   19224:	001c0000 00000000 00000000 00000000     ................
   19234:	00fc0000 00000000 00000000 00000000     ................
   19244:	07fc0000 00000000 00000000 00000000     ................
   19254:	3ffc0000 00000000 00000000 00000000     ...?............
   19264:	fffc0000 00000001 00000000 00000000     ................
   19274:	fffc0000 0000000f 0ffc0000 00000000     ................
   19284:	fffc0000 0000007f 0ffc0000 00000000     ................
   19294:	fffc0000 000003ff 1ffc0000 00000000     ................
   192a4:	fffc0000 00001fff 1ffc0000 00000000     ................
   192b4:	fffc0000 0000ffff 1ffc0000 00000000     ................
   192c4:	fffc0000 0003ffff 1ffc0000 00000000     ................
   192d4:	fffc0000 001fffff 1ffe0000 00000000     ................
   192e4:	fffc0000 00ffffff 1ffe0000 00000000     ................
   192f4:	fffc0000 07ffffff 1ffe0000 00000000     ................
   19304:	fffc0000 3fffffff 1fff0000 00000000     .......?........
   19314:	ffe00000 ffffffff 1fffc001 00000000     ................
   19324:	ff000000 ffffffff 0ffff00f 00000000     ................
   19334:	f0000000 ffffffff 0ffffe7f 00000000     ................
   19344:	80000000 ffffffff 0fffffff 00000000     ................
   19354:	00000000 fffffffc 07ffffff 00000000     ................
   19364:	00000000 ffffffc0 07ffffff 00000000     ................
   19374:	00000000 fffffe00 03ffffff 00000000     ................
   19384:	00000000 fffff000 01ffffff 00000000     ................
   19394:	00000000 ffff0000 00ffffff 00000000     ................
   193a4:	00000000 fff80000 007fffff 00000000     ................
   193b4:	00000000 ffff0000 001fffff 00000000     ................
   193c4:	00000000 ffffe000 000fffff 00000000     ................
   193d4:	00000000 fffffe00 0001ffff 00000000     ................
   193e4:	00000000 ffffffc0 00007fff 00000000     ................
   193f4:	00000000 fffffff8 00000fff 00000000     ................
   19404:	80000000 ffffffff 000001ff 00000000     ................
   19414:	f0000000 ffffffff 0000003f 00000000     ........?.......
   19424:	ff000000 ffffffff 00000007 00000000     ................
   19434:	ffe00000 ffffffff 00000001 00000000     ................
   19444:	fffc0000 3fffffff 00000000 00000000     .......?........
   19454:	fffc0000 07ffffff 00000000 00000000     ................
   19464:	fffc0000 00ffffff 00000000 00000000     ................
   19474:	fffc0000 001fffff 00000000 00000000     ................
   19484:	fffc0000 0003ffff 00000000 00000000     ................
   19494:	fffc0000 00007fff 00000000 00000000     ................
   194a4:	fffc0000 00000fff 00000000 00000000     ................
   194b4:	fffc0000 000003ff 00000000 00000000     ................
   194c4:	fffc0000 0000007f 00000000 00000000     ................
   194d4:	fffc0000 0000000f 00000000 00000000     ................
   194e4:	fffc0000 00000001 00000000 00000000     ................
   194f4:	3ffc0000 00000000 00000000 00000000     ...?............
   19504:	07fc0000 00000000 00000000 00000000     ................
   19514:	00fc0000 00000000 00000000 00000000     ................
   19524:	001c0000 00000000 00000000 00000000     ................
   19534:	00040000 00000000 00000000 00000000     ................
	...
   19584:	1ffc0000 c0000000 0000007f 00000000     ................
   19594:	1ffc0000 f0000000 0000007f 00000000     ................
   195a4:	1ffc0000 f8000000 0000007f 00000000     ................
   195b4:	1ffc0000 fc000000 0000007f 00000000     ................
   195c4:	1ffc0000 ff000000 0000007f 00000000     ................
   195d4:	1ffc0000 ff800000 0000007f 00000000     ................
   195e4:	1ffc0000 ffe00000 0000007f 00000000     ................
   195f4:	1ffc0000 fff00000 0000007f 00000000     ................
   19604:	1ffc0000 fff80000 0000007f 00000000     ................
   19614:	1ffc0000 fffe0000 0000007f 00000000     ................
   19624:	1ffc0000 ffff0000 0000007f 00000000     ................
   19634:	1ffc0000 ffff8000 0000007f 00000000     ................
   19644:	1ffc0000 ffffe000 0000007f 00000000     ................
   19654:	1ffc0000 fffff000 0000007f 00000000     ................
   19664:	1ffc0000 fffff800 0000007f 00000000     ................
   19674:	1ffc0000 fffffe00 0000007f 00000000     ................
   19684:	1ffc0000 ffffff00 0000007f 00000000     ................
   19694:	1ffc0000 ffffff80 0000007f 00000000     ................
   196a4:	1ffc0000 f7ffffe0 0000007f 00000000     ................
   196b4:	1ffc0000 f3fffff0 0000007f 00000000     ................
   196c4:	1ffc0000 f0fffff8 0000007f 00000000     ................
   196d4:	1ffc0000 f07ffffe 0000007f 00000000     ................
   196e4:	1ffc0000 f03fffff 0000007f 00000000     ......?.........
   196f4:	9ffc0000 f00fffff 0000007f 00000000     ................
   19704:	fffc0000 f007ffff 0000007f 00000000     ................
   19714:	fffc0000 f003ffff 0000007f 00000000     ................
   19724:	fffc0000 f000ffff 0000007f 00000000     ................
   19734:	fffc0000 f0007fff 0000007f 00000000     ................
   19744:	fffc0000 f0003fff 0000007f 00000000     .....?..........
   19754:	fffc0000 f0000fff 0000007f 00000000     ................
   19764:	fffc0000 f00007ff 0000007f 00000000     ................
   19774:	fffc0000 f00003ff 0000007f 00000000     ................
   19784:	fffc0000 f00000ff 0000007f 00000000     ................
   19794:	fffc0000 f000007f 0000007f 00000000     ................
   197a4:	fffc0000 f000003f 0000007f 00000000     ....?...........
   197b4:	fffc0000 f000000f 0000007f 00000000     ................
   197c4:	fffc0000 f0000007 0000007f 00000000     ................
   197d4:	fffc0000 f0000003 0000007f 00000000     ................
   197e4:	fffc0000 f0000000 0000007f 00000000     ................
   197f4:	7ffc0000 f0000000 0000007f 00000000     ................
   19804:	3ffc0000 f0000000 0000007f 00000000     ...?............
   19814:	0ffc0000 f0000000 0000007f 00000000     ................
   19824:	07fc0000 f0000000 0000007f 00000000     ................
   19834:	00000000 f0000000 0000007f 00000000     ................
	...
   19898:	00001ff8 00000000 00000000 00000000     ................
   198a8:	00001ff8 00000000 00000000 00000000     ................
   198b8:	00001ff8 00000000 00000000 00000000     ................
   198c8:	00001ff8 00000000 00000000 00000000     ................
   198d8:	00003ffc 00000000 00000000 00000000     .?..............
   198e8:	00003ffc 00000000 00000000 00000000     .?..............
   198f8:	00007ffe 00000000 00000000 80000000     ................
   19908:	0001ffff 00000000 00000000 e0000000     ................
   19918:	0007ffff 00000000 00000000 fffffe00     ................
   19928:	ffffffff 0000007f 00000000 ffffffe0     ................
   19938:	ffffffff 000007ff 00000000 fffffff8     ................
   19948:	ffffffff 00003fff 00000000 fffffffe     .....?..........
   19958:	ffffffff 00007fff 00000000 ffffffff     ................
   19968:	ffffffff 0001ffff 80000000 ffffffff     ................
   19978:	fffffe7f 0003ffff c0000000 ffffffff     ................
   19988:	fffffc3f 0007ffff e0000000 ffffffff     ?...............
   19998:	fffffc3f 000fffff f0000000 ffffffff     ?...............
   199a8:	fffff81f 001fffff f0000000 ffffffff     ................
   199b8:	ffffe00f 001fffff f8000000 ffffffff     ................
   199c8:	ffffc003 003fffff fc000000 ffffffff     ......?.........
   199d8:	ffff0000 007fffff fc000000 0fffffff     ................
   199e8:	fff00000 007fffff fe000000 000000ff     ................
   199f8:	00000000 007fff00 fe000000 0000001f     ................
   19a08:	00000000 00fff800 fe000000 0000000f     ................
   19a18:	00000000 00ffe000 ff000000 00000003     ................
   19a28:	00000000 01ffc000 ff000000 00000003     ................
   19a38:	00000000 01ff8000 fc000000 00000001     ................
   19a48:	00000000 007f0000 e0000000 00000000     ................
   19a58:	00000000 000f0000 00000000 00000001     ................
   19a68:	00000000 00020000 00000000 00000000     ................
	...
   19b10:	80000000 ffffffff ffffffff 000fffff     ................
   19b20:	80000000 ffffffff ffffffff 000fffff     ................
   19b30:	80000000 ffffffff ffffffff 000fffff     ................
   19b40:	80000000 ffffffff ffffffff 000fffff     ................
   19b50:	80000000 ffffffff ffffffff 000fffff     ................
   19b60:	80000000 ffffffff ffffffff 000fffff     ................
   19b70:	80000000 ffffffff ffffffff 000fffff     ................
   19b80:	80000000 ffffffff ffffffff 000fffff     ................
	...
   19c34:	00000001 00000000 00020000 e0000000     ................
	...
   19c4c:	000f0000 fc000000 00000001 00000000     ................
   19c5c:	007f0000 ff000000 00000003 00000000     ................
   19c6c:	01ff8000 ff000000 00000007 00000000     ................
   19c7c:	01ffc000 fe000000 0000000f 00000000     ................
   19c8c:	00ffe000 fe000000 0000003f 00000000     ........?.......
   19c9c:	00fff800 fe000000 000000ff 00000000     ................
   19cac:	007fff00 fc000000 0fffffff fff00000     ................
   19cbc:	007fffff fc000000 ffffffff ffff0000     ................
   19ccc:	007fffff f8000000 ffffffff ffffc003     ................
   19cdc:	003fffff f0000000 ffffffff ffffe00f     ..?.............
   19cec:	001fffff f0000000 ffffffff fffff81f     ................
   19cfc:	001fffff e0000000 ffffffff fffffc3f     ............?...
   19d0c:	000fffff c0000000 ffffffff fffffc3f     ............?...
   19d1c:	0007ffff 80000000 ffffffff fffffe7f     ................
   19d2c:	0003ffff 00000000 ffffffff ffffffff     ................
   19d3c:	0001ffff 00000000 fffffffe ffffffff     ................
   19d4c:	00007fff 00000000 fffffff8 ffffffff     ................
   19d5c:	00003fff 00000000 ffffffe0 ffffffff     .?..............
   19d6c:	000007ff 00000000 fffffe00 ffffffff     ................
   19d7c:	0000007f 00000000 e0000000 0007ffff     ................
	...
   19d94:	80000000 0001ffff 00000000 00000000     ................
   19da4:	00000000 00007ffe 00000000 00000000     ................
   19db4:	00000000 00003ffc 00000000 00000000     .....?..........
   19dc4:	00000000 00003ffc 00000000 00000000     .....?..........
   19dd4:	00000000 00001ff8 00000000 00000000     ................
   19de4:	00000000 00001ff8 00000000 00000000     ................
   19df4:	00000000 00001ff8 00000000 00000000     ................
   19e04:	00000000 00001ff8 00000000 00000000     ................
	...
   19e88:	0003c000 00000000 00000000 00000000     ................
   19e98:	0003fe00 00000000 00000000 00000000     ................
   19ea8:	0003ff80 00000000 00000000 00000000     ................
   19eb8:	0003ffe0 00000000 00000000 00000000     ................
   19ec8:	0003fff0 00000000 00000000 00000000     ................
   19ed8:	0003fff8 00000000 00000000 00000000     ................
   19ee8:	0003fffc 00000000 00000000 00000000     ................
   19ef8:	0003fffe 00000000 00000000 00000000     ................
   19f08:	0003ffff 00000000 00000000 00000000     ................
   19f18:	0003ffff 00000000 00000000 80000000     ................
   19f28:	0003ffff 00000000 00000000 80000000     ................
   19f38:	00003fff 00000000 00000000 c0000000     .?..............
   19f48:	00000fff 00000000 00000000 c0000000     ................
   19f58:	000003ff 00000000 00000000 c0000000     ................
   19f68:	000003ff 00000000 00000000 c0000000     ................
   19f78:	000001ff 00000000 00000000 c0000000     ................
   19f88:	000001ff 00000000 00000000 c0000000     ................
   19f98:	000001ff 00000000 00000000 c0000000     ................
   19fa8:	000001ff 00000000 00000000 c0000000     ................
   19fb8:	000001ff 00000000 00000000 c0000000     ................
   19fc8:	000003ff 00000000 00000000 80000000     ................
   19fd8:	000003ff 00000000 00000000 80000000     ................
   19fe8:	000007ff 00000000 00000000 00000000     ................
   19ff8:	00000fff 00000000 00000000 00000000     ................
   1a008:	00001fff 00000000 00000000 00000000     ................
   1a018:	00003ffe 00000000 00000000 00000000     .?..............
   1a028:	00007ffe 00000000 00000000 00000000     ................
   1a038:	0000fffc 00000000 00000000 00000000     ................
   1a048:	0000fff8 00000000 00000000 00000000     ................
   1a058:	0001fff0 00000000 00000000 00000000     ................
   1a068:	0003ffe0 00000000 00000000 00000000     ................
   1a078:	0003ffc0 00000000 00000000 00000000     ................
   1a088:	0007ff80 00000000 00000000 00000000     ................
   1a098:	0007ff80 00000000 00000000 00000000     ................
   1a0a8:	0007ff00 00000000 00000000 00000000     ................
   1a0b8:	000fff00 00000000 00000000 00000000     ................
   1a0c8:	000ffe00 00000000 00000000 00000000     ................
   1a0d8:	000ffe00 00000000 00000000 00000000     ................
   1a0e8:	000ffe00 00000000 00000000 00000000     ................
   1a0f8:	000ffe00 00000000 00000000 00000000     ................
   1a108:	000fff00 00000000 00000000 00000000     ................
   1a118:	000fff00 00000000 00000000 00000000     ................
   1a128:	000fff80 00000000 00000000 00000000     ................
   1a138:	0007ffe0 00000000 00000000 00000000     ................
   1a148:	0007fffc 00000000 00000000 00000000     ................
   1a158:	0007ffff 00000000 00000000 00000000     ................
   1a168:	0003ffff 00000000 00000000 00000000     ................
   1a178:	0001ffff 00000000 00000000 00000000     ................
   1a188:	0001ffff 00000000 00000000 00000000     ................
   1a198:	0000ffff 00000000 00000000 00000000     ................
   1a1a8:	00007fff 00000000 00000000 00000000     ................
   1a1b8:	00001fff 00000000 00000000 00000000     ................
   1a1c8:	00000fff 00000000 00000000 00000000     ................
   1a1d8:	000001ff 00000000 00000000 00000000     ................
   1a1e8:	0000003f 00000000 00000000 00000000     ?...............
	...

0001a250 <ArvoBold_18pt_CharCount>:
   1a250:	12080805 0410150f 0e0c0808 09050906     ................
   1a260:	0d0e0a0f 0e0e0e0e 05060d0e 0e0a0c0a     ................
   1a270:	1210111b 130f1011 13080816 13141b10     ................
   1a280:	0f121310 1c121211 080f1212 0c0e0709     ................
   1a290:	0e0f0f09 0f090e10 11070910 0f111909     ................
   1a2a0:	0d0d1010 160f1108 0b0d0f0e 000b0b07     ................

0001a2b0 <ArvoBold_18pt_Table>:
	...
   1a2cc:	03cfff00 03cfff00 03cfff00 00000000     ................
	...
   1a2e8:	00003f00 00003f00 00001f00 00000000     .?...?..........
   1a2f8:	00003f00 00003f00 00001f00 00700000     .?...?........p.
   1a308:	03706000 03f07000 03fff000 00fffc00     .`p..p..........
   1a318:	007fff00 00707f00 00707300 03707000     ......p..sp..pp.
   1a328:	03f07000 03fe7000 01fff000 007ffc00     .p...p..........
   1a338:	0071ff00 00707f00 00307300 00007000     ..q...p..s0..p..
	...
   1a350:	00f00000 00f3c000 00f7e000 01f7f000     ................
   1a360:	01e77000 0fce7f00 0fce7f00 0fceff00     .p..............
   1a370:	01ddf000 00fde000 00fde000 0079e000     ..............y.
	...
   1a390:	00007c00 0000fe00 0201ff00 0301c700     .|..............
   1a3a0:	03c1c700 01e1c700 00f9ff00 003cfe00     ..............<.
   1a3b0:	001f7c00 00ff8000 01ffe000 03fef000     .|..............
   1a3c0:	038e7c00 038e1e00 038e0f00 03fe0300     .|..............
   1a3d0:	01fc0100 00f80000 00000000 00000000     ................
   1a3e0:	00780000 00fe7800 01fffe00 03c7fe00     ..x..x..........
   1a3f0:	0383cf00 03878700 039f8700 03ffcf00     ................
   1a400:	01fffe00 01fcfe00 00f8f800 01fe0000     ................
   1a410:	03fe0000 03ce0000 01800000 00003f00     .............?..
   1a420:	00003f00 00000f00 00000000 00000000     .?..............
   1a430:	01ff8000 0ffff000 3ffffc00 ff00fe00     ...........?....
   1a440:	f8001f00 70000e00 00000000 00000000     .......p........
   1a450:	70000e00 f8001f00 7f00fe00 3ffffc00     ...p...........?
   1a460:	0ffff000 01ff8000 00000000 00000000     ................
   1a470:	00000e00 0000ce00 0000fc00 0000ff80     ................
   1a480:	00007f80 00007f80 0000fc00 0000fc00     ................
   1a490:	0000ce00 00000e00 00000000 00000000     ................
   1a4a0:	000e0000 000e0000 000e0000 000e0000     ................
   1a4b0:	00ffe000 00ffe000 00ffe000 000e0000     ................
   1a4c0:	000e0000 000e0000 000e0000 00000000     ................
   1a4d0:	00000000 30000000 3f000000 1f800000     .......0...?....
   1a4e0:	07800000 00000000 00000000 00000000     ................
   1a4f0:	001c0000 001c0000 001c0000 001c0000     ................
   1a500:	001c0000 001c0000 001c0000 00000000     ................
   1a510:	00000000 03c00000 03c00000 03c00000     ................
	...
   1a528:	03000000 03e00000 03fc0000 01ff8000     ................
   1a538:	003ff000 0007fe00 0000ff00 00001f00     ..?.............
   1a548:	00000000 001fe000 007ff800 01fffe00     ................
   1a558:	01e01e00 03c00f00 03800700 03800700     ................
   1a568:	03800700 03c00f00 01e01e00 01fffe00     ................
   1a578:	007ff800 001fe000 00000000 00007800     .............x..
   1a588:	03807c00 03803e00 03fffe00 03ffff00     .|...>..........
   1a598:	03ffff00 03800000 03800000 00000000     ................
	...
   1a5b0:	03c03800 03e03c00 03f03e00 03f80f00     .8...<...>......
   1a5c0:	03bc0700 039e0700 038f0700 03878700     ................
   1a5d0:	0383cf00 0381fe00 0380fc00 03807800     .............x..
   1a5e0:	00000000 00601800 00e01c00 01e01e00     ......`.........
   1a5f0:	03c00f00 03800700 03838700 03838700     ................
   1a600:	03838700 01c7cf00 01fffe00 00fefc00     ................
   1a610:	007c7800 00000000 000f0000 000f8000     .x|.............
   1a620:	000fe000 000ef000 000e7c00 000e1e00     .........|......
   1a630:	038e0f00 038e0300 03ffc100 03ffc000     ................
   1a640:	03ffc000 038e0000 038e0000 00000000     ................
	...
   1a658:	00e1ff00 01e1ff00 01e1ff00 03c1c700     ................
   1a668:	0381c700 0381c700 0381c700 03c3c700     ................
   1a678:	01ff8700 00ff0700 007e0000 00000000     ..........~.....
   1a688:	00000000 003c0000 00ff0000 01ffc000     ......<.........
   1a698:	01c3f000 0381f800 0381fe00 0381cf00     ................
   1a6a8:	0381c700 01c38100 01ff8000 00ff0000     ................
   1a6b8:	003c0000 00000000 00003f00 00003f00     ..<......?...?..
   1a6c8:	03803f00 03800700 03e00700 03f80700     .?..............
   1a6d8:	03ff0700 039fc700 0387f700 0000ff00     ................
   1a6e8:	00003f00 00000f00 00000300 00000000     .?..............
   1a6f8:	00000000 007c7800 00fefc00 01fffe00     .....x|.........
   1a708:	01c7cf00 03838700 03838700 03838700     ................
   1a718:	03838700 01c7cf00 01fffe00 00fefc00     ................
   1a728:	007c7800 00000000 00000000 0001f000     .x|.............
   1a738:	0003fc00 0007fe00 030f0e00 03ce0700     ................
   1a748:	03ee0700 03fe0700 00fe0700 003f0e00     ..............?.
   1a758:	000ffe00 0003fc00 0000f800 00000000     ................
   1a768:	03c3c000 03c3c000 03c3c000 00000000     ................
   1a778:	00000000 3f000000 1f81e000 0781e000     .......?........
   1a788:	0301e000 00000000 001e0000 001e0000     ................
   1a798:	001f0000 003f0000 003f0000 00738000     ......?...?...s.
   1a7a8:	00738000 00738000 00e1c000 00000000     ..s...s.........
   1a7b8:	00000000 0039c000 0039c000 0039c000     ......9...9...9.
   1a7c8:	0039c000 0039c000 0039c000 0039c000     ..9...9...9...9.
   1a7d8:	0039c000 0039c000 0039c000 00000000     ..9...9...9.....
   1a7e8:	00e1c000 00738000 00738000 00738000     ......s...s...s.
   1a7f8:	003f0000 003f0000 003f0000 001e0000     ..?...?...?.....
   1a808:	001e0000 001e0000 00000000 00001c00     ................
   1a818:	00001e00 00001e00 03dc0f00 03df0700     ................
   1a828:	03df0700 00038700 0001c700 0001fe00     ................
   1a838:	0000fe00 00007800 00000000 00000000     .....x..........
	...
   1a850:	00ff0000 03ffc000 07ffe000 1f81f800     ................
   1a860:	3e007c00 3c3c3c00 78ff1e00 71ff8e00     .|.>.<<<...x...q
   1a870:	f1c38f00 e381c700 e381c700 e381c700     ................
   1a880:	e381c700 e1c3c700 f1ffcf00 73ffce00     ...............s
   1a890:	73ffde00 03801c00 03803c00 03c0f800     ...s.....<......
	...
   1a8b4:	03800000 03c00000 03f80000 03ff0000     ................
   1a8c4:	03bfe000 038ff800 000eff00 000e1f00     ................
   1a8d4:	000e0700 000e7f00 038fff00 039ff800     ................
   1a8e4:	03ff8000 03fc0000 03e00000 03800000     ................
	...
   1a8fc:	03800700 03800700 03ffff00 03ffff00     ................
   1a90c:	03ffff00 03838700 03838700 03838700     ................
   1a91c:	03838700 03838700 03c7cf00 01fffe00     ................
   1a92c:	00fffc00 007cf800 00000000 00000000     ......|.........
   1a93c:	000fc000 003ff000 007ffc00 00f03e00     ......?......>..
   1a94c:	01e01e00 01c00f00 03800700 03800700     ................
   1a95c:	03800700 03800700 03c00f00 01e01e00     ................
   1a96c:	01f03c00 00f03800 00703800 00303800     .<...8...8p..80.
   1a97c:	00000000 03800700 03800700 03ffff00     ................
   1a98c:	03ffff00 03ffff00 03800700 03800700     ................
   1a99c:	03800700 03800700 03c00f00 01c00e00     ................
   1a9ac:	01e01e00 00f87c00 007ff800 003ff000     .....|........?.
   1a9bc:	000fc000 00000000 00000000 03800700     ................
   1a9cc:	03800700 03ffff00 03ffff00 03ffff00     ................
   1a9dc:	03838700 03838700 03838700 03838700     ................
   1a9ec:	03838700 03800700 03f03f00 03f03f00     .........?...?..
   1a9fc:	03f03f00 00000000 00000000 03800700     .?..............
   1aa0c:	03800700 03ffff00 03ffff00 03ffff00     ................
   1aa1c:	03838700 03838700 00038700 00038700     ................
   1aa2c:	00038700 00000700 00001f00 00001f00     ................
   1aa3c:	00001f00 00000000 000fc000 003ff000     ..............?.
   1aa4c:	00fff800 00f07c00 01e01e00 01c00e00     .....|..........
   1aa5c:	03800700 03800700 03800700 03870700     ................
   1aa6c:	03870700 03c70e00 01e71e00 01f73c00     .............<..
   1aa7c:	00ff3800 03ff3800 03ff3800 00000000     .8...8...8......
   1aa8c:	00000000 03800700 03800700 03ffff00     ................
   1aa9c:	03ffff00 03ffff00 03838700 03838700     ................
   1aaac:	00038000 00038000 00038000 00038000     ................
   1aabc:	00038000 00038000 03838700 03838700     ................
   1aacc:	03ffff00 03ffff00 03ffff00 03800700     ................
   1aadc:	03800700 00000000 00000000 03800700     ................
   1aaec:	03800700 03ffff00 03ffff00 03ffff00     ................
   1aafc:	03800700 03800700 00000000 0c000700     ................
   1ab0c:	0f000700 0fffff00 07ffff00 01ffff00     ................
   1ab1c:	00000700 00000700 00000000 03800700     ................
   1ab2c:	03800700 03ffff00 03ffff00 03ffff00     ................
   1ab3c:	03820700 03830700 00078000 000fc000     ................
   1ab4c:	001ce000 00387000 00383800 03f03f00     .....p8..88..?..
   1ab5c:	03e01f00 03c00f00 03800700 03800700     ................
   1ab6c:	00000700 00000000 03800700 03800700     ................
   1ab7c:	03ffff00 03ffff00 03ffff00 03800700     ................
   1ab8c:	03800700 03800000 03800000 03800000     ................
   1ab9c:	03800000 03f80000 03f80000 03f80000     ................
	...
   1abb4:	03800700 03800700 03ffff00 03ffff00     ................
   1abc4:	03ffff00 03803f00 0000fc00 0003f800     .....?..........
   1abd4:	0007e000 001f8000 007e0000 01f80000     ..........~.....
   1abe4:	03e00000 03f80000 01fe0000 003f8000     ..............?.
   1abf4:	000fe000 0003f800 0000fe00 03803f00     .............?..
   1ac04:	03ffff00 03ffff00 03ffff00 03800700     ................
   1ac14:	03800700 00000000 00000000 03800700     ................
   1ac24:	03800700 03ffff00 03ffff00 03fffe00     ................
   1ac34:	0380fc00 0381f000 0007e000 000f8000     ................
   1ac44:	003f0000 007c0000 01f00700 03e00700     ..?...|.........
   1ac54:	03ffff00 03ffff00 03ffff00 00000700     ................
   1ac64:	00000700 00000000 00000000 000fc000     ................
   1ac74:	003ff000 007ff800 00f03c00 01e01e00     ..?......<......
   1ac84:	01c00e00 03800700 03800700 03800700     ................
   1ac94:	03800700 03800700 01c00e00 01e01e00     ................
   1aca4:	00f03c00 007ff800 003ff000 000fc000     .<........?.....
	...
   1acbc:	03800700 03800700 03ffff00 03ffff00     ................
   1accc:	03ffff00 03870700 03870700 00070700     ................
   1acdc:	00070700 00070700 00078f00 0003fe00     ................
   1acec:	0001fc00 0000f800 00000000 00000000     ................
   1acfc:	000fc000 003ff000 00fff800 00f03c00     ......?......<..
   1ad0c:	01e01e00 03c00e00 03800700 3f800700     ...............?
   1ad1c:	3f800700 3f800700 7b800700 f3c00e00     ...?...?...{....
   1ad2c:	e1e01e00 e0f03c00 f0fff800 703ff000     .....<........?p
   1ad3c:	700fc000 00000000 00000000 03800700     ...p............
   1ad4c:	03800700 03ffff00 03ffff00 03ffff00     ................
   1ad5c:	03870700 03870700 00070700 00070700     ................
   1ad6c:	00070700 000f0700 00ff0700 03ff8f00     ................
   1ad7c:	03f9fe00 03e1fc00 03807800 00000000     .........x......
   1ad8c:	00000000 00787800 00f9fc00 01f9fe00     .....xx.........
   1ad9c:	01c3cf00 0383c700 03878700 03878700     ................
   1adac:	03878700 03870700 01cf0e00 01ff3e00     .............>..
   1adbc:	00fe3c00 007c3800 00000000 00003f00     .<...8|......?..
   1adcc:	00003f00 00003f00 00000700 03800700     .?...?..........
   1addc:	03800700 03ffff00 03ffff00 03ffff00     ................
   1adec:	03800700 03800700 00000700 00000700     ................
   1adfc:	00003f00 00003f00 00003f00 00000000     .?...?...?......
   1ae0c:	00000700 00000700 001fff00 007fff00     ................
   1ae1c:	00ffff00 01e00700 03c00700 03800000     ................
   1ae2c:	03800000 03800000 03800000 03c00700     ................
   1ae3c:	01e00700 00ffff00 007fff00 001fff00     ................
   1ae4c:	00000700 00000700 00000700 00000700     ................
   1ae5c:	00000f00 00007f00 0003ff00 000ff700     ................
   1ae6c:	007f8700 01fe0000 03f00000 03f00000     ................
   1ae7c:	03fe0000 007f8700 000ff700 0003ff00     ................
   1ae8c:	00007f00 00000f00 00000700 00000700     ................
   1ae9c:	00000700 00000700 00000f00 00007f00     ................
   1aeac:	0003ff00 000ff700 007fc700 01fe0000     ................
   1aebc:	03f80000 03e00000 03fe0000 01ffe000     ................
   1aecc:	001ffe00 0000ff00 0000ff00 0007fc00     ................
   1aedc:	003fe000 01ff0000 03f80000 03f00000     ..?.............
   1aeec:	01fe0000 007f8700 001ff700 0003ff00     ................
   1aefc:	00007f00 00000f00 00000700 00000700     ................
   1af0c:	03800700 03c00f00 03e01f00 03f03f00     .............?..
   1af1c:	03f87f00 03bcf700 001fe000 000fc000     ................
   1af2c:	000fc000 001fe000 03bcf700 03f87f00     ................
   1af3c:	03f03f00 03e01f00 03c00f00 03800700     .?..............
	...
   1af54:	00000700 00000700 00000f00 00001f00     ................
   1af64:	00003f00 03807f00 0380f700 03ffc000     .?..............
   1af74:	03ff8000 03ffc000 0380e000 03807700     .............w..
   1af84:	00003f00 00001f00 00000f00 00000700     .?..............
   1af94:	00000700 00000000 00000000 03e07f00     ................
   1afa4:	03f07f00 03f87f00 03de0700 038f0700     ................
   1afb4:	0387c700 0381e700 0380f700 03803f00     .............?..
   1afc4:	03801f00 03f00f00 03f00f00 03f00700     ................
	...
   1afdc:	ffffffe0 ffffffe0 ffffffe0 e00000e0     ................
   1afec:	e00000e0 00000000 00000000 00000100     ................
   1affc:	00000f00 00007f00 0001fe00 000ff800     ................
   1b00c:	007fc000 01fe0000 03f00000 03c00000     ................
   1b01c:	00000000 e00000e0 e00000e0 ffffffe0     ................
   1b02c:	ffffffe0 ffffffe0 00000000 00000000     ................
   1b03c:	00010000 0001c000 0001f000 0001fc00     ................
   1b04c:	00003f00 00000f00 00000f00 00003f00     .?...........?..
   1b05c:	0000fe00 0001f800 0001c000 00010000     ................
   1b06c:	00000000 38000000 38000000 38000000     .......8...8...8
   1b07c:	38000000 38000000 38000000 38000000     ...8...8...8...8
   1b08c:	38000000 38000000 38000000 38000000     ...8...8...8...8
   1b09c:	38000000 00000000 00000000 00000100     ...8............
   1b0ac:	00000300 00000700 00000f00 00000e00     ................
   1b0bc:	00000800 00000000 00000000 00e00000     ................
   1b0cc:	01f18000 03f98000 0399c000 0399c000     ................
   1b0dc:	0399c000 0399c000 039bc000 03ffc000     ................
   1b0ec:	03ff8000 03ff0000 03800000 03800000     ................
   1b0fc:	00000000 00000700 00000700 03ffff00     ................
   1b10c:	03ffff00 03ffff00 03c3c000 0381c000     ................
   1b11c:	0381c000 0381c000 0381c000 01c38000     ................
   1b12c:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
   1b13c:	00000000 003e0000 00ff0000 01ff8000     ......>.........
   1b14c:	01c38000 0381c000 0381c000 0381c000     ................
   1b15c:	0381c000 03c3c000 01e38000 00e38000     ................
   1b16c:	00638000 00000000 00000000 003c0000     ..c...........<.
   1b17c:	00ff0000 01ff8000 03c38000 0381c000     ................
   1b18c:	0381c000 0381c000 0381c700 03c3c700     ................
   1b19c:	03ffff00 03ffff00 03ffff00 03800000     ................
   1b1ac:	03800000 00000000 00000000 003c0000     ..............<.
   1b1bc:	00ff0000 01ff8000 01d98000 0399c000     ................
   1b1cc:	0399c000 0399c000 0399c000 0399c000     ................
   1b1dc:	039f8000 019f0000 001e0000 00000000     ................
   1b1ec:	00000000 0381c000 0381c000 03fffc00     ................
   1b1fc:	03fffe00 03ffff00 0381c700 0381c700     ................
   1b20c:	00000700 00000000 003c0000 60ff0000     ..........<....`
   1b21c:	71ff8000 f1c38000 e381c000 e381c000     ...q............
   1b22c:	e381c000 e381c000 f3c3c000 7fffc000     ................
   1b23c:	3fffc000 1fffc000 00000000 00000000     ...?............
   1b24c:	00000000 03800700 03800700 03ffff00     ................
   1b25c:	03ffff00 03ffff00 03838000 0381c000     ................
   1b26c:	0001c000 0001c000 0003c000 03ffc000     ................
   1b27c:	03ff8000 03ff0000 03800000 03800000     ................
   1b28c:	00000000 0381c000 0381c600 03ffcf00     ................
   1b29c:	03ffcf00 03ffcf00 03800600 03800000     ................
   1b2ac:	00000000 e001c000 e001c000 ffffc600     ................
   1b2bc:	7fffcf00 3fffcf00 00000f00 00000600     .......?........
   1b2cc:	00000000 03800700 03800700 03ffff00     ................
   1b2dc:	03ffff00 03ffff00 039c0000 039c0000     ................
   1b2ec:	003c0000 007f0000 00ff8000 01e7c000     ..<.............
   1b2fc:	03c3c000 03c1c000 03c1c000 00000000     ................
	...
   1b314:	03800700 03800700 03ffff00 03ffff00     ................
   1b324:	03ffff00 03800000 03800000 00000000     ................
   1b334:	00000000 0381c000 0381c000 03ffc000     ................
   1b344:	03ffc000 03ffc000 03838000 0381c000     ................
   1b354:	0001c000 0001c000 0003c000 03ffc000     ................
   1b364:	03ff8000 03ff0000 03838000 0381c000     ................
   1b374:	0001c000 0001c000 0003c000 03ffc000     ................
   1b384:	03ff8000 03ff0000 03800000 03800000     ................
   1b394:	00000000 0381c000 0381c000 03ffc000     ................
   1b3a4:	03ffc000 03ffc000 03838000 0381c000     ................
   1b3b4:	0001c000 0001c000 0001c000 0003c000     ................
   1b3c4:	03ffc000 03ff8000 03ff0000 03800000     ................
   1b3d4:	03800000 00000000 003c0000 00ff0000     ..........<.....
   1b3e4:	01ff8000 01c38000 03c1c000 0381c000     ................
   1b3f4:	0381c000 0381c000 0381c000 01c38000     ................
   1b404:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
	...
   1b41c:	e001c000 e001c000 ffffc000 ffffc000     ................
   1b42c:	ffffc000 e3c3c000 e381c000 0381c000     ................
   1b43c:	0381c000 0381c000 01c38000 01ff8000     ................
   1b44c:	00ff0000 003c0000 00000000 00000000     ......<.........
   1b45c:	003c0000 00ff0000 01ff8000 01c38000     ..<.............
   1b46c:	03c3c000 0381c000 0381c000 0381c000     ................
   1b47c:	e381c000 e3c3c000 ffffc000 ffffc000     ................
   1b48c:	ffffc000 e0000000 e0000000 00000000     ................
   1b49c:	0381c000 0381c000 03ffc000 03ffc000     ................
   1b4ac:	03ffc000 03838000 0381c000 0001c000     ................
   1b4bc:	0003c000 0003c000 0003c000 00000000     ................
   1b4cc:	00000000 01c70000 01cf8000 01cfc000     ................
   1b4dc:	03ddc000 0399c000 0399c000 0399c000     ................
   1b4ec:	03bbc000 01fb8000 01f38000 00e38000     ................
   1b4fc:	00000000 0001c000 0001c000 01fff800     ................
   1b50c:	03fffc00 03fffc00 0381c000 0381c000     ................
   1b51c:	01800000 0001c000 0001c000 007fc000     ................
   1b52c:	01ffc000 01ffc000 03c00000 03800000     ................
   1b53c:	03800000 03800000 0381c000 01c1c000     ................
   1b54c:	03ffc000 03ffc000 03ffc000 03800000     ................
   1b55c:	03800000 00000000 0001c000 0001c000     ................
   1b56c:	0003c000 000fc000 003fc000 00fdc000     ..........?.....
   1b57c:	03f1c000 03c00000 03f00000 01fdc000     ................
   1b58c:	007fc000 000fc000 0003c000 0001c000     ................
   1b59c:	0001c000 0001c000 0001c000 0007c000     ................
   1b5ac:	001fc000 00ffc000 03fdc000 03e1c000     ................
   1b5bc:	03f80000 01ff8000 003fc000 0007c000     ..........?.....
   1b5cc:	000fc000 007fc000 03fe0000 03f00000     ................
   1b5dc:	03e1c000 03fdc000 00ffc000 001fc000     ................
   1b5ec:	0003c000 0001c000 0001c000 0381c000     ................
   1b5fc:	0381c000 03c1c000 03e3c000 03f7c000     ................
   1b60c:	03ffc000 003c0000 003c0000 03ffc000     ......<...<.....
   1b61c:	03ffc000 03e7c000 03c3c000 0381c000     ................
   1b62c:	0381c000 0001c000 0001c000 0003c000     ................
   1b63c:	e00fc000 e03fc000 f0fdc000 fff00000     ......?.........
   1b64c:	ffc00000 eff00000 e3fdc000 007fc000     ................
   1b65c:	001fc000 0003c000 0001c000 0001c000     ................
   1b66c:	00000000 0387c000 03c7c000 03f7c000     ................
   1b67c:	03f9c000 03fdc000 039fc000 038fc000     ................
   1b68c:	03e3c000 03e1c000 03e04000 00000000     .........@......
	...
   1b6a4:	00070000 00070000 00070000 1fffffc0     ................
   1b6b4:	3fffffe0 3ffdffe0 380000e0 380000e0     ...?...?...8...8
	...
   1b6d0:	ffffffe0 ffffffe0 ffffffe0 00000000     ................
	...
   1b6e8:	380000e0 380000e0 3ffdffe0 3fffffe0     ...8...8...?...?
   1b6f8:	1fffffc0 00070000 00070000 00070000     ................
	...
   1b714:	00070000 00078000 0001c000 0001c000     ................
   1b724:	0003c000 00038000 00078000 00070000     ................
   1b734:	00070000 0003c000 0001c000              ............

0001b740 <__sf_fake_stderr>:
	...

0001b760 <__sf_fake_stdin>:
	...

0001b780 <__sf_fake_stdout>:
	...

0001b7a0 <_init>:
   1b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b7a2:	46c0      	nop			; (mov r8, r8)
   1b7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b7a6:	bc08      	pop	{r3}
   1b7a8:	469e      	mov	lr, r3
   1b7aa:	4770      	bx	lr

0001b7ac <__init_array_start>:
   1b7ac:	000000dd 	.word	0x000000dd

0001b7b0 <_fini>:
   1b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b7b2:	46c0      	nop			; (mov r8, r8)
   1b7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b7b6:	bc08      	pop	{r3}
   1b7b8:	469e      	mov	lr, r3
   1b7ba:	4770      	bx	lr

0001b7bc <__fini_array_start>:
   1b7bc:	000000b5 	.word	0x000000b5
