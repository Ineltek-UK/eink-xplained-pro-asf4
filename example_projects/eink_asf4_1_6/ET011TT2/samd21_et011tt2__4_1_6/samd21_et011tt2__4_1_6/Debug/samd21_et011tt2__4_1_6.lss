
samd21_et011tt2__4_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001c4ec  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000358  20000000  0001c4ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e0  20000358  0001c844  00030358  2**2
                  ALLOC
  3 .stack        00002000  20000438  0001c924  00030358  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001aabd  00000000  00000000  000303d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c87  00000000  00000000  0004ae96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000eb99  00000000  00000000  0004cb1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000600  00000000  00000000  0005b6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000818  00000000  00000000  0005bcb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000050df  00000000  00000000  0005c4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009db8  00000000  00000000  000615ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00086976  00000000  00000000  0006b365  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016e8  00000000  00000000  000f1cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     8$. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000358 	.word	0x20000358
      d4:	00000000 	.word	0x00000000
      d8:	0001c4ec 	.word	0x0001c4ec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000035c 	.word	0x2000035c
     108:	0001c4ec 	.word	0x0001c4ec
     10c:	0001c4ec 	.word	0x0001c4ec
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	0001c4ec 	.word	0x0001c4ec
     1c8:	20000000 	.word	0x20000000
     1cc:	20000358 	.word	0x20000358
     1d0:	20000004 	.word	0x20000004
     1d4:	20000358 	.word	0x20000358
     1d8:	20000438 	.word	0x20000438
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00004931 	.word	0x00004931
     1f8:	000046c9 	.word	0x000046c9

000001fc <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
     1fc:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fe:	4802      	ldr	r0, [pc, #8]	; (208 <delay_driver_init+0xc>)
     200:	4b02      	ldr	r3, [pc, #8]	; (20c <delay_driver_init+0x10>)
     202:	4798      	blx	r3
}
     204:	bd10      	pop	{r4, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	e000e010 	.word	0xe000e010
     20c:	00000369 	.word	0x00000369

00000210 <system_init>:

void system_init(void)
{
     210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     212:	46de      	mov	lr, fp
     214:	4657      	mov	r7, sl
     216:	464e      	mov	r6, r9
     218:	4645      	mov	r5, r8
     21a:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     21c:	4b40      	ldr	r3, [pc, #256]	; (320 <system_init+0x110>)
     21e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     220:	22c0      	movs	r2, #192	; 0xc0
     222:	05d2      	lsls	r2, r2, #23
     224:	2310      	movs	r3, #16
     226:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     228:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22a:	4b3e      	ldr	r3, [pc, #248]	; (324 <system_init+0x114>)
     22c:	493e      	ldr	r1, [pc, #248]	; (328 <system_init+0x118>)
     22e:	6299      	str	r1, [r3, #40]	; 0x28
     230:	24c0      	movs	r4, #192	; 0xc0
     232:	0624      	lsls	r4, r4, #24
     234:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	2544      	movs	r5, #68	; 0x44
     238:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23a:	2101      	movs	r1, #1
     23c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     240:	2020      	movs	r0, #32
     242:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     244:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     246:	4839      	ldr	r0, [pc, #228]	; (32c <system_init+0x11c>)
     248:	6298      	str	r0, [r3, #40]	; 0x28
     24a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24c:	3501      	adds	r5, #1
     24e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     250:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     252:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     254:	2040      	movs	r0, #64	; 0x40
     256:	4684      	mov	ip, r0
     258:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25c:	4834      	ldr	r0, [pc, #208]	; (330 <system_init+0x120>)
     25e:	4682      	mov	sl, r0
     260:	6298      	str	r0, [r3, #40]	; 0x28
     262:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     264:	3501      	adds	r5, #1
     266:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     268:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     26c:	2080      	movs	r0, #128	; 0x80
     26e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     270:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     272:	4830      	ldr	r0, [pc, #192]	; (334 <system_init+0x124>)
     274:	4680      	mov	r8, r0
     276:	6298      	str	r0, [r3, #40]	; 0x28
     278:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	3501      	adds	r5, #1
     27c:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     280:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     282:	2580      	movs	r5, #128	; 0x80
     284:	022d      	lsls	r5, r5, #8
     286:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     288:	482b      	ldr	r0, [pc, #172]	; (338 <system_init+0x128>)
     28a:	6298      	str	r0, [r3, #40]	; 0x28
     28c:	482b      	ldr	r0, [pc, #172]	; (33c <system_init+0x12c>)
     28e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     290:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     292:	204f      	movs	r0, #79	; 0x4f
     294:	5c1e      	ldrb	r6, [r3, r0]
     296:	2704      	movs	r7, #4
     298:	433e      	orrs	r6, r7
     29a:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     29c:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a2:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2a4:	2694      	movs	r6, #148	; 0x94
     2a6:	5191      	str	r1, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a8:	3039      	adds	r0, #57	; 0x39
     2aa:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ac:	3020      	adds	r0, #32
     2ae:	4f24      	ldr	r7, [pc, #144]	; (340 <system_init+0x130>)
     2b0:	501f      	str	r7, [r3, r0]
     2b2:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b4:	27c0      	movs	r7, #192	; 0xc0
     2b6:	46bb      	mov	fp, r7
     2b8:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438f      	bics	r7, r1
     2bc:	46b9      	mov	r9, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2be:	465f      	mov	r7, fp
     2c0:	464d      	mov	r5, r9
     2c2:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c4:	4665      	mov	r5, ip
     2c6:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2c8:	3f38      	subs	r7, #56	; 0x38
     2ca:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4655      	mov	r5, sl
     2ce:	501d      	str	r5, [r3, r0]
     2d0:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	25c6      	movs	r5, #198	; 0xc6
     2d4:	46a9      	mov	r9, r5
     2d6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d8:	002f      	movs	r7, r5
     2da:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	464d      	mov	r5, r9
     2de:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e0:	3d46      	subs	r5, #70	; 0x46
     2e2:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2e4:	3508      	adds	r5, #8
     2e6:	2780      	movs	r7, #128	; 0x80
     2e8:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ea:	4645      	mov	r5, r8
     2ec:	501d      	str	r5, [r3, r0]
     2ee:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f0:	3747      	adds	r7, #71	; 0x47
     2f2:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2f4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f6:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f8:	2480      	movs	r4, #128	; 0x80
     2fa:	05e4      	lsls	r4, r4, #23
     2fc:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2fe:	2588      	movs	r5, #136	; 0x88
     300:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     302:	501c      	str	r4, [r3, r0]
     304:	4a0f      	ldr	r2, [pc, #60]	; (344 <system_init+0x134>)
     306:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     308:	3036      	adds	r0, #54	; 0x36
     30a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     30c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(EINK_X_LED_0_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(EINK_X_LED_0_PIN, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
     310:	4b0d      	ldr	r3, [pc, #52]	; (348 <system_init+0x138>)
     312:	4798      	blx	r3
}
     314:	bc3c      	pop	{r2, r3, r4, r5}
     316:	4690      	mov	r8, r2
     318:	4699      	mov	r9, r3
     31a:	46a2      	mov	sl, r4
     31c:	46ab      	mov	fp, r5
     31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     320:	000003cd 	.word	0x000003cd
     324:	41004400 	.word	0x41004400
     328:	40000010 	.word	0x40000010
     32c:	40000020 	.word	0x40000020
     330:	40000040 	.word	0x40000040
     334:	40000080 	.word	0x40000080
     338:	40028000 	.word	0x40028000
     33c:	c0020000 	.word	0xc0020000
     340:	40000001 	.word	0x40000001
     344:	c0004000 	.word	0xc0004000
     348:	000001fd 	.word	0x000001fd

0000034c <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     34c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     350:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     352:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     354:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     358:	4770      	bx	lr

0000035a <atomic_leave_critical>:
     35a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     35e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     360:	f383 8810 	msr	PRIMASK, r3
}
     364:	4770      	bx	lr
	...

00000368 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     368:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     36a:	4b02      	ldr	r3, [pc, #8]	; (374 <delay_init+0xc>)
     36c:	6018      	str	r0, [r3, #0]
     36e:	4b02      	ldr	r3, [pc, #8]	; (378 <delay_init+0x10>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	20000374 	.word	0x20000374
     378:	0000050d 	.word	0x0000050d

0000037c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     37c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <delay_ms+0x14>)
     380:	681c      	ldr	r4, [r3, #0]
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x18>)
     384:	4798      	blx	r3
     386:	0001      	movs	r1, r0
     388:	0020      	movs	r0, r4
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <delay_ms+0x1c>)
     38c:	4798      	blx	r3
}
     38e:	bd10      	pop	{r4, pc}
     390:	20000374 	.word	0x20000374
     394:	000003c1 	.word	0x000003c1
     398:	00000521 	.word	0x00000521

0000039c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     39c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     39e:	4a06      	ldr	r2, [pc, #24]	; (3b8 <_sbrk+0x1c>)
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	2a00      	cmp	r2, #0
     3a4:	d004      	beq.n	3b0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3a6:	4a04      	ldr	r2, [pc, #16]	; (3b8 <_sbrk+0x1c>)
     3a8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3aa:	18c3      	adds	r3, r0, r3
     3ac:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3b0:	4902      	ldr	r1, [pc, #8]	; (3bc <_sbrk+0x20>)
     3b2:	4a01      	ldr	r2, [pc, #4]	; (3b8 <_sbrk+0x1c>)
     3b4:	6011      	str	r1, [r2, #0]
     3b6:	e7f6      	b.n	3a6 <_sbrk+0xa>
     3b8:	20000378 	.word	0x20000378
     3bc:	20002438 	.word	0x20002438

000003c0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <_get_cycles_for_ms+0x8>)
     3c2:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3c4:	4770      	bx	lr
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00005dc0 	.word	0x00005dc0

000003cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3cc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3ce:	4b07      	ldr	r3, [pc, #28]	; (3ec <_init_chip+0x20>)
     3d0:	685a      	ldr	r2, [r3, #4]
     3d2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     3d4:	4b06      	ldr	r3, [pc, #24]	; (3f0 <_init_chip+0x24>)
     3d6:	4798      	blx	r3
	_sysctrl_init_sources();
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <_init_chip+0x28>)
     3da:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     3dc:	2008      	movs	r0, #8
     3de:	4c06      	ldr	r4, [pc, #24]	; (3f8 <_init_chip+0x2c>)
     3e0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <_init_chip+0x30>)
     3e4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3e6:	20f7      	movs	r0, #247	; 0xf7
     3e8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     3ea:	bd10      	pop	{r4, pc}
     3ec:	41004000 	.word	0x41004000
     3f0:	00000441 	.word	0x00000441
     3f4:	00000461 	.word	0x00000461
     3f8:	00000401 	.word	0x00000401
     3fc:	00000495 	.word	0x00000495

00000400 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     400:	07c3      	lsls	r3, r0, #31
     402:	d509      	bpl.n	418 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <_gclk_init_generators_by_fref+0x34>)
     406:	2280      	movs	r2, #128	; 0x80
     408:	0092      	lsls	r2, r2, #2
     40a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     40c:	4a0a      	ldr	r2, [pc, #40]	; (438 <_gclk_init_generators_by_fref+0x38>)
     40e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     410:	001a      	movs	r2, r3
     412:	7853      	ldrb	r3, [r2, #1]
     414:	09db      	lsrs	r3, r3, #7
     416:	d1fc      	bne.n	412 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     418:	0703      	lsls	r3, r0, #28
     41a:	d509      	bpl.n	430 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     41c:	4b05      	ldr	r3, [pc, #20]	; (434 <_gclk_init_generators_by_fref+0x34>)
     41e:	2204      	movs	r2, #4
     420:	32ff      	adds	r2, #255	; 0xff
     422:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     424:	4a05      	ldr	r2, [pc, #20]	; (43c <_gclk_init_generators_by_fref+0x3c>)
     426:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     428:	001a      	movs	r2, r3
     42a:	7853      	ldrb	r3, [r2, #1]
     42c:	09db      	lsrs	r3, r3, #7
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	40000c00 	.word	0x40000c00
     438:	00010700 	.word	0x00010700
     43c:	00010403 	.word	0x00010403

00000440 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     440:	4b06      	ldr	r3, [pc, #24]	; (45c <_pm_init+0x1c>)
     442:	7a1a      	ldrb	r2, [r3, #8]
     444:	b2d2      	uxtb	r2, r2
     446:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     448:	7a5a      	ldrb	r2, [r3, #9]
     44a:	b2d2      	uxtb	r2, r2
     44c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     44e:	7a9a      	ldrb	r2, [r3, #10]
     450:	b2d2      	uxtb	r2, r2
     452:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     454:	7ada      	ldrb	r2, [r3, #11]
     456:	b2d2      	uxtb	r2, r2
     458:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     45a:	4770      	bx	lr
     45c:	40000400 	.word	0x40000400

00000460 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     460:	4a0b      	ldr	r2, [pc, #44]	; (490 <_sysctrl_init_sources+0x30>)
     462:	6993      	ldr	r3, [r2, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     464:	21fe      	movs	r1, #254	; 0xfe
     466:	03c9      	lsls	r1, r1, #15
     468:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     46a:	214e      	movs	r1, #78	; 0x4e
     46c:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
     46e:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     470:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     472:	392f      	subs	r1, #47	; 0x2f
     474:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     476:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     478:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     47a:	2204      	movs	r2, #4
     47c:	68cb      	ldr	r3, [r1, #12]
     47e:	421a      	tst	r2, r3
     480:	d0fc      	beq.n	47c <_sysctrl_init_sources+0x1c>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
     482:	4a03      	ldr	r2, [pc, #12]	; (490 <_sysctrl_init_sources+0x30>)
     484:	6993      	ldr	r3, [r2, #24]
     486:	2180      	movs	r1, #128	; 0x80
     488:	430b      	orrs	r3, r1
     48a:	6193      	str	r3, [r2, #24]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     48c:	4770      	bx	lr
     48e:	46c0      	nop			; (mov r8, r8)
     490:	40000800 	.word	0x40000800

00000494 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     494:	2202      	movs	r2, #2
     496:	4b19      	ldr	r3, [pc, #100]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     498:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     49a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     49c:	320e      	adds	r2, #14
     49e:	68cb      	ldr	r3, [r1, #12]
     4a0:	421a      	tst	r2, r3
     4a2:	d0fc      	beq.n	49e <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     4a4:	4a16      	ldr	r2, [pc, #88]	; (500 <_sysctrl_init_referenced_generators+0x6c>)
     4a6:	4b15      	ldr	r3, [pc, #84]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4a8:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4aa:	4b16      	ldr	r3, [pc, #88]	; (504 <_sysctrl_init_referenced_generators+0x70>)
     4ac:	681b      	ldr	r3, [r3, #0]
     4ae:	0e9b      	lsrs	r3, r3, #26
     4b0:	2b3f      	cmp	r3, #63	; 0x3f
     4b2:	d01a      	beq.n	4ea <_sysctrl_init_referenced_generators+0x56>
     4b4:	029b      	lsls	r3, r3, #10
     4b6:	2280      	movs	r2, #128	; 0x80
     4b8:	0092      	lsls	r2, r2, #2
     4ba:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     4bc:	4a0f      	ldr	r2, [pc, #60]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4be:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     4c0:	2302      	movs	r3, #2
     4c2:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     4c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     4c6:	075b      	lsls	r3, r3, #29
     4c8:	d512      	bpl.n	4f0 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ca:	0011      	movs	r1, r2
	tmp &= mask;
     4cc:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4ce:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     4d0:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     4d2:	2bd0      	cmp	r3, #208	; 0xd0
     4d4:	d1fb      	bne.n	4ce <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     4d6:	4a09      	ldr	r2, [pc, #36]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
     4d8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     4da:	2180      	movs	r1, #128	; 0x80
     4dc:	430b      	orrs	r3, r1
     4de:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     4e0:	4a09      	ldr	r2, [pc, #36]	; (508 <_sysctrl_init_referenced_generators+0x74>)
     4e2:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     4e4:	09db      	lsrs	r3, r3, #7
     4e6:	d1fc      	bne.n	4e2 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     4e8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     4ea:	23fc      	movs	r3, #252	; 0xfc
     4ec:	01db      	lsls	r3, r3, #7
     4ee:	e7e5      	b.n	4bc <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     4f0:	4902      	ldr	r1, [pc, #8]	; (4fc <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     4f2:	2210      	movs	r2, #16
     4f4:	68cb      	ldr	r3, [r1, #12]
     4f6:	421a      	tst	r2, r3
     4f8:	d0fc      	beq.n	4f4 <_sysctrl_init_referenced_generators+0x60>
     4fa:	e7ec      	b.n	4d6 <_sysctrl_init_referenced_generators+0x42>
     4fc:	40000800 	.word	0x40000800
     500:	04010000 	.word	0x04010000
     504:	00806024 	.word	0x00806024
     508:	40000c00 	.word	0x40000c00

0000050c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     50c:	4b02      	ldr	r3, [pc, #8]	; (518 <_delay_init+0xc>)
     50e:	4a03      	ldr	r2, [pc, #12]	; (51c <_delay_init+0x10>)
     510:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     512:	2205      	movs	r2, #5
     514:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     516:	4770      	bx	lr
     518:	e000e010 	.word	0xe000e010
     51c:	00ffffff 	.word	0x00ffffff

00000520 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     520:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     522:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     524:	1e5e      	subs	r6, r3, #1
     526:	b2f6      	uxtb	r6, r6
     528:	2b00      	cmp	r3, #0
     52a:	d013      	beq.n	554 <_delay_cycles+0x34>
     52c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     52e:	4a0e      	ldr	r2, [pc, #56]	; (568 <_delay_cycles+0x48>)
     530:	4d0e      	ldr	r5, [pc, #56]	; (56c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     532:	2080      	movs	r0, #128	; 0x80
     534:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     536:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     538:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     53a:	6813      	ldr	r3, [r2, #0]
     53c:	4203      	tst	r3, r0
     53e:	d0fc      	beq.n	53a <_delay_cycles+0x1a>
	while (n--) {
     540:	3c01      	subs	r4, #1
     542:	b2e4      	uxtb	r4, r4
     544:	2cff      	cmp	r4, #255	; 0xff
     546:	d1f6      	bne.n	536 <_delay_cycles+0x16>
     548:	0633      	lsls	r3, r6, #24
     54a:	1af6      	subs	r6, r6, r3
     54c:	4b08      	ldr	r3, [pc, #32]	; (570 <_delay_cycles+0x50>)
     54e:	469c      	mov	ip, r3
     550:	4461      	add	r1, ip
     552:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     554:	4b04      	ldr	r3, [pc, #16]	; (568 <_delay_cycles+0x48>)
     556:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     558:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     55a:	0019      	movs	r1, r3
     55c:	2280      	movs	r2, #128	; 0x80
     55e:	0252      	lsls	r2, r2, #9
     560:	680b      	ldr	r3, [r1, #0]
     562:	4213      	tst	r3, r2
     564:	d0fc      	beq.n	560 <_delay_cycles+0x40>
		;
}
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	e000e010 	.word	0xe000e010
     56c:	00ffffff 	.word	0x00ffffff
     570:	ff000001 	.word	0xff000001

00000574 <eink_ite_wait_for_hrdy>:
 * to use. 
 */
/**
 * \brief Wait For Host Ready function.
 */
static void eink_ite_wait_for_hrdy(void) {
     574:	b510      	push	{r4, lr}
    ptr_eink_ite_config->wait_for_hrdy();
     576:	4b02      	ldr	r3, [pc, #8]	; (580 <eink_ite_wait_for_hrdy+0xc>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	4798      	blx	r3
}
     57e:	bd10      	pop	{r4, pc}
     580:	2000039c 	.word	0x2000039c

00000584 <gfx_eink_put_display_buffer>:
}

/**
 * \brief Put Display Buffer function.
 */
static void gfx_eink_put_display_buffer(bool refresh_display) {
     584:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->put_display_buffer(refresh_display);
     586:	4b02      	ldr	r3, [pc, #8]	; (590 <gfx_eink_put_display_buffer+0xc>)
     588:	681b      	ldr	r3, [r3, #0]
     58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     58c:	4798      	blx	r3
}
     58e:	bd10      	pop	{r4, pc}
     590:	20000430 	.word	0x20000430

00000594 <gfx_eink_set_pixel>:
}

/**
 * \brief Set Pixel function.
 */
static void gfx_eink_set_pixel(eink_coordinate x_set, eink_coordinate y_set, enum eink_pixel_colour pixel_colour) {
     594:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel(x_set, y_set, pixel_colour);
     596:	4b02      	ldr	r3, [pc, #8]	; (5a0 <gfx_eink_set_pixel+0xc>)
     598:	681b      	ldr	r3, [r3, #0]
     59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     59c:	4798      	blx	r3
}
     59e:	bd10      	pop	{r4, pc}
     5a0:	20000430 	.word	0x20000430

000005a4 <gfx_eink_set_pixel_raw>:

/**
 * \brief Set Pixel with raw value function.
 */
static void gfx_eink_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value) {
     5a4:	b510      	push	{r4, lr}
    ptr_eink_gfx_config->set_pixel_raw(x_set, y_set, pixel_value);
     5a6:	4b02      	ldr	r3, [pc, #8]	; (5b0 <gfx_eink_set_pixel_raw+0xc>)
     5a8:	681b      	ldr	r3, [r3, #0]
     5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     5ac:	4798      	blx	r3
}
     5ae:	bd10      	pop	{r4, pc}
     5b0:	20000430 	.word	0x20000430

000005b4 <eink_et011tt2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_et011tt2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b6:	46de      	mov	lr, fp
     5b8:	4657      	mov	r7, sl
     5ba:	464e      	mov	r6, r9
     5bc:	4645      	mov	r5, r8
     5be:	b5e0      	push	{r5, r6, r7, lr}
     5c0:	b08b      	sub	sp, #44	; 0x2c
     5c2:	9003      	str	r0, [sp, #12]
     5c4:	9205      	str	r2, [sp, #20]
     5c6:	0018      	movs	r0, r3
     5c8:	9307      	str	r3, [sp, #28]
     5ca:	ab14      	add	r3, sp, #80	; 0x50
     5cc:	8819      	ldrh	r1, [r3, #0]
     5ce:	9108      	str	r1, [sp, #32]
     5d0:	ab15      	add	r3, sp, #84	; 0x54
     5d2:	8819      	ldrh	r1, [r3, #0]
     5d4:	9109      	str	r1, [sp, #36]	; 0x24
     5d6:	ab16      	add	r3, sp, #88	; 0x58
     5d8:	781f      	ldrb	r7, [r3, #0]
     5da:	ab17      	add	r3, sp, #92	; 0x5c
     5dc:	7819      	ldrb	r1, [r3, #0]
     5de:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     5e0:	428f      	cmp	r7, r1
     5e2:	d051      	beq.n	688 <eink_et011tt2_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     5e4:	2a00      	cmp	r2, #0
     5e6:	d04f      	beq.n	688 <eink_et011tt2_graphics_load_mono_image+0xd4>
     5e8:	2200      	movs	r2, #0
     5ea:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     5ec:	0003      	movs	r3, r0
     5ee:	3b01      	subs	r3, #1
     5f0:	b29b      	uxth	r3, r3
     5f2:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5f4:	4b28      	ldr	r3, [pc, #160]	; (698 <eink_et011tt2_graphics_load_mono_image+0xe4>)
     5f6:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     5f8:	46b8      	mov	r8, r7
     5fa:	e033      	b.n	664 <eink_et011tt2_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     5fc:	464b      	mov	r3, r9
     5fe:	2b08      	cmp	r3, #8
     600:	d003      	beq.n	60a <eink_et011tt2_graphics_load_mono_image+0x56>
     602:	464a      	mov	r2, r9
     604:	0021      	movs	r1, r4
     606:	9801      	ldr	r0, [sp, #4]
     608:	47d8      	blx	fp
     60a:	3501      	adds	r5, #1
     60c:	3401      	adds	r4, #1
     60e:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     610:	2d08      	cmp	r5, #8
     612:	d00b      	beq.n	62c <eink_et011tt2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     614:	7833      	ldrb	r3, [r6, #0]
     616:	412b      	asrs	r3, r5
                    if(bit_value) {
     618:	07db      	lsls	r3, r3, #31
     61a:	d5ef      	bpl.n	5fc <eink_et011tt2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     61c:	2f08      	cmp	r7, #8
     61e:	d0f4      	beq.n	60a <eink_et011tt2_graphics_load_mono_image+0x56>
     620:	003a      	movs	r2, r7
     622:	0021      	movs	r1, r4
     624:	9801      	ldr	r0, [sp, #4]
     626:	4b1c      	ldr	r3, [pc, #112]	; (698 <eink_et011tt2_graphics_load_mono_image+0xe4>)
     628:	4798      	blx	r3
     62a:	e7ee      	b.n	60a <eink_et011tt2_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     62c:	4643      	mov	r3, r8
     62e:	3b01      	subs	r3, #1
     630:	b29b      	uxth	r3, r3
     632:	4698      	mov	r8, r3
     634:	4653      	mov	r3, sl
     636:	3308      	adds	r3, #8
     638:	b29b      	uxth	r3, r3
     63a:	469a      	mov	sl, r3
     63c:	4643      	mov	r3, r8
     63e:	2b00      	cmp	r3, #0
     640:	d008      	beq.n	654 <eink_et011tt2_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     642:	9b02      	ldr	r3, [sp, #8]
     644:	4443      	add	r3, r8
     646:	001e      	movs	r6, r3
     648:	9b03      	ldr	r3, [sp, #12]
     64a:	469c      	mov	ip, r3
     64c:	4466      	add	r6, ip
     64e:	4654      	mov	r4, sl
     650:	2500      	movs	r5, #0
     652:	e7df      	b.n	614 <eink_et011tt2_graphics_load_mono_image+0x60>
     654:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     656:	9b04      	ldr	r3, [sp, #16]
     658:	3301      	adds	r3, #1
     65a:	b29b      	uxth	r3, r3
     65c:	9304      	str	r3, [sp, #16]
     65e:	9a05      	ldr	r2, [sp, #20]
     660:	429a      	cmp	r2, r3
     662:	d911      	bls.n	688 <eink_et011tt2_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     664:	9b06      	ldr	r3, [sp, #24]
     666:	1e1f      	subs	r7, r3, #0
     668:	d0f5      	beq.n	656 <eink_et011tt2_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     66a:	9b07      	ldr	r3, [sp, #28]
     66c:	9a04      	ldr	r2, [sp, #16]
     66e:	4353      	muls	r3, r2
     670:	9302      	str	r3, [sp, #8]
     672:	9b09      	ldr	r3, [sp, #36]	; 0x24
     674:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     676:	9b08      	ldr	r3, [sp, #32]
     678:	4694      	mov	ip, r2
     67a:	4463      	add	r3, ip
     67c:	b29b      	uxth	r3, r3
     67e:	9301      	str	r3, [sp, #4]
     680:	4643      	mov	r3, r8
     682:	46b8      	mov	r8, r7
     684:	001f      	movs	r7, r3
     686:	e7dc      	b.n	642 <eink_et011tt2_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     688:	b00b      	add	sp, #44	; 0x2c
     68a:	bc3c      	pop	{r2, r3, r4, r5}
     68c:	4690      	mov	r8, r2
     68e:	4699      	mov	r9, r3
     690:	46a2      	mov	sl, r4
     692:	46ab      	mov	fp, r5
     694:	bdf0      	pop	{r4, r5, r6, r7, pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	00000595 	.word	0x00000595

0000069c <eink_ed013tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed013tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     69c:	b5f0      	push	{r4, r5, r6, r7, lr}
     69e:	46de      	mov	lr, fp
     6a0:	4657      	mov	r7, sl
     6a2:	464e      	mov	r6, r9
     6a4:	4645      	mov	r5, r8
     6a6:	b5e0      	push	{r5, r6, r7, lr}
     6a8:	b08b      	sub	sp, #44	; 0x2c
     6aa:	9003      	str	r0, [sp, #12]
     6ac:	9205      	str	r2, [sp, #20]
     6ae:	0018      	movs	r0, r3
     6b0:	9307      	str	r3, [sp, #28]
     6b2:	ab14      	add	r3, sp, #80	; 0x50
     6b4:	8819      	ldrh	r1, [r3, #0]
     6b6:	9108      	str	r1, [sp, #32]
     6b8:	ab15      	add	r3, sp, #84	; 0x54
     6ba:	8819      	ldrh	r1, [r3, #0]
     6bc:	9109      	str	r1, [sp, #36]	; 0x24
     6be:	ab16      	add	r3, sp, #88	; 0x58
     6c0:	781f      	ldrb	r7, [r3, #0]
     6c2:	ab17      	add	r3, sp, #92	; 0x5c
     6c4:	7819      	ldrb	r1, [r3, #0]
     6c6:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     6c8:	428f      	cmp	r7, r1
     6ca:	d051      	beq.n	770 <eink_ed013tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     6cc:	2a00      	cmp	r2, #0
     6ce:	d04f      	beq.n	770 <eink_ed013tc1_graphics_load_mono_image+0xd4>
     6d0:	2200      	movs	r2, #0
     6d2:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     6d4:	0003      	movs	r3, r0
     6d6:	3b01      	subs	r3, #1
     6d8:	b29b      	uxth	r3, r3
     6da:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6dc:	4b28      	ldr	r3, [pc, #160]	; (780 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     6de:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     6e0:	46b8      	mov	r8, r7
     6e2:	e033      	b.n	74c <eink_ed013tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     6e4:	464b      	mov	r3, r9
     6e6:	2b08      	cmp	r3, #8
     6e8:	d003      	beq.n	6f2 <eink_ed013tc1_graphics_load_mono_image+0x56>
     6ea:	464a      	mov	r2, r9
     6ec:	0021      	movs	r1, r4
     6ee:	9801      	ldr	r0, [sp, #4]
     6f0:	47d8      	blx	fp
     6f2:	3501      	adds	r5, #1
     6f4:	3401      	adds	r4, #1
     6f6:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     6f8:	2d08      	cmp	r5, #8
     6fa:	d00b      	beq.n	714 <eink_ed013tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     6fc:	7833      	ldrb	r3, [r6, #0]
     6fe:	412b      	asrs	r3, r5
                    if(bit_value) {
     700:	07db      	lsls	r3, r3, #31
     702:	d5ef      	bpl.n	6e4 <eink_ed013tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     704:	2f08      	cmp	r7, #8
     706:	d0f4      	beq.n	6f2 <eink_ed013tc1_graphics_load_mono_image+0x56>
     708:	003a      	movs	r2, r7
     70a:	0021      	movs	r1, r4
     70c:	9801      	ldr	r0, [sp, #4]
     70e:	4b1c      	ldr	r3, [pc, #112]	; (780 <eink_ed013tc1_graphics_load_mono_image+0xe4>)
     710:	4798      	blx	r3
     712:	e7ee      	b.n	6f2 <eink_ed013tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     714:	4643      	mov	r3, r8
     716:	3b01      	subs	r3, #1
     718:	b29b      	uxth	r3, r3
     71a:	4698      	mov	r8, r3
     71c:	4653      	mov	r3, sl
     71e:	3308      	adds	r3, #8
     720:	b29b      	uxth	r3, r3
     722:	469a      	mov	sl, r3
     724:	4643      	mov	r3, r8
     726:	2b00      	cmp	r3, #0
     728:	d008      	beq.n	73c <eink_ed013tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     72a:	9b02      	ldr	r3, [sp, #8]
     72c:	4443      	add	r3, r8
     72e:	001e      	movs	r6, r3
     730:	9b03      	ldr	r3, [sp, #12]
     732:	469c      	mov	ip, r3
     734:	4466      	add	r6, ip
     736:	4654      	mov	r4, sl
     738:	2500      	movs	r5, #0
     73a:	e7df      	b.n	6fc <eink_ed013tc1_graphics_load_mono_image+0x60>
     73c:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     73e:	9b04      	ldr	r3, [sp, #16]
     740:	3301      	adds	r3, #1
     742:	b29b      	uxth	r3, r3
     744:	9304      	str	r3, [sp, #16]
     746:	9a05      	ldr	r2, [sp, #20]
     748:	429a      	cmp	r2, r3
     74a:	d911      	bls.n	770 <eink_ed013tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     74c:	9b06      	ldr	r3, [sp, #24]
     74e:	1e1f      	subs	r7, r3, #0
     750:	d0f5      	beq.n	73e <eink_ed013tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     752:	9b07      	ldr	r3, [sp, #28]
     754:	9a04      	ldr	r2, [sp, #16]
     756:	4353      	muls	r3, r2
     758:	9302      	str	r3, [sp, #8]
     75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     75c:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     75e:	9b08      	ldr	r3, [sp, #32]
     760:	4694      	mov	ip, r2
     762:	4463      	add	r3, ip
     764:	b29b      	uxth	r3, r3
     766:	9301      	str	r3, [sp, #4]
     768:	4643      	mov	r3, r8
     76a:	46b8      	mov	r8, r7
     76c:	001f      	movs	r7, r3
     76e:	e7dc      	b.n	72a <eink_ed013tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
     770:	b00b      	add	sp, #44	; 0x2c
     772:	bc3c      	pop	{r2, r3, r4, r5}
     774:	4690      	mov	r8, r2
     776:	4699      	mov	r9, r3
     778:	46a2      	mov	sl, r4
     77a:	46ab      	mov	fp, r5
     77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     77e:	46c0      	nop			; (mov r8, r8)
     780:	00000595 	.word	0x00000595

00000784 <eink_ed029tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed029tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	46de      	mov	lr, fp
     788:	4657      	mov	r7, sl
     78a:	464e      	mov	r6, r9
     78c:	4645      	mov	r5, r8
     78e:	b5e0      	push	{r5, r6, r7, lr}
     790:	b089      	sub	sp, #36	; 0x24
     792:	0019      	movs	r1, r3
     794:	9305      	str	r3, [sp, #20]
     796:	ab12      	add	r3, sp, #72	; 0x48
     798:	881c      	ldrh	r4, [r3, #0]
     79a:	9400      	str	r4, [sp, #0]
     79c:	ab13      	add	r3, sp, #76	; 0x4c
     79e:	881d      	ldrh	r5, [r3, #0]
     7a0:	9506      	str	r5, [sp, #24]
     7a2:	ab14      	add	r3, sp, #80	; 0x50
     7a4:	781d      	ldrb	r5, [r3, #0]
     7a6:	46a8      	mov	r8, r5
     7a8:	ab15      	add	r3, sp, #84	; 0x54
     7aa:	781d      	ldrb	r5, [r3, #0]
     7ac:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     7ae:	45a8      	cmp	r8, r5
     7b0:	d04e      	beq.n	850 <eink_ed029tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     7b2:	2a00      	cmp	r2, #0
     7b4:	d04c      	beq.n	850 <eink_ed029tc1_graphics_load_mono_image+0xcc>
     7b6:	000b      	movs	r3, r1
     7b8:	9103      	str	r1, [sp, #12]
     7ba:	3b01      	subs	r3, #1
     7bc:	b29b      	uxth	r3, r3
     7be:	3902      	subs	r1, #2
     7c0:	1ac9      	subs	r1, r1, r3
     7c2:	1841      	adds	r1, r0, r1
     7c4:	9102      	str	r1, [sp, #8]
     7c6:	46a4      	mov	ip, r4
     7c8:	4462      	add	r2, ip
     7ca:	b292      	uxth	r2, r2
     7cc:	9204      	str	r2, [sp, #16]
     7ce:	3301      	adds	r3, #1
     7d0:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7d2:	4b23      	ldr	r3, [pc, #140]	; (860 <eink_ed029tc1_graphics_load_mono_image+0xdc>)
     7d4:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7d6:	469a      	mov	sl, r3
     7d8:	e02f      	b.n	83a <eink_ed029tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     7da:	464b      	mov	r3, r9
     7dc:	2b08      	cmp	r3, #8
     7de:	d003      	beq.n	7e8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     7e0:	464a      	mov	r2, r9
     7e2:	0021      	movs	r1, r4
     7e4:	9800      	ldr	r0, [sp, #0]
     7e6:	47d8      	blx	fp
     7e8:	3501      	adds	r5, #1
     7ea:	3401      	adds	r4, #1
     7ec:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     7ee:	2d08      	cmp	r5, #8
     7f0:	d00b      	beq.n	80a <eink_ed029tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     7f2:	7833      	ldrb	r3, [r6, #0]
     7f4:	412b      	asrs	r3, r5
                    if(bit_value) {
     7f6:	421f      	tst	r7, r3
     7f8:	d0ef      	beq.n	7da <eink_ed029tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     7fa:	4643      	mov	r3, r8
     7fc:	2b08      	cmp	r3, #8
     7fe:	d0f3      	beq.n	7e8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     800:	4642      	mov	r2, r8
     802:	0021      	movs	r1, r4
     804:	9800      	ldr	r0, [sp, #0]
     806:	47d0      	blx	sl
     808:	e7ee      	b.n	7e8 <eink_ed029tc1_graphics_load_mono_image+0x64>
     80a:	9b01      	ldr	r3, [sp, #4]
     80c:	3308      	adds	r3, #8
     80e:	b29b      	uxth	r3, r3
     810:	9301      	str	r3, [sp, #4]
     812:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     814:	9b02      	ldr	r3, [sp, #8]
     816:	429e      	cmp	r6, r3
     818:	d003      	beq.n	822 <eink_ed029tc1_graphics_load_mono_image+0x9e>
{
     81a:	9c01      	ldr	r4, [sp, #4]
     81c:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     81e:	2701      	movs	r7, #1
     820:	e7e7      	b.n	7f2 <eink_ed029tc1_graphics_load_mono_image+0x6e>
     822:	9b02      	ldr	r3, [sp, #8]
     824:	9a03      	ldr	r2, [sp, #12]
     826:	4694      	mov	ip, r2
     828:	4463      	add	r3, ip
     82a:	9302      	str	r3, [sp, #8]
     82c:	9b00      	ldr	r3, [sp, #0]
     82e:	3301      	adds	r3, #1
     830:	b29b      	uxth	r3, r3
     832:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     834:	9a04      	ldr	r2, [sp, #16]
     836:	4293      	cmp	r3, r2
     838:	d00a      	beq.n	850 <eink_ed029tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     83a:	9b05      	ldr	r3, [sp, #20]
     83c:	2b00      	cmp	r3, #0
     83e:	d0f0      	beq.n	822 <eink_ed029tc1_graphics_load_mono_image+0x9e>
     840:	9b07      	ldr	r3, [sp, #28]
     842:	9a02      	ldr	r2, [sp, #8]
     844:	4694      	mov	ip, r2
     846:	4463      	add	r3, ip
     848:	001e      	movs	r6, r3
     84a:	9b06      	ldr	r3, [sp, #24]
     84c:	9301      	str	r3, [sp, #4]
     84e:	e7e4      	b.n	81a <eink_ed029tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     850:	b009      	add	sp, #36	; 0x24
     852:	bc3c      	pop	{r2, r3, r4, r5}
     854:	4690      	mov	r8, r2
     856:	4699      	mov	r9, r3
     858:	46a2      	mov	sl, r4
     85a:	46ab      	mov	fp, r5
     85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00000595 	.word	0x00000595

00000864 <eink_el026tr1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_el026tr1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     864:	b5f0      	push	{r4, r5, r6, r7, lr}
     866:	b085      	sub	sp, #20
     868:	ac0a      	add	r4, sp, #40	; 0x28
     86a:	8824      	ldrh	r4, [r4, #0]
     86c:	ad0b      	add	r5, sp, #44	; 0x2c
     86e:	882d      	ldrh	r5, [r5, #0]
     870:	ae0c      	add	r6, sp, #48	; 0x30
     872:	7836      	ldrb	r6, [r6, #0]
     874:	af0d      	add	r7, sp, #52	; 0x34
     876:	783f      	ldrb	r7, [r7, #0]
    /** Calls the equivalent function but for the ED029TC1 - avoid code repetition */
    eink_ed029tc1_graphics_load_mono_image(img_array, array_size, image_width_px, image_height_bytes, x_place, y_place, foreground_colour, background_colour);
     878:	9703      	str	r7, [sp, #12]
     87a:	9602      	str	r6, [sp, #8]
     87c:	9501      	str	r5, [sp, #4]
     87e:	9400      	str	r4, [sp, #0]
     880:	4c01      	ldr	r4, [pc, #4]	; (888 <eink_el026tr1_graphics_load_mono_image+0x24>)
     882:	47a0      	blx	r4
     884:	b005      	add	sp, #20
     886:	bdf0      	pop	{r4, r5, r6, r7, pc}
     888:	00000785 	.word	0x00000785

0000088c <eink_hink_e0154a05_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_hink_e0154a05_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
     88e:	46de      	mov	lr, fp
     890:	4657      	mov	r7, sl
     892:	464e      	mov	r6, r9
     894:	4645      	mov	r5, r8
     896:	b5e0      	push	{r5, r6, r7, lr}
     898:	b089      	sub	sp, #36	; 0x24
     89a:	0019      	movs	r1, r3
     89c:	9305      	str	r3, [sp, #20]
     89e:	ab12      	add	r3, sp, #72	; 0x48
     8a0:	881c      	ldrh	r4, [r3, #0]
     8a2:	9400      	str	r4, [sp, #0]
     8a4:	ab13      	add	r3, sp, #76	; 0x4c
     8a6:	881d      	ldrh	r5, [r3, #0]
     8a8:	9506      	str	r5, [sp, #24]
     8aa:	ab14      	add	r3, sp, #80	; 0x50
     8ac:	781d      	ldrb	r5, [r3, #0]
     8ae:	46a8      	mov	r8, r5
     8b0:	ab15      	add	r3, sp, #84	; 0x54
     8b2:	781d      	ldrb	r5, [r3, #0]
     8b4:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     8b6:	45a8      	cmp	r8, r5
     8b8:	d04e      	beq.n	958 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     8ba:	2a00      	cmp	r2, #0
     8bc:	d04c      	beq.n	958 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
     8be:	000b      	movs	r3, r1
     8c0:	9103      	str	r1, [sp, #12]
     8c2:	3b01      	subs	r3, #1
     8c4:	b29b      	uxth	r3, r3
     8c6:	3902      	subs	r1, #2
     8c8:	1ac9      	subs	r1, r1, r3
     8ca:	1841      	adds	r1, r0, r1
     8cc:	9102      	str	r1, [sp, #8]
     8ce:	46a4      	mov	ip, r4
     8d0:	4462      	add	r2, ip
     8d2:	b292      	uxth	r2, r2
     8d4:	9204      	str	r2, [sp, #16]
     8d6:	3301      	adds	r3, #1
     8d8:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                        } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8da:	4b23      	ldr	r3, [pc, #140]	; (968 <eink_hink_e0154a05_graphics_load_mono_image+0xdc>)
     8dc:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     8de:	469a      	mov	sl, r3
     8e0:	e02f      	b.n	942 <eink_hink_e0154a05_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     8e2:	464b      	mov	r3, r9
     8e4:	2b08      	cmp	r3, #8
     8e6:	d003      	beq.n	8f0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     8e8:	464a      	mov	r2, r9
     8ea:	0021      	movs	r1, r4
     8ec:	9800      	ldr	r0, [sp, #0]
     8ee:	47d8      	blx	fp
     8f0:	3501      	adds	r5, #1
     8f2:	3401      	adds	r4, #1
     8f4:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     8f6:	2d08      	cmp	r5, #8
     8f8:	d00b      	beq.n	912 <eink_hink_e0154a05_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     8fa:	7833      	ldrb	r3, [r6, #0]
     8fc:	412b      	asrs	r3, r5
                    if(bit_value) {
     8fe:	421f      	tst	r7, r3
     900:	d0ef      	beq.n	8e2 <eink_hink_e0154a05_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     902:	4643      	mov	r3, r8
     904:	2b08      	cmp	r3, #8
     906:	d0f3      	beq.n	8f0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     908:	4642      	mov	r2, r8
     90a:	0021      	movs	r1, r4
     90c:	9800      	ldr	r0, [sp, #0]
     90e:	47d0      	blx	sl
     910:	e7ee      	b.n	8f0 <eink_hink_e0154a05_graphics_load_mono_image+0x64>
     912:	9b01      	ldr	r3, [sp, #4]
     914:	3308      	adds	r3, #8
     916:	b29b      	uxth	r3, r3
     918:	9301      	str	r3, [sp, #4]
     91a:	3e01      	subs	r6, #1
            for (j = (image_height_bytes); j > 0; j--) {
     91c:	9b02      	ldr	r3, [sp, #8]
     91e:	429e      	cmp	r6, r3
     920:	d003      	beq.n	92a <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
{
     922:	9c01      	ldr	r4, [sp, #4]
     924:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     926:	2701      	movs	r7, #1
     928:	e7e7      	b.n	8fa <eink_hink_e0154a05_graphics_load_mono_image+0x6e>
     92a:	9b02      	ldr	r3, [sp, #8]
     92c:	9a03      	ldr	r2, [sp, #12]
     92e:	4694      	mov	ip, r2
     930:	4463      	add	r3, ip
     932:	9302      	str	r3, [sp, #8]
     934:	9b00      	ldr	r3, [sp, #0]
     936:	3301      	adds	r3, #1
     938:	b29b      	uxth	r3, r3
     93a:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     93c:	9a04      	ldr	r2, [sp, #16]
     93e:	4293      	cmp	r3, r2
     940:	d00a      	beq.n	958 <eink_hink_e0154a05_graphics_load_mono_image+0xcc>
            for (j = (image_height_bytes); j > 0; j--) {
     942:	9b05      	ldr	r3, [sp, #20]
     944:	2b00      	cmp	r3, #0
     946:	d0f0      	beq.n	92a <eink_hink_e0154a05_graphics_load_mono_image+0x9e>
     948:	9b07      	ldr	r3, [sp, #28]
     94a:	9a02      	ldr	r2, [sp, #8]
     94c:	4694      	mov	ip, r2
     94e:	4463      	add	r3, ip
     950:	001e      	movs	r6, r3
     952:	9b06      	ldr	r3, [sp, #24]
     954:	9301      	str	r3, [sp, #4]
     956:	e7e4      	b.n	922 <eink_hink_e0154a05_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     958:	b009      	add	sp, #36	; 0x24
     95a:	bc3c      	pop	{r2, r3, r4, r5}
     95c:	4690      	mov	r8, r2
     95e:	4699      	mov	r9, r3
     960:	46a2      	mov	sl, r4
     962:	46ab      	mov	fp, r5
     964:	bdf0      	pop	{r4, r5, r6, r7, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	00000595 	.word	0x00000595

0000096c <eink_ac040tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac040tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
     96e:	46de      	mov	lr, fp
     970:	4657      	mov	r7, sl
     972:	464e      	mov	r6, r9
     974:	4645      	mov	r5, r8
     976:	b5e0      	push	{r5, r6, r7, lr}
     978:	b089      	sub	sp, #36	; 0x24
     97a:	a912      	add	r1, sp, #72	; 0x48
     97c:	8809      	ldrh	r1, [r1, #0]
     97e:	9106      	str	r1, [sp, #24]
     980:	a913      	add	r1, sp, #76	; 0x4c
     982:	8809      	ldrh	r1, [r1, #0]
     984:	ac14      	add	r4, sp, #80	; 0x50
     986:	7827      	ldrb	r7, [r4, #0]
     988:	ac15      	add	r4, sp, #84	; 0x54
     98a:	7824      	ldrb	r4, [r4, #0]
     98c:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     98e:	42a7      	cmp	r7, r4
     990:	d04e      	beq.n	a30 <eink_ac040tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     992:	9205      	str	r2, [sp, #20]
     994:	2a00      	cmp	r2, #0
     996:	d04b      	beq.n	a30 <eink_ac040tc1_graphics_load_mono_image+0xc4>
     998:	9304      	str	r3, [sp, #16]
     99a:	9003      	str	r0, [sp, #12]
     99c:	4a28      	ldr	r2, [pc, #160]	; (a40 <eink_ac040tc1_graphics_load_mono_image+0xd4>)
     99e:	4694      	mov	ip, r2
     9a0:	4463      	add	r3, ip
     9a2:	00db      	lsls	r3, r3, #3
     9a4:	18cb      	adds	r3, r1, r3
     9a6:	2200      	movs	r2, #0
     9a8:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     9aa:	b29b      	uxth	r3, r3
     9ac:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     9ae:	4b25      	ldr	r3, [pc, #148]	; (a44 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9b0:	469b      	mov	fp, r3
     9b2:	e02c      	b.n	a0e <eink_ac040tc1_graphics_load_mono_image+0xa2>
     9b4:	464b      	mov	r3, r9
     9b6:	2b08      	cmp	r3, #8
     9b8:	d003      	beq.n	9c2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9ba:	464a      	mov	r2, r9
     9bc:	0021      	movs	r1, r4
     9be:	9801      	ldr	r0, [sp, #4]
     9c0:	47d8      	blx	fp
     9c2:	3501      	adds	r5, #1
     9c4:	3401      	adds	r4, #1
     9c6:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     9c8:	2d08      	cmp	r5, #8
     9ca:	d00b      	beq.n	9e4 <eink_ac040tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     9cc:	7833      	ldrb	r3, [r6, #0]
     9ce:	412b      	asrs	r3, r5
                    if(bit_value) {
     9d0:	07db      	lsls	r3, r3, #31
     9d2:	d5ef      	bpl.n	9b4 <eink_ac040tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     9d4:	2f08      	cmp	r7, #8
     9d6:	d0f4      	beq.n	9c2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9d8:	003a      	movs	r2, r7
     9da:	0021      	movs	r1, r4
     9dc:	9801      	ldr	r0, [sp, #4]
     9de:	4b19      	ldr	r3, [pc, #100]	; (a44 <eink_ac040tc1_graphics_load_mono_image+0xd8>)
     9e0:	4798      	blx	r3
     9e2:	e7ee      	b.n	9c2 <eink_ac040tc1_graphics_load_mono_image+0x56>
     9e4:	4643      	mov	r3, r8
     9e6:	3b08      	subs	r3, #8
     9e8:	b29b      	uxth	r3, r3
     9ea:	4698      	mov	r8, r3
     9ec:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     9ee:	4556      	cmp	r6, sl
     9f0:	d002      	beq.n	9f8 <eink_ac040tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     9f2:	4644      	mov	r4, r8
     9f4:	2500      	movs	r5, #0
     9f6:	e7e9      	b.n	9cc <eink_ac040tc1_graphics_load_mono_image+0x60>
     9f8:	9b02      	ldr	r3, [sp, #8]
     9fa:	3301      	adds	r3, #1
     9fc:	9302      	str	r3, [sp, #8]
     9fe:	9a03      	ldr	r2, [sp, #12]
     a00:	9904      	ldr	r1, [sp, #16]
     a02:	468c      	mov	ip, r1
     a04:	4462      	add	r2, ip
     a06:	9203      	str	r2, [sp, #12]
     a08:	9a05      	ldr	r2, [sp, #20]
     a0a:	4293      	cmp	r3, r2
     a0c:	d210      	bcs.n	a30 <eink_ac040tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     a0e:	9b04      	ldr	r3, [sp, #16]
     a10:	2b00      	cmp	r3, #0
     a12:	d0f1      	beq.n	9f8 <eink_ac040tc1_graphics_load_mono_image+0x8c>
     a14:	9e03      	ldr	r6, [sp, #12]
     a16:	0032      	movs	r2, r6
     a18:	469c      	mov	ip, r3
     a1a:	4462      	add	r2, ip
     a1c:	4692      	mov	sl, r2
     a1e:	9b07      	ldr	r3, [sp, #28]
     a20:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a22:	9b06      	ldr	r3, [sp, #24]
     a24:	9a02      	ldr	r2, [sp, #8]
     a26:	4694      	mov	ip, r2
     a28:	4463      	add	r3, ip
     a2a:	b29b      	uxth	r3, r3
     a2c:	9301      	str	r3, [sp, #4]
     a2e:	e7e0      	b.n	9f2 <eink_ac040tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     a30:	b009      	add	sp, #36	; 0x24
     a32:	bc3c      	pop	{r2, r3, r4, r5}
     a34:	4690      	mov	r8, r2
     a36:	4699      	mov	r9, r3
     a38:	46a2      	mov	sl, r4
     a3a:	46ab      	mov	fp, r5
     a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	00001fff 	.word	0x00001fff
     a44:	00000595 	.word	0x00000595

00000a48 <eink_ac057tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ac057tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     a48:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4a:	46de      	mov	lr, fp
     a4c:	4657      	mov	r7, sl
     a4e:	464e      	mov	r6, r9
     a50:	4645      	mov	r5, r8
     a52:	b5e0      	push	{r5, r6, r7, lr}
     a54:	b089      	sub	sp, #36	; 0x24
     a56:	a912      	add	r1, sp, #72	; 0x48
     a58:	8809      	ldrh	r1, [r1, #0]
     a5a:	9106      	str	r1, [sp, #24]
     a5c:	a913      	add	r1, sp, #76	; 0x4c
     a5e:	8809      	ldrh	r1, [r1, #0]
     a60:	ac14      	add	r4, sp, #80	; 0x50
     a62:	7827      	ldrb	r7, [r4, #0]
     a64:	ac15      	add	r4, sp, #84	; 0x54
     a66:	7824      	ldrb	r4, [r4, #0]
     a68:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     a6a:	42a7      	cmp	r7, r4
     a6c:	d04e      	beq.n	b0c <eink_ac057tc1_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     a6e:	9205      	str	r2, [sp, #20]
     a70:	2a00      	cmp	r2, #0
     a72:	d04b      	beq.n	b0c <eink_ac057tc1_graphics_load_mono_image+0xc4>
     a74:	9304      	str	r3, [sp, #16]
     a76:	9003      	str	r0, [sp, #12]
     a78:	4a28      	ldr	r2, [pc, #160]	; (b1c <eink_ac057tc1_graphics_load_mono_image+0xd4>)
     a7a:	4694      	mov	ip, r2
     a7c:	4463      	add	r3, ip
     a7e:	00db      	lsls	r3, r3, #3
     a80:	18cb      	adds	r3, r1, r3
     a82:	2200      	movs	r2, #0
     a84:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     a86:	b29b      	uxth	r3, r3
     a88:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     a8a:	4b25      	ldr	r3, [pc, #148]	; (b20 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     a8c:	469b      	mov	fp, r3
     a8e:	e02c      	b.n	aea <eink_ac057tc1_graphics_load_mono_image+0xa2>
     a90:	464b      	mov	r3, r9
     a92:	2b08      	cmp	r3, #8
     a94:	d003      	beq.n	a9e <eink_ac057tc1_graphics_load_mono_image+0x56>
     a96:	464a      	mov	r2, r9
     a98:	0021      	movs	r1, r4
     a9a:	9801      	ldr	r0, [sp, #4]
     a9c:	47d8      	blx	fp
     a9e:	3501      	adds	r5, #1
     aa0:	3401      	adds	r4, #1
     aa2:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     aa4:	2d08      	cmp	r5, #8
     aa6:	d00b      	beq.n	ac0 <eink_ac057tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     aa8:	7833      	ldrb	r3, [r6, #0]
     aaa:	412b      	asrs	r3, r5
                    if(bit_value) {
     aac:	07db      	lsls	r3, r3, #31
     aae:	d5ef      	bpl.n	a90 <eink_ac057tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     ab0:	2f08      	cmp	r7, #8
     ab2:	d0f4      	beq.n	a9e <eink_ac057tc1_graphics_load_mono_image+0x56>
     ab4:	003a      	movs	r2, r7
     ab6:	0021      	movs	r1, r4
     ab8:	9801      	ldr	r0, [sp, #4]
     aba:	4b19      	ldr	r3, [pc, #100]	; (b20 <eink_ac057tc1_graphics_load_mono_image+0xd8>)
     abc:	4798      	blx	r3
     abe:	e7ee      	b.n	a9e <eink_ac057tc1_graphics_load_mono_image+0x56>
     ac0:	4643      	mov	r3, r8
     ac2:	3b08      	subs	r3, #8
     ac4:	b29b      	uxth	r3, r3
     ac6:	4698      	mov	r8, r3
     ac8:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     aca:	4556      	cmp	r6, sl
     acc:	d002      	beq.n	ad4 <eink_ac057tc1_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     ace:	4644      	mov	r4, r8
     ad0:	2500      	movs	r5, #0
     ad2:	e7e9      	b.n	aa8 <eink_ac057tc1_graphics_load_mono_image+0x60>
     ad4:	9b02      	ldr	r3, [sp, #8]
     ad6:	3301      	adds	r3, #1
     ad8:	9302      	str	r3, [sp, #8]
     ada:	9a03      	ldr	r2, [sp, #12]
     adc:	9904      	ldr	r1, [sp, #16]
     ade:	468c      	mov	ip, r1
     ae0:	4462      	add	r2, ip
     ae2:	9203      	str	r2, [sp, #12]
     ae4:	9a05      	ldr	r2, [sp, #20]
     ae6:	4293      	cmp	r3, r2
     ae8:	d210      	bcs.n	b0c <eink_ac057tc1_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     aea:	9b04      	ldr	r3, [sp, #16]
     aec:	2b00      	cmp	r3, #0
     aee:	d0f1      	beq.n	ad4 <eink_ac057tc1_graphics_load_mono_image+0x8c>
     af0:	9e03      	ldr	r6, [sp, #12]
     af2:	0032      	movs	r2, r6
     af4:	469c      	mov	ip, r3
     af6:	4462      	add	r2, ip
     af8:	4692      	mov	sl, r2
     afa:	9b07      	ldr	r3, [sp, #28]
     afc:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     afe:	9b06      	ldr	r3, [sp, #24]
     b00:	9a02      	ldr	r2, [sp, #8]
     b02:	4694      	mov	ip, r2
     b04:	4463      	add	r3, ip
     b06:	b29b      	uxth	r3, r3
     b08:	9301      	str	r3, [sp, #4]
     b0a:	e7e0      	b.n	ace <eink_ac057tc1_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     b0c:	b009      	add	sp, #36	; 0x24
     b0e:	bc3c      	pop	{r2, r3, r4, r5}
     b10:	4690      	mov	r8, r2
     b12:	4699      	mov	r9, r3
     b14:	46a2      	mov	sl, r4
     b16:	46ab      	mov	fp, r5
     b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	00001fff 	.word	0x00001fff
     b20:	00000595 	.word	0x00000595

00000b24 <eink_ed057tc2_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed057tc2_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     b24:	b5f0      	push	{r4, r5, r6, r7, lr}
     b26:	46de      	mov	lr, fp
     b28:	4657      	mov	r7, sl
     b2a:	464e      	mov	r6, r9
     b2c:	4645      	mov	r5, r8
     b2e:	b5e0      	push	{r5, r6, r7, lr}
     b30:	b089      	sub	sp, #36	; 0x24
     b32:	a912      	add	r1, sp, #72	; 0x48
     b34:	8809      	ldrh	r1, [r1, #0]
     b36:	9106      	str	r1, [sp, #24]
     b38:	a913      	add	r1, sp, #76	; 0x4c
     b3a:	8809      	ldrh	r1, [r1, #0]
     b3c:	ac14      	add	r4, sp, #80	; 0x50
     b3e:	7827      	ldrb	r7, [r4, #0]
     b40:	ac15      	add	r4, sp, #84	; 0x54
     b42:	7824      	ldrb	r4, [r4, #0]
     b44:	46a1      	mov	r9, r4
    uint32_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     b46:	42a7      	cmp	r7, r4
     b48:	d04e      	beq.n	be8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     b4a:	9205      	str	r2, [sp, #20]
     b4c:	2a00      	cmp	r2, #0
     b4e:	d04b      	beq.n	be8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
     b50:	9304      	str	r3, [sp, #16]
     b52:	9003      	str	r0, [sp, #12]
     b54:	4a28      	ldr	r2, [pc, #160]	; (bf8 <eink_ed057tc2_graphics_load_mono_image+0xd4>)
     b56:	4694      	mov	ip, r2
     b58:	4463      	add	r3, ip
     b5a:	00db      	lsls	r3, r3, #3
     b5c:	18cb      	adds	r3, r1, r3
     b5e:	2200      	movs	r2, #0
     b60:	9202      	str	r2, [sp, #8]
            m = (image_height_bytes-1);
            for (j = 0; j < image_height_bytes; j++) {
     b62:	b29b      	uxth	r3, r3
     b64:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     b66:	4b25      	ldr	r3, [pc, #148]	; (bfc <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b68:	469b      	mov	fp, r3
     b6a:	e02c      	b.n	bc6 <eink_ed057tc2_graphics_load_mono_image+0xa2>
     b6c:	464b      	mov	r3, r9
     b6e:	2b08      	cmp	r3, #8
     b70:	d003      	beq.n	b7a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b72:	464a      	mov	r2, r9
     b74:	0021      	movs	r1, r4
     b76:	9801      	ldr	r0, [sp, #4]
     b78:	47d8      	blx	fp
     b7a:	3501      	adds	r5, #1
     b7c:	3401      	adds	r4, #1
     b7e:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     b80:	2d08      	cmp	r5, #8
     b82:	d00b      	beq.n	b9c <eink_ed057tc2_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     b84:	7833      	ldrb	r3, [r6, #0]
     b86:	412b      	asrs	r3, r5
                    if(bit_value) {
     b88:	07db      	lsls	r3, r3, #31
     b8a:	d5ef      	bpl.n	b6c <eink_ed057tc2_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     b8c:	2f08      	cmp	r7, #8
     b8e:	d0f4      	beq.n	b7a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b90:	003a      	movs	r2, r7
     b92:	0021      	movs	r1, r4
     b94:	9801      	ldr	r0, [sp, #4]
     b96:	4b19      	ldr	r3, [pc, #100]	; (bfc <eink_ed057tc2_graphics_load_mono_image+0xd8>)
     b98:	4798      	blx	r3
     b9a:	e7ee      	b.n	b7a <eink_ed057tc2_graphics_load_mono_image+0x56>
     b9c:	4643      	mov	r3, r8
     b9e:	3b08      	subs	r3, #8
     ba0:	b29b      	uxth	r3, r3
     ba2:	4698      	mov	r8, r3
     ba4:	3601      	adds	r6, #1
            for (j = 0; j < image_height_bytes; j++) {
     ba6:	4556      	cmp	r6, sl
     ba8:	d002      	beq.n	bb0 <eink_ed057tc2_graphics_load_mono_image+0x8c>
        for (i = 0; i < image_width_px; i++) {
     baa:	4644      	mov	r4, r8
     bac:	2500      	movs	r5, #0
     bae:	e7e9      	b.n	b84 <eink_ed057tc2_graphics_load_mono_image+0x60>
     bb0:	9b02      	ldr	r3, [sp, #8]
     bb2:	3301      	adds	r3, #1
     bb4:	9302      	str	r3, [sp, #8]
     bb6:	9a03      	ldr	r2, [sp, #12]
     bb8:	9904      	ldr	r1, [sp, #16]
     bba:	468c      	mov	ip, r1
     bbc:	4462      	add	r2, ip
     bbe:	9203      	str	r2, [sp, #12]
     bc0:	9a05      	ldr	r2, [sp, #20]
     bc2:	4293      	cmp	r3, r2
     bc4:	d210      	bcs.n	be8 <eink_ed057tc2_graphics_load_mono_image+0xc4>
            for (j = 0; j < image_height_bytes; j++) {
     bc6:	9b04      	ldr	r3, [sp, #16]
     bc8:	2b00      	cmp	r3, #0
     bca:	d0f1      	beq.n	bb0 <eink_ed057tc2_graphics_load_mono_image+0x8c>
     bcc:	9e03      	ldr	r6, [sp, #12]
     bce:	0032      	movs	r2, r6
     bd0:	469c      	mov	ip, r3
     bd2:	4462      	add	r2, ip
     bd4:	4692      	mov	sl, r2
     bd6:	9b07      	ldr	r3, [sp, #28]
     bd8:	4698      	mov	r8, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     bda:	9b06      	ldr	r3, [sp, #24]
     bdc:	9a02      	ldr	r2, [sp, #8]
     bde:	4694      	mov	ip, r2
     be0:	4463      	add	r3, ip
     be2:	b29b      	uxth	r3, r3
     be4:	9301      	str	r3, [sp, #4]
     be6:	e7e0      	b.n	baa <eink_ed057tc2_graphics_load_mono_image+0x86>
                }
                m--;        
            }
        }
    }
     be8:	b009      	add	sp, #36	; 0x24
     bea:	bc3c      	pop	{r2, r3, r4, r5}
     bec:	4690      	mov	r8, r2
     bee:	4699      	mov	r9, r3
     bf0:	46a2      	mov	sl, r4
     bf2:	46ab      	mov	fp, r5
     bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	00001fff 	.word	0x00001fff
     bfc:	00000595 	.word	0x00000595

00000c00 <eink_ed028tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed028tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     c00:	b5f0      	push	{r4, r5, r6, r7, lr}
     c02:	46de      	mov	lr, fp
     c04:	4657      	mov	r7, sl
     c06:	464e      	mov	r6, r9
     c08:	4645      	mov	r5, r8
     c0a:	b5e0      	push	{r5, r6, r7, lr}
     c0c:	b08b      	sub	sp, #44	; 0x2c
     c0e:	9003      	str	r0, [sp, #12]
     c10:	9205      	str	r2, [sp, #20]
     c12:	0018      	movs	r0, r3
     c14:	9307      	str	r3, [sp, #28]
     c16:	ab14      	add	r3, sp, #80	; 0x50
     c18:	8819      	ldrh	r1, [r3, #0]
     c1a:	9108      	str	r1, [sp, #32]
     c1c:	ab15      	add	r3, sp, #84	; 0x54
     c1e:	8819      	ldrh	r1, [r3, #0]
     c20:	9109      	str	r1, [sp, #36]	; 0x24
     c22:	ab16      	add	r3, sp, #88	; 0x58
     c24:	781f      	ldrb	r7, [r3, #0]
     c26:	ab17      	add	r3, sp, #92	; 0x5c
     c28:	7819      	ldrb	r1, [r3, #0]
     c2a:	4689      	mov	r9, r1
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     c2c:	428f      	cmp	r7, r1
     c2e:	d051      	beq.n	cd4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     c30:	2a00      	cmp	r2, #0
     c32:	d04f      	beq.n	cd4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
     c34:	2200      	movs	r2, #0
     c36:	9204      	str	r2, [sp, #16]
            m = 0;
            for (j = (image_height_bytes-1); j > 0; j--) {
     c38:	0003      	movs	r3, r0
     c3a:	3b01      	subs	r3, #1
     c3c:	b29b      	uxth	r3, r3
     c3e:	9306      	str	r3, [sp, #24]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c40:	4b28      	ldr	r3, [pc, #160]	; (ce4 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c42:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c44:	46b8      	mov	r8, r7
     c46:	e033      	b.n	cb0 <eink_ed028tc1_graphics_load_mono_image+0xb0>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     c48:	464b      	mov	r3, r9
     c4a:	2b08      	cmp	r3, #8
     c4c:	d003      	beq.n	c56 <eink_ed028tc1_graphics_load_mono_image+0x56>
     c4e:	464a      	mov	r2, r9
     c50:	0021      	movs	r1, r4
     c52:	9801      	ldr	r0, [sp, #4]
     c54:	47d8      	blx	fp
     c56:	3501      	adds	r5, #1
     c58:	3401      	adds	r4, #1
     c5a:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     c5c:	2d08      	cmp	r5, #8
     c5e:	d00b      	beq.n	c78 <eink_ed028tc1_graphics_load_mono_image+0x78>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c60:	7833      	ldrb	r3, [r6, #0]
     c62:	412b      	asrs	r3, r5
                    if(bit_value) {
     c64:	07db      	lsls	r3, r3, #31
     c66:	d5ef      	bpl.n	c48 <eink_ed028tc1_graphics_load_mono_image+0x48>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     c68:	2f08      	cmp	r7, #8
     c6a:	d0f4      	beq.n	c56 <eink_ed028tc1_graphics_load_mono_image+0x56>
     c6c:	003a      	movs	r2, r7
     c6e:	0021      	movs	r1, r4
     c70:	9801      	ldr	r0, [sp, #4]
     c72:	4b1c      	ldr	r3, [pc, #112]	; (ce4 <eink_ed028tc1_graphics_load_mono_image+0xe4>)
     c74:	4798      	blx	r3
     c76:	e7ee      	b.n	c56 <eink_ed028tc1_graphics_load_mono_image+0x56>
            for (j = (image_height_bytes-1); j > 0; j--) {
     c78:	4643      	mov	r3, r8
     c7a:	3b01      	subs	r3, #1
     c7c:	b29b      	uxth	r3, r3
     c7e:	4698      	mov	r8, r3
     c80:	4653      	mov	r3, sl
     c82:	3308      	adds	r3, #8
     c84:	b29b      	uxth	r3, r3
     c86:	469a      	mov	sl, r3
     c88:	4643      	mov	r3, r8
     c8a:	2b00      	cmp	r3, #0
     c8c:	d008      	beq.n	ca0 <eink_ed028tc1_graphics_load_mono_image+0xa0>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     c8e:	9b02      	ldr	r3, [sp, #8]
     c90:	4443      	add	r3, r8
     c92:	001e      	movs	r6, r3
     c94:	9b03      	ldr	r3, [sp, #12]
     c96:	469c      	mov	ip, r3
     c98:	4466      	add	r6, ip
     c9a:	4654      	mov	r4, sl
     c9c:	2500      	movs	r5, #0
     c9e:	e7df      	b.n	c60 <eink_ed028tc1_graphics_load_mono_image+0x60>
     ca0:	46b8      	mov	r8, r7
        for (i = 0; i < image_width_px; i++) {
     ca2:	9b04      	ldr	r3, [sp, #16]
     ca4:	3301      	adds	r3, #1
     ca6:	b29b      	uxth	r3, r3
     ca8:	9304      	str	r3, [sp, #16]
     caa:	9a05      	ldr	r2, [sp, #20]
     cac:	429a      	cmp	r2, r3
     cae:	d911      	bls.n	cd4 <eink_ed028tc1_graphics_load_mono_image+0xd4>
            for (j = (image_height_bytes-1); j > 0; j--) {
     cb0:	9b06      	ldr	r3, [sp, #24]
     cb2:	1e1f      	subs	r7, r3, #0
     cb4:	d0f5      	beq.n	ca2 <eink_ed028tc1_graphics_load_mono_image+0xa2>
                    bit_value = ((img_array[(i*image_height_bytes)+j] >> k) & 0x1);
     cb6:	9b07      	ldr	r3, [sp, #28]
     cb8:	9a04      	ldr	r2, [sp, #16]
     cba:	4353      	muls	r3, r2
     cbc:	9302      	str	r3, [sp, #8]
     cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cc0:	469a      	mov	sl, r3
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     cc2:	9b08      	ldr	r3, [sp, #32]
     cc4:	4694      	mov	ip, r2
     cc6:	4463      	add	r3, ip
     cc8:	b29b      	uxth	r3, r3
     cca:	9301      	str	r3, [sp, #4]
     ccc:	4643      	mov	r3, r8
     cce:	46b8      	mov	r8, r7
     cd0:	001f      	movs	r7, r3
     cd2:	e7dc      	b.n	c8e <eink_ed028tc1_graphics_load_mono_image+0x8e>
                m++;
            }
        }
    }
    return;
}
     cd4:	b00b      	add	sp, #44	; 0x2c
     cd6:	bc3c      	pop	{r2, r3, r4, r5}
     cd8:	4690      	mov	r8, r2
     cda:	4699      	mov	r9, r3
     cdc:	46a2      	mov	sl, r4
     cde:	46ab      	mov	fp, r5
     ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	00000595 	.word	0x00000595

00000ce8 <eink_ed037tc1_graphics_load_mono_image>:
 * \param y_place Y location to place with bitmap.
 * \param foreground_colour Color of the foreground - where bit is equal to 1 in the array.
 * \param eink_pixel_colour Color of the background - where bit is equal to 0 in the array.
 */
void eink_ed037tc1_graphics_load_mono_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place, enum eink_pixel_colour foreground_colour, enum eink_pixel_colour background_colour)
{
     ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cea:	46de      	mov	lr, fp
     cec:	4657      	mov	r7, sl
     cee:	464e      	mov	r6, r9
     cf0:	4645      	mov	r5, r8
     cf2:	b5e0      	push	{r5, r6, r7, lr}
     cf4:	b089      	sub	sp, #36	; 0x24
     cf6:	0019      	movs	r1, r3
     cf8:	9305      	str	r3, [sp, #20]
     cfa:	ab12      	add	r3, sp, #72	; 0x48
     cfc:	881c      	ldrh	r4, [r3, #0]
     cfe:	9400      	str	r4, [sp, #0]
     d00:	ab13      	add	r3, sp, #76	; 0x4c
     d02:	881d      	ldrh	r5, [r3, #0]
     d04:	9506      	str	r5, [sp, #24]
     d06:	ab14      	add	r3, sp, #80	; 0x50
     d08:	781d      	ldrb	r5, [r3, #0]
     d0a:	46a8      	mov	r8, r5
     d0c:	ab15      	add	r3, sp, #84	; 0x54
     d0e:	781d      	ldrb	r5, [r3, #0]
     d10:	46a9      	mov	r9, r5
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value;
    
    if(foreground_colour != background_colour) {
     d12:	45a8      	cmp	r8, r5
     d14:	d04e      	beq.n	db4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
        /* Scan pixels by column */
        for (i = 0; i < image_width_px; i++) {
     d16:	2a00      	cmp	r2, #0
     d18:	d04c      	beq.n	db4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
     d1a:	000b      	movs	r3, r1
     d1c:	9103      	str	r1, [sp, #12]
     d1e:	3b01      	subs	r3, #1
     d20:	b29b      	uxth	r3, r3
     d22:	3902      	subs	r1, #2
     d24:	1ac9      	subs	r1, r1, r3
     d26:	1841      	adds	r1, r0, r1
     d28:	9102      	str	r1, [sp, #8]
     d2a:	46a4      	mov	ip, r4
     d2c:	4462      	add	r2, ip
     d2e:	b292      	uxth	r2, r2
     d30:	9204      	str	r2, [sp, #16]
     d32:	3301      	adds	r3, #1
     d34:	9307      	str	r3, [sp, #28]
                    
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
                    if(bit_value) {
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
                    } else {
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d36:	4b23      	ldr	r3, [pc, #140]	; (dc4 <eink_ed037tc1_graphics_load_mono_image+0xdc>)
     d38:	469b      	mov	fp, r3
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d3a:	469a      	mov	sl, r3
     d3c:	e02f      	b.n	d9e <eink_ed037tc1_graphics_load_mono_image+0xb6>
                        if(background_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), background_colour);
     d3e:	464b      	mov	r3, r9
     d40:	2b08      	cmp	r3, #8
     d42:	d003      	beq.n	d4c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d44:	464a      	mov	r2, r9
     d46:	0021      	movs	r1, r4
     d48:	9800      	ldr	r0, [sp, #0]
     d4a:	47d8      	blx	fp
     d4c:	3501      	adds	r5, #1
     d4e:	3401      	adds	r4, #1
     d50:	b2a4      	uxth	r4, r4
                for (k = 0; k < 8; k++) {
     d52:	2d08      	cmp	r5, #8
     d54:	d00b      	beq.n	d6e <eink_ed037tc1_graphics_load_mono_image+0x86>
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d56:	7833      	ldrb	r3, [r6, #0]
     d58:	412b      	asrs	r3, r5
                    if(bit_value) {
     d5a:	421f      	tst	r7, r3
     d5c:	d0ef      	beq.n	d3e <eink_ed037tc1_graphics_load_mono_image+0x56>
                        if(foreground_colour != PIXEL_NONE) gfx_eink_set_pixel((x_place+i), (y_place+(m*8)+k), foreground_colour);
     d5e:	4643      	mov	r3, r8
     d60:	2b08      	cmp	r3, #8
     d62:	d0f3      	beq.n	d4c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d64:	4642      	mov	r2, r8
     d66:	0021      	movs	r1, r4
     d68:	9800      	ldr	r0, [sp, #0]
     d6a:	47d0      	blx	sl
     d6c:	e7ee      	b.n	d4c <eink_ed037tc1_graphics_load_mono_image+0x64>
     d6e:	9b01      	ldr	r3, [sp, #4]
     d70:	3308      	adds	r3, #8
     d72:	b29b      	uxth	r3, r3
     d74:	9301      	str	r3, [sp, #4]
     d76:	3e01      	subs	r6, #1
            for (j = image_height_bytes; j > 0; j--) {
     d78:	9b02      	ldr	r3, [sp, #8]
     d7a:	429e      	cmp	r6, r3
     d7c:	d003      	beq.n	d86 <eink_ed037tc1_graphics_load_mono_image+0x9e>
{
     d7e:	9c01      	ldr	r4, [sp, #4]
     d80:	2500      	movs	r5, #0
                    bit_value = ((img_array[(i*image_height_bytes)+j-1] >> k) & 0x1);
     d82:	2701      	movs	r7, #1
     d84:	e7e7      	b.n	d56 <eink_ed037tc1_graphics_load_mono_image+0x6e>
     d86:	9b02      	ldr	r3, [sp, #8]
     d88:	9a03      	ldr	r2, [sp, #12]
     d8a:	4694      	mov	ip, r2
     d8c:	4463      	add	r3, ip
     d8e:	9302      	str	r3, [sp, #8]
     d90:	9b00      	ldr	r3, [sp, #0]
     d92:	3301      	adds	r3, #1
     d94:	b29b      	uxth	r3, r3
     d96:	9300      	str	r3, [sp, #0]
        for (i = 0; i < image_width_px; i++) {
     d98:	9a04      	ldr	r2, [sp, #16]
     d9a:	4293      	cmp	r3, r2
     d9c:	d00a      	beq.n	db4 <eink_ed037tc1_graphics_load_mono_image+0xcc>
            for (j = image_height_bytes; j > 0; j--) {
     d9e:	9b05      	ldr	r3, [sp, #20]
     da0:	2b00      	cmp	r3, #0
     da2:	d0f0      	beq.n	d86 <eink_ed037tc1_graphics_load_mono_image+0x9e>
     da4:	9b07      	ldr	r3, [sp, #28]
     da6:	9a02      	ldr	r2, [sp, #8]
     da8:	4694      	mov	ip, r2
     daa:	4463      	add	r3, ip
     dac:	001e      	movs	r6, r3
     dae:	9b06      	ldr	r3, [sp, #24]
     db0:	9301      	str	r3, [sp, #4]
     db2:	e7e4      	b.n	d7e <eink_ed037tc1_graphics_load_mono_image+0x96>
                m++;
            }
        }
    }
    return;
     db4:	b009      	add	sp, #36	; 0x24
     db6:	bc3c      	pop	{r2, r3, r4, r5}
     db8:	4690      	mov	r8, r2
     dba:	4699      	mov	r9, r3
     dbc:	46a2      	mov	sl, r4
     dbe:	46ab      	mov	fp, r5
     dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	00000595 	.word	0x00000595

00000dc8 <it8951_wait_for_hrdy>:
static inline void it8951_wait_for_hrdy(void)
{
#ifdef EINK_HOST_RDY
    while(!gpio_get_pin_level(EINK_HOST_RDY));
#endif
}
     dc8:	4770      	bx	lr
	...

00000dcc <eink_interface_init>:
 *
 * \note Initializes the display controller hardware interface, regardless
 * of driver IC, interface or display. Takes definitions from conf_eink.h.
 */
static void eink_interface_init(uint8_t f_init)
{
     dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dce:	46c6      	mov	lr, r8
     dd0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dd2:	22c0      	movs	r2, #192	; 0xc0
     dd4:	05d2      	lsls	r2, r2, #23
     dd6:	2788      	movs	r7, #136	; 0x88
     dd8:	2640      	movs	r6, #64	; 0x40
     dda:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ddc:	4b2a      	ldr	r3, [pc, #168]	; (e88 <eink_interface_init+0xbc>)
     dde:	20a8      	movs	r0, #168	; 0xa8
     de0:	4d2a      	ldr	r5, [pc, #168]	; (e8c <eink_interface_init+0xc0>)
     de2:	501d      	str	r5, [r3, r0]
     de4:	24c0      	movs	r4, #192	; 0xc0
     de6:	0624      	lsls	r4, r4, #24
     de8:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dea:	2101      	movs	r1, #1
     dec:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dee:	4f28      	ldr	r7, [pc, #160]	; (e90 <eink_interface_init+0xc4>)
     df0:	501f      	str	r7, [r3, r0]
     df2:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df4:	2720      	movs	r7, #32
     df6:	46b8      	mov	r8, r7
     df8:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dfa:	4f26      	ldr	r7, [pc, #152]	; (e94 <eink_interface_init+0xc8>)
     dfc:	629f      	str	r7, [r3, #40]	; 0x28
     dfe:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e00:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e02:	629d      	str	r5, [r3, #40]	; 0x28
     e04:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e06:	2510      	movs	r5, #16
     e08:	46ac      	mov	ip, r5
     e0a:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e0c:	4d22      	ldr	r5, [pc, #136]	; (e98 <eink_interface_init+0xcc>)
     e0e:	629d      	str	r5, [r3, #40]	; 0x28
     e10:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e12:	2580      	movs	r5, #128	; 0x80
     e14:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e16:	4f21      	ldr	r7, [pc, #132]	; (e9c <eink_interface_init+0xd0>)
     e18:	629f      	str	r7, [r3, #40]	; 0x28
     e1a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e1c:	2494      	movs	r4, #148	; 0x94
     e1e:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e20:	2798      	movs	r7, #152	; 0x98
     e22:	51d1      	str	r1, [r2, r7]
     e24:	4644      	mov	r4, r8
     e26:	6194      	str	r4, [r2, #24]
     e28:	6196      	str	r6, [r2, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2a:	4664      	mov	r4, ip
     e2c:	6154      	str	r4, [r2, #20]
     e2e:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e30:	3474      	adds	r4, #116	; 0x74
     e32:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	4e1a      	ldr	r6, [pc, #104]	; (ea0 <eink_interface_init+0xd4>)
     e36:	501e      	str	r6, [r3, r0]
     e38:	4e1a      	ldr	r6, [pc, #104]	; (ea4 <eink_interface_init+0xd8>)
     e3a:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e3c:	5115      	str	r5, [r2, r4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e3e:	301f      	adds	r0, #31
     e40:	5c1c      	ldrb	r4, [r3, r0]
     e42:	2604      	movs	r6, #4
     e44:	4334      	orrs	r4, r6
     e46:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e48:	51d5      	str	r5, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e4a:	24c6      	movs	r4, #198	; 0xc6
     e4c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e4e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e50:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e52:	3c06      	subs	r4, #6
     e54:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e56:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e58:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e5a:	3c7b      	subs	r4, #123	; 0x7b
     e5c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e60:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e62:	3401      	adds	r4, #1
     e64:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e66:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e68:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e6a:	3c02      	subs	r4, #2
     e6c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e70:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e72:	3403      	adds	r4, #3
     e74:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e76:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e78:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e7a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e7c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e7e:	541a      	strb	r2, [r3, r0]
#endif
    
#ifdef EINK_BUSY
    gpio_set_pin_function(EINK_BUSY, GPIO_PIN_FUNCTION_OFF);
#endif
}
     e80:	bc04      	pop	{r2}
     e82:	4690      	mov	r8, r2
     e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	41004400 	.word	0x41004400
     e8c:	40000040 	.word	0x40000040
     e90:	40000001 	.word	0x40000001
     e94:	40000020 	.word	0x40000020
     e98:	40000010 	.word	0x40000010
     e9c:	40000080 	.word	0x40000080
     ea0:	40020080 	.word	0x40020080
     ea4:	c0020000 	.word	0xc0020000

00000ea8 <eink_ed037tc1_set_pixel>:
{
     ea8:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < ssd1677_global_instance.display_width) && (y_set >= 0) && (y_set < ssd1677_global_instance.display_height) ) {
     eaa:	4b2e      	ldr	r3, [pc, #184]	; (f64 <eink_ed037tc1_set_pixel+0xbc>)
     eac:	889b      	ldrh	r3, [r3, #4]
     eae:	b29b      	uxth	r3, r3
     eb0:	4283      	cmp	r3, r0
     eb2:	d91c      	bls.n	eee <eink_ed037tc1_set_pixel+0x46>
     eb4:	4b2b      	ldr	r3, [pc, #172]	; (f64 <eink_ed037tc1_set_pixel+0xbc>)
     eb6:	88db      	ldrh	r3, [r3, #6]
     eb8:	b29b      	uxth	r3, r3
     eba:	428b      	cmp	r3, r1
     ebc:	d917      	bls.n	eee <eink_ed037tc1_set_pixel+0x46>
        if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
     ebe:	4b29      	ldr	r3, [pc, #164]	; (f64 <eink_ed037tc1_set_pixel+0xbc>)
     ec0:	781b      	ldrb	r3, [r3, #0]
     ec2:	2b01      	cmp	r3, #1
     ec4:	d014      	beq.n	ef0 <eink_ed037tc1_set_pixel+0x48>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
     ec6:	4b27      	ldr	r3, [pc, #156]	; (f64 <eink_ed037tc1_set_pixel+0xbc>)
     ec8:	781b      	ldrb	r3, [r3, #0]
     eca:	2b02      	cmp	r3, #2
     ecc:	d01b      	beq.n	f06 <eink_ed037tc1_set_pixel+0x5e>
        } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
     ece:	4b25      	ldr	r3, [pc, #148]	; (f64 <eink_ed037tc1_set_pixel+0xbc>)
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	2b03      	cmp	r3, #3
     ed4:	d025      	beq.n	f22 <eink_ed037tc1_set_pixel+0x7a>
            x1_set = (x_set - (x_set % 8)) / 8;
     ed6:	10c3      	asrs	r3, r0, #3
            byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * y_set);
     ed8:	008c      	lsls	r4, r1, #2
     eda:	1861      	adds	r1, r4, r1
     edc:	00cc      	lsls	r4, r1, #3
     ede:	1a61      	subs	r1, r4, r1
     ee0:	185b      	adds	r3, r3, r1
            bit_set = 7 - (x_set % 8);
     ee2:	2107      	movs	r1, #7
     ee4:	4381      	bics	r1, r0
        switch(pixel_colour) {
     ee6:	2a00      	cmp	r2, #0
     ee8:	d027      	beq.n	f3a <eink_ed037tc1_set_pixel+0x92>
     eea:	2a01      	cmp	r2, #1
     eec:	d030      	beq.n	f50 <eink_ed037tc1_set_pixel+0xa8>
}
     eee:	bd10      	pop	{r4, pc}
            y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - ((y_set - (y_set % 8)) / 8);
     ef0:	10cc      	asrs	r4, r1, #3
     ef2:	3321      	adds	r3, #33	; 0x21
     ef4:	1b1b      	subs	r3, r3, r4
            byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (x_set));
     ef6:	0084      	lsls	r4, r0, #2
     ef8:	1820      	adds	r0, r4, r0
     efa:	00c4      	lsls	r4, r0, #3
     efc:	1a20      	subs	r0, r4, r0
     efe:	181b      	adds	r3, r3, r0
            bit_set = y_set % 8;
     f00:	2007      	movs	r0, #7
     f02:	4001      	ands	r1, r0
     f04:	e7ef      	b.n	ee6 <eink_ed037tc1_set_pixel+0x3e>
            x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((x_set - (x_set % 8)) / 8);
     f06:	10c4      	asrs	r4, r0, #3
     f08:	2318      	movs	r3, #24
     f0a:	33ff      	adds	r3, #255	; 0xff
     f0c:	1b1b      	subs	r3, r3, r4
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (y_set * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
     f0e:	2423      	movs	r4, #35	; 0x23
     f10:	4264      	negs	r4, r4
     f12:	4361      	muls	r1, r4
     f14:	4c14      	ldr	r4, [pc, #80]	; (f68 <eink_ed037tc1_set_pixel+0xc0>)
     f16:	46a4      	mov	ip, r4
     f18:	4461      	add	r1, ip
     f1a:	185b      	adds	r3, r3, r1
            bit_set = x_set % 8;
     f1c:	2107      	movs	r1, #7
     f1e:	4001      	ands	r1, r0
     f20:	e7e1      	b.n	ee6 <eink_ed037tc1_set_pixel+0x3e>
            y1_set = (y_set - (y_set % 8)) / 8;
     f22:	10cc      	asrs	r4, r1, #3
            byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (x_set * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
     f24:	4b10      	ldr	r3, [pc, #64]	; (f68 <eink_ed037tc1_set_pixel+0xc0>)
     f26:	469c      	mov	ip, r3
     f28:	4464      	add	r4, ip
     f2a:	2323      	movs	r3, #35	; 0x23
     f2c:	425b      	negs	r3, r3
     f2e:	4343      	muls	r3, r0
     f30:	18e3      	adds	r3, r4, r3
            bit_set = 7 - (y_set % 8);
     f32:	2007      	movs	r0, #7
     f34:	4388      	bics	r0, r1
     f36:	0001      	movs	r1, r0
     f38:	e7d5      	b.n	ee6 <eink_ed037tc1_set_pixel+0x3e>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 0);
     f3a:	4a0c      	ldr	r2, [pc, #48]	; (f6c <eink_ed037tc1_set_pixel+0xc4>)
     f3c:	6812      	ldr	r2, [r2, #0]
     f3e:	6910      	ldr	r0, [r2, #16]
     f40:	18c3      	adds	r3, r0, r3
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
     f42:	2201      	movs	r2, #1
     f44:	408a      	lsls	r2, r1
     f46:	0011      	movs	r1, r2
     f48:	781a      	ldrb	r2, [r3, #0]
     f4a:	438a      	bics	r2, r1
     f4c:	701a      	strb	r2, [r3, #0]
     f4e:	e7ce      	b.n	eee <eink_ed037tc1_set_pixel+0x46>
                eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, 1);
     f50:	4a06      	ldr	r2, [pc, #24]	; (f6c <eink_ed037tc1_set_pixel+0xc4>)
     f52:	6812      	ldr	r2, [r2, #0]
     f54:	6910      	ldr	r0, [r2, #16]
     f56:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
     f58:	2201      	movs	r2, #1
     f5a:	408a      	lsls	r2, r1
     f5c:	7819      	ldrb	r1, [r3, #0]
     f5e:	430a      	orrs	r2, r1
     f60:	701a      	strb	r2, [r3, #0]
}
     f62:	e7c4      	b.n	eee <eink_ed037tc1_set_pixel+0x46>
     f64:	20000414 	.word	0x20000414
     f68:	0000417d 	.word	0x0000417d
     f6c:	20000430 	.word	0x20000430

00000f70 <eink_ed028tc1_set_pixel_raw>:
{    
     f70:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8177_global_instance.display_width) && (y_set >= 0) && (y_set < uc8177_global_instance.display_height) ) {
     f72:	4b4e      	ldr	r3, [pc, #312]	; (10ac <eink_ed028tc1_set_pixel_raw+0x13c>)
     f74:	885b      	ldrh	r3, [r3, #2]
     f76:	b29b      	uxth	r3, r3
     f78:	4283      	cmp	r3, r0
     f7a:	d944      	bls.n	1006 <eink_ed028tc1_set_pixel_raw+0x96>
     f7c:	4b4b      	ldr	r3, [pc, #300]	; (10ac <eink_ed028tc1_set_pixel_raw+0x13c>)
     f7e:	889c      	ldrh	r4, [r3, #4]
     f80:	b2a4      	uxth	r4, r4
     f82:	428c      	cmp	r4, r1
     f84:	d93f      	bls.n	1006 <eink_ed028tc1_set_pixel_raw+0x96>
        if ( (uc8177_global_instance.display_config.display_rotation == ROTATE_0) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180) ) {
     f86:	781b      	ldrb	r3, [r3, #0]
     f88:	2b00      	cmp	r3, #0
     f8a:	d00b      	beq.n	fa4 <eink_ed028tc1_set_pixel_raw+0x34>
     f8c:	4b47      	ldr	r3, [pc, #284]	; (10ac <eink_ed028tc1_set_pixel_raw+0x13c>)
     f8e:	781b      	ldrb	r3, [r3, #0]
     f90:	2b02      	cmp	r3, #2
     f92:	d007      	beq.n	fa4 <eink_ed028tc1_set_pixel_raw+0x34>
            byte_set = x1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * y_set);
     f94:	1044      	asrs	r4, r0, #1
     f96:	2396      	movs	r3, #150	; 0x96
     f98:	005b      	lsls	r3, r3, #1
     f9a:	434b      	muls	r3, r1
     f9c:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
     f9e:	2101      	movs	r1, #1
     fa0:	4001      	ands	r1, r0
     fa2:	e006      	b.n	fb2 <eink_ed028tc1_set_pixel_raw+0x42>
           byte_set = y1_set + ((GFX_ED028TC1_MAX_WIDTH / 2) * x_set);
     fa4:	104c      	asrs	r4, r1, #1
     fa6:	2396      	movs	r3, #150	; 0x96
     fa8:	005b      	lsls	r3, r3, #1
     faa:	4343      	muls	r3, r0
     fac:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
     fae:	2001      	movs	r0, #1
     fb0:	4001      	ands	r1, r0
        if (odd_even_bit) {
     fb2:	2900      	cmp	r1, #0
     fb4:	d128      	bne.n	1008 <eink_ed028tc1_set_pixel_raw+0x98>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_set >> 3) & 0x1));
     fb6:	493e      	ldr	r1, [pc, #248]	; (10b0 <eink_ed028tc1_set_pixel_raw+0x140>)
     fb8:	6809      	ldr	r1, [r1, #0]
     fba:	6909      	ldr	r1, [r1, #16]
     fbc:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fbe:	0710      	lsls	r0, r2, #28
     fc0:	d45f      	bmi.n	1082 <eink_ed028tc1_set_pixel_raw+0x112>
        *byte &= ~(1 << bit_number);
     fc2:	780c      	ldrb	r4, [r1, #0]
     fc4:	207f      	movs	r0, #127	; 0x7f
     fc6:	4020      	ands	r0, r4
     fc8:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_set >> 2) & 0x1));
     fca:	4939      	ldr	r1, [pc, #228]	; (10b0 <eink_ed028tc1_set_pixel_raw+0x140>)
     fcc:	6809      	ldr	r1, [r1, #0]
     fce:	6909      	ldr	r1, [r1, #16]
     fd0:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fd2:	0750      	lsls	r0, r2, #29
     fd4:	d45b      	bmi.n	108e <eink_ed028tc1_set_pixel_raw+0x11e>
        *byte &= ~(1 << bit_number);
     fd6:	7808      	ldrb	r0, [r1, #0]
     fd8:	2440      	movs	r4, #64	; 0x40
     fda:	43a0      	bics	r0, r4
     fdc:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_set >> 1) & 0x1));
     fde:	4934      	ldr	r1, [pc, #208]	; (10b0 <eink_ed028tc1_set_pixel_raw+0x140>)
     fe0:	6809      	ldr	r1, [r1, #0]
     fe2:	6909      	ldr	r1, [r1, #16]
     fe4:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
     fe6:	0790      	lsls	r0, r2, #30
     fe8:	d456      	bmi.n	1098 <eink_ed028tc1_set_pixel_raw+0x128>
        *byte &= ~(1 << bit_number);
     fea:	7808      	ldrb	r0, [r1, #0]
     fec:	2420      	movs	r4, #32
     fee:	43a0      	bics	r0, r4
     ff0:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_set & 0x1));
     ff2:	492f      	ldr	r1, [pc, #188]	; (10b0 <eink_ed028tc1_set_pixel_raw+0x140>)
     ff4:	6809      	ldr	r1, [r1, #0]
     ff6:	6909      	ldr	r1, [r1, #16]
     ff8:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
     ffa:	07d2      	lsls	r2, r2, #31
     ffc:	d451      	bmi.n	10a2 <eink_ed028tc1_set_pixel_raw+0x132>
        *byte &= ~(1 << bit_number);
     ffe:	781a      	ldrb	r2, [r3, #0]
    1000:	2110      	movs	r1, #16
    1002:	438a      	bics	r2, r1
    1004:	701a      	strb	r2, [r3, #0]
}
    1006:	bd10      	pop	{r4, pc}
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_set >> 3) & 0x1));
    1008:	4929      	ldr	r1, [pc, #164]	; (10b0 <eink_ed028tc1_set_pixel_raw+0x140>)
    100a:	6809      	ldr	r1, [r1, #0]
    100c:	6909      	ldr	r1, [r1, #16]
    100e:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1010:	0710      	lsls	r0, r2, #28
    1012:	d422      	bmi.n	105a <eink_ed028tc1_set_pixel_raw+0xea>
        *byte &= ~(1 << bit_number);
    1014:	7808      	ldrb	r0, [r1, #0]
    1016:	2408      	movs	r4, #8
    1018:	43a0      	bics	r0, r4
    101a:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_set >> 2) & 0x1));
    101c:	4924      	ldr	r1, [pc, #144]	; (10b0 <eink_ed028tc1_set_pixel_raw+0x140>)
    101e:	6809      	ldr	r1, [r1, #0]
    1020:	6909      	ldr	r1, [r1, #16]
    1022:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1024:	0750      	lsls	r0, r2, #29
    1026:	d41d      	bmi.n	1064 <eink_ed028tc1_set_pixel_raw+0xf4>
        *byte &= ~(1 << bit_number);
    1028:	7808      	ldrb	r0, [r1, #0]
    102a:	2404      	movs	r4, #4
    102c:	43a0      	bics	r0, r4
    102e:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_set >> 1) & 0x1));
    1030:	491f      	ldr	r1, [pc, #124]	; (10b0 <eink_ed028tc1_set_pixel_raw+0x140>)
    1032:	6809      	ldr	r1, [r1, #0]
    1034:	6909      	ldr	r1, [r1, #16]
    1036:	18c9      	adds	r1, r1, r3
    if (bit_value == 1) {
    1038:	0790      	lsls	r0, r2, #30
    103a:	d418      	bmi.n	106e <eink_ed028tc1_set_pixel_raw+0xfe>
        *byte &= ~(1 << bit_number);
    103c:	7808      	ldrb	r0, [r1, #0]
    103e:	2402      	movs	r4, #2
    1040:	43a0      	bics	r0, r4
    1042:	7008      	strb	r0, [r1, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_set & 0x1));
    1044:	491a      	ldr	r1, [pc, #104]	; (10b0 <eink_ed028tc1_set_pixel_raw+0x140>)
    1046:	6809      	ldr	r1, [r1, #0]
    1048:	6909      	ldr	r1, [r1, #16]
    104a:	18cb      	adds	r3, r1, r3
    if (bit_value == 1) {
    104c:	07d2      	lsls	r2, r2, #31
    104e:	d413      	bmi.n	1078 <eink_ed028tc1_set_pixel_raw+0x108>
        *byte &= ~(1 << bit_number);
    1050:	781a      	ldrb	r2, [r3, #0]
    1052:	2101      	movs	r1, #1
    1054:	438a      	bics	r2, r1
    1056:	701a      	strb	r2, [r3, #0]
    1058:	e7d5      	b.n	1006 <eink_ed028tc1_set_pixel_raw+0x96>
        *byte |= 1 << bit_number;
    105a:	7808      	ldrb	r0, [r1, #0]
    105c:	2408      	movs	r4, #8
    105e:	4320      	orrs	r0, r4
    1060:	7008      	strb	r0, [r1, #0]
    1062:	e7db      	b.n	101c <eink_ed028tc1_set_pixel_raw+0xac>
    1064:	7808      	ldrb	r0, [r1, #0]
    1066:	2404      	movs	r4, #4
    1068:	4320      	orrs	r0, r4
    106a:	7008      	strb	r0, [r1, #0]
    106c:	e7e0      	b.n	1030 <eink_ed028tc1_set_pixel_raw+0xc0>
    106e:	7808      	ldrb	r0, [r1, #0]
    1070:	2402      	movs	r4, #2
    1072:	4320      	orrs	r0, r4
    1074:	7008      	strb	r0, [r1, #0]
    1076:	e7e5      	b.n	1044 <eink_ed028tc1_set_pixel_raw+0xd4>
    1078:	781a      	ldrb	r2, [r3, #0]
    107a:	2101      	movs	r1, #1
    107c:	430a      	orrs	r2, r1
    107e:	701a      	strb	r2, [r3, #0]
    1080:	e7c1      	b.n	1006 <eink_ed028tc1_set_pixel_raw+0x96>
    1082:	780c      	ldrb	r4, [r1, #0]
    1084:	2080      	movs	r0, #128	; 0x80
    1086:	4240      	negs	r0, r0
    1088:	4320      	orrs	r0, r4
    108a:	7008      	strb	r0, [r1, #0]
    108c:	e79d      	b.n	fca <eink_ed028tc1_set_pixel_raw+0x5a>
    108e:	7808      	ldrb	r0, [r1, #0]
    1090:	2440      	movs	r4, #64	; 0x40
    1092:	4320      	orrs	r0, r4
    1094:	7008      	strb	r0, [r1, #0]
    1096:	e7a2      	b.n	fde <eink_ed028tc1_set_pixel_raw+0x6e>
    1098:	7808      	ldrb	r0, [r1, #0]
    109a:	2420      	movs	r4, #32
    109c:	4320      	orrs	r0, r4
    109e:	7008      	strb	r0, [r1, #0]
    10a0:	e7a7      	b.n	ff2 <eink_ed028tc1_set_pixel_raw+0x82>
    10a2:	781a      	ldrb	r2, [r3, #0]
    10a4:	2110      	movs	r1, #16
    10a6:	430a      	orrs	r2, r1
    10a8:	701a      	strb	r2, [r3, #0]
    10aa:	e7ac      	b.n	1006 <eink_ed028tc1_set_pixel_raw+0x96>
    10ac:	200003b0 	.word	0x200003b0
    10b0:	20000430 	.word	0x20000430

000010b4 <eink_ed028tc1_set_pixel>:
{    
    10b4:	b510      	push	{r4, lr}
    switch(pixel_colour) {
    10b6:	2a00      	cmp	r2, #0
    10b8:	d003      	beq.n	10c2 <eink_ed028tc1_set_pixel+0xe>
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0xF);
    10ba:	220f      	movs	r2, #15
    10bc:	4b02      	ldr	r3, [pc, #8]	; (10c8 <eink_ed028tc1_set_pixel+0x14>)
    10be:	4798      	blx	r3
}
    10c0:	bd10      	pop	{r4, pc}
            eink_ed028tc1_set_pixel_raw(x_set, y_set, 0x0);
    10c2:	4b01      	ldr	r3, [pc, #4]	; (10c8 <eink_ed028tc1_set_pixel+0x14>)
    10c4:	4798      	blx	r3
            break;
    10c6:	e7fb      	b.n	10c0 <eink_ed028tc1_set_pixel+0xc>
    10c8:	00000f71 	.word	0x00000f71

000010cc <eink_ed028tc1_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_ed028tc1_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    10cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ce:	46de      	mov	lr, fp
    10d0:	4657      	mov	r7, sl
    10d2:	464e      	mov	r6, r9
    10d4:	4645      	mov	r5, r8
    10d6:	b5e0      	push	{r5, r6, r7, lr}
    10d8:	b087      	sub	sp, #28
    10da:	9002      	str	r0, [sp, #8]
    10dc:	4693      	mov	fp, r2
    10de:	0019      	movs	r1, r3
    10e0:	9303      	str	r3, [sp, #12]
    10e2:	ab10      	add	r3, sp, #64	; 0x40
    10e4:	881a      	ldrh	r2, [r3, #0]
    10e6:	4690      	mov	r8, r2
    10e8:	ab11      	add	r3, sp, #68	; 0x44
    10ea:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value_1, bit_value_2;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    10ec:	465a      	mov	r2, fp
    10ee:	2a00      	cmp	r2, #0
    10f0:	d034      	beq.n	115c <eink_ed028tc1_graphics_load_4bgrey_image+0x90>
    10f2:	2200      	movs	r2, #0
    10f4:	4692      	mov	sl, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
    10f6:	000a      	movs	r2, r1
    10f8:	3a01      	subs	r2, #1
    10fa:	b292      	uxth	r2, r2
    10fc:	4691      	mov	r9, r2
            /* Process each pixel in byte  */
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    10fe:	9304      	str	r3, [sp, #16]
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
            /* Set the pixel in the display buffer */
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    1100:	4f1a      	ldr	r7, [pc, #104]	; (116c <eink_ed028tc1_graphics_load_4bgrey_image+0xa0>)
    1102:	4643      	mov	r3, r8
    1104:	9305      	str	r3, [sp, #20]
        for (j = (image_height_bytes-1); j > 0; j--) {
    1106:	464b      	mov	r3, r9
    1108:	464d      	mov	r5, r9
    110a:	2b00      	cmp	r3, #0
    110c:	d020      	beq.n	1150 <eink_ed028tc1_graphics_load_4bgrey_image+0x84>
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    110e:	9e04      	ldr	r6, [sp, #16]
    1110:	9b03      	ldr	r3, [sp, #12]
    1112:	4652      	mov	r2, sl
    1114:	4353      	muls	r3, r2
    1116:	9a02      	ldr	r2, [sp, #8]
    1118:	4690      	mov	r8, r2
    111a:	4498      	add	r8, r3
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    111c:	9b05      	ldr	r3, [sp, #20]
    111e:	4453      	add	r3, sl
    1120:	b29b      	uxth	r3, r3
    1122:	9301      	str	r3, [sp, #4]
            bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    1124:	4643      	mov	r3, r8
    1126:	5d5c      	ldrb	r4, [r3, r5]
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m), (~bit_value_1));
    1128:	220f      	movs	r2, #15
    112a:	4022      	ands	r2, r4
    112c:	43d2      	mvns	r2, r2
    112e:	b2d2      	uxtb	r2, r2
    1130:	0031      	movs	r1, r6
    1132:	9801      	ldr	r0, [sp, #4]
    1134:	47b8      	blx	r7
            bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    1136:	0924      	lsrs	r4, r4, #4
            eink_ed028tc1_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value_2));
    1138:	43e2      	mvns	r2, r4
    113a:	b2d2      	uxtb	r2, r2
    113c:	1c71      	adds	r1, r6, #1
    113e:	b289      	uxth	r1, r1
    1140:	9801      	ldr	r0, [sp, #4]
    1142:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    1144:	3d01      	subs	r5, #1
    1146:	b2ad      	uxth	r5, r5
    1148:	3602      	adds	r6, #2
    114a:	b2b6      	uxth	r6, r6
    114c:	2d00      	cmp	r5, #0
    114e:	d1e9      	bne.n	1124 <eink_ed028tc1_graphics_load_4bgrey_image+0x58>
    for (i = 0; i < image_width_px; i++) {
    1150:	4653      	mov	r3, sl
    1152:	3301      	adds	r3, #1
    1154:	b29b      	uxth	r3, r3
    1156:	469a      	mov	sl, r3
    1158:	459b      	cmp	fp, r3
    115a:	d8d4      	bhi.n	1106 <eink_ed028tc1_graphics_load_4bgrey_image+0x3a>
            m += 2;
        }
    }
    return;
    115c:	b007      	add	sp, #28
    115e:	bc3c      	pop	{r2, r3, r4, r5}
    1160:	4690      	mov	r8, r2
    1162:	4699      	mov	r9, r3
    1164:	46a2      	mov	sl, r4
    1166:	46ab      	mov	fp, r5
    1168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	00000f71 	.word	0x00000f71

00001170 <eink_ed057tc2_set_pixel>:
{
    1170:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1172:	4b36      	ldr	r3, [pc, #216]	; (124c <eink_ed057tc2_set_pixel+0xdc>)
    1174:	889b      	ldrh	r3, [r3, #4]
    1176:	b29b      	uxth	r3, r3
    1178:	4283      	cmp	r3, r0
    117a:	d919      	bls.n	11b0 <eink_ed057tc2_set_pixel+0x40>
    117c:	4b33      	ldr	r3, [pc, #204]	; (124c <eink_ed057tc2_set_pixel+0xdc>)
    117e:	88db      	ldrh	r3, [r3, #6]
    1180:	b29b      	uxth	r3, r3
    1182:	428b      	cmp	r3, r1
    1184:	d914      	bls.n	11b0 <eink_ed057tc2_set_pixel+0x40>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    1186:	4b31      	ldr	r3, [pc, #196]	; (124c <eink_ed057tc2_set_pixel+0xdc>)
    1188:	785b      	ldrb	r3, [r3, #1]
    118a:	2b01      	cmp	r3, #1
    118c:	d011      	beq.n	11b2 <eink_ed057tc2_set_pixel+0x42>
    118e:	4b2f      	ldr	r3, [pc, #188]	; (124c <eink_ed057tc2_set_pixel+0xdc>)
    1190:	785b      	ldrb	r3, [r3, #1]
    1192:	2b03      	cmp	r3, #3
    1194:	d00d      	beq.n	11b2 <eink_ed057tc2_set_pixel+0x42>
            byte_set = x1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * y_set);
    1196:	1044      	asrs	r4, r0, #1
    1198:	2396      	movs	r3, #150	; 0x96
    119a:	005b      	lsls	r3, r3, #1
    119c:	434b      	muls	r3, r1
    119e:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    11a0:	2101      	movs	r1, #1
    11a2:	4008      	ands	r0, r1
        if (odd_even_bit) {
    11a4:	2800      	cmp	r0, #0
    11a6:	d02c      	beq.n	1202 <eink_ed057tc2_set_pixel+0x92>
            switch(pixel_colour) {
    11a8:	2a00      	cmp	r2, #0
    11aa:	d00a      	beq.n	11c2 <eink_ed057tc2_set_pixel+0x52>
    11ac:	2a01      	cmp	r2, #1
    11ae:	d018      	beq.n	11e2 <eink_ed057tc2_set_pixel+0x72>
}
    11b0:	bd10      	pop	{r4, pc}
           byte_set = y1_set + ((GFX_ED057TC2_MAX_WIDTH / 2) * x_set);
    11b2:	104c      	asrs	r4, r1, #1
    11b4:	2396      	movs	r3, #150	; 0x96
    11b6:	005b      	lsls	r3, r3, #1
    11b8:	4343      	muls	r3, r0
    11ba:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    11bc:	2001      	movs	r0, #1
    11be:	4008      	ands	r0, r1
    11c0:	e7f0      	b.n	11a4 <eink_ed057tc2_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    11c2:	4823      	ldr	r0, [pc, #140]	; (1250 <eink_ed057tc2_set_pixel+0xe0>)
    11c4:	6802      	ldr	r2, [r0, #0]
    11c6:	6912      	ldr	r2, [r2, #16]
    11c8:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    11ca:	7811      	ldrb	r1, [r2, #0]
    11cc:	2402      	movs	r4, #2
    11ce:	43a1      	bics	r1, r4
    11d0:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    11d2:	6802      	ldr	r2, [r0, #0]
    11d4:	6911      	ldr	r1, [r2, #16]
    11d6:	18cb      	adds	r3, r1, r3
    11d8:	781a      	ldrb	r2, [r3, #0]
    11da:	2101      	movs	r1, #1
    11dc:	438a      	bics	r2, r1
    11de:	701a      	strb	r2, [r3, #0]
    11e0:	e7e6      	b.n	11b0 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    11e2:	481b      	ldr	r0, [pc, #108]	; (1250 <eink_ed057tc2_set_pixel+0xe0>)
    11e4:	6802      	ldr	r2, [r0, #0]
    11e6:	6912      	ldr	r2, [r2, #16]
    11e8:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    11ea:	7811      	ldrb	r1, [r2, #0]
    11ec:	2402      	movs	r4, #2
    11ee:	4321      	orrs	r1, r4
    11f0:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    11f2:	6802      	ldr	r2, [r0, #0]
    11f4:	6911      	ldr	r1, [r2, #16]
    11f6:	18cb      	adds	r3, r1, r3
    11f8:	781a      	ldrb	r2, [r3, #0]
    11fa:	2101      	movs	r1, #1
    11fc:	430a      	orrs	r2, r1
    11fe:	701a      	strb	r2, [r3, #0]
    1200:	e7d6      	b.n	11b0 <eink_ed057tc2_set_pixel+0x40>
            switch(pixel_colour) {
    1202:	2a00      	cmp	r2, #0
    1204:	d011      	beq.n	122a <eink_ed057tc2_set_pixel+0xba>
    1206:	2a01      	cmp	r2, #1
    1208:	d1d2      	bne.n	11b0 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    120a:	4811      	ldr	r0, [pc, #68]	; (1250 <eink_ed057tc2_set_pixel+0xe0>)
    120c:	6802      	ldr	r2, [r0, #0]
    120e:	6912      	ldr	r2, [r2, #16]
    1210:	18d2      	adds	r2, r2, r3
    1212:	7811      	ldrb	r1, [r2, #0]
    1214:	2420      	movs	r4, #32
    1216:	4321      	orrs	r1, r4
    1218:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    121a:	6802      	ldr	r2, [r0, #0]
    121c:	6911      	ldr	r1, [r2, #16]
    121e:	18cb      	adds	r3, r1, r3
    1220:	781a      	ldrb	r2, [r3, #0]
    1222:	2110      	movs	r1, #16
    1224:	430a      	orrs	r2, r1
    1226:	701a      	strb	r2, [r3, #0]
}
    1228:	e7c2      	b.n	11b0 <eink_ed057tc2_set_pixel+0x40>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    122a:	4809      	ldr	r0, [pc, #36]	; (1250 <eink_ed057tc2_set_pixel+0xe0>)
    122c:	6802      	ldr	r2, [r0, #0]
    122e:	6912      	ldr	r2, [r2, #16]
    1230:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1232:	7811      	ldrb	r1, [r2, #0]
    1234:	2420      	movs	r4, #32
    1236:	43a1      	bics	r1, r4
    1238:	7011      	strb	r1, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    123a:	6802      	ldr	r2, [r0, #0]
    123c:	6911      	ldr	r1, [r2, #16]
    123e:	18cb      	adds	r3, r1, r3
    1240:	781a      	ldrb	r2, [r3, #0]
    1242:	2110      	movs	r1, #16
    1244:	438a      	bics	r2, r1
    1246:	701a      	strb	r2, [r3, #0]
    1248:	e7b2      	b.n	11b0 <eink_ed057tc2_set_pixel+0x40>
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	20000408 	.word	0x20000408
    1250:	20000430 	.word	0x20000430

00001254 <eink_ac057tc1_set_pixel>:
{
    1254:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    1256:	4bd0      	ldr	r3, [pc, #832]	; (1598 <eink_ac057tc1_set_pixel+0x344>)
    1258:	889b      	ldrh	r3, [r3, #4]
    125a:	b29b      	uxth	r3, r3
    125c:	4283      	cmp	r3, r0
    125e:	d93a      	bls.n	12d6 <eink_ac057tc1_set_pixel+0x82>
    1260:	4bcd      	ldr	r3, [pc, #820]	; (1598 <eink_ac057tc1_set_pixel+0x344>)
    1262:	88db      	ldrh	r3, [r3, #6]
    1264:	b29b      	uxth	r3, r3
    1266:	428b      	cmp	r3, r1
    1268:	d935      	bls.n	12d6 <eink_ac057tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    126a:	4bcb      	ldr	r3, [pc, #812]	; (1598 <eink_ac057tc1_set_pixel+0x344>)
    126c:	785b      	ldrb	r3, [r3, #1]
    126e:	2b01      	cmp	r3, #1
    1270:	d013      	beq.n	129a <eink_ac057tc1_set_pixel+0x46>
    1272:	4bc9      	ldr	r3, [pc, #804]	; (1598 <eink_ac057tc1_set_pixel+0x344>)
    1274:	785b      	ldrb	r3, [r3, #1]
    1276:	2b03      	cmp	r3, #3
    1278:	d00f      	beq.n	129a <eink_ac057tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * y_set);
    127a:	1044      	asrs	r4, r0, #1
    127c:	2396      	movs	r3, #150	; 0x96
    127e:	005b      	lsls	r3, r3, #1
    1280:	434b      	muls	r3, r1
    1282:	18e3      	adds	r3, r4, r3
            odd_even_bit = x_set % 2;
    1284:	2101      	movs	r1, #1
    1286:	4008      	ands	r0, r1
        if (odd_even_bit) {
    1288:	2800      	cmp	r0, #0
    128a:	d100      	bne.n	128e <eink_ac057tc1_set_pixel+0x3a>
    128c:	e0c5      	b.n	141a <eink_ac057tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    128e:	2a07      	cmp	r2, #7
    1290:	d821      	bhi.n	12d6 <eink_ac057tc1_set_pixel+0x82>
    1292:	0092      	lsls	r2, r2, #2
    1294:	49c1      	ldr	r1, [pc, #772]	; (159c <eink_ac057tc1_set_pixel+0x348>)
    1296:	588a      	ldr	r2, [r1, r2]
    1298:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC057TC1_MAX_WIDTH / 2) * x_set);
    129a:	104c      	asrs	r4, r1, #1
    129c:	2396      	movs	r3, #150	; 0x96
    129e:	005b      	lsls	r3, r3, #1
    12a0:	4343      	muls	r3, r0
    12a2:	18e3      	adds	r3, r4, r3
           odd_even_bit = y_set % 2;
    12a4:	2001      	movs	r0, #1
    12a6:	4008      	ands	r0, r1
    12a8:	e7ee      	b.n	1288 <eink_ac057tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    12aa:	49bd      	ldr	r1, [pc, #756]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    12ac:	680a      	ldr	r2, [r1, #0]
    12ae:	6912      	ldr	r2, [r2, #16]
    12b0:	18d2      	adds	r2, r2, r3
    12b2:	7810      	ldrb	r0, [r2, #0]
    12b4:	2404      	movs	r4, #4
    12b6:	43a0      	bics	r0, r4
    12b8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    12ba:	680a      	ldr	r2, [r1, #0]
    12bc:	6912      	ldr	r2, [r2, #16]
    12be:	18d2      	adds	r2, r2, r3
    12c0:	7810      	ldrb	r0, [r2, #0]
    12c2:	3c02      	subs	r4, #2
    12c4:	43a0      	bics	r0, r4
    12c6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    12c8:	680a      	ldr	r2, [r1, #0]
    12ca:	6911      	ldr	r1, [r2, #16]
    12cc:	18cb      	adds	r3, r1, r3
    12ce:	781a      	ldrb	r2, [r3, #0]
    12d0:	2101      	movs	r1, #1
    12d2:	438a      	bics	r2, r1
    12d4:	701a      	strb	r2, [r3, #0]
}
    12d6:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    12d8:	49b1      	ldr	r1, [pc, #708]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    12da:	680a      	ldr	r2, [r1, #0]
    12dc:	6912      	ldr	r2, [r2, #16]
    12de:	18d2      	adds	r2, r2, r3
    12e0:	7810      	ldrb	r0, [r2, #0]
    12e2:	2404      	movs	r4, #4
    12e4:	43a0      	bics	r0, r4
    12e6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    12e8:	680a      	ldr	r2, [r1, #0]
    12ea:	6912      	ldr	r2, [r2, #16]
    12ec:	18d2      	adds	r2, r2, r3
    12ee:	7810      	ldrb	r0, [r2, #0]
    12f0:	3c02      	subs	r4, #2
    12f2:	43a0      	bics	r0, r4
    12f4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    12f6:	680a      	ldr	r2, [r1, #0]
    12f8:	6911      	ldr	r1, [r2, #16]
    12fa:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    12fc:	781a      	ldrb	r2, [r3, #0]
    12fe:	2101      	movs	r1, #1
    1300:	430a      	orrs	r2, r1
    1302:	701a      	strb	r2, [r3, #0]
    1304:	e7e7      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1306:	49a6      	ldr	r1, [pc, #664]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    1308:	680a      	ldr	r2, [r1, #0]
    130a:	6912      	ldr	r2, [r2, #16]
    130c:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    130e:	7810      	ldrb	r0, [r2, #0]
    1310:	2404      	movs	r4, #4
    1312:	43a0      	bics	r0, r4
    1314:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1316:	680a      	ldr	r2, [r1, #0]
    1318:	6912      	ldr	r2, [r2, #16]
    131a:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    131c:	7810      	ldrb	r0, [r2, #0]
    131e:	2402      	movs	r4, #2
    1320:	4320      	orrs	r0, r4
    1322:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1324:	680a      	ldr	r2, [r1, #0]
    1326:	6911      	ldr	r1, [r2, #16]
    1328:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    132a:	781a      	ldrb	r2, [r3, #0]
    132c:	2101      	movs	r1, #1
    132e:	438a      	bics	r2, r1
    1330:	701a      	strb	r2, [r3, #0]
    1332:	e7d0      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1334:	499a      	ldr	r1, [pc, #616]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    1336:	680a      	ldr	r2, [r1, #0]
    1338:	6912      	ldr	r2, [r2, #16]
    133a:	18d2      	adds	r2, r2, r3
    133c:	7810      	ldrb	r0, [r2, #0]
    133e:	2404      	movs	r4, #4
    1340:	43a0      	bics	r0, r4
    1342:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1344:	680a      	ldr	r2, [r1, #0]
    1346:	6912      	ldr	r2, [r2, #16]
    1348:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    134a:	7810      	ldrb	r0, [r2, #0]
    134c:	2402      	movs	r4, #2
    134e:	4320      	orrs	r0, r4
    1350:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1352:	680a      	ldr	r2, [r1, #0]
    1354:	6911      	ldr	r1, [r2, #16]
    1356:	18cb      	adds	r3, r1, r3
    1358:	781a      	ldrb	r2, [r3, #0]
    135a:	2101      	movs	r1, #1
    135c:	430a      	orrs	r2, r1
    135e:	701a      	strb	r2, [r3, #0]
    1360:	e7b9      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1362:	498f      	ldr	r1, [pc, #572]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    1364:	680a      	ldr	r2, [r1, #0]
    1366:	6912      	ldr	r2, [r2, #16]
    1368:	18d2      	adds	r2, r2, r3
    136a:	7810      	ldrb	r0, [r2, #0]
    136c:	2404      	movs	r4, #4
    136e:	4320      	orrs	r0, r4
    1370:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    1372:	680a      	ldr	r2, [r1, #0]
    1374:	6912      	ldr	r2, [r2, #16]
    1376:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1378:	7810      	ldrb	r0, [r2, #0]
    137a:	2402      	movs	r4, #2
    137c:	43a0      	bics	r0, r4
    137e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1380:	680a      	ldr	r2, [r1, #0]
    1382:	6911      	ldr	r1, [r2, #16]
    1384:	18cb      	adds	r3, r1, r3
    1386:	781a      	ldrb	r2, [r3, #0]
    1388:	2101      	movs	r1, #1
    138a:	438a      	bics	r2, r1
    138c:	701a      	strb	r2, [r3, #0]
    138e:	e7a2      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1390:	4983      	ldr	r1, [pc, #524]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    1392:	680a      	ldr	r2, [r1, #0]
    1394:	6912      	ldr	r2, [r2, #16]
    1396:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1398:	7810      	ldrb	r0, [r2, #0]
    139a:	2404      	movs	r4, #4
    139c:	4320      	orrs	r0, r4
    139e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    13a0:	680a      	ldr	r2, [r1, #0]
    13a2:	6912      	ldr	r2, [r2, #16]
    13a4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    13a6:	7810      	ldrb	r0, [r2, #0]
    13a8:	2402      	movs	r4, #2
    13aa:	43a0      	bics	r0, r4
    13ac:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    13ae:	680a      	ldr	r2, [r1, #0]
    13b0:	6911      	ldr	r1, [r2, #16]
    13b2:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    13b4:	781a      	ldrb	r2, [r3, #0]
    13b6:	2101      	movs	r1, #1
    13b8:	430a      	orrs	r2, r1
    13ba:	701a      	strb	r2, [r3, #0]
    13bc:	e78b      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    13be:	4978      	ldr	r1, [pc, #480]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    13c0:	680a      	ldr	r2, [r1, #0]
    13c2:	6912      	ldr	r2, [r2, #16]
    13c4:	18d2      	adds	r2, r2, r3
    13c6:	7810      	ldrb	r0, [r2, #0]
    13c8:	2404      	movs	r4, #4
    13ca:	4320      	orrs	r0, r4
    13cc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    13ce:	680a      	ldr	r2, [r1, #0]
    13d0:	6912      	ldr	r2, [r2, #16]
    13d2:	18d2      	adds	r2, r2, r3
    13d4:	7810      	ldrb	r0, [r2, #0]
    13d6:	2402      	movs	r4, #2
    13d8:	4320      	orrs	r0, r4
    13da:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    13dc:	680a      	ldr	r2, [r1, #0]
    13de:	6911      	ldr	r1, [r2, #16]
    13e0:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    13e2:	781a      	ldrb	r2, [r3, #0]
    13e4:	2101      	movs	r1, #1
    13e6:	438a      	bics	r2, r1
    13e8:	701a      	strb	r2, [r3, #0]
    13ea:	e774      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    13ec:	496c      	ldr	r1, [pc, #432]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    13ee:	680a      	ldr	r2, [r1, #0]
    13f0:	6912      	ldr	r2, [r2, #16]
    13f2:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    13f4:	7810      	ldrb	r0, [r2, #0]
    13f6:	2404      	movs	r4, #4
    13f8:	4320      	orrs	r0, r4
    13fa:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    13fc:	680a      	ldr	r2, [r1, #0]
    13fe:	6912      	ldr	r2, [r2, #16]
    1400:	18d2      	adds	r2, r2, r3
    1402:	7810      	ldrb	r0, [r2, #0]
    1404:	2402      	movs	r4, #2
    1406:	4320      	orrs	r0, r4
    1408:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    140a:	680a      	ldr	r2, [r1, #0]
    140c:	6911      	ldr	r1, [r2, #16]
    140e:	18cb      	adds	r3, r1, r3
    1410:	781a      	ldrb	r2, [r3, #0]
    1412:	2101      	movs	r1, #1
    1414:	430a      	orrs	r2, r1
    1416:	701a      	strb	r2, [r3, #0]
    1418:	e75d      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
            switch(pixel_colour) {
    141a:	2a07      	cmp	r2, #7
    141c:	d900      	bls.n	1420 <eink_ac057tc1_set_pixel+0x1cc>
    141e:	e75a      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
    1420:	0092      	lsls	r2, r2, #2
    1422:	4960      	ldr	r1, [pc, #384]	; (15a4 <eink_ac057tc1_set_pixel+0x350>)
    1424:	588a      	ldr	r2, [r1, r2]
    1426:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1428:	495d      	ldr	r1, [pc, #372]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    142a:	680a      	ldr	r2, [r1, #0]
    142c:	6912      	ldr	r2, [r2, #16]
    142e:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1430:	7810      	ldrb	r0, [r2, #0]
    1432:	2440      	movs	r4, #64	; 0x40
    1434:	43a0      	bics	r0, r4
    1436:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1438:	680a      	ldr	r2, [r1, #0]
    143a:	6912      	ldr	r2, [r2, #16]
    143c:	18d2      	adds	r2, r2, r3
    143e:	7810      	ldrb	r0, [r2, #0]
    1440:	3c20      	subs	r4, #32
    1442:	43a0      	bics	r0, r4
    1444:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1446:	680a      	ldr	r2, [r1, #0]
    1448:	6911      	ldr	r1, [r2, #16]
    144a:	18cb      	adds	r3, r1, r3
    144c:	781a      	ldrb	r2, [r3, #0]
    144e:	2110      	movs	r1, #16
    1450:	438a      	bics	r2, r1
    1452:	701a      	strb	r2, [r3, #0]
    1454:	e73f      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1456:	4952      	ldr	r1, [pc, #328]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    1458:	680a      	ldr	r2, [r1, #0]
    145a:	6912      	ldr	r2, [r2, #16]
    145c:	18d2      	adds	r2, r2, r3
    145e:	7810      	ldrb	r0, [r2, #0]
    1460:	2440      	movs	r4, #64	; 0x40
    1462:	43a0      	bics	r0, r4
    1464:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1466:	680a      	ldr	r2, [r1, #0]
    1468:	6912      	ldr	r2, [r2, #16]
    146a:	18d2      	adds	r2, r2, r3
    146c:	7810      	ldrb	r0, [r2, #0]
    146e:	3c20      	subs	r4, #32
    1470:	43a0      	bics	r0, r4
    1472:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1474:	680a      	ldr	r2, [r1, #0]
    1476:	6911      	ldr	r1, [r2, #16]
    1478:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    147a:	781a      	ldrb	r2, [r3, #0]
    147c:	2110      	movs	r1, #16
    147e:	430a      	orrs	r2, r1
    1480:	701a      	strb	r2, [r3, #0]
    1482:	e728      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1484:	4946      	ldr	r1, [pc, #280]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    1486:	680a      	ldr	r2, [r1, #0]
    1488:	6912      	ldr	r2, [r2, #16]
    148a:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    148c:	7810      	ldrb	r0, [r2, #0]
    148e:	2440      	movs	r4, #64	; 0x40
    1490:	43a0      	bics	r0, r4
    1492:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1494:	680a      	ldr	r2, [r1, #0]
    1496:	6912      	ldr	r2, [r2, #16]
    1498:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    149a:	7810      	ldrb	r0, [r2, #0]
    149c:	2420      	movs	r4, #32
    149e:	4320      	orrs	r0, r4
    14a0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    14a2:	680a      	ldr	r2, [r1, #0]
    14a4:	6911      	ldr	r1, [r2, #16]
    14a6:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    14a8:	781a      	ldrb	r2, [r3, #0]
    14aa:	2110      	movs	r1, #16
    14ac:	438a      	bics	r2, r1
    14ae:	701a      	strb	r2, [r3, #0]
    14b0:	e711      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    14b2:	493b      	ldr	r1, [pc, #236]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    14b4:	680a      	ldr	r2, [r1, #0]
    14b6:	6912      	ldr	r2, [r2, #16]
    14b8:	18d2      	adds	r2, r2, r3
    14ba:	7810      	ldrb	r0, [r2, #0]
    14bc:	2440      	movs	r4, #64	; 0x40
    14be:	43a0      	bics	r0, r4
    14c0:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    14c2:	680a      	ldr	r2, [r1, #0]
    14c4:	6912      	ldr	r2, [r2, #16]
    14c6:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    14c8:	7810      	ldrb	r0, [r2, #0]
    14ca:	2420      	movs	r4, #32
    14cc:	4320      	orrs	r0, r4
    14ce:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    14d0:	680a      	ldr	r2, [r1, #0]
    14d2:	6911      	ldr	r1, [r2, #16]
    14d4:	18cb      	adds	r3, r1, r3
    14d6:	781a      	ldrb	r2, [r3, #0]
    14d8:	2110      	movs	r1, #16
    14da:	430a      	orrs	r2, r1
    14dc:	701a      	strb	r2, [r3, #0]
    14de:	e6fa      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    14e0:	492f      	ldr	r1, [pc, #188]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    14e2:	680a      	ldr	r2, [r1, #0]
    14e4:	6912      	ldr	r2, [r2, #16]
    14e6:	18d2      	adds	r2, r2, r3
    14e8:	7810      	ldrb	r0, [r2, #0]
    14ea:	2440      	movs	r4, #64	; 0x40
    14ec:	4320      	orrs	r0, r4
    14ee:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    14f0:	680a      	ldr	r2, [r1, #0]
    14f2:	6912      	ldr	r2, [r2, #16]
    14f4:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    14f6:	7810      	ldrb	r0, [r2, #0]
    14f8:	2420      	movs	r4, #32
    14fa:	43a0      	bics	r0, r4
    14fc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    14fe:	680a      	ldr	r2, [r1, #0]
    1500:	6911      	ldr	r1, [r2, #16]
    1502:	18cb      	adds	r3, r1, r3
    1504:	781a      	ldrb	r2, [r3, #0]
    1506:	2110      	movs	r1, #16
    1508:	438a      	bics	r2, r1
    150a:	701a      	strb	r2, [r3, #0]
    150c:	e6e3      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    150e:	4924      	ldr	r1, [pc, #144]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    1510:	680a      	ldr	r2, [r1, #0]
    1512:	6912      	ldr	r2, [r2, #16]
    1514:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1516:	7810      	ldrb	r0, [r2, #0]
    1518:	2440      	movs	r4, #64	; 0x40
    151a:	4320      	orrs	r0, r4
    151c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    151e:	680a      	ldr	r2, [r1, #0]
    1520:	6912      	ldr	r2, [r2, #16]
    1522:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1524:	7810      	ldrb	r0, [r2, #0]
    1526:	2420      	movs	r4, #32
    1528:	43a0      	bics	r0, r4
    152a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    152c:	680a      	ldr	r2, [r1, #0]
    152e:	6911      	ldr	r1, [r2, #16]
    1530:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1532:	781a      	ldrb	r2, [r3, #0]
    1534:	2110      	movs	r1, #16
    1536:	430a      	orrs	r2, r1
    1538:	701a      	strb	r2, [r3, #0]
    153a:	e6cc      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    153c:	4918      	ldr	r1, [pc, #96]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    153e:	680a      	ldr	r2, [r1, #0]
    1540:	6912      	ldr	r2, [r2, #16]
    1542:	18d2      	adds	r2, r2, r3
    1544:	7810      	ldrb	r0, [r2, #0]
    1546:	2440      	movs	r4, #64	; 0x40
    1548:	4320      	orrs	r0, r4
    154a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    154c:	680a      	ldr	r2, [r1, #0]
    154e:	6912      	ldr	r2, [r2, #16]
    1550:	18d2      	adds	r2, r2, r3
    1552:	7810      	ldrb	r0, [r2, #0]
    1554:	2420      	movs	r4, #32
    1556:	4320      	orrs	r0, r4
    1558:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    155a:	680a      	ldr	r2, [r1, #0]
    155c:	6911      	ldr	r1, [r2, #16]
    155e:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1560:	781a      	ldrb	r2, [r3, #0]
    1562:	2110      	movs	r1, #16
    1564:	438a      	bics	r2, r1
    1566:	701a      	strb	r2, [r3, #0]
    1568:	e6b5      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    156a:	490d      	ldr	r1, [pc, #52]	; (15a0 <eink_ac057tc1_set_pixel+0x34c>)
    156c:	680a      	ldr	r2, [r1, #0]
    156e:	6912      	ldr	r2, [r2, #16]
    1570:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1572:	7810      	ldrb	r0, [r2, #0]
    1574:	2440      	movs	r4, #64	; 0x40
    1576:	4320      	orrs	r0, r4
    1578:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    157a:	680a      	ldr	r2, [r1, #0]
    157c:	6912      	ldr	r2, [r2, #16]
    157e:	18d2      	adds	r2, r2, r3
    1580:	7810      	ldrb	r0, [r2, #0]
    1582:	2420      	movs	r4, #32
    1584:	4320      	orrs	r0, r4
    1586:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1588:	680a      	ldr	r2, [r1, #0]
    158a:	6911      	ldr	r1, [r2, #16]
    158c:	18cb      	adds	r3, r1, r3
    158e:	781a      	ldrb	r2, [r3, #0]
    1590:	2110      	movs	r1, #16
    1592:	430a      	orrs	r2, r1
    1594:	701a      	strb	r2, [r3, #0]
}
    1596:	e69e      	b.n	12d6 <eink_ac057tc1_set_pixel+0x82>
    1598:	20000408 	.word	0x20000408
    159c:	000051e0 	.word	0x000051e0
    15a0:	20000430 	.word	0x20000430
    15a4:	00005200 	.word	0x00005200

000015a8 <eink_ac040tc1_set_pixel>:
{
    15a8:	b510      	push	{r4, lr}
    if ( (x_set >= 0) && (x_set < uc8159_global_instance.display_width) && (y_set >= 0) && (y_set < uc8159_global_instance.display_height) ) {
    15aa:	4bd0      	ldr	r3, [pc, #832]	; (18ec <eink_ac040tc1_set_pixel+0x344>)
    15ac:	889b      	ldrh	r3, [r3, #4]
    15ae:	b29b      	uxth	r3, r3
    15b0:	4283      	cmp	r3, r0
    15b2:	d93a      	bls.n	162a <eink_ac040tc1_set_pixel+0x82>
    15b4:	4bcd      	ldr	r3, [pc, #820]	; (18ec <eink_ac040tc1_set_pixel+0x344>)
    15b6:	88db      	ldrh	r3, [r3, #6]
    15b8:	b29b      	uxth	r3, r3
    15ba:	428b      	cmp	r3, r1
    15bc:	d935      	bls.n	162a <eink_ac040tc1_set_pixel+0x82>
        if ( (uc8159_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8159_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    15be:	4bcb      	ldr	r3, [pc, #812]	; (18ec <eink_ac040tc1_set_pixel+0x344>)
    15c0:	785b      	ldrb	r3, [r3, #1]
    15c2:	2b01      	cmp	r3, #1
    15c4:	d013      	beq.n	15ee <eink_ac040tc1_set_pixel+0x46>
    15c6:	4bc9      	ldr	r3, [pc, #804]	; (18ec <eink_ac040tc1_set_pixel+0x344>)
    15c8:	785b      	ldrb	r3, [r3, #1]
    15ca:	2b03      	cmp	r3, #3
    15cc:	d00f      	beq.n	15ee <eink_ac040tc1_set_pixel+0x46>
            byte_set = x1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * y_set);
    15ce:	1043      	asrs	r3, r0, #1
    15d0:	008c      	lsls	r4, r1, #2
    15d2:	1861      	adds	r1, r4, r1
    15d4:	0189      	lsls	r1, r1, #6
    15d6:	185b      	adds	r3, r3, r1
            odd_even_bit = x_set % 2;
    15d8:	2101      	movs	r1, #1
    15da:	4008      	ands	r0, r1
        if (odd_even_bit) {
    15dc:	2800      	cmp	r0, #0
    15de:	d100      	bne.n	15e2 <eink_ac040tc1_set_pixel+0x3a>
    15e0:	e0c5      	b.n	176e <eink_ac040tc1_set_pixel+0x1c6>
            switch(pixel_colour) {
    15e2:	2a07      	cmp	r2, #7
    15e4:	d821      	bhi.n	162a <eink_ac040tc1_set_pixel+0x82>
    15e6:	0092      	lsls	r2, r2, #2
    15e8:	49c1      	ldr	r1, [pc, #772]	; (18f0 <eink_ac040tc1_set_pixel+0x348>)
    15ea:	588a      	ldr	r2, [r1, r2]
    15ec:	4697      	mov	pc, r2
           byte_set = y1_set + ((GFX_AC040TC1_MAX_WIDTH / 2) * x_set);
    15ee:	104b      	asrs	r3, r1, #1
    15f0:	0084      	lsls	r4, r0, #2
    15f2:	1820      	adds	r0, r4, r0
    15f4:	0180      	lsls	r0, r0, #6
    15f6:	181b      	adds	r3, r3, r0
           odd_even_bit = y_set % 2;
    15f8:	2001      	movs	r0, #1
    15fa:	4008      	ands	r0, r1
    15fc:	e7ee      	b.n	15dc <eink_ac040tc1_set_pixel+0x34>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    15fe:	49bd      	ldr	r1, [pc, #756]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    1600:	680a      	ldr	r2, [r1, #0]
    1602:	6912      	ldr	r2, [r2, #16]
    1604:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1606:	7810      	ldrb	r0, [r2, #0]
    1608:	2404      	movs	r4, #4
    160a:	43a0      	bics	r0, r4
    160c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    160e:	680a      	ldr	r2, [r1, #0]
    1610:	6912      	ldr	r2, [r2, #16]
    1612:	18d2      	adds	r2, r2, r3
    1614:	7810      	ldrb	r0, [r2, #0]
    1616:	3c02      	subs	r4, #2
    1618:	43a0      	bics	r0, r4
    161a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    161c:	680a      	ldr	r2, [r1, #0]
    161e:	6911      	ldr	r1, [r2, #16]
    1620:	18cb      	adds	r3, r1, r3
    1622:	781a      	ldrb	r2, [r3, #0]
    1624:	2101      	movs	r1, #1
    1626:	438a      	bics	r2, r1
    1628:	701a      	strb	r2, [r3, #0]
}
    162a:	bd10      	pop	{r4, pc}
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    162c:	49b1      	ldr	r1, [pc, #708]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    162e:	680a      	ldr	r2, [r1, #0]
    1630:	6912      	ldr	r2, [r2, #16]
    1632:	18d2      	adds	r2, r2, r3
    1634:	7810      	ldrb	r0, [r2, #0]
    1636:	2404      	movs	r4, #4
    1638:	43a0      	bics	r0, r4
    163a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    163c:	680a      	ldr	r2, [r1, #0]
    163e:	6912      	ldr	r2, [r2, #16]
    1640:	18d2      	adds	r2, r2, r3
    1642:	7810      	ldrb	r0, [r2, #0]
    1644:	3c02      	subs	r4, #2
    1646:	43a0      	bics	r0, r4
    1648:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    164a:	680a      	ldr	r2, [r1, #0]
    164c:	6911      	ldr	r1, [r2, #16]
    164e:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1650:	781a      	ldrb	r2, [r3, #0]
    1652:	2101      	movs	r1, #1
    1654:	430a      	orrs	r2, r1
    1656:	701a      	strb	r2, [r3, #0]
    1658:	e7e7      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    165a:	49a6      	ldr	r1, [pc, #664]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    165c:	680a      	ldr	r2, [r1, #0]
    165e:	6912      	ldr	r2, [r2, #16]
    1660:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1662:	7810      	ldrb	r0, [r2, #0]
    1664:	2404      	movs	r4, #4
    1666:	43a0      	bics	r0, r4
    1668:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    166a:	680a      	ldr	r2, [r1, #0]
    166c:	6912      	ldr	r2, [r2, #16]
    166e:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1670:	7810      	ldrb	r0, [r2, #0]
    1672:	2402      	movs	r4, #2
    1674:	4320      	orrs	r0, r4
    1676:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1678:	680a      	ldr	r2, [r1, #0]
    167a:	6911      	ldr	r1, [r2, #16]
    167c:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    167e:	781a      	ldrb	r2, [r3, #0]
    1680:	2101      	movs	r1, #1
    1682:	438a      	bics	r2, r1
    1684:	701a      	strb	r2, [r3, #0]
    1686:	e7d0      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 0);
    1688:	499a      	ldr	r1, [pc, #616]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    168a:	680a      	ldr	r2, [r1, #0]
    168c:	6912      	ldr	r2, [r2, #16]
    168e:	18d2      	adds	r2, r2, r3
    1690:	7810      	ldrb	r0, [r2, #0]
    1692:	2404      	movs	r4, #4
    1694:	43a0      	bics	r0, r4
    1696:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1698:	680a      	ldr	r2, [r1, #0]
    169a:	6912      	ldr	r2, [r2, #16]
    169c:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    169e:	7810      	ldrb	r0, [r2, #0]
    16a0:	2402      	movs	r4, #2
    16a2:	4320      	orrs	r0, r4
    16a4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    16a6:	680a      	ldr	r2, [r1, #0]
    16a8:	6911      	ldr	r1, [r2, #16]
    16aa:	18cb      	adds	r3, r1, r3
    16ac:	781a      	ldrb	r2, [r3, #0]
    16ae:	2101      	movs	r1, #1
    16b0:	430a      	orrs	r2, r1
    16b2:	701a      	strb	r2, [r3, #0]
    16b4:	e7b9      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    16b6:	498f      	ldr	r1, [pc, #572]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    16b8:	680a      	ldr	r2, [r1, #0]
    16ba:	6912      	ldr	r2, [r2, #16]
    16bc:	18d2      	adds	r2, r2, r3
    16be:	7810      	ldrb	r0, [r2, #0]
    16c0:	2404      	movs	r4, #4
    16c2:	4320      	orrs	r0, r4
    16c4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    16c6:	680a      	ldr	r2, [r1, #0]
    16c8:	6912      	ldr	r2, [r2, #16]
    16ca:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    16cc:	7810      	ldrb	r0, [r2, #0]
    16ce:	2402      	movs	r4, #2
    16d0:	43a0      	bics	r0, r4
    16d2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    16d4:	680a      	ldr	r2, [r1, #0]
    16d6:	6911      	ldr	r1, [r2, #16]
    16d8:	18cb      	adds	r3, r1, r3
    16da:	781a      	ldrb	r2, [r3, #0]
    16dc:	2101      	movs	r1, #1
    16de:	438a      	bics	r2, r1
    16e0:	701a      	strb	r2, [r3, #0]
    16e2:	e7a2      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    16e4:	4983      	ldr	r1, [pc, #524]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    16e6:	680a      	ldr	r2, [r1, #0]
    16e8:	6912      	ldr	r2, [r2, #16]
    16ea:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    16ec:	7810      	ldrb	r0, [r2, #0]
    16ee:	2404      	movs	r4, #4
    16f0:	4320      	orrs	r0, r4
    16f2:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 0);
    16f4:	680a      	ldr	r2, [r1, #0]
    16f6:	6912      	ldr	r2, [r2, #16]
    16f8:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    16fa:	7810      	ldrb	r0, [r2, #0]
    16fc:	2402      	movs	r4, #2
    16fe:	43a0      	bics	r0, r4
    1700:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    1702:	680a      	ldr	r2, [r1, #0]
    1704:	6911      	ldr	r1, [r2, #16]
    1706:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1708:	781a      	ldrb	r2, [r3, #0]
    170a:	2101      	movs	r1, #1
    170c:	430a      	orrs	r2, r1
    170e:	701a      	strb	r2, [r3, #0]
    1710:	e78b      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1712:	4978      	ldr	r1, [pc, #480]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    1714:	680a      	ldr	r2, [r1, #0]
    1716:	6912      	ldr	r2, [r2, #16]
    1718:	18d2      	adds	r2, r2, r3
    171a:	7810      	ldrb	r0, [r2, #0]
    171c:	2404      	movs	r4, #4
    171e:	4320      	orrs	r0, r4
    1720:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1722:	680a      	ldr	r2, [r1, #0]
    1724:	6912      	ldr	r2, [r2, #16]
    1726:	18d2      	adds	r2, r2, r3
    1728:	7810      	ldrb	r0, [r2, #0]
    172a:	2402      	movs	r4, #2
    172c:	4320      	orrs	r0, r4
    172e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 0);
    1730:	680a      	ldr	r2, [r1, #0]
    1732:	6911      	ldr	r1, [r2, #16]
    1734:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    1736:	781a      	ldrb	r2, [r3, #0]
    1738:	2101      	movs	r1, #1
    173a:	438a      	bics	r2, r1
    173c:	701a      	strb	r2, [r3, #0]
    173e:	e774      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, 1);
    1740:	496c      	ldr	r1, [pc, #432]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    1742:	680a      	ldr	r2, [r1, #0]
    1744:	6912      	ldr	r2, [r2, #16]
    1746:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    1748:	7810      	ldrb	r0, [r2, #0]
    174a:	2404      	movs	r4, #4
    174c:	4320      	orrs	r0, r4
    174e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, 1);
    1750:	680a      	ldr	r2, [r1, #0]
    1752:	6912      	ldr	r2, [r2, #16]
    1754:	18d2      	adds	r2, r2, r3
    1756:	7810      	ldrb	r0, [r2, #0]
    1758:	2402      	movs	r4, #2
    175a:	4320      	orrs	r0, r4
    175c:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, 1);
    175e:	680a      	ldr	r2, [r1, #0]
    1760:	6911      	ldr	r1, [r2, #16]
    1762:	18cb      	adds	r3, r1, r3
    1764:	781a      	ldrb	r2, [r3, #0]
    1766:	2101      	movs	r1, #1
    1768:	430a      	orrs	r2, r1
    176a:	701a      	strb	r2, [r3, #0]
    176c:	e75d      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
            switch(pixel_colour) {
    176e:	2a07      	cmp	r2, #7
    1770:	d900      	bls.n	1774 <eink_ac040tc1_set_pixel+0x1cc>
    1772:	e75a      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
    1774:	0092      	lsls	r2, r2, #2
    1776:	4960      	ldr	r1, [pc, #384]	; (18f8 <eink_ac040tc1_set_pixel+0x350>)
    1778:	588a      	ldr	r2, [r1, r2]
    177a:	4697      	mov	pc, r2
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    177c:	495d      	ldr	r1, [pc, #372]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    177e:	680a      	ldr	r2, [r1, #0]
    1780:	6912      	ldr	r2, [r2, #16]
    1782:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1784:	7810      	ldrb	r0, [r2, #0]
    1786:	2440      	movs	r4, #64	; 0x40
    1788:	43a0      	bics	r0, r4
    178a:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    178c:	680a      	ldr	r2, [r1, #0]
    178e:	6912      	ldr	r2, [r2, #16]
    1790:	18d2      	adds	r2, r2, r3
    1792:	7810      	ldrb	r0, [r2, #0]
    1794:	3c20      	subs	r4, #32
    1796:	43a0      	bics	r0, r4
    1798:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    179a:	680a      	ldr	r2, [r1, #0]
    179c:	6911      	ldr	r1, [r2, #16]
    179e:	18cb      	adds	r3, r1, r3
    17a0:	781a      	ldrb	r2, [r3, #0]
    17a2:	2110      	movs	r1, #16
    17a4:	438a      	bics	r2, r1
    17a6:	701a      	strb	r2, [r3, #0]
    17a8:	e73f      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    17aa:	4952      	ldr	r1, [pc, #328]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    17ac:	680a      	ldr	r2, [r1, #0]
    17ae:	6912      	ldr	r2, [r2, #16]
    17b0:	18d2      	adds	r2, r2, r3
    17b2:	7810      	ldrb	r0, [r2, #0]
    17b4:	2440      	movs	r4, #64	; 0x40
    17b6:	43a0      	bics	r0, r4
    17b8:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    17ba:	680a      	ldr	r2, [r1, #0]
    17bc:	6912      	ldr	r2, [r2, #16]
    17be:	18d2      	adds	r2, r2, r3
    17c0:	7810      	ldrb	r0, [r2, #0]
    17c2:	3c20      	subs	r4, #32
    17c4:	43a0      	bics	r0, r4
    17c6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    17c8:	680a      	ldr	r2, [r1, #0]
    17ca:	6911      	ldr	r1, [r2, #16]
    17cc:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    17ce:	781a      	ldrb	r2, [r3, #0]
    17d0:	2110      	movs	r1, #16
    17d2:	430a      	orrs	r2, r1
    17d4:	701a      	strb	r2, [r3, #0]
    17d6:	e728      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    17d8:	4946      	ldr	r1, [pc, #280]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    17da:	680a      	ldr	r2, [r1, #0]
    17dc:	6912      	ldr	r2, [r2, #16]
    17de:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    17e0:	7810      	ldrb	r0, [r2, #0]
    17e2:	2440      	movs	r4, #64	; 0x40
    17e4:	43a0      	bics	r0, r4
    17e6:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    17e8:	680a      	ldr	r2, [r1, #0]
    17ea:	6912      	ldr	r2, [r2, #16]
    17ec:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    17ee:	7810      	ldrb	r0, [r2, #0]
    17f0:	2420      	movs	r4, #32
    17f2:	4320      	orrs	r0, r4
    17f4:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    17f6:	680a      	ldr	r2, [r1, #0]
    17f8:	6911      	ldr	r1, [r2, #16]
    17fa:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    17fc:	781a      	ldrb	r2, [r3, #0]
    17fe:	2110      	movs	r1, #16
    1800:	438a      	bics	r2, r1
    1802:	701a      	strb	r2, [r3, #0]
    1804:	e711      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 0);
    1806:	493b      	ldr	r1, [pc, #236]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    1808:	680a      	ldr	r2, [r1, #0]
    180a:	6912      	ldr	r2, [r2, #16]
    180c:	18d2      	adds	r2, r2, r3
    180e:	7810      	ldrb	r0, [r2, #0]
    1810:	2440      	movs	r4, #64	; 0x40
    1812:	43a0      	bics	r0, r4
    1814:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    1816:	680a      	ldr	r2, [r1, #0]
    1818:	6912      	ldr	r2, [r2, #16]
    181a:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    181c:	7810      	ldrb	r0, [r2, #0]
    181e:	2420      	movs	r4, #32
    1820:	4320      	orrs	r0, r4
    1822:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1824:	680a      	ldr	r2, [r1, #0]
    1826:	6911      	ldr	r1, [r2, #16]
    1828:	18cb      	adds	r3, r1, r3
    182a:	781a      	ldrb	r2, [r3, #0]
    182c:	2110      	movs	r1, #16
    182e:	430a      	orrs	r2, r1
    1830:	701a      	strb	r2, [r3, #0]
    1832:	e6fa      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1834:	492f      	ldr	r1, [pc, #188]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    1836:	680a      	ldr	r2, [r1, #0]
    1838:	6912      	ldr	r2, [r2, #16]
    183a:	18d2      	adds	r2, r2, r3
    183c:	7810      	ldrb	r0, [r2, #0]
    183e:	2440      	movs	r4, #64	; 0x40
    1840:	4320      	orrs	r0, r4
    1842:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1844:	680a      	ldr	r2, [r1, #0]
    1846:	6912      	ldr	r2, [r2, #16]
    1848:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    184a:	7810      	ldrb	r0, [r2, #0]
    184c:	2420      	movs	r4, #32
    184e:	43a0      	bics	r0, r4
    1850:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    1852:	680a      	ldr	r2, [r1, #0]
    1854:	6911      	ldr	r1, [r2, #16]
    1856:	18cb      	adds	r3, r1, r3
    1858:	781a      	ldrb	r2, [r3, #0]
    185a:	2110      	movs	r1, #16
    185c:	438a      	bics	r2, r1
    185e:	701a      	strb	r2, [r3, #0]
    1860:	e6e3      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1862:	4924      	ldr	r1, [pc, #144]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    1864:	680a      	ldr	r2, [r1, #0]
    1866:	6912      	ldr	r2, [r2, #16]
    1868:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    186a:	7810      	ldrb	r0, [r2, #0]
    186c:	2440      	movs	r4, #64	; 0x40
    186e:	4320      	orrs	r0, r4
    1870:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 0);
    1872:	680a      	ldr	r2, [r1, #0]
    1874:	6912      	ldr	r2, [r2, #16]
    1876:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1878:	7810      	ldrb	r0, [r2, #0]
    187a:	2420      	movs	r4, #32
    187c:	43a0      	bics	r0, r4
    187e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    1880:	680a      	ldr	r2, [r1, #0]
    1882:	6911      	ldr	r1, [r2, #16]
    1884:	18cb      	adds	r3, r1, r3
        *byte |= 1 << bit_number;
    1886:	781a      	ldrb	r2, [r3, #0]
    1888:	2110      	movs	r1, #16
    188a:	430a      	orrs	r2, r1
    188c:	701a      	strb	r2, [r3, #0]
    188e:	e6cc      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    1890:	4918      	ldr	r1, [pc, #96]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    1892:	680a      	ldr	r2, [r1, #0]
    1894:	6912      	ldr	r2, [r2, #16]
    1896:	18d2      	adds	r2, r2, r3
    1898:	7810      	ldrb	r0, [r2, #0]
    189a:	2440      	movs	r4, #64	; 0x40
    189c:	4320      	orrs	r0, r4
    189e:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    18a0:	680a      	ldr	r2, [r1, #0]
    18a2:	6912      	ldr	r2, [r2, #16]
    18a4:	18d2      	adds	r2, r2, r3
    18a6:	7810      	ldrb	r0, [r2, #0]
    18a8:	2420      	movs	r4, #32
    18aa:	4320      	orrs	r0, r4
    18ac:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 0);
    18ae:	680a      	ldr	r2, [r1, #0]
    18b0:	6911      	ldr	r1, [r2, #16]
    18b2:	18cb      	adds	r3, r1, r3
        *byte &= ~(1 << bit_number);
    18b4:	781a      	ldrb	r2, [r3, #0]
    18b6:	2110      	movs	r1, #16
    18b8:	438a      	bics	r2, r1
    18ba:	701a      	strb	r2, [r3, #0]
    18bc:	e6b5      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, 1);
    18be:	490d      	ldr	r1, [pc, #52]	; (18f4 <eink_ac040tc1_set_pixel+0x34c>)
    18c0:	680a      	ldr	r2, [r1, #0]
    18c2:	6912      	ldr	r2, [r2, #16]
    18c4:	18d2      	adds	r2, r2, r3
        *byte |= 1 << bit_number;
    18c6:	7810      	ldrb	r0, [r2, #0]
    18c8:	2440      	movs	r4, #64	; 0x40
    18ca:	4320      	orrs	r0, r4
    18cc:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, 1);
    18ce:	680a      	ldr	r2, [r1, #0]
    18d0:	6912      	ldr	r2, [r2, #16]
    18d2:	18d2      	adds	r2, r2, r3
    18d4:	7810      	ldrb	r0, [r2, #0]
    18d6:	2420      	movs	r4, #32
    18d8:	4320      	orrs	r0, r4
    18da:	7010      	strb	r0, [r2, #0]
                    eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, 1);
    18dc:	680a      	ldr	r2, [r1, #0]
    18de:	6911      	ldr	r1, [r2, #16]
    18e0:	18cb      	adds	r3, r1, r3
    18e2:	781a      	ldrb	r2, [r3, #0]
    18e4:	2110      	movs	r1, #16
    18e6:	430a      	orrs	r2, r1
    18e8:	701a      	strb	r2, [r3, #0]
}
    18ea:	e69e      	b.n	162a <eink_ac040tc1_set_pixel+0x82>
    18ec:	20000408 	.word	0x20000408
    18f0:	00005220 	.word	0x00005220
    18f4:	20000430 	.word	0x20000430
    18f8:	00005240 	.word	0x00005240

000018fc <eink_hink_e0154a05_set_pixel>:
{    
    18fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch(ssd1608_global_instance.display_config.display_rotation)
    18fe:	4c2a      	ldr	r4, [pc, #168]	; (19a8 <eink_hink_e0154a05_set_pixel+0xac>)
    1900:	7824      	ldrb	r4, [r4, #0]
    1902:	b2e4      	uxtb	r4, r4
    1904:	2c01      	cmp	r4, #1
    1906:	d014      	beq.n	1932 <eink_hink_e0154a05_set_pixel+0x36>
    1908:	2c00      	cmp	r4, #0
    190a:	d008      	beq.n	191e <eink_hink_e0154a05_set_pixel+0x22>
    190c:	2c02      	cmp	r4, #2
    190e:	d01c      	beq.n	194a <eink_hink_e0154a05_set_pixel+0x4e>
    1910:	2c03      	cmp	r4, #3
    1912:	d024      	beq.n	195e <eink_hink_e0154a05_set_pixel+0x62>
    if ( (x_set >= 0) && (x_set < max_x) && (y_set >= 0) && (y_set < max_y) ) {
    1914:	42b3      	cmp	r3, r6
    1916:	d201      	bcs.n	191c <eink_hink_e0154a05_set_pixel+0x20>
    1918:	42bd      	cmp	r5, r7
    191a:	d328      	bcc.n	196e <eink_hink_e0154a05_set_pixel+0x72>
}
    191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            x_set = ssd1608_global_instance.display_height - y;
    191e:	4c22      	ldr	r4, [pc, #136]	; (19a8 <eink_hink_e0154a05_set_pixel+0xac>)
    1920:	88e3      	ldrh	r3, [r4, #6]
    1922:	1a5b      	subs	r3, r3, r1
    1924:	b29b      	uxth	r3, r3
            max_x = ssd1608_global_instance.display_height;
    1926:	88e6      	ldrh	r6, [r4, #6]
    1928:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    192a:	88a7      	ldrh	r7, [r4, #4]
    192c:	b2bf      	uxth	r7, r7
            y_set = x;
    192e:	0005      	movs	r5, r0
            break;
    1930:	e7f0      	b.n	1914 <eink_hink_e0154a05_set_pixel+0x18>
            x_set = ssd1608_global_instance.display_width - x;
    1932:	4c1d      	ldr	r4, [pc, #116]	; (19a8 <eink_hink_e0154a05_set_pixel+0xac>)
    1934:	88a3      	ldrh	r3, [r4, #4]
    1936:	1a1b      	subs	r3, r3, r0
    1938:	b29b      	uxth	r3, r3
            y_set = ssd1608_global_instance.display_height - y;
    193a:	88e5      	ldrh	r5, [r4, #6]
    193c:	1a6d      	subs	r5, r5, r1
    193e:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_width;
    1940:	88a6      	ldrh	r6, [r4, #4]
    1942:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1944:	88e7      	ldrh	r7, [r4, #6]
    1946:	b2bf      	uxth	r7, r7
            break;
    1948:	e7e4      	b.n	1914 <eink_hink_e0154a05_set_pixel+0x18>
            y_set = ssd1608_global_instance.display_width - x;
    194a:	4c17      	ldr	r4, [pc, #92]	; (19a8 <eink_hink_e0154a05_set_pixel+0xac>)
    194c:	88a5      	ldrh	r5, [r4, #4]
    194e:	1a2d      	subs	r5, r5, r0
    1950:	b2ad      	uxth	r5, r5
            max_x = ssd1608_global_instance.display_height;
    1952:	88e6      	ldrh	r6, [r4, #6]
    1954:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_width;
    1956:	88a7      	ldrh	r7, [r4, #4]
    1958:	b2bf      	uxth	r7, r7
            x_set = y;
    195a:	000b      	movs	r3, r1
            break;
    195c:	e7da      	b.n	1914 <eink_hink_e0154a05_set_pixel+0x18>
            max_x = ssd1608_global_instance.display_width;
    195e:	4b12      	ldr	r3, [pc, #72]	; (19a8 <eink_hink_e0154a05_set_pixel+0xac>)
    1960:	889e      	ldrh	r6, [r3, #4]
    1962:	b2b6      	uxth	r6, r6
            max_y = ssd1608_global_instance.display_height;
    1964:	88df      	ldrh	r7, [r3, #6]
    1966:	b2bf      	uxth	r7, r7
            y_set = y;
    1968:	000d      	movs	r5, r1
            x_set = x;
    196a:	0003      	movs	r3, r0
            break;
    196c:	e7d2      	b.n	1914 <eink_hink_e0154a05_set_pixel+0x18>
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    196e:	490f      	ldr	r1, [pc, #60]	; (19ac <eink_hink_e0154a05_set_pixel+0xb0>)
    1970:	6809      	ldr	r1, [r1, #0]
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    1972:	3301      	adds	r3, #1
    1974:	0098      	lsls	r0, r3, #2
    1976:	181b      	adds	r3, r3, r0
    1978:	0098      	lsls	r0, r3, #2
    197a:	181b      	adds	r3, r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    197c:	10e8      	asrs	r0, r5, #3
        byte_set = (((x_set + 1) * 25) - 1 - y1_set);
    197e:	1a1b      	subs	r3, r3, r0
    1980:	3b01      	subs	r3, #1
        eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set);
    1982:	b29b      	uxth	r3, r3
    1984:	6909      	ldr	r1, [r1, #16]
    1986:	18cb      	adds	r3, r1, r3
    1988:	2107      	movs	r1, #7
    198a:	400d      	ands	r5, r1
    if (bit_value == 1) {
    198c:	2a00      	cmp	r2, #0
    198e:	d105      	bne.n	199c <eink_hink_e0154a05_set_pixel+0xa0>
        *byte &= ~(1 << bit_number);
    1990:	2101      	movs	r1, #1
    1992:	40a9      	lsls	r1, r5
    1994:	781a      	ldrb	r2, [r3, #0]
    1996:	438a      	bics	r2, r1
    1998:	701a      	strb	r2, [r3, #0]
}
    199a:	e7bf      	b.n	191c <eink_hink_e0154a05_set_pixel+0x20>
        *byte |= 1 << bit_number;
    199c:	3906      	subs	r1, #6
    199e:	40a9      	lsls	r1, r5
    19a0:	781a      	ldrb	r2, [r3, #0]
    19a2:	430a      	orrs	r2, r1
    19a4:	701a      	strb	r2, [r3, #0]
    19a6:	e7b9      	b.n	191c <eink_hink_e0154a05_set_pixel+0x20>
    19a8:	200003b8 	.word	0x200003b8
    19ac:	20000430 	.word	0x20000430

000019b0 <eink_ed029tc1_set_pixel>:
{    
    19b0:	b570      	push	{r4, r5, r6, lr}
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    19b2:	4b38      	ldr	r3, [pc, #224]	; (1a94 <eink_ed029tc1_set_pixel+0xe4>)
    19b4:	891e      	ldrh	r6, [r3, #8]
    19b6:	b2b6      	uxth	r6, r6
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    19b8:	88dc      	ldrh	r4, [r3, #6]
    19ba:	b2a4      	uxth	r4, r4
    if ( (x_set >= 0) && (x_set < uc8151_global_instance.display_width) && (y_set >= 0) && (y_set < uc8151_global_instance.display_height) ) {
    19bc:	88db      	ldrh	r3, [r3, #6]
    19be:	b29b      	uxth	r3, r3
    19c0:	4283      	cmp	r3, r0
    19c2:	d924      	bls.n	1a0e <eink_ed029tc1_set_pixel+0x5e>
    19c4:	4b33      	ldr	r3, [pc, #204]	; (1a94 <eink_ed029tc1_set_pixel+0xe4>)
    19c6:	891d      	ldrh	r5, [r3, #8]
    19c8:	b2ad      	uxth	r5, r5
    19ca:	428d      	cmp	r5, r1
    19cc:	d91f      	bls.n	1a0e <eink_ed029tc1_set_pixel+0x5e>
        if ( (uc8151_global_instance.panel_settings.display_rotation == ROTATE_90) || (uc8151_global_instance.panel_settings.display_rotation == ROTATE_270) ) {
    19ce:	78db      	ldrb	r3, [r3, #3]
    19d0:	2b01      	cmp	r3, #1
    19d2:	d01d      	beq.n	1a10 <eink_ed029tc1_set_pixel+0x60>
    19d4:	4b2f      	ldr	r3, [pc, #188]	; (1a94 <eink_ed029tc1_set_pixel+0xe4>)
    19d6:	78db      	ldrb	r3, [r3, #3]
    19d8:	2b03      	cmp	r3, #3
    19da:	d019      	beq.n	1a10 <eink_ed029tc1_set_pixel+0x60>
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19dc:	3001      	adds	r0, #1
    uint8_t height_bytes = uc8151_global_instance.display_height / 8;
    19de:	08f6      	lsrs	r6, r6, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19e0:	b2f3      	uxtb	r3, r6
    19e2:	4358      	muls	r0, r3
            y1_set = ((y_set - (y_set % 8)) / 8);
    19e4:	10cb      	asrs	r3, r1, #3
            byte_set = (((x_set + 1) * height_bytes) - 1 - y1_set);
    19e6:	43db      	mvns	r3, r3
    19e8:	18c3      	adds	r3, r0, r3
            bit_set = (y_set % 8);
    19ea:	2007      	movs	r0, #7
    19ec:	4001      	ands	r1, r0
        if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    19ee:	4829      	ldr	r0, [pc, #164]	; (1a94 <eink_ed029tc1_set_pixel+0xe4>)
    19f0:	7880      	ldrb	r0, [r0, #2]
    19f2:	2800      	cmp	r0, #0
    19f4:	d11d      	bne.n	1a32 <eink_ed029tc1_set_pixel+0x82>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);
    19f6:	4828      	ldr	r0, [pc, #160]	; (1a98 <eink_ed029tc1_set_pixel+0xe8>)
    19f8:	6800      	ldr	r0, [r0, #0]
    19fa:	6940      	ldr	r0, [r0, #20]
    19fc:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    19fe:	2a00      	cmp	r2, #0
    1a00:	d110      	bne.n	1a24 <eink_ed029tc1_set_pixel+0x74>
        *byte &= ~(1 << bit_number);
    1a02:	2201      	movs	r2, #1
    1a04:	408a      	lsls	r2, r1
    1a06:	0011      	movs	r1, r2
    1a08:	781a      	ldrb	r2, [r3, #0]
    1a0a:	438a      	bics	r2, r1
    1a0c:	701a      	strb	r2, [r3, #0]
}
    1a0e:	bd70      	pop	{r4, r5, r6, pc}
            byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1a10:	1c4b      	adds	r3, r1, #1
    uint8_t width_bytes = uc8151_global_instance.display_width / 8;
    1a12:	08e4      	lsrs	r4, r4, #3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1a14:	b2e1      	uxtb	r1, r4
    1a16:	4359      	muls	r1, r3
            x1_set = 15 - ((x_set - (x_set % 8)) / 8);
    1a18:	10c3      	asrs	r3, r0, #3
    1a1a:	18cb      	adds	r3, r1, r3
            byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1a1c:	3b10      	subs	r3, #16
            bit_set = 7 - (x_set % 8);
    1a1e:	2107      	movs	r1, #7
    1a20:	4381      	bics	r1, r0
    1a22:	e7e4      	b.n	19ee <eink_ed029tc1_set_pixel+0x3e>
        *byte |= 1 << bit_number;
    1a24:	2201      	movs	r2, #1
    1a26:	408a      	lsls	r2, r1
    1a28:	0011      	movs	r1, r2
    1a2a:	781a      	ldrb	r2, [r3, #0]
    1a2c:	430a      	orrs	r2, r1
    1a2e:	701a      	strb	r2, [r3, #0]
    1a30:	e7ed      	b.n	1a0e <eink_ed029tc1_set_pixel+0x5e>
            if (pixel_colour == PIXEL_BLACK) {
    1a32:	2a00      	cmp	r2, #0
    1a34:	d017      	beq.n	1a66 <eink_ed029tc1_set_pixel+0xb6>
            } else if(pixel_colour == PIXEL_WHITE) {
    1a36:	3a02      	subs	r2, #2
    1a38:	2a01      	cmp	r2, #1
    1a3a:	d801      	bhi.n	1a40 <eink_ed029tc1_set_pixel+0x90>
                pixel_set_2 = 0;    
    1a3c:	2600      	movs	r6, #0
    1a3e:	e013      	b.n	1a68 <eink_ed029tc1_set_pixel+0xb8>
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1a40:	4d15      	ldr	r5, [pc, #84]	; (1a98 <eink_ed029tc1_set_pixel+0xe8>)
    1a42:	682a      	ldr	r2, [r5, #0]
    1a44:	6912      	ldr	r2, [r2, #16]
    1a46:	18d2      	adds	r2, r2, r3
    1a48:	2401      	movs	r4, #1
    1a4a:	408c      	lsls	r4, r1
    1a4c:	7810      	ldrb	r0, [r2, #0]
    1a4e:	4320      	orrs	r0, r4
    1a50:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1a52:	682a      	ldr	r2, [r5, #0]
    1a54:	6950      	ldr	r0, [r2, #20]
    1a56:	18c3      	adds	r3, r0, r3
    1a58:	2201      	movs	r2, #1
    1a5a:	408a      	lsls	r2, r1
    1a5c:	0011      	movs	r1, r2
    1a5e:	781a      	ldrb	r2, [r3, #0]
    1a60:	430a      	orrs	r2, r1
    1a62:	701a      	strb	r2, [r3, #0]
    1a64:	e7d3      	b.n	1a0e <eink_ed029tc1_set_pixel+0x5e>
                pixel_set_2 = 1;
    1a66:	2601      	movs	r6, #1
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, pixel_set_1);
    1a68:	4d0b      	ldr	r5, [pc, #44]	; (1a98 <eink_ed029tc1_set_pixel+0xe8>)
    1a6a:	682a      	ldr	r2, [r5, #0]
    1a6c:	6912      	ldr	r2, [r2, #16]
    1a6e:	18d2      	adds	r2, r2, r3
        *byte &= ~(1 << bit_number);
    1a70:	2401      	movs	r4, #1
    1a72:	408c      	lsls	r4, r1
    1a74:	7810      	ldrb	r0, [r2, #0]
    1a76:	43a0      	bics	r0, r4
    1a78:	7010      	strb	r0, [r2, #0]
            eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, pixel_set_2);    
    1a7a:	682a      	ldr	r2, [r5, #0]
    1a7c:	6950      	ldr	r0, [r2, #20]
    1a7e:	18c3      	adds	r3, r0, r3
    if (bit_value == 1) {
    1a80:	2e00      	cmp	r6, #0
    1a82:	d1e9      	bne.n	1a58 <eink_ed029tc1_set_pixel+0xa8>
        *byte &= ~(1 << bit_number);
    1a84:	2201      	movs	r2, #1
    1a86:	408a      	lsls	r2, r1
    1a88:	0011      	movs	r1, r2
    1a8a:	781a      	ldrb	r2, [r3, #0]
    1a8c:	438a      	bics	r2, r1
    1a8e:	701a      	strb	r2, [r3, #0]
}
    1a90:	e7bd      	b.n	1a0e <eink_ed029tc1_set_pixel+0x5e>
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	200003f8 	.word	0x200003f8
    1a98:	20000430 	.word	0x20000430

00001a9c <eink_el026tr1_set_pixel>:
{    
    1a9c:	b510      	push	{r4, lr}
    eink_ed029tc1_set_pixel(x_set, y_set, pixel_colour);
    1a9e:	4b01      	ldr	r3, [pc, #4]	; (1aa4 <eink_el026tr1_set_pixel+0x8>)
    1aa0:	4798      	blx	r3
}
    1aa2:	bd10      	pop	{r4, pc}
    1aa4:	000019b1 	.word	0x000019b1

00001aa8 <eink_ed013tc1_set_pixel>:
{    
    1aa8:	b510      	push	{r4, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1aaa:	4c16      	ldr	r4, [pc, #88]	; (1b04 <eink_ed013tc1_set_pixel+0x5c>)
    1aac:	88e3      	ldrh	r3, [r4, #6]
    1aae:	b29b      	uxth	r3, r3
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1ab0:	88a4      	ldrh	r4, [r4, #4]
    1ab2:	b2a4      	uxth	r4, r4
    1ab4:	4284      	cmp	r4, r0
    1ab6:	d918      	bls.n	1aea <eink_ed013tc1_set_pixel+0x42>
    1ab8:	4c12      	ldr	r4, [pc, #72]	; (1b04 <eink_ed013tc1_set_pixel+0x5c>)
    1aba:	88e4      	ldrh	r4, [r4, #6]
    1abc:	b2a4      	uxth	r4, r4
    1abe:	428c      	cmp	r4, r1
    1ac0:	d913      	bls.n	1aea <eink_ed013tc1_set_pixel+0x42>
    uint8_t height_bytes = uc8173_global_instance.display_height / 8;
    1ac2:	08db      	lsrs	r3, r3, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1ac4:	b2db      	uxtb	r3, r3
    1ac6:	4343      	muls	r3, r0
        y1_set = ((y_set - (y_set % 8)) / 8);
    1ac8:	10c8      	asrs	r0, r1, #3
        byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1aca:	1a1b      	subs	r3, r3, r0
    1acc:	3b01      	subs	r3, #1
        bit_set = (y_set % 8);
    1ace:	2007      	movs	r0, #7
    1ad0:	4001      	ands	r1, r0
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1ad2:	2a00      	cmp	r2, #0
    1ad4:	d00a      	beq.n	1aec <eink_ed013tc1_set_pixel+0x44>
		else eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 1);
    1ad6:	4a0c      	ldr	r2, [pc, #48]	; (1b08 <eink_ed013tc1_set_pixel+0x60>)
    1ad8:	6812      	ldr	r2, [r2, #0]
    1ada:	6950      	ldr	r0, [r2, #20]
    1adc:	18c3      	adds	r3, r0, r3
        *byte |= 1 << bit_number;
    1ade:	2201      	movs	r2, #1
    1ae0:	408a      	lsls	r2, r1
    1ae2:	0011      	movs	r1, r2
    1ae4:	781a      	ldrb	r2, [r3, #0]
    1ae6:	430a      	orrs	r2, r1
    1ae8:	701a      	strb	r2, [r3, #0]
}
    1aea:	bd10      	pop	{r4, pc}
		if(pixel_colour == PIXEL_BLACK) eink_set_bit(&ptr_eink_gfx_config->display_buffer_2_ptr[byte_set], bit_set, 0);
    1aec:	4a06      	ldr	r2, [pc, #24]	; (1b08 <eink_ed013tc1_set_pixel+0x60>)
    1aee:	6812      	ldr	r2, [r2, #0]
    1af0:	6950      	ldr	r0, [r2, #20]
    1af2:	18c3      	adds	r3, r0, r3
        *byte &= ~(1 << bit_number);
    1af4:	2201      	movs	r2, #1
    1af6:	408a      	lsls	r2, r1
    1af8:	0011      	movs	r1, r2
    1afa:	781a      	ldrb	r2, [r3, #0]
    1afc:	438a      	bics	r2, r1
    1afe:	701a      	strb	r2, [r3, #0]
    1b00:	e7f3      	b.n	1aea <eink_ed013tc1_set_pixel+0x42>
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	20000390 	.word	0x20000390
    1b08:	20000430 	.word	0x20000430

00001b0c <eink_et011tt2_set_pixel_raw>:
{
    1b0c:	b570      	push	{r4, r5, r6, lr}
    uint8_t height_bytes = uc8173_global_instance.display_height / 4;
    1b0e:	4b3a      	ldr	r3, [pc, #232]	; (1bf8 <eink_et011tt2_set_pixel_raw+0xec>)
    1b10:	88dc      	ldrh	r4, [r3, #6]
    1b12:	b2a4      	uxth	r4, r4
    uint8_t width_bytes = uc8173_global_instance.display_width / 4;
    1b14:	889e      	ldrh	r6, [r3, #4]
    1b16:	b2b6      	uxth	r6, r6
    if ( (x_set >= 0) && (x_set < uc8173_global_instance.display_width) && (y_set >= 0) && (y_set < uc8173_global_instance.display_height) ) {
    1b18:	889b      	ldrh	r3, [r3, #4]
    1b1a:	b29b      	uxth	r3, r3
    1b1c:	4283      	cmp	r3, r0
    1b1e:	d92b      	bls.n	1b78 <eink_et011tt2_set_pixel_raw+0x6c>
    1b20:	4b35      	ldr	r3, [pc, #212]	; (1bf8 <eink_et011tt2_set_pixel_raw+0xec>)
    1b22:	88dd      	ldrh	r5, [r3, #6]
    1b24:	b2ad      	uxth	r5, r5
    1b26:	428d      	cmp	r5, r1
    1b28:	d926      	bls.n	1b78 <eink_et011tt2_set_pixel_raw+0x6c>
		if ( (uc8173_global_instance.display_config.display_rotation == ROTATE_90) || (uc8173_global_instance.display_config.display_rotation == ROTATE_270) ) {
    1b2a:	781b      	ldrb	r3, [r3, #0]
    1b2c:	2b01      	cmp	r3, #1
    1b2e:	d024      	beq.n	1b7a <eink_et011tt2_set_pixel_raw+0x6e>
    1b30:	4b31      	ldr	r3, [pc, #196]	; (1bf8 <eink_et011tt2_set_pixel_raw+0xec>)
    1b32:	781b      	ldrb	r3, [r3, #0]
    1b34:	2b03      	cmp	r3, #3
    1b36:	d020      	beq.n	1b7a <eink_et011tt2_set_pixel_raw+0x6e>
    uint8_t height_bytes = uc8173_global_instance.display_height / 4;
    1b38:	08a4      	lsrs	r4, r4, #2
			byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1b3a:	b2e4      	uxtb	r4, r4
    1b3c:	4360      	muls	r0, r4
			y1_set = ((y_set - (y_set % 4)) / 4);
    1b3e:	108b      	asrs	r3, r1, #2
			byte_set = ((x_set * height_bytes) - 1 - y1_set);
    1b40:	1ac0      	subs	r0, r0, r3
    1b42:	3801      	subs	r0, #1
			bit_set = (y_set % 4) * 2;
    1b44:	2303      	movs	r3, #3
    1b46:	4019      	ands	r1, r3
    1b48:	0049      	lsls	r1, r1, #1
			eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, (pixel_set & 0x1));
    1b4a:	4b2c      	ldr	r3, [pc, #176]	; (1bfc <eink_et011tt2_set_pixel_raw+0xf0>)
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	691b      	ldr	r3, [r3, #16]
    1b50:	181b      	adds	r3, r3, r0
    if (bit_value == 1) {
    1b52:	07d4      	lsls	r4, r2, #31
    1b54:	d444      	bmi.n	1be0 <eink_et011tt2_set_pixel_raw+0xd4>
        *byte &= ~(1 << bit_number);
    1b56:	2501      	movs	r5, #1
    1b58:	408d      	lsls	r5, r1
    1b5a:	781c      	ldrb	r4, [r3, #0]
    1b5c:	43ac      	bics	r4, r5
    1b5e:	701c      	strb	r4, [r3, #0]
			eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set+1, ((pixel_set >> 1) & 0x1));
    1b60:	4b26      	ldr	r3, [pc, #152]	; (1bfc <eink_et011tt2_set_pixel_raw+0xf0>)
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	691b      	ldr	r3, [r3, #16]
    1b66:	1818      	adds	r0, r3, r0
    1b68:	3101      	adds	r1, #1
    if (bit_value == 1) {
    1b6a:	0793      	lsls	r3, r2, #30
    1b6c:	d43e      	bmi.n	1bec <eink_et011tt2_set_pixel_raw+0xe0>
        *byte &= ~(1 << bit_number);
    1b6e:	2201      	movs	r2, #1
    1b70:	408a      	lsls	r2, r1
    1b72:	7803      	ldrb	r3, [r0, #0]
    1b74:	4393      	bics	r3, r2
    1b76:	7003      	strb	r3, [r0, #0]
}
    1b78:	bd70      	pop	{r4, r5, r6, pc}
			byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1b7a:	3101      	adds	r1, #1
    uint8_t width_bytes = uc8173_global_instance.display_width / 4;
    1b7c:	08b6      	lsrs	r6, r6, #2
			byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1b7e:	b2f3      	uxtb	r3, r6
    1b80:	434b      	muls	r3, r1
			x1_set = 59 - ((x_set - (x_set % 4)) / 4);
    1b82:	1081      	asrs	r1, r0, #2
    1b84:	185b      	adds	r3, r3, r1
			byte_set = (((y_set + 1) * width_bytes ) - 1 - x1_set);
    1b86:	3b3c      	subs	r3, #60	; 0x3c
			bit_set = 7 - ((x_set % 4) * 2);
    1b88:	2103      	movs	r1, #3
    1b8a:	4008      	ands	r0, r1
    1b8c:	0040      	lsls	r0, r0, #1
    1b8e:	2107      	movs	r1, #7
    1b90:	1a09      	subs	r1, r1, r0
    1b92:	b2c9      	uxtb	r1, r1
			eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set, ((pixel_set >> 1) & 0x1));
    1b94:	4c19      	ldr	r4, [pc, #100]	; (1bfc <eink_et011tt2_set_pixel_raw+0xf0>)
    1b96:	6824      	ldr	r4, [r4, #0]
    1b98:	6924      	ldr	r4, [r4, #16]
    1b9a:	18e4      	adds	r4, r4, r3
    if (bit_value == 1) {
    1b9c:	0795      	lsls	r5, r2, #30
    1b9e:	d413      	bmi.n	1bc8 <eink_et011tt2_set_pixel_raw+0xbc>
        *byte &= ~(1 << bit_number);
    1ba0:	2501      	movs	r5, #1
    1ba2:	408d      	lsls	r5, r1
    1ba4:	7821      	ldrb	r1, [r4, #0]
    1ba6:	43a9      	bics	r1, r5
    1ba8:	7021      	strb	r1, [r4, #0]
			eink_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], bit_set-1, (pixel_set & 0x1));
    1baa:	4914      	ldr	r1, [pc, #80]	; (1bfc <eink_et011tt2_set_pixel_raw+0xf0>)
    1bac:	6809      	ldr	r1, [r1, #0]
    1bae:	6909      	ldr	r1, [r1, #16]
    1bb0:	18cb      	adds	r3, r1, r3
    1bb2:	2106      	movs	r1, #6
    1bb4:	1a08      	subs	r0, r1, r0
    1bb6:	b2c0      	uxtb	r0, r0
    if (bit_value == 1) {
    1bb8:	07d2      	lsls	r2, r2, #31
    1bba:	d40b      	bmi.n	1bd4 <eink_et011tt2_set_pixel_raw+0xc8>
        *byte &= ~(1 << bit_number);
    1bbc:	2101      	movs	r1, #1
    1bbe:	4081      	lsls	r1, r0
    1bc0:	781a      	ldrb	r2, [r3, #0]
    1bc2:	438a      	bics	r2, r1
    1bc4:	701a      	strb	r2, [r3, #0]
    1bc6:	e7d7      	b.n	1b78 <eink_et011tt2_set_pixel_raw+0x6c>
        *byte |= 1 << bit_number;
    1bc8:	2501      	movs	r5, #1
    1bca:	408d      	lsls	r5, r1
    1bcc:	7821      	ldrb	r1, [r4, #0]
    1bce:	4329      	orrs	r1, r5
    1bd0:	7021      	strb	r1, [r4, #0]
    1bd2:	e7ea      	b.n	1baa <eink_et011tt2_set_pixel_raw+0x9e>
    1bd4:	2101      	movs	r1, #1
    1bd6:	4081      	lsls	r1, r0
    1bd8:	781a      	ldrb	r2, [r3, #0]
    1bda:	430a      	orrs	r2, r1
    1bdc:	701a      	strb	r2, [r3, #0]
    1bde:	e7cb      	b.n	1b78 <eink_et011tt2_set_pixel_raw+0x6c>
    1be0:	2501      	movs	r5, #1
    1be2:	408d      	lsls	r5, r1
    1be4:	781c      	ldrb	r4, [r3, #0]
    1be6:	432c      	orrs	r4, r5
    1be8:	701c      	strb	r4, [r3, #0]
    1bea:	e7b9      	b.n	1b60 <eink_et011tt2_set_pixel_raw+0x54>
    1bec:	2201      	movs	r2, #1
    1bee:	408a      	lsls	r2, r1
    1bf0:	7803      	ldrb	r3, [r0, #0]
    1bf2:	4313      	orrs	r3, r2
    1bf4:	7003      	strb	r3, [r0, #0]
    1bf6:	e7bf      	b.n	1b78 <eink_et011tt2_set_pixel_raw+0x6c>
    1bf8:	20000390 	.word	0x20000390
    1bfc:	20000430 	.word	0x20000430

00001c00 <eink_et011tt2_set_pixel>:
{    
    1c00:	b510      	push	{r4, lr}
	switch(pixel_colour) {
    1c02:	2a00      	cmp	r2, #0
    1c04:	d003      	beq.n	1c0e <eink_et011tt2_set_pixel+0xe>
            eink_et011tt2_set_pixel_raw(x_set, y_set, 0x3);
    1c06:	2203      	movs	r2, #3
    1c08:	4b02      	ldr	r3, [pc, #8]	; (1c14 <eink_et011tt2_set_pixel+0x14>)
    1c0a:	4798      	blx	r3
}
    1c0c:	bd10      	pop	{r4, pc}
            eink_et011tt2_set_pixel_raw(x_set, y_set, 0x0);
    1c0e:	4b01      	ldr	r3, [pc, #4]	; (1c14 <eink_et011tt2_set_pixel+0x14>)
    1c10:	4798      	blx	r3
            break;
    1c12:	e7fb      	b.n	1c0c <eink_et011tt2_set_pixel+0xc>
    1c14:	00001b0d 	.word	0x00001b0d

00001c18 <eink_send_raw_byte>:
{    
    1c18:	b570      	push	{r4, r5, r6, lr}
    if(!f_send)
    1c1a:	2900      	cmp	r1, #0
    1c1c:	d103      	bne.n	1c26 <eink_send_raw_byte+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c1e:	2220      	movs	r2, #32
    1c20:	23c0      	movs	r3, #192	; 0xc0
    1c22:	05db      	lsls	r3, r3, #23
    1c24:	615a      	str	r2, [r3, #20]
{    
    1c26:	2308      	movs	r3, #8
    1c28:	22c0      	movs	r2, #192	; 0xc0
    1c2a:	05d2      	lsls	r2, r2, #23
    1c2c:	2610      	movs	r6, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c2e:	2480      	movs	r4, #128	; 0x80
    1c30:	e008      	b.n	1c44 <eink_send_raw_byte+0x2c>
    1c32:	6196      	str	r6, [r2, #24]
    1c34:	6194      	str	r4, [r2, #24]
        send_byte=send_byte << 1;
    1c36:	0040      	lsls	r0, r0, #1
    1c38:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c3a:	6154      	str	r4, [r2, #20]
    1c3c:	3b01      	subs	r3, #1
    1c3e:	b2db      	uxtb	r3, r3
    for (i=0;i<8;i++) {
    1c40:	2b00      	cmp	r3, #0
    1c42:	d004      	beq.n	1c4e <eink_send_raw_byte+0x36>
        if (send_byte & 0x80) {
    1c44:	b245      	sxtb	r5, r0
    1c46:	2d00      	cmp	r5, #0
    1c48:	dbf3      	blt.n	1c32 <eink_send_raw_byte+0x1a>
    1c4a:	6156      	str	r6, [r2, #20]
    1c4c:	e7f2      	b.n	1c34 <eink_send_raw_byte+0x1c>
    if(!f_send)
    1c4e:	2900      	cmp	r1, #0
    1c50:	d103      	bne.n	1c5a <eink_send_raw_byte+0x42>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c52:	2220      	movs	r2, #32
    1c54:	23c0      	movs	r3, #192	; 0xc0
    1c56:	05db      	lsls	r3, r3, #23
    1c58:	619a      	str	r2, [r3, #24]
}
    1c5a:	bd70      	pop	{r4, r5, r6, pc}

00001c5c <eink_write_data>:
{    
    1c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c5e:	000c      	movs	r4, r1
    1c60:	0015      	movs	r5, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c62:	26c0      	movs	r6, #192	; 0xc0
    1c64:	05f6      	lsls	r6, r6, #23
    1c66:	2701      	movs	r7, #1
    1c68:	2394      	movs	r3, #148	; 0x94
    1c6a:	50f7      	str	r7, [r6, r3]
    1c6c:	3b74      	subs	r3, #116	; 0x74
    1c6e:	6173      	str	r3, [r6, #20]
    eink_send_raw_byte(command, f_send);
    1c70:	2100      	movs	r1, #0
    1c72:	4b07      	ldr	r3, [pc, #28]	; (1c90 <eink_write_data+0x34>)
    1c74:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c76:	2398      	movs	r3, #152	; 0x98
    1c78:	50f7      	str	r7, [r6, r3]
    if (data_bytes != 0) {
    1c7a:	2d00      	cmp	r5, #0
    1c7c:	d007      	beq.n	1c8e <eink_write_data+0x32>
    1c7e:	1965      	adds	r5, r4, r5
            eink_send_raw_byte(*data, f_send);
    1c80:	4e03      	ldr	r6, [pc, #12]	; (1c90 <eink_write_data+0x34>)
    1c82:	7820      	ldrb	r0, [r4, #0]
    1c84:	2100      	movs	r1, #0
    1c86:	47b0      	blx	r6
            data++;
    1c88:	3401      	adds	r4, #1
        for (i=0;i<data_bytes;i++) {
    1c8a:	42a5      	cmp	r5, r4
    1c8c:	d1f9      	bne.n	1c82 <eink_write_data+0x26>
}
    1c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c90:	00001c19 	.word	0x00001c19

00001c94 <eink_et011tt2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_et011tt2_refresh_display_buffer(void)
{
    1c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c96:	b085      	sub	sp, #20
    /* Enable power to the display */   
    //eink_write_data(UC8173_PON, 0, 0);
    //uc8173_wait_for_busy_low();
    
	/* Upload update waveforms */
	if(uc8173_global_instance.display_config.update_mode == UPDATE_FAST)
    1c98:	4b2c      	ldr	r3, [pc, #176]	; (1d4c <eink_et011tt2_refresh_display_buffer+0xb8>)
    1c9a:	785b      	ldrb	r3, [r3, #1]
    1c9c:	2b01      	cmp	r3, #1
    1c9e:	d03c      	beq.n	1d1a <eink_et011tt2_refresh_display_buffer+0x86>
}

static inline void uc8173_send_et011tt2_a2_lut(void)
{
	/* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_A2)
    1ca0:	4b2a      	ldr	r3, [pc, #168]	; (1d4c <eink_et011tt2_refresh_display_buffer+0xb8>)
    1ca2:	78db      	ldrb	r3, [r3, #3]
    1ca4:	2b02      	cmp	r3, #2
    1ca6:	d014      	beq.n	1cd2 <eink_et011tt2_refresh_display_buffer+0x3e>
	{
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_A2;
    1ca8:	2202      	movs	r2, #2
    1caa:	4b28      	ldr	r3, [pc, #160]	; (1d4c <eink_et011tt2_refresh_display_buffer+0xb8>)
    1cac:	70da      	strb	r2, [r3, #3]
		
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_A2_LUT, 32);
    1cae:	4c28      	ldr	r4, [pc, #160]	; (1d50 <eink_et011tt2_refresh_display_buffer+0xbc>)
    1cb0:	0021      	movs	r1, r4
    1cb2:	3120      	adds	r1, #32
    1cb4:	321e      	adds	r2, #30
    1cb6:	2020      	movs	r0, #32
    1cb8:	4d26      	ldr	r5, [pc, #152]	; (1d54 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1cba:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_A2_LUT, 512);
    1cbc:	0021      	movs	r1, r4
    1cbe:	3140      	adds	r1, #64	; 0x40
    1cc0:	2280      	movs	r2, #128	; 0x80
    1cc2:	0092      	lsls	r2, r2, #2
    1cc4:	2022      	movs	r0, #34	; 0x22
    1cc6:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    1cc8:	2280      	movs	r2, #128	; 0x80
    1cca:	4923      	ldr	r1, [pc, #140]	; (1d58 <eink_et011tt2_refresh_display_buffer+0xc4>)
    1ccc:	3120      	adds	r1, #32
    1cce:	2026      	movs	r0, #38	; 0x26
    1cd0:	47a8      	blx	r5
    } else {
		uc8173_send_et011tt2_a2_lut();
    }
	
    /* Display Refresh */
    eink_data[0] = 0x00; /* GU2 Update Mode */
    1cd2:	a902      	add	r1, sp, #8
    1cd4:	2300      	movs	r3, #0
    1cd6:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1cd8:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1cda:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1cdc:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0xEF; /* W = 249 */
    1cde:	22ef      	movs	r2, #239	; 0xef
    1ce0:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1ce2:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xEF; /* H = 249 */
    1ce4:	718a      	strb	r2, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1ce6:	3ae8      	subs	r2, #232	; 0xe8
    1ce8:	2012      	movs	r0, #18
    1cea:	4b1a      	ldr	r3, [pc, #104]	; (1d54 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1cec:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1cee:	4f1b      	ldr	r7, [pc, #108]	; (1d5c <eink_et011tt2_refresh_display_buffer+0xc8>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    1cf0:	4e1b      	ldr	r6, [pc, #108]	; (1d60 <eink_et011tt2_refresh_display_buffer+0xcc>)
	CRITICAL_SECTION_ENTER();
    1cf2:	a801      	add	r0, sp, #4
    1cf4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1cf6:	23c0      	movs	r3, #192	; 0xc0
    1cf8:	05db      	lsls	r3, r3, #23
    1cfa:	2580      	movs	r5, #128	; 0x80
    1cfc:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1cfe:	22a0      	movs	r2, #160	; 0xa0
    1d00:	4918      	ldr	r1, [pc, #96]	; (1d64 <eink_et011tt2_refresh_display_buffer+0xd0>)
    1d02:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d04:	2190      	movs	r1, #144	; 0x90
    1d06:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d08:	4053      	eors	r3, r2
    1d0a:	401c      	ands	r4, r3
    1d0c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d0e:	a801      	add	r0, sp, #4
    1d10:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1d12:	4225      	tst	r5, r4
    1d14:	d0ed      	beq.n	1cf2 <eink_et011tt2_refresh_display_buffer+0x5e>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    //eink_write_data(UC8173_POF, 0, 0);
    //uc8173_wait_for_busy_low();
}
    1d16:	b005      	add	sp, #20
    1d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_GU)
    1d1a:	4b0c      	ldr	r3, [pc, #48]	; (1d4c <eink_et011tt2_refresh_display_buffer+0xb8>)
    1d1c:	78db      	ldrb	r3, [r3, #3]
    1d1e:	2b01      	cmp	r3, #1
    1d20:	d0d7      	beq.n	1cd2 <eink_et011tt2_refresh_display_buffer+0x3e>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_GU;
    1d22:	2201      	movs	r2, #1
    1d24:	4b09      	ldr	r3, [pc, #36]	; (1d4c <eink_et011tt2_refresh_display_buffer+0xb8>)
    1d26:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_GU_LUT, 32);
    1d28:	4c0f      	ldr	r4, [pc, #60]	; (1d68 <eink_et011tt2_refresh_display_buffer+0xd4>)
    1d2a:	321f      	adds	r2, #31
    1d2c:	0021      	movs	r1, r4
    1d2e:	2020      	movs	r0, #32
    1d30:	4d08      	ldr	r5, [pc, #32]	; (1d54 <eink_et011tt2_refresh_display_buffer+0xc0>)
    1d32:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_GU_LUT, 512);
    1d34:	0021      	movs	r1, r4
    1d36:	3120      	adds	r1, #32
    1d38:	2280      	movs	r2, #128	; 0x80
    1d3a:	0092      	lsls	r2, r2, #2
    1d3c:	2022      	movs	r0, #34	; 0x22
    1d3e:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    1d40:	2280      	movs	r2, #128	; 0x80
    1d42:	4905      	ldr	r1, [pc, #20]	; (1d58 <eink_et011tt2_refresh_display_buffer+0xc4>)
    1d44:	3120      	adds	r1, #32
    1d46:	2026      	movs	r0, #38	; 0x26
    1d48:	47a8      	blx	r5
    1d4a:	e7c2      	b.n	1cd2 <eink_et011tt2_refresh_display_buffer+0x3e>
    1d4c:	20000390 	.word	0x20000390
    1d50:	000057a0 	.word	0x000057a0
    1d54:	00001c5d 	.word	0x00001c5d
    1d58:	00005720 	.word	0x00005720
    1d5c:	0000034d 	.word	0x0000034d
    1d60:	0000035b 	.word	0x0000035b
    1d64:	41004400 	.word	0x41004400
    1d68:	00005520 	.word	0x00005520

00001d6c <eink_ed013tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed013tc1_refresh_display_buffer(void)
{
    1d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d6e:	b087      	sub	sp, #28
    uint8_t eink_data[7];
    
    /* Enable power to the display */   
    eink_write_data(UC8173_PON, 0, 0);
    1d70:	2200      	movs	r2, #0
    1d72:	2100      	movs	r1, #0
    1d74:	2004      	movs	r0, #4
    1d76:	4b35      	ldr	r3, [pc, #212]	; (1e4c <eink_ed013tc1_refresh_display_buffer+0xe0>)
    1d78:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1d7a:	4f35      	ldr	r7, [pc, #212]	; (1e50 <eink_ed013tc1_refresh_display_buffer+0xe4>)
	CRITICAL_SECTION_LEAVE();
    1d7c:	4e35      	ldr	r6, [pc, #212]	; (1e54 <eink_ed013tc1_refresh_display_buffer+0xe8>)
	CRITICAL_SECTION_ENTER();
    1d7e:	a801      	add	r0, sp, #4
    1d80:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d82:	23c0      	movs	r3, #192	; 0xc0
    1d84:	05db      	lsls	r3, r3, #23
    1d86:	2580      	movs	r5, #128	; 0x80
    1d88:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d8a:	22a0      	movs	r2, #160	; 0xa0
    1d8c:	4932      	ldr	r1, [pc, #200]	; (1e58 <eink_ed013tc1_refresh_display_buffer+0xec>)
    1d8e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d90:	2190      	movs	r1, #144	; 0x90
    1d92:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1d94:	4053      	eors	r3, r2
    1d96:	401c      	ands	r4, r3
    1d98:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1d9a:	a801      	add	r0, sp, #4
    1d9c:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1d9e:	4225      	tst	r5, r4
    1da0:	d0ed      	beq.n	1d7e <eink_ed013tc1_refresh_display_buffer+0x12>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ED013TC1_GC2)
    1da2:	4b2e      	ldr	r3, [pc, #184]	; (1e5c <eink_ed013tc1_refresh_display_buffer+0xf0>)
    1da4:	78db      	ldrb	r3, [r3, #3]
    1da6:	2b00      	cmp	r3, #0
    1da8:	d13e      	bne.n	1e28 <eink_ed013tc1_refresh_display_buffer+0xbc>
    uc8173_wait_for_busy_low();
    
    uc8173_send_ed013tc1_gc2_lut();
	
    /* Display Refresh */
    eink_data[0] = 0x01; /* GU2 Update Mode */
    1daa:	a904      	add	r1, sp, #16
    1dac:	2301      	movs	r3, #1
    1dae:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    1db0:	2300      	movs	r3, #0
    1db2:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    1db4:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    1db6:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    1db8:	227f      	movs	r2, #127	; 0x7f
    1dba:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    1dbc:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    1dbe:	33ff      	adds	r3, #255	; 0xff
    1dc0:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    1dc2:	3a78      	subs	r2, #120	; 0x78
    1dc4:	2012      	movs	r0, #18
    1dc6:	4b21      	ldr	r3, [pc, #132]	; (1e4c <eink_ed013tc1_refresh_display_buffer+0xe0>)
    1dc8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1dca:	4f21      	ldr	r7, [pc, #132]	; (1e50 <eink_ed013tc1_refresh_display_buffer+0xe4>)
	CRITICAL_SECTION_LEAVE();
    1dcc:	4e21      	ldr	r6, [pc, #132]	; (1e54 <eink_ed013tc1_refresh_display_buffer+0xe8>)
	CRITICAL_SECTION_ENTER();
    1dce:	a802      	add	r0, sp, #8
    1dd0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1dd2:	23c0      	movs	r3, #192	; 0xc0
    1dd4:	05db      	lsls	r3, r3, #23
    1dd6:	2580      	movs	r5, #128	; 0x80
    1dd8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1dda:	22a0      	movs	r2, #160	; 0xa0
    1ddc:	491e      	ldr	r1, [pc, #120]	; (1e58 <eink_ed013tc1_refresh_display_buffer+0xec>)
    1dde:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1de0:	2190      	movs	r1, #144	; 0x90
    1de2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1de4:	4053      	eors	r3, r2
    1de6:	401c      	ands	r4, r3
    1de8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1dea:	a802      	add	r0, sp, #8
    1dec:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    1dee:	4225      	tst	r5, r4
    1df0:	d0ed      	beq.n	1dce <eink_ed013tc1_refresh_display_buffer+0x62>
    uc8173_wait_for_busy_low();
    
    /* Disable power to the display */
    eink_write_data(UC8173_POF, 0, 0);
    1df2:	2200      	movs	r2, #0
    1df4:	2100      	movs	r1, #0
    1df6:	2002      	movs	r0, #2
    1df8:	4b14      	ldr	r3, [pc, #80]	; (1e4c <eink_ed013tc1_refresh_display_buffer+0xe0>)
    1dfa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1dfc:	4f14      	ldr	r7, [pc, #80]	; (1e50 <eink_ed013tc1_refresh_display_buffer+0xe4>)
	CRITICAL_SECTION_LEAVE();
    1dfe:	4e15      	ldr	r6, [pc, #84]	; (1e54 <eink_ed013tc1_refresh_display_buffer+0xe8>)
	CRITICAL_SECTION_ENTER();
    1e00:	a803      	add	r0, sp, #12
    1e02:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e04:	23c0      	movs	r3, #192	; 0xc0
    1e06:	05db      	lsls	r3, r3, #23
    1e08:	2580      	movs	r5, #128	; 0x80
    1e0a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e0c:	22a0      	movs	r2, #160	; 0xa0
    1e0e:	4912      	ldr	r1, [pc, #72]	; (1e58 <eink_ed013tc1_refresh_display_buffer+0xec>)
    1e10:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e12:	2190      	movs	r1, #144	; 0x90
    1e14:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e16:	4053      	eors	r3, r2
    1e18:	401c      	ands	r4, r3
    1e1a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e1c:	a803      	add	r0, sp, #12
    1e1e:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    1e20:	4225      	tst	r5, r4
    1e22:	d1ed      	bne.n	1e00 <eink_ed013tc1_refresh_display_buffer+0x94>
    uc8173_wait_for_busy_high();
}
    1e24:	b007      	add	sp, #28
    1e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ED013TC1_GC2;
    1e28:	2200      	movs	r2, #0
    1e2a:	4b0c      	ldr	r3, [pc, #48]	; (1e5c <eink_ed013tc1_refresh_display_buffer+0xf0>)
    1e2c:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    1e2e:	3220      	adds	r2, #32
    1e30:	2155      	movs	r1, #85	; 0x55
    1e32:	2020      	movs	r0, #32
    1e34:	4c05      	ldr	r4, [pc, #20]	; (1e4c <eink_ed013tc1_refresh_display_buffer+0xe0>)
    1e36:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    1e38:	2280      	movs	r2, #128	; 0x80
    1e3a:	0092      	lsls	r2, r2, #2
    1e3c:	2181      	movs	r1, #129	; 0x81
    1e3e:	2022      	movs	r0, #34	; 0x22
    1e40:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);	
    1e42:	2280      	movs	r2, #128	; 0x80
    1e44:	2100      	movs	r1, #0
    1e46:	2026      	movs	r0, #38	; 0x26
    1e48:	47a0      	blx	r4
    1e4a:	e7ae      	b.n	1daa <eink_ed013tc1_refresh_display_buffer+0x3e>
    1e4c:	00001c5d 	.word	0x00001c5d
    1e50:	0000034d 	.word	0x0000034d
    1e54:	0000035b 	.word	0x0000035b
    1e58:	41004400 	.word	0x41004400
    1e5c:	20000390 	.word	0x20000390

00001e60 <eink_ed029tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed029tc1_refresh_display_buffer(void)
{
    1e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e62:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    1e64:	2200      	movs	r2, #0
    1e66:	2100      	movs	r1, #0
    1e68:	2004      	movs	r0, #4
    1e6a:	4c1a      	ldr	r4, [pc, #104]	; (1ed4 <eink_ed029tc1_refresh_display_buffer+0x74>)
    1e6c:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    1e6e:	2200      	movs	r2, #0
    1e70:	2100      	movs	r1, #0
    1e72:	2012      	movs	r0, #18
    1e74:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1e76:	4f18      	ldr	r7, [pc, #96]	; (1ed8 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1e78:	4e18      	ldr	r6, [pc, #96]	; (1edc <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1e7a:	4668      	mov	r0, sp
    1e7c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1e7e:	23c0      	movs	r3, #192	; 0xc0
    1e80:	05db      	lsls	r3, r3, #23
    1e82:	2580      	movs	r5, #128	; 0x80
    1e84:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1e86:	22a0      	movs	r2, #160	; 0xa0
    1e88:	4915      	ldr	r1, [pc, #84]	; (1ee0 <eink_ed029tc1_refresh_display_buffer+0x80>)
    1e8a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1e8c:	2190      	movs	r1, #144	; 0x90
    1e8e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1e90:	4053      	eors	r3, r2
    1e92:	401c      	ands	r4, r3
    1e94:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1e96:	4668      	mov	r0, sp
    1e98:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8151_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    1e9a:	4225      	tst	r5, r4
    1e9c:	d0ed      	beq.n	1e7a <eink_ed029tc1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    1e9e:	2200      	movs	r2, #0
    1ea0:	2100      	movs	r1, #0
    1ea2:	2002      	movs	r0, #2
    1ea4:	4b0b      	ldr	r3, [pc, #44]	; (1ed4 <eink_ed029tc1_refresh_display_buffer+0x74>)
    1ea6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1ea8:	4f0b      	ldr	r7, [pc, #44]	; (1ed8 <eink_ed029tc1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    1eaa:	4e0c      	ldr	r6, [pc, #48]	; (1edc <eink_ed029tc1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    1eac:	a801      	add	r0, sp, #4
    1eae:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1eb0:	23c0      	movs	r3, #192	; 0xc0
    1eb2:	05db      	lsls	r3, r3, #23
    1eb4:	2580      	movs	r5, #128	; 0x80
    1eb6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1eb8:	22a0      	movs	r2, #160	; 0xa0
    1eba:	4909      	ldr	r1, [pc, #36]	; (1ee0 <eink_ed029tc1_refresh_display_buffer+0x80>)
    1ebc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ebe:	2190      	movs	r1, #144	; 0x90
    1ec0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ec2:	4053      	eors	r3, r2
    1ec4:	401c      	ands	r4, r3
    1ec6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ec8:	a801      	add	r0, sp, #4
    1eca:	47b0      	blx	r6
    1ecc:	4225      	tst	r5, r4
    1ece:	d0ed      	beq.n	1eac <eink_ed029tc1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    1ed0:	b003      	add	sp, #12
    1ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed4:	00001c5d 	.word	0x00001c5d
    1ed8:	0000034d 	.word	0x0000034d
    1edc:	0000035b 	.word	0x0000035b
    1ee0:	41004400 	.word	0x41004400

00001ee4 <eink_ed029tc1_put_display_buffer>:
{
    1ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ee6:	46c6      	mov	lr, r8
    1ee8:	b500      	push	{lr}
    1eea:	b084      	sub	sp, #16
    1eec:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    1eee:	2200      	movs	r2, #0
    1ef0:	2100      	movs	r1, #0
    1ef2:	2004      	movs	r0, #4
    1ef4:	4c44      	ldr	r4, [pc, #272]	; (2008 <STACK_SIZE+0x8>)
    1ef6:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1ef8:	4b44      	ldr	r3, [pc, #272]	; (200c <STACK_SIZE+0xc>)
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	6919      	ldr	r1, [r3, #16]
    1efe:	2294      	movs	r2, #148	; 0x94
    1f00:	0152      	lsls	r2, r2, #5
    1f02:	2010      	movs	r0, #16
    1f04:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1f06:	2200      	movs	r2, #0
    1f08:	2100      	movs	r1, #0
    1f0a:	2011      	movs	r0, #17
    1f0c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1f0e:	4d40      	ldr	r5, [pc, #256]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_LEAVE();
    1f10:	4f40      	ldr	r7, [pc, #256]	; (2014 <STACK_SIZE+0x14>)
	CRITICAL_SECTION_ENTER();
    1f12:	4668      	mov	r0, sp
    1f14:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f16:	23c0      	movs	r3, #192	; 0xc0
    1f18:	05db      	lsls	r3, r3, #23
    1f1a:	2680      	movs	r6, #128	; 0x80
    1f1c:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f1e:	22a0      	movs	r2, #160	; 0xa0
    1f20:	493d      	ldr	r1, [pc, #244]	; (2018 <STACK_SIZE+0x18>)
    1f22:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f24:	2190      	movs	r1, #144	; 0x90
    1f26:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f28:	4053      	eors	r3, r2
    1f2a:	401c      	ands	r4, r3
    1f2c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f2e:	4668      	mov	r0, sp
    1f30:	47b8      	blx	r7
    1f32:	4226      	tst	r6, r4
    1f34:	d0ed      	beq.n	1f12 <eink_ed029tc1_put_display_buffer+0x2e>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED029TC1_DISPLAY_BUFFER_SIZE);
    1f36:	4b35      	ldr	r3, [pc, #212]	; (200c <STACK_SIZE+0xc>)
    1f38:	681b      	ldr	r3, [r3, #0]
    1f3a:	6959      	ldr	r1, [r3, #20]
    1f3c:	2294      	movs	r2, #148	; 0x94
    1f3e:	0152      	lsls	r2, r2, #5
    1f40:	2013      	movs	r0, #19
    1f42:	4c31      	ldr	r4, [pc, #196]	; (2008 <STACK_SIZE+0x8>)
    1f44:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    1f46:	2200      	movs	r2, #0
    1f48:	2100      	movs	r1, #0
    1f4a:	2011      	movs	r0, #17
    1f4c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    1f4e:	4d30      	ldr	r5, [pc, #192]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_LEAVE();
    1f50:	4f30      	ldr	r7, [pc, #192]	; (2014 <STACK_SIZE+0x14>)
	CRITICAL_SECTION_ENTER();
    1f52:	a801      	add	r0, sp, #4
    1f54:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f56:	23c0      	movs	r3, #192	; 0xc0
    1f58:	05db      	lsls	r3, r3, #23
    1f5a:	2680      	movs	r6, #128	; 0x80
    1f5c:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f5e:	22a0      	movs	r2, #160	; 0xa0
    1f60:	492d      	ldr	r1, [pc, #180]	; (2018 <STACK_SIZE+0x18>)
    1f62:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f64:	2190      	movs	r1, #144	; 0x90
    1f66:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1f68:	4053      	eors	r3, r2
    1f6a:	401c      	ands	r4, r3
    1f6c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1f6e:	a801      	add	r0, sp, #4
    1f70:	47b8      	blx	r7
    1f72:	4226      	tst	r6, r4
    1f74:	d0ed      	beq.n	1f52 <eink_ed029tc1_put_display_buffer+0x6e>
    if(refresh_display) {
    1f76:	4643      	mov	r3, r8
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d12b      	bne.n	1fd4 <eink_ed029tc1_put_display_buffer+0xf0>
    eink_write_data(UC8151_POF, 0, 0);
    1f7c:	2200      	movs	r2, #0
    1f7e:	2100      	movs	r1, #0
    1f80:	2002      	movs	r0, #2
    1f82:	4b21      	ldr	r3, [pc, #132]	; (2008 <STACK_SIZE+0x8>)
    1f84:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1f86:	4f22      	ldr	r7, [pc, #136]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_LEAVE();
    1f88:	4e22      	ldr	r6, [pc, #136]	; (2014 <STACK_SIZE+0x14>)
	CRITICAL_SECTION_ENTER();
    1f8a:	a803      	add	r0, sp, #12
    1f8c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f8e:	23c0      	movs	r3, #192	; 0xc0
    1f90:	05db      	lsls	r3, r3, #23
    1f92:	2580      	movs	r5, #128	; 0x80
    1f94:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1f96:	22a0      	movs	r2, #160	; 0xa0
    1f98:	491f      	ldr	r1, [pc, #124]	; (2018 <STACK_SIZE+0x18>)
    1f9a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f9c:	2190      	movs	r1, #144	; 0x90
    1f9e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fa0:	4053      	eors	r3, r2
    1fa2:	401c      	ands	r4, r3
    1fa4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1fa6:	a803      	add	r0, sp, #12
    1fa8:	47b0      	blx	r6
    1faa:	4225      	tst	r5, r4
    1fac:	d0ed      	beq.n	1f8a <eink_ed029tc1_put_display_buffer+0xa6>
    if (uc8151_global_instance.panel_settings.display_colours == B_W_PIXELS) {
    1fae:	4b1b      	ldr	r3, [pc, #108]	; (201c <STACK_SIZE+0x1c>)
    1fb0:	789b      	ldrb	r3, [r3, #2]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d10a      	bne.n	1fcc <eink_ed029tc1_put_display_buffer+0xe8>
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1fb6:	4c15      	ldr	r4, [pc, #84]	; (200c <STACK_SIZE+0xc>)
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1fb8:	2094      	movs	r0, #148	; 0x94
    1fba:	0140      	lsls	r0, r0, #5
            ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    1fbc:	6822      	ldr	r2, [r4, #0]
    1fbe:	6951      	ldr	r1, [r2, #20]
    1fc0:	5cc9      	ldrb	r1, [r1, r3]
    1fc2:	6912      	ldr	r2, [r2, #16]
    1fc4:	54d1      	strb	r1, [r2, r3]
    1fc6:	3301      	adds	r3, #1
        for (i=0;i<GFX_ED029TC1_DISPLAY_BUFFER_SIZE;i++) {
    1fc8:	4283      	cmp	r3, r0
    1fca:	d1f7      	bne.n	1fbc <eink_ed029tc1_put_display_buffer+0xd8>
}
    1fcc:	b004      	add	sp, #16
    1fce:	bc04      	pop	{r2}
    1fd0:	4690      	mov	r8, r2
    1fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    1fd4:	2200      	movs	r2, #0
    1fd6:	2100      	movs	r1, #0
    1fd8:	2012      	movs	r0, #18
    1fda:	4b0b      	ldr	r3, [pc, #44]	; (2008 <STACK_SIZE+0x8>)
    1fdc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1fde:	4f0c      	ldr	r7, [pc, #48]	; (2010 <STACK_SIZE+0x10>)
	CRITICAL_SECTION_LEAVE();
    1fe0:	4e0c      	ldr	r6, [pc, #48]	; (2014 <STACK_SIZE+0x14>)
	CRITICAL_SECTION_ENTER();
    1fe2:	a802      	add	r0, sp, #8
    1fe4:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1fe6:	23c0      	movs	r3, #192	; 0xc0
    1fe8:	05db      	lsls	r3, r3, #23
    1fea:	2580      	movs	r5, #128	; 0x80
    1fec:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fee:	22a0      	movs	r2, #160	; 0xa0
    1ff0:	4909      	ldr	r1, [pc, #36]	; (2018 <STACK_SIZE+0x18>)
    1ff2:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1ff4:	2190      	movs	r1, #144	; 0x90
    1ff6:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1ff8:	4053      	eors	r3, r2
    1ffa:	401c      	ands	r4, r3
    1ffc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1ffe:	a802      	add	r0, sp, #8
    2000:	47b0      	blx	r6
    2002:	4225      	tst	r5, r4
    2004:	d0ed      	beq.n	1fe2 <eink_ed029tc1_put_display_buffer+0xfe>
    2006:	e7b9      	b.n	1f7c <eink_ed029tc1_put_display_buffer+0x98>
    2008:	00001c5d 	.word	0x00001c5d
    200c:	20000430 	.word	0x20000430
    2010:	0000034d 	.word	0x0000034d
    2014:	0000035b 	.word	0x0000035b
    2018:	41004400 	.word	0x41004400
    201c:	200003f8 	.word	0x200003f8

00002020 <eink_el026tr1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_el026tr1_refresh_display_buffer(void)
{
    2020:	b5f0      	push	{r4, r5, r6, r7, lr}
    2022:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8151_PON, 0, 0);
    2024:	2200      	movs	r2, #0
    2026:	2100      	movs	r1, #0
    2028:	2004      	movs	r0, #4
    202a:	4c1a      	ldr	r4, [pc, #104]	; (2094 <eink_el026tr1_refresh_display_buffer+0x74>)
    202c:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8151_DRF, 0, 0);
    202e:	2200      	movs	r2, #0
    2030:	2100      	movs	r1, #0
    2032:	2012      	movs	r0, #18
    2034:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2036:	4f18      	ldr	r7, [pc, #96]	; (2098 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    2038:	4e18      	ldr	r6, [pc, #96]	; (209c <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    203a:	4668      	mov	r0, sp
    203c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    203e:	23c0      	movs	r3, #192	; 0xc0
    2040:	05db      	lsls	r3, r3, #23
    2042:	2580      	movs	r5, #128	; 0x80
    2044:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2046:	22a0      	movs	r2, #160	; 0xa0
    2048:	4915      	ldr	r1, [pc, #84]	; (20a0 <eink_el026tr1_refresh_display_buffer+0x80>)
    204a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    204c:	2190      	movs	r1, #144	; 0x90
    204e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2050:	4053      	eors	r3, r2
    2052:	401c      	ands	r4, r3
    2054:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2056:	4668      	mov	r0, sp
    2058:	47b0      	blx	r6
    205a:	4225      	tst	r5, r4
    205c:	d0ed      	beq.n	203a <eink_el026tr1_refresh_display_buffer+0x1a>
    uc8151_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8151_POF, 0, 0);
    205e:	2200      	movs	r2, #0
    2060:	2100      	movs	r1, #0
    2062:	2002      	movs	r0, #2
    2064:	4b0b      	ldr	r3, [pc, #44]	; (2094 <eink_el026tr1_refresh_display_buffer+0x74>)
    2066:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2068:	4f0b      	ldr	r7, [pc, #44]	; (2098 <eink_el026tr1_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    206a:	4e0c      	ldr	r6, [pc, #48]	; (209c <eink_el026tr1_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    206c:	a801      	add	r0, sp, #4
    206e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2070:	23c0      	movs	r3, #192	; 0xc0
    2072:	05db      	lsls	r3, r3, #23
    2074:	2580      	movs	r5, #128	; 0x80
    2076:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2078:	22a0      	movs	r2, #160	; 0xa0
    207a:	4909      	ldr	r1, [pc, #36]	; (20a0 <eink_el026tr1_refresh_display_buffer+0x80>)
    207c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    207e:	2190      	movs	r1, #144	; 0x90
    2080:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2082:	4053      	eors	r3, r2
    2084:	401c      	ands	r4, r3
    2086:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2088:	a801      	add	r0, sp, #4
    208a:	47b0      	blx	r6
    208c:	4225      	tst	r5, r4
    208e:	d0ed      	beq.n	206c <eink_el026tr1_refresh_display_buffer+0x4c>
    uc8151_wait_for_busy();
}
    2090:	b003      	add	sp, #12
    2092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2094:	00001c5d 	.word	0x00001c5d
    2098:	0000034d 	.word	0x0000034d
    209c:	0000035b 	.word	0x0000035b
    20a0:	41004400 	.word	0x41004400

000020a4 <eink_el026tr1_put_display_buffer>:
{
    20a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20a6:	46c6      	mov	lr, r8
    20a8:	b500      	push	{lr}
    20aa:	b084      	sub	sp, #16
    20ac:	4680      	mov	r8, r0
    eink_write_data(UC8151_PON, 0, 0);
    20ae:	2200      	movs	r2, #0
    20b0:	2100      	movs	r1, #0
    20b2:	2004      	movs	r0, #4
    20b4:	4c3c      	ldr	r4, [pc, #240]	; (21a8 <eink_el026tr1_put_display_buffer+0x104>)
    20b6:	47a0      	blx	r4
    eink_write_data(UC8151_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    20b8:	4b3c      	ldr	r3, [pc, #240]	; (21ac <eink_el026tr1_put_display_buffer+0x108>)
    20ba:	681b      	ldr	r3, [r3, #0]
    20bc:	6919      	ldr	r1, [r3, #16]
    20be:	4a3c      	ldr	r2, [pc, #240]	; (21b0 <eink_el026tr1_put_display_buffer+0x10c>)
    20c0:	2010      	movs	r0, #16
    20c2:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    20c4:	2200      	movs	r2, #0
    20c6:	2100      	movs	r1, #0
    20c8:	2011      	movs	r0, #17
    20ca:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    20cc:	4d39      	ldr	r5, [pc, #228]	; (21b4 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    20ce:	4f3a      	ldr	r7, [pc, #232]	; (21b8 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    20d0:	4668      	mov	r0, sp
    20d2:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20d4:	23c0      	movs	r3, #192	; 0xc0
    20d6:	05db      	lsls	r3, r3, #23
    20d8:	2680      	movs	r6, #128	; 0x80
    20da:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20dc:	22a0      	movs	r2, #160	; 0xa0
    20de:	4937      	ldr	r1, [pc, #220]	; (21bc <eink_el026tr1_put_display_buffer+0x118>)
    20e0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20e2:	2190      	movs	r1, #144	; 0x90
    20e4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    20e6:	4053      	eors	r3, r2
    20e8:	401c      	ands	r4, r3
    20ea:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    20ec:	4668      	mov	r0, sp
    20ee:	47b8      	blx	r7
    20f0:	4226      	tst	r6, r4
    20f2:	d0ed      	beq.n	20d0 <eink_el026tr1_put_display_buffer+0x2c>
    eink_write_data(UC8151_DTM2, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_EL026TR1_DISPLAY_BUFFER_SIZE);
    20f4:	4b2d      	ldr	r3, [pc, #180]	; (21ac <eink_el026tr1_put_display_buffer+0x108>)
    20f6:	681b      	ldr	r3, [r3, #0]
    20f8:	6959      	ldr	r1, [r3, #20]
    20fa:	4a2d      	ldr	r2, [pc, #180]	; (21b0 <eink_el026tr1_put_display_buffer+0x10c>)
    20fc:	2013      	movs	r0, #19
    20fe:	4c2a      	ldr	r4, [pc, #168]	; (21a8 <eink_el026tr1_put_display_buffer+0x104>)
    2100:	47a0      	blx	r4
    eink_write_data(UC8151_DSP, 0, 0);
    2102:	2200      	movs	r2, #0
    2104:	2100      	movs	r1, #0
    2106:	2011      	movs	r0, #17
    2108:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    210a:	4d2a      	ldr	r5, [pc, #168]	; (21b4 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    210c:	4f2a      	ldr	r7, [pc, #168]	; (21b8 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    210e:	a801      	add	r0, sp, #4
    2110:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2112:	23c0      	movs	r3, #192	; 0xc0
    2114:	05db      	lsls	r3, r3, #23
    2116:	2680      	movs	r6, #128	; 0x80
    2118:	599c      	ldr	r4, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    211a:	22a0      	movs	r2, #160	; 0xa0
    211c:	4927      	ldr	r1, [pc, #156]	; (21bc <eink_el026tr1_put_display_buffer+0x118>)
    211e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2120:	2190      	movs	r1, #144	; 0x90
    2122:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2124:	4053      	eors	r3, r2
    2126:	401c      	ands	r4, r3
    2128:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    212a:	a801      	add	r0, sp, #4
    212c:	47b8      	blx	r7
    212e:	4226      	tst	r6, r4
    2130:	d0ed      	beq.n	210e <eink_el026tr1_put_display_buffer+0x6a>
    if(refresh_display) {
    2132:	4643      	mov	r3, r8
    2134:	2b00      	cmp	r3, #0
    2136:	d11c      	bne.n	2172 <eink_el026tr1_put_display_buffer+0xce>
    eink_write_data(UC8151_POF, 0, 0);
    2138:	2200      	movs	r2, #0
    213a:	2100      	movs	r1, #0
    213c:	2002      	movs	r0, #2
    213e:	4b1a      	ldr	r3, [pc, #104]	; (21a8 <eink_el026tr1_put_display_buffer+0x104>)
    2140:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2142:	4f1c      	ldr	r7, [pc, #112]	; (21b4 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    2144:	4e1c      	ldr	r6, [pc, #112]	; (21b8 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    2146:	a803      	add	r0, sp, #12
    2148:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    214a:	23c0      	movs	r3, #192	; 0xc0
    214c:	05db      	lsls	r3, r3, #23
    214e:	2580      	movs	r5, #128	; 0x80
    2150:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2152:	22a0      	movs	r2, #160	; 0xa0
    2154:	4919      	ldr	r1, [pc, #100]	; (21bc <eink_el026tr1_put_display_buffer+0x118>)
    2156:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2158:	2190      	movs	r1, #144	; 0x90
    215a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    215c:	4053      	eors	r3, r2
    215e:	401c      	ands	r4, r3
    2160:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2162:	a803      	add	r0, sp, #12
    2164:	47b0      	blx	r6
    2166:	4225      	tst	r5, r4
    2168:	d0ed      	beq.n	2146 <eink_el026tr1_put_display_buffer+0xa2>
}
    216a:	b004      	add	sp, #16
    216c:	bc04      	pop	{r2}
    216e:	4690      	mov	r8, r2
    2170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8151_DRF, 0, 0);
    2172:	2200      	movs	r2, #0
    2174:	2100      	movs	r1, #0
    2176:	2012      	movs	r0, #18
    2178:	4b0b      	ldr	r3, [pc, #44]	; (21a8 <eink_el026tr1_put_display_buffer+0x104>)
    217a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    217c:	4f0d      	ldr	r7, [pc, #52]	; (21b4 <eink_el026tr1_put_display_buffer+0x110>)
	CRITICAL_SECTION_LEAVE();
    217e:	4e0e      	ldr	r6, [pc, #56]	; (21b8 <eink_el026tr1_put_display_buffer+0x114>)
	CRITICAL_SECTION_ENTER();
    2180:	a802      	add	r0, sp, #8
    2182:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2184:	23c0      	movs	r3, #192	; 0xc0
    2186:	05db      	lsls	r3, r3, #23
    2188:	2580      	movs	r5, #128	; 0x80
    218a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    218c:	22a0      	movs	r2, #160	; 0xa0
    218e:	490b      	ldr	r1, [pc, #44]	; (21bc <eink_el026tr1_put_display_buffer+0x118>)
    2190:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2192:	2190      	movs	r1, #144	; 0x90
    2194:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2196:	4053      	eors	r3, r2
    2198:	401c      	ands	r4, r3
    219a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    219c:	a802      	add	r0, sp, #8
    219e:	47b0      	blx	r6
    21a0:	4225      	tst	r5, r4
    21a2:	d0ed      	beq.n	2180 <eink_el026tr1_put_display_buffer+0xdc>
    21a4:	e7c8      	b.n	2138 <eink_el026tr1_put_display_buffer+0x94>
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00001c5d 	.word	0x00001c5d
    21ac:	20000430 	.word	0x20000430
    21b0:	000015f8 	.word	0x000015f8
    21b4:	0000034d 	.word	0x0000034d
    21b8:	0000035b 	.word	0x0000035b
    21bc:	41004400 	.word	0x41004400

000021c0 <eink_hink_e0154a05_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_hink_e0154a05_refresh_display_buffer(void)
{
    21c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21c2:	b085      	sub	sp, #20
    uint8_t eink_data[1];
    uint8_t temperature_value = 20;
    
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    21c4:	4b23      	ldr	r3, [pc, #140]	; (2254 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    21c6:	785b      	ldrb	r3, [r3, #1]
    21c8:	2b01      	cmp	r3, #1
    21ca:	d036      	beq.n	223a <eink_hink_e0154a05_refresh_display_buffer+0x7a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
        else
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
        
    } else {
        eink_data[0] = 0xF7; /* Slow Update */
    21cc:	22f7      	movs	r2, #247	; 0xf7
    21ce:	ab03      	add	r3, sp, #12
    21d0:	701a      	strb	r2, [r3, #0]
    }

    /* Display Update Control 2 */
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    21d2:	2201      	movs	r2, #1
    21d4:	a903      	add	r1, sp, #12
    21d6:	2022      	movs	r0, #34	; 0x22
    21d8:	4b1f      	ldr	r3, [pc, #124]	; (2258 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    21da:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    21dc:	4f1f      	ldr	r7, [pc, #124]	; (225c <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    21de:	4e20      	ldr	r6, [pc, #128]	; (2260 <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    21e0:	a801      	add	r0, sp, #4
    21e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    21e4:	23c0      	movs	r3, #192	; 0xc0
    21e6:	05db      	lsls	r3, r3, #23
    21e8:	2580      	movs	r5, #128	; 0x80
    21ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    21ec:	22a0      	movs	r2, #160	; 0xa0
    21ee:	491d      	ldr	r1, [pc, #116]	; (2264 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    21f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    21f2:	2190      	movs	r1, #144	; 0x90
    21f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    21f6:	4053      	eors	r3, r2
    21f8:	401c      	ands	r4, r3
    21fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    21fc:	a801      	add	r0, sp, #4
    21fe:	47b0      	blx	r6
 * hold the MCU until it returns LOW again.
 */
static inline void ssd1608_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(gpio_get_pin_level(EINK_BUSY));
    2200:	4225      	tst	r5, r4
    2202:	d1ed      	bne.n	21e0 <eink_hink_e0154a05_refresh_display_buffer+0x20>
    ssd1608_wait_for_busy();
    
    /* Master Activation */
    eink_write_data(SSD1608_MA, 0, 0);
    2204:	2200      	movs	r2, #0
    2206:	2100      	movs	r1, #0
    2208:	2020      	movs	r0, #32
    220a:	4b13      	ldr	r3, [pc, #76]	; (2258 <eink_hink_e0154a05_refresh_display_buffer+0x98>)
    220c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    220e:	4f13      	ldr	r7, [pc, #76]	; (225c <eink_hink_e0154a05_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_LEAVE();
    2210:	4e13      	ldr	r6, [pc, #76]	; (2260 <eink_hink_e0154a05_refresh_display_buffer+0xa0>)
	CRITICAL_SECTION_ENTER();
    2212:	a802      	add	r0, sp, #8
    2214:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2216:	23c0      	movs	r3, #192	; 0xc0
    2218:	05db      	lsls	r3, r3, #23
    221a:	2580      	movs	r5, #128	; 0x80
    221c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    221e:	22a0      	movs	r2, #160	; 0xa0
    2220:	4910      	ldr	r1, [pc, #64]	; (2264 <eink_hink_e0154a05_refresh_display_buffer+0xa4>)
    2222:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2224:	2190      	movs	r1, #144	; 0x90
    2226:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2228:	4053      	eors	r3, r2
    222a:	401c      	ands	r4, r3
    222c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    222e:	a802      	add	r0, sp, #8
    2230:	47b0      	blx	r6
    2232:	4225      	tst	r5, r4
    2234:	d1ed      	bne.n	2212 <eink_hink_e0154a05_refresh_display_buffer+0x52>
    ssd1608_wait_for_busy();
}
    2236:	b005      	add	sp, #20
    2238:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    223a:	4b06      	ldr	r3, [pc, #24]	; (2254 <eink_hink_e0154a05_refresh_display_buffer+0x94>)
    223c:	789b      	ldrb	r3, [r3, #2]
    223e:	2b00      	cmp	r3, #0
    2240:	d103      	bne.n	224a <eink_hink_e0154a05_refresh_display_buffer+0x8a>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    2242:	22c7      	movs	r2, #199	; 0xc7
    2244:	ab03      	add	r3, sp, #12
    2246:	701a      	strb	r2, [r3, #0]
    2248:	e7c3      	b.n	21d2 <eink_hink_e0154a05_refresh_display_buffer+0x12>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    224a:	22ff      	movs	r2, #255	; 0xff
    224c:	ab03      	add	r3, sp, #12
    224e:	701a      	strb	r2, [r3, #0]
    2250:	e7bf      	b.n	21d2 <eink_hink_e0154a05_refresh_display_buffer+0x12>
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	200003b8 	.word	0x200003b8
    2258:	00001c5d 	.word	0x00001c5d
    225c:	0000034d 	.word	0x0000034d
    2260:	0000035b 	.word	0x0000035b
    2264:	41004400 	.word	0x41004400

00002268 <eink_ac040tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac040tc1_refresh_display_buffer(void)
{
    2268:	b5f0      	push	{r4, r5, r6, r7, lr}
    226a:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    226c:	2200      	movs	r2, #0
    226e:	2100      	movs	r1, #0
    2270:	2004      	movs	r0, #4
    2272:	4b25      	ldr	r3, [pc, #148]	; (2308 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    2274:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2276:	4f25      	ldr	r7, [pc, #148]	; (230c <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2278:	4e25      	ldr	r6, [pc, #148]	; (2310 <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    227a:	a801      	add	r0, sp, #4
    227c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    227e:	23c0      	movs	r3, #192	; 0xc0
    2280:	05db      	lsls	r3, r3, #23
    2282:	2580      	movs	r5, #128	; 0x80
    2284:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2286:	22a0      	movs	r2, #160	; 0xa0
    2288:	4922      	ldr	r1, [pc, #136]	; (2314 <eink_ac040tc1_refresh_display_buffer+0xac>)
    228a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    228c:	2190      	movs	r1, #144	; 0x90
    228e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2290:	4053      	eors	r3, r2
    2292:	401c      	ands	r4, r3
    2294:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2296:	a801      	add	r0, sp, #4
    2298:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8159_wait_for_busy(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    229a:	4225      	tst	r5, r4
    229c:	d0ed      	beq.n	227a <eink_ac040tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    229e:	2200      	movs	r2, #0
    22a0:	2100      	movs	r1, #0
    22a2:	2012      	movs	r0, #18
    22a4:	4b18      	ldr	r3, [pc, #96]	; (2308 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    22a6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    22a8:	4f18      	ldr	r7, [pc, #96]	; (230c <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    22aa:	4e19      	ldr	r6, [pc, #100]	; (2310 <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    22ac:	a802      	add	r0, sp, #8
    22ae:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22b0:	23c0      	movs	r3, #192	; 0xc0
    22b2:	05db      	lsls	r3, r3, #23
    22b4:	2580      	movs	r5, #128	; 0x80
    22b6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22b8:	22a0      	movs	r2, #160	; 0xa0
    22ba:	4916      	ldr	r1, [pc, #88]	; (2314 <eink_ac040tc1_refresh_display_buffer+0xac>)
    22bc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22be:	2190      	movs	r1, #144	; 0x90
    22c0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22c2:	4053      	eors	r3, r2
    22c4:	401c      	ands	r4, r3
    22c6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22c8:	a802      	add	r0, sp, #8
    22ca:	47b0      	blx	r6
    22cc:	4225      	tst	r5, r4
    22ce:	d0ed      	beq.n	22ac <eink_ac040tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    22d0:	2200      	movs	r2, #0
    22d2:	2100      	movs	r1, #0
    22d4:	2002      	movs	r0, #2
    22d6:	4b0c      	ldr	r3, [pc, #48]	; (2308 <eink_ac040tc1_refresh_display_buffer+0xa0>)
    22d8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    22da:	4f0c      	ldr	r7, [pc, #48]	; (230c <eink_ac040tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    22dc:	4e0c      	ldr	r6, [pc, #48]	; (2310 <eink_ac040tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    22de:	a803      	add	r0, sp, #12
    22e0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    22e2:	23c0      	movs	r3, #192	; 0xc0
    22e4:	05db      	lsls	r3, r3, #23
    22e6:	2580      	movs	r5, #128	; 0x80
    22e8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    22ea:	22a0      	movs	r2, #160	; 0xa0
    22ec:	4909      	ldr	r1, [pc, #36]	; (2314 <eink_ac040tc1_refresh_display_buffer+0xac>)
    22ee:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    22f0:	2190      	movs	r1, #144	; 0x90
    22f2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    22f4:	4053      	eors	r3, r2
    22f6:	401c      	ands	r4, r3
    22f8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    22fa:	a803      	add	r0, sp, #12
    22fc:	47b0      	blx	r6
    22fe:	4225      	tst	r5, r4
    2300:	d0ed      	beq.n	22de <eink_ac040tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    2302:	b005      	add	sp, #20
    2304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	00001c5d 	.word	0x00001c5d
    230c:	0000034d 	.word	0x0000034d
    2310:	0000035b 	.word	0x0000035b
    2314:	41004400 	.word	0x41004400

00002318 <eink_ac040tc1_put_display_buffer>:
{
    2318:	b5f0      	push	{r4, r5, r6, r7, lr}
    231a:	46c6      	mov	lr, r8
    231c:	b500      	push	{lr}
    231e:	b084      	sub	sp, #16
    2320:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC040TC1_DISPLAY_BUFFER_SIZE);
    2322:	4b37      	ldr	r3, [pc, #220]	; (2400 <eink_ac040tc1_put_display_buffer+0xe8>)
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	6919      	ldr	r1, [r3, #16]
    2328:	228c      	movs	r2, #140	; 0x8c
    232a:	0292      	lsls	r2, r2, #10
    232c:	2010      	movs	r0, #16
    232e:	4b35      	ldr	r3, [pc, #212]	; (2404 <eink_ac040tc1_put_display_buffer+0xec>)
    2330:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2332:	4f35      	ldr	r7, [pc, #212]	; (2408 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2334:	4e35      	ldr	r6, [pc, #212]	; (240c <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2336:	4668      	mov	r0, sp
    2338:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    233a:	23c0      	movs	r3, #192	; 0xc0
    233c:	05db      	lsls	r3, r3, #23
    233e:	2580      	movs	r5, #128	; 0x80
    2340:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2342:	22a0      	movs	r2, #160	; 0xa0
    2344:	4932      	ldr	r1, [pc, #200]	; (2410 <eink_ac040tc1_put_display_buffer+0xf8>)
    2346:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2348:	2190      	movs	r1, #144	; 0x90
    234a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    234c:	4053      	eors	r3, r2
    234e:	401c      	ands	r4, r3
    2350:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2352:	4668      	mov	r0, sp
    2354:	47b0      	blx	r6
    2356:	4225      	tst	r5, r4
    2358:	d0ed      	beq.n	2336 <eink_ac040tc1_put_display_buffer+0x1e>
    if(refresh_display) {
    235a:	4643      	mov	r3, r8
    235c:	2b00      	cmp	r3, #0
    235e:	d103      	bne.n	2368 <eink_ac040tc1_put_display_buffer+0x50>
}
    2360:	b004      	add	sp, #16
    2362:	bc04      	pop	{r2}
    2364:	4690      	mov	r8, r2
    2366:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    2368:	2200      	movs	r2, #0
    236a:	2100      	movs	r1, #0
    236c:	2004      	movs	r0, #4
    236e:	4b25      	ldr	r3, [pc, #148]	; (2404 <eink_ac040tc1_put_display_buffer+0xec>)
    2370:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2372:	4f25      	ldr	r7, [pc, #148]	; (2408 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    2374:	4e25      	ldr	r6, [pc, #148]	; (240c <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    2376:	a801      	add	r0, sp, #4
    2378:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    237a:	23c0      	movs	r3, #192	; 0xc0
    237c:	05db      	lsls	r3, r3, #23
    237e:	2580      	movs	r5, #128	; 0x80
    2380:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2382:	22a0      	movs	r2, #160	; 0xa0
    2384:	4922      	ldr	r1, [pc, #136]	; (2410 <eink_ac040tc1_put_display_buffer+0xf8>)
    2386:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2388:	2190      	movs	r1, #144	; 0x90
    238a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    238c:	4053      	eors	r3, r2
    238e:	401c      	ands	r4, r3
    2390:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2392:	a801      	add	r0, sp, #4
    2394:	47b0      	blx	r6
    2396:	4225      	tst	r5, r4
    2398:	d0ed      	beq.n	2376 <eink_ac040tc1_put_display_buffer+0x5e>
        eink_write_data(UC8159_DRF, 0, 0);
    239a:	2200      	movs	r2, #0
    239c:	2100      	movs	r1, #0
    239e:	2012      	movs	r0, #18
    23a0:	4b18      	ldr	r3, [pc, #96]	; (2404 <eink_ac040tc1_put_display_buffer+0xec>)
    23a2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23a4:	4f18      	ldr	r7, [pc, #96]	; (2408 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    23a6:	4e19      	ldr	r6, [pc, #100]	; (240c <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    23a8:	a802      	add	r0, sp, #8
    23aa:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23ac:	23c0      	movs	r3, #192	; 0xc0
    23ae:	05db      	lsls	r3, r3, #23
    23b0:	2580      	movs	r5, #128	; 0x80
    23b2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23b4:	22a0      	movs	r2, #160	; 0xa0
    23b6:	4916      	ldr	r1, [pc, #88]	; (2410 <eink_ac040tc1_put_display_buffer+0xf8>)
    23b8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23ba:	2190      	movs	r1, #144	; 0x90
    23bc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23be:	4053      	eors	r3, r2
    23c0:	401c      	ands	r4, r3
    23c2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23c4:	a802      	add	r0, sp, #8
    23c6:	47b0      	blx	r6
    23c8:	4225      	tst	r5, r4
    23ca:	d0ed      	beq.n	23a8 <eink_ac040tc1_put_display_buffer+0x90>
        eink_write_data(UC8159_POF, 0, 0);
    23cc:	2200      	movs	r2, #0
    23ce:	2100      	movs	r1, #0
    23d0:	2002      	movs	r0, #2
    23d2:	4b0c      	ldr	r3, [pc, #48]	; (2404 <eink_ac040tc1_put_display_buffer+0xec>)
    23d4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    23d6:	4f0c      	ldr	r7, [pc, #48]	; (2408 <eink_ac040tc1_put_display_buffer+0xf0>)
	CRITICAL_SECTION_LEAVE();
    23d8:	4e0c      	ldr	r6, [pc, #48]	; (240c <eink_ac040tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_ENTER();
    23da:	a803      	add	r0, sp, #12
    23dc:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23de:	23c0      	movs	r3, #192	; 0xc0
    23e0:	05db      	lsls	r3, r3, #23
    23e2:	2580      	movs	r5, #128	; 0x80
    23e4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23e6:	22a0      	movs	r2, #160	; 0xa0
    23e8:	4909      	ldr	r1, [pc, #36]	; (2410 <eink_ac040tc1_put_display_buffer+0xf8>)
    23ea:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23ec:	2190      	movs	r1, #144	; 0x90
    23ee:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    23f0:	4053      	eors	r3, r2
    23f2:	401c      	ands	r4, r3
    23f4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    23f6:	a803      	add	r0, sp, #12
    23f8:	47b0      	blx	r6
    23fa:	4225      	tst	r5, r4
    23fc:	d0ed      	beq.n	23da <eink_ac040tc1_put_display_buffer+0xc2>
    23fe:	e7af      	b.n	2360 <eink_ac040tc1_put_display_buffer+0x48>
    2400:	20000430 	.word	0x20000430
    2404:	00001c5d 	.word	0x00001c5d
    2408:	0000034d 	.word	0x0000034d
    240c:	0000035b 	.word	0x0000035b
    2410:	41004400 	.word	0x41004400

00002414 <eink_ac057tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ac057tc1_refresh_display_buffer(void)
{
    2414:	b5f0      	push	{r4, r5, r6, r7, lr}
    2416:	b085      	sub	sp, #20
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    2418:	2200      	movs	r2, #0
    241a:	2100      	movs	r1, #0
    241c:	2004      	movs	r0, #4
    241e:	4b25      	ldr	r3, [pc, #148]	; (24b4 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    2420:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2422:	4f25      	ldr	r7, [pc, #148]	; (24b8 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2424:	4e25      	ldr	r6, [pc, #148]	; (24bc <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2426:	a801      	add	r0, sp, #4
    2428:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    242a:	23c0      	movs	r3, #192	; 0xc0
    242c:	05db      	lsls	r3, r3, #23
    242e:	2580      	movs	r5, #128	; 0x80
    2430:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2432:	22a0      	movs	r2, #160	; 0xa0
    2434:	4922      	ldr	r1, [pc, #136]	; (24c0 <eink_ac057tc1_refresh_display_buffer+0xac>)
    2436:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2438:	2190      	movs	r1, #144	; 0x90
    243a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    243c:	4053      	eors	r3, r2
    243e:	401c      	ands	r4, r3
    2440:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2442:	a801      	add	r0, sp, #4
    2444:	47b0      	blx	r6
    2446:	4225      	tst	r5, r4
    2448:	d0ed      	beq.n	2426 <eink_ac057tc1_refresh_display_buffer+0x12>
    uc8159_wait_for_busy();
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    244a:	2200      	movs	r2, #0
    244c:	2100      	movs	r1, #0
    244e:	2012      	movs	r0, #18
    2450:	4b18      	ldr	r3, [pc, #96]	; (24b4 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    2452:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2454:	4f18      	ldr	r7, [pc, #96]	; (24b8 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2456:	4e19      	ldr	r6, [pc, #100]	; (24bc <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    2458:	a802      	add	r0, sp, #8
    245a:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    245c:	23c0      	movs	r3, #192	; 0xc0
    245e:	05db      	lsls	r3, r3, #23
    2460:	2580      	movs	r5, #128	; 0x80
    2462:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2464:	22a0      	movs	r2, #160	; 0xa0
    2466:	4916      	ldr	r1, [pc, #88]	; (24c0 <eink_ac057tc1_refresh_display_buffer+0xac>)
    2468:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    246a:	2190      	movs	r1, #144	; 0x90
    246c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    246e:	4053      	eors	r3, r2
    2470:	401c      	ands	r4, r3
    2472:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2474:	a802      	add	r0, sp, #8
    2476:	47b0      	blx	r6
    2478:	4225      	tst	r5, r4
    247a:	d0ed      	beq.n	2458 <eink_ac057tc1_refresh_display_buffer+0x44>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    247c:	2200      	movs	r2, #0
    247e:	2100      	movs	r1, #0
    2480:	2002      	movs	r0, #2
    2482:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <eink_ac057tc1_refresh_display_buffer+0xa0>)
    2484:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2486:	4f0c      	ldr	r7, [pc, #48]	; (24b8 <eink_ac057tc1_refresh_display_buffer+0xa4>)
	CRITICAL_SECTION_LEAVE();
    2488:	4e0c      	ldr	r6, [pc, #48]	; (24bc <eink_ac057tc1_refresh_display_buffer+0xa8>)
	CRITICAL_SECTION_ENTER();
    248a:	a803      	add	r0, sp, #12
    248c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    248e:	23c0      	movs	r3, #192	; 0xc0
    2490:	05db      	lsls	r3, r3, #23
    2492:	2580      	movs	r5, #128	; 0x80
    2494:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2496:	22a0      	movs	r2, #160	; 0xa0
    2498:	4909      	ldr	r1, [pc, #36]	; (24c0 <eink_ac057tc1_refresh_display_buffer+0xac>)
    249a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    249c:	2190      	movs	r1, #144	; 0x90
    249e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    24a0:	4053      	eors	r3, r2
    24a2:	401c      	ands	r4, r3
    24a4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    24a6:	a803      	add	r0, sp, #12
    24a8:	47b0      	blx	r6
    24aa:	4225      	tst	r5, r4
    24ac:	d0ed      	beq.n	248a <eink_ac057tc1_refresh_display_buffer+0x76>
    uc8159_wait_for_busy();
}
    24ae:	b005      	add	sp, #20
    24b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	00001c5d 	.word	0x00001c5d
    24b8:	0000034d 	.word	0x0000034d
    24bc:	0000035b 	.word	0x0000035b
    24c0:	41004400 	.word	0x41004400

000024c4 <eink_ac057tc1_put_display_buffer>:
{
    24c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24c6:	46c6      	mov	lr, r8
    24c8:	b500      	push	{lr}
    24ca:	b084      	sub	sp, #16
    24cc:	4680      	mov	r8, r0
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_AC057TC1_DISPLAY_BUFFER_SIZE);
    24ce:	4b37      	ldr	r3, [pc, #220]	; (25ac <eink_ac057tc1_put_display_buffer+0xe8>)
    24d0:	681b      	ldr	r3, [r3, #0]
    24d2:	6919      	ldr	r1, [r3, #16]
    24d4:	4a36      	ldr	r2, [pc, #216]	; (25b0 <eink_ac057tc1_put_display_buffer+0xec>)
    24d6:	2010      	movs	r0, #16
    24d8:	4b36      	ldr	r3, [pc, #216]	; (25b4 <eink_ac057tc1_put_display_buffer+0xf0>)
    24da:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    24dc:	4f36      	ldr	r7, [pc, #216]	; (25b8 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    24de:	4e37      	ldr	r6, [pc, #220]	; (25bc <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    24e0:	4668      	mov	r0, sp
    24e2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    24e4:	23c0      	movs	r3, #192	; 0xc0
    24e6:	05db      	lsls	r3, r3, #23
    24e8:	2580      	movs	r5, #128	; 0x80
    24ea:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    24ec:	22a0      	movs	r2, #160	; 0xa0
    24ee:	4934      	ldr	r1, [pc, #208]	; (25c0 <eink_ac057tc1_put_display_buffer+0xfc>)
    24f0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    24f2:	2190      	movs	r1, #144	; 0x90
    24f4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    24f6:	4053      	eors	r3, r2
    24f8:	401c      	ands	r4, r3
    24fa:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    24fc:	4668      	mov	r0, sp
    24fe:	47b0      	blx	r6
    2500:	4225      	tst	r5, r4
    2502:	d0ed      	beq.n	24e0 <eink_ac057tc1_put_display_buffer+0x1c>
    if(refresh_display) {
    2504:	4643      	mov	r3, r8
    2506:	2b00      	cmp	r3, #0
    2508:	d103      	bne.n	2512 <eink_ac057tc1_put_display_buffer+0x4e>
}
    250a:	b004      	add	sp, #16
    250c:	bc04      	pop	{r2}
    250e:	4690      	mov	r8, r2
    2510:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_PON, 0, 0);
    2512:	2200      	movs	r2, #0
    2514:	2100      	movs	r1, #0
    2516:	2004      	movs	r0, #4
    2518:	4b26      	ldr	r3, [pc, #152]	; (25b4 <eink_ac057tc1_put_display_buffer+0xf0>)
    251a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    251c:	4f26      	ldr	r7, [pc, #152]	; (25b8 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    251e:	4e27      	ldr	r6, [pc, #156]	; (25bc <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    2520:	a801      	add	r0, sp, #4
    2522:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2524:	23c0      	movs	r3, #192	; 0xc0
    2526:	05db      	lsls	r3, r3, #23
    2528:	2580      	movs	r5, #128	; 0x80
    252a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    252c:	22a0      	movs	r2, #160	; 0xa0
    252e:	4924      	ldr	r1, [pc, #144]	; (25c0 <eink_ac057tc1_put_display_buffer+0xfc>)
    2530:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2532:	2190      	movs	r1, #144	; 0x90
    2534:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2536:	4053      	eors	r3, r2
    2538:	401c      	ands	r4, r3
    253a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    253c:	a801      	add	r0, sp, #4
    253e:	47b0      	blx	r6
    2540:	4225      	tst	r5, r4
    2542:	d0ed      	beq.n	2520 <eink_ac057tc1_put_display_buffer+0x5c>
        eink_write_data(UC8159_DRF, 0, 0);
    2544:	2200      	movs	r2, #0
    2546:	2100      	movs	r1, #0
    2548:	2012      	movs	r0, #18
    254a:	4b1a      	ldr	r3, [pc, #104]	; (25b4 <eink_ac057tc1_put_display_buffer+0xf0>)
    254c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    254e:	4f1a      	ldr	r7, [pc, #104]	; (25b8 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    2550:	4e1a      	ldr	r6, [pc, #104]	; (25bc <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    2552:	a802      	add	r0, sp, #8
    2554:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2556:	23c0      	movs	r3, #192	; 0xc0
    2558:	05db      	lsls	r3, r3, #23
    255a:	2580      	movs	r5, #128	; 0x80
    255c:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    255e:	22a0      	movs	r2, #160	; 0xa0
    2560:	4917      	ldr	r1, [pc, #92]	; (25c0 <eink_ac057tc1_put_display_buffer+0xfc>)
    2562:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2564:	2190      	movs	r1, #144	; 0x90
    2566:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2568:	4053      	eors	r3, r2
    256a:	401c      	ands	r4, r3
    256c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    256e:	a802      	add	r0, sp, #8
    2570:	47b0      	blx	r6
    2572:	4225      	tst	r5, r4
    2574:	d0ed      	beq.n	2552 <eink_ac057tc1_put_display_buffer+0x8e>
        eink_write_data(UC8159_POF, 0, 0);
    2576:	2200      	movs	r2, #0
    2578:	2100      	movs	r1, #0
    257a:	2002      	movs	r0, #2
    257c:	4b0d      	ldr	r3, [pc, #52]	; (25b4 <eink_ac057tc1_put_display_buffer+0xf0>)
    257e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2580:	4f0d      	ldr	r7, [pc, #52]	; (25b8 <eink_ac057tc1_put_display_buffer+0xf4>)
	CRITICAL_SECTION_LEAVE();
    2582:	4e0e      	ldr	r6, [pc, #56]	; (25bc <eink_ac057tc1_put_display_buffer+0xf8>)
	CRITICAL_SECTION_ENTER();
    2584:	a803      	add	r0, sp, #12
    2586:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2588:	23c0      	movs	r3, #192	; 0xc0
    258a:	05db      	lsls	r3, r3, #23
    258c:	2580      	movs	r5, #128	; 0x80
    258e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2590:	22a0      	movs	r2, #160	; 0xa0
    2592:	490b      	ldr	r1, [pc, #44]	; (25c0 <eink_ac057tc1_put_display_buffer+0xfc>)
    2594:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2596:	2190      	movs	r1, #144	; 0x90
    2598:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    259a:	4053      	eors	r3, r2
    259c:	401c      	ands	r4, r3
    259e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    25a0:	a803      	add	r0, sp, #12
    25a2:	47b0      	blx	r6
    25a4:	4225      	tst	r5, r4
    25a6:	d0ed      	beq.n	2584 <eink_ac057tc1_put_display_buffer+0xc0>
    25a8:	e7af      	b.n	250a <eink_ac057tc1_put_display_buffer+0x46>
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	20000430 	.word	0x20000430
    25b0:	00020d00 	.word	0x00020d00
    25b4:	00001c5d 	.word	0x00001c5d
    25b8:	0000034d 	.word	0x0000034d
    25bc:	0000035b 	.word	0x0000035b
    25c0:	41004400 	.word	0x41004400

000025c4 <eink_ed057tc2_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed057tc2_refresh_display_buffer(void)
{
    25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c6:	b083      	sub	sp, #12
    /* Enable power to the display */
    eink_write_data(UC8159_PON, 0, 0);
    25c8:	2200      	movs	r2, #0
    25ca:	2100      	movs	r1, #0
    25cc:	2004      	movs	r0, #4
    25ce:	4c1a      	ldr	r4, [pc, #104]	; (2638 <eink_ed057tc2_refresh_display_buffer+0x74>)
    25d0:	47a0      	blx	r4
    
    /* Send the Refresh Display command */
    eink_write_data(UC8159_DRF, 0, 0);
    25d2:	2200      	movs	r2, #0
    25d4:	2100      	movs	r1, #0
    25d6:	2012      	movs	r0, #18
    25d8:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    25da:	4f18      	ldr	r7, [pc, #96]	; (263c <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    25dc:	4e18      	ldr	r6, [pc, #96]	; (2640 <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    25de:	4668      	mov	r0, sp
    25e0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25e2:	23c0      	movs	r3, #192	; 0xc0
    25e4:	05db      	lsls	r3, r3, #23
    25e6:	2580      	movs	r5, #128	; 0x80
    25e8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25ea:	22a0      	movs	r2, #160	; 0xa0
    25ec:	4915      	ldr	r1, [pc, #84]	; (2644 <eink_ed057tc2_refresh_display_buffer+0x80>)
    25ee:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25f0:	2190      	movs	r1, #144	; 0x90
    25f2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    25f4:	4053      	eors	r3, r2
    25f6:	401c      	ands	r4, r3
    25f8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    25fa:	4668      	mov	r0, sp
    25fc:	47b0      	blx	r6
    25fe:	4225      	tst	r5, r4
    2600:	d0ed      	beq.n	25de <eink_ed057tc2_refresh_display_buffer+0x1a>
    uc8159_wait_for_busy();
    
    /* Disable power to the display */
    eink_write_data(UC8159_POF, 0, 0);
    2602:	2200      	movs	r2, #0
    2604:	2100      	movs	r1, #0
    2606:	2002      	movs	r0, #2
    2608:	4b0b      	ldr	r3, [pc, #44]	; (2638 <eink_ed057tc2_refresh_display_buffer+0x74>)
    260a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    260c:	4f0b      	ldr	r7, [pc, #44]	; (263c <eink_ed057tc2_refresh_display_buffer+0x78>)
	CRITICAL_SECTION_LEAVE();
    260e:	4e0c      	ldr	r6, [pc, #48]	; (2640 <eink_ed057tc2_refresh_display_buffer+0x7c>)
	CRITICAL_SECTION_ENTER();
    2610:	a801      	add	r0, sp, #4
    2612:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2614:	23c0      	movs	r3, #192	; 0xc0
    2616:	05db      	lsls	r3, r3, #23
    2618:	2580      	movs	r5, #128	; 0x80
    261a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    261c:	22a0      	movs	r2, #160	; 0xa0
    261e:	4909      	ldr	r1, [pc, #36]	; (2644 <eink_ed057tc2_refresh_display_buffer+0x80>)
    2620:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2622:	2190      	movs	r1, #144	; 0x90
    2624:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2626:	4053      	eors	r3, r2
    2628:	401c      	ands	r4, r3
    262a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    262c:	a801      	add	r0, sp, #4
    262e:	47b0      	blx	r6
    2630:	4225      	tst	r5, r4
    2632:	d0ed      	beq.n	2610 <eink_ed057tc2_refresh_display_buffer+0x4c>
    uc8159_wait_for_busy();
}
    2634:	b003      	add	sp, #12
    2636:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2638:	00001c5d 	.word	0x00001c5d
    263c:	0000034d 	.word	0x0000034d
    2640:	0000035b 	.word	0x0000035b
    2644:	41004400 	.word	0x41004400

00002648 <eink_ed057tc2_put_display_buffer>:
{
    2648:	b5f0      	push	{r4, r5, r6, r7, lr}
    264a:	46c6      	mov	lr, r8
    264c:	b500      	push	{lr}
    264e:	b084      	sub	sp, #16
    2650:	4680      	mov	r8, r0
    eink_write_data(UC8159_PON, 0, 0);
    2652:	2200      	movs	r2, #0
    2654:	2100      	movs	r1, #0
    2656:	2004      	movs	r0, #4
    2658:	4c2c      	ldr	r4, [pc, #176]	; (270c <eink_ed057tc2_put_display_buffer+0xc4>)
    265a:	47a0      	blx	r4
    eink_write_data(UC8159_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED057TC2_DISPLAY_BUFFER_SIZE);
    265c:	4b2c      	ldr	r3, [pc, #176]	; (2710 <eink_ed057tc2_put_display_buffer+0xc8>)
    265e:	681b      	ldr	r3, [r3, #0]
    2660:	6919      	ldr	r1, [r3, #16]
    2662:	4a2c      	ldr	r2, [pc, #176]	; (2714 <eink_ed057tc2_put_display_buffer+0xcc>)
    2664:	2010      	movs	r0, #16
    2666:	47a0      	blx	r4
    eink_write_data(UC8159_DSP, 0, 0);
    2668:	2200      	movs	r2, #0
    266a:	2100      	movs	r1, #0
    266c:	2011      	movs	r0, #17
    266e:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2670:	4f29      	ldr	r7, [pc, #164]	; (2718 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    2672:	4e2a      	ldr	r6, [pc, #168]	; (271c <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    2674:	a801      	add	r0, sp, #4
    2676:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2678:	23c0      	movs	r3, #192	; 0xc0
    267a:	05db      	lsls	r3, r3, #23
    267c:	2580      	movs	r5, #128	; 0x80
    267e:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2680:	22a0      	movs	r2, #160	; 0xa0
    2682:	4927      	ldr	r1, [pc, #156]	; (2720 <eink_ed057tc2_put_display_buffer+0xd8>)
    2684:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2686:	2190      	movs	r1, #144	; 0x90
    2688:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    268a:	4053      	eors	r3, r2
    268c:	401c      	ands	r4, r3
    268e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2690:	a801      	add	r0, sp, #4
    2692:	47b0      	blx	r6
    2694:	4225      	tst	r5, r4
    2696:	d0ed      	beq.n	2674 <eink_ed057tc2_put_display_buffer+0x2c>
    if(refresh_display) {
    2698:	4643      	mov	r3, r8
    269a:	2b00      	cmp	r3, #0
    269c:	d11c      	bne.n	26d8 <eink_ed057tc2_put_display_buffer+0x90>
    eink_write_data(UC8159_POF, 0, 0);
    269e:	2200      	movs	r2, #0
    26a0:	2100      	movs	r1, #0
    26a2:	2002      	movs	r0, #2
    26a4:	4b19      	ldr	r3, [pc, #100]	; (270c <eink_ed057tc2_put_display_buffer+0xc4>)
    26a6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    26a8:	4f1b      	ldr	r7, [pc, #108]	; (2718 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    26aa:	4e1c      	ldr	r6, [pc, #112]	; (271c <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    26ac:	a803      	add	r0, sp, #12
    26ae:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26b0:	23c0      	movs	r3, #192	; 0xc0
    26b2:	05db      	lsls	r3, r3, #23
    26b4:	2580      	movs	r5, #128	; 0x80
    26b6:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26b8:	22a0      	movs	r2, #160	; 0xa0
    26ba:	4919      	ldr	r1, [pc, #100]	; (2720 <eink_ed057tc2_put_display_buffer+0xd8>)
    26bc:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26be:	2190      	movs	r1, #144	; 0x90
    26c0:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    26c2:	4053      	eors	r3, r2
    26c4:	401c      	ands	r4, r3
    26c6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    26c8:	a803      	add	r0, sp, #12
    26ca:	47b0      	blx	r6
    26cc:	4225      	tst	r5, r4
    26ce:	d0ed      	beq.n	26ac <eink_ed057tc2_put_display_buffer+0x64>
}
    26d0:	b004      	add	sp, #16
    26d2:	bc04      	pop	{r2}
    26d4:	4690      	mov	r8, r2
    26d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(UC8159_DRF, 0, 0);
    26d8:	2200      	movs	r2, #0
    26da:	2100      	movs	r1, #0
    26dc:	2012      	movs	r0, #18
    26de:	4b0b      	ldr	r3, [pc, #44]	; (270c <eink_ed057tc2_put_display_buffer+0xc4>)
    26e0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    26e2:	4f0d      	ldr	r7, [pc, #52]	; (2718 <eink_ed057tc2_put_display_buffer+0xd0>)
	CRITICAL_SECTION_LEAVE();
    26e4:	4e0d      	ldr	r6, [pc, #52]	; (271c <eink_ed057tc2_put_display_buffer+0xd4>)
	CRITICAL_SECTION_ENTER();
    26e6:	a802      	add	r0, sp, #8
    26e8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26ea:	23c0      	movs	r3, #192	; 0xc0
    26ec:	05db      	lsls	r3, r3, #23
    26ee:	2580      	movs	r5, #128	; 0x80
    26f0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26f2:	22a0      	movs	r2, #160	; 0xa0
    26f4:	490a      	ldr	r1, [pc, #40]	; (2720 <eink_ed057tc2_put_display_buffer+0xd8>)
    26f6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26f8:	2190      	movs	r1, #144	; 0x90
    26fa:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    26fc:	4053      	eors	r3, r2
    26fe:	401c      	ands	r4, r3
    2700:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2702:	a802      	add	r0, sp, #8
    2704:	47b0      	blx	r6
    2706:	4225      	tst	r5, r4
    2708:	d0ed      	beq.n	26e6 <eink_ed057tc2_put_display_buffer+0x9e>
    270a:	e7c8      	b.n	269e <eink_ed057tc2_put_display_buffer+0x56>
    270c:	00001c5d 	.word	0x00001c5d
    2710:	20000430 	.word	0x20000430
    2714:	00020d00 	.word	0x00020d00
    2718:	0000034d 	.word	0x0000034d
    271c:	0000035b 	.word	0x0000035b
    2720:	41004400 	.word	0x41004400

00002724 <eink_ed028tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed028tc1_refresh_display_buffer(void)
{
    2724:	b5f0      	push	{r4, r5, r6, r7, lr}
    2726:	b087      	sub	sp, #28
    uint8_t eink_data[9];
    
    /* Enable power to the display */
    eink_write_data(UC8177_PON, 0, 0);
    2728:	2200      	movs	r2, #0
    272a:	2100      	movs	r1, #0
    272c:	2004      	movs	r0, #4
    272e:	4b22      	ldr	r3, [pc, #136]	; (27b8 <eink_ed028tc1_refresh_display_buffer+0x94>)
    2730:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2732:	4f22      	ldr	r7, [pc, #136]	; (27bc <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    2734:	4e22      	ldr	r6, [pc, #136]	; (27c0 <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    2736:	a801      	add	r0, sp, #4
    2738:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    273a:	23c0      	movs	r3, #192	; 0xc0
    273c:	05db      	lsls	r3, r3, #23
    273e:	2580      	movs	r5, #128	; 0x80
    2740:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2742:	22a0      	movs	r2, #160	; 0xa0
    2744:	491f      	ldr	r1, [pc, #124]	; (27c4 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    2746:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2748:	2190      	movs	r1, #144	; 0x90
    274a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    274c:	4053      	eors	r3, r2
    274e:	401c      	ands	r4, r3
    2750:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2752:	a801      	add	r0, sp, #4
    2754:	47b0      	blx	r6
 * hold the MCU until it returns HIGH again.
 */
static inline void uc8177_wait_for_busy_low(void)
{
#ifdef EINK_BUSY
    while(!gpio_get_pin_level(EINK_BUSY));
    2756:	4225      	tst	r5, r4
    2758:	d0ed      	beq.n	2736 <eink_ed028tc1_refresh_display_buffer+0x12>
    
    uc8177_wait_for_busy_low();
    
    /* Display Refresh */
    eink_data[0] = 0x18; /* Update Mode 1 */
    275a:	a903      	add	r1, sp, #12
    275c:	2318      	movs	r3, #24
    275e:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2760:	2300      	movs	r3, #0
    2762:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2764:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2766:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    2768:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    276a:	3302      	adds	r3, #2
    276c:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    276e:	3356      	adds	r3, #86	; 0x56
    2770:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    2772:	3b57      	subs	r3, #87	; 0x57
    2774:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    2776:	33df      	adds	r3, #223	; 0xdf
    2778:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    277a:	2209      	movs	r2, #9
    277c:	2012      	movs	r0, #18
    277e:	4c0e      	ldr	r4, [pc, #56]	; (27b8 <eink_ed028tc1_refresh_display_buffer+0x94>)
    2780:	47a0      	blx	r4
    
    /* Disable power to the display */
    eink_write_data(UC8177_POF, 0, 0);
    2782:	2200      	movs	r2, #0
    2784:	2100      	movs	r1, #0
    2786:	2002      	movs	r0, #2
    2788:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    278a:	4f0c      	ldr	r7, [pc, #48]	; (27bc <eink_ed028tc1_refresh_display_buffer+0x98>)
	CRITICAL_SECTION_LEAVE();
    278c:	4e0c      	ldr	r6, [pc, #48]	; (27c0 <eink_ed028tc1_refresh_display_buffer+0x9c>)
	CRITICAL_SECTION_ENTER();
    278e:	a802      	add	r0, sp, #8
    2790:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2792:	23c0      	movs	r3, #192	; 0xc0
    2794:	05db      	lsls	r3, r3, #23
    2796:	2580      	movs	r5, #128	; 0x80
    2798:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    279a:	22a0      	movs	r2, #160	; 0xa0
    279c:	4909      	ldr	r1, [pc, #36]	; (27c4 <eink_ed028tc1_refresh_display_buffer+0xa0>)
    279e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    27a0:	2190      	movs	r1, #144	; 0x90
    27a2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    27a4:	4053      	eors	r3, r2
    27a6:	401c      	ands	r4, r3
    27a8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    27aa:	a802      	add	r0, sp, #8
    27ac:	47b0      	blx	r6
    27ae:	4225      	tst	r5, r4
    27b0:	d0ed      	beq.n	278e <eink_ed028tc1_refresh_display_buffer+0x6a>
    uc8177_wait_for_busy_low();
}
    27b2:	b007      	add	sp, #28
    27b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	00001c5d 	.word	0x00001c5d
    27bc:	0000034d 	.word	0x0000034d
    27c0:	0000035b 	.word	0x0000035b
    27c4:	41004400 	.word	0x41004400

000027c8 <eink_ed037tc1_refresh_display_buffer>:
    
/**
 * \brief Send the refresh command to the display driver.
 */
static inline void eink_ed037tc1_refresh_display_buffer(void)
{
    27c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ca:	b083      	sub	sp, #12
    /* Upload update waveform - Note for demo purposes, only 25C waveforms are used */
    if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    27cc:	4b15      	ldr	r3, [pc, #84]	; (2824 <eink_ed037tc1_refresh_display_buffer+0x5c>)
    27ce:	78db      	ldrb	r3, [r3, #3]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d120      	bne.n	2816 <eink_ed037tc1_refresh_display_buffer+0x4e>
    {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    27d4:	2269      	movs	r2, #105	; 0x69
    27d6:	4914      	ldr	r1, [pc, #80]	; (2828 <eink_ed037tc1_refresh_display_buffer+0x60>)
    27d8:	3140      	adds	r1, #64	; 0x40
    27da:	2032      	movs	r0, #50	; 0x32
    27dc:	4b13      	ldr	r3, [pc, #76]	; (282c <eink_ed037tc1_refresh_display_buffer+0x64>)
    27de:	4798      	blx	r3
    } else {
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    }
    /* Display Update */
    eink_write_data(SSD1677_DSP_ACT, 0, 0);
    27e0:	2200      	movs	r2, #0
    27e2:	2100      	movs	r1, #0
    27e4:	2020      	movs	r0, #32
    27e6:	4b11      	ldr	r3, [pc, #68]	; (282c <eink_ed037tc1_refresh_display_buffer+0x64>)
    27e8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    27ea:	4f11      	ldr	r7, [pc, #68]	; (2830 <eink_ed037tc1_refresh_display_buffer+0x68>)
	CRITICAL_SECTION_LEAVE();
    27ec:	4e11      	ldr	r6, [pc, #68]	; (2834 <eink_ed037tc1_refresh_display_buffer+0x6c>)
	CRITICAL_SECTION_ENTER();
    27ee:	a801      	add	r0, sp, #4
    27f0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    27f2:	23c0      	movs	r3, #192	; 0xc0
    27f4:	05db      	lsls	r3, r3, #23
    27f6:	2580      	movs	r5, #128	; 0x80
    27f8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    27fa:	22a0      	movs	r2, #160	; 0xa0
    27fc:	490e      	ldr	r1, [pc, #56]	; (2838 <eink_ed037tc1_refresh_display_buffer+0x70>)
    27fe:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2800:	2190      	movs	r1, #144	; 0x90
    2802:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2804:	4053      	eors	r3, r2
    2806:	401c      	ands	r4, r3
    2808:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    280a:	a801      	add	r0, sp, #4
    280c:	47b0      	blx	r6
#ifdef EINK_BUSY    
    while(gpio_get_pin_level(EINK_BUSY));
    280e:	4225      	tst	r5, r4
    2810:	d1ed      	bne.n	27ee <eink_ed037tc1_refresh_display_buffer+0x26>
#endif
}
    2812:	b003      	add	sp, #12
    2814:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    2816:	2269      	movs	r2, #105	; 0x69
    2818:	4908      	ldr	r1, [pc, #32]	; (283c <eink_ed037tc1_refresh_display_buffer+0x74>)
    281a:	312c      	adds	r1, #44	; 0x2c
    281c:	2032      	movs	r0, #50	; 0x32
    281e:	4b03      	ldr	r3, [pc, #12]	; (282c <eink_ed037tc1_refresh_display_buffer+0x64>)
    2820:	4798      	blx	r3
    2822:	e7dd      	b.n	27e0 <eink_ed037tc1_refresh_display_buffer+0x18>
    2824:	20000414 	.word	0x20000414
    2828:	000059a0 	.word	0x000059a0
    282c:	00001c5d 	.word	0x00001c5d
    2830:	0000034d 	.word	0x0000034d
    2834:	0000035b 	.word	0x0000035b
    2838:	41004400 	.word	0x41004400
    283c:	00005a20 	.word	0x00005a20

00002840 <eink_ed037tc1_put_display_buffer>:
{
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	b083      	sub	sp, #12
    2844:	0007      	movs	r7, r0
    eink_data[0] = 0x00;
    2846:	ac01      	add	r4, sp, #4
    2848:	2500      	movs	r5, #0
    284a:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    284c:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    284e:	2202      	movs	r2, #2
    2850:	0021      	movs	r1, r4
    2852:	204e      	movs	r0, #78	; 0x4e
    2854:	4e1d      	ldr	r6, [pc, #116]	; (28cc <eink_ed037tc1_put_display_buffer+0x8c>)
    2856:	47b0      	blx	r6
    eink_data[0] = 0x00;
    2858:	7025      	strb	r5, [r4, #0]
    eink_data[1] = 0x00;
    285a:	7065      	strb	r5, [r4, #1]
    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    285c:	2202      	movs	r2, #2
    285e:	0021      	movs	r1, r4
    2860:	204f      	movs	r0, #79	; 0x4f
    2862:	47b0      	blx	r6
    eink_write_data(SSD1677_RAM_BW, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED037TC1_DISPLAY_BUFFER_SIZE);
    2864:	4b1a      	ldr	r3, [pc, #104]	; (28d0 <eink_ed037tc1_put_display_buffer+0x90>)
    2866:	681b      	ldr	r3, [r3, #0]
    2868:	6919      	ldr	r1, [r3, #16]
    286a:	4a1a      	ldr	r2, [pc, #104]	; (28d4 <eink_ed037tc1_put_display_buffer+0x94>)
    286c:	2024      	movs	r0, #36	; 0x24
    286e:	47b0      	blx	r6
    if(refresh_display) {
    2870:	2f00      	cmp	r7, #0
    2872:	d022      	beq.n	28ba <eink_ed037tc1_put_display_buffer+0x7a>
        if(ssd1677_global_instance.panel_settings.update_mode == UPDATE_SLOW)
    2874:	4b18      	ldr	r3, [pc, #96]	; (28d8 <eink_ed037tc1_put_display_buffer+0x98>)
    2876:	78db      	ldrb	r3, [r3, #3]
    2878:	2b00      	cmp	r3, #0
    287a:	d120      	bne.n	28be <eink_ed037tc1_put_display_buffer+0x7e>
            eink_write_data(SSD1677_LUT_REG, ED037TC1_A2_LUT, 105); /* Slow Update */
    287c:	2269      	movs	r2, #105	; 0x69
    287e:	4917      	ldr	r1, [pc, #92]	; (28dc <eink_ed037tc1_put_display_buffer+0x9c>)
    2880:	3140      	adds	r1, #64	; 0x40
    2882:	2032      	movs	r0, #50	; 0x32
    2884:	4b11      	ldr	r3, [pc, #68]	; (28cc <eink_ed037tc1_put_display_buffer+0x8c>)
    2886:	4798      	blx	r3
        eink_write_data(SSD1677_DSP_ACT, 0, 0);
    2888:	2200      	movs	r2, #0
    288a:	2100      	movs	r1, #0
    288c:	2020      	movs	r0, #32
    288e:	4b0f      	ldr	r3, [pc, #60]	; (28cc <eink_ed037tc1_put_display_buffer+0x8c>)
    2890:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2892:	4f13      	ldr	r7, [pc, #76]	; (28e0 <eink_ed037tc1_put_display_buffer+0xa0>)
	CRITICAL_SECTION_LEAVE();
    2894:	4e13      	ldr	r6, [pc, #76]	; (28e4 <eink_ed037tc1_put_display_buffer+0xa4>)
	CRITICAL_SECTION_ENTER();
    2896:	4668      	mov	r0, sp
    2898:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    289a:	23c0      	movs	r3, #192	; 0xc0
    289c:	05db      	lsls	r3, r3, #23
    289e:	2580      	movs	r5, #128	; 0x80
    28a0:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    28a2:	22a0      	movs	r2, #160	; 0xa0
    28a4:	4910      	ldr	r1, [pc, #64]	; (28e8 <eink_ed037tc1_put_display_buffer+0xa8>)
    28a6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    28a8:	2190      	movs	r1, #144	; 0x90
    28aa:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    28ac:	4053      	eors	r3, r2
    28ae:	401c      	ands	r4, r3
    28b0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    28b2:	4668      	mov	r0, sp
    28b4:	47b0      	blx	r6
        while(gpio_get_pin_level(EINK_BUSY));
    28b6:	4225      	tst	r5, r4
    28b8:	d1ed      	bne.n	2896 <eink_ed037tc1_put_display_buffer+0x56>
}
    28ba:	b003      	add	sp, #12
    28bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_write_data(SSD1677_LUT_REG, ED037TC1_DU_LUT, 105); /* Fast Update */
    28be:	2269      	movs	r2, #105	; 0x69
    28c0:	490a      	ldr	r1, [pc, #40]	; (28ec <eink_ed037tc1_put_display_buffer+0xac>)
    28c2:	312c      	adds	r1, #44	; 0x2c
    28c4:	2032      	movs	r0, #50	; 0x32
    28c6:	4b01      	ldr	r3, [pc, #4]	; (28cc <eink_ed037tc1_put_display_buffer+0x8c>)
    28c8:	4798      	blx	r3
    28ca:	e7dd      	b.n	2888 <eink_ed037tc1_put_display_buffer+0x48>
    28cc:	00001c5d 	.word	0x00001c5d
    28d0:	20000430 	.word	0x20000430
    28d4:	000041a0 	.word	0x000041a0
    28d8:	20000414 	.word	0x20000414
    28dc:	000059a0 	.word	0x000059a0
    28e0:	0000034d 	.word	0x0000034d
    28e4:	0000035b 	.word	0x0000035b
    28e8:	41004400 	.word	0x41004400
    28ec:	00005a20 	.word	0x00005a20

000028f0 <eink_ed037tc1_put_partial_display_buffer>:
{
    28f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f2:	46de      	mov	lr, fp
    28f4:	4657      	mov	r7, sl
    28f6:	464e      	mov	r6, r9
    28f8:	4645      	mov	r5, r8
    28fa:	b5e0      	push	{r5, r6, r7, lr}
    28fc:	b085      	sub	sp, #20
    28fe:	4681      	mov	r9, r0
    2900:	000c      	movs	r4, r1
	if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_90) {
    2902:	4940      	ldr	r1, [pc, #256]	; (2a04 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2904:	7809      	ldrb	r1, [r1, #0]
    2906:	2901      	cmp	r1, #1
    2908:	d050      	beq.n	29ac <eink_ed037tc1_put_partial_display_buffer+0xbc>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_180) {
    290a:	493e      	ldr	r1, [pc, #248]	; (2a04 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    290c:	7809      	ldrb	r1, [r1, #0]
    290e:	2902      	cmp	r1, #2
    2910:	d068      	beq.n	29e4 <eink_ed037tc1_put_partial_display_buffer+0xf4>
    } else if (ssd1677_global_instance.panel_settings.display_rotation == ROTATE_270) {
    2912:	493c      	ldr	r1, [pc, #240]	; (2a04 <eink_ed037tc1_put_partial_display_buffer+0x114>)
    2914:	7809      	ldrb	r1, [r1, #0]
    2916:	2903      	cmp	r1, #3
    2918:	d06c      	beq.n	29f4 <eink_ed037tc1_put_partial_display_buffer+0x104>
        x1_set = (start_x - (start_x % 8)) / 8;
    291a:	10c6      	asrs	r6, r0, #3
        byte_set = x1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * start_y);
    291c:	00a1      	lsls	r1, r4, #2
    291e:	1909      	adds	r1, r1, r4
    2920:	00c8      	lsls	r0, r1, #3
    2922:	1a41      	subs	r1, r0, r1
    2924:	1876      	adds	r6, r6, r1
        mod_calc_x = (start_x - (start_x % 8));
    2926:	2107      	movs	r1, #7
    2928:	4648      	mov	r0, r9
    292a:	4388      	bics	r0, r1
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    292c:	b2c0      	uxtb	r0, r0
    292e:	1880      	adds	r0, r0, r2
        mod_calc_w = 8 - (window_w % 8);
    2930:	2507      	movs	r5, #7
    2932:	402a      	ands	r2, r5
    2934:	2508      	movs	r5, #8
    2936:	1aaa      	subs	r2, r5, r2
		window_set_w = (window_w + mod_calc_x + mod_calc_w) / 8;
    2938:	b2d2      	uxtb	r2, r2
    293a:	1882      	adds	r2, r0, r2
    293c:	17d0      	asrs	r0, r2, #31
    293e:	4001      	ands	r1, r0
    2940:	1889      	adds	r1, r1, r2
    2942:	10c9      	asrs	r1, r1, #3
    2944:	b28a      	uxth	r2, r1
    2946:	9201      	str	r2, [sp, #4]
    display_buffer = (uint8_t*) ptr_eink_gfx_config->display_buffer_1_ptr;
    2948:	4a2f      	ldr	r2, [pc, #188]	; (2a08 <eink_ed037tc1_put_partial_display_buffer+0x118>)
    294a:	6812      	ldr	r2, [r2, #0]
    294c:	6912      	ldr	r2, [r2, #16]
    display_buffer += byte_set;
    294e:	1996      	adds	r6, r2, r6
    for(i=0; i<window_set_h; i++)
    2950:	2b00      	cmp	r3, #0
    2952:	d024      	beq.n	299e <eink_ed037tc1_put_partial_display_buffer+0xae>
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    2954:	464a      	mov	r2, r9
    2956:	0592      	lsls	r2, r2, #22
    2958:	0f92      	lsrs	r2, r2, #30
    295a:	4692      	mov	sl, r2
    295c:	18e3      	adds	r3, r4, r3
    295e:	b29b      	uxth	r3, r3
    2960:	4698      	mov	r8, r3
	    eink_data[0] = (window_set_x & 0xFF);
    2962:	ad03      	add	r5, sp, #12
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    2964:	4f29      	ldr	r7, [pc, #164]	; (2a0c <eink_ed037tc1_put_partial_display_buffer+0x11c>)
	    eink_data[1] = (temp_y >> 8) & 0x3;
    2966:	2303      	movs	r3, #3
    2968:	469b      	mov	fp, r3
	    eink_data[0] = (window_set_x & 0xFF);
    296a:	464b      	mov	r3, r9
    296c:	702b      	strb	r3, [r5, #0]
	    eink_data[1] = (window_set_x >> 8) & 0x3;
    296e:	4653      	mov	r3, sl
    2970:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_X_ADDRC, eink_data, 2);
    2972:	2202      	movs	r2, #2
    2974:	0029      	movs	r1, r5
    2976:	204e      	movs	r0, #78	; 0x4e
    2978:	47b8      	blx	r7
	    eink_data[0] = (temp_y & 0xFF);
    297a:	702c      	strb	r4, [r5, #0]
	    eink_data[1] = (temp_y >> 8) & 0x3;
    297c:	0a23      	lsrs	r3, r4, #8
    297e:	465a      	mov	r2, fp
    2980:	4013      	ands	r3, r2
    2982:	706b      	strb	r3, [r5, #1]
	    eink_write_data(SSD1677_Y_ADDRC, eink_data, 2);
    2984:	2202      	movs	r2, #2
    2986:	0029      	movs	r1, r5
    2988:	204f      	movs	r0, #79	; 0x4f
    298a:	47b8      	blx	r7
	    display_buffer += (GFX_ED037TC1_MAX_WIDTH / 8);
    298c:	3623      	adds	r6, #35	; 0x23
	    eink_write_data(SSD1677_RAM_BW, display_buffer, window_set_w);
    298e:	9a01      	ldr	r2, [sp, #4]
    2990:	0031      	movs	r1, r6
    2992:	2024      	movs	r0, #36	; 0x24
    2994:	47b8      	blx	r7
    2996:	3401      	adds	r4, #1
    2998:	b2a4      	uxth	r4, r4
    for(i=0; i<window_set_h; i++)
    299a:	4544      	cmp	r4, r8
    299c:	d1e5      	bne.n	296a <eink_ed037tc1_put_partial_display_buffer+0x7a>
}
    299e:	b005      	add	sp, #20
    29a0:	bc3c      	pop	{r2, r3, r4, r5}
    29a2:	4690      	mov	r8, r2
    29a4:	4699      	mov	r9, r3
    29a6:	46a2      	mov	sl, r4
    29a8:	46ab      	mov	fp, r5
    29aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y1_set = ((GFX_ED037TC1_MAX_WIDTH / 8) - 1) - (((start_y + window_h) - ((start_y + window_h) % 8)) / 8);
    29ac:	18e6      	adds	r6, r4, r3
    29ae:	3106      	adds	r1, #6
    29b0:	438e      	bics	r6, r1
    29b2:	0031      	movs	r1, r6
    29b4:	17f0      	asrs	r0, r6, #31
    29b6:	2607      	movs	r6, #7
    29b8:	4006      	ands	r6, r0
    29ba:	1876      	adds	r6, r6, r1
    29bc:	10f6      	asrs	r6, r6, #3
    29be:	4276      	negs	r6, r6
    29c0:	3622      	adds	r6, #34	; 0x22
		byte_set = y1_set + ((GFX_ED037TC1_MAX_WIDTH/8) * (start_x));
    29c2:	4649      	mov	r1, r9
    29c4:	0089      	lsls	r1, r1, #2
    29c6:	4449      	add	r1, r9
    29c8:	00c8      	lsls	r0, r1, #3
    29ca:	1a41      	subs	r1, r0, r1
    29cc:	1876      	adds	r6, r6, r1
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    29ce:	218c      	movs	r1, #140	; 0x8c
    29d0:	0049      	lsls	r1, r1, #1
    29d2:	1ac9      	subs	r1, r1, r3
    29d4:	1b09      	subs	r1, r1, r4
		window_set_w = window_h / 8;
    29d6:	08db      	lsrs	r3, r3, #3
    29d8:	9301      	str	r3, [sp, #4]
		window_set_h = window_w;
    29da:	0013      	movs	r3, r2
		window_set_y = start_x;
    29dc:	464c      	mov	r4, r9
		window_set_x = (GFX_ED037TC1_MAX_WIDTH - start_y - window_h);
    29de:	b28a      	uxth	r2, r1
    29e0:	4691      	mov	r9, r2
    29e2:	e7b1      	b.n	2948 <eink_ed037tc1_put_partial_display_buffer+0x58>
        x1_set = (GFX_ED037TC1_MAX_WIDTH - 1) - ((start_x - (start_x % 8)) / 8);
    29e4:	10c6      	asrs	r6, r0, #3
    29e6:	490a      	ldr	r1, [pc, #40]	; (2a10 <eink_ed037tc1_put_partial_display_buffer+0x120>)
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + x1_set );
    29e8:	1b89      	subs	r1, r1, r6
    29ea:	2623      	movs	r6, #35	; 0x23
    29ec:	4276      	negs	r6, r6
    29ee:	4366      	muls	r6, r4
    29f0:	198e      	adds	r6, r1, r6
    29f2:	e7a9      	b.n	2948 <eink_ed037tc1_put_partial_display_buffer+0x58>
        y1_set = (start_y - (start_y % 8)) / 8;
    29f4:	10e2      	asrs	r2, r4, #3
        byte_set = ( ((GFX_ED037TC1_MAX_HEIGHT - 1) * (GFX_ED037TC1_MAX_WIDTH/8)) - (start_y * (GFX_ED037TC1_MAX_WIDTH/8)) + y1_set );
    29f6:	3926      	subs	r1, #38	; 0x26
    29f8:	4361      	muls	r1, r4
    29fa:	1856      	adds	r6, r2, r1
    29fc:	4a05      	ldr	r2, [pc, #20]	; (2a14 <eink_ed037tc1_put_partial_display_buffer+0x124>)
    29fe:	4694      	mov	ip, r2
    2a00:	4466      	add	r6, ip
    2a02:	e7a1      	b.n	2948 <eink_ed037tc1_put_partial_display_buffer+0x58>
    2a04:	20000414 	.word	0x20000414
    2a08:	20000430 	.word	0x20000430
    2a0c:	00001c5d 	.word	0x00001c5d
    2a10:	00004294 	.word	0x00004294
    2a14:	0000417d 	.word	0x0000417d

00002a18 <eink_et011tt2_put_display_buffer>:
{
    2a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a1a:	b087      	sub	sp, #28
    2a1c:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2a1e:	a904      	add	r1, sp, #16
    2a20:	2300      	movs	r3, #0
    2a22:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2a24:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2a26:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0xEF; /* W = 239 */
    2a28:	22ef      	movs	r2, #239	; 0xef
    2a2a:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2a2c:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xEF; /* H = 239 */
    2a2e:	714a      	strb	r2, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2a30:	3ae9      	subs	r2, #233	; 0xe9
    2a32:	2014      	movs	r0, #20
    2a34:	4c32      	ldr	r4, [pc, #200]	; (2b00 <eink_et011tt2_put_display_buffer+0xe8>)
    2a36:	47a0      	blx	r4
    eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    2a38:	4b32      	ldr	r3, [pc, #200]	; (2b04 <eink_et011tt2_put_display_buffer+0xec>)
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	6919      	ldr	r1, [r3, #16]
    2a3e:	22e1      	movs	r2, #225	; 0xe1
    2a40:	0192      	lsls	r2, r2, #6
    2a42:	2013      	movs	r0, #19
    2a44:	47a0      	blx	r4
    if(refresh_display) {
    2a46:	2d00      	cmp	r5, #0
    2a48:	d101      	bne.n	2a4e <eink_et011tt2_put_display_buffer+0x36>
}
    2a4a:	b007      	add	sp, #28
    2a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(uc8173_global_instance.display_config.update_mode == UPDATE_FAST)
    2a4e:	4b2e      	ldr	r3, [pc, #184]	; (2b08 <eink_et011tt2_put_display_buffer+0xf0>)
    2a50:	785b      	ldrb	r3, [r3, #1]
    2a52:	2b01      	cmp	r3, #1
    2a54:	d03b      	beq.n	2ace <eink_et011tt2_put_display_buffer+0xb6>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_A2)
    2a56:	4b2c      	ldr	r3, [pc, #176]	; (2b08 <eink_et011tt2_put_display_buffer+0xf0>)
    2a58:	78db      	ldrb	r3, [r3, #3]
    2a5a:	2b02      	cmp	r3, #2
    2a5c:	d014      	beq.n	2a88 <eink_et011tt2_put_display_buffer+0x70>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_A2;
    2a5e:	2202      	movs	r2, #2
    2a60:	4b29      	ldr	r3, [pc, #164]	; (2b08 <eink_et011tt2_put_display_buffer+0xf0>)
    2a62:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_A2_LUT, 32);
    2a64:	4c29      	ldr	r4, [pc, #164]	; (2b0c <eink_et011tt2_put_display_buffer+0xf4>)
    2a66:	0021      	movs	r1, r4
    2a68:	3120      	adds	r1, #32
    2a6a:	321e      	adds	r2, #30
    2a6c:	2020      	movs	r0, #32
    2a6e:	4d24      	ldr	r5, [pc, #144]	; (2b00 <eink_et011tt2_put_display_buffer+0xe8>)
    2a70:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_A2_LUT, 512);
    2a72:	0021      	movs	r1, r4
    2a74:	3140      	adds	r1, #64	; 0x40
    2a76:	2280      	movs	r2, #128	; 0x80
    2a78:	0092      	lsls	r2, r2, #2
    2a7a:	2022      	movs	r0, #34	; 0x22
    2a7c:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    2a7e:	2280      	movs	r2, #128	; 0x80
    2a80:	4923      	ldr	r1, [pc, #140]	; (2b10 <eink_et011tt2_put_display_buffer+0xf8>)
    2a82:	3120      	adds	r1, #32
    2a84:	2026      	movs	r0, #38	; 0x26
    2a86:	47a8      	blx	r5
    eink_data[0] = 0x00; /* GU2 Update Mode */
    2a88:	a902      	add	r1, sp, #8
    2a8a:	2300      	movs	r3, #0
    2a8c:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2a8e:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2a90:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2a92:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0xEF; /* W = 249 */
    2a94:	22ef      	movs	r2, #239	; 0xef
    2a96:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2a98:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xEF; /* H = 249 */
    2a9a:	718a      	strb	r2, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2a9c:	3ae8      	subs	r2, #232	; 0xe8
    2a9e:	2012      	movs	r0, #18
    2aa0:	4b17      	ldr	r3, [pc, #92]	; (2b00 <eink_et011tt2_put_display_buffer+0xe8>)
    2aa2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2aa4:	4f1b      	ldr	r7, [pc, #108]	; (2b14 <eink_et011tt2_put_display_buffer+0xfc>)
	CRITICAL_SECTION_LEAVE();
    2aa6:	4e1c      	ldr	r6, [pc, #112]	; (2b18 <eink_et011tt2_put_display_buffer+0x100>)
	CRITICAL_SECTION_ENTER();
    2aa8:	a801      	add	r0, sp, #4
    2aaa:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2aac:	23c0      	movs	r3, #192	; 0xc0
    2aae:	05db      	lsls	r3, r3, #23
    2ab0:	2580      	movs	r5, #128	; 0x80
    2ab2:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2ab4:	22a0      	movs	r2, #160	; 0xa0
    2ab6:	4919      	ldr	r1, [pc, #100]	; (2b1c <eink_et011tt2_put_display_buffer+0x104>)
    2ab8:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2aba:	2190      	movs	r1, #144	; 0x90
    2abc:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2abe:	4053      	eors	r3, r2
    2ac0:	401c      	ands	r4, r3
    2ac2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2ac4:	a801      	add	r0, sp, #4
    2ac6:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2ac8:	4225      	tst	r5, r4
    2aca:	d0ed      	beq.n	2aa8 <eink_et011tt2_put_display_buffer+0x90>
    2acc:	e7bd      	b.n	2a4a <eink_et011tt2_put_display_buffer+0x32>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ET011TT2_GU)
    2ace:	4b0e      	ldr	r3, [pc, #56]	; (2b08 <eink_et011tt2_put_display_buffer+0xf0>)
    2ad0:	78db      	ldrb	r3, [r3, #3]
    2ad2:	2b01      	cmp	r3, #1
    2ad4:	d0d8      	beq.n	2a88 <eink_et011tt2_put_display_buffer+0x70>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ET011TT2_GU;
    2ad6:	2201      	movs	r2, #1
    2ad8:	4b0b      	ldr	r3, [pc, #44]	; (2b08 <eink_et011tt2_put_display_buffer+0xf0>)
    2ada:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ET011TT2_KWVCOM_GU_LUT, 32);
    2adc:	4c10      	ldr	r4, [pc, #64]	; (2b20 <eink_et011tt2_put_display_buffer+0x108>)
    2ade:	321f      	adds	r2, #31
    2ae0:	0021      	movs	r1, r4
    2ae2:	2020      	movs	r0, #32
    2ae4:	4d06      	ldr	r5, [pc, #24]	; (2b00 <eink_et011tt2_put_display_buffer+0xe8>)
    2ae6:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_KW, ET011TT2_KW_GU_LUT, 512);
    2ae8:	0021      	movs	r1, r4
    2aea:	3120      	adds	r1, #32
    2aec:	2280      	movs	r2, #128	; 0x80
    2aee:	0092      	lsls	r2, r2, #2
    2af0:	2022      	movs	r0, #34	; 0x22
    2af2:	47a8      	blx	r5
		eink_write_data(UC8173_LUT_FT, ET011TT2_FT_LUT, 128);
    2af4:	2280      	movs	r2, #128	; 0x80
    2af6:	4906      	ldr	r1, [pc, #24]	; (2b10 <eink_et011tt2_put_display_buffer+0xf8>)
    2af8:	3120      	adds	r1, #32
    2afa:	2026      	movs	r0, #38	; 0x26
    2afc:	47a8      	blx	r5
    2afe:	e7c3      	b.n	2a88 <eink_et011tt2_put_display_buffer+0x70>
    2b00:	00001c5d 	.word	0x00001c5d
    2b04:	20000430 	.word	0x20000430
    2b08:	20000390 	.word	0x20000390
    2b0c:	000057a0 	.word	0x000057a0
    2b10:	00005720 	.word	0x00005720
    2b14:	0000034d 	.word	0x0000034d
    2b18:	0000035b 	.word	0x0000035b
    2b1c:	41004400 	.word	0x41004400
    2b20:	00005520 	.word	0x00005520

00002b24 <eink_hink_e0154a05_put_display_buffer>:
{
    2b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b26:	46c6      	mov	lr, r8
    2b28:	b500      	push	{lr}
    2b2a:	b086      	sub	sp, #24
    2b2c:	4680      	mov	r8, r0
    eink_data[0] = 0x7D;
    2b2e:	ac05      	add	r4, sp, #20
    2b30:	237d      	movs	r3, #125	; 0x7d
    2b32:	7023      	strb	r3, [r4, #0]
    eink_write_data(SSD1608_WVCOM, eink_data, 1);
    2b34:	2201      	movs	r2, #1
    2b36:	0021      	movs	r1, r4
    2b38:	202c      	movs	r0, #44	; 0x2c
    2b3a:	4d3e      	ldr	r5, [pc, #248]	; (2c34 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2b3c:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2b3e:	2718      	movs	r7, #24
    2b40:	7027      	strb	r7, [r4, #0]
    eink_data[1] = 0x00;
    2b42:	2600      	movs	r6, #0
    2b44:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RXAS, eink_data, 2);
    2b46:	2202      	movs	r2, #2
    2b48:	0021      	movs	r1, r4
    2b4a:	2044      	movs	r0, #68	; 0x44
    2b4c:	47a8      	blx	r5
    eink_data[0] = 0x18;
    2b4e:	7027      	strb	r7, [r4, #0]
    eink_write_data(SSD1608_RXC, eink_data, 1);
    2b50:	2201      	movs	r2, #1
    2b52:	0021      	movs	r1, r4
    2b54:	204e      	movs	r0, #78	; 0x4e
    2b56:	47a8      	blx	r5
    eink_data[0] = 0xC7;
    2b58:	23c7      	movs	r3, #199	; 0xc7
    2b5a:	7023      	strb	r3, [r4, #0]
    eink_data[1] = 0x00;
    2b5c:	7066      	strb	r6, [r4, #1]
    eink_write_data(SSD1608_RYC, eink_data, 2);
    2b5e:	2202      	movs	r2, #2
    2b60:	0021      	movs	r1, r4
    2b62:	204f      	movs	r0, #79	; 0x4f
    2b64:	47a8      	blx	r5
    eink_write_data(SSD1608_WR, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_HINK_E0154A05_DISPLAY_BUFFER_SIZE);
    2b66:	4b34      	ldr	r3, [pc, #208]	; (2c38 <eink_hink_e0154a05_put_display_buffer+0x114>)
    2b68:	681b      	ldr	r3, [r3, #0]
    2b6a:	6919      	ldr	r1, [r3, #16]
    2b6c:	4a33      	ldr	r2, [pc, #204]	; (2c3c <eink_hink_e0154a05_put_display_buffer+0x118>)
    2b6e:	2024      	movs	r0, #36	; 0x24
    2b70:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    2b72:	4f33      	ldr	r7, [pc, #204]	; (2c40 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2b74:	4e33      	ldr	r6, [pc, #204]	; (2c44 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2b76:	a802      	add	r0, sp, #8
    2b78:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2b7a:	23c0      	movs	r3, #192	; 0xc0
    2b7c:	05db      	lsls	r3, r3, #23
    2b7e:	2580      	movs	r5, #128	; 0x80
    2b80:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2b82:	22a0      	movs	r2, #160	; 0xa0
    2b84:	4930      	ldr	r1, [pc, #192]	; (2c48 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2b86:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b88:	2190      	movs	r1, #144	; 0x90
    2b8a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2b8c:	4053      	eors	r3, r2
    2b8e:	401c      	ands	r4, r3
    2b90:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b92:	a802      	add	r0, sp, #8
    2b94:	47b0      	blx	r6
    2b96:	4225      	tst	r5, r4
    2b98:	d1ed      	bne.n	2b76 <eink_hink_e0154a05_put_display_buffer+0x52>
    if(refresh_display) {
    2b9a:	4643      	mov	r3, r8
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d103      	bne.n	2ba8 <eink_hink_e0154a05_put_display_buffer+0x84>
}
    2ba0:	b006      	add	sp, #24
    2ba2:	bc04      	pop	{r2}
    2ba4:	4690      	mov	r8, r2
    2ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ssd1608_global_instance.display_config.update_mode == UPDATE_FAST)
    2ba8:	4b28      	ldr	r3, [pc, #160]	; (2c4c <eink_hink_e0154a05_put_display_buffer+0x128>)
    2baa:	785b      	ldrb	r3, [r3, #1]
    2bac:	2b01      	cmp	r3, #1
    2bae:	d035      	beq.n	2c1c <eink_hink_e0154a05_put_display_buffer+0xf8>
        eink_data[0] = 0xF7; /* Slow Update */
    2bb0:	22f7      	movs	r2, #247	; 0xf7
    2bb2:	ab01      	add	r3, sp, #4
    2bb4:	701a      	strb	r2, [r3, #0]
    eink_write_data(SSD1608_DUC2, eink_data, 1);
    2bb6:	2201      	movs	r2, #1
    2bb8:	a901      	add	r1, sp, #4
    2bba:	2022      	movs	r0, #34	; 0x22
    2bbc:	4b1d      	ldr	r3, [pc, #116]	; (2c34 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2bbe:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2bc0:	4f1f      	ldr	r7, [pc, #124]	; (2c40 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2bc2:	4e20      	ldr	r6, [pc, #128]	; (2c44 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2bc4:	a803      	add	r0, sp, #12
    2bc6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2bc8:	23c0      	movs	r3, #192	; 0xc0
    2bca:	05db      	lsls	r3, r3, #23
    2bcc:	2580      	movs	r5, #128	; 0x80
    2bce:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2bd0:	22a0      	movs	r2, #160	; 0xa0
    2bd2:	491d      	ldr	r1, [pc, #116]	; (2c48 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2bd4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2bd6:	2190      	movs	r1, #144	; 0x90
    2bd8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2bda:	4053      	eors	r3, r2
    2bdc:	401c      	ands	r4, r3
    2bde:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2be0:	a803      	add	r0, sp, #12
    2be2:	47b0      	blx	r6
    2be4:	4225      	tst	r5, r4
    2be6:	d1ed      	bne.n	2bc4 <eink_hink_e0154a05_put_display_buffer+0xa0>
    eink_write_data(SSD1608_MA, 0, 0);
    2be8:	2200      	movs	r2, #0
    2bea:	2100      	movs	r1, #0
    2bec:	2020      	movs	r0, #32
    2bee:	4b11      	ldr	r3, [pc, #68]	; (2c34 <eink_hink_e0154a05_put_display_buffer+0x110>)
    2bf0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2bf2:	4f13      	ldr	r7, [pc, #76]	; (2c40 <eink_hink_e0154a05_put_display_buffer+0x11c>)
	CRITICAL_SECTION_LEAVE();
    2bf4:	4e13      	ldr	r6, [pc, #76]	; (2c44 <eink_hink_e0154a05_put_display_buffer+0x120>)
	CRITICAL_SECTION_ENTER();
    2bf6:	a804      	add	r0, sp, #16
    2bf8:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2bfa:	23c0      	movs	r3, #192	; 0xc0
    2bfc:	05db      	lsls	r3, r3, #23
    2bfe:	2580      	movs	r5, #128	; 0x80
    2c00:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c02:	22a0      	movs	r2, #160	; 0xa0
    2c04:	4910      	ldr	r1, [pc, #64]	; (2c48 <eink_hink_e0154a05_put_display_buffer+0x124>)
    2c06:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c08:	2190      	movs	r1, #144	; 0x90
    2c0a:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2c0c:	4053      	eors	r3, r2
    2c0e:	401c      	ands	r4, r3
    2c10:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c12:	a804      	add	r0, sp, #16
    2c14:	47b0      	blx	r6
    2c16:	4225      	tst	r5, r4
    2c18:	d1ed      	bne.n	2bf6 <eink_hink_e0154a05_put_display_buffer+0xd2>
    2c1a:	e7c1      	b.n	2ba0 <eink_hink_e0154a05_put_display_buffer+0x7c>
        if(ssd1608_global_instance.display_config.display_part_no == SSD1608_HINK_E0154A05)
    2c1c:	4b0b      	ldr	r3, [pc, #44]	; (2c4c <eink_hink_e0154a05_put_display_buffer+0x128>)
    2c1e:	789b      	ldrb	r3, [r3, #2]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d103      	bne.n	2c2c <eink_hink_e0154a05_put_display_buffer+0x108>
            eink_data[0] = 0xC7; /* Register LUT Update - HINK-E0154A05 */
    2c24:	22c7      	movs	r2, #199	; 0xc7
    2c26:	ab01      	add	r3, sp, #4
    2c28:	701a      	strb	r2, [r3, #0]
    2c2a:	e7c4      	b.n	2bb6 <eink_hink_e0154a05_put_display_buffer+0x92>
            eink_data[0] = 0xFF; /* Register LUT Update - HINK-E0154A45 */
    2c2c:	22ff      	movs	r2, #255	; 0xff
    2c2e:	ab01      	add	r3, sp, #4
    2c30:	701a      	strb	r2, [r3, #0]
    2c32:	e7c0      	b.n	2bb6 <eink_hink_e0154a05_put_display_buffer+0x92>
    2c34:	00001c5d 	.word	0x00001c5d
    2c38:	20000430 	.word	0x20000430
    2c3c:	00001388 	.word	0x00001388
    2c40:	0000034d 	.word	0x0000034d
    2c44:	0000035b 	.word	0x0000035b
    2c48:	41004400 	.word	0x41004400
    2c4c:	200003b8 	.word	0x200003b8

00002c50 <eink_ed028tc1_put_display_buffer>:
{
    2c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c52:	b089      	sub	sp, #36	; 0x24
    2c54:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2c56:	a906      	add	r1, sp, #24
    2c58:	2300      	movs	r3, #0
    2c5a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2c5c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2c5e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00;
    2c60:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x02; /* W = 600 */
    2c62:	3302      	adds	r3, #2
    2c64:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x58;
    2c66:	3356      	adds	r3, #86	; 0x56
    2c68:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x01; /* H = 480 */
    2c6a:	3b57      	subs	r3, #87	; 0x57
    2c6c:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0xE0;
    2c6e:	33df      	adds	r3, #223	; 0xdf
    2c70:	71cb      	strb	r3, [r1, #7]
    eink_write_data(UC8177_DTMW, eink_data, 8);
    2c72:	2208      	movs	r2, #8
    2c74:	2083      	movs	r0, #131	; 0x83
    2c76:	4c33      	ldr	r4, [pc, #204]	; (2d44 <eink_ed028tc1_put_display_buffer+0xf4>)
    2c78:	47a0      	blx	r4
    eink_write_data(UC8177_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ED028TC1_DISPLAY_BUFFER_SIZE);
    2c7a:	4b33      	ldr	r3, [pc, #204]	; (2d48 <eink_ed028tc1_put_display_buffer+0xf8>)
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	6919      	ldr	r1, [r3, #16]
    2c80:	4a32      	ldr	r2, [pc, #200]	; (2d4c <eink_ed028tc1_put_display_buffer+0xfc>)
    2c82:	2010      	movs	r0, #16
    2c84:	47a0      	blx	r4
    if((uc8177_global_instance.display_config.display_rotation == ROTATE_90) || (uc8177_global_instance.display_config.display_rotation == ROTATE_180)) {
    2c86:	4b32      	ldr	r3, [pc, #200]	; (2d50 <eink_ed028tc1_put_display_buffer+0x100>)
    2c88:	781b      	ldrb	r3, [r3, #0]
    2c8a:	2b01      	cmp	r3, #1
    2c8c:	d00f      	beq.n	2cae <eink_ed028tc1_put_display_buffer+0x5e>
    2c8e:	4b30      	ldr	r3, [pc, #192]	; (2d50 <eink_ed028tc1_put_display_buffer+0x100>)
    2c90:	781b      	ldrb	r3, [r3, #0]
    2c92:	2b02      	cmp	r3, #2
    2c94:	d00b      	beq.n	2cae <eink_ed028tc1_put_display_buffer+0x5e>
        eink_data[0] = 0x02;
    2c96:	2202      	movs	r2, #2
    2c98:	ab06      	add	r3, sp, #24
    2c9a:	701a      	strb	r2, [r3, #0]
    eink_write_data(UC8177_GDOS, eink_data, 1);
    2c9c:	2201      	movs	r2, #1
    2c9e:	a906      	add	r1, sp, #24
    2ca0:	20e0      	movs	r0, #224	; 0xe0
    2ca2:	4b28      	ldr	r3, [pc, #160]	; (2d44 <eink_ed028tc1_put_display_buffer+0xf4>)
    2ca4:	4798      	blx	r3
    if(refresh_display) {
    2ca6:	2d00      	cmp	r5, #0
    2ca8:	d105      	bne.n	2cb6 <eink_ed028tc1_put_display_buffer+0x66>
}
    2caa:	b009      	add	sp, #36	; 0x24
    2cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        eink_data[0] = 0x03;
    2cae:	2203      	movs	r2, #3
    2cb0:	ab06      	add	r3, sp, #24
    2cb2:	701a      	strb	r2, [r3, #0]
    2cb4:	e7f2      	b.n	2c9c <eink_ed028tc1_put_display_buffer+0x4c>
    eink_write_data(UC8177_PON, 0, 0);
    2cb6:	2200      	movs	r2, #0
    2cb8:	2100      	movs	r1, #0
    2cba:	2004      	movs	r0, #4
    2cbc:	4b21      	ldr	r3, [pc, #132]	; (2d44 <eink_ed028tc1_put_display_buffer+0xf4>)
    2cbe:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2cc0:	4f24      	ldr	r7, [pc, #144]	; (2d54 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2cc2:	4e25      	ldr	r6, [pc, #148]	; (2d58 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2cc4:	a801      	add	r0, sp, #4
    2cc6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2cc8:	23c0      	movs	r3, #192	; 0xc0
    2cca:	05db      	lsls	r3, r3, #23
    2ccc:	2580      	movs	r5, #128	; 0x80
    2cce:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2cd0:	22a0      	movs	r2, #160	; 0xa0
    2cd2:	4922      	ldr	r1, [pc, #136]	; (2d5c <eink_ed028tc1_put_display_buffer+0x10c>)
    2cd4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2cd6:	2190      	movs	r1, #144	; 0x90
    2cd8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2cda:	4053      	eors	r3, r2
    2cdc:	401c      	ands	r4, r3
    2cde:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2ce0:	a801      	add	r0, sp, #4
    2ce2:	47b0      	blx	r6
    2ce4:	4225      	tst	r5, r4
    2ce6:	d0ed      	beq.n	2cc4 <eink_ed028tc1_put_display_buffer+0x74>
    eink_data[0] = 0x18; /* Update Mode 1 */
    2ce8:	a903      	add	r1, sp, #12
    2cea:	2318      	movs	r3, #24
    2cec:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2cee:	2300      	movs	r3, #0
    2cf0:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2cf2:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2cf4:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x00;
    2cf6:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0x02; /* W = 600 */
    2cf8:	3302      	adds	r3, #2
    2cfa:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0x58;
    2cfc:	3356      	adds	r3, #86	; 0x56
    2cfe:	718b      	strb	r3, [r1, #6]
    eink_data[7] = 0x01; /* H = 480 */
    2d00:	3b57      	subs	r3, #87	; 0x57
    2d02:	71cb      	strb	r3, [r1, #7]
    eink_data[8] = 0xE0;
    2d04:	33df      	adds	r3, #223	; 0xdf
    2d06:	720b      	strb	r3, [r1, #8]
    eink_write_data(UC8177_DRF, eink_data, 9);
    2d08:	2209      	movs	r2, #9
    2d0a:	2012      	movs	r0, #18
    2d0c:	4c0d      	ldr	r4, [pc, #52]	; (2d44 <eink_ed028tc1_put_display_buffer+0xf4>)
    2d0e:	47a0      	blx	r4
    eink_write_data(UC8177_POF, 0, 0);
    2d10:	2200      	movs	r2, #0
    2d12:	2100      	movs	r1, #0
    2d14:	2002      	movs	r0, #2
    2d16:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2d18:	4f0e      	ldr	r7, [pc, #56]	; (2d54 <eink_ed028tc1_put_display_buffer+0x104>)
	CRITICAL_SECTION_LEAVE();
    2d1a:	4e0f      	ldr	r6, [pc, #60]	; (2d58 <eink_ed028tc1_put_display_buffer+0x108>)
	CRITICAL_SECTION_ENTER();
    2d1c:	a802      	add	r0, sp, #8
    2d1e:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2d20:	23c0      	movs	r3, #192	; 0xc0
    2d22:	05db      	lsls	r3, r3, #23
    2d24:	2580      	movs	r5, #128	; 0x80
    2d26:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2d28:	22a0      	movs	r2, #160	; 0xa0
    2d2a:	490c      	ldr	r1, [pc, #48]	; (2d5c <eink_ed028tc1_put_display_buffer+0x10c>)
    2d2c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2d2e:	2190      	movs	r1, #144	; 0x90
    2d30:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2d32:	4053      	eors	r3, r2
    2d34:	401c      	ands	r4, r3
    2d36:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2d38:	a802      	add	r0, sp, #8
    2d3a:	47b0      	blx	r6
    2d3c:	4225      	tst	r5, r4
    2d3e:	d0ed      	beq.n	2d1c <eink_ed028tc1_put_display_buffer+0xcc>
    2d40:	e7b3      	b.n	2caa <eink_ed028tc1_put_display_buffer+0x5a>
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	00001c5d 	.word	0x00001c5d
    2d48:	20000430 	.word	0x20000430
    2d4c:	00023280 	.word	0x00023280
    2d50:	200003b0 	.word	0x200003b0
    2d54:	0000034d 	.word	0x0000034d
    2d58:	0000035b 	.word	0x0000035b
    2d5c:	41004400 	.word	0x41004400

00002d60 <eink_ed013tc1_put_display_buffer>:
{
    2d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d62:	b089      	sub	sp, #36	; 0x24
    2d64:	0005      	movs	r5, r0
    eink_data[0] = 0x00; /* X = 0 */
    2d66:	a906      	add	r1, sp, #24
    2d68:	2300      	movs	r3, #0
    2d6a:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00;
    2d6c:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00; /* Y = 0 */
    2d6e:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x7F; /* W = 127 */
    2d70:	227f      	movs	r2, #127	; 0x7f
    2d72:	70ca      	strb	r2, [r1, #3]
    eink_data[4] = 0x00;
    2d74:	710b      	strb	r3, [r1, #4]
    eink_data[5] = 0xFF; /* H = 255 */
    2d76:	33ff      	adds	r3, #255	; 0xff
    2d78:	714b      	strb	r3, [r1, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    2d7a:	3a79      	subs	r2, #121	; 0x79
    2d7c:	2014      	movs	r0, #20
    2d7e:	4c43      	ldr	r4, [pc, #268]	; (2e8c <eink_ed013tc1_put_display_buffer+0x12c>)
    2d80:	47a0      	blx	r4
    eink_write_data(UC8173_DTM4, ptr_eink_gfx_config->display_buffer_2_ptr, GFX_ED013TC1_DISPLAY_BUFFER_SIZE);
    2d82:	4b43      	ldr	r3, [pc, #268]	; (2e90 <eink_ed013tc1_put_display_buffer+0x130>)
    2d84:	681b      	ldr	r3, [r3, #0]
    2d86:	6959      	ldr	r1, [r3, #20]
    2d88:	2280      	movs	r2, #128	; 0x80
    2d8a:	0152      	lsls	r2, r2, #5
    2d8c:	2016      	movs	r0, #22
    2d8e:	47a0      	blx	r4
    if(refresh_display) {
    2d90:	2d00      	cmp	r5, #0
    2d92:	d10d      	bne.n	2db0 <eink_ed013tc1_put_display_buffer+0x50>
{
    2d94:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2d96:	4c3e      	ldr	r4, [pc, #248]	; (2e90 <eink_ed013tc1_put_display_buffer+0x130>)
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2d98:	2080      	movs	r0, #128	; 0x80
    2d9a:	0140      	lsls	r0, r0, #5
        ptr_eink_gfx_config->display_buffer_1_ptr[i] = ptr_eink_gfx_config->display_buffer_2_ptr[i];
    2d9c:	6822      	ldr	r2, [r4, #0]
    2d9e:	6951      	ldr	r1, [r2, #20]
    2da0:	5cc9      	ldrb	r1, [r1, r3]
    2da2:	6912      	ldr	r2, [r2, #16]
    2da4:	54d1      	strb	r1, [r2, r3]
    2da6:	3301      	adds	r3, #1
    for (i=0;i<GFX_ED013TC1_DISPLAY_BUFFER_SIZE;i++) {
    2da8:	4283      	cmp	r3, r0
    2daa:	d1f7      	bne.n	2d9c <eink_ed013tc1_put_display_buffer+0x3c>
}
    2dac:	b009      	add	sp, #36	; 0x24
    2dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_write_data(UC8173_PON, 0, 0);
    2db0:	2200      	movs	r2, #0
    2db2:	2100      	movs	r1, #0
    2db4:	2004      	movs	r0, #4
    2db6:	4b35      	ldr	r3, [pc, #212]	; (2e8c <eink_ed013tc1_put_display_buffer+0x12c>)
    2db8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2dba:	4f36      	ldr	r7, [pc, #216]	; (2e94 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    2dbc:	4e36      	ldr	r6, [pc, #216]	; (2e98 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    2dbe:	a801      	add	r0, sp, #4
    2dc0:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2dc2:	23c0      	movs	r3, #192	; 0xc0
    2dc4:	05db      	lsls	r3, r3, #23
    2dc6:	2580      	movs	r5, #128	; 0x80
    2dc8:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2dca:	22a0      	movs	r2, #160	; 0xa0
    2dcc:	4933      	ldr	r1, [pc, #204]	; (2e9c <eink_ed013tc1_put_display_buffer+0x13c>)
    2dce:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2dd0:	2190      	movs	r1, #144	; 0x90
    2dd2:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2dd4:	4053      	eors	r3, r2
    2dd6:	401c      	ands	r4, r3
    2dd8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2dda:	a801      	add	r0, sp, #4
    2ddc:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2dde:	4225      	tst	r5, r4
    2de0:	d0ed      	beq.n	2dbe <eink_ed013tc1_put_display_buffer+0x5e>
	if(uc8173_global_instance.display_config.uc8173_current_lut != UC8173_LUT_ED013TC1_GC2)
    2de2:	4b2f      	ldr	r3, [pc, #188]	; (2ea0 <eink_ed013tc1_put_display_buffer+0x140>)
    2de4:	78db      	ldrb	r3, [r3, #3]
    2de6:	2b00      	cmp	r3, #0
    2de8:	d13d      	bne.n	2e66 <eink_ed013tc1_put_display_buffer+0x106>
    eink_data[0] = 0x01; /* GU2 Update Mode */
    2dea:	a904      	add	r1, sp, #16
    2dec:	2301      	movs	r3, #1
    2dee:	700b      	strb	r3, [r1, #0]
    eink_data[1] = 0x00; /* X = 0 */
    2df0:	2300      	movs	r3, #0
    2df2:	704b      	strb	r3, [r1, #1]
    eink_data[2] = 0x00;
    2df4:	708b      	strb	r3, [r1, #2]
    eink_data[3] = 0x00; /* Y = 0 */
    2df6:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = 0x7F; /* W = 127 */
    2df8:	227f      	movs	r2, #127	; 0x7f
    2dfa:	710a      	strb	r2, [r1, #4]
    eink_data[5] = 0x00;
    2dfc:	714b      	strb	r3, [r1, #5]
    eink_data[6] = 0xFF; /* H = 255 */
    2dfe:	33ff      	adds	r3, #255	; 0xff
    2e00:	718b      	strb	r3, [r1, #6]
    eink_write_data(UC8173_DRF, eink_data, 7);
    2e02:	3a78      	subs	r2, #120	; 0x78
    2e04:	2012      	movs	r0, #18
    2e06:	4b21      	ldr	r3, [pc, #132]	; (2e8c <eink_ed013tc1_put_display_buffer+0x12c>)
    2e08:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2e0a:	4f22      	ldr	r7, [pc, #136]	; (2e94 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    2e0c:	4e22      	ldr	r6, [pc, #136]	; (2e98 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    2e0e:	a802      	add	r0, sp, #8
    2e10:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2e12:	23c0      	movs	r3, #192	; 0xc0
    2e14:	05db      	lsls	r3, r3, #23
    2e16:	2580      	movs	r5, #128	; 0x80
    2e18:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2e1a:	22a0      	movs	r2, #160	; 0xa0
    2e1c:	491f      	ldr	r1, [pc, #124]	; (2e9c <eink_ed013tc1_put_display_buffer+0x13c>)
    2e1e:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2e20:	2190      	movs	r1, #144	; 0x90
    2e22:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2e24:	4053      	eors	r3, r2
    2e26:	401c      	ands	r4, r3
    2e28:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2e2a:	a802      	add	r0, sp, #8
    2e2c:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    2e2e:	4225      	tst	r5, r4
    2e30:	d0ed      	beq.n	2e0e <eink_ed013tc1_put_display_buffer+0xae>
    eink_write_data(UC8173_POF, 0, 0);
    2e32:	2200      	movs	r2, #0
    2e34:	2100      	movs	r1, #0
    2e36:	2002      	movs	r0, #2
    2e38:	4b14      	ldr	r3, [pc, #80]	; (2e8c <eink_ed013tc1_put_display_buffer+0x12c>)
    2e3a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2e3c:	4f15      	ldr	r7, [pc, #84]	; (2e94 <eink_ed013tc1_put_display_buffer+0x134>)
	CRITICAL_SECTION_LEAVE();
    2e3e:	4e16      	ldr	r6, [pc, #88]	; (2e98 <eink_ed013tc1_put_display_buffer+0x138>)
	CRITICAL_SECTION_ENTER();
    2e40:	a803      	add	r0, sp, #12
    2e42:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2e44:	23c0      	movs	r3, #192	; 0xc0
    2e46:	05db      	lsls	r3, r3, #23
    2e48:	2580      	movs	r5, #128	; 0x80
    2e4a:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2e4c:	22a0      	movs	r2, #160	; 0xa0
    2e4e:	4913      	ldr	r1, [pc, #76]	; (2e9c <eink_ed013tc1_put_display_buffer+0x13c>)
    2e50:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2e52:	2190      	movs	r1, #144	; 0x90
    2e54:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2e56:	4053      	eors	r3, r2
    2e58:	401c      	ands	r4, r3
    2e5a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2e5c:	a803      	add	r0, sp, #12
    2e5e:	47b0      	blx	r6
    while(gpio_get_pin_level(EINK_BUSY));
    2e60:	4225      	tst	r5, r4
    2e62:	d1ed      	bne.n	2e40 <eink_ed013tc1_put_display_buffer+0xe0>
    2e64:	e796      	b.n	2d94 <eink_ed013tc1_put_display_buffer+0x34>
		uc8173_global_instance.display_config.uc8173_current_lut = UC8173_LUT_ED013TC1_GC2;
    2e66:	2200      	movs	r2, #0
    2e68:	4b0d      	ldr	r3, [pc, #52]	; (2ea0 <eink_ed013tc1_put_display_buffer+0x140>)
    2e6a:	70da      	strb	r2, [r3, #3]
		eink_write_data(UC8173_LUT_KWVCOM, ED013TC1_VCOM_GC2, 32);
    2e6c:	3220      	adds	r2, #32
    2e6e:	2155      	movs	r1, #85	; 0x55
    2e70:	2020      	movs	r0, #32
    2e72:	4c06      	ldr	r4, [pc, #24]	; (2e8c <eink_ed013tc1_put_display_buffer+0x12c>)
    2e74:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_KW, ED013TC1_WF_GC2, 512);
    2e76:	2280      	movs	r2, #128	; 0x80
    2e78:	0092      	lsls	r2, r2, #2
    2e7a:	2181      	movs	r1, #129	; 0x81
    2e7c:	2022      	movs	r0, #34	; 0x22
    2e7e:	47a0      	blx	r4
		eink_write_data(UC8173_LUT_FT, ED013TC1_FT_GC2, 128);	
    2e80:	2280      	movs	r2, #128	; 0x80
    2e82:	2100      	movs	r1, #0
    2e84:	2026      	movs	r0, #38	; 0x26
    2e86:	47a0      	blx	r4
    2e88:	e7af      	b.n	2dea <eink_ed013tc1_put_display_buffer+0x8a>
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	00001c5d 	.word	0x00001c5d
    2e90:	20000430 	.word	0x20000430
    2e94:	0000034d 	.word	0x0000034d
    2e98:	0000035b 	.word	0x0000035b
    2e9c:	41004400 	.word	0x41004400
    2ea0:	20000390 	.word	0x20000390

00002ea4 <_eink_ite_write_data>:
void _eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes,
        uint8_t fast_write)
{   
    2ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ea6:	0004      	movs	r4, r0
    2ea8:	0015      	movs	r5, r2
    uint32_t i, j, sendWords_m, sendWords_r;
    
    eink_ite_wait_for_hrdy();
    2eaa:	4b12      	ldr	r3, [pc, #72]	; (2ef4 <_eink_ite_write_data+0x50>)
    2eac:	4798      	blx	r3
    if (command != 0) {
    2eae:	2c00      	cmp	r4, #0
    2eb0:	d11d      	bne.n	2eee <_eink_ite_write_data+0x4a>
        /* Set CSB LOW to enable communication to the display */
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
    }
    
    eink_ite_wait_for_hrdy();
    2eb2:	4b10      	ldr	r3, [pc, #64]	; (2ef4 <_eink_ite_write_data+0x50>)
    2eb4:	4798      	blx	r3
    if (data_bytes != 0) {
    2eb6:	2d00      	cmp	r5, #0
    2eb8:	d018      	beq.n	2eec <_eink_ite_write_data+0x48>
        /* Data burst must be sent 1024 words at a time */
        sendWords_r = data_bytes % 2048;
    2eba:	056e      	lsls	r6, r5, #21
    2ebc:	0d76      	lsrs	r6, r6, #21
        sendWords_m = (data_bytes - sendWords_r) / 2048;
    2ebe:	1bad      	subs	r5, r5, r6
    2ec0:	0aed      	lsrs	r5, r5, #11
        
        /* If we have more than 1024 words, start sending them in bursts */
        for(j=0; j<sendWords_m; j++)
    2ec2:	2400      	movs	r4, #0
    2ec4:	2d00      	cmp	r5, #0
    2ec6:	d009      	beq.n	2edc <_eink_ite_write_data+0x38>
            }           
            /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
            gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
            eink_ite_wait_for_hrdy();
    2ec8:	4f0a      	ldr	r7, [pc, #40]	; (2ef4 <_eink_ite_write_data+0x50>)
{   
    2eca:	2380      	movs	r3, #128	; 0x80
    2ecc:	011b      	lsls	r3, r3, #4
    2ece:	3b01      	subs	r3, #1
            for (i=0; i<2048; i++)
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d1fc      	bne.n	2ece <_eink_ite_write_data+0x2a>
            eink_ite_wait_for_hrdy();
    2ed4:	47b8      	blx	r7
        for(j=0; j<sendWords_m; j++)
    2ed6:	3401      	adds	r4, #1
    2ed8:	42a5      	cmp	r5, r4
    2eda:	d1f6      	bne.n	2eca <_eink_ite_write_data+0x26>
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 0);
#endif
        eink_ite_send_raw_hword(0x0000);
        /* Send the remaining data (or all the data if there was less than 1024 words */
        for (i=0; i<sendWords_r; i++) {
    2edc:	2e00      	cmp	r6, #0
    2ede:	d003      	beq.n	2ee8 <_eink_ite_write_data+0x44>
    2ee0:	2300      	movs	r3, #0
    2ee2:	3301      	adds	r3, #1
    2ee4:	429e      	cmp	r6, r3
    2ee6:	d1fc      	bne.n	2ee2 <_eink_ite_write_data+0x3e>
        }
        /* Set CSB LOW to enable communication to the display */
#ifdef EINK_SPI_CSB
        gpio_set_pin_level(EINK_SPI_CSB, 1);
#endif
        eink_ite_wait_for_hrdy();
    2ee8:	4b02      	ldr	r3, [pc, #8]	; (2ef4 <_eink_ite_write_data+0x50>)
    2eea:	4798      	blx	r3
    }
}
    2eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eink_ite_wait_for_hrdy();
    2eee:	4b01      	ldr	r3, [pc, #4]	; (2ef4 <_eink_ite_write_data+0x50>)
    2ef0:	4798      	blx	r3
    2ef2:	e7de      	b.n	2eb2 <_eink_ite_write_data+0xe>
    2ef4:	00000575 	.word	0x00000575

00002ef8 <eink_ite_write_data>:
 */
void eink_ite_write_data(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    2ef8:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 0);
    2efa:	2300      	movs	r3, #0
    2efc:	4c01      	ldr	r4, [pc, #4]	; (2f04 <eink_ite_write_data+0xc>)
    2efe:	47a0      	blx	r4
}
    2f00:	bd10      	pop	{r4, pc}
    2f02:	46c0      	nop			; (mov r8, r8)
    2f04:	00002ea5 	.word	0x00002ea5

00002f08 <eink_it8951_refresh_partial_display>:
    eink_coordinate show_x,
    eink_coordinate show_y,
    eink_coordinate show_w,
    eink_coordinate show_h,
    uint8_t update_mode)
{
    2f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f0a:	b085      	sub	sp, #20
    2f0c:	ac0a      	add	r4, sp, #40	; 0x28
    2f0e:	7825      	ldrb	r5, [r4, #0]
    uint16_t eink_data[5];
    switch(it8951_global_instance.display_rotation)
    2f10:	2430      	movs	r4, #48	; 0x30
    2f12:	4e26      	ldr	r6, [pc, #152]	; (2fac <eink_it8951_refresh_partial_display+0xa4>)
    2f14:	5d34      	ldrb	r4, [r6, r4]
    2f16:	b2e4      	uxtb	r4, r4
    2f18:	2c01      	cmp	r4, #1
    2f1a:	d025      	beq.n	2f68 <eink_it8951_refresh_partial_display+0x60>
    2f1c:	2c00      	cmp	r4, #0
    2f1e:	d01d      	beq.n	2f5c <eink_it8951_refresh_partial_display+0x54>
    2f20:	2c02      	cmp	r4, #2
    2f22:	d02b      	beq.n	2f7c <eink_it8951_refresh_partial_display+0x74>
    2f24:	2c03      	cmp	r4, #3
    2f26:	d036      	beq.n	2f96 <eink_it8951_refresh_partial_display+0x8e>
            eink_data[1] = (uint16_t) show_y;
            eink_data[2] = (uint16_t) show_w;
            eink_data[3] = (uint16_t) show_h;
            break;
    }
    eink_data[4] = (uint16_t) update_mode;
    2f28:	a901      	add	r1, sp, #4
    2f2a:	810d      	strh	r5, [r1, #8]
    /* Send I80 Display Command */
    eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2f2c:	2201      	movs	r2, #1
    2f2e:	2034      	movs	r0, #52	; 0x34
    2f30:	4c1f      	ldr	r4, [pc, #124]	; (2fb0 <eink_it8951_refresh_partial_display+0xa8>)
    2f32:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[1], 1);
    2f34:	2201      	movs	r2, #1
    2f36:	466b      	mov	r3, sp
    2f38:	1d99      	adds	r1, r3, #6
    2f3a:	2000      	movs	r0, #0
    2f3c:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[2], 1);
    2f3e:	2201      	movs	r2, #1
    2f40:	a902      	add	r1, sp, #8
    2f42:	2000      	movs	r0, #0
    2f44:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[3], 1);
    2f46:	2201      	movs	r2, #1
    2f48:	210a      	movs	r1, #10
    2f4a:	4469      	add	r1, sp
    2f4c:	2000      	movs	r0, #0
    2f4e:	47a0      	blx	r4
    eink_ite_write_data(0, &eink_data[4], 1);
    2f50:	2201      	movs	r2, #1
    2f52:	a903      	add	r1, sp, #12
    2f54:	2000      	movs	r0, #0
    2f56:	47a0      	blx	r4
}
    2f58:	b005      	add	sp, #20
    2f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_data[0] = (uint16_t) show_y;
    2f5c:	ac01      	add	r4, sp, #4
    2f5e:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) show_x;
    2f60:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2f62:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2f64:	80e2      	strh	r2, [r4, #6]
            break;
    2f66:	e7df      	b.n	2f28 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) show_x;
    2f68:	ac01      	add	r4, sp, #4
    2f6a:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_y-show_h;
    2f6c:	480f      	ldr	r0, [pc, #60]	; (2fac <eink_it8951_refresh_partial_display+0xa4>)
    2f6e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2f70:	1a41      	subs	r1, r0, r1
    2f72:	1ac9      	subs	r1, r1, r3
    2f74:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    2f76:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    2f78:	80e3      	strh	r3, [r4, #6]
            break;
    2f7a:	e7d5      	b.n	2f28 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_y-show_h;
    2f7c:	4f0b      	ldr	r7, [pc, #44]	; (2fac <eink_it8951_refresh_partial_display+0xa4>)
    2f7e:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
    2f80:	ac01      	add	r4, sp, #4
    2f82:	1a71      	subs	r1, r6, r1
    2f84:	1ac9      	subs	r1, r1, r3
    2f86:	8021      	strh	r1, [r4, #0]
            eink_data[1] = (uint16_t) it8951_global_instance.display_width-show_x-show_w;
    2f88:	8d39      	ldrh	r1, [r7, #40]	; 0x28
    2f8a:	1a08      	subs	r0, r1, r0
    2f8c:	1a80      	subs	r0, r0, r2
    2f8e:	8060      	strh	r0, [r4, #2]
            eink_data[2] = (uint16_t) show_h;
    2f90:	80a3      	strh	r3, [r4, #4]
            eink_data[3] = (uint16_t) show_w;
    2f92:	80e2      	strh	r2, [r4, #6]
            break;
    2f94:	e7c8      	b.n	2f28 <eink_it8951_refresh_partial_display+0x20>
            eink_data[0] = (uint16_t) it8951_global_instance.display_height-show_x-show_w;
    2f96:	4c05      	ldr	r4, [pc, #20]	; (2fac <eink_it8951_refresh_partial_display+0xa4>)
    2f98:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
    2f9a:	ac01      	add	r4, sp, #4
    2f9c:	1a30      	subs	r0, r6, r0
    2f9e:	1a80      	subs	r0, r0, r2
    2fa0:	8020      	strh	r0, [r4, #0]
            eink_data[1] = (uint16_t) show_y;
    2fa2:	8061      	strh	r1, [r4, #2]
            eink_data[2] = (uint16_t) show_w;
    2fa4:	80a2      	strh	r2, [r4, #4]
            eink_data[3] = (uint16_t) show_h;
    2fa6:	80e3      	strh	r3, [r4, #6]
            break;
    2fa8:	e7be      	b.n	2f28 <eink_it8951_refresh_partial_display+0x20>
    2faa:	46c0      	nop			; (mov r8, r8)
    2fac:	200003c0 	.word	0x200003c0
    2fb0:	00002ef9 	.word	0x00002ef9

00002fb4 <eink_it8951_refresh_display_mode>:
{
    2fb4:	b510      	push	{r4, lr}
    2fb6:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    2fb8:	a901      	add	r1, sp, #4
    2fba:	2300      	movs	r3, #0
    2fbc:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    2fbe:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    2fc0:	4b0e      	ldr	r3, [pc, #56]	; (2ffc <eink_it8951_refresh_display_mode+0x48>)
    2fc2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    2fc4:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    2fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2fc8:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    2fca:	8108      	strh	r0, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    2fcc:	2201      	movs	r2, #1
    2fce:	2034      	movs	r0, #52	; 0x34
    2fd0:	4c0b      	ldr	r4, [pc, #44]	; (3000 <eink_it8951_refresh_display_mode+0x4c>)
    2fd2:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    2fd4:	2201      	movs	r2, #1
    2fd6:	466b      	mov	r3, sp
    2fd8:	1d99      	adds	r1, r3, #6
    2fda:	2000      	movs	r0, #0
    2fdc:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    2fde:	2201      	movs	r2, #1
    2fe0:	a902      	add	r1, sp, #8
    2fe2:	2000      	movs	r0, #0
    2fe4:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    2fe6:	2201      	movs	r2, #1
    2fe8:	210a      	movs	r1, #10
    2fea:	4469      	add	r1, sp
    2fec:	2000      	movs	r0, #0
    2fee:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    2ff0:	2201      	movs	r2, #1
    2ff2:	a903      	add	r1, sp, #12
    2ff4:	2000      	movs	r0, #0
    2ff6:	47a0      	blx	r4
 }
    2ff8:	b004      	add	sp, #16
    2ffa:	bd10      	pop	{r4, pc}
    2ffc:	200003c0 	.word	0x200003c0
    3000:	00002ef9 	.word	0x00002ef9

00003004 <eink_it8951_put_partial_display_buffer>:
 * \param start_y starting Y coordinate start of the display buffer to send
 * \param window_w width of the display buffer to send
 * \param window_h height of the display buffer to send
 */
void eink_it8951_put_partial_display_buffer(eink_coordinate start_x, eink_coordinate start_y, eink_coordinate window_w, eink_coordinate window_h)
{
    3004:	b5f0      	push	{r4, r5, r6, r7, lr}
    3006:	46de      	mov	lr, fp
    3008:	4657      	mov	r7, sl
    300a:	464e      	mov	r6, r9
    300c:	4645      	mov	r5, r8
    300e:	b5e0      	push	{r5, r6, r7, lr}
    3010:	b087      	sub	sp, #28
    3012:	0004      	movs	r4, r0
    3014:	000d      	movs	r5, r1
    3016:	9201      	str	r2, [sp, #4]
    3018:	001f      	movs	r7, r3
    uint16_t eink_data[5], rotation = 0;
    uint16_t* display_buffer;
    uint32_t i, j, k;

    /* Get pointer to Display Buffer */
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    301a:	4b45      	ldr	r3, [pc, #276]	; (3130 <eink_it8951_put_partial_display_buffer+0x12c>)
    301c:	681b      	ldr	r3, [r3, #0]
    301e:	4698      	mov	r8, r3
        
    /* Set Image Buffer Base address (IT8951) */
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    3020:	4e44      	ldr	r6, [pc, #272]	; (3134 <eink_it8951_put_partial_display_buffer+0x130>)
    3022:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    3024:	6b72      	ldr	r2, [r6, #52]	; 0x34
    3026:	4692      	mov	sl, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    3028:	4a43      	ldr	r2, [pc, #268]	; (3138 <eink_it8951_put_partial_display_buffer+0x134>)
    302a:	a902      	add	r1, sp, #8
    302c:	800a      	strh	r2, [r1, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    302e:	0c1b      	lsrs	r3, r3, #16
    3030:	804b      	strh	r3, [r1, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    3032:	2202      	movs	r2, #2
    3034:	2011      	movs	r0, #17
    3036:	4b41      	ldr	r3, [pc, #260]	; (313c <eink_it8951_put_partial_display_buffer+0x138>)
    3038:	469b      	mov	fp, r3
    303a:	4798      	blx	r3
    uint16_t data_send[2] = {reg_addr, reg_value};
    303c:	2382      	movs	r3, #130	; 0x82
    303e:	009b      	lsls	r3, r3, #2
    3040:	aa02      	add	r2, sp, #8
    3042:	8013      	strh	r3, [r2, #0]
    3044:	0013      	movs	r3, r2
    3046:	4652      	mov	r2, sl
    3048:	805a      	strh	r2, [r3, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    304a:	2202      	movs	r2, #2
    304c:	0019      	movs	r1, r3
    304e:	2011      	movs	r0, #17
    3050:	47d8      	blx	fp
    it8951_write_reg(LISAR + 2, usWordH);
    it8951_write_reg(LISAR, usWordL);
    
    /* Set arguments for Load Image Start */
    switch(it8951_global_instance.display_rotation)
    3052:	2330      	movs	r3, #48	; 0x30
    3054:	5cf3      	ldrb	r3, [r6, r3]
    3056:	b2db      	uxtb	r3, r3
    3058:	2b02      	cmp	r3, #2
    305a:	d022      	beq.n	30a2 <eink_it8951_put_partial_display_buffer+0x9e>
    305c:	2b03      	cmp	r3, #3
    305e:	d022      	beq.n	30a6 <eink_it8951_put_partial_display_buffer+0xa2>
    uint16_t eink_data[5], rotation = 0;
    3060:	3b01      	subs	r3, #1
    3062:	425a      	negs	r2, r3
    3064:	4153      	adcs	r3, r2
        case ROTATE_0: rotation = 0; break;
        case ROTATE_90: rotation = 1; break;
        case ROTATE_180: rotation = 2; break;
        case ROTATE_270: rotation = 3; break;
    }
    eink_data[0] = (0 << 8) | (2 << 4) | (rotation);
    3066:	a903      	add	r1, sp, #12
    3068:	2220      	movs	r2, #32
    306a:	4313      	orrs	r3, r2
    306c:	800b      	strh	r3, [r1, #0]
    eink_data[1] = start_y;
    306e:	804d      	strh	r5, [r1, #2]
    eink_data[2] = start_x;
    3070:	808c      	strh	r4, [r1, #4]
    eink_data[3] = window_h;
    3072:	80cf      	strh	r7, [r1, #6]
    eink_data[4] = window_w;
    3074:	466b      	mov	r3, sp
    3076:	889b      	ldrh	r3, [r3, #4]
    3078:	810b      	strh	r3, [r1, #8]
    eink_ite_write_data(IT8951_I80_LD_IMG_AREA, eink_data, 5);
    307a:	2205      	movs	r2, #5
    307c:	2021      	movs	r0, #33	; 0x21
    307e:	4b2f      	ldr	r3, [pc, #188]	; (313c <eink_it8951_put_partial_display_buffer+0x138>)
    3080:	4798      	blx	r3
    
    /* Move to start of the window within the display buffer */
    if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    3082:	2330      	movs	r3, #48	; 0x30
    3084:	4a2b      	ldr	r2, [pc, #172]	; (3134 <eink_it8951_put_partial_display_buffer+0x130>)
    3086:	5cd3      	ldrb	r3, [r2, r3]
    3088:	2b00      	cmp	r3, #0
    308a:	d00e      	beq.n	30aa <eink_it8951_put_partial_display_buffer+0xa6>
    308c:	2330      	movs	r3, #48	; 0x30
    308e:	5cd3      	ldrb	r3, [r2, r3]
    3090:	2b02      	cmp	r3, #2
    3092:	d00a      	beq.n	30aa <eink_it8951_put_partial_display_buffer+0xa6>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    else
        display_buffer += (it8951_global_instance.display_width / 4) * (start_x);
    3094:	4b27      	ldr	r3, [pc, #156]	; (3134 <eink_it8951_put_partial_display_buffer+0x130>)
    3096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3098:	089b      	lsrs	r3, r3, #2
    309a:	435c      	muls	r4, r3
    309c:	0064      	lsls	r4, r4, #1
    309e:	4444      	add	r4, r8
    30a0:	e009      	b.n	30b6 <eink_it8951_put_partial_display_buffer+0xb2>
        case ROTATE_180: rotation = 2; break;
    30a2:	2302      	movs	r3, #2
    30a4:	e7df      	b.n	3066 <eink_it8951_put_partial_display_buffer+0x62>
        case ROTATE_270: rotation = 3; break;
    30a6:	2303      	movs	r3, #3
    30a8:	e7dd      	b.n	3066 <eink_it8951_put_partial_display_buffer+0x62>
        display_buffer += (it8951_global_instance.display_height / 4) * (start_x);
    30aa:	4b22      	ldr	r3, [pc, #136]	; (3134 <eink_it8951_put_partial_display_buffer+0x130>)
    30ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    30ae:	089b      	lsrs	r3, r3, #2
    30b0:	435c      	muls	r4, r3
    30b2:	0064      	lsls	r4, r4, #1
    30b4:	4444      	add	r4, r8
    display_buffer += (start_y / 4);
    30b6:	08ad      	lsrs	r5, r5, #2
    30b8:	006d      	lsls	r5, r5, #1
    30ba:	1964      	adds	r4, r4, r5
    
    /* Loop through window sending the display buffer */
    for(j = 0; j < window_w; j++)
    30bc:	9e01      	ldr	r6, [sp, #4]
    30be:	2e00      	cmp	r6, #0
    30c0:	d02a      	beq.n	3118 <eink_it8951_put_partial_display_buffer+0x114>
    {
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    30c2:	08bb      	lsrs	r3, r7, #2
    30c4:	9301      	str	r3, [sp, #4]
        display_buffer += (window_h / 4);
    30c6:	005a      	lsls	r2, r3, #1
    30c8:	4691      	mov	r9, r2
        
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
        else
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    30ca:	469a      	mov	sl, r3
    30cc:	2500      	movs	r5, #0
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    30ce:	4b1b      	ldr	r3, [pc, #108]	; (313c <eink_it8951_put_partial_display_buffer+0x138>)
    30d0:	4698      	mov	r8, r3
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    30d2:	4f18      	ldr	r7, [pc, #96]	; (3134 <eink_it8951_put_partial_display_buffer+0x130>)
            display_buffer += (it8951_global_instance.display_height / 4) - (window_h / 4);
    30d4:	46bb      	mov	fp, r7
    30d6:	e009      	b.n	30ec <eink_it8951_put_partial_display_buffer+0xe8>
    30d8:	465b      	mov	r3, fp
    30da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    30dc:	089b      	lsrs	r3, r3, #2
    30de:	4652      	mov	r2, sl
    30e0:	1a9b      	subs	r3, r3, r2
    30e2:	005b      	lsls	r3, r3, #1
    30e4:	18e4      	adds	r4, r4, r3
    for(j = 0; j < window_w; j++)
    30e6:	3501      	adds	r5, #1
    30e8:	42b5      	cmp	r5, r6
    30ea:	d215      	bcs.n	3118 <eink_it8951_put_partial_display_buffer+0x114>
        eink_ite_write_data(0, display_buffer, (window_h / 4));
    30ec:	9a01      	ldr	r2, [sp, #4]
    30ee:	0021      	movs	r1, r4
    30f0:	2000      	movs	r0, #0
    30f2:	47c0      	blx	r8
        display_buffer += (window_h / 4);
    30f4:	444c      	add	r4, r9
        if((it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180))
    30f6:	2330      	movs	r3, #48	; 0x30
    30f8:	5cfb      	ldrb	r3, [r7, r3]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d0ec      	beq.n	30d8 <eink_it8951_put_partial_display_buffer+0xd4>
    30fe:	2330      	movs	r3, #48	; 0x30
    3100:	4a0c      	ldr	r2, [pc, #48]	; (3134 <eink_it8951_put_partial_display_buffer+0x130>)
    3102:	5cd3      	ldrb	r3, [r2, r3]
    3104:	2b02      	cmp	r3, #2
    3106:	d0e7      	beq.n	30d8 <eink_it8951_put_partial_display_buffer+0xd4>
            display_buffer += (it8951_global_instance.display_width / 4) - (window_h / 4);
    3108:	4b0a      	ldr	r3, [pc, #40]	; (3134 <eink_it8951_put_partial_display_buffer+0x130>)
    310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    310c:	089b      	lsrs	r3, r3, #2
    310e:	4652      	mov	r2, sl
    3110:	1a9b      	subs	r3, r3, r2
    3112:	005b      	lsls	r3, r3, #1
    3114:	18e4      	adds	r4, r4, r3
    3116:	e7e6      	b.n	30e6 <eink_it8951_put_partial_display_buffer+0xe2>
    }
    
    /* Send Load Img End Command */
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    3118:	2200      	movs	r2, #0
    311a:	2100      	movs	r1, #0
    311c:	2022      	movs	r0, #34	; 0x22
    311e:	4b07      	ldr	r3, [pc, #28]	; (313c <eink_it8951_put_partial_display_buffer+0x138>)
    3120:	4798      	blx	r3
}
    3122:	b007      	add	sp, #28
    3124:	bc3c      	pop	{r2, r3, r4, r5}
    3126:	4690      	mov	r8, r2
    3128:	4699      	mov	r9, r3
    312a:	46a2      	mov	sl, r4
    312c:	46ab      	mov	fp, r5
    312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3130:	200003a4 	.word	0x200003a4
    3134:	200003c0 	.word	0x200003c0
    3138:	0000020a 	.word	0x0000020a
    313c:	00002ef9 	.word	0x00002ef9

00003140 <eink_it8951_refresh_display>:
{
    3140:	b510      	push	{r4, lr}
    3142:	b084      	sub	sp, #16
     eink_data[0] = (uint16_t) 0;
    3144:	a901      	add	r1, sp, #4
    3146:	2300      	movs	r3, #0
    3148:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    314a:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    314c:	4b0f      	ldr	r3, [pc, #60]	; (318c <eink_it8951_refresh_display+0x4c>)
    314e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    3150:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    3152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3154:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    3156:	2302      	movs	r3, #2
    3158:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    315a:	2201      	movs	r2, #1
    315c:	2034      	movs	r0, #52	; 0x34
    315e:	4c0c      	ldr	r4, [pc, #48]	; (3190 <eink_it8951_refresh_display+0x50>)
    3160:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    3162:	2201      	movs	r2, #1
    3164:	466b      	mov	r3, sp
    3166:	1d99      	adds	r1, r3, #6
    3168:	2000      	movs	r0, #0
    316a:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    316c:	2201      	movs	r2, #1
    316e:	a902      	add	r1, sp, #8
    3170:	2000      	movs	r0, #0
    3172:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    3174:	2201      	movs	r2, #1
    3176:	210a      	movs	r1, #10
    3178:	4469      	add	r1, sp
    317a:	2000      	movs	r0, #0
    317c:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    317e:	2201      	movs	r2, #1
    3180:	a903      	add	r1, sp, #12
    3182:	2000      	movs	r0, #0
    3184:	47a0      	blx	r4
}
    3186:	b004      	add	sp, #16
    3188:	bd10      	pop	{r4, pc}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	200003c0 	.word	0x200003c0
    3190:	00002ef9 	.word	0x00002ef9

00003194 <eink_ite_write_data_fast>:
 */
void eink_ite_write_data_fast(
        uint16_t command,
        uint16_t *data,
        uint32_t data_bytes)
{
    3194:	b510      	push	{r4, lr}
    _eink_ite_write_data(command, data, data_bytes, 1);
    3196:	2301      	movs	r3, #1
    3198:	4c01      	ldr	r4, [pc, #4]	; (31a0 <eink_ite_write_data_fast+0xc>)
    319a:	47a0      	blx	r4
}
    319c:	bd10      	pop	{r4, pc}
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	00002ea5 	.word	0x00002ea5

000031a4 <eink_it8951_put_display_buffer>:
{
    31a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31a6:	46c6      	mov	lr, r8
    31a8:	b500      	push	{lr}
    31aa:	b084      	sub	sp, #16
    31ac:	0005      	movs	r5, r0
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    31ae:	4e31      	ldr	r6, [pc, #196]	; (3274 <eink_it8951_put_display_buffer+0xd0>)
    31b0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    uint16_t usWordL = (unsigned short)( it8951_global_instance.img_buffer_addr & 0x0000FFFF);
    31b2:	6b72      	ldr	r2, [r6, #52]	; 0x34
    31b4:	4690      	mov	r8, r2
    uint16_t data_send[2] = {reg_addr, reg_value};
    31b6:	ac01      	add	r4, sp, #4
    31b8:	4a2f      	ldr	r2, [pc, #188]	; (3278 <eink_it8951_put_display_buffer+0xd4>)
    31ba:	8022      	strh	r2, [r4, #0]
    uint16_t usWordH = (unsigned short)((it8951_global_instance.img_buffer_addr >> 16) & 0x0000FFFF);
    31bc:	0c1b      	lsrs	r3, r3, #16
    31be:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    31c0:	2202      	movs	r2, #2
    31c2:	0021      	movs	r1, r4
    31c4:	2011      	movs	r0, #17
    31c6:	4f2d      	ldr	r7, [pc, #180]	; (327c <eink_it8951_put_display_buffer+0xd8>)
    31c8:	47b8      	blx	r7
    uint16_t data_send[2] = {reg_addr, reg_value};
    31ca:	2382      	movs	r3, #130	; 0x82
    31cc:	009b      	lsls	r3, r3, #2
    31ce:	8023      	strh	r3, [r4, #0]
    31d0:	4643      	mov	r3, r8
    31d2:	8063      	strh	r3, [r4, #2]
    eink_ite_write_data(IT8951_I80_REG_WR, data_send, 2);
    31d4:	2202      	movs	r2, #2
    31d6:	0021      	movs	r1, r4
    31d8:	2011      	movs	r0, #17
    31da:	47b8      	blx	r7
    switch(it8951_global_instance.display_rotation)
    31dc:	2330      	movs	r3, #48	; 0x30
    31de:	5cf3      	ldrb	r3, [r6, r3]
    31e0:	b2db      	uxtb	r3, r3
    31e2:	2b02      	cmp	r3, #2
    31e4:	d01f      	beq.n	3226 <eink_it8951_put_display_buffer+0x82>
    31e6:	2b03      	cmp	r3, #3
    31e8:	d01f      	beq.n	322a <eink_it8951_put_display_buffer+0x86>
    uint16_t eink_data, rotation = 0;
    31ea:	3b01      	subs	r3, #1
    31ec:	425a      	negs	r2, r3
    31ee:	4153      	adcs	r3, r2
    eink_data = (0 << 8) | (2 << 4) | (rotation);
    31f0:	210e      	movs	r1, #14
    31f2:	4469      	add	r1, sp
    31f4:	2220      	movs	r2, #32
    31f6:	4313      	orrs	r3, r2
    31f8:	800b      	strh	r3, [r1, #0]
    eink_ite_write_data(IT8951_I80_LD_IMG, &eink_data, 1);
    31fa:	2201      	movs	r2, #1
    31fc:	2020      	movs	r0, #32
    31fe:	4c1f      	ldr	r4, [pc, #124]	; (327c <eink_it8951_put_display_buffer+0xd8>)
    3200:	47a0      	blx	r4
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    3202:	4b1c      	ldr	r3, [pc, #112]	; (3274 <eink_it8951_put_display_buffer+0xd0>)
    3204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3206:	0852      	lsrs	r2, r2, #1
    display_buffer = (uint16_t*) it8951_dtm_display_buffer;
    3208:	4b1d      	ldr	r3, [pc, #116]	; (3280 <eink_it8951_put_display_buffer+0xdc>)
    eink_ite_write_data_fast(0, display_buffer, (it8951_global_instance.display_buffer_length/2));
    320a:	6819      	ldr	r1, [r3, #0]
    320c:	2000      	movs	r0, #0
    320e:	4b1d      	ldr	r3, [pc, #116]	; (3284 <eink_it8951_put_display_buffer+0xe0>)
    3210:	4798      	blx	r3
    eink_ite_write_data(IT8951_I80_LD_IMG_END, 0, 0);
    3212:	2200      	movs	r2, #0
    3214:	2100      	movs	r1, #0
    3216:	2022      	movs	r0, #34	; 0x22
    3218:	47a0      	blx	r4
    if(refresh_display) eink_it8951_refresh_display();
    321a:	2d00      	cmp	r5, #0
    321c:	d107      	bne.n	322e <eink_it8951_put_display_buffer+0x8a>
}
    321e:	b004      	add	sp, #16
    3220:	bc04      	pop	{r2}
    3222:	4690      	mov	r8, r2
    3224:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case ROTATE_180: rotation = 2; break;
    3226:	2302      	movs	r3, #2
    3228:	e7e2      	b.n	31f0 <eink_it8951_put_display_buffer+0x4c>
        case ROTATE_270: rotation = 3; break;
    322a:	2303      	movs	r3, #3
    322c:	e7e0      	b.n	31f0 <eink_it8951_put_display_buffer+0x4c>
     eink_data[0] = (uint16_t) 0;
    322e:	a901      	add	r1, sp, #4
    3230:	2300      	movs	r3, #0
    3232:	800b      	strh	r3, [r1, #0]
     eink_data[1] = (uint16_t) 0;
    3234:	804b      	strh	r3, [r1, #2]
     eink_data[2] = (uint16_t) it8951_global_instance.display_height;
    3236:	4b0f      	ldr	r3, [pc, #60]	; (3274 <eink_it8951_put_display_buffer+0xd0>)
    3238:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    323a:	808a      	strh	r2, [r1, #4]
     eink_data[3] = (uint16_t) it8951_global_instance.display_width;
    323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    323e:	80cb      	strh	r3, [r1, #6]
     eink_data[4] = (uint16_t) update_mode;
    3240:	2302      	movs	r3, #2
    3242:	810b      	strh	r3, [r1, #8]
     eink_ite_write_data(IT8951_I80_USR_DPY_AREA, &eink_data[0], 1);
    3244:	2201      	movs	r2, #1
    3246:	2034      	movs	r0, #52	; 0x34
    3248:	4c0c      	ldr	r4, [pc, #48]	; (327c <eink_it8951_put_display_buffer+0xd8>)
    324a:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[1], 1);
    324c:	2201      	movs	r2, #1
    324e:	466b      	mov	r3, sp
    3250:	1d99      	adds	r1, r3, #6
    3252:	2000      	movs	r0, #0
    3254:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[2], 1);
    3256:	2201      	movs	r2, #1
    3258:	a902      	add	r1, sp, #8
    325a:	2000      	movs	r0, #0
    325c:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[3], 1);
    325e:	2201      	movs	r2, #1
    3260:	210a      	movs	r1, #10
    3262:	4469      	add	r1, sp
    3264:	2000      	movs	r0, #0
    3266:	47a0      	blx	r4
     eink_ite_write_data(0, &eink_data[4], 1);
    3268:	2201      	movs	r2, #1
    326a:	a903      	add	r1, sp, #12
    326c:	2000      	movs	r0, #0
    326e:	47a0      	blx	r4
}
    3270:	e7d5      	b.n	321e <eink_it8951_put_display_buffer+0x7a>
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	200003c0 	.word	0x200003c0
    3278:	0000020a 	.word	0x0000020a
    327c:	00002ef9 	.word	0x00002ef9
    3280:	200003a4 	.word	0x200003a4
    3284:	00003195 	.word	0x00003195

00003288 <eink_ite_set_bit>:
 * \param bit_value Bit value.
 */
void eink_ite_set_bit(uint8_t *byte, uint8_t bit_number, bool bit_value)
{
    /* Update the byte to either set or clear the selected bit */   
    if (bit_value == 1) {
    3288:	2a00      	cmp	r2, #0
    328a:	d105      	bne.n	3298 <eink_ite_set_bit+0x10>
        *byte |= 1 << bit_number;
    } else {
        *byte &= ~(1 << bit_number);
    328c:	2201      	movs	r2, #1
    328e:	408a      	lsls	r2, r1
    3290:	7803      	ldrb	r3, [r0, #0]
    3292:	4393      	bics	r3, r2
    3294:	7003      	strb	r3, [r0, #0]
    }
    3296:	4770      	bx	lr
        *byte |= 1 << bit_number;
    3298:	2201      	movs	r2, #1
    329a:	408a      	lsls	r2, r1
    329c:	7803      	ldrb	r3, [r0, #0]
    329e:	4313      	orrs	r3, r2
    32a0:	7003      	strb	r3, [r0, #0]
    32a2:	e7f8      	b.n	3296 <eink_ite_set_bit+0xe>

000032a4 <eink_it8951_set_pixel_raw>:
 * \param x_set X coordinate of the pixel to set.
 * \param y_set Y coordinate of the pixel to set.
 * \param pixel_value Greyscale value to set the pixel to.
 */
void eink_it8951_set_pixel_raw(eink_coordinate x_set, eink_coordinate y_set, uint8_t pixel_value)
{
    32a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32a6:	46c6      	mov	lr, r8
    32a8:	b500      	push	{lr}
    32aa:	0015      	movs	r5, r2
    eink_coordinate x1_set, y1_set, odd_even_bit;
    uint32_t byte_set;
    
    /* Ignore any pixels being set outside of the display window */
    if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    32ac:	4b34      	ldr	r3, [pc, #208]	; (3380 <eink_it8951_set_pixel_raw+0xdc>)
    32ae:	681f      	ldr	r7, [r3, #0]
    32b0:	887b      	ldrh	r3, [r7, #2]
    32b2:	4283      	cmp	r3, r0
    32b4:	d93f      	bls.n	3336 <eink_it8951_set_pixel_raw+0x92>
    32b6:	88bb      	ldrh	r3, [r7, #4]
    32b8:	428b      	cmp	r3, r1
    32ba:	d93c      	bls.n	3336 <eink_it8951_set_pixel_raw+0x92>
        
        if ( (it8951_global_instance.display_rotation == ROTATE_0) || (it8951_global_instance.display_rotation == ROTATE_180) ) {
    32bc:	2330      	movs	r3, #48	; 0x30
    32be:	4a31      	ldr	r2, [pc, #196]	; (3384 <eink_it8951_set_pixel_raw+0xe0>)
    32c0:	5cd3      	ldrb	r3, [r2, r3]
    32c2:	2b00      	cmp	r3, #0
    32c4:	d00c      	beq.n	32e0 <eink_it8951_set_pixel_raw+0x3c>
    32c6:	2330      	movs	r3, #48	; 0x30
    32c8:	5cd3      	ldrb	r3, [r2, r3]
    32ca:	2b02      	cmp	r3, #2
    32cc:	d008      	beq.n	32e0 <eink_it8951_set_pixel_raw+0x3c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
            odd_even_bit = y_set % 2;
        } else {
            /* Calculate which byte the pixel in question is contained in */
            y1_set = (y_set - (y_set % 2)) / 2;
            byte_set = y1_set + ((it8951_global_instance.display_config.display_height / 2) * x_set);
    32ce:	4b2d      	ldr	r3, [pc, #180]	; (3384 <eink_it8951_set_pixel_raw+0xe0>)
    32d0:	885c      	ldrh	r4, [r3, #2]
    32d2:	0864      	lsrs	r4, r4, #1
    32d4:	4360      	muls	r0, r4
    32d6:	104c      	asrs	r4, r1, #1
    32d8:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    32da:	2301      	movs	r3, #1
    32dc:	4019      	ands	r1, r3
    32de:	e007      	b.n	32f0 <eink_it8951_set_pixel_raw+0x4c>
            byte_set = y1_set + ((it8951_global_instance.display_config.display_width / 2) * x_set);
    32e0:	4b28      	ldr	r3, [pc, #160]	; (3384 <eink_it8951_set_pixel_raw+0xe0>)
    32e2:	881c      	ldrh	r4, [r3, #0]
    32e4:	0864      	lsrs	r4, r4, #1
    32e6:	4360      	muls	r0, r4
    32e8:	104c      	asrs	r4, r1, #1
    32ea:	1904      	adds	r4, r0, r4
            odd_even_bit = y_set % 2;
    32ec:	2301      	movs	r3, #1
    32ee:	4019      	ands	r1, r3
        }
        
        if (!odd_even_bit) {
    32f0:	2900      	cmp	r1, #0
    32f2:	d023      	beq.n	333c <eink_it8951_set_pixel_raw+0x98>
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
        } else {
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 7, ((pixel_value >> 3) & 0x1));
    32f4:	08ea      	lsrs	r2, r5, #3
    32f6:	2601      	movs	r6, #1
    32f8:	4032      	ands	r2, r6
    32fa:	6938      	ldr	r0, [r7, #16]
    32fc:	1900      	adds	r0, r0, r4
    32fe:	2107      	movs	r1, #7
    3300:	4f21      	ldr	r7, [pc, #132]	; (3388 <eink_it8951_set_pixel_raw+0xe4>)
    3302:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 6, ((pixel_value >> 2) & 0x1));
    3304:	08aa      	lsrs	r2, r5, #2
    3306:	4032      	ands	r2, r6
    3308:	4b1d      	ldr	r3, [pc, #116]	; (3380 <eink_it8951_set_pixel_raw+0xdc>)
    330a:	4698      	mov	r8, r3
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	6918      	ldr	r0, [r3, #16]
    3310:	1900      	adds	r0, r0, r4
    3312:	2106      	movs	r1, #6
    3314:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 5, ((pixel_value >> 1) & 0x1));
    3316:	086a      	lsrs	r2, r5, #1
    3318:	4032      	ands	r2, r6
    331a:	4643      	mov	r3, r8
    331c:	681b      	ldr	r3, [r3, #0]
    331e:	6918      	ldr	r0, [r3, #16]
    3320:	1900      	adds	r0, r0, r4
    3322:	2105      	movs	r1, #5
    3324:	47b8      	blx	r7
           eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 4, (pixel_value & 0x1));
    3326:	0032      	movs	r2, r6
    3328:	402a      	ands	r2, r5
    332a:	4643      	mov	r3, r8
    332c:	681b      	ldr	r3, [r3, #0]
    332e:	6918      	ldr	r0, [r3, #16]
    3330:	1900      	adds	r0, r0, r4
    3332:	2104      	movs	r1, #4
    3334:	47b8      	blx	r7
        }
    }
}
    3336:	bc04      	pop	{r2}
    3338:	4690      	mov	r8, r2
    333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 3, ((pixel_value >> 3) & 0x1));
    333c:	08ea      	lsrs	r2, r5, #3
    333e:	2601      	movs	r6, #1
    3340:	4032      	ands	r2, r6
    3342:	6938      	ldr	r0, [r7, #16]
    3344:	1900      	adds	r0, r0, r4
    3346:	3103      	adds	r1, #3
    3348:	4f0f      	ldr	r7, [pc, #60]	; (3388 <eink_it8951_set_pixel_raw+0xe4>)
    334a:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 2, ((pixel_value >> 2) & 0x1));
    334c:	08aa      	lsrs	r2, r5, #2
    334e:	4032      	ands	r2, r6
    3350:	4b0b      	ldr	r3, [pc, #44]	; (3380 <eink_it8951_set_pixel_raw+0xdc>)
    3352:	4698      	mov	r8, r3
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	6918      	ldr	r0, [r3, #16]
    3358:	1900      	adds	r0, r0, r4
    335a:	2102      	movs	r1, #2
    335c:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 1, ((pixel_value >> 1) & 0x1));
    335e:	086a      	lsrs	r2, r5, #1
    3360:	4032      	ands	r2, r6
    3362:	4643      	mov	r3, r8
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	6918      	ldr	r0, [r3, #16]
    3368:	1900      	adds	r0, r0, r4
    336a:	2101      	movs	r1, #1
    336c:	47b8      	blx	r7
            eink_ite_set_bit(&ptr_eink_gfx_config->display_buffer_1_ptr[byte_set], 0, (pixel_value & 0x1));
    336e:	0032      	movs	r2, r6
    3370:	402a      	ands	r2, r5
    3372:	4643      	mov	r3, r8
    3374:	681b      	ldr	r3, [r3, #0]
    3376:	6918      	ldr	r0, [r3, #16]
    3378:	1900      	adds	r0, r0, r4
    337a:	2100      	movs	r1, #0
    337c:	47b8      	blx	r7
    337e:	e7da      	b.n	3336 <eink_it8951_set_pixel_raw+0x92>
    3380:	20000430 	.word	0x20000430
    3384:	200003c0 	.word	0x200003c0
    3388:	00003289 	.word	0x00003289

0000338c <eink_it8951_graphics_load_4bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_it8951_graphics_load_4bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    338c:	b5f0      	push	{r4, r5, r6, r7, lr}
    338e:	46de      	mov	lr, fp
    3390:	4657      	mov	r7, sl
    3392:	464e      	mov	r6, r9
    3394:	4645      	mov	r5, r8
    3396:	b5e0      	push	{r5, r6, r7, lr}
    3398:	b087      	sub	sp, #28
    339a:	9000      	str	r0, [sp, #0]
    339c:	0011      	movs	r1, r2
    339e:	9201      	str	r2, [sp, #4]
    33a0:	4699      	mov	r9, r3
    33a2:	ab10      	add	r3, sp, #64	; 0x40
    33a4:	881b      	ldrh	r3, [r3, #0]
    33a6:	469a      	mov	sl, r3
    33a8:	ab11      	add	r3, sp, #68	; 0x44
    33aa:	881b      	ldrh	r3, [r3, #0]
    33ac:	469b      	mov	fp, r3
    volatile uint16_t buffer_index, i, j;
    volatile uint16_t k, l, m, bit_value_1, bit_value_2;
    eink_coordinate x_set, y_set;
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    33ae:	230e      	movs	r3, #14
    33b0:	aa02      	add	r2, sp, #8
    33b2:	4694      	mov	ip, r2
    33b4:	4463      	add	r3, ip
    33b6:	2200      	movs	r2, #0
    33b8:	801a      	strh	r2, [r3, #0]
    33ba:	881b      	ldrh	r3, [r3, #0]
    33bc:	b29b      	uxth	r3, r3
    33be:	4299      	cmp	r1, r3
    33c0:	d966      	bls.n	3490 <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    33c2:	260a      	movs	r6, #10
    33c4:	4466      	add	r6, ip
        for (j = 0; j < image_height_bytes; j++) {
            x_set = x_place+i;
            y_set = y_place+m;
            
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    33c6:	4f36      	ldr	r7, [pc, #216]	; (34a0 <eink_it8951_graphics_load_4bgrey_image+0x114>)
    33c8:	464d      	mov	r5, r9
    33ca:	46d1      	mov	r9, sl
    33cc:	e054      	b.n	3478 <eink_it8951_graphics_load_4bgrey_image+0xec>
                /* Set the pixel in the display buffer */
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
            }

        m += 2;
    33ce:	8833      	ldrh	r3, [r6, #0]
    33d0:	3302      	adds	r3, #2
    33d2:	b29b      	uxth	r3, r3
    33d4:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    33d6:	8823      	ldrh	r3, [r4, #0]
    33d8:	3301      	adds	r3, #1
    33da:	b29b      	uxth	r3, r3
    33dc:	8023      	strh	r3, [r4, #0]
    33de:	8823      	ldrh	r3, [r4, #0]
    33e0:	b29b      	uxth	r3, r3
    33e2:	42ab      	cmp	r3, r5
    33e4:	d23a      	bcs.n	345c <eink_it8951_graphics_load_4bgrey_image+0xd0>
            x_set = x_place+i;
    33e6:	230e      	movs	r3, #14
    33e8:	aa02      	add	r2, sp, #8
    33ea:	4694      	mov	ip, r2
    33ec:	4463      	add	r3, ip
    33ee:	881b      	ldrh	r3, [r3, #0]
    33f0:	444b      	add	r3, r9
    33f2:	b29b      	uxth	r3, r3
    33f4:	4698      	mov	r8, r3
            y_set = y_place+m;
    33f6:	8833      	ldrh	r3, [r6, #0]
    33f8:	b29b      	uxth	r3, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    33fa:	683a      	ldr	r2, [r7, #0]
    33fc:	8851      	ldrh	r1, [r2, #2]
    33fe:	4541      	cmp	r1, r8
    3400:	d9e5      	bls.n	33ce <eink_it8951_graphics_load_4bgrey_image+0x42>
            y_set = y_place+m;
    3402:	4453      	add	r3, sl
    3404:	b29b      	uxth	r3, r3
    3406:	469b      	mov	fp, r3
            if ( (x_set >= 0) && (x_set < ptr_eink_gfx_config->display_width) && (y_set >= 0) && (y_set < ptr_eink_gfx_config->display_height) ) {
    3408:	8893      	ldrh	r3, [r2, #4]
    340a:	455b      	cmp	r3, fp
    340c:	d9df      	bls.n	33ce <eink_it8951_graphics_load_4bgrey_image+0x42>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    340e:	210e      	movs	r1, #14
    3410:	4461      	add	r1, ip
    3412:	880b      	ldrh	r3, [r1, #0]
    3414:	8822      	ldrh	r2, [r4, #0]
    3416:	436b      	muls	r3, r5
    3418:	9800      	ldr	r0, [sp, #0]
    341a:	4684      	mov	ip, r0
    341c:	4462      	add	r2, ip
    341e:	5cd2      	ldrb	r2, [r2, r3]
    3420:	230f      	movs	r3, #15
    3422:	4013      	ands	r3, r2
    3424:	aa04      	add	r2, sp, #16
    3426:	8013      	strh	r3, [r2, #0]
                bit_value_2 = ((img_array[(i*image_height_bytes)+j] >> 4) & 0xF);
    3428:	880b      	ldrh	r3, [r1, #0]
    342a:	8821      	ldrh	r1, [r4, #0]
    342c:	436b      	muls	r3, r5
    342e:	4461      	add	r1, ip
    3430:	5ccb      	ldrb	r3, [r1, r3]
    3432:	091b      	lsrs	r3, r3, #4
    3434:	a902      	add	r1, sp, #8
    3436:	80cb      	strh	r3, [r1, #6]
                eink_it8951_set_pixel_raw(x_set, (y_set+1), (~bit_value_1));
    3438:	8812      	ldrh	r2, [r2, #0]
    343a:	43d2      	mvns	r2, r2
    343c:	b2d2      	uxtb	r2, r2
    343e:	465b      	mov	r3, fp
    3440:	1c59      	adds	r1, r3, #1
    3442:	b289      	uxth	r1, r1
    3444:	4640      	mov	r0, r8
    3446:	4b17      	ldr	r3, [pc, #92]	; (34a4 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    3448:	4798      	blx	r3
                eink_it8951_set_pixel_raw(x_set, (y_set), (~bit_value_2));
    344a:	ab02      	add	r3, sp, #8
    344c:	88da      	ldrh	r2, [r3, #6]
    344e:	43d2      	mvns	r2, r2
    3450:	b2d2      	uxtb	r2, r2
    3452:	4659      	mov	r1, fp
    3454:	4640      	mov	r0, r8
    3456:	4b13      	ldr	r3, [pc, #76]	; (34a4 <eink_it8951_graphics_load_4bgrey_image+0x118>)
    3458:	4798      	blx	r3
    345a:	e7b8      	b.n	33ce <eink_it8951_graphics_load_4bgrey_image+0x42>
    345c:	46d3      	mov	fp, sl
    for (i = 0; i < image_width_px; i++) {
    345e:	220e      	movs	r2, #14
    3460:	ab02      	add	r3, sp, #8
    3462:	469c      	mov	ip, r3
    3464:	4462      	add	r2, ip
    3466:	8813      	ldrh	r3, [r2, #0]
    3468:	3301      	adds	r3, #1
    346a:	b29b      	uxth	r3, r3
    346c:	8013      	strh	r3, [r2, #0]
    346e:	8813      	ldrh	r3, [r2, #0]
    3470:	b29b      	uxth	r3, r3
    3472:	9a01      	ldr	r2, [sp, #4]
    3474:	4293      	cmp	r3, r2
    3476:	d20b      	bcs.n	3490 <eink_it8951_graphics_load_4bgrey_image+0x104>
        m = 0;
    3478:	2300      	movs	r3, #0
    347a:	8033      	strh	r3, [r6, #0]
        for (j = 0; j < image_height_bytes; j++) {
    347c:	ab05      	add	r3, sp, #20
    347e:	2200      	movs	r2, #0
    3480:	801a      	strh	r2, [r3, #0]
    3482:	881b      	ldrh	r3, [r3, #0]
    3484:	b29b      	uxth	r3, r3
    3486:	429d      	cmp	r5, r3
    3488:	d9e9      	bls.n	345e <eink_it8951_graphics_load_4bgrey_image+0xd2>
                bit_value_1 = ((img_array[(i*image_height_bytes)+j]) & 0xF);
    348a:	ac05      	add	r4, sp, #20
    348c:	46da      	mov	sl, fp
    348e:	e7aa      	b.n	33e6 <eink_it8951_graphics_load_4bgrey_image+0x5a>
        }
    }
    3490:	b007      	add	sp, #28
    3492:	bc3c      	pop	{r2, r3, r4, r5}
    3494:	4690      	mov	r8, r2
    3496:	4699      	mov	r9, r3
    3498:	46a2      	mov	sl, r4
    349a:	46ab      	mov	fp, r5
    349c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	20000430 	.word	0x20000430
    34a4:	000032a5 	.word	0x000032a5

000034a8 <uc8173_init>:
 *
 * Call this function to initialize the hardware interface and the UC8173 display
 * driver. When initialization is done the display is ready to receive data.
 */
void uc8173_init(void)
{
    34a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34aa:	b083      	sub	sp, #12
    /* Initialize delay routine */
    delay_init(SysTick);
    34ac:	4812      	ldr	r0, [pc, #72]	; (34f8 <uc8173_init+0x50>)
    34ae:	4b13      	ldr	r3, [pc, #76]	; (34fc <uc8173_init+0x54>)
    34b0:	4798      	blx	r3

    /* Initialize the interface */
    eink_interface_init(0);
    34b2:	2000      	movs	r0, #0
    34b4:	4b12      	ldr	r3, [pc, #72]	; (3500 <uc8173_init+0x58>)
    34b6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34b8:	25c0      	movs	r5, #192	; 0xc0
    34ba:	05ed      	lsls	r5, r5, #23
    34bc:	2640      	movs	r6, #64	; 0x40
    34be:	616e      	str	r6, [r5, #20]
    delay_ms(1);
    34c0:	2001      	movs	r0, #1
    34c2:	4c10      	ldr	r4, [pc, #64]	; (3504 <uc8173_init+0x5c>)
    34c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34c6:	61ae      	str	r6, [r5, #24]
    delay_ms(1);
    34c8:	2001      	movs	r0, #1
    34ca:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    34cc:	4f0e      	ldr	r7, [pc, #56]	; (3508 <uc8173_init+0x60>)
	CRITICAL_SECTION_LEAVE();
    34ce:	4e0f      	ldr	r6, [pc, #60]	; (350c <uc8173_init+0x64>)
	CRITICAL_SECTION_ENTER();
    34d0:	a801      	add	r0, sp, #4
    34d2:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    34d4:	23c0      	movs	r3, #192	; 0xc0
    34d6:	05db      	lsls	r3, r3, #23
    34d8:	2580      	movs	r5, #128	; 0x80
    34da:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    34dc:	22a0      	movs	r2, #160	; 0xa0
    34de:	490c      	ldr	r1, [pc, #48]	; (3510 <uc8173_init+0x68>)
    34e0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    34e2:	2190      	movs	r1, #144	; 0x90
    34e4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    34e6:	4053      	eors	r3, r2
    34e8:	401c      	ands	r4, r3
    34ea:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    34ec:	a801      	add	r0, sp, #4
    34ee:	47b0      	blx	r6
    while(!gpio_get_pin_level(EINK_BUSY));
    34f0:	4225      	tst	r5, r4
    34f2:	d0ed      	beq.n	34d0 <uc8173_init+0x28>
    /* Reset display */
    uc8173_hard_reset();
    
    /* Wait for BUSY output to return HIGH */
    uc8173_wait_for_busy_low();
}
    34f4:	b003      	add	sp, #12
    34f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34f8:	e000e010 	.word	0xe000e010
    34fc:	00000369 	.word	0x00000369
    3500:	00000dcd 	.word	0x00000dcd
    3504:	0000037d 	.word	0x0000037d
    3508:	0000034d 	.word	0x0000034d
    350c:	0000035b 	.word	0x0000035b
    3510:	41004400 	.word	0x41004400

00003514 <uc8173_set_config>:
 *
 * \param *config The configuration to write to the display driver.
 */
void uc8173_set_config(
        struct uc8173_config *const config)
{
    3514:	b5f0      	push	{r4, r5, r6, r7, lr}
    3516:	46c6      	mov	lr, r8
    3518:	b500      	push	{lr}
    351a:	b084      	sub	sp, #16
    351c:	4680      	mov	r8, r0
    uint8_t eink_data[5];
    
    uc8173_global_instance.display_config = *config;
    351e:	2204      	movs	r2, #4
    3520:	0001      	movs	r1, r0
    3522:	4886      	ldr	r0, [pc, #536]	; (373c <uc8173_set_config+0x228>)
    3524:	4b86      	ldr	r3, [pc, #536]	; (3740 <uc8173_set_config+0x22c>)
    3526:	4798      	blx	r3
    
    if(config->uc8173_display == UC8173_ET011TT2) {
    3528:	4643      	mov	r3, r8
    352a:	789b      	ldrb	r3, [r3, #2]
    352c:	2b01      	cmp	r3, #1
    352e:	d00f      	beq.n	3550 <uc8173_set_config+0x3c>
    	uc8173_global_instance.display_width   = 240;
		uc8173_global_instance.display_height  = 240;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    3530:	2b00      	cmp	r3, #0
    3532:	d11e      	bne.n	3572 <uc8173_set_config+0x5e>
		if((config->display_rotation == ROTATE_90) || (config->display_rotation == ROTATE_270)) {
    3534:	4643      	mov	r3, r8
    3536:	781b      	ldrb	r3, [r3, #0]
    3538:	2202      	movs	r2, #2
    353a:	4393      	bics	r3, r2
    353c:	2b01      	cmp	r3, #1
    353e:	d100      	bne.n	3542 <uc8173_set_config+0x2e>
    3540:	e0c8      	b.n	36d4 <uc8173_set_config+0x1c0>
			uc8173_global_instance.display_width   = 128;
			uc8173_global_instance.display_height  = 256;
		} else {
			uc8173_global_instance.display_width   = 256;
    3542:	4b7e      	ldr	r3, [pc, #504]	; (373c <uc8173_set_config+0x228>)
    3544:	2280      	movs	r2, #128	; 0x80
    3546:	0052      	lsls	r2, r2, #1
    3548:	809a      	strh	r2, [r3, #4]
			uc8173_global_instance.display_height  = 128;
    354a:	3a80      	subs	r2, #128	; 0x80
    354c:	80da      	strh	r2, [r3, #6]
    354e:	e003      	b.n	3558 <uc8173_set_config+0x44>
    	uc8173_global_instance.display_width   = 240;
    3550:	4b7a      	ldr	r3, [pc, #488]	; (373c <uc8173_set_config+0x228>)
    3552:	22f0      	movs	r2, #240	; 0xf0
    3554:	809a      	strh	r2, [r3, #4]
		uc8173_global_instance.display_height  = 240;
    3556:	80da      	strh	r2, [r3, #6]
		}
	}
	
    /* Booster Soft Start Control */
    if(config->uc8173_display == UC8173_ET011TT2) {
    3558:	4643      	mov	r3, r8
    355a:	789b      	ldrb	r3, [r3, #2]
    355c:	2b01      	cmp	r3, #1
    355e:	d100      	bne.n	3562 <uc8173_set_config+0x4e>
    3560:	e0be      	b.n	36e0 <uc8173_set_config+0x1cc>
    	eink_data[0] = 0x17;
		eink_data[1] = 0x97;
		eink_data[2] = 0x20;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    3562:	2b00      	cmp	r3, #0
    3564:	d105      	bne.n	3572 <uc8173_set_config+0x5e>
	    eink_data[0] = 0x17;
    3566:	ab02      	add	r3, sp, #8
    3568:	2217      	movs	r2, #23
    356a:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x17;
    356c:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x26;
    356e:	320f      	adds	r2, #15
    3570:	709a      	strb	r2, [r3, #2]
	}
	eink_write_data(UC8173_BTST, eink_data, 3);
    3572:	ac02      	add	r4, sp, #8
    3574:	2203      	movs	r2, #3
    3576:	0021      	movs	r1, r4
    3578:	2006      	movs	r0, #6
    357a:	4d72      	ldr	r5, [pc, #456]	; (3744 <uc8173_set_config+0x230>)
    357c:	47a8      	blx	r5
	
    /* Power Settings */
	eink_data[0] = 0x03;
    357e:	2303      	movs	r3, #3
    3580:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x00;
    3582:	2300      	movs	r3, #0
    3584:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x2B;
    3586:	332b      	adds	r3, #43	; 0x2b
    3588:	70a3      	strb	r3, [r4, #2]
	eink_data[3] = 0x2B;
    358a:	70e3      	strb	r3, [r4, #3]
	eink_data[4] = 0x08;
    358c:	3b23      	subs	r3, #35	; 0x23
    358e:	7123      	strb	r3, [r4, #4]
	eink_write_data(UC8173_PWR, eink_data, 5);
    3590:	2205      	movs	r2, #5
    3592:	0021      	movs	r1, r4
    3594:	2001      	movs	r0, #1
    3596:	47a8      	blx	r5
	
	eink_write_data(UC8173_PON, 0, 0);
    3598:	2200      	movs	r2, #0
    359a:	2100      	movs	r1, #0
    359c:	2004      	movs	r0, #4
    359e:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    35a0:	4f69      	ldr	r7, [pc, #420]	; (3748 <uc8173_set_config+0x234>)
	CRITICAL_SECTION_LEAVE();
    35a2:	4e6a      	ldr	r6, [pc, #424]	; (374c <uc8173_set_config+0x238>)
	CRITICAL_SECTION_ENTER();
    35a4:	a801      	add	r0, sp, #4
    35a6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    35a8:	23c0      	movs	r3, #192	; 0xc0
    35aa:	05db      	lsls	r3, r3, #23
    35ac:	2580      	movs	r5, #128	; 0x80
    35ae:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    35b0:	22a0      	movs	r2, #160	; 0xa0
    35b2:	4967      	ldr	r1, [pc, #412]	; (3750 <uc8173_set_config+0x23c>)
    35b4:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    35b6:	2190      	movs	r1, #144	; 0x90
    35b8:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    35ba:	4053      	eors	r3, r2
    35bc:	401c      	ands	r4, r3
    35be:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    35c0:	a801      	add	r0, sp, #4
    35c2:	47b0      	blx	r6
    35c4:	4225      	tst	r5, r4
    35c6:	d0ed      	beq.n	35a4 <uc8173_set_config+0x90>
	uc8173_wait_for_busy_low();
	
    /* Panel Settings */
    if(config->uc8173_display == UC8173_ET011TT2) {
    35c8:	4643      	mov	r3, r8
    35ca:	789b      	ldrb	r3, [r3, #2]
    35cc:	2b01      	cmp	r3, #1
    35ce:	d100      	bne.n	35d2 <uc8173_set_config+0xbe>
    35d0:	e08e      	b.n	36f0 <uc8173_set_config+0x1dc>
    		eink_data[0] = 0xF; //0xF
		} else {
			eink_data[0] = 0x0B;
		}
		eink_data[1] = 0x86;
    } else if(config->uc8173_display == UC8173_ED013TC1) {
    35d2:	2b00      	cmp	r3, #0
    35d4:	d104      	bne.n	35e0 <uc8173_set_config+0xcc>
		eink_data[0] = 0x03;
    35d6:	ab02      	add	r3, sp, #8
    35d8:	2203      	movs	r2, #3
    35da:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    35dc:	3283      	adds	r2, #131	; 0x83
    35de:	705a      	strb	r2, [r3, #1]
	}
	eink_write_data(UC8173_PSR, eink_data, 2);
    35e0:	ac02      	add	r4, sp, #8
    35e2:	2202      	movs	r2, #2
    35e4:	0021      	movs	r1, r4
    35e6:	2000      	movs	r0, #0
    35e8:	4d56      	ldr	r5, [pc, #344]	; (3744 <uc8173_set_config+0x230>)
    35ea:	47a8      	blx	r5

    /* Power OFF Sequence Settings */
	eink_data[0] = 0x00;
    35ec:	2300      	movs	r3, #0
    35ee:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_PFS, eink_data, 1);
    35f0:	2201      	movs	r2, #1
    35f2:	0021      	movs	r1, r4
    35f4:	2003      	movs	r0, #3
    35f6:	47a8      	blx	r5
	
    /* PLL Control */
	if(config->uc8173_display == UC8173_ET011TT2) {
    35f8:	4643      	mov	r3, r8
    35fa:	789b      	ldrb	r3, [r3, #2]
    35fc:	2b01      	cmp	r3, #1
    35fe:	d100      	bne.n	3602 <uc8173_set_config+0xee>
    3600:	e086      	b.n	3710 <uc8173_set_config+0x1fc>
		eink_data[0] = 0x25;
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    3602:	2b00      	cmp	r3, #0
    3604:	d102      	bne.n	360c <uc8173_set_config+0xf8>
		eink_data[0] = 0x48;
    3606:	2248      	movs	r2, #72	; 0x48
    3608:	ab02      	add	r3, sp, #8
    360a:	701a      	strb	r2, [r3, #0]
	}
	eink_write_data(UC8173_LPRD, eink_data, 1);
    360c:	ac02      	add	r4, sp, #8
    360e:	2201      	movs	r2, #1
    3610:	0021      	movs	r1, r4
    3612:	2030      	movs	r0, #48	; 0x30
    3614:	4d4b      	ldr	r5, [pc, #300]	; (3744 <uc8173_set_config+0x230>)
    3616:	47a8      	blx	r5

    /* Temperature Sensor Enable */
	eink_data[0] = 0x00; /* Internal Sensor Enabled */
    3618:	2300      	movs	r3, #0
    361a:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_TSE, eink_data, 1);
    361c:	2201      	movs	r2, #1
    361e:	0021      	movs	r1, r4
    3620:	2041      	movs	r0, #65	; 0x41
    3622:	47a8      	blx	r5

    /* VCOM & DI Settings */
	eink_data[0] = 0xE1;
    3624:	23e1      	movs	r3, #225	; 0xe1
    3626:	7023      	strb	r3, [r4, #0]
	eink_data[1] = 0x20;
    3628:	3bc1      	subs	r3, #193	; 0xc1
    362a:	7063      	strb	r3, [r4, #1]
	eink_data[2] = 0x10;
    362c:	3b10      	subs	r3, #16
    362e:	70a3      	strb	r3, [r4, #2]
	eink_write_data(UC8173_CDI, eink_data, 3);
    3630:	2203      	movs	r2, #3
    3632:	0021      	movs	r1, r4
    3634:	2050      	movs	r0, #80	; 0x50
    3636:	47a8      	blx	r5

    /* Resolution Settings */
    if(config->uc8173_display == UC8173_ET011TT2) {
    3638:	4643      	mov	r3, r8
    363a:	789b      	ldrb	r3, [r3, #2]
    363c:	2b01      	cmp	r3, #1
    363e:	d06b      	beq.n	3718 <uc8173_set_config+0x204>
		eink_data[0] = 0xEF; /* H = 239 */
		eink_data[1] = 0x00;
		eink_data[2] = 0xEF; /* W = 239 */
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    3640:	2b00      	cmp	r3, #0
    3642:	d106      	bne.n	3652 <uc8173_set_config+0x13e>
		eink_data[0] = 0x7F; /* H = 127 */
    3644:	ab02      	add	r3, sp, #8
    3646:	227f      	movs	r2, #127	; 0x7f
    3648:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x00;
    364a:	2200      	movs	r2, #0
    364c:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0xFF; /* W = 255 */
    364e:	32ff      	adds	r2, #255	; 0xff
    3650:	709a      	strb	r2, [r3, #2]
	}
	eink_write_data(UC8173_TRES, eink_data, 3);
    3652:	2203      	movs	r2, #3
    3654:	a902      	add	r1, sp, #8
    3656:	2061      	movs	r0, #97	; 0x61
    3658:	4b3a      	ldr	r3, [pc, #232]	; (3744 <uc8173_set_config+0x230>)
    365a:	4798      	blx	r3
	
	/* Gate Group Setting */
	if(config->uc8173_display == UC8173_ET011TT2) {
    365c:	4643      	mov	r3, r8
    365e:	789b      	ldrb	r3, [r3, #2]
    3660:	2b01      	cmp	r3, #1
    3662:	d060      	beq.n	3726 <uc8173_set_config+0x212>
		eink_data[0] = 0xA9;
		eink_data[1] = 0xA9;
		eink_data[2] = 0xEB;
		eink_data[3] = 0xEB;
		eink_data[4] = 0x02;
	} else if(config->uc8173_display == UC8173_ED013TC1) {
    3664:	2b00      	cmp	r3, #0
    3666:	d109      	bne.n	367c <uc8173_set_config+0x168>
		eink_data[0] = 0xCF;
    3668:	ab02      	add	r3, sp, #8
    366a:	22cf      	movs	r2, #207	; 0xcf
    366c:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0xAF;
    366e:	3a20      	subs	r2, #32
    3670:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x00;
    3672:	2200      	movs	r2, #0
    3674:	709a      	strb	r2, [r3, #2]
		eink_data[3] = 0x00;
    3676:	70da      	strb	r2, [r3, #3]
		eink_data[4] = 0x03;
    3678:	3203      	adds	r2, #3
    367a:	711a      	strb	r2, [r3, #4]
	}
	eink_write_data(UC8173_GDS, eink_data, 5);
    367c:	ac02      	add	r4, sp, #8
    367e:	2205      	movs	r2, #5
    3680:	0021      	movs	r1, r4
    3682:	2062      	movs	r0, #98	; 0x62
    3684:	4d2f      	ldr	r5, [pc, #188]	; (3744 <uc8173_set_config+0x230>)
    3686:	47a8      	blx	r5
  
	//uc8173_measure_vcom();
	/* Set's VCOM value automatically for demo purposes, but should be read from display */
	eink_data[0] = 0x26;
    3688:	2326      	movs	r3, #38	; 0x26
    368a:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_VDCS, eink_data, 1);
    368c:	2201      	movs	r2, #1
    368e:	0021      	movs	r1, r4
    3690:	2082      	movs	r0, #130	; 0x82
    3692:	47a8      	blx	r5
	eink_write_data(UC8173_VBDS, eink_data, 1);
    3694:	2201      	movs	r2, #1
    3696:	0021      	movs	r1, r4
    3698:	2084      	movs	r0, #132	; 0x84
    369a:	47a8      	blx	r5

	eink_data[0] = 0x02;
    369c:	2602      	movs	r6, #2
    369e:	7026      	strb	r6, [r4, #0]
	eink_write_data(UC8173_LVSEL, eink_data, 1);
    36a0:	2201      	movs	r2, #1
    36a2:	0021      	movs	r1, r4
    36a4:	20e4      	movs	r0, #228	; 0xe4
    36a6:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
    36a8:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    36aa:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GBS, eink_data, 2);
    36ac:	2202      	movs	r2, #2
    36ae:	0021      	movs	r1, r4
    36b0:	2063      	movs	r0, #99	; 0x63
    36b2:	47a8      	blx	r5
	
	eink_data[0] = 0x02;
    36b4:	7026      	strb	r6, [r4, #0]
	eink_data[1] = 0x02;
    36b6:	7066      	strb	r6, [r4, #1]
	eink_write_data(UC8173_GSS, eink_data, 2);
    36b8:	2202      	movs	r2, #2
    36ba:	0021      	movs	r1, r4
    36bc:	2064      	movs	r0, #100	; 0x64
    36be:	47a8      	blx	r5
	
	eink_data[0] = 0x1F;
    36c0:	231f      	movs	r3, #31
    36c2:	7023      	strb	r3, [r4, #0]
	eink_write_data(UC8173_DF, eink_data, 1);
    36c4:	2201      	movs	r2, #1
    36c6:	0021      	movs	r1, r4
    36c8:	20df      	movs	r0, #223	; 0xdf
    36ca:	47a8      	blx	r5
	
	//eink_write_data(UC8173_POF, 0, 0);
	//uc8173_wait_for_busy_high();
}
    36cc:	b004      	add	sp, #16
    36ce:	bc04      	pop	{r2}
    36d0:	4690      	mov	r8, r2
    36d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uc8173_global_instance.display_width   = 128;
    36d4:	4b19      	ldr	r3, [pc, #100]	; (373c <uc8173_set_config+0x228>)
    36d6:	327e      	adds	r2, #126	; 0x7e
    36d8:	809a      	strh	r2, [r3, #4]
			uc8173_global_instance.display_height  = 256;
    36da:	3280      	adds	r2, #128	; 0x80
    36dc:	80da      	strh	r2, [r3, #6]
    36de:	e73b      	b.n	3558 <uc8173_set_config+0x44>
    	eink_data[0] = 0x17;
    36e0:	ab02      	add	r3, sp, #8
    36e2:	2217      	movs	r2, #23
    36e4:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x97;
    36e6:	3280      	adds	r2, #128	; 0x80
    36e8:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0x20;
    36ea:	3a77      	subs	r2, #119	; 0x77
    36ec:	709a      	strb	r2, [r3, #2]
    36ee:	e740      	b.n	3572 <uc8173_set_config+0x5e>
		if((config->display_rotation == ROTATE_180) || (config->display_rotation == ROTATE_270)) {
    36f0:	4643      	mov	r3, r8
    36f2:	781b      	ldrb	r3, [r3, #0]
    36f4:	3b02      	subs	r3, #2
    36f6:	2b01      	cmp	r3, #1
    36f8:	d906      	bls.n	3708 <uc8173_set_config+0x1f4>
			eink_data[0] = 0x0B;
    36fa:	220b      	movs	r2, #11
    36fc:	ab02      	add	r3, sp, #8
    36fe:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x86;
    3700:	2286      	movs	r2, #134	; 0x86
    3702:	ab02      	add	r3, sp, #8
    3704:	705a      	strb	r2, [r3, #1]
    3706:	e76b      	b.n	35e0 <uc8173_set_config+0xcc>
    		eink_data[0] = 0xF; //0xF
    3708:	220f      	movs	r2, #15
    370a:	ab02      	add	r3, sp, #8
    370c:	701a      	strb	r2, [r3, #0]
    370e:	e7f7      	b.n	3700 <uc8173_set_config+0x1ec>
		eink_data[0] = 0x25;
    3710:	2225      	movs	r2, #37	; 0x25
    3712:	ab02      	add	r3, sp, #8
    3714:	701a      	strb	r2, [r3, #0]
    3716:	e779      	b.n	360c <uc8173_set_config+0xf8>
		eink_data[0] = 0xEF; /* H = 239 */
    3718:	ab02      	add	r3, sp, #8
    371a:	22ef      	movs	r2, #239	; 0xef
    371c:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0x00;
    371e:	2100      	movs	r1, #0
    3720:	7059      	strb	r1, [r3, #1]
		eink_data[2] = 0xEF; /* W = 239 */
    3722:	709a      	strb	r2, [r3, #2]
    3724:	e795      	b.n	3652 <uc8173_set_config+0x13e>
		eink_data[0] = 0xA9;
    3726:	ab02      	add	r3, sp, #8
    3728:	22a9      	movs	r2, #169	; 0xa9
    372a:	701a      	strb	r2, [r3, #0]
		eink_data[1] = 0xA9;
    372c:	705a      	strb	r2, [r3, #1]
		eink_data[2] = 0xEB;
    372e:	3242      	adds	r2, #66	; 0x42
    3730:	709a      	strb	r2, [r3, #2]
		eink_data[3] = 0xEB;
    3732:	70da      	strb	r2, [r3, #3]
		eink_data[4] = 0x02;
    3734:	3ae9      	subs	r2, #233	; 0xe9
    3736:	711a      	strb	r2, [r3, #4]
    3738:	e7a0      	b.n	367c <uc8173_set_config+0x168>
    373a:	46c0      	nop			; (mov r8, r8)
    373c:	20000390 	.word	0x20000390
    3740:	0000498d 	.word	0x0000498d
    3744:	00001c5d 	.word	0x00001c5d
    3748:	0000034d 	.word	0x0000034d
    374c:	0000035b 	.word	0x0000035b
    3750:	41004400 	.word	0x41004400

00003754 <eink_et011tt2_init>:
{    
    3754:	b5f0      	push	{r4, r5, r6, r7, lr}
    3756:	46c6      	mov	lr, r8
    3758:	b500      	push	{lr}
    375a:	b082      	sub	sp, #8
    375c:	0006      	movs	r6, r0
    375e:	4688      	mov	r8, r1
    et011tt2_dtm2_display_buffer = (uint8_t*) malloc (malloc_size);
    3760:	20e1      	movs	r0, #225	; 0xe1
    3762:	0180      	lsls	r0, r0, #6
    3764:	4b26      	ldr	r3, [pc, #152]	; (3800 <eink_et011tt2_init+0xac>)
    3766:	4798      	blx	r3
    3768:	4b26      	ldr	r3, [pc, #152]	; (3804 <eink_et011tt2_init+0xb0>)
    376a:	6018      	str	r0, [r3, #0]
    eink_gfx_et011tt2_config.display_buffer_1_ptr = et011tt2_dtm2_display_buffer;
    376c:	4c26      	ldr	r4, [pc, #152]	; (3808 <eink_et011tt2_init+0xb4>)
    376e:	6120      	str	r0, [r4, #16]
    uc8173_init();
    3770:	4b26      	ldr	r3, [pc, #152]	; (380c <eink_et011tt2_init+0xb8>)
    3772:	4798      	blx	r3
    config->uc8173_display = UC8173_ET011TT2;
    3774:	2301      	movs	r3, #1
    3776:	70b3      	strb	r3, [r6, #2]
    uc8173_set_config(config);
    3778:	0030      	movs	r0, r6
    377a:	4b25      	ldr	r3, [pc, #148]	; (3810 <eink_et011tt2_init+0xbc>)
    377c:	4798      	blx	r3
    eink_gfx_et011tt2_config.display_rotation = config->display_rotation;
    377e:	7833      	ldrb	r3, [r6, #0]
    3780:	7323      	strb	r3, [r4, #12]
    ptr_eink_gfx_config = (struct eink_gfx_config*) &eink_gfx_et011tt2_config;
    3782:	4b24      	ldr	r3, [pc, #144]	; (3814 <eink_et011tt2_init+0xc0>)
    3784:	601c      	str	r4, [r3, #0]
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    3786:	2300      	movs	r3, #0
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    3788:	4c22      	ldr	r4, [pc, #136]	; (3814 <eink_et011tt2_init+0xc0>)
    378a:	20ff      	movs	r0, #255	; 0xff
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    378c:	21e1      	movs	r1, #225	; 0xe1
    378e:	0189      	lsls	r1, r1, #6
        ptr_eink_gfx_config->display_buffer_1_ptr[buffer_index] = 0xFF; /* DTM2 is current buffer */
    3790:	6822      	ldr	r2, [r4, #0]
    3792:	6912      	ldr	r2, [r2, #16]
    3794:	54d0      	strb	r0, [r2, r3]
    for (buffer_index = 0; buffer_index < GFX_ET011TT2_DISPLAY_BUFFER_SIZE; buffer_index++) {
    3796:	3301      	adds	r3, #1
    3798:	428b      	cmp	r3, r1
    379a:	d1f9      	bne.n	3790 <eink_et011tt2_init+0x3c>
    eink_data[0] = 0x00;
    379c:	2400      	movs	r4, #0
    379e:	466b      	mov	r3, sp
    37a0:	701c      	strb	r4, [r3, #0]
    eink_data[1] = 0x00;
    37a2:	705c      	strb	r4, [r3, #1]
    eink_data[2] = 0x00;
    37a4:	709c      	strb	r4, [r3, #2]
    eink_data[3] = 0xEF;
    37a6:	25ef      	movs	r5, #239	; 0xef
    37a8:	70dd      	strb	r5, [r3, #3]
    eink_data[4] = 0x00;
    37aa:	711c      	strb	r4, [r3, #4]
    eink_data[5] = 0xEF;
    37ac:	715d      	strb	r5, [r3, #5]
    eink_write_data(UC8173_DTMW, eink_data, 6);
    37ae:	2206      	movs	r2, #6
    37b0:	4669      	mov	r1, sp
    37b2:	2014      	movs	r0, #20
    37b4:	4e18      	ldr	r6, [pc, #96]	; (3818 <eink_et011tt2_init+0xc4>)
    37b6:	47b0      	blx	r6
	eink_write_data(UC8173_DTM1, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    37b8:	4f16      	ldr	r7, [pc, #88]	; (3814 <eink_et011tt2_init+0xc0>)
    37ba:	683b      	ldr	r3, [r7, #0]
    37bc:	6919      	ldr	r1, [r3, #16]
    37be:	22e1      	movs	r2, #225	; 0xe1
    37c0:	0192      	lsls	r2, r2, #6
    37c2:	2010      	movs	r0, #16
    37c4:	47b0      	blx	r6
	eink_data[0] = 0x00;
    37c6:	466b      	mov	r3, sp
    37c8:	701c      	strb	r4, [r3, #0]
	eink_data[1] = 0x00;
    37ca:	705c      	strb	r4, [r3, #1]
	eink_data[2] = 0x00;
    37cc:	709c      	strb	r4, [r3, #2]
	eink_data[3] = 0xEF;
    37ce:	70dd      	strb	r5, [r3, #3]
	eink_data[4] = 0x00;
    37d0:	711c      	strb	r4, [r3, #4]
	eink_data[5] = 0xEF;
    37d2:	715d      	strb	r5, [r3, #5]
	eink_write_data(UC8173_DTMW, eink_data, 6);
    37d4:	2206      	movs	r2, #6
    37d6:	4669      	mov	r1, sp
    37d8:	2014      	movs	r0, #20
    37da:	47b0      	blx	r6
	eink_write_data(UC8173_DTM2, ptr_eink_gfx_config->display_buffer_1_ptr, GFX_ET011TT2_DISPLAY_BUFFER_SIZE);
    37dc:	683b      	ldr	r3, [r7, #0]
    37de:	6919      	ldr	r1, [r3, #16]
    37e0:	22e1      	movs	r2, #225	; 0xe1
    37e2:	0192      	lsls	r2, r2, #6
    37e4:	2013      	movs	r0, #19
    37e6:	47b0      	blx	r6
    if(clear_display) eink_et011tt2_put_display_buffer(true);
    37e8:	4643      	mov	r3, r8
    37ea:	2b00      	cmp	r3, #0
    37ec:	d103      	bne.n	37f6 <eink_et011tt2_init+0xa2>
}
    37ee:	b002      	add	sp, #8
    37f0:	bc04      	pop	{r2}
    37f2:	4690      	mov	r8, r2
    37f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(clear_display) eink_et011tt2_put_display_buffer(true);
    37f6:	2001      	movs	r0, #1
    37f8:	4b08      	ldr	r3, [pc, #32]	; (381c <eink_et011tt2_init+0xc8>)
    37fa:	4798      	blx	r3
}
    37fc:	e7f7      	b.n	37ee <eink_et011tt2_init+0x9a>
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	00004979 	.word	0x00004979
    3804:	20000388 	.word	0x20000388
    3808:	20000000 	.word	0x20000000
    380c:	000034a9 	.word	0x000034a9
    3810:	00003515 	.word	0x00003515
    3814:	20000430 	.word	0x20000430
    3818:	00001c5d 	.word	0x00001c5d
    381c:	00002a19 	.word	0x00002a19

00003820 <eink_et011tt2_graphics_load_2bgrey_image>:
 *                           as a multiple of 8.
 * \param x_place X location to place with bitmap.
 * \param y_place Y location to place with bitmap.
 */
void eink_et011tt2_graphics_load_2bgrey_image(uint8_t *img_array, uint16_t array_size, eink_coordinate image_width_px, eink_coordinate image_height_bytes, eink_coordinate x_place, eink_coordinate y_place)
{
    3820:	b5f0      	push	{r4, r5, r6, r7, lr}
    3822:	46de      	mov	lr, fp
    3824:	4657      	mov	r7, sl
    3826:	464e      	mov	r6, r9
    3828:	4645      	mov	r5, r8
    382a:	b5e0      	push	{r5, r6, r7, lr}
    382c:	b089      	sub	sp, #36	; 0x24
    382e:	9004      	str	r0, [sp, #16]
    3830:	4691      	mov	r9, r2
    3832:	0019      	movs	r1, r3
    3834:	9305      	str	r3, [sp, #20]
    3836:	ab12      	add	r3, sp, #72	; 0x48
    3838:	881a      	ldrh	r2, [r3, #0]
    383a:	9206      	str	r2, [sp, #24]
    383c:	ab13      	add	r3, sp, #76	; 0x4c
    383e:	881b      	ldrh	r3, [r3, #0]
    uint16_t buffer_index, i, j;
    uint16_t k, l, m, bit_value[4];
    
    /* Scan pixels by column */
    for (i = 0; i < image_width_px; i++) {
    3840:	464a      	mov	r2, r9
    3842:	2a00      	cmp	r2, #0
    3844:	d04a      	beq.n	38dc <eink_et011tt2_graphics_load_2bgrey_image+0xbc>
    3846:	2200      	movs	r2, #0
    3848:	4693      	mov	fp, r2
        m = 0;
        for (j = (image_height_bytes-1); j > 0; j--) {
    384a:	000a      	movs	r2, r1
    384c:	3a01      	subs	r2, #1
    384e:	b292      	uxth	r2, r2
    3850:	9202      	str	r2, [sp, #8]
            /* Process each pixel in byte  */
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    3852:	9307      	str	r3, [sp, #28]
            bit_value[1] = ((img_array[(i*image_height_bytes)+j] >> 2) & 0x3);
            bit_value[2] = ((img_array[(i*image_height_bytes)+j] >> 4) & 0x3);
            bit_value[3] = ((img_array[(i*image_height_bytes)+j] >> 6) & 0x3);
            /* Set the pixel in the display buffer */
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    3854:	4f25      	ldr	r7, [pc, #148]	; (38ec <eink_et011tt2_graphics_load_2bgrey_image+0xcc>)
    3856:	464b      	mov	r3, r9
    3858:	9303      	str	r3, [sp, #12]
        for (j = (image_height_bytes-1); j > 0; j--) {
    385a:	9a02      	ldr	r2, [sp, #8]
    385c:	4691      	mov	r9, r2
    385e:	2a00      	cmp	r2, #0
    3860:	d035      	beq.n	38ce <eink_et011tt2_graphics_load_2bgrey_image+0xae>
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    3862:	9e07      	ldr	r6, [sp, #28]
    3864:	9b05      	ldr	r3, [sp, #20]
    3866:	465a      	mov	r2, fp
    3868:	4353      	muls	r3, r2
    386a:	9a04      	ldr	r2, [sp, #16]
    386c:	4692      	mov	sl, r2
    386e:	449a      	add	sl, r3
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    3870:	9b06      	ldr	r3, [sp, #24]
    3872:	445b      	add	r3, fp
    3874:	b29b      	uxth	r3, r3
    3876:	9301      	str	r3, [sp, #4]
    3878:	464d      	mov	r5, r9
            bit_value[0] = ((img_array[(i*image_height_bytes)+j]) & 0x3);
    387a:	4653      	mov	r3, sl
    387c:	5d5c      	ldrb	r4, [r3, r5]
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m), (~bit_value[0]));
    387e:	2303      	movs	r3, #3
    3880:	4698      	mov	r8, r3
    3882:	001a      	movs	r2, r3
    3884:	4022      	ands	r2, r4
    3886:	43d2      	mvns	r2, r2
    3888:	b2d2      	uxtb	r2, r2
    388a:	0031      	movs	r1, r6
    388c:	9801      	ldr	r0, [sp, #4]
    388e:	47b8      	blx	r7
            bit_value[1] = ((img_array[(i*image_height_bytes)+j] >> 2) & 0x3);
    3890:	08a2      	lsrs	r2, r4, #2
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+1), (~bit_value[1]));
    3892:	4643      	mov	r3, r8
    3894:	401a      	ands	r2, r3
    3896:	43d2      	mvns	r2, r2
    3898:	b2d2      	uxtb	r2, r2
    389a:	1c71      	adds	r1, r6, #1
    389c:	b289      	uxth	r1, r1
    389e:	9801      	ldr	r0, [sp, #4]
    38a0:	47b8      	blx	r7
            bit_value[2] = ((img_array[(i*image_height_bytes)+j] >> 4) & 0x3);
    38a2:	0922      	lsrs	r2, r4, #4
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+2), (~bit_value[2]));
    38a4:	4643      	mov	r3, r8
    38a6:	401a      	ands	r2, r3
    38a8:	43d2      	mvns	r2, r2
    38aa:	b2d2      	uxtb	r2, r2
    38ac:	1cb1      	adds	r1, r6, #2
    38ae:	b289      	uxth	r1, r1
    38b0:	9801      	ldr	r0, [sp, #4]
    38b2:	47b8      	blx	r7
            bit_value[3] = ((img_array[(i*image_height_bytes)+j] >> 6) & 0x3);
    38b4:	09a4      	lsrs	r4, r4, #6
            eink_et011tt2_set_pixel_raw((x_place+i), (y_place+m+3), (~bit_value[3]));
    38b6:	43e2      	mvns	r2, r4
    38b8:	b2d2      	uxtb	r2, r2
    38ba:	1cf1      	adds	r1, r6, #3
    38bc:	b289      	uxth	r1, r1
    38be:	9801      	ldr	r0, [sp, #4]
    38c0:	47b8      	blx	r7
        for (j = (image_height_bytes-1); j > 0; j--) {
    38c2:	3d01      	subs	r5, #1
    38c4:	b2ad      	uxth	r5, r5
    38c6:	3604      	adds	r6, #4
    38c8:	b2b6      	uxth	r6, r6
    38ca:	2d00      	cmp	r5, #0
    38cc:	d1d5      	bne.n	387a <eink_et011tt2_graphics_load_2bgrey_image+0x5a>
    for (i = 0; i < image_width_px; i++) {
    38ce:	465b      	mov	r3, fp
    38d0:	3301      	adds	r3, #1
    38d2:	b29b      	uxth	r3, r3
    38d4:	469b      	mov	fp, r3
    38d6:	9b03      	ldr	r3, [sp, #12]
    38d8:	455b      	cmp	r3, fp
    38da:	d8be      	bhi.n	385a <eink_et011tt2_graphics_load_2bgrey_image+0x3a>
            m += 4;
        }
    }
    return;
    38dc:	b009      	add	sp, #36	; 0x24
    38de:	bc3c      	pop	{r2, r3, r4, r5}
    38e0:	4690      	mov	r8, r2
    38e2:	4699      	mov	r9, r3
    38e4:	46a2      	mov	sl, r4
    38e6:	46ab      	mov	fp, r5
    38e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	00001b0d 	.word	0x00001b0d

000038f0 <uc8151_set_psr_config>:
 *
 * \param *psr_config The PSR structure to write to the PSR register.
 */
void uc8151_set_psr_config(
        const struct uc8151_panel_settings *psr_config)
{    
    38f0:	b510      	push	{r4, lr}
    38f2:	b082      	sub	sp, #8
    38f4:	0004      	movs	r4, r0
    /* Copy configuration into UC8151 instance */
    uc8151_global_instance.panel_settings = *psr_config;
    38f6:	2205      	movs	r2, #5
    38f8:	0001      	movs	r1, r0
    38fa:	4859      	ldr	r0, [pc, #356]	; (3a60 <uc8151_set_psr_config+0x170>)
    38fc:	4b59      	ldr	r3, [pc, #356]	; (3a64 <uc8151_set_psr_config+0x174>)
    38fe:	4798      	blx	r3
    
    /* Save display resolution into UC8151 instance */
    switch (psr_config->display_resolution) {
    3900:	7823      	ldrb	r3, [r4, #0]
    3902:	2b01      	cmp	r3, #1
    3904:	d066      	beq.n	39d4 <uc8151_set_psr_config+0xe4>
    3906:	2b00      	cmp	r3, #0
    3908:	d053      	beq.n	39b2 <uc8151_set_psr_config+0xc2>
    390a:	2b02      	cmp	r3, #2
    390c:	d100      	bne.n	3910 <uc8151_set_psr_config+0x20>
    390e:	e072      	b.n	39f6 <uc8151_set_psr_config+0x106>
    3910:	2b03      	cmp	r3, #3
    3912:	d100      	bne.n	3916 <uc8151_set_psr_config+0x26>
    3914:	e081      	b.n	3a1a <uc8151_set_psr_config+0x12a>
    }
    
    uint8_t eink_data[5];

    /* Translate the panel settings structure to the required bytes to be sent to the display */
    switch (psr_config->display_resolution) {
    3916:	7823      	ldrb	r3, [r4, #0]
    3918:	2b01      	cmp	r3, #1
    391a:	d100      	bne.n	391e <uc8151_set_psr_config+0x2e>
    391c:	e093      	b.n	3a46 <uc8151_set_psr_config+0x156>
    391e:	2b00      	cmp	r3, #0
    3920:	d100      	bne.n	3924 <uc8151_set_psr_config+0x34>
    3922:	e08c      	b.n	3a3e <uc8151_set_psr_config+0x14e>
    3924:	2b02      	cmp	r3, #2
    3926:	d100      	bne.n	392a <uc8151_set_psr_config+0x3a>
    3928:	e091      	b.n	3a4e <uc8151_set_psr_config+0x15e>
    392a:	2b03      	cmp	r3, #3
    392c:	d100      	bne.n	3930 <uc8151_set_psr_config+0x40>
    392e:	e092      	b.n	3a56 <uc8151_set_psr_config+0x166>
        case RES_96x230:                eink_data[0] = 0x00; break;
        case RES_96x252:                eink_data[0] = 0x01; break;
        case RES_128x296:               eink_data[0] = 0x02; break;
        case RES_160x296:               eink_data[0] = 0x03; break;
    }
    eink_data[0] = eink_data[0] << 1;
    3930:	466b      	mov	r3, sp
    3932:	781b      	ldrb	r3, [r3, #0]
    3934:	005b      	lsls	r3, r3, #1
    3936:	b2db      	uxtb	r3, r3
    3938:	466a      	mov	r2, sp
    393a:	7013      	strb	r3, [r2, #0]
    switch (psr_config->lut_selection) {
    393c:	7862      	ldrb	r2, [r4, #1]
    393e:	2a01      	cmp	r2, #1
    3940:	d102      	bne.n	3948 <uc8151_set_psr_config+0x58>
        case LUT_FROM_OTP:              eink_data[0] |= 0x00; break;
        case LUT_FROM_REGISTER:         eink_data[0] |= 0x01; break;
    3942:	4313      	orrs	r3, r2
    3944:	466a      	mov	r2, sp
    3946:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    3948:	466b      	mov	r3, sp
    394a:	781b      	ldrb	r3, [r3, #0]
    394c:	005b      	lsls	r3, r3, #1
    394e:	b2db      	uxtb	r3, r3
    3950:	466a      	mov	r2, sp
    3952:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_colours) {
    3954:	78a2      	ldrb	r2, [r4, #2]
    3956:	2a00      	cmp	r2, #0
    3958:	d103      	bne.n	3962 <uc8151_set_psr_config+0x72>
        case B_W_R_PIXELS:              eink_data[0] |= 0x00; break;
        case B_W_PIXELS:                eink_data[0] |= 0x01; break;
    395a:	2201      	movs	r2, #1
    395c:	4313      	orrs	r3, r2
    395e:	466a      	mov	r2, sp
    3960:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 2;
    3962:	466b      	mov	r3, sp
    3964:	781b      	ldrb	r3, [r3, #0]
    3966:	009b      	lsls	r3, r3, #2
    3968:	b2db      	uxtb	r3, r3
    396a:	466a      	mov	r2, sp
    396c:	7013      	strb	r3, [r2, #0]
    switch (psr_config->display_rotation) {
    396e:	78e2      	ldrb	r2, [r4, #3]
    3970:	3a01      	subs	r2, #1
    3972:	2a01      	cmp	r2, #1
    3974:	d803      	bhi.n	397e <uc8151_set_psr_config+0x8e>
        case ROTATE_0:
        case ROTATE_270:                 eink_data[0] |= 0b00; break;
        case ROTATE_180:
        case ROTATE_90:                  eink_data[0] |= 0b11; break;
    3976:	2203      	movs	r2, #3
    3978:	4313      	orrs	r3, r2
    397a:	466a      	mov	r2, sp
    397c:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    397e:	466b      	mov	r3, sp
    3980:	781b      	ldrb	r3, [r3, #0]
    3982:	005b      	lsls	r3, r3, #1
    3984:	b2db      	uxtb	r3, r3
    3986:	466a      	mov	r2, sp
    3988:	7013      	strb	r3, [r2, #0]
    switch (psr_config->booster_switch) {
    398a:	7922      	ldrb	r2, [r4, #4]
    398c:	2a01      	cmp	r2, #1
    398e:	d102      	bne.n	3996 <uc8151_set_psr_config+0xa6>
        case BOOSTER_OFF:               eink_data[0] |= 0x00; break;
        case BOOSTER_ON:                eink_data[0] |= 0x01; break;
    3990:	4313      	orrs	r3, r2
    3992:	466a      	mov	r2, sp
    3994:	7013      	strb	r3, [r2, #0]
    }
    eink_data[0] = eink_data[0] << 1;
    3996:	466b      	mov	r3, sp
    3998:	781b      	ldrb	r3, [r3, #0]
    399a:	005b      	lsls	r3, r3, #1
    /* Add the soft reset bit */
    eink_data[0] |= 0x01;
    399c:	2201      	movs	r2, #1
    399e:	4313      	orrs	r3, r2
    39a0:	466a      	mov	r2, sp
    39a2:	7013      	strb	r3, [r2, #0]
    /* Send the PSR register to the display */
    eink_write_data(UC8151_PSR, eink_data, 1);
    39a4:	2201      	movs	r2, #1
    39a6:	4669      	mov	r1, sp
    39a8:	2000      	movs	r0, #0
    39aa:	4b2f      	ldr	r3, [pc, #188]	; (3a68 <uc8151_set_psr_config+0x178>)
    39ac:	4798      	blx	r3
    39ae:	b002      	add	sp, #8
    39b0:	bd10      	pop	{r4, pc}
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    39b2:	78e3      	ldrb	r3, [r4, #3]
    39b4:	2202      	movs	r2, #2
    39b6:	4393      	bics	r3, r2
    39b8:	2b01      	cmp	r3, #1
    39ba:	d005      	beq.n	39c8 <uc8151_set_psr_config+0xd8>
                uc8151_global_instance.display_width   = 230;
    39bc:	4b28      	ldr	r3, [pc, #160]	; (3a60 <uc8151_set_psr_config+0x170>)
    39be:	22e6      	movs	r2, #230	; 0xe6
    39c0:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    39c2:	3a86      	subs	r2, #134	; 0x86
    39c4:	811a      	strh	r2, [r3, #8]
    39c6:	e7a6      	b.n	3916 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    39c8:	4b25      	ldr	r3, [pc, #148]	; (3a60 <uc8151_set_psr_config+0x170>)
    39ca:	325e      	adds	r2, #94	; 0x5e
    39cc:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 230;
    39ce:	3286      	adds	r2, #134	; 0x86
    39d0:	811a      	strh	r2, [r3, #8]
    39d2:	e7a0      	b.n	3916 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    39d4:	78e3      	ldrb	r3, [r4, #3]
    39d6:	2202      	movs	r2, #2
    39d8:	4393      	bics	r3, r2
    39da:	2b01      	cmp	r3, #1
    39dc:	d005      	beq.n	39ea <uc8151_set_psr_config+0xfa>
                uc8151_global_instance.display_width   = 252;
    39de:	4b20      	ldr	r3, [pc, #128]	; (3a60 <uc8151_set_psr_config+0x170>)
    39e0:	22fc      	movs	r2, #252	; 0xfc
    39e2:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 96;
    39e4:	3a9c      	subs	r2, #156	; 0x9c
    39e6:	811a      	strh	r2, [r3, #8]
    39e8:	e795      	b.n	3916 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 96;
    39ea:	4b1d      	ldr	r3, [pc, #116]	; (3a60 <uc8151_set_psr_config+0x170>)
    39ec:	325e      	adds	r2, #94	; 0x5e
    39ee:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 252;
    39f0:	329c      	adds	r2, #156	; 0x9c
    39f2:	811a      	strh	r2, [r3, #8]
    39f4:	e78f      	b.n	3916 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    39f6:	78e3      	ldrb	r3, [r4, #3]
    39f8:	2202      	movs	r2, #2
    39fa:	4393      	bics	r3, r2
    39fc:	2b01      	cmp	r3, #1
    39fe:	d006      	beq.n	3a0e <uc8151_set_psr_config+0x11e>
                uc8151_global_instance.display_width   = 296;
    3a00:	4b17      	ldr	r3, [pc, #92]	; (3a60 <uc8151_set_psr_config+0x170>)
    3a02:	2294      	movs	r2, #148	; 0x94
    3a04:	0052      	lsls	r2, r2, #1
    3a06:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 128;
    3a08:	3aa8      	subs	r2, #168	; 0xa8
    3a0a:	811a      	strh	r2, [r3, #8]
    3a0c:	e783      	b.n	3916 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 128;
    3a0e:	4b14      	ldr	r3, [pc, #80]	; (3a60 <uc8151_set_psr_config+0x170>)
    3a10:	327e      	adds	r2, #126	; 0x7e
    3a12:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    3a14:	32a8      	adds	r2, #168	; 0xa8
    3a16:	811a      	strh	r2, [r3, #8]
    3a18:	e77d      	b.n	3916 <uc8151_set_psr_config+0x26>
            if((psr_config->display_rotation == ROTATE_90) || (psr_config->display_rotation == ROTATE_270)) {
    3a1a:	78e3      	ldrb	r3, [r4, #3]
    3a1c:	2202      	movs	r2, #2
    3a1e:	4393      	bics	r3, r2
    3a20:	2b01      	cmp	r3, #1
    3a22:	d006      	beq.n	3a32 <uc8151_set_psr_config+0x142>
                uc8151_global_instance.display_width   = 296;
    3a24:	4b0e      	ldr	r3, [pc, #56]	; (3a60 <uc8151_set_psr_config+0x170>)
    3a26:	2294      	movs	r2, #148	; 0x94
    3a28:	0052      	lsls	r2, r2, #1
    3a2a:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 160;
    3a2c:	3a88      	subs	r2, #136	; 0x88
    3a2e:	811a      	strh	r2, [r3, #8]
    3a30:	e771      	b.n	3916 <uc8151_set_psr_config+0x26>
                uc8151_global_instance.display_width   = 160;
    3a32:	4b0b      	ldr	r3, [pc, #44]	; (3a60 <uc8151_set_psr_config+0x170>)
    3a34:	329e      	adds	r2, #158	; 0x9e
    3a36:	80da      	strh	r2, [r3, #6]
                uc8151_global_instance.display_height  = 296;
    3a38:	3288      	adds	r2, #136	; 0x88
    3a3a:	811a      	strh	r2, [r3, #8]
    3a3c:	e76b      	b.n	3916 <uc8151_set_psr_config+0x26>
        case RES_96x230:                eink_data[0] = 0x00; break;
    3a3e:	2300      	movs	r3, #0
    3a40:	466a      	mov	r2, sp
    3a42:	7013      	strb	r3, [r2, #0]
    3a44:	e774      	b.n	3930 <uc8151_set_psr_config+0x40>
        case RES_96x252:                eink_data[0] = 0x01; break;
    3a46:	2301      	movs	r3, #1
    3a48:	466a      	mov	r2, sp
    3a4a:	7013      	strb	r3, [r2, #0]
    3a4c:	e770      	b.n	3930 <uc8151_set_psr_config+0x40>
        case RES_128x296:               eink_data[0] = 0x02; break;
    3a4e:	2302      	movs	r3, #2
    3a50:	466a      	mov	r2, sp
    3a52:	7013      	strb	r3, [r2, #0]
    3a54:	e76c      	b.n	3930 <uc8151_set_psr_config+0x40>
        case RES_160x296:               eink_data[0] = 0x03; break;
    3a56:	2303      	movs	r3, #3
    3a58:	466a      	mov	r2, sp
    3a5a:	7013      	strb	r3, [r2, #0]
    3a5c:	e768      	b.n	3930 <uc8151_set_psr_config+0x40>
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	200003f8 	.word	0x200003f8
    3a64:	0000498d 	.word	0x0000498d
    3a68:	00001c5d 	.word	0x00001c5d

00003a6c <uc8151_set_config>:
{        
    3a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a6e:	46c6      	mov	lr, r8
    3a70:	b500      	push	{lr}
    3a72:	b086      	sub	sp, #24
    3a74:	0004      	movs	r4, r0
    switch(config->power_settings.source_power) {
    3a76:	7943      	ldrb	r3, [r0, #5]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d020      	beq.n	3abe <uc8151_set_config+0x52>
    3a7c:	2b01      	cmp	r3, #1
    3a7e:	d022      	beq.n	3ac6 <uc8151_set_config+0x5a>
    eink_data[0] = eink_data[0] << 1;
    3a80:	aa04      	add	r2, sp, #16
    3a82:	7813      	ldrb	r3, [r2, #0]
    3a84:	005b      	lsls	r3, r3, #1
    3a86:	b2db      	uxtb	r3, r3
    3a88:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.gate_power) {
    3a8a:	79a2      	ldrb	r2, [r4, #6]
    3a8c:	2a01      	cmp	r2, #1
    3a8e:	d102      	bne.n	3a96 <uc8151_set_config+0x2a>
        case GATE_INTERNAL_DC_DC:       eink_data[0] |= 0x01; break;
    3a90:	4313      	orrs	r3, r2
    3a92:	aa04      	add	r2, sp, #16
    3a94:	7013      	strb	r3, [r2, #0]
    switch(config->power_settings.vcom_voltage_level) {
    3a96:	79e3      	ldrb	r3, [r4, #7]
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d018      	beq.n	3ace <uc8151_set_config+0x62>
    3a9c:	2b01      	cmp	r3, #1
    3a9e:	d01a      	beq.n	3ad6 <uc8151_set_config+0x6a>
    eink_data[1] = eink_data[1] << 2;
    3aa0:	aa04      	add	r2, sp, #16
    3aa2:	7853      	ldrb	r3, [r2, #1]
    3aa4:	009b      	lsls	r3, r3, #2
    3aa6:	b2db      	uxtb	r3, r3
    3aa8:	7053      	strb	r3, [r2, #1]
    switch (config->power_settings.vg_voltage_level) {
    3aaa:	7a22      	ldrb	r2, [r4, #8]
    3aac:	2a06      	cmp	r2, #6
    3aae:	d05b      	beq.n	3b68 <uc8151_set_config+0xfc>
    3ab0:	2a07      	cmp	r2, #7
    3ab2:	d05e      	beq.n	3b72 <uc8151_set_config+0x106>
    3ab4:	2a05      	cmp	r2, #5
    3ab6:	d012      	beq.n	3ade <uc8151_set_config+0x72>
    if( (config->power_settings.vg_voltage_level == VGx_17V) | (config->power_settings.vg_voltage_level == VGx_18V) | (config->power_settings.vg_voltage_level == VGx_19V) | (config->power_settings.vg_voltage_level == VGx_20V) )
    3ab8:	2a03      	cmp	r2, #3
    3aba:	d814      	bhi.n	3ae6 <uc8151_set_config+0x7a>
    3abc:	e7fe      	b.n	3abc <uc8151_set_config+0x50>
        case SOURCE_EXTERNAL_POWER:     eink_data[0] = 0x00; break;
    3abe:	2200      	movs	r2, #0
    3ac0:	ab04      	add	r3, sp, #16
    3ac2:	701a      	strb	r2, [r3, #0]
    3ac4:	e7dc      	b.n	3a80 <uc8151_set_config+0x14>
        case SOURCE_INTERNAL_DC_DC:     eink_data[0] = 0x01; break;
    3ac6:	2201      	movs	r2, #1
    3ac8:	ab04      	add	r3, sp, #16
    3aca:	701a      	strb	r2, [r3, #0]
    3acc:	e7d8      	b.n	3a80 <uc8151_set_config+0x14>
        case VCOMx_VDx_DC_VCOMD:        eink_data[1] = 0x00; break;
    3ace:	2200      	movs	r2, #0
    3ad0:	ab04      	add	r3, sp, #16
    3ad2:	705a      	strb	r2, [r3, #1]
    3ad4:	e7e4      	b.n	3aa0 <uc8151_set_config+0x34>
        case VCOMx_VGx:                 eink_data[1] = 0x01; break;
    3ad6:	2201      	movs	r2, #1
    3ad8:	ab04      	add	r3, sp, #16
    3ada:	705a      	strb	r2, [r3, #1]
    3adc:	e7e0      	b.n	3aa0 <uc8151_set_config+0x34>
        case VGx_15V:                   eink_data[1] |= 0x01; break;
    3ade:	2201      	movs	r2, #1
    3ae0:	4313      	orrs	r3, r2
    3ae2:	aa04      	add	r2, sp, #16
    3ae4:	7053      	strb	r3, [r2, #1]
    eink_data[2] = config->power_settings.pwr_vdh_level;
    3ae6:	a904      	add	r1, sp, #16
    3ae8:	7a63      	ldrb	r3, [r4, #9]
    3aea:	708b      	strb	r3, [r1, #2]
    eink_data[3] = config->power_settings.pwr_vdl_level;
    3aec:	7aa3      	ldrb	r3, [r4, #10]
    3aee:	70cb      	strb	r3, [r1, #3]
    eink_data[4] = config->power_settings.pwr_vdhr_level;
    3af0:	7ae3      	ldrb	r3, [r4, #11]
    3af2:	710b      	strb	r3, [r1, #4]
    eink_write_data(UC8151_PWR, eink_data, 5);
    3af4:	2205      	movs	r2, #5
    3af6:	2001      	movs	r0, #1
    3af8:	4dd8      	ldr	r5, [pc, #864]	; (3e5c <uc8151_set_config+0x3f0>)
    3afa:	47a8      	blx	r5
    psr_config = config->panel_settings;
    3afc:	2205      	movs	r2, #5
    3afe:	0021      	movs	r1, r4
    3b00:	a802      	add	r0, sp, #8
    3b02:	4bd7      	ldr	r3, [pc, #860]	; (3e60 <uc8151_set_config+0x3f4>)
    3b04:	4798      	blx	r3
    uc8151_set_psr_config(&psr_config);
    3b06:	a802      	add	r0, sp, #8
    3b08:	4bd6      	ldr	r3, [pc, #856]	; (3e64 <uc8151_set_config+0x3f8>)
    3b0a:	4798      	blx	r3
    eink_write_data(UC8151_PON, 0, 0);
    3b0c:	2200      	movs	r2, #0
    3b0e:	2100      	movs	r1, #0
    3b10:	2004      	movs	r0, #4
    3b12:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER();
    3b14:	4bd4      	ldr	r3, [pc, #848]	; (3e68 <uc8151_set_config+0x3fc>)
    3b16:	4698      	mov	r8, r3
	CRITICAL_SECTION_LEAVE();
    3b18:	4fd4      	ldr	r7, [pc, #848]	; (3e6c <uc8151_set_config+0x400>)
	CRITICAL_SECTION_ENTER();
    3b1a:	4668      	mov	r0, sp
    3b1c:	47c0      	blx	r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3b1e:	23c0      	movs	r3, #192	; 0xc0
    3b20:	05db      	lsls	r3, r3, #23
    3b22:	2680      	movs	r6, #128	; 0x80
    3b24:	599d      	ldr	r5, [r3, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3b26:	22a0      	movs	r2, #160	; 0xa0
    3b28:	49d1      	ldr	r1, [pc, #836]	; (3e70 <uc8151_set_config+0x404>)
    3b2a:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3b2c:	2190      	movs	r1, #144	; 0x90
    3b2e:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3b30:	4053      	eors	r3, r2
    3b32:	401d      	ands	r5, r3
    3b34:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    3b36:	4668      	mov	r0, sp
    3b38:	47b8      	blx	r7
    3b3a:	422e      	tst	r6, r5
    3b3c:	d0ed      	beq.n	3b1a <uc8151_set_config+0xae>
    switch (config->booster_soft_start.a_soft_start_period) {
    3b3e:	7b20      	ldrb	r0, [r4, #12]
    3b40:	2801      	cmp	r0, #1
    3b42:	d01f      	beq.n	3b84 <uc8151_set_config+0x118>
    3b44:	2800      	cmp	r0, #0
    3b46:	d019      	beq.n	3b7c <uc8151_set_config+0x110>
    3b48:	2802      	cmp	r0, #2
    3b4a:	d01f      	beq.n	3b8c <uc8151_set_config+0x120>
    3b4c:	2803      	cmp	r0, #3
    3b4e:	d021      	beq.n	3b94 <uc8151_set_config+0x128>
    eink_data[0] = eink_data[0] << 3;
    3b50:	aa04      	add	r2, sp, #16
    3b52:	7813      	ldrb	r3, [r2, #0]
    3b54:	00db      	lsls	r3, r3, #3
    3b56:	b2db      	uxtb	r3, r3
    3b58:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_drive_strength) {
    3b5a:	7b61      	ldrb	r1, [r4, #13]
    3b5c:	2907      	cmp	r1, #7
    3b5e:	d821      	bhi.n	3ba4 <uc8151_set_config+0x138>
    3b60:	008a      	lsls	r2, r1, #2
    3b62:	4dc4      	ldr	r5, [pc, #784]	; (3e74 <uc8151_set_config+0x408>)
    3b64:	58aa      	ldr	r2, [r5, r2]
    3b66:	4697      	mov	pc, r2
        case VGx_14V:                   eink_data[1] |= 0x02; break;
    3b68:	2202      	movs	r2, #2
    3b6a:	4313      	orrs	r3, r2
    3b6c:	aa04      	add	r2, sp, #16
    3b6e:	7053      	strb	r3, [r2, #1]
    3b70:	e7b9      	b.n	3ae6 <uc8151_set_config+0x7a>
        case VGx_13V:                   eink_data[1] |= 0x03; break;
    3b72:	2203      	movs	r2, #3
    3b74:	4313      	orrs	r3, r2
    3b76:	aa04      	add	r2, sp, #16
    3b78:	7053      	strb	r3, [r2, #1]
    3b7a:	e7b4      	b.n	3ae6 <uc8151_set_config+0x7a>
        case SS_PERIOD_10MS:            eink_data[0] = 0x00; break;
    3b7c:	2200      	movs	r2, #0
    3b7e:	ab04      	add	r3, sp, #16
    3b80:	701a      	strb	r2, [r3, #0]
    3b82:	e7e5      	b.n	3b50 <uc8151_set_config+0xe4>
        case SS_PERIOD_20MS:            eink_data[0] = 0x01; break;
    3b84:	2201      	movs	r2, #1
    3b86:	ab04      	add	r3, sp, #16
    3b88:	701a      	strb	r2, [r3, #0]
    3b8a:	e7e1      	b.n	3b50 <uc8151_set_config+0xe4>
        case SS_PERIOD_30MS:            eink_data[0] = 0x02; break;
    3b8c:	2202      	movs	r2, #2
    3b8e:	ab04      	add	r3, sp, #16
    3b90:	701a      	strb	r2, [r3, #0]
    3b92:	e7dd      	b.n	3b50 <uc8151_set_config+0xe4>
        case SS_PERIOD_40MS:            eink_data[0] = 0x03; break;
    3b94:	2203      	movs	r2, #3
    3b96:	ab04      	add	r3, sp, #16
    3b98:	701a      	strb	r2, [r3, #0]
    3b9a:	e7d9      	b.n	3b50 <uc8151_set_config+0xe4>
        case STRENGTH_2:                eink_data[0] |= 0x01; break;
    3b9c:	2201      	movs	r2, #1
    3b9e:	4313      	orrs	r3, r2
    3ba0:	aa04      	add	r2, sp, #16
    3ba2:	7013      	strb	r3, [r2, #0]
    eink_data[0] = eink_data[0] << 3;
    3ba4:	aa04      	add	r2, sp, #16
    3ba6:	7813      	ldrb	r3, [r2, #0]
    3ba8:	00db      	lsls	r3, r3, #3
    3baa:	b2db      	uxtb	r3, r3
    3bac:	7013      	strb	r3, [r2, #0]
    switch (config->booster_soft_start.a_min_off_time) {
    3bae:	7ba2      	ldrb	r2, [r4, #14]
    3bb0:	2a07      	cmp	r2, #7
    3bb2:	d825      	bhi.n	3c00 <uc8151_set_config+0x194>
    3bb4:	0095      	lsls	r5, r2, #2
    3bb6:	4eb0      	ldr	r6, [pc, #704]	; (3e78 <uc8151_set_config+0x40c>)
    3bb8:	5975      	ldr	r5, [r6, r5]
    3bba:	46af      	mov	pc, r5
        case STRENGTH_3:                eink_data[0] |= 0x02; break;
    3bbc:	2202      	movs	r2, #2
    3bbe:	4313      	orrs	r3, r2
    3bc0:	aa04      	add	r2, sp, #16
    3bc2:	7013      	strb	r3, [r2, #0]
    3bc4:	e7ee      	b.n	3ba4 <uc8151_set_config+0x138>
        case STRENGTH_4:                eink_data[0] |= 0x03; break;
    3bc6:	2203      	movs	r2, #3
    3bc8:	4313      	orrs	r3, r2
    3bca:	aa04      	add	r2, sp, #16
    3bcc:	7013      	strb	r3, [r2, #0]
    3bce:	e7e9      	b.n	3ba4 <uc8151_set_config+0x138>
        case STRENGTH_5:                eink_data[0] |= 0x04; break;
    3bd0:	2204      	movs	r2, #4
    3bd2:	4313      	orrs	r3, r2
    3bd4:	aa04      	add	r2, sp, #16
    3bd6:	7013      	strb	r3, [r2, #0]
    3bd8:	e7e4      	b.n	3ba4 <uc8151_set_config+0x138>
        case STRENGTH_6:                eink_data[0] |= 0x05; break;
    3bda:	2205      	movs	r2, #5
    3bdc:	4313      	orrs	r3, r2
    3bde:	aa04      	add	r2, sp, #16
    3be0:	7013      	strb	r3, [r2, #0]
    3be2:	e7df      	b.n	3ba4 <uc8151_set_config+0x138>
        case STRENGTH_7:                eink_data[0] |= 0x06; break;
    3be4:	2206      	movs	r2, #6
    3be6:	4313      	orrs	r3, r2
    3be8:	aa04      	add	r2, sp, #16
    3bea:	7013      	strb	r3, [r2, #0]
    3bec:	e7da      	b.n	3ba4 <uc8151_set_config+0x138>
        case STRENGTH_8:                eink_data[0] |= 0x07; break;
    3bee:	2207      	movs	r2, #7
    3bf0:	4313      	orrs	r3, r2
    3bf2:	aa04      	add	r2, sp, #16
    3bf4:	7013      	strb	r3, [r2, #0]
    3bf6:	e7d5      	b.n	3ba4 <uc8151_set_config+0x138>
        case MIN_OFF_TIME_340_NS:       eink_data[0] |= 0x01; break;
    3bf8:	2501      	movs	r5, #1
    3bfa:	432b      	orrs	r3, r5
    3bfc:	ad04      	add	r5, sp, #16
    3bfe:	702b      	strb	r3, [r5, #0]
    switch (config->booster_soft_start.a_soft_start_period) {
    3c00:	2801      	cmp	r0, #1
    3c02:	d030      	beq.n	3c66 <uc8151_set_config+0x1fa>
    3c04:	2800      	cmp	r0, #0
    3c06:	d02a      	beq.n	3c5e <uc8151_set_config+0x1f2>
    3c08:	2802      	cmp	r0, #2
    3c0a:	d030      	beq.n	3c6e <uc8151_set_config+0x202>
    3c0c:	2803      	cmp	r0, #3
    3c0e:	d032      	beq.n	3c76 <uc8151_set_config+0x20a>
    eink_data[1] = eink_data[1] << 3;
    3c10:	ab04      	add	r3, sp, #16
    3c12:	785b      	ldrb	r3, [r3, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3c14:	2907      	cmp	r1, #7
    3c16:	d900      	bls.n	3c1a <uc8151_set_config+0x1ae>
    3c18:	e08c      	b.n	3d34 <uc8151_set_config+0x2c8>
    3c1a:	0088      	lsls	r0, r1, #2
    3c1c:	4d97      	ldr	r5, [pc, #604]	; (3e7c <uc8151_set_config+0x410>)
    3c1e:	5828      	ldr	r0, [r5, r0]
    3c20:	4687      	mov	pc, r0
        case MIN_OFF_TIME_400_NS:       eink_data[0] |= 0x02; break;
    3c22:	2502      	movs	r5, #2
    3c24:	432b      	orrs	r3, r5
    3c26:	ad04      	add	r5, sp, #16
    3c28:	702b      	strb	r3, [r5, #0]
    3c2a:	e7e9      	b.n	3c00 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_540_NS:       eink_data[0] |= 0x03; break;
    3c2c:	2503      	movs	r5, #3
    3c2e:	432b      	orrs	r3, r5
    3c30:	ad04      	add	r5, sp, #16
    3c32:	702b      	strb	r3, [r5, #0]
    3c34:	e7e4      	b.n	3c00 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_800_NS:       eink_data[0] |= 0x04; break;
    3c36:	2504      	movs	r5, #4
    3c38:	432b      	orrs	r3, r5
    3c3a:	ad04      	add	r5, sp, #16
    3c3c:	702b      	strb	r3, [r5, #0]
    3c3e:	e7df      	b.n	3c00 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_1540_NS:      eink_data[0] |= 0x05; break;
    3c40:	2505      	movs	r5, #5
    3c42:	432b      	orrs	r3, r5
    3c44:	ad04      	add	r5, sp, #16
    3c46:	702b      	strb	r3, [r5, #0]
    3c48:	e7da      	b.n	3c00 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_3340_NS:      eink_data[0] |= 0x06; break;
    3c4a:	2506      	movs	r5, #6
    3c4c:	432b      	orrs	r3, r5
    3c4e:	ad04      	add	r5, sp, #16
    3c50:	702b      	strb	r3, [r5, #0]
    3c52:	e7d5      	b.n	3c00 <uc8151_set_config+0x194>
        case MIN_OFF_TIME_6580_NS:      eink_data[0] |= 0x07; break;
    3c54:	2507      	movs	r5, #7
    3c56:	432b      	orrs	r3, r5
    3c58:	ad04      	add	r5, sp, #16
    3c5a:	702b      	strb	r3, [r5, #0]
    3c5c:	e7d0      	b.n	3c00 <uc8151_set_config+0x194>
        case SS_PERIOD_10MS:            eink_data[1] = 0x00; break;
    3c5e:	2000      	movs	r0, #0
    3c60:	ab04      	add	r3, sp, #16
    3c62:	7058      	strb	r0, [r3, #1]
    3c64:	e7d4      	b.n	3c10 <uc8151_set_config+0x1a4>
        case SS_PERIOD_20MS:            eink_data[1] = 0x01; break;
    3c66:	2001      	movs	r0, #1
    3c68:	ab04      	add	r3, sp, #16
    3c6a:	7058      	strb	r0, [r3, #1]
    3c6c:	e7d0      	b.n	3c10 <uc8151_set_config+0x1a4>
        case SS_PERIOD_30MS:            eink_data[1] = 0x02; break;
    3c6e:	2002      	movs	r0, #2
    3c70:	ab04      	add	r3, sp, #16
    3c72:	7058      	strb	r0, [r3, #1]
    3c74:	e7cc      	b.n	3c10 <uc8151_set_config+0x1a4>
        case SS_PERIOD_40MS:            eink_data[1] = 0x03; break;
    3c76:	2003      	movs	r0, #3
    3c78:	ab04      	add	r3, sp, #16
    3c7a:	7058      	strb	r0, [r3, #1]
    3c7c:	e7c8      	b.n	3c10 <uc8151_set_config+0x1a4>
    eink_data[1] = eink_data[1] << 3;
    3c7e:	019b      	lsls	r3, r3, #6
    3c80:	2008      	movs	r0, #8
    3c82:	4303      	orrs	r3, r0
    3c84:	b2db      	uxtb	r3, r3
    3c86:	a804      	add	r0, sp, #16
    3c88:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3c8a:	2a07      	cmp	r2, #7
    3c8c:	d900      	bls.n	3c90 <uc8151_set_config+0x224>
    3c8e:	e0bd      	b.n	3e0c <uc8151_set_config+0x3a0>
    3c90:	0090      	lsls	r0, r2, #2
    3c92:	4d7b      	ldr	r5, [pc, #492]	; (3e80 <uc8151_set_config+0x414>)
    3c94:	5828      	ldr	r0, [r5, r0]
    3c96:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3c98:	019b      	lsls	r3, r3, #6
    3c9a:	2010      	movs	r0, #16
    3c9c:	4303      	orrs	r3, r0
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	a804      	add	r0, sp, #16
    3ca2:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3ca4:	2a07      	cmp	r2, #7
    3ca6:	d900      	bls.n	3caa <uc8151_set_config+0x23e>
    3ca8:	e0b4      	b.n	3e14 <uc8151_set_config+0x3a8>
    3caa:	0090      	lsls	r0, r2, #2
    3cac:	4d75      	ldr	r5, [pc, #468]	; (3e84 <uc8151_set_config+0x418>)
    3cae:	5828      	ldr	r0, [r5, r0]
    3cb0:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3cb2:	019b      	lsls	r3, r3, #6
    3cb4:	2018      	movs	r0, #24
    3cb6:	4303      	orrs	r3, r0
    3cb8:	b2db      	uxtb	r3, r3
    3cba:	a804      	add	r0, sp, #16
    3cbc:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3cbe:	2a07      	cmp	r2, #7
    3cc0:	d900      	bls.n	3cc4 <uc8151_set_config+0x258>
    3cc2:	e0ab      	b.n	3e1c <uc8151_set_config+0x3b0>
    3cc4:	0090      	lsls	r0, r2, #2
    3cc6:	4d70      	ldr	r5, [pc, #448]	; (3e88 <uc8151_set_config+0x41c>)
    3cc8:	5828      	ldr	r0, [r5, r0]
    3cca:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3ccc:	019b      	lsls	r3, r3, #6
    3cce:	2020      	movs	r0, #32
    3cd0:	4303      	orrs	r3, r0
    3cd2:	b2db      	uxtb	r3, r3
    3cd4:	a804      	add	r0, sp, #16
    3cd6:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3cd8:	2a07      	cmp	r2, #7
    3cda:	d900      	bls.n	3cde <uc8151_set_config+0x272>
    3cdc:	e0a2      	b.n	3e24 <uc8151_set_config+0x3b8>
    3cde:	0090      	lsls	r0, r2, #2
    3ce0:	4d6a      	ldr	r5, [pc, #424]	; (3e8c <uc8151_set_config+0x420>)
    3ce2:	5828      	ldr	r0, [r5, r0]
    3ce4:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3ce6:	019b      	lsls	r3, r3, #6
    3ce8:	2028      	movs	r0, #40	; 0x28
    3cea:	4303      	orrs	r3, r0
    3cec:	b2db      	uxtb	r3, r3
    3cee:	a804      	add	r0, sp, #16
    3cf0:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3cf2:	2a07      	cmp	r2, #7
    3cf4:	d900      	bls.n	3cf8 <uc8151_set_config+0x28c>
    3cf6:	e099      	b.n	3e2c <uc8151_set_config+0x3c0>
    3cf8:	0090      	lsls	r0, r2, #2
    3cfa:	4d65      	ldr	r5, [pc, #404]	; (3e90 <uc8151_set_config+0x424>)
    3cfc:	5828      	ldr	r0, [r5, r0]
    3cfe:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3d00:	019b      	lsls	r3, r3, #6
    3d02:	2030      	movs	r0, #48	; 0x30
    3d04:	4303      	orrs	r3, r0
    3d06:	b2db      	uxtb	r3, r3
    3d08:	a804      	add	r0, sp, #16
    3d0a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3d0c:	2a07      	cmp	r2, #7
    3d0e:	d900      	bls.n	3d12 <uc8151_set_config+0x2a6>
    3d10:	e090      	b.n	3e34 <uc8151_set_config+0x3c8>
    3d12:	0090      	lsls	r0, r2, #2
    3d14:	4d5f      	ldr	r5, [pc, #380]	; (3e94 <uc8151_set_config+0x428>)
    3d16:	5828      	ldr	r0, [r5, r0]
    3d18:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3d1a:	019b      	lsls	r3, r3, #6
    3d1c:	2038      	movs	r0, #56	; 0x38
    3d1e:	4303      	orrs	r3, r0
    3d20:	b2db      	uxtb	r3, r3
    3d22:	a804      	add	r0, sp, #16
    3d24:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3d26:	2a07      	cmp	r2, #7
    3d28:	d900      	bls.n	3d2c <uc8151_set_config+0x2c0>
    3d2a:	e087      	b.n	3e3c <uc8151_set_config+0x3d0>
    3d2c:	0090      	lsls	r0, r2, #2
    3d2e:	4d5a      	ldr	r5, [pc, #360]	; (3e98 <uc8151_set_config+0x42c>)
    3d30:	5828      	ldr	r0, [r5, r0]
    3d32:	4687      	mov	pc, r0
    eink_data[1] = eink_data[1] << 3;
    3d34:	019b      	lsls	r3, r3, #6
    3d36:	b2db      	uxtb	r3, r3
    3d38:	a804      	add	r0, sp, #16
    3d3a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_min_off_time) {
    3d3c:	2a07      	cmp	r2, #7
    3d3e:	d850      	bhi.n	3de2 <uc8151_set_config+0x376>
    3d40:	0090      	lsls	r0, r2, #2
    3d42:	4d56      	ldr	r5, [pc, #344]	; (3e9c <uc8151_set_config+0x430>)
    3d44:	5828      	ldr	r0, [r5, r0]
    3d46:	4687      	mov	pc, r0
        case MIN_OFF_TIME_340_NS:       eink_data[1] |= 0x01; break;
    3d48:	2001      	movs	r0, #1
    3d4a:	4303      	orrs	r3, r0
    3d4c:	a804      	add	r0, sp, #16
    3d4e:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d50:	2907      	cmp	r1, #7
    3d52:	d900      	bls.n	3d56 <uc8151_set_config+0x2ea>
    3d54:	e0d7      	b.n	3f06 <uc8151_set_config+0x49a>
    3d56:	0089      	lsls	r1, r1, #2
    3d58:	4b51      	ldr	r3, [pc, #324]	; (3ea0 <uc8151_set_config+0x434>)
    3d5a:	585b      	ldr	r3, [r3, r1]
    3d5c:	469f      	mov	pc, r3
        case MIN_OFF_TIME_400_NS:       eink_data[1] |= 0x02; break;
    3d5e:	2002      	movs	r0, #2
    3d60:	4303      	orrs	r3, r0
    3d62:	a804      	add	r0, sp, #16
    3d64:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d66:	2907      	cmp	r1, #7
    3d68:	d900      	bls.n	3d6c <uc8151_set_config+0x300>
    3d6a:	e12c      	b.n	3fc6 <uc8151_set_config+0x55a>
    3d6c:	0089      	lsls	r1, r1, #2
    3d6e:	4b4d      	ldr	r3, [pc, #308]	; (3ea4 <uc8151_set_config+0x438>)
    3d70:	585b      	ldr	r3, [r3, r1]
    3d72:	469f      	mov	pc, r3
        case MIN_OFF_TIME_540_NS:       eink_data[1] |= 0x03; break;
    3d74:	2003      	movs	r0, #3
    3d76:	4303      	orrs	r3, r0
    3d78:	a804      	add	r0, sp, #16
    3d7a:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d7c:	2907      	cmp	r1, #7
    3d7e:	d900      	bls.n	3d82 <uc8151_set_config+0x316>
    3d80:	e12a      	b.n	3fd8 <uc8151_set_config+0x56c>
    3d82:	0089      	lsls	r1, r1, #2
    3d84:	4b48      	ldr	r3, [pc, #288]	; (3ea8 <uc8151_set_config+0x43c>)
    3d86:	585b      	ldr	r3, [r3, r1]
    3d88:	469f      	mov	pc, r3
        case MIN_OFF_TIME_800_NS:       eink_data[1] |= 0x04; break;
    3d8a:	2004      	movs	r0, #4
    3d8c:	4303      	orrs	r3, r0
    3d8e:	a804      	add	r0, sp, #16
    3d90:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3d92:	2907      	cmp	r1, #7
    3d94:	d900      	bls.n	3d98 <uc8151_set_config+0x32c>
    3d96:	e128      	b.n	3fea <uc8151_set_config+0x57e>
    3d98:	0089      	lsls	r1, r1, #2
    3d9a:	4b44      	ldr	r3, [pc, #272]	; (3eac <uc8151_set_config+0x440>)
    3d9c:	585b      	ldr	r3, [r3, r1]
    3d9e:	469f      	mov	pc, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[1] |= 0x05; break;
    3da0:	2005      	movs	r0, #5
    3da2:	4303      	orrs	r3, r0
    3da4:	a804      	add	r0, sp, #16
    3da6:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3da8:	2907      	cmp	r1, #7
    3daa:	d900      	bls.n	3dae <uc8151_set_config+0x342>
    3dac:	e126      	b.n	3ffc <uc8151_set_config+0x590>
    3dae:	0089      	lsls	r1, r1, #2
    3db0:	4b3f      	ldr	r3, [pc, #252]	; (3eb0 <uc8151_set_config+0x444>)
    3db2:	585b      	ldr	r3, [r3, r1]
    3db4:	469f      	mov	pc, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[1] |= 0x06; break;
    3db6:	2006      	movs	r0, #6
    3db8:	4303      	orrs	r3, r0
    3dba:	a804      	add	r0, sp, #16
    3dbc:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3dbe:	2907      	cmp	r1, #7
    3dc0:	d900      	bls.n	3dc4 <uc8151_set_config+0x358>
    3dc2:	e124      	b.n	400e <uc8151_set_config+0x5a2>
    3dc4:	0089      	lsls	r1, r1, #2
    3dc6:	4b3b      	ldr	r3, [pc, #236]	; (3eb4 <uc8151_set_config+0x448>)
    3dc8:	585b      	ldr	r3, [r3, r1]
    3dca:	469f      	mov	pc, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[1] |= 0x07; break;
    3dcc:	2007      	movs	r0, #7
    3dce:	4303      	orrs	r3, r0
    3dd0:	a804      	add	r0, sp, #16
    3dd2:	7043      	strb	r3, [r0, #1]
    switch (config->booster_soft_start.a_drive_strength) {
    3dd4:	2907      	cmp	r1, #7
    3dd6:	d900      	bls.n	3dda <uc8151_set_config+0x36e>
    3dd8:	e122      	b.n	4020 <uc8151_set_config+0x5b4>
    3dda:	0089      	lsls	r1, r1, #2
    3ddc:	4b36      	ldr	r3, [pc, #216]	; (3eb8 <uc8151_set_config+0x44c>)
    3dde:	585b      	ldr	r3, [r3, r1]
    3de0:	469f      	mov	pc, r3
    3de2:	2907      	cmp	r1, #7
    3de4:	d806      	bhi.n	3df4 <uc8151_set_config+0x388>
    3de6:	0089      	lsls	r1, r1, #2
    3de8:	4b34      	ldr	r3, [pc, #208]	; (3ebc <uc8151_set_config+0x450>)
    3dea:	585b      	ldr	r3, [r3, r1]
    3dec:	469f      	mov	pc, r3
        case STRENGTH_1:                eink_data[2] = 0x00; break;
    3dee:	2100      	movs	r1, #0
    3df0:	ab04      	add	r3, sp, #16
    3df2:	7099      	strb	r1, [r3, #2]
    eink_data[2] = eink_data[2] << 3;
    3df4:	a904      	add	r1, sp, #16
    3df6:	788b      	ldrb	r3, [r1, #2]
    3df8:	00db      	lsls	r3, r3, #3
    3dfa:	b2db      	uxtb	r3, r3
    3dfc:	708b      	strb	r3, [r1, #2]
    switch (config->booster_soft_start.a_min_off_time) {
    3dfe:	2a07      	cmp	r2, #7
    3e00:	d900      	bls.n	3e04 <uc8151_set_config+0x398>
    3e02:	e088      	b.n	3f16 <uc8151_set_config+0x4aa>
    3e04:	0092      	lsls	r2, r2, #2
    3e06:	492e      	ldr	r1, [pc, #184]	; (3ec0 <uc8151_set_config+0x454>)
    3e08:	588a      	ldr	r2, [r1, r2]
    3e0a:	4697      	mov	pc, r2
        case STRENGTH_2:                eink_data[2] = 0x01; break;
    3e0c:	2101      	movs	r1, #1
    3e0e:	ab04      	add	r3, sp, #16
    3e10:	7099      	strb	r1, [r3, #2]
    3e12:	e7ef      	b.n	3df4 <uc8151_set_config+0x388>
        case STRENGTH_3:                eink_data[2] = 0x02; break;
    3e14:	2102      	movs	r1, #2
    3e16:	ab04      	add	r3, sp, #16
    3e18:	7099      	strb	r1, [r3, #2]
    3e1a:	e7eb      	b.n	3df4 <uc8151_set_config+0x388>
        case STRENGTH_4:                eink_data[2] = 0x03; break;
    3e1c:	2103      	movs	r1, #3
    3e1e:	ab04      	add	r3, sp, #16
    3e20:	7099      	strb	r1, [r3, #2]
    3e22:	e7e7      	b.n	3df4 <uc8151_set_config+0x388>
        case STRENGTH_5:                eink_data[2] = 0x04; break;
    3e24:	2104      	movs	r1, #4
    3e26:	ab04      	add	r3, sp, #16
    3e28:	7099      	strb	r1, [r3, #2]
    3e2a:	e7e3      	b.n	3df4 <uc8151_set_config+0x388>
        case STRENGTH_6:                eink_data[2] = 0x05; break;
    3e2c:	2105      	movs	r1, #5
    3e2e:	ab04      	add	r3, sp, #16
    3e30:	7099      	strb	r1, [r3, #2]
    3e32:	e7df      	b.n	3df4 <uc8151_set_config+0x388>
        case STRENGTH_7:                eink_data[2] = 0x06; break;
    3e34:	2106      	movs	r1, #6
    3e36:	ab04      	add	r3, sp, #16
    3e38:	7099      	strb	r1, [r3, #2]
    3e3a:	e7db      	b.n	3df4 <uc8151_set_config+0x388>
        case STRENGTH_8:                eink_data[2] = 0x07; break;
    3e3c:	2107      	movs	r1, #7
    3e3e:	ab04      	add	r3, sp, #16
    3e40:	7099      	strb	r1, [r3, #2]
    3e42:	e7d7      	b.n	3df4 <uc8151_set_config+0x388>
        case PFS_1_FRAME:               eink_data[0] = 0x00; break;
    3e44:	2200      	movs	r2, #0
    3e46:	ab04      	add	r3, sp, #16
    3e48:	701a      	strb	r2, [r3, #0]
    3e4a:	e072      	b.n	3f32 <uc8151_set_config+0x4c6>
        case PFS_2_FRAMES:              eink_data[0] = 0x10; break;
    3e4c:	2210      	movs	r2, #16
    3e4e:	ab04      	add	r3, sp, #16
    3e50:	701a      	strb	r2, [r3, #0]
    3e52:	e06e      	b.n	3f32 <uc8151_set_config+0x4c6>
        case PFS_3_FRAMES:              eink_data[0] = 0x20; break;
    3e54:	2220      	movs	r2, #32
    3e56:	ab04      	add	r3, sp, #16
    3e58:	701a      	strb	r2, [r3, #0]
    3e5a:	e06a      	b.n	3f32 <uc8151_set_config+0x4c6>
    3e5c:	00001c5d 	.word	0x00001c5d
    3e60:	0000498d 	.word	0x0000498d
    3e64:	000038f1 	.word	0x000038f1
    3e68:	0000034d 	.word	0x0000034d
    3e6c:	0000035b 	.word	0x0000035b
    3e70:	41004400 	.word	0x41004400
    3e74:	00005260 	.word	0x00005260
    3e78:	00005280 	.word	0x00005280
    3e7c:	000052a0 	.word	0x000052a0
    3e80:	000052c0 	.word	0x000052c0
    3e84:	000052e0 	.word	0x000052e0
    3e88:	00005300 	.word	0x00005300
    3e8c:	00005320 	.word	0x00005320
    3e90:	00005340 	.word	0x00005340
    3e94:	00005360 	.word	0x00005360
    3e98:	00005380 	.word	0x00005380
    3e9c:	000053a0 	.word	0x000053a0
    3ea0:	000053c0 	.word	0x000053c0
    3ea4:	000053e0 	.word	0x000053e0
    3ea8:	00005400 	.word	0x00005400
    3eac:	00005420 	.word	0x00005420
    3eb0:	00005440 	.word	0x00005440
    3eb4:	00005460 	.word	0x00005460
    3eb8:	00005480 	.word	0x00005480
    3ebc:	000054a0 	.word	0x000054a0
    3ec0:	000054c0 	.word	0x000054c0
        case PFS_4_FRAMES:              eink_data[0] = 0x30; break;
    3ec4:	2230      	movs	r2, #48	; 0x30
    3ec6:	ab04      	add	r3, sp, #16
    3ec8:	701a      	strb	r2, [r3, #0]
    3eca:	e032      	b.n	3f32 <uc8151_set_config+0x4c6>
        case INTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x0; break;
    3ecc:	2200      	movs	r2, #0
    3ece:	ab04      	add	r3, sp, #16
    3ed0:	701a      	strb	r2, [r3, #0]
    3ed2:	e038      	b.n	3f46 <uc8151_set_config+0x4da>
        case EXTERNAL_TEMPERATURE_SENSOR: eink_data[0] = 0x1; break;
    3ed4:	2201      	movs	r2, #1
    3ed6:	ab04      	add	r3, sp, #16
    3ed8:	701a      	strb	r2, [r3, #0]
    3eda:	e034      	b.n	3f46 <uc8151_set_config+0x4da>
    } else if((config->temperature_sensor_settings.temperature_offset <= 7) && (config->temperature_sensor_settings.temperature_offset >= 0)) {
    3edc:	b2d1      	uxtb	r1, r2
    3ede:	2907      	cmp	r1, #7
    3ee0:	d803      	bhi.n	3eea <uc8151_set_config+0x47e>
        eink_data[0] |= config->temperature_sensor_settings.temperature_offset;
    3ee2:	4313      	orrs	r3, r2
    3ee4:	aa04      	add	r2, sp, #16
    3ee6:	7013      	strb	r3, [r2, #0]
    3ee8:	e039      	b.n	3f5e <uc8151_set_config+0x4f2>
    } else if(config->temperature_sensor_settings.temperature_offset < -8) {
    3eea:	0011      	movs	r1, r2
    3eec:	3108      	adds	r1, #8
    3eee:	da04      	bge.n	3efa <uc8151_set_config+0x48e>
        eink_data[0] |= 0x8;
    3ef0:	2208      	movs	r2, #8
    3ef2:	4313      	orrs	r3, r2
    3ef4:	aa04      	add	r2, sp, #16
    3ef6:	7013      	strb	r3, [r2, #0]
    3ef8:	e031      	b.n	3f5e <uc8151_set_config+0x4f2>
        eink_data[0] |= (config->temperature_sensor_settings.temperature_offset & 0x0F);
    3efa:	210f      	movs	r1, #15
    3efc:	400a      	ands	r2, r1
    3efe:	4313      	orrs	r3, r2
    3f00:	aa04      	add	r2, sp, #16
    3f02:	7013      	strb	r3, [r2, #0]
    3f04:	e02b      	b.n	3f5e <uc8151_set_config+0x4f2>
    eink_data[2] = eink_data[2] << 3;
    3f06:	ab04      	add	r3, sp, #16
    3f08:	789b      	ldrb	r3, [r3, #2]
    3f0a:	00db      	lsls	r3, r3, #3
    3f0c:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_340_NS:       eink_data[2] |= 0x01; break;
    3f0e:	2201      	movs	r2, #1
    3f10:	4313      	orrs	r3, r2
    3f12:	aa04      	add	r2, sp, #16
    3f14:	7093      	strb	r3, [r2, #2]
    eink_write_data(UC8151_BTST, eink_data, 3);
    3f16:	2203      	movs	r2, #3
    3f18:	a904      	add	r1, sp, #16
    3f1a:	2006      	movs	r0, #6
    3f1c:	4b45      	ldr	r3, [pc, #276]	; (4034 <uc8151_set_config+0x5c8>)
    3f1e:	4798      	blx	r3
    switch (config->power_off_sequence) {
    3f20:	7d23      	ldrb	r3, [r4, #20]
    3f22:	2b01      	cmp	r3, #1
    3f24:	d092      	beq.n	3e4c <uc8151_set_config+0x3e0>
    3f26:	2b00      	cmp	r3, #0
    3f28:	d08c      	beq.n	3e44 <uc8151_set_config+0x3d8>
    3f2a:	2b02      	cmp	r3, #2
    3f2c:	d092      	beq.n	3e54 <uc8151_set_config+0x3e8>
    3f2e:	2b03      	cmp	r3, #3
    3f30:	d0c8      	beq.n	3ec4 <uc8151_set_config+0x458>
    eink_write_data(UC8151_PFS, eink_data, 1);
    3f32:	2201      	movs	r2, #1
    3f34:	a904      	add	r1, sp, #16
    3f36:	2003      	movs	r0, #3
    3f38:	4b3e      	ldr	r3, [pc, #248]	; (4034 <uc8151_set_config+0x5c8>)
    3f3a:	4798      	blx	r3
    switch (config->temperature_sensor_settings.sensor_select) {
    3f3c:	7d63      	ldrb	r3, [r4, #21]
    3f3e:	2b00      	cmp	r3, #0
    3f40:	d0c4      	beq.n	3ecc <uc8151_set_config+0x460>
    3f42:	2b01      	cmp	r3, #1
    3f44:	d0c6      	beq.n	3ed4 <uc8151_set_config+0x468>
    eink_data[0] = eink_data[0] << 4;
    3f46:	ab04      	add	r3, sp, #16
    3f48:	781b      	ldrb	r3, [r3, #0]
    3f4a:	011b      	lsls	r3, r3, #4
    3f4c:	b2db      	uxtb	r3, r3
    if (config->temperature_sensor_settings.temperature_offset > 7) {
    3f4e:	2216      	movs	r2, #22
    3f50:	56a2      	ldrsb	r2, [r4, r2]
    3f52:	2a07      	cmp	r2, #7
    3f54:	ddc2      	ble.n	3edc <uc8151_set_config+0x470>
        eink_data[0] |= 0x7;
    3f56:	2207      	movs	r2, #7
    3f58:	4313      	orrs	r3, r2
    3f5a:	aa04      	add	r2, sp, #16
    3f5c:	7013      	strb	r3, [r2, #0]
    eink_write_data(UC8151_TSE, eink_data, 1);
    3f5e:	ad04      	add	r5, sp, #16
    3f60:	2201      	movs	r2, #1
    3f62:	0029      	movs	r1, r5
    3f64:	2041      	movs	r0, #65	; 0x41
    3f66:	4c33      	ldr	r4, [pc, #204]	; (4034 <uc8151_set_config+0x5c8>)
    3f68:	47a0      	blx	r4
    eink_data[0] = 0x77;
    3f6a:	2377      	movs	r3, #119	; 0x77
    3f6c:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3f6e:	2201      	movs	r2, #1
    3f70:	0029      	movs	r1, r5
    3f72:	2050      	movs	r0, #80	; 0x50
    3f74:	47a0      	blx	r4
    eink_data[0] = 0x22;
    3f76:	2322      	movs	r3, #34	; 0x22
    3f78:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_TCON, eink_data, 1);
    3f7a:	2201      	movs	r2, #1
    3f7c:	0029      	movs	r1, r5
    3f7e:	2060      	movs	r0, #96	; 0x60
    3f80:	47a0      	blx	r4
    eink_data[0] = 0x3C;
    3f82:	233c      	movs	r3, #60	; 0x3c
    3f84:	702b      	strb	r3, [r5, #0]
    eink_write_data(UC8151_CDI, eink_data, 1);
    3f86:	2201      	movs	r2, #1
    3f88:	0029      	movs	r1, r5
    3f8a:	2050      	movs	r0, #80	; 0x50
    3f8c:	47a0      	blx	r4
    eink_write_data(UC8151_POF, 0, 0);
    3f8e:	2200      	movs	r2, #0
    3f90:	2100      	movs	r1, #0
    3f92:	2002      	movs	r0, #2
    3f94:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    3f96:	4f28      	ldr	r7, [pc, #160]	; (4038 <uc8151_set_config+0x5cc>)
	CRITICAL_SECTION_LEAVE();
    3f98:	4e28      	ldr	r6, [pc, #160]	; (403c <uc8151_set_config+0x5d0>)
	CRITICAL_SECTION_ENTER();
    3f9a:	a801      	add	r0, sp, #4
    3f9c:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3f9e:	23c0      	movs	r3, #192	; 0xc0
    3fa0:	05db      	lsls	r3, r3, #23
    3fa2:	2580      	movs	r5, #128	; 0x80
    3fa4:	595c      	ldr	r4, [r3, r5]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3fa6:	22a0      	movs	r2, #160	; 0xa0
    3fa8:	4925      	ldr	r1, [pc, #148]	; (4040 <uc8151_set_config+0x5d4>)
    3faa:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3fac:	2190      	movs	r1, #144	; 0x90
    3fae:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3fb0:	4053      	eors	r3, r2
    3fb2:	401c      	ands	r4, r3
    3fb4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3fb6:	a801      	add	r0, sp, #4
    3fb8:	47b0      	blx	r6
    3fba:	4225      	tst	r5, r4
    3fbc:	d0ed      	beq.n	3f9a <uc8151_set_config+0x52e>
}
    3fbe:	b006      	add	sp, #24
    3fc0:	bc04      	pop	{r2}
    3fc2:	4690      	mov	r8, r2
    3fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eink_data[2] = eink_data[2] << 3;
    3fc6:	ab04      	add	r3, sp, #16
    3fc8:	789b      	ldrb	r3, [r3, #2]
    3fca:	00db      	lsls	r3, r3, #3
    3fcc:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_400_NS:       eink_data[2] |= 0x02; break;
    3fce:	2202      	movs	r2, #2
    3fd0:	4313      	orrs	r3, r2
    3fd2:	aa04      	add	r2, sp, #16
    3fd4:	7093      	strb	r3, [r2, #2]
    3fd6:	e79e      	b.n	3f16 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3fd8:	ab04      	add	r3, sp, #16
    3fda:	789b      	ldrb	r3, [r3, #2]
    3fdc:	00db      	lsls	r3, r3, #3
    3fde:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_540_NS:       eink_data[2] |= 0x03; break;
    3fe0:	2203      	movs	r2, #3
    3fe2:	4313      	orrs	r3, r2
    3fe4:	aa04      	add	r2, sp, #16
    3fe6:	7093      	strb	r3, [r2, #2]
    3fe8:	e795      	b.n	3f16 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3fea:	ab04      	add	r3, sp, #16
    3fec:	789b      	ldrb	r3, [r3, #2]
    3fee:	00db      	lsls	r3, r3, #3
    3ff0:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_800_NS:       eink_data[2] |= 0x04; break;
    3ff2:	2204      	movs	r2, #4
    3ff4:	4313      	orrs	r3, r2
    3ff6:	aa04      	add	r2, sp, #16
    3ff8:	7093      	strb	r3, [r2, #2]
    3ffa:	e78c      	b.n	3f16 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    3ffc:	ab04      	add	r3, sp, #16
    3ffe:	789b      	ldrb	r3, [r3, #2]
    4000:	00db      	lsls	r3, r3, #3
    4002:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_1540_NS:      eink_data[2] |= 0x05; break;
    4004:	2205      	movs	r2, #5
    4006:	4313      	orrs	r3, r2
    4008:	aa04      	add	r2, sp, #16
    400a:	7093      	strb	r3, [r2, #2]
    400c:	e783      	b.n	3f16 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    400e:	ab04      	add	r3, sp, #16
    4010:	789b      	ldrb	r3, [r3, #2]
    4012:	00db      	lsls	r3, r3, #3
    4014:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_3340_NS:      eink_data[2] |= 0x06; break;
    4016:	2206      	movs	r2, #6
    4018:	4313      	orrs	r3, r2
    401a:	aa04      	add	r2, sp, #16
    401c:	7093      	strb	r3, [r2, #2]
    401e:	e77a      	b.n	3f16 <uc8151_set_config+0x4aa>
    eink_data[2] = eink_data[2] << 3;
    4020:	ab04      	add	r3, sp, #16
    4022:	789b      	ldrb	r3, [r3, #2]
    4024:	00db      	lsls	r3, r3, #3
    4026:	b2db      	uxtb	r3, r3
        case MIN_OFF_TIME_6580_NS:      eink_data[2] |= 0x07; break;
    4028:	2207      	movs	r2, #7
    402a:	4313      	orrs	r3, r2
    402c:	aa04      	add	r2, sp, #16
    402e:	7093      	strb	r3, [r2, #2]
    4030:	e771      	b.n	3f16 <uc8151_set_config+0x4aa>
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	00001c5d 	.word	0x00001c5d
    4038:	0000034d 	.word	0x0000034d
    403c:	0000035b 	.word	0x0000035b
    4040:	41004400 	.word	0x41004400

00004044 <gfx_eink_graphics_fill_screen_raw>:
 * \brief Fill display buffers with a single color
 *
 * \param fill_value The pixel value to fill the display buffer with.
 */
void gfx_eink_graphics_fill_screen_raw(uint8_t fill_value)
{
    4044:	b510      	push	{r4, lr}
    4046:	0001      	movs	r1, r0
    /* Fill entire display buffer. */
    memset(ptr_eink_gfx_config->display_buffer_1_ptr, fill_value, ptr_eink_gfx_config->display_buffer_size);
    4048:	4b03      	ldr	r3, [pc, #12]	; (4058 <gfx_eink_graphics_fill_screen_raw+0x14>)
    404a:	681b      	ldr	r3, [r3, #0]
    404c:	689a      	ldr	r2, [r3, #8]
    404e:	6918      	ldr	r0, [r3, #16]
    4050:	4b02      	ldr	r3, [pc, #8]	; (405c <gfx_eink_graphics_fill_screen_raw+0x18>)
    4052:	4798      	blx	r3
}
    4054:	bd10      	pop	{r4, pc}
    4056:	46c0      	nop			; (mov r8, r8)
    4058:	20000430 	.word	0x20000430
    405c:	0000499f 	.word	0x0000499f

00004060 <gfx_eink_graphics_fill_screen>:
 * \param fill_type Selects the color to fill the display buffer with.
 * 
 * \note Selecting FILL_NONE as the color will be ignored.
 */
void gfx_eink_graphics_fill_screen(enum eink_fill_colour fill_color)
{
    4060:	b530      	push	{r4, r5, lr}
    4062:	b083      	sub	sp, #12
    4064:	0004      	movs	r4, r0
    volatile eink_coordinate dx, width_fill;
    volatile eink_coordinate dy, height_fill;
    
    width_fill = ptr_eink_gfx_config->display_width;
    4066:	4b68      	ldr	r3, [pc, #416]	; (4208 <gfx_eink_graphics_fill_screen+0x1a8>)
    4068:	681b      	ldr	r3, [r3, #0]
    406a:	8859      	ldrh	r1, [r3, #2]
    406c:	aa01      	add	r2, sp, #4
    406e:	8011      	strh	r1, [r2, #0]
    height_fill = ptr_eink_gfx_config->display_height;
    4070:	889b      	ldrh	r3, [r3, #4]
    4072:	4669      	mov	r1, sp
    4074:	800b      	strh	r3, [r1, #0]
    
    for(dx = 0; dx < width_fill; dx++) {
    4076:	466b      	mov	r3, sp
    4078:	2100      	movs	r1, #0
    407a:	80d9      	strh	r1, [r3, #6]
    407c:	3306      	adds	r3, #6
    407e:	881b      	ldrh	r3, [r3, #0]
    4080:	8812      	ldrh	r2, [r2, #0]
    4082:	b29b      	uxth	r3, r3
    4084:	4293      	cmp	r3, r2
    4086:	d300      	bcc.n	408a <gfx_eink_graphics_fill_screen+0x2a>
    4088:	e0bb      	b.n	4202 <gfx_eink_graphics_fill_screen+0x1a2>
        for(dy = 0; dy < height_fill; dy++) {
            if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
            {
                switch (fill_color) {
    408a:	0085      	lsls	r5, r0, #2
    408c:	4b5f      	ldr	r3, [pc, #380]	; (420c <gfx_eink_graphics_fill_screen+0x1ac>)
    408e:	469c      	mov	ip, r3
    4090:	4465      	add	r5, ip
    4092:	e0ab      	b.n	41ec <gfx_eink_graphics_fill_screen+0x18c>
    4094:	2c07      	cmp	r4, #7
    4096:	d85a      	bhi.n	414e <gfx_eink_graphics_fill_screen+0xee>
    4098:	682b      	ldr	r3, [r5, #0]
    409a:	469f      	mov	pc, r3
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    409c:	466b      	mov	r3, sp
    409e:	88d8      	ldrh	r0, [r3, #6]
    40a0:	b280      	uxth	r0, r0
    40a2:	466b      	mov	r3, sp
    40a4:	8859      	ldrh	r1, [r3, #2]
    40a6:	b289      	uxth	r1, r1
    40a8:	2200      	movs	r2, #0
    40aa:	4b59      	ldr	r3, [pc, #356]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    40ac:	4798      	blx	r3
    40ae:	e04e      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    40b0:	466b      	mov	r3, sp
    40b2:	88d8      	ldrh	r0, [r3, #6]
    40b4:	b280      	uxth	r0, r0
    40b6:	466b      	mov	r3, sp
    40b8:	8859      	ldrh	r1, [r3, #2]
    40ba:	b289      	uxth	r1, r1
    40bc:	2201      	movs	r2, #1
    40be:	4b54      	ldr	r3, [pc, #336]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    40c0:	4798      	blx	r3
    40c2:	e044      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_YELLOW: gfx_eink_set_pixel(dx, dy, PIXEL_YELLOW); break;
    40c4:	466b      	mov	r3, sp
    40c6:	88d8      	ldrh	r0, [r3, #6]
    40c8:	b280      	uxth	r0, r0
    40ca:	466b      	mov	r3, sp
    40cc:	8859      	ldrh	r1, [r3, #2]
    40ce:	b289      	uxth	r1, r1
    40d0:	2203      	movs	r2, #3
    40d2:	4b4f      	ldr	r3, [pc, #316]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    40d4:	4798      	blx	r3
    40d6:	e03a      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    40d8:	466b      	mov	r3, sp
    40da:	88d8      	ldrh	r0, [r3, #6]
    40dc:	b280      	uxth	r0, r0
    40de:	466b      	mov	r3, sp
    40e0:	8859      	ldrh	r1, [r3, #2]
    40e2:	b289      	uxth	r1, r1
    40e4:	2202      	movs	r2, #2
    40e6:	4b4a      	ldr	r3, [pc, #296]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    40e8:	4798      	blx	r3
    40ea:	e030      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_GREEN:  gfx_eink_set_pixel(dx, dy, PIXEL_GREEN); break;
    40ec:	466b      	mov	r3, sp
    40ee:	88d8      	ldrh	r0, [r3, #6]
    40f0:	b280      	uxth	r0, r0
    40f2:	466b      	mov	r3, sp
    40f4:	8859      	ldrh	r1, [r3, #2]
    40f6:	b289      	uxth	r1, r1
    40f8:	2204      	movs	r2, #4
    40fa:	4b45      	ldr	r3, [pc, #276]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    40fc:	4798      	blx	r3
    40fe:	e026      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_BLUE:   gfx_eink_set_pixel(dx, dy, PIXEL_BLUE); break;
    4100:	466b      	mov	r3, sp
    4102:	88d8      	ldrh	r0, [r3, #6]
    4104:	b280      	uxth	r0, r0
    4106:	466b      	mov	r3, sp
    4108:	8859      	ldrh	r1, [r3, #2]
    410a:	b289      	uxth	r1, r1
    410c:	2205      	movs	r2, #5
    410e:	4b40      	ldr	r3, [pc, #256]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    4110:	4798      	blx	r3
    4112:	e01c      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_ORANGE: gfx_eink_set_pixel(dx, dy, PIXEL_ORANGE); break;
    4114:	466b      	mov	r3, sp
    4116:	88d8      	ldrh	r0, [r3, #6]
    4118:	b280      	uxth	r0, r0
    411a:	466b      	mov	r3, sp
    411c:	8859      	ldrh	r1, [r3, #2]
    411e:	b289      	uxth	r1, r1
    4120:	2206      	movs	r2, #6
    4122:	4b3b      	ldr	r3, [pc, #236]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    4124:	4798      	blx	r3
    4126:	e012      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_CLEAN:  gfx_eink_set_pixel(dx, dy, PIXEL_CLEAN); break;
    4128:	466b      	mov	r3, sp
    412a:	88d8      	ldrh	r0, [r3, #6]
    412c:	b280      	uxth	r0, r0
    412e:	466b      	mov	r3, sp
    4130:	8859      	ldrh	r1, [r3, #2]
    4132:	b289      	uxth	r1, r1
    4134:	2207      	movs	r2, #7
    4136:	4b36      	ldr	r3, [pc, #216]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    4138:	4798      	blx	r3
    413a:	e008      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                }
            } else {
                switch (fill_color) {
                    case FILL_BLACK:  gfx_eink_set_pixel(dx, dy, PIXEL_BLACK); break;
    413c:	466b      	mov	r3, sp
    413e:	88d8      	ldrh	r0, [r3, #6]
    4140:	b280      	uxth	r0, r0
    4142:	466b      	mov	r3, sp
    4144:	8859      	ldrh	r1, [r3, #2]
    4146:	b289      	uxth	r1, r1
    4148:	2200      	movs	r2, #0
    414a:	4b31      	ldr	r3, [pc, #196]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    414c:	4798      	blx	r3
                    case FILL_YELLOW:
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
                }
            }
			
			if((dx == 239) && (dy == 239))
    414e:	466b      	mov	r3, sp
    4150:	3306      	adds	r3, #6
    4152:	881b      	ldrh	r3, [r3, #0]
    4154:	b29b      	uxth	r3, r3
    4156:	2bef      	cmp	r3, #239	; 0xef
    4158:	d02c      	beq.n	41b4 <gfx_eink_graphics_fill_screen+0x154>
        for(dy = 0; dy < height_fill; dy++) {
    415a:	466b      	mov	r3, sp
    415c:	1c9a      	adds	r2, r3, #2
    415e:	885b      	ldrh	r3, [r3, #2]
    4160:	3301      	adds	r3, #1
    4162:	b29b      	uxth	r3, r3
    4164:	8013      	strh	r3, [r2, #0]
    4166:	8813      	ldrh	r3, [r2, #0]
    4168:	466a      	mov	r2, sp
    416a:	8812      	ldrh	r2, [r2, #0]
    416c:	b29b      	uxth	r3, r3
    416e:	4293      	cmp	r3, r2
    4170:	d230      	bcs.n	41d4 <gfx_eink_graphics_fill_screen+0x174>
            if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    4172:	4b25      	ldr	r3, [pc, #148]	; (4208 <gfx_eink_graphics_fill_screen+0x1a8>)
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	781b      	ldrb	r3, [r3, #0]
    4178:	3b06      	subs	r3, #6
    417a:	2b01      	cmp	r3, #1
    417c:	d800      	bhi.n	4180 <gfx_eink_graphics_fill_screen+0x120>
    417e:	e789      	b.n	4094 <gfx_eink_graphics_fill_screen+0x34>
                switch (fill_color) {
    4180:	2c01      	cmp	r4, #1
    4182:	d00d      	beq.n	41a0 <gfx_eink_graphics_fill_screen+0x140>
    4184:	2c00      	cmp	r4, #0
    4186:	d0d9      	beq.n	413c <gfx_eink_graphics_fill_screen+0xdc>
    4188:	2c03      	cmp	r4, #3
    418a:	d8e0      	bhi.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_RED:    gfx_eink_set_pixel(dx, dy, PIXEL_RED); break;
    418c:	466b      	mov	r3, sp
    418e:	88d8      	ldrh	r0, [r3, #6]
    4190:	b280      	uxth	r0, r0
    4192:	466b      	mov	r3, sp
    4194:	8859      	ldrh	r1, [r3, #2]
    4196:	b289      	uxth	r1, r1
    4198:	2202      	movs	r2, #2
    419a:	4b1d      	ldr	r3, [pc, #116]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    419c:	4798      	blx	r3
    419e:	e7d6      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
                    case FILL_WHITE:  gfx_eink_set_pixel(dx, dy, PIXEL_WHITE); break;
    41a0:	466b      	mov	r3, sp
    41a2:	88d8      	ldrh	r0, [r3, #6]
    41a4:	b280      	uxth	r0, r0
    41a6:	466b      	mov	r3, sp
    41a8:	8859      	ldrh	r1, [r3, #2]
    41aa:	b289      	uxth	r1, r1
    41ac:	2201      	movs	r2, #1
    41ae:	4b18      	ldr	r3, [pc, #96]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    41b0:	4798      	blx	r3
    41b2:	e7cc      	b.n	414e <gfx_eink_graphics_fill_screen+0xee>
			if((dx == 239) && (dy == 239))
    41b4:	466b      	mov	r3, sp
    41b6:	3302      	adds	r3, #2
    41b8:	881b      	ldrh	r3, [r3, #0]
    41ba:	b29b      	uxth	r3, r3
    41bc:	2bef      	cmp	r3, #239	; 0xef
    41be:	d1cc      	bne.n	415a <gfx_eink_graphics_fill_screen+0xfa>
			{
				 gfx_eink_set_pixel(dx, dy, PIXEL_WHITE);
    41c0:	466b      	mov	r3, sp
    41c2:	88d8      	ldrh	r0, [r3, #6]
    41c4:	b280      	uxth	r0, r0
    41c6:	466b      	mov	r3, sp
    41c8:	8859      	ldrh	r1, [r3, #2]
    41ca:	b289      	uxth	r1, r1
    41cc:	2201      	movs	r2, #1
    41ce:	4b10      	ldr	r3, [pc, #64]	; (4210 <gfx_eink_graphics_fill_screen+0x1b0>)
    41d0:	4798      	blx	r3
    41d2:	e7c2      	b.n	415a <gfx_eink_graphics_fill_screen+0xfa>
    for(dx = 0; dx < width_fill; dx++) {
    41d4:	466b      	mov	r3, sp
    41d6:	1d9a      	adds	r2, r3, #6
    41d8:	88db      	ldrh	r3, [r3, #6]
    41da:	3301      	adds	r3, #1
    41dc:	b29b      	uxth	r3, r3
    41de:	8013      	strh	r3, [r2, #0]
    41e0:	8813      	ldrh	r3, [r2, #0]
    41e2:	aa01      	add	r2, sp, #4
    41e4:	8812      	ldrh	r2, [r2, #0]
    41e6:	b29b      	uxth	r3, r3
    41e8:	4293      	cmp	r3, r2
    41ea:	d20a      	bcs.n	4202 <gfx_eink_graphics_fill_screen+0x1a2>
        for(dy = 0; dy < height_fill; dy++) {
    41ec:	466b      	mov	r3, sp
    41ee:	2200      	movs	r2, #0
    41f0:	805a      	strh	r2, [r3, #2]
    41f2:	3302      	adds	r3, #2
    41f4:	881b      	ldrh	r3, [r3, #0]
    41f6:	466a      	mov	r2, sp
    41f8:	8812      	ldrh	r2, [r2, #0]
    41fa:	b29b      	uxth	r3, r3
    41fc:	4293      	cmp	r3, r2
    41fe:	d3b8      	bcc.n	4172 <gfx_eink_graphics_fill_screen+0x112>
    4200:	e7e8      	b.n	41d4 <gfx_eink_graphics_fill_screen+0x174>
			}
        }
    }
}
    4202:	b003      	add	sp, #12
    4204:	bd30      	pop	{r4, r5, pc}
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	20000430 	.word	0x20000430
    420c:	000054e0 	.word	0x000054e0
    4210:	00000595 	.word	0x00000595

00004214 <gfx_eink_graphics_draw_rect>:
 * \param fill_type Color of the rectangle fill.
 *
 * \note Both the border and the fill can be set to blank should you want a border-less or empty rectangle.
 */
void gfx_eink_graphics_draw_rect(eink_coordinate x0, eink_coordinate y0, eink_coordinate width, eink_coordinate height, enum eink_pixel_colour line_colour, enum eink_fill_colour fill_colour)
{
    4214:	b5f0      	push	{r4, r5, r6, r7, lr}
    4216:	46de      	mov	lr, fp
    4218:	4657      	mov	r7, sl
    421a:	464e      	mov	r6, r9
    421c:	4645      	mov	r5, r8
    421e:	b5e0      	push	{r5, r6, r7, lr}
    4220:	b085      	sub	sp, #20
    4222:	0007      	movs	r7, r0
    4224:	9001      	str	r0, [sp, #4]
    4226:	4688      	mov	r8, r1
    4228:	9203      	str	r2, [sp, #12]
    422a:	469b      	mov	fp, r3
    422c:	ab0e      	add	r3, sp, #56	; 0x38
    422e:	781e      	ldrb	r6, [r3, #0]
    4230:	ab0f      	add	r3, sp, #60	; 0x3c
    4232:	781c      	ldrb	r4, [r3, #0]
    eink_coordinate i, j;
    
    /* Draw rectangle borders first */
    for (i = x0; i < (x0+width); i++) {
    4234:	4691      	mov	r9, r2
    4236:	4684      	mov	ip, r0
    4238:	44e1      	add	r9, ip
    423a:	4548      	cmp	r0, r9
    423c:	da1b      	bge.n	4276 <gfx_eink_graphics_draw_rect+0x62>
        gfx_eink_set_pixel(i, y0, line_colour);
    423e:	4d5a      	ldr	r5, [pc, #360]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    4240:	465b      	mov	r3, fp
    4242:	3b01      	subs	r3, #1
    4244:	4443      	add	r3, r8
    4246:	b29b      	uxth	r3, r3
    4248:	9302      	str	r3, [sp, #8]
    424a:	9600      	str	r6, [sp, #0]
    424c:	464e      	mov	r6, r9
    424e:	0023      	movs	r3, r4
    4250:	000c      	movs	r4, r1
    4252:	4698      	mov	r8, r3
        gfx_eink_set_pixel(i, y0, line_colour);
    4254:	9a00      	ldr	r2, [sp, #0]
    4256:	0021      	movs	r1, r4
    4258:	0038      	movs	r0, r7
    425a:	47a8      	blx	r5
        gfx_eink_set_pixel(i, (y0 + height - 1), line_colour);
    425c:	9a00      	ldr	r2, [sp, #0]
    425e:	9902      	ldr	r1, [sp, #8]
    4260:	0038      	movs	r0, r7
    4262:	47a8      	blx	r5
    for (i = x0; i < (x0+width); i++) {
    4264:	3701      	adds	r7, #1
    4266:	b2bf      	uxth	r7, r7
    4268:	42b7      	cmp	r7, r6
    426a:	dbf3      	blt.n	4254 <gfx_eink_graphics_draw_rect+0x40>
    426c:	46b1      	mov	r9, r6
    426e:	9e00      	ldr	r6, [sp, #0]
    4270:	4643      	mov	r3, r8
    4272:	46a0      	mov	r8, r4
    4274:	001c      	movs	r4, r3
    }
    for (i = y0; i < (y0+height); i++) {
    4276:	46da      	mov	sl, fp
    4278:	44c2      	add	sl, r8
    427a:	45d0      	cmp	r8, sl
    427c:	da1a      	bge.n	42b4 <gfx_eink_graphics_draw_rect+0xa0>
    427e:	4645      	mov	r5, r8
        gfx_eink_set_pixel(x0, i, line_colour);
    4280:	4f49      	ldr	r7, [pc, #292]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    4282:	9b03      	ldr	r3, [sp, #12]
    4284:	3b01      	subs	r3, #1
    4286:	9a01      	ldr	r2, [sp, #4]
    4288:	4694      	mov	ip, r2
    428a:	4463      	add	r3, ip
    428c:	b29b      	uxth	r3, r3
    428e:	9300      	str	r3, [sp, #0]
    4290:	0023      	movs	r3, r4
    4292:	4654      	mov	r4, sl
    4294:	469a      	mov	sl, r3
        gfx_eink_set_pixel(x0, i, line_colour);
    4296:	0032      	movs	r2, r6
    4298:	0029      	movs	r1, r5
    429a:	9801      	ldr	r0, [sp, #4]
    429c:	47b8      	blx	r7
        gfx_eink_set_pixel((x0 + width - 1), i, line_colour);
    429e:	0032      	movs	r2, r6
    42a0:	0029      	movs	r1, r5
    42a2:	9800      	ldr	r0, [sp, #0]
    42a4:	47b8      	blx	r7
    for (i = y0; i < (y0+height); i++) {
    42a6:	3501      	adds	r5, #1
    42a8:	b2ad      	uxth	r5, r5
    42aa:	42a5      	cmp	r5, r4
    42ac:	dbf3      	blt.n	4296 <gfx_eink_graphics_draw_rect+0x82>
    42ae:	4653      	mov	r3, sl
    42b0:	46a2      	mov	sl, r4
    42b2:	001c      	movs	r4, r3
    }
    
    /* Add a fill if necessary */
    if (fill_colour != FILL_NONE) {
    42b4:	2c08      	cmp	r4, #8
    42b6:	d06f      	beq.n	4398 <gfx_eink_graphics_draw_rect+0x184>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    42b8:	9d01      	ldr	r5, [sp, #4]
    42ba:	3501      	adds	r5, #1
    42bc:	b2ad      	uxth	r5, r5
    42be:	2301      	movs	r3, #1
    42c0:	425b      	negs	r3, r3
    42c2:	469c      	mov	ip, r3
    42c4:	44e1      	add	r9, ip
    42c6:	454d      	cmp	r5, r9
    42c8:	da66      	bge.n	4398 <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
                {
                    switch (fill_colour) {
    42ca:	00a3      	lsls	r3, r4, #2
    42cc:	4a37      	ldr	r2, [pc, #220]	; (43ac <gfx_eink_graphics_draw_rect+0x198>)
    42ce:	4693      	mov	fp, r2
    42d0:	449b      	add	fp, r3
    42d2:	e059      	b.n	4388 <gfx_eink_graphics_draw_rect+0x174>
    42d4:	2c07      	cmp	r4, #7
    42d6:	d837      	bhi.n	4348 <gfx_eink_graphics_draw_rect+0x134>
    42d8:	465b      	mov	r3, fp
    42da:	681b      	ldr	r3, [r3, #0]
    42dc:	469f      	mov	pc, r3
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    42de:	2200      	movs	r2, #0
    42e0:	0031      	movs	r1, r6
    42e2:	0028      	movs	r0, r5
    42e4:	4b30      	ldr	r3, [pc, #192]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    42e6:	4798      	blx	r3
    42e8:	e02e      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    42ea:	2201      	movs	r2, #1
    42ec:	0031      	movs	r1, r6
    42ee:	0028      	movs	r0, r5
    42f0:	4b2d      	ldr	r3, [pc, #180]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    42f2:	4798      	blx	r3
    42f4:	e028      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_YELLOW: gfx_eink_set_pixel(i, j, PIXEL_YELLOW); break;
    42f6:	2203      	movs	r2, #3
    42f8:	0031      	movs	r1, r6
    42fa:	0028      	movs	r0, r5
    42fc:	4b2a      	ldr	r3, [pc, #168]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    42fe:	4798      	blx	r3
    4300:	e022      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    4302:	2202      	movs	r2, #2
    4304:	0031      	movs	r1, r6
    4306:	0028      	movs	r0, r5
    4308:	4b27      	ldr	r3, [pc, #156]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    430a:	4798      	blx	r3
    430c:	e01c      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_GREEN:  gfx_eink_set_pixel(i, j, PIXEL_GREEN); break;
    430e:	2204      	movs	r2, #4
    4310:	0031      	movs	r1, r6
    4312:	0028      	movs	r0, r5
    4314:	4b24      	ldr	r3, [pc, #144]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    4316:	4798      	blx	r3
    4318:	e016      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_BLUE:   gfx_eink_set_pixel(i, j, PIXEL_BLUE); break;
    431a:	2205      	movs	r2, #5
    431c:	0031      	movs	r1, r6
    431e:	0028      	movs	r0, r5
    4320:	4b21      	ldr	r3, [pc, #132]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    4322:	4798      	blx	r3
    4324:	e010      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_ORANGE: gfx_eink_set_pixel(i, j, PIXEL_ORANGE); break;
    4326:	2206      	movs	r2, #6
    4328:	0031      	movs	r1, r6
    432a:	0028      	movs	r0, r5
    432c:	4b1e      	ldr	r3, [pc, #120]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    432e:	4798      	blx	r3
    4330:	e00a      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_CLEAN:  gfx_eink_set_pixel(i, j, PIXEL_CLEAN); break;
    4332:	2207      	movs	r2, #7
    4334:	0031      	movs	r1, r6
    4336:	0028      	movs	r0, r5
    4338:	4b1b      	ldr	r3, [pc, #108]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    433a:	4798      	blx	r3
    433c:	e004      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                    }
                } else {
                    switch (fill_colour) {
                        case FILL_BLACK:  gfx_eink_set_pixel(i, j, PIXEL_BLACK); break;
    433e:	2200      	movs	r2, #0
    4340:	0031      	movs	r1, r6
    4342:	0028      	movs	r0, r5
    4344:	4b18      	ldr	r3, [pc, #96]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    4346:	4798      	blx	r3
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    4348:	3601      	adds	r6, #1
    434a:	b2b6      	uxth	r6, r6
    434c:	42be      	cmp	r6, r7
    434e:	da17      	bge.n	4380 <gfx_eink_graphics_draw_rect+0x16c>
                if((ptr_eink_gfx_config->gfx_display == GFX_AC057TC1) || (ptr_eink_gfx_config->gfx_display == GFX_AC040TC1))
    4350:	4b17      	ldr	r3, [pc, #92]	; (43b0 <gfx_eink_graphics_draw_rect+0x19c>)
    4352:	681b      	ldr	r3, [r3, #0]
    4354:	781b      	ldrb	r3, [r3, #0]
    4356:	3b06      	subs	r3, #6
    4358:	2b01      	cmp	r3, #1
    435a:	d9bb      	bls.n	42d4 <gfx_eink_graphics_draw_rect+0xc0>
                    switch (fill_colour) {
    435c:	2c01      	cmp	r4, #1
    435e:	d009      	beq.n	4374 <gfx_eink_graphics_draw_rect+0x160>
    4360:	2c00      	cmp	r4, #0
    4362:	d0ec      	beq.n	433e <gfx_eink_graphics_draw_rect+0x12a>
    4364:	2c03      	cmp	r4, #3
    4366:	d8ef      	bhi.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
                        case FILL_YELLOW:
                        case FILL_RED:    gfx_eink_set_pixel(i, j, PIXEL_RED); break;
    4368:	2202      	movs	r2, #2
    436a:	0031      	movs	r1, r6
    436c:	0028      	movs	r0, r5
    436e:	4b0e      	ldr	r3, [pc, #56]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    4370:	4798      	blx	r3
    4372:	e7e9      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
                        case FILL_WHITE:  gfx_eink_set_pixel(i, j, PIXEL_WHITE); break;
    4374:	2201      	movs	r2, #1
    4376:	0031      	movs	r1, r6
    4378:	0028      	movs	r0, r5
    437a:	4b0b      	ldr	r3, [pc, #44]	; (43a8 <gfx_eink_graphics_draw_rect+0x194>)
    437c:	4798      	blx	r3
    437e:	e7e3      	b.n	4348 <gfx_eink_graphics_draw_rect+0x134>
        for (i = (x0 + 1); i < (x0 + width - 1); i++) {
    4380:	3501      	adds	r5, #1
    4382:	b2ad      	uxth	r5, r5
    4384:	454d      	cmp	r5, r9
    4386:	da07      	bge.n	4398 <gfx_eink_graphics_draw_rect+0x184>
            for (j = (y0 + 1); j < (y0 + height - 1); j++) {
    4388:	4643      	mov	r3, r8
    438a:	1c5e      	adds	r6, r3, #1
    438c:	b2b6      	uxth	r6, r6
    438e:	4653      	mov	r3, sl
    4390:	1e5f      	subs	r7, r3, #1
    4392:	42be      	cmp	r6, r7
    4394:	dbdc      	blt.n	4350 <gfx_eink_graphics_draw_rect+0x13c>
    4396:	e7f3      	b.n	4380 <gfx_eink_graphics_draw_rect+0x16c>
                    }
                }
            }
        }
    }
}
    4398:	b005      	add	sp, #20
    439a:	bc3c      	pop	{r2, r3, r4, r5}
    439c:	4690      	mov	r8, r2
    439e:	4699      	mov	r9, r3
    43a0:	46a2      	mov	sl, r4
    43a2:	46ab      	mov	fp, r5
    43a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	00000595 	.word	0x00000595
    43ac:	00005500 	.word	0x00005500
    43b0:	20000430 	.word	0x20000430

000043b4 <_gfx_eink_text_write_character>:
 * \param text_colour Color of character.
 * \param text_colour_value Pixel value of character.
 * \param eink_font Font structure to use. 
 */
void _gfx_eink_text_write_character(char character, eink_coordinate start_x, eink_coordinate start_y, uint8_t colour_raw, enum eink_pixel_colour text_colour, uint8_t text_colour_value, struct gfx_eink_font eink_font)
{
    43b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b6:	46de      	mov	lr, fp
    43b8:	4657      	mov	r7, sl
    43ba:	464e      	mov	r6, r9
    43bc:	4645      	mov	r5, r8
    43be:	b5e0      	push	{r5, r6, r7, lr}
    43c0:	b08f      	sub	sp, #60	; 0x3c
    43c2:	4694      	mov	ip, r2
    43c4:	9202      	str	r2, [sp, #8]
    43c6:	4698      	mov	r8, r3
    43c8:	ab18      	add	r3, sp, #96	; 0x60
    43ca:	781b      	ldrb	r3, [r3, #0]
    43cc:	9300      	str	r3, [sp, #0]
    43ce:	ab19      	add	r3, sp, #100	; 0x64
    43d0:	781b      	ldrb	r3, [r3, #0]
    43d2:	9301      	str	r3, [sp, #4]
    43d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    43d6:	ab1a      	add	r3, sp, #104	; 0x68
    43d8:	7b5d      	ldrb	r5, [r3, #13]
    43da:	7b9e      	ldrb	r6, [r3, #14]
    43dc:	46b1      	mov	r9, r6
    43de:	7bde      	ldrb	r6, [r3, #15]
    volatile eink_coordinate current_y, send_y;
    
    uint8_t *font_character_size_map_ptr;
    uint8_t *font_array_ptr;
    
    current_x = start_x;
    43e0:	af04      	add	r7, sp, #16
    43e2:	80f9      	strh	r1, [r7, #6]
    current_y = start_y;
    43e4:	1cba      	adds	r2, r7, #2
    43e6:	4661      	mov	r1, ip
    43e8:	8011      	strh	r1, [r2, #0]
    
    /* Get the index of the start of the character in the font array */
    start_font_index = 0;
    43ea:	2200      	movs	r2, #0
    43ec:	920a      	str	r2, [sp, #40]	; 0x28
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    current_char_index = character - eink_font.font_starting_ascii_char;
    43ee:	7b1b      	ldrb	r3, [r3, #12]
    43f0:	1ac0      	subs	r0, r0, r3
    43f2:	900b      	str	r0, [sp, #44]	; 0x2c
    for(i = 0; i < current_char_index; i++) {
    43f4:	9208      	str	r2, [sp, #32]
    43f6:	9a08      	ldr	r2, [sp, #32]
    43f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    43fa:	429a      	cmp	r2, r3
    43fc:	d237      	bcs.n	446e <_gfx_eink_text_write_character+0xba>
    43fe:	0021      	movs	r1, r4
        start_font_index += (*font_character_size_map_ptr * eink_font.font_height_bytes);
    4400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4402:	780b      	ldrb	r3, [r1, #0]
    4404:	436b      	muls	r3, r5
    4406:	189b      	adds	r3, r3, r2
    4408:	930a      	str	r3, [sp, #40]	; 0x28
        font_character_size_map_ptr++;
    440a:	3101      	adds	r1, #1
    for(i = 0; i < current_char_index; i++) {
    440c:	9b08      	ldr	r3, [sp, #32]
    440e:	3301      	adds	r3, #1
    4410:	9308      	str	r3, [sp, #32]
    4412:	9a08      	ldr	r2, [sp, #32]
    4414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4416:	429a      	cmp	r2, r3
    4418:	d3f2      	bcc.n	4400 <_gfx_eink_text_write_character+0x4c>
    }
    
    /* Ensure the chosen character is still in the font array */
    if( (start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) ) < (eink_font.font_array_size + (eink_font.font_character_size_map_ptr[current_char_index] * eink_font.font_height_bytes) )) {
    441a:	780a      	ldrb	r2, [r1, #0]
    441c:	436a      	muls	r2, r5
    441e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4422:	1851      	adds	r1, r2, r1
    4424:	5ce3      	ldrb	r3, [r4, r3]
    4426:	436b      	muls	r3, r5
    4428:	981b      	ldr	r0, [sp, #108]	; 0x6c
    442a:	4684      	mov	ip, r0
    442c:	4463      	add	r3, ip
    442e:	4299      	cmp	r1, r3
    4430:	d300      	bcc.n	4434 <_gfx_eink_text_write_character+0x80>
    4432:	e0ea      	b.n	460a <_gfx_eink_text_write_character+0x256>
        
        /* Move the pointer to the character starting byte */
        font_array_ptr = (uint8_t*) eink_font.font_array_ptr;
    4434:	9c1a      	ldr	r4, [sp, #104]	; 0x68
        if(ptr_eink_gfx_config->gfx_display == GFX_IT8951)
    4436:	4b78      	ldr	r3, [pc, #480]	; (4618 <_gfx_eink_text_write_character+0x264>)
    4438:	681b      	ldr	r3, [r3, #0]
    443a:	781b      	ldrb	r3, [r3, #0]
    443c:	2b0a      	cmp	r3, #10
    443e:	d018      	beq.n	4472 <_gfx_eink_text_write_character+0xbe>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
        else
            font_array_ptr += start_font_index;
    4440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4442:	18e4      	adds	r4, r4, r3
    
       /**
        * Loop horizontally through the columns of the font first,
        * then loop vertically through each row of the font (bit by bit)
        */
        j = 0;
    4444:	2300      	movs	r3, #0
    4446:	9307      	str	r3, [sp, #28]
        end_font_index = start_font_index + (*font_character_size_map_ptr * eink_font.font_height_bytes) - 1;
    4448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    444a:	3b01      	subs	r3, #1
    444c:	189a      	adds	r2, r3, r2
    444e:	9209      	str	r2, [sp, #36]	; 0x24
        for (i = start_font_index; i <= end_font_index; i++) {
    4450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4452:	9308      	str	r3, [sp, #32]
    4454:	9a08      	ldr	r2, [sp, #32]
    4456:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4458:	429a      	cmp	r2, r3
    445a:	d900      	bls.n	445e <_gfx_eink_text_write_character+0xaa>
    445c:	e0d5      	b.n	460a <_gfx_eink_text_write_character+0x256>
            j++;
            current_y += 8;
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
            else font_array_ptr += sizeof(uint8_t);
            
            if(j == eink_font.font_height_bytes) {
    445e:	46aa      	mov	sl, r5
                j = 0;
                current_y = start_y;
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    4460:	006b      	lsls	r3, r5, #1
    4462:	9303      	str	r3, [sp, #12]
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    4464:	4b6d      	ldr	r3, [pc, #436]	; (461c <_gfx_eink_text_write_character+0x268>)
    4466:	469b      	mov	fp, r3
                    send_y = (current_y + (m));
    4468:	ab04      	add	r3, sp, #16
    446a:	1c9d      	adds	r5, r3, #2
    446c:	e0a3      	b.n	45b6 <_gfx_eink_text_write_character+0x202>
    font_character_size_map_ptr = eink_font.font_character_size_map_ptr;
    446e:	0021      	movs	r1, r4
    4470:	e7d3      	b.n	441a <_gfx_eink_text_write_character+0x66>
            font_array_ptr += ((start_font_index - 1) + (sizeof(uint8_t) * (eink_font.font_height_bytes)));
    4472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4474:	3b01      	subs	r3, #1
    4476:	195b      	adds	r3, r3, r5
    4478:	18e4      	adds	r4, r4, r3
    447a:	e7e3      	b.n	4444 <_gfx_eink_text_write_character+0x90>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    447c:	464b      	mov	r3, r9
    447e:	2b01      	cmp	r3, #1
    4480:	d009      	beq.n	4496 <_gfx_eink_text_write_character+0xe2>
                m = 0;
    4482:	2300      	movs	r3, #0
    4484:	9306      	str	r3, [sp, #24]
                for (k = 8; k > 0; k--) {
    4486:	3308      	adds	r3, #8
    4488:	930d      	str	r3, [sp, #52]	; 0x34
    448a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    448c:	2b00      	cmp	r3, #0
    448e:	d100      	bne.n	4492 <_gfx_eink_text_write_character+0xde>
    4490:	e07a      	b.n	4588 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    4492:	2701      	movs	r7, #1
    4494:	e051      	b.n	453a <_gfx_eink_text_write_character+0x186>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    4496:	4b60      	ldr	r3, [pc, #384]	; (4618 <_gfx_eink_text_write_character+0x264>)
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	781b      	ldrb	r3, [r3, #0]
    449c:	2b0a      	cmp	r3, #10
    449e:	d1f0      	bne.n	4482 <_gfx_eink_text_write_character+0xce>
    44a0:	e093      	b.n	45ca <_gfx_eink_text_write_character+0x216>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    44a2:	2e00      	cmp	r6, #0
    44a4:	d125      	bne.n	44f2 <_gfx_eink_text_write_character+0x13e>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    44a6:	4643      	mov	r3, r8
    44a8:	2b00      	cmp	r3, #0
    44aa:	d128      	bne.n	44fe <_gfx_eink_text_write_character+0x14a>
    44ac:	ab05      	add	r3, sp, #20
    44ae:	8818      	ldrh	r0, [r3, #0]
    44b0:	b280      	uxth	r0, r0
    44b2:	ab04      	add	r3, sp, #16
    44b4:	8819      	ldrh	r1, [r3, #0]
    44b6:	b289      	uxth	r1, r1
    44b8:	9a00      	ldr	r2, [sp, #0]
    44ba:	4b59      	ldr	r3, [pc, #356]	; (4620 <_gfx_eink_text_write_character+0x26c>)
    44bc:	4798      	blx	r3
                for (k = 0; k < 8; k++) {
    44be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    44c0:	3301      	adds	r3, #1
    44c2:	930d      	str	r3, [sp, #52]	; 0x34
    44c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    44c6:	2b07      	cmp	r3, #7
    44c8:	d85e      	bhi.n	4588 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    44ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    44cc:	7823      	ldrb	r3, [r4, #0]
    44ce:	4113      	asrs	r3, r2
    44d0:	403b      	ands	r3, r7
    44d2:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    44d4:	ab04      	add	r3, sp, #16
    44d6:	3306      	adds	r3, #6
    44d8:	881b      	ldrh	r3, [r3, #0]
    44da:	b29b      	uxth	r3, r3
    44dc:	aa05      	add	r2, sp, #20
    44de:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + k);
    44e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    44e2:	882b      	ldrh	r3, [r5, #0]
    44e4:	189b      	adds	r3, r3, r2
    44e6:	b29b      	uxth	r3, r3
    44e8:	aa04      	add	r2, sp, #16
    44ea:	8013      	strh	r3, [r2, #0]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    44ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    44ee:	2b01      	cmp	r3, #1
    44f0:	d0d7      	beq.n	44a2 <_gfx_eink_text_write_character+0xee>
    44f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    44f4:	2b00      	cmp	r3, #0
    44f6:	d1e2      	bne.n	44be <_gfx_eink_text_write_character+0x10a>
    44f8:	2e01      	cmp	r6, #1
    44fa:	d1e0      	bne.n	44be <_gfx_eink_text_write_character+0x10a>
    44fc:	e7d3      	b.n	44a6 <_gfx_eink_text_write_character+0xf2>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    44fe:	ab05      	add	r3, sp, #20
    4500:	8818      	ldrh	r0, [r3, #0]
    4502:	b280      	uxth	r0, r0
    4504:	ab04      	add	r3, sp, #16
    4506:	8819      	ldrh	r1, [r3, #0]
    4508:	b289      	uxth	r1, r1
    450a:	9a01      	ldr	r2, [sp, #4]
    450c:	4b43      	ldr	r3, [pc, #268]	; (461c <_gfx_eink_text_write_character+0x268>)
    450e:	4798      	blx	r3
    4510:	e7d5      	b.n	44be <_gfx_eink_text_write_character+0x10a>
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    4512:	2e00      	cmp	r6, #0
    4514:	d129      	bne.n	456a <_gfx_eink_text_write_character+0x1b6>
                        if(!colour_raw) gfx_eink_set_pixel(send_x, send_y, text_colour);
    4516:	4643      	mov	r3, r8
    4518:	2b00      	cmp	r3, #0
    451a:	d12c      	bne.n	4576 <_gfx_eink_text_write_character+0x1c2>
    451c:	ab05      	add	r3, sp, #20
    451e:	8818      	ldrh	r0, [r3, #0]
    4520:	b280      	uxth	r0, r0
    4522:	ab04      	add	r3, sp, #16
    4524:	8819      	ldrh	r1, [r3, #0]
    4526:	b289      	uxth	r1, r1
    4528:	9a00      	ldr	r2, [sp, #0]
    452a:	4b3d      	ldr	r3, [pc, #244]	; (4620 <_gfx_eink_text_write_character+0x26c>)
    452c:	4798      	blx	r3
                for (k = 8; k > 0; k--) {
    452e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4530:	3b01      	subs	r3, #1
    4532:	930d      	str	r3, [sp, #52]	; 0x34
    4534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4536:	2b00      	cmp	r3, #0
    4538:	d026      	beq.n	4588 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> (k-1)) & 0x1);
    453a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    453c:	7823      	ldrb	r3, [r4, #0]
    453e:	3a01      	subs	r2, #1
    4540:	4113      	asrs	r3, r2
    4542:	403b      	ands	r3, r7
    4544:	930c      	str	r3, [sp, #48]	; 0x30
                    send_x = current_x;
    4546:	ab04      	add	r3, sp, #16
    4548:	3306      	adds	r3, #6
    454a:	881b      	ldrh	r3, [r3, #0]
    454c:	b29b      	uxth	r3, r3
    454e:	aa05      	add	r2, sp, #20
    4550:	8013      	strh	r3, [r2, #0]
                    send_y = (current_y + (m));
    4552:	9a06      	ldr	r2, [sp, #24]
    4554:	882b      	ldrh	r3, [r5, #0]
    4556:	189b      	adds	r3, r3, r2
    4558:	b29b      	uxth	r3, r3
    455a:	aa04      	add	r2, sp, #16
    455c:	8013      	strh	r3, [r2, #0]
                    m++;
    455e:	9b06      	ldr	r3, [sp, #24]
    4560:	3301      	adds	r3, #1
    4562:	9306      	str	r3, [sp, #24]
                    if ( ( (bit_value == 1) && (eink_font.font_inverted == FONT_NORMAL) ) || ( (bit_value == 0) && (eink_font.font_inverted == FONT_INVERTED) ) ) {
    4564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4566:	2b01      	cmp	r3, #1
    4568:	d0d3      	beq.n	4512 <_gfx_eink_text_write_character+0x15e>
    456a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    456c:	2b00      	cmp	r3, #0
    456e:	d1de      	bne.n	452e <_gfx_eink_text_write_character+0x17a>
    4570:	2e01      	cmp	r6, #1
    4572:	d1dc      	bne.n	452e <_gfx_eink_text_write_character+0x17a>
    4574:	e7cf      	b.n	4516 <_gfx_eink_text_write_character+0x162>
                        else gfx_eink_set_pixel_raw(send_x, send_y, text_colour_value);
    4576:	ab05      	add	r3, sp, #20
    4578:	8818      	ldrh	r0, [r3, #0]
    457a:	b280      	uxth	r0, r0
    457c:	ab04      	add	r3, sp, #16
    457e:	8819      	ldrh	r1, [r3, #0]
    4580:	b289      	uxth	r1, r1
    4582:	9a01      	ldr	r2, [sp, #4]
    4584:	47d8      	blx	fp
    4586:	e7d2      	b.n	452e <_gfx_eink_text_write_character+0x17a>
            j++;
    4588:	9b07      	ldr	r3, [sp, #28]
    458a:	3301      	adds	r3, #1
    458c:	9307      	str	r3, [sp, #28]
            current_y += 8;
    458e:	882b      	ldrh	r3, [r5, #0]
    4590:	3308      	adds	r3, #8
    4592:	b29b      	uxth	r3, r3
    4594:	802b      	strh	r3, [r5, #0]
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    4596:	4b20      	ldr	r3, [pc, #128]	; (4618 <_gfx_eink_text_write_character+0x264>)
    4598:	681b      	ldr	r3, [r3, #0]
    459a:	781b      	ldrb	r3, [r3, #0]
    459c:	2b0a      	cmp	r3, #10
    459e:	d01b      	beq.n	45d8 <_gfx_eink_text_write_character+0x224>
            else font_array_ptr += sizeof(uint8_t);
    45a0:	3401      	adds	r4, #1
            if(j == eink_font.font_height_bytes) {
    45a2:	9b07      	ldr	r3, [sp, #28]
    45a4:	459a      	cmp	sl, r3
    45a6:	d024      	beq.n	45f2 <_gfx_eink_text_write_character+0x23e>
        for (i = start_font_index; i <= end_font_index; i++) {
    45a8:	9b08      	ldr	r3, [sp, #32]
    45aa:	3301      	adds	r3, #1
    45ac:	9308      	str	r3, [sp, #32]
    45ae:	9a08      	ldr	r2, [sp, #32]
    45b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    45b2:	429a      	cmp	r2, r3
    45b4:	d829      	bhi.n	460a <_gfx_eink_text_write_character+0x256>
            if( ((eink_font.font_endianness == FONT_BIG_ENDIAN) && (ptr_eink_gfx_config->gfx_display != GFX_IT8951)) || ((eink_font.font_endianness == FONT_LITTLE_ENDIAN) && (ptr_eink_gfx_config->gfx_display == GFX_IT8951)) ){
    45b6:	464b      	mov	r3, r9
    45b8:	2b00      	cmp	r3, #0
    45ba:	d000      	beq.n	45be <_gfx_eink_text_write_character+0x20a>
    45bc:	e75e      	b.n	447c <_gfx_eink_text_write_character+0xc8>
    45be:	4b16      	ldr	r3, [pc, #88]	; (4618 <_gfx_eink_text_write_character+0x264>)
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	781b      	ldrb	r3, [r3, #0]
    45c4:	2b0a      	cmp	r3, #10
    45c6:	d100      	bne.n	45ca <_gfx_eink_text_write_character+0x216>
    45c8:	e75b      	b.n	4482 <_gfx_eink_text_write_character+0xce>
                for (k = 0; k < 8; k++) {
    45ca:	2300      	movs	r3, #0
    45cc:	930d      	str	r3, [sp, #52]	; 0x34
    45ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    45d0:	2b07      	cmp	r3, #7
    45d2:	d8d9      	bhi.n	4588 <_gfx_eink_text_write_character+0x1d4>
                    bit_value = ((*font_array_ptr >> k) & 0x1);
    45d4:	2701      	movs	r7, #1
    45d6:	e778      	b.n	44ca <_gfx_eink_text_write_character+0x116>
            if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr -= sizeof(uint8_t);
    45d8:	3c01      	subs	r4, #1
            if(j == eink_font.font_height_bytes) {
    45da:	9b07      	ldr	r3, [sp, #28]
    45dc:	459a      	cmp	sl, r3
    45de:	d1e3      	bne.n	45a8 <_gfx_eink_text_write_character+0x1f4>
                j = 0;
    45e0:	2300      	movs	r3, #0
    45e2:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    45e4:	466b      	mov	r3, sp
    45e6:	891b      	ldrh	r3, [r3, #8]
    45e8:	802b      	strh	r3, [r5, #0]
                if(ptr_eink_gfx_config->gfx_display == GFX_IT8951) font_array_ptr += (sizeof(uint8_t) * 2 * eink_font.font_height_bytes);
    45ea:	9b03      	ldr	r3, [sp, #12]
    45ec:	469c      	mov	ip, r3
    45ee:	4464      	add	r4, ip
    45f0:	e004      	b.n	45fc <_gfx_eink_text_write_character+0x248>
                j = 0;
    45f2:	2300      	movs	r3, #0
    45f4:	9307      	str	r3, [sp, #28]
                current_y = start_y;
    45f6:	466b      	mov	r3, sp
    45f8:	891b      	ldrh	r3, [r3, #8]
    45fa:	802b      	strh	r3, [r5, #0]
                
                current_x++;
    45fc:	ab04      	add	r3, sp, #16
    45fe:	1d9a      	adds	r2, r3, #6
    4600:	88db      	ldrh	r3, [r3, #6]
    4602:	3301      	adds	r3, #1
    4604:	b29b      	uxth	r3, r3
    4606:	8013      	strh	r3, [r2, #0]
    4608:	e7ce      	b.n	45a8 <_gfx_eink_text_write_character+0x1f4>
            }
        }
    }
}
    460a:	b00f      	add	sp, #60	; 0x3c
    460c:	bc3c      	pop	{r2, r3, r4, r5}
    460e:	4690      	mov	r8, r2
    4610:	4699      	mov	r9, r3
    4612:	46a2      	mov	sl, r4
    4614:	46ab      	mov	fp, r5
    4616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4618:	20000430 	.word	0x20000430
    461c:	000005a5 	.word	0x000005a5
    4620:	00000595 	.word	0x00000595

00004624 <gfx_eink_text_write_string_raw>:
 * \param start_y Y coordinate to start writing.
 * \param text_colour_value Pixel value of character.
 * \param eink_font Font structure to use.
 */
void gfx_eink_text_write_string_raw(char *char_array, eink_coordinate start_x, eink_coordinate start_y, uint8_t text_colour_value, struct gfx_eink_font eink_font)
{
    4624:	b5f0      	push	{r4, r5, r6, r7, lr}
    4626:	46de      	mov	lr, fp
    4628:	4657      	mov	r7, sl
    462a:	464e      	mov	r6, r9
    462c:	4645      	mov	r5, r8
    462e:	b5e0      	push	{r5, r6, r7, lr}
    4630:	b089      	sub	sp, #36	; 0x24
    4632:	4680      	mov	r8, r0
    4634:	000c      	movs	r4, r1
    4636:	9206      	str	r2, [sp, #24]
    4638:	4699      	mov	r9, r3
    uint8_t i = 0;
    eink_coordinate x_send = start_x;
    
    while(char_array[i] != '\0')
    463a:	7800      	ldrb	r0, [r0, #0]
    463c:	2800      	cmp	r0, #0
    463e:	d027      	beq.n	4690 <gfx_eink_text_write_string_raw+0x6c>
    4640:	4647      	mov	r7, r8
    4642:	2500      	movs	r5, #0
    {
        _gfx_eink_text_write_character(char_array[i], x_send, start_y, 1, 0, text_colour_value, eink_font);
    4644:	ae02      	add	r6, sp, #8
    4646:	2300      	movs	r3, #0
    4648:	469b      	mov	fp, r3
    464a:	4b15      	ldr	r3, [pc, #84]	; (46a0 <gfx_eink_text_write_string_raw+0x7c>)
    464c:	469a      	mov	sl, r3
    464e:	4684      	mov	ip, r0
    4650:	9607      	str	r6, [sp, #28]
    4652:	9b07      	ldr	r3, [sp, #28]
    4654:	aa12      	add	r2, sp, #72	; 0x48
    4656:	ca43      	ldmia	r2!, {r0, r1, r6}
    4658:	c343      	stmia	r3!, {r0, r1, r6}
    465a:	6812      	ldr	r2, [r2, #0]
    465c:	601a      	str	r2, [r3, #0]
    465e:	464b      	mov	r3, r9
    4660:	9301      	str	r3, [sp, #4]
    4662:	465b      	mov	r3, fp
    4664:	9300      	str	r3, [sp, #0]
    4666:	2301      	movs	r3, #1
    4668:	9a06      	ldr	r2, [sp, #24]
    466a:	0021      	movs	r1, r4
    466c:	4660      	mov	r0, ip
    466e:	47d0      	blx	sl
            
        x_send += eink_font.font_character_size_map_ptr[char_array[i]-eink_font.font_starting_ascii_char];
    4670:	783b      	ldrb	r3, [r7, #0]
    4672:	aa12      	add	r2, sp, #72	; 0x48
    4674:	7b12      	ldrb	r2, [r2, #12]
    4676:	1a9b      	subs	r3, r3, r2
    4678:	9a14      	ldr	r2, [sp, #80]	; 0x50
    467a:	5cd3      	ldrb	r3, [r2, r3]
    467c:	18e4      	adds	r4, r4, r3
    467e:	b2a4      	uxth	r4, r4
        i++;        
    4680:	3501      	adds	r5, #1
    4682:	b2ed      	uxtb	r5, r5
    while(char_array[i] != '\0')
    4684:	4643      	mov	r3, r8
    4686:	195f      	adds	r7, r3, r5
    4688:	783b      	ldrb	r3, [r7, #0]
    468a:	469c      	mov	ip, r3
    468c:	2b00      	cmp	r3, #0
    468e:	d1e0      	bne.n	4652 <gfx_eink_text_write_string_raw+0x2e>
    }
    4690:	b009      	add	sp, #36	; 0x24
    4692:	bc3c      	pop	{r2, r3, r4, r5}
    4694:	4690      	mov	r8, r2
    4696:	4699      	mov	r9, r3
    4698:	46a2      	mov	sl, r4
    469a:	46ab      	mov	fp, r5
    469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	000043b5 	.word	0x000043b5

000046a4 <eink_init_display>:
	
	gpio_set_pin_level(EINK_X_LED_0_PIN, 1);	
}

void eink_init_display(void)
{
    46a4:	b500      	push	{lr}
    46a6:	b083      	sub	sp, #12
    config->update_mode = UPDATE_SLOW;
    46a8:	a801      	add	r0, sp, #4
    46aa:	2300      	movs	r3, #0
    46ac:	7043      	strb	r3, [r0, #1]
    config->uc8173_display = UC8173_ED013TC1;
    46ae:	7083      	strb	r3, [r0, #2]
    config->uc8173_current_lut = UC8173_LUT_NONE;
    46b0:	3303      	adds	r3, #3
    46b2:	70c3      	strb	r3, [r0, #3]
	struct uc8173_config eink_conf;
	
	uc8173_get_config_defaults(&eink_conf);
	eink_conf.display_rotation = ROTATE_90;
    46b4:	3b02      	subs	r3, #2
    46b6:	7003      	strb	r3, [r0, #0]
	eink_conf.update_mode = UPDATE_SLOW;
	eink_et011tt2_init(&eink_conf, false);
    46b8:	2100      	movs	r1, #0
    46ba:	4b02      	ldr	r3, [pc, #8]	; (46c4 <eink_init_display+0x20>)
    46bc:	4798      	blx	r3
    46be:	b003      	add	sp, #12
    46c0:	bd00      	pop	{pc}
    46c2:	46c0      	nop			; (mov r8, r8)
    46c4:	00003755 	.word	0x00003755

000046c8 <main>:
{
    46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ca:	46d6      	mov	lr, sl
    46cc:	464f      	mov	r7, r9
    46ce:	4646      	mov	r6, r8
    46d0:	b5c0      	push	{r6, r7, lr}
    46d2:	b088      	sub	sp, #32
	system_init();
    46d4:	4b42      	ldr	r3, [pc, #264]	; (47e0 <main+0x118>)
    46d6:	4798      	blx	r3
	eink_init_display();
    46d8:	4b42      	ldr	r3, [pc, #264]	; (47e4 <main+0x11c>)
    46da:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    46dc:	2180      	movs	r1, #128	; 0x80
    46de:	05c9      	lsls	r1, r1, #23
    46e0:	2398      	movs	r3, #152	; 0x98
    46e2:	22c0      	movs	r2, #192	; 0xc0
    46e4:	05d2      	lsls	r2, r2, #23
    46e6:	50d1      	str	r1, [r2, r3]
	gfx_eink_graphics_fill_screen_raw(0xFF);
    46e8:	20ff      	movs	r0, #255	; 0xff
    46ea:	4b3f      	ldr	r3, [pc, #252]	; (47e8 <main+0x120>)
    46ec:	4698      	mov	r8, r3
    46ee:	4798      	blx	r3
	uc8173_global_instance.display_config.update_mode = UPDATE_SLOW;
    46f0:	4f3e      	ldr	r7, [pc, #248]	; (47ec <main+0x124>)
    46f2:	2300      	movs	r3, #0
    46f4:	4699      	mov	r9, r3
    46f6:	707b      	strb	r3, [r7, #1]
	gfx_eink_put_display_buffer(true);
    46f8:	2001      	movs	r0, #1
    46fa:	4d3d      	ldr	r5, [pc, #244]	; (47f0 <main+0x128>)
    46fc:	47a8      	blx	r5
	delay_ms(1000);
    46fe:	20fa      	movs	r0, #250	; 0xfa
    4700:	0080      	lsls	r0, r0, #2
    4702:	4e3c      	ldr	r6, [pc, #240]	; (47f4 <main+0x12c>)
    4704:	47b0      	blx	r6
	eink_et011tt2_graphics_load_2bgrey_image(eink_GSephElecLogo_2bGrey, sizeof(eink_GSephElecLogo_2bGrey), eink_GSephElecLogo_2bGrey_width_px, eink_GSephElecLogo_2bGrey_height_bytes, 40, 68);
    4706:	2344      	movs	r3, #68	; 0x44
    4708:	9301      	str	r3, [sp, #4]
    470a:	3b1c      	subs	r3, #28
    470c:	9300      	str	r3, [sp, #0]
    470e:	3b0e      	subs	r3, #14
    4710:	22a0      	movs	r2, #160	; 0xa0
    4712:	2182      	movs	r1, #130	; 0x82
    4714:	0149      	lsls	r1, r1, #5
    4716:	4838      	ldr	r0, [pc, #224]	; (47f8 <main+0x130>)
    4718:	301c      	adds	r0, #28
    471a:	4c38      	ldr	r4, [pc, #224]	; (47fc <main+0x134>)
    471c:	47a0      	blx	r4
	uc8173_global_instance.display_config.update_mode = UPDATE_SLOW;
    471e:	464b      	mov	r3, r9
    4720:	707b      	strb	r3, [r7, #1]
	gfx_eink_put_display_buffer(true);
    4722:	2001      	movs	r0, #1
    4724:	47a8      	blx	r5
	delay_ms(1000);
    4726:	20fa      	movs	r0, #250	; 0xfa
    4728:	0080      	lsls	r0, r0, #2
    472a:	47b0      	blx	r6
	gfx_eink_graphics_fill_screen_raw(0xFF);
    472c:	20ff      	movs	r0, #255	; 0xff
    472e:	47c0      	blx	r8
	gfx_eink_text_write_string_raw("Counter", 70, 35, 0x1, ArvoBold_18pt);
    4730:	4c33      	ldr	r4, [pc, #204]	; (4800 <main+0x138>)
    4732:	0023      	movs	r3, r4
    4734:	3354      	adds	r3, #84	; 0x54
    4736:	466f      	mov	r7, sp
    4738:	cb07      	ldmia	r3!, {r0, r1, r2}
    473a:	c707      	stmia	r7!, {r0, r1, r2}
    473c:	681b      	ldr	r3, [r3, #0]
    473e:	603b      	str	r3, [r7, #0]
    4740:	2301      	movs	r3, #1
    4742:	2223      	movs	r2, #35	; 0x23
    4744:	2146      	movs	r1, #70	; 0x46
    4746:	482f      	ldr	r0, [pc, #188]	; (4804 <main+0x13c>)
    4748:	4e2f      	ldr	r6, [pc, #188]	; (4808 <main+0x140>)
    474a:	47b0      	blx	r6
	sprintf(writeText, "%d", i);
    474c:	220a      	movs	r2, #10
    474e:	492f      	ldr	r1, [pc, #188]	; (480c <main+0x144>)
    4750:	a804      	add	r0, sp, #16
    4752:	4b2f      	ldr	r3, [pc, #188]	; (4810 <main+0x148>)
    4754:	4798      	blx	r3
	gfx_eink_text_write_string_raw(writeText, 62, 52, 0x0, RobotoBold_76pt);
    4756:	3464      	adds	r4, #100	; 0x64
    4758:	466b      	mov	r3, sp
    475a:	cc07      	ldmia	r4!, {r0, r1, r2}
    475c:	c307      	stmia	r3!, {r0, r1, r2}
    475e:	6823      	ldr	r3, [r4, #0]
    4760:	603b      	str	r3, [r7, #0]
    4762:	2300      	movs	r3, #0
    4764:	2234      	movs	r2, #52	; 0x34
    4766:	213e      	movs	r1, #62	; 0x3e
    4768:	a804      	add	r0, sp, #16
    476a:	47b0      	blx	r6
	gfx_eink_put_display_buffer(true);
    476c:	2001      	movs	r0, #1
    476e:	47a8      	blx	r5
    4770:	240b      	movs	r4, #11
		gfx_eink_graphics_draw_rect(50, 70, 140, 100, PIXEL_NONE, FILL_WHITE);
    4772:	2601      	movs	r6, #1
    4774:	4f27      	ldr	r7, [pc, #156]	; (4814 <main+0x14c>)
    4776:	9601      	str	r6, [sp, #4]
    4778:	2308      	movs	r3, #8
    477a:	9300      	str	r3, [sp, #0]
    477c:	335c      	adds	r3, #92	; 0x5c
    477e:	228c      	movs	r2, #140	; 0x8c
    4780:	2146      	movs	r1, #70	; 0x46
    4782:	2032      	movs	r0, #50	; 0x32
    4784:	47b8      	blx	r7
		sprintf(writeText, "%d", i);
    4786:	0022      	movs	r2, r4
    4788:	4920      	ldr	r1, [pc, #128]	; (480c <main+0x144>)
    478a:	a804      	add	r0, sp, #16
    478c:	4b20      	ldr	r3, [pc, #128]	; (4810 <main+0x148>)
    478e:	4798      	blx	r3
		gfx_eink_text_write_string_raw(writeText, 62, 52, 0x0, RobotoBold_76pt);
    4790:	4b1b      	ldr	r3, [pc, #108]	; (4800 <main+0x138>)
    4792:	3364      	adds	r3, #100	; 0x64
    4794:	466a      	mov	r2, sp
    4796:	cb23      	ldmia	r3!, {r0, r1, r5}
    4798:	c223      	stmia	r2!, {r0, r1, r5}
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	6013      	str	r3, [r2, #0]
    479e:	2300      	movs	r3, #0
    47a0:	2234      	movs	r2, #52	; 0x34
    47a2:	213e      	movs	r1, #62	; 0x3e
    47a4:	a804      	add	r0, sp, #16
    47a6:	4d18      	ldr	r5, [pc, #96]	; (4808 <main+0x140>)
    47a8:	47a8      	blx	r5
		uc8173_global_instance.display_config.update_mode = UPDATE_FAST;
    47aa:	4b10      	ldr	r3, [pc, #64]	; (47ec <main+0x124>)
    47ac:	705e      	strb	r6, [r3, #1]
		gfx_eink_put_display_buffer(true);
    47ae:	0030      	movs	r0, r6
    47b0:	4b0f      	ldr	r3, [pc, #60]	; (47f0 <main+0x128>)
    47b2:	4798      	blx	r3
    47b4:	3401      	adds	r4, #1
	for(uint8_t i = 11; i < 20; i++)
    47b6:	2c14      	cmp	r4, #20
    47b8:	d1dd      	bne.n	4776 <main+0xae>
	uc8173_global_instance.display_config.update_mode = UPDATE_SLOW;
    47ba:	2200      	movs	r2, #0
    47bc:	4b0b      	ldr	r3, [pc, #44]	; (47ec <main+0x124>)
    47be:	705a      	strb	r2, [r3, #1]
	gfx_eink_put_display_buffer(true);
    47c0:	2001      	movs	r0, #1
    47c2:	4b0b      	ldr	r3, [pc, #44]	; (47f0 <main+0x128>)
    47c4:	4798      	blx	r3
    47c6:	2180      	movs	r1, #128	; 0x80
    47c8:	05c9      	lsls	r1, r1, #23
    47ca:	2398      	movs	r3, #152	; 0x98
    47cc:	22c0      	movs	r2, #192	; 0xc0
    47ce:	05d2      	lsls	r2, r2, #23
    47d0:	50d1      	str	r1, [r2, r3]
}
    47d2:	2000      	movs	r0, #0
    47d4:	b008      	add	sp, #32
    47d6:	bc1c      	pop	{r2, r3, r4}
    47d8:	4690      	mov	r8, r2
    47da:	4699      	mov	r9, r3
    47dc:	46a2      	mov	sl, r4
    47de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47e0:	00000211 	.word	0x00000211
    47e4:	000046a5 	.word	0x000046a5
    47e8:	00004045 	.word	0x00004045
    47ec:	20000390 	.word	0x20000390
    47f0:	00000585 	.word	0x00000585
    47f4:	0000037d 	.word	0x0000037d
    47f8:	000066a0 	.word	0x000066a0
    47fc:	00003821 	.word	0x00003821
    4800:	20000280 	.word	0x20000280
    4804:	0001c42c 	.word	0x0001c42c
    4808:	00004625 	.word	0x00004625
    480c:	0001c434 	.word	0x0001c434
    4810:	00004b25 	.word	0x00004b25
    4814:	00004215 	.word	0x00004215

00004818 <__udivsi3>:
    4818:	2200      	movs	r2, #0
    481a:	0843      	lsrs	r3, r0, #1
    481c:	428b      	cmp	r3, r1
    481e:	d374      	bcc.n	490a <__udivsi3+0xf2>
    4820:	0903      	lsrs	r3, r0, #4
    4822:	428b      	cmp	r3, r1
    4824:	d35f      	bcc.n	48e6 <__udivsi3+0xce>
    4826:	0a03      	lsrs	r3, r0, #8
    4828:	428b      	cmp	r3, r1
    482a:	d344      	bcc.n	48b6 <__udivsi3+0x9e>
    482c:	0b03      	lsrs	r3, r0, #12
    482e:	428b      	cmp	r3, r1
    4830:	d328      	bcc.n	4884 <__udivsi3+0x6c>
    4832:	0c03      	lsrs	r3, r0, #16
    4834:	428b      	cmp	r3, r1
    4836:	d30d      	bcc.n	4854 <__udivsi3+0x3c>
    4838:	22ff      	movs	r2, #255	; 0xff
    483a:	0209      	lsls	r1, r1, #8
    483c:	ba12      	rev	r2, r2
    483e:	0c03      	lsrs	r3, r0, #16
    4840:	428b      	cmp	r3, r1
    4842:	d302      	bcc.n	484a <__udivsi3+0x32>
    4844:	1212      	asrs	r2, r2, #8
    4846:	0209      	lsls	r1, r1, #8
    4848:	d065      	beq.n	4916 <__udivsi3+0xfe>
    484a:	0b03      	lsrs	r3, r0, #12
    484c:	428b      	cmp	r3, r1
    484e:	d319      	bcc.n	4884 <__udivsi3+0x6c>
    4850:	e000      	b.n	4854 <__udivsi3+0x3c>
    4852:	0a09      	lsrs	r1, r1, #8
    4854:	0bc3      	lsrs	r3, r0, #15
    4856:	428b      	cmp	r3, r1
    4858:	d301      	bcc.n	485e <__udivsi3+0x46>
    485a:	03cb      	lsls	r3, r1, #15
    485c:	1ac0      	subs	r0, r0, r3
    485e:	4152      	adcs	r2, r2
    4860:	0b83      	lsrs	r3, r0, #14
    4862:	428b      	cmp	r3, r1
    4864:	d301      	bcc.n	486a <__udivsi3+0x52>
    4866:	038b      	lsls	r3, r1, #14
    4868:	1ac0      	subs	r0, r0, r3
    486a:	4152      	adcs	r2, r2
    486c:	0b43      	lsrs	r3, r0, #13
    486e:	428b      	cmp	r3, r1
    4870:	d301      	bcc.n	4876 <__udivsi3+0x5e>
    4872:	034b      	lsls	r3, r1, #13
    4874:	1ac0      	subs	r0, r0, r3
    4876:	4152      	adcs	r2, r2
    4878:	0b03      	lsrs	r3, r0, #12
    487a:	428b      	cmp	r3, r1
    487c:	d301      	bcc.n	4882 <__udivsi3+0x6a>
    487e:	030b      	lsls	r3, r1, #12
    4880:	1ac0      	subs	r0, r0, r3
    4882:	4152      	adcs	r2, r2
    4884:	0ac3      	lsrs	r3, r0, #11
    4886:	428b      	cmp	r3, r1
    4888:	d301      	bcc.n	488e <__udivsi3+0x76>
    488a:	02cb      	lsls	r3, r1, #11
    488c:	1ac0      	subs	r0, r0, r3
    488e:	4152      	adcs	r2, r2
    4890:	0a83      	lsrs	r3, r0, #10
    4892:	428b      	cmp	r3, r1
    4894:	d301      	bcc.n	489a <__udivsi3+0x82>
    4896:	028b      	lsls	r3, r1, #10
    4898:	1ac0      	subs	r0, r0, r3
    489a:	4152      	adcs	r2, r2
    489c:	0a43      	lsrs	r3, r0, #9
    489e:	428b      	cmp	r3, r1
    48a0:	d301      	bcc.n	48a6 <__udivsi3+0x8e>
    48a2:	024b      	lsls	r3, r1, #9
    48a4:	1ac0      	subs	r0, r0, r3
    48a6:	4152      	adcs	r2, r2
    48a8:	0a03      	lsrs	r3, r0, #8
    48aa:	428b      	cmp	r3, r1
    48ac:	d301      	bcc.n	48b2 <__udivsi3+0x9a>
    48ae:	020b      	lsls	r3, r1, #8
    48b0:	1ac0      	subs	r0, r0, r3
    48b2:	4152      	adcs	r2, r2
    48b4:	d2cd      	bcs.n	4852 <__udivsi3+0x3a>
    48b6:	09c3      	lsrs	r3, r0, #7
    48b8:	428b      	cmp	r3, r1
    48ba:	d301      	bcc.n	48c0 <__udivsi3+0xa8>
    48bc:	01cb      	lsls	r3, r1, #7
    48be:	1ac0      	subs	r0, r0, r3
    48c0:	4152      	adcs	r2, r2
    48c2:	0983      	lsrs	r3, r0, #6
    48c4:	428b      	cmp	r3, r1
    48c6:	d301      	bcc.n	48cc <__udivsi3+0xb4>
    48c8:	018b      	lsls	r3, r1, #6
    48ca:	1ac0      	subs	r0, r0, r3
    48cc:	4152      	adcs	r2, r2
    48ce:	0943      	lsrs	r3, r0, #5
    48d0:	428b      	cmp	r3, r1
    48d2:	d301      	bcc.n	48d8 <__udivsi3+0xc0>
    48d4:	014b      	lsls	r3, r1, #5
    48d6:	1ac0      	subs	r0, r0, r3
    48d8:	4152      	adcs	r2, r2
    48da:	0903      	lsrs	r3, r0, #4
    48dc:	428b      	cmp	r3, r1
    48de:	d301      	bcc.n	48e4 <__udivsi3+0xcc>
    48e0:	010b      	lsls	r3, r1, #4
    48e2:	1ac0      	subs	r0, r0, r3
    48e4:	4152      	adcs	r2, r2
    48e6:	08c3      	lsrs	r3, r0, #3
    48e8:	428b      	cmp	r3, r1
    48ea:	d301      	bcc.n	48f0 <__udivsi3+0xd8>
    48ec:	00cb      	lsls	r3, r1, #3
    48ee:	1ac0      	subs	r0, r0, r3
    48f0:	4152      	adcs	r2, r2
    48f2:	0883      	lsrs	r3, r0, #2
    48f4:	428b      	cmp	r3, r1
    48f6:	d301      	bcc.n	48fc <__udivsi3+0xe4>
    48f8:	008b      	lsls	r3, r1, #2
    48fa:	1ac0      	subs	r0, r0, r3
    48fc:	4152      	adcs	r2, r2
    48fe:	0843      	lsrs	r3, r0, #1
    4900:	428b      	cmp	r3, r1
    4902:	d301      	bcc.n	4908 <__udivsi3+0xf0>
    4904:	004b      	lsls	r3, r1, #1
    4906:	1ac0      	subs	r0, r0, r3
    4908:	4152      	adcs	r2, r2
    490a:	1a41      	subs	r1, r0, r1
    490c:	d200      	bcs.n	4910 <__udivsi3+0xf8>
    490e:	4601      	mov	r1, r0
    4910:	4152      	adcs	r2, r2
    4912:	4610      	mov	r0, r2
    4914:	4770      	bx	lr
    4916:	e7ff      	b.n	4918 <__udivsi3+0x100>
    4918:	b501      	push	{r0, lr}
    491a:	2000      	movs	r0, #0
    491c:	f000 f806 	bl	492c <__aeabi_idiv0>
    4920:	bd02      	pop	{r1, pc}
    4922:	46c0      	nop			; (mov r8, r8)

00004924 <__aeabi_uidivmod>:
    4924:	2900      	cmp	r1, #0
    4926:	d0f7      	beq.n	4918 <__udivsi3+0x100>
    4928:	e776      	b.n	4818 <__udivsi3>
    492a:	4770      	bx	lr

0000492c <__aeabi_idiv0>:
    492c:	4770      	bx	lr
    492e:	46c0      	nop			; (mov r8, r8)

00004930 <__libc_init_array>:
    4930:	b570      	push	{r4, r5, r6, lr}
    4932:	2600      	movs	r6, #0
    4934:	4d0c      	ldr	r5, [pc, #48]	; (4968 <__libc_init_array+0x38>)
    4936:	4c0d      	ldr	r4, [pc, #52]	; (496c <__libc_init_array+0x3c>)
    4938:	1b64      	subs	r4, r4, r5
    493a:	10a4      	asrs	r4, r4, #2
    493c:	42a6      	cmp	r6, r4
    493e:	d109      	bne.n	4954 <__libc_init_array+0x24>
    4940:	2600      	movs	r6, #0
    4942:	f017 fdc3 	bl	1c4cc <_init>
    4946:	4d0a      	ldr	r5, [pc, #40]	; (4970 <__libc_init_array+0x40>)
    4948:	4c0a      	ldr	r4, [pc, #40]	; (4974 <__libc_init_array+0x44>)
    494a:	1b64      	subs	r4, r4, r5
    494c:	10a4      	asrs	r4, r4, #2
    494e:	42a6      	cmp	r6, r4
    4950:	d105      	bne.n	495e <__libc_init_array+0x2e>
    4952:	bd70      	pop	{r4, r5, r6, pc}
    4954:	00b3      	lsls	r3, r6, #2
    4956:	58eb      	ldr	r3, [r5, r3]
    4958:	4798      	blx	r3
    495a:	3601      	adds	r6, #1
    495c:	e7ee      	b.n	493c <__libc_init_array+0xc>
    495e:	00b3      	lsls	r3, r6, #2
    4960:	58eb      	ldr	r3, [r5, r3]
    4962:	4798      	blx	r3
    4964:	3601      	adds	r6, #1
    4966:	e7f2      	b.n	494e <__libc_init_array+0x1e>
    4968:	0001c4d8 	.word	0x0001c4d8
    496c:	0001c4d8 	.word	0x0001c4d8
    4970:	0001c4d8 	.word	0x0001c4d8
    4974:	0001c4dc 	.word	0x0001c4dc

00004978 <malloc>:
    4978:	b510      	push	{r4, lr}
    497a:	4b03      	ldr	r3, [pc, #12]	; (4988 <malloc+0x10>)
    497c:	0001      	movs	r1, r0
    497e:	6818      	ldr	r0, [r3, #0]
    4980:	f000 f860 	bl	4a44 <_malloc_r>
    4984:	bd10      	pop	{r4, pc}
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	200002f4 	.word	0x200002f4

0000498c <memcpy>:
    498c:	2300      	movs	r3, #0
    498e:	b510      	push	{r4, lr}
    4990:	429a      	cmp	r2, r3
    4992:	d100      	bne.n	4996 <memcpy+0xa>
    4994:	bd10      	pop	{r4, pc}
    4996:	5ccc      	ldrb	r4, [r1, r3]
    4998:	54c4      	strb	r4, [r0, r3]
    499a:	3301      	adds	r3, #1
    499c:	e7f8      	b.n	4990 <memcpy+0x4>

0000499e <memset>:
    499e:	0003      	movs	r3, r0
    49a0:	1882      	adds	r2, r0, r2
    49a2:	4293      	cmp	r3, r2
    49a4:	d100      	bne.n	49a8 <memset+0xa>
    49a6:	4770      	bx	lr
    49a8:	7019      	strb	r1, [r3, #0]
    49aa:	3301      	adds	r3, #1
    49ac:	e7f9      	b.n	49a2 <memset+0x4>
	...

000049b0 <_free_r>:
    49b0:	b570      	push	{r4, r5, r6, lr}
    49b2:	0005      	movs	r5, r0
    49b4:	2900      	cmp	r1, #0
    49b6:	d010      	beq.n	49da <_free_r+0x2a>
    49b8:	1f0c      	subs	r4, r1, #4
    49ba:	6823      	ldr	r3, [r4, #0]
    49bc:	2b00      	cmp	r3, #0
    49be:	da00      	bge.n	49c2 <_free_r+0x12>
    49c0:	18e4      	adds	r4, r4, r3
    49c2:	0028      	movs	r0, r5
    49c4:	f000 f8d0 	bl	4b68 <__malloc_lock>
    49c8:	4a1d      	ldr	r2, [pc, #116]	; (4a40 <_free_r+0x90>)
    49ca:	6813      	ldr	r3, [r2, #0]
    49cc:	2b00      	cmp	r3, #0
    49ce:	d105      	bne.n	49dc <_free_r+0x2c>
    49d0:	6063      	str	r3, [r4, #4]
    49d2:	6014      	str	r4, [r2, #0]
    49d4:	0028      	movs	r0, r5
    49d6:	f000 f8c8 	bl	4b6a <__malloc_unlock>
    49da:	bd70      	pop	{r4, r5, r6, pc}
    49dc:	42a3      	cmp	r3, r4
    49de:	d909      	bls.n	49f4 <_free_r+0x44>
    49e0:	6821      	ldr	r1, [r4, #0]
    49e2:	1860      	adds	r0, r4, r1
    49e4:	4283      	cmp	r3, r0
    49e6:	d1f3      	bne.n	49d0 <_free_r+0x20>
    49e8:	6818      	ldr	r0, [r3, #0]
    49ea:	685b      	ldr	r3, [r3, #4]
    49ec:	1841      	adds	r1, r0, r1
    49ee:	6021      	str	r1, [r4, #0]
    49f0:	e7ee      	b.n	49d0 <_free_r+0x20>
    49f2:	0013      	movs	r3, r2
    49f4:	685a      	ldr	r2, [r3, #4]
    49f6:	2a00      	cmp	r2, #0
    49f8:	d001      	beq.n	49fe <_free_r+0x4e>
    49fa:	42a2      	cmp	r2, r4
    49fc:	d9f9      	bls.n	49f2 <_free_r+0x42>
    49fe:	6819      	ldr	r1, [r3, #0]
    4a00:	1858      	adds	r0, r3, r1
    4a02:	42a0      	cmp	r0, r4
    4a04:	d10b      	bne.n	4a1e <_free_r+0x6e>
    4a06:	6820      	ldr	r0, [r4, #0]
    4a08:	1809      	adds	r1, r1, r0
    4a0a:	1858      	adds	r0, r3, r1
    4a0c:	6019      	str	r1, [r3, #0]
    4a0e:	4282      	cmp	r2, r0
    4a10:	d1e0      	bne.n	49d4 <_free_r+0x24>
    4a12:	6810      	ldr	r0, [r2, #0]
    4a14:	6852      	ldr	r2, [r2, #4]
    4a16:	1841      	adds	r1, r0, r1
    4a18:	6019      	str	r1, [r3, #0]
    4a1a:	605a      	str	r2, [r3, #4]
    4a1c:	e7da      	b.n	49d4 <_free_r+0x24>
    4a1e:	42a0      	cmp	r0, r4
    4a20:	d902      	bls.n	4a28 <_free_r+0x78>
    4a22:	230c      	movs	r3, #12
    4a24:	602b      	str	r3, [r5, #0]
    4a26:	e7d5      	b.n	49d4 <_free_r+0x24>
    4a28:	6821      	ldr	r1, [r4, #0]
    4a2a:	1860      	adds	r0, r4, r1
    4a2c:	4282      	cmp	r2, r0
    4a2e:	d103      	bne.n	4a38 <_free_r+0x88>
    4a30:	6810      	ldr	r0, [r2, #0]
    4a32:	6852      	ldr	r2, [r2, #4]
    4a34:	1841      	adds	r1, r0, r1
    4a36:	6021      	str	r1, [r4, #0]
    4a38:	6062      	str	r2, [r4, #4]
    4a3a:	605c      	str	r4, [r3, #4]
    4a3c:	e7ca      	b.n	49d4 <_free_r+0x24>
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	2000037c 	.word	0x2000037c

00004a44 <_malloc_r>:
    4a44:	2303      	movs	r3, #3
    4a46:	b570      	push	{r4, r5, r6, lr}
    4a48:	1ccd      	adds	r5, r1, #3
    4a4a:	439d      	bics	r5, r3
    4a4c:	3508      	adds	r5, #8
    4a4e:	0006      	movs	r6, r0
    4a50:	2d0c      	cmp	r5, #12
    4a52:	d21e      	bcs.n	4a92 <_malloc_r+0x4e>
    4a54:	250c      	movs	r5, #12
    4a56:	42a9      	cmp	r1, r5
    4a58:	d81d      	bhi.n	4a96 <_malloc_r+0x52>
    4a5a:	0030      	movs	r0, r6
    4a5c:	f000 f884 	bl	4b68 <__malloc_lock>
    4a60:	4a25      	ldr	r2, [pc, #148]	; (4af8 <_malloc_r+0xb4>)
    4a62:	6814      	ldr	r4, [r2, #0]
    4a64:	0021      	movs	r1, r4
    4a66:	2900      	cmp	r1, #0
    4a68:	d119      	bne.n	4a9e <_malloc_r+0x5a>
    4a6a:	4c24      	ldr	r4, [pc, #144]	; (4afc <_malloc_r+0xb8>)
    4a6c:	6823      	ldr	r3, [r4, #0]
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d103      	bne.n	4a7a <_malloc_r+0x36>
    4a72:	0030      	movs	r0, r6
    4a74:	f000 f844 	bl	4b00 <_sbrk_r>
    4a78:	6020      	str	r0, [r4, #0]
    4a7a:	0029      	movs	r1, r5
    4a7c:	0030      	movs	r0, r6
    4a7e:	f000 f83f 	bl	4b00 <_sbrk_r>
    4a82:	1c43      	adds	r3, r0, #1
    4a84:	d12c      	bne.n	4ae0 <_malloc_r+0x9c>
    4a86:	230c      	movs	r3, #12
    4a88:	0030      	movs	r0, r6
    4a8a:	6033      	str	r3, [r6, #0]
    4a8c:	f000 f86d 	bl	4b6a <__malloc_unlock>
    4a90:	e003      	b.n	4a9a <_malloc_r+0x56>
    4a92:	2d00      	cmp	r5, #0
    4a94:	dadf      	bge.n	4a56 <_malloc_r+0x12>
    4a96:	230c      	movs	r3, #12
    4a98:	6033      	str	r3, [r6, #0]
    4a9a:	2000      	movs	r0, #0
    4a9c:	bd70      	pop	{r4, r5, r6, pc}
    4a9e:	680b      	ldr	r3, [r1, #0]
    4aa0:	1b5b      	subs	r3, r3, r5
    4aa2:	d41a      	bmi.n	4ada <_malloc_r+0x96>
    4aa4:	2b0b      	cmp	r3, #11
    4aa6:	d903      	bls.n	4ab0 <_malloc_r+0x6c>
    4aa8:	600b      	str	r3, [r1, #0]
    4aaa:	18cc      	adds	r4, r1, r3
    4aac:	6025      	str	r5, [r4, #0]
    4aae:	e003      	b.n	4ab8 <_malloc_r+0x74>
    4ab0:	428c      	cmp	r4, r1
    4ab2:	d10e      	bne.n	4ad2 <_malloc_r+0x8e>
    4ab4:	6863      	ldr	r3, [r4, #4]
    4ab6:	6013      	str	r3, [r2, #0]
    4ab8:	0030      	movs	r0, r6
    4aba:	f000 f856 	bl	4b6a <__malloc_unlock>
    4abe:	0020      	movs	r0, r4
    4ac0:	2207      	movs	r2, #7
    4ac2:	300b      	adds	r0, #11
    4ac4:	1d23      	adds	r3, r4, #4
    4ac6:	4390      	bics	r0, r2
    4ac8:	1ac3      	subs	r3, r0, r3
    4aca:	d0e7      	beq.n	4a9c <_malloc_r+0x58>
    4acc:	425a      	negs	r2, r3
    4ace:	50e2      	str	r2, [r4, r3]
    4ad0:	e7e4      	b.n	4a9c <_malloc_r+0x58>
    4ad2:	684b      	ldr	r3, [r1, #4]
    4ad4:	6063      	str	r3, [r4, #4]
    4ad6:	000c      	movs	r4, r1
    4ad8:	e7ee      	b.n	4ab8 <_malloc_r+0x74>
    4ada:	000c      	movs	r4, r1
    4adc:	6849      	ldr	r1, [r1, #4]
    4ade:	e7c2      	b.n	4a66 <_malloc_r+0x22>
    4ae0:	2303      	movs	r3, #3
    4ae2:	1cc4      	adds	r4, r0, #3
    4ae4:	439c      	bics	r4, r3
    4ae6:	42a0      	cmp	r0, r4
    4ae8:	d0e0      	beq.n	4aac <_malloc_r+0x68>
    4aea:	1a21      	subs	r1, r4, r0
    4aec:	0030      	movs	r0, r6
    4aee:	f000 f807 	bl	4b00 <_sbrk_r>
    4af2:	1c43      	adds	r3, r0, #1
    4af4:	d1da      	bne.n	4aac <_malloc_r+0x68>
    4af6:	e7c6      	b.n	4a86 <_malloc_r+0x42>
    4af8:	2000037c 	.word	0x2000037c
    4afc:	20000380 	.word	0x20000380

00004b00 <_sbrk_r>:
    4b00:	2300      	movs	r3, #0
    4b02:	b570      	push	{r4, r5, r6, lr}
    4b04:	4c06      	ldr	r4, [pc, #24]	; (4b20 <_sbrk_r+0x20>)
    4b06:	0005      	movs	r5, r0
    4b08:	0008      	movs	r0, r1
    4b0a:	6023      	str	r3, [r4, #0]
    4b0c:	f7fb fc46 	bl	39c <_sbrk>
    4b10:	1c43      	adds	r3, r0, #1
    4b12:	d103      	bne.n	4b1c <_sbrk_r+0x1c>
    4b14:	6823      	ldr	r3, [r4, #0]
    4b16:	2b00      	cmp	r3, #0
    4b18:	d000      	beq.n	4b1c <_sbrk_r+0x1c>
    4b1a:	602b      	str	r3, [r5, #0]
    4b1c:	bd70      	pop	{r4, r5, r6, pc}
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	20000434 	.word	0x20000434

00004b24 <siprintf>:
    4b24:	b40e      	push	{r1, r2, r3}
    4b26:	b510      	push	{r4, lr}
    4b28:	b09d      	sub	sp, #116	; 0x74
    4b2a:	a902      	add	r1, sp, #8
    4b2c:	9002      	str	r0, [sp, #8]
    4b2e:	6108      	str	r0, [r1, #16]
    4b30:	480b      	ldr	r0, [pc, #44]	; (4b60 <siprintf+0x3c>)
    4b32:	2482      	movs	r4, #130	; 0x82
    4b34:	6088      	str	r0, [r1, #8]
    4b36:	6148      	str	r0, [r1, #20]
    4b38:	2001      	movs	r0, #1
    4b3a:	4240      	negs	r0, r0
    4b3c:	ab1f      	add	r3, sp, #124	; 0x7c
    4b3e:	81c8      	strh	r0, [r1, #14]
    4b40:	4808      	ldr	r0, [pc, #32]	; (4b64 <siprintf+0x40>)
    4b42:	cb04      	ldmia	r3!, {r2}
    4b44:	00a4      	lsls	r4, r4, #2
    4b46:	6800      	ldr	r0, [r0, #0]
    4b48:	9301      	str	r3, [sp, #4]
    4b4a:	818c      	strh	r4, [r1, #12]
    4b4c:	f000 f870 	bl	4c30 <_svfiprintf_r>
    4b50:	2300      	movs	r3, #0
    4b52:	9a02      	ldr	r2, [sp, #8]
    4b54:	7013      	strb	r3, [r2, #0]
    4b56:	b01d      	add	sp, #116	; 0x74
    4b58:	bc10      	pop	{r4}
    4b5a:	bc08      	pop	{r3}
    4b5c:	b003      	add	sp, #12
    4b5e:	4718      	bx	r3
    4b60:	7fffffff 	.word	0x7fffffff
    4b64:	200002f4 	.word	0x200002f4

00004b68 <__malloc_lock>:
    4b68:	4770      	bx	lr

00004b6a <__malloc_unlock>:
    4b6a:	4770      	bx	lr

00004b6c <__ssputs_r>:
    4b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b6e:	688e      	ldr	r6, [r1, #8]
    4b70:	b085      	sub	sp, #20
    4b72:	0007      	movs	r7, r0
    4b74:	000c      	movs	r4, r1
    4b76:	9203      	str	r2, [sp, #12]
    4b78:	9301      	str	r3, [sp, #4]
    4b7a:	429e      	cmp	r6, r3
    4b7c:	d839      	bhi.n	4bf2 <__ssputs_r+0x86>
    4b7e:	2390      	movs	r3, #144	; 0x90
    4b80:	898a      	ldrh	r2, [r1, #12]
    4b82:	00db      	lsls	r3, r3, #3
    4b84:	421a      	tst	r2, r3
    4b86:	d034      	beq.n	4bf2 <__ssputs_r+0x86>
    4b88:	2503      	movs	r5, #3
    4b8a:	6909      	ldr	r1, [r1, #16]
    4b8c:	6823      	ldr	r3, [r4, #0]
    4b8e:	1a5b      	subs	r3, r3, r1
    4b90:	9302      	str	r3, [sp, #8]
    4b92:	6963      	ldr	r3, [r4, #20]
    4b94:	9802      	ldr	r0, [sp, #8]
    4b96:	435d      	muls	r5, r3
    4b98:	0feb      	lsrs	r3, r5, #31
    4b9a:	195d      	adds	r5, r3, r5
    4b9c:	9b01      	ldr	r3, [sp, #4]
    4b9e:	106d      	asrs	r5, r5, #1
    4ba0:	3301      	adds	r3, #1
    4ba2:	181b      	adds	r3, r3, r0
    4ba4:	42ab      	cmp	r3, r5
    4ba6:	d900      	bls.n	4baa <__ssputs_r+0x3e>
    4ba8:	001d      	movs	r5, r3
    4baa:	0553      	lsls	r3, r2, #21
    4bac:	d532      	bpl.n	4c14 <__ssputs_r+0xa8>
    4bae:	0029      	movs	r1, r5
    4bb0:	0038      	movs	r0, r7
    4bb2:	f7ff ff47 	bl	4a44 <_malloc_r>
    4bb6:	1e06      	subs	r6, r0, #0
    4bb8:	d109      	bne.n	4bce <__ssputs_r+0x62>
    4bba:	230c      	movs	r3, #12
    4bbc:	603b      	str	r3, [r7, #0]
    4bbe:	2340      	movs	r3, #64	; 0x40
    4bc0:	2001      	movs	r0, #1
    4bc2:	89a2      	ldrh	r2, [r4, #12]
    4bc4:	4240      	negs	r0, r0
    4bc6:	4313      	orrs	r3, r2
    4bc8:	81a3      	strh	r3, [r4, #12]
    4bca:	b005      	add	sp, #20
    4bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bce:	9a02      	ldr	r2, [sp, #8]
    4bd0:	6921      	ldr	r1, [r4, #16]
    4bd2:	f7ff fedb 	bl	498c <memcpy>
    4bd6:	89a3      	ldrh	r3, [r4, #12]
    4bd8:	4a14      	ldr	r2, [pc, #80]	; (4c2c <__ssputs_r+0xc0>)
    4bda:	401a      	ands	r2, r3
    4bdc:	2380      	movs	r3, #128	; 0x80
    4bde:	4313      	orrs	r3, r2
    4be0:	81a3      	strh	r3, [r4, #12]
    4be2:	9b02      	ldr	r3, [sp, #8]
    4be4:	6126      	str	r6, [r4, #16]
    4be6:	18f6      	adds	r6, r6, r3
    4be8:	6026      	str	r6, [r4, #0]
    4bea:	6165      	str	r5, [r4, #20]
    4bec:	9e01      	ldr	r6, [sp, #4]
    4bee:	1aed      	subs	r5, r5, r3
    4bf0:	60a5      	str	r5, [r4, #8]
    4bf2:	9b01      	ldr	r3, [sp, #4]
    4bf4:	42b3      	cmp	r3, r6
    4bf6:	d200      	bcs.n	4bfa <__ssputs_r+0x8e>
    4bf8:	001e      	movs	r6, r3
    4bfa:	0032      	movs	r2, r6
    4bfc:	9903      	ldr	r1, [sp, #12]
    4bfe:	6820      	ldr	r0, [r4, #0]
    4c00:	f000 faad 	bl	515e <memmove>
    4c04:	68a3      	ldr	r3, [r4, #8]
    4c06:	2000      	movs	r0, #0
    4c08:	1b9b      	subs	r3, r3, r6
    4c0a:	60a3      	str	r3, [r4, #8]
    4c0c:	6823      	ldr	r3, [r4, #0]
    4c0e:	199e      	adds	r6, r3, r6
    4c10:	6026      	str	r6, [r4, #0]
    4c12:	e7da      	b.n	4bca <__ssputs_r+0x5e>
    4c14:	002a      	movs	r2, r5
    4c16:	0038      	movs	r0, r7
    4c18:	f000 fab3 	bl	5182 <_realloc_r>
    4c1c:	1e06      	subs	r6, r0, #0
    4c1e:	d1e0      	bne.n	4be2 <__ssputs_r+0x76>
    4c20:	6921      	ldr	r1, [r4, #16]
    4c22:	0038      	movs	r0, r7
    4c24:	f7ff fec4 	bl	49b0 <_free_r>
    4c28:	e7c7      	b.n	4bba <__ssputs_r+0x4e>
    4c2a:	46c0      	nop			; (mov r8, r8)
    4c2c:	fffffb7f 	.word	0xfffffb7f

00004c30 <_svfiprintf_r>:
    4c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c32:	b09f      	sub	sp, #124	; 0x7c
    4c34:	9002      	str	r0, [sp, #8]
    4c36:	9305      	str	r3, [sp, #20]
    4c38:	898b      	ldrh	r3, [r1, #12]
    4c3a:	000f      	movs	r7, r1
    4c3c:	0016      	movs	r6, r2
    4c3e:	061b      	lsls	r3, r3, #24
    4c40:	d511      	bpl.n	4c66 <_svfiprintf_r+0x36>
    4c42:	690b      	ldr	r3, [r1, #16]
    4c44:	2b00      	cmp	r3, #0
    4c46:	d10e      	bne.n	4c66 <_svfiprintf_r+0x36>
    4c48:	2140      	movs	r1, #64	; 0x40
    4c4a:	f7ff fefb 	bl	4a44 <_malloc_r>
    4c4e:	6038      	str	r0, [r7, #0]
    4c50:	6138      	str	r0, [r7, #16]
    4c52:	2800      	cmp	r0, #0
    4c54:	d105      	bne.n	4c62 <_svfiprintf_r+0x32>
    4c56:	230c      	movs	r3, #12
    4c58:	9a02      	ldr	r2, [sp, #8]
    4c5a:	3801      	subs	r0, #1
    4c5c:	6013      	str	r3, [r2, #0]
    4c5e:	b01f      	add	sp, #124	; 0x7c
    4c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c62:	2340      	movs	r3, #64	; 0x40
    4c64:	617b      	str	r3, [r7, #20]
    4c66:	2300      	movs	r3, #0
    4c68:	ad06      	add	r5, sp, #24
    4c6a:	616b      	str	r3, [r5, #20]
    4c6c:	3320      	adds	r3, #32
    4c6e:	766b      	strb	r3, [r5, #25]
    4c70:	3310      	adds	r3, #16
    4c72:	76ab      	strb	r3, [r5, #26]
    4c74:	0034      	movs	r4, r6
    4c76:	7823      	ldrb	r3, [r4, #0]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d147      	bne.n	4d0c <_svfiprintf_r+0xdc>
    4c7c:	1ba3      	subs	r3, r4, r6
    4c7e:	9304      	str	r3, [sp, #16]
    4c80:	d00d      	beq.n	4c9e <_svfiprintf_r+0x6e>
    4c82:	1ba3      	subs	r3, r4, r6
    4c84:	0032      	movs	r2, r6
    4c86:	0039      	movs	r1, r7
    4c88:	9802      	ldr	r0, [sp, #8]
    4c8a:	f7ff ff6f 	bl	4b6c <__ssputs_r>
    4c8e:	1c43      	adds	r3, r0, #1
    4c90:	d100      	bne.n	4c94 <_svfiprintf_r+0x64>
    4c92:	e0b5      	b.n	4e00 <_svfiprintf_r+0x1d0>
    4c94:	696a      	ldr	r2, [r5, #20]
    4c96:	9b04      	ldr	r3, [sp, #16]
    4c98:	4694      	mov	ip, r2
    4c9a:	4463      	add	r3, ip
    4c9c:	616b      	str	r3, [r5, #20]
    4c9e:	7823      	ldrb	r3, [r4, #0]
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d100      	bne.n	4ca6 <_svfiprintf_r+0x76>
    4ca4:	e0ac      	b.n	4e00 <_svfiprintf_r+0x1d0>
    4ca6:	2201      	movs	r2, #1
    4ca8:	2300      	movs	r3, #0
    4caa:	4252      	negs	r2, r2
    4cac:	606a      	str	r2, [r5, #4]
    4cae:	a902      	add	r1, sp, #8
    4cb0:	3254      	adds	r2, #84	; 0x54
    4cb2:	1852      	adds	r2, r2, r1
    4cb4:	3401      	adds	r4, #1
    4cb6:	602b      	str	r3, [r5, #0]
    4cb8:	60eb      	str	r3, [r5, #12]
    4cba:	60ab      	str	r3, [r5, #8]
    4cbc:	7013      	strb	r3, [r2, #0]
    4cbe:	65ab      	str	r3, [r5, #88]	; 0x58
    4cc0:	4e58      	ldr	r6, [pc, #352]	; (4e24 <_svfiprintf_r+0x1f4>)
    4cc2:	2205      	movs	r2, #5
    4cc4:	7821      	ldrb	r1, [r4, #0]
    4cc6:	0030      	movs	r0, r6
    4cc8:	f000 fa3e 	bl	5148 <memchr>
    4ccc:	1c62      	adds	r2, r4, #1
    4cce:	2800      	cmp	r0, #0
    4cd0:	d120      	bne.n	4d14 <_svfiprintf_r+0xe4>
    4cd2:	6829      	ldr	r1, [r5, #0]
    4cd4:	06cb      	lsls	r3, r1, #27
    4cd6:	d504      	bpl.n	4ce2 <_svfiprintf_r+0xb2>
    4cd8:	2353      	movs	r3, #83	; 0x53
    4cda:	ae02      	add	r6, sp, #8
    4cdc:	3020      	adds	r0, #32
    4cde:	199b      	adds	r3, r3, r6
    4ce0:	7018      	strb	r0, [r3, #0]
    4ce2:	070b      	lsls	r3, r1, #28
    4ce4:	d504      	bpl.n	4cf0 <_svfiprintf_r+0xc0>
    4ce6:	2353      	movs	r3, #83	; 0x53
    4ce8:	202b      	movs	r0, #43	; 0x2b
    4cea:	ae02      	add	r6, sp, #8
    4cec:	199b      	adds	r3, r3, r6
    4cee:	7018      	strb	r0, [r3, #0]
    4cf0:	7823      	ldrb	r3, [r4, #0]
    4cf2:	2b2a      	cmp	r3, #42	; 0x2a
    4cf4:	d016      	beq.n	4d24 <_svfiprintf_r+0xf4>
    4cf6:	2000      	movs	r0, #0
    4cf8:	210a      	movs	r1, #10
    4cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4cfc:	7822      	ldrb	r2, [r4, #0]
    4cfe:	3a30      	subs	r2, #48	; 0x30
    4d00:	2a09      	cmp	r2, #9
    4d02:	d955      	bls.n	4db0 <_svfiprintf_r+0x180>
    4d04:	2800      	cmp	r0, #0
    4d06:	d015      	beq.n	4d34 <_svfiprintf_r+0x104>
    4d08:	9309      	str	r3, [sp, #36]	; 0x24
    4d0a:	e013      	b.n	4d34 <_svfiprintf_r+0x104>
    4d0c:	2b25      	cmp	r3, #37	; 0x25
    4d0e:	d0b5      	beq.n	4c7c <_svfiprintf_r+0x4c>
    4d10:	3401      	adds	r4, #1
    4d12:	e7b0      	b.n	4c76 <_svfiprintf_r+0x46>
    4d14:	2301      	movs	r3, #1
    4d16:	1b80      	subs	r0, r0, r6
    4d18:	4083      	lsls	r3, r0
    4d1a:	6829      	ldr	r1, [r5, #0]
    4d1c:	0014      	movs	r4, r2
    4d1e:	430b      	orrs	r3, r1
    4d20:	602b      	str	r3, [r5, #0]
    4d22:	e7cd      	b.n	4cc0 <_svfiprintf_r+0x90>
    4d24:	9b05      	ldr	r3, [sp, #20]
    4d26:	1d18      	adds	r0, r3, #4
    4d28:	681b      	ldr	r3, [r3, #0]
    4d2a:	9005      	str	r0, [sp, #20]
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	db39      	blt.n	4da4 <_svfiprintf_r+0x174>
    4d30:	9309      	str	r3, [sp, #36]	; 0x24
    4d32:	0014      	movs	r4, r2
    4d34:	7823      	ldrb	r3, [r4, #0]
    4d36:	2b2e      	cmp	r3, #46	; 0x2e
    4d38:	d10b      	bne.n	4d52 <_svfiprintf_r+0x122>
    4d3a:	7863      	ldrb	r3, [r4, #1]
    4d3c:	1c62      	adds	r2, r4, #1
    4d3e:	2b2a      	cmp	r3, #42	; 0x2a
    4d40:	d13e      	bne.n	4dc0 <_svfiprintf_r+0x190>
    4d42:	9b05      	ldr	r3, [sp, #20]
    4d44:	3402      	adds	r4, #2
    4d46:	1d1a      	adds	r2, r3, #4
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	9205      	str	r2, [sp, #20]
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	db34      	blt.n	4dba <_svfiprintf_r+0x18a>
    4d50:	9307      	str	r3, [sp, #28]
    4d52:	4e35      	ldr	r6, [pc, #212]	; (4e28 <_svfiprintf_r+0x1f8>)
    4d54:	7821      	ldrb	r1, [r4, #0]
    4d56:	2203      	movs	r2, #3
    4d58:	0030      	movs	r0, r6
    4d5a:	f000 f9f5 	bl	5148 <memchr>
    4d5e:	2800      	cmp	r0, #0
    4d60:	d006      	beq.n	4d70 <_svfiprintf_r+0x140>
    4d62:	2340      	movs	r3, #64	; 0x40
    4d64:	1b80      	subs	r0, r0, r6
    4d66:	4083      	lsls	r3, r0
    4d68:	682a      	ldr	r2, [r5, #0]
    4d6a:	3401      	adds	r4, #1
    4d6c:	4313      	orrs	r3, r2
    4d6e:	602b      	str	r3, [r5, #0]
    4d70:	7821      	ldrb	r1, [r4, #0]
    4d72:	2206      	movs	r2, #6
    4d74:	482d      	ldr	r0, [pc, #180]	; (4e2c <_svfiprintf_r+0x1fc>)
    4d76:	1c66      	adds	r6, r4, #1
    4d78:	7629      	strb	r1, [r5, #24]
    4d7a:	f000 f9e5 	bl	5148 <memchr>
    4d7e:	2800      	cmp	r0, #0
    4d80:	d046      	beq.n	4e10 <_svfiprintf_r+0x1e0>
    4d82:	4b2b      	ldr	r3, [pc, #172]	; (4e30 <_svfiprintf_r+0x200>)
    4d84:	2b00      	cmp	r3, #0
    4d86:	d12f      	bne.n	4de8 <_svfiprintf_r+0x1b8>
    4d88:	6829      	ldr	r1, [r5, #0]
    4d8a:	9b05      	ldr	r3, [sp, #20]
    4d8c:	2207      	movs	r2, #7
    4d8e:	05c9      	lsls	r1, r1, #23
    4d90:	d528      	bpl.n	4de4 <_svfiprintf_r+0x1b4>
    4d92:	189b      	adds	r3, r3, r2
    4d94:	4393      	bics	r3, r2
    4d96:	3308      	adds	r3, #8
    4d98:	9305      	str	r3, [sp, #20]
    4d9a:	696b      	ldr	r3, [r5, #20]
    4d9c:	9a03      	ldr	r2, [sp, #12]
    4d9e:	189b      	adds	r3, r3, r2
    4da0:	616b      	str	r3, [r5, #20]
    4da2:	e767      	b.n	4c74 <_svfiprintf_r+0x44>
    4da4:	425b      	negs	r3, r3
    4da6:	60eb      	str	r3, [r5, #12]
    4da8:	2302      	movs	r3, #2
    4daa:	430b      	orrs	r3, r1
    4dac:	602b      	str	r3, [r5, #0]
    4dae:	e7c0      	b.n	4d32 <_svfiprintf_r+0x102>
    4db0:	434b      	muls	r3, r1
    4db2:	3401      	adds	r4, #1
    4db4:	189b      	adds	r3, r3, r2
    4db6:	2001      	movs	r0, #1
    4db8:	e7a0      	b.n	4cfc <_svfiprintf_r+0xcc>
    4dba:	2301      	movs	r3, #1
    4dbc:	425b      	negs	r3, r3
    4dbe:	e7c7      	b.n	4d50 <_svfiprintf_r+0x120>
    4dc0:	2300      	movs	r3, #0
    4dc2:	0014      	movs	r4, r2
    4dc4:	200a      	movs	r0, #10
    4dc6:	001a      	movs	r2, r3
    4dc8:	606b      	str	r3, [r5, #4]
    4dca:	7821      	ldrb	r1, [r4, #0]
    4dcc:	3930      	subs	r1, #48	; 0x30
    4dce:	2909      	cmp	r1, #9
    4dd0:	d903      	bls.n	4dda <_svfiprintf_r+0x1aa>
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d0bd      	beq.n	4d52 <_svfiprintf_r+0x122>
    4dd6:	9207      	str	r2, [sp, #28]
    4dd8:	e7bb      	b.n	4d52 <_svfiprintf_r+0x122>
    4dda:	4342      	muls	r2, r0
    4ddc:	3401      	adds	r4, #1
    4dde:	1852      	adds	r2, r2, r1
    4de0:	2301      	movs	r3, #1
    4de2:	e7f2      	b.n	4dca <_svfiprintf_r+0x19a>
    4de4:	3307      	adds	r3, #7
    4de6:	e7d5      	b.n	4d94 <_svfiprintf_r+0x164>
    4de8:	ab05      	add	r3, sp, #20
    4dea:	9300      	str	r3, [sp, #0]
    4dec:	003a      	movs	r2, r7
    4dee:	4b11      	ldr	r3, [pc, #68]	; (4e34 <_svfiprintf_r+0x204>)
    4df0:	0029      	movs	r1, r5
    4df2:	9802      	ldr	r0, [sp, #8]
    4df4:	e000      	b.n	4df8 <_svfiprintf_r+0x1c8>
    4df6:	bf00      	nop
    4df8:	9003      	str	r0, [sp, #12]
    4dfa:	9b03      	ldr	r3, [sp, #12]
    4dfc:	3301      	adds	r3, #1
    4dfe:	d1cc      	bne.n	4d9a <_svfiprintf_r+0x16a>
    4e00:	89bb      	ldrh	r3, [r7, #12]
    4e02:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4e04:	065b      	lsls	r3, r3, #25
    4e06:	d400      	bmi.n	4e0a <_svfiprintf_r+0x1da>
    4e08:	e729      	b.n	4c5e <_svfiprintf_r+0x2e>
    4e0a:	2001      	movs	r0, #1
    4e0c:	4240      	negs	r0, r0
    4e0e:	e726      	b.n	4c5e <_svfiprintf_r+0x2e>
    4e10:	ab05      	add	r3, sp, #20
    4e12:	9300      	str	r3, [sp, #0]
    4e14:	003a      	movs	r2, r7
    4e16:	4b07      	ldr	r3, [pc, #28]	; (4e34 <_svfiprintf_r+0x204>)
    4e18:	0029      	movs	r1, r5
    4e1a:	9802      	ldr	r0, [sp, #8]
    4e1c:	f000 f87a 	bl	4f14 <_printf_i>
    4e20:	e7ea      	b.n	4df8 <_svfiprintf_r+0x1c8>
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	0001c498 	.word	0x0001c498
    4e28:	0001c49e 	.word	0x0001c49e
    4e2c:	0001c4a2 	.word	0x0001c4a2
    4e30:	00000000 	.word	0x00000000
    4e34:	00004b6d 	.word	0x00004b6d

00004e38 <_printf_common>:
    4e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e3a:	0015      	movs	r5, r2
    4e3c:	9301      	str	r3, [sp, #4]
    4e3e:	688a      	ldr	r2, [r1, #8]
    4e40:	690b      	ldr	r3, [r1, #16]
    4e42:	9000      	str	r0, [sp, #0]
    4e44:	000c      	movs	r4, r1
    4e46:	4293      	cmp	r3, r2
    4e48:	da00      	bge.n	4e4c <_printf_common+0x14>
    4e4a:	0013      	movs	r3, r2
    4e4c:	0022      	movs	r2, r4
    4e4e:	602b      	str	r3, [r5, #0]
    4e50:	3243      	adds	r2, #67	; 0x43
    4e52:	7812      	ldrb	r2, [r2, #0]
    4e54:	2a00      	cmp	r2, #0
    4e56:	d001      	beq.n	4e5c <_printf_common+0x24>
    4e58:	3301      	adds	r3, #1
    4e5a:	602b      	str	r3, [r5, #0]
    4e5c:	6823      	ldr	r3, [r4, #0]
    4e5e:	069b      	lsls	r3, r3, #26
    4e60:	d502      	bpl.n	4e68 <_printf_common+0x30>
    4e62:	682b      	ldr	r3, [r5, #0]
    4e64:	3302      	adds	r3, #2
    4e66:	602b      	str	r3, [r5, #0]
    4e68:	2706      	movs	r7, #6
    4e6a:	6823      	ldr	r3, [r4, #0]
    4e6c:	401f      	ands	r7, r3
    4e6e:	d027      	beq.n	4ec0 <_printf_common+0x88>
    4e70:	0023      	movs	r3, r4
    4e72:	3343      	adds	r3, #67	; 0x43
    4e74:	781b      	ldrb	r3, [r3, #0]
    4e76:	1e5a      	subs	r2, r3, #1
    4e78:	4193      	sbcs	r3, r2
    4e7a:	6822      	ldr	r2, [r4, #0]
    4e7c:	0692      	lsls	r2, r2, #26
    4e7e:	d430      	bmi.n	4ee2 <_printf_common+0xaa>
    4e80:	0022      	movs	r2, r4
    4e82:	9901      	ldr	r1, [sp, #4]
    4e84:	3243      	adds	r2, #67	; 0x43
    4e86:	9800      	ldr	r0, [sp, #0]
    4e88:	9e08      	ldr	r6, [sp, #32]
    4e8a:	47b0      	blx	r6
    4e8c:	1c43      	adds	r3, r0, #1
    4e8e:	d025      	beq.n	4edc <_printf_common+0xa4>
    4e90:	2306      	movs	r3, #6
    4e92:	6820      	ldr	r0, [r4, #0]
    4e94:	682a      	ldr	r2, [r5, #0]
    4e96:	68e1      	ldr	r1, [r4, #12]
    4e98:	4003      	ands	r3, r0
    4e9a:	2500      	movs	r5, #0
    4e9c:	2b04      	cmp	r3, #4
    4e9e:	d103      	bne.n	4ea8 <_printf_common+0x70>
    4ea0:	1a8d      	subs	r5, r1, r2
    4ea2:	43eb      	mvns	r3, r5
    4ea4:	17db      	asrs	r3, r3, #31
    4ea6:	401d      	ands	r5, r3
    4ea8:	68a3      	ldr	r3, [r4, #8]
    4eaa:	6922      	ldr	r2, [r4, #16]
    4eac:	4293      	cmp	r3, r2
    4eae:	dd01      	ble.n	4eb4 <_printf_common+0x7c>
    4eb0:	1a9b      	subs	r3, r3, r2
    4eb2:	18ed      	adds	r5, r5, r3
    4eb4:	2700      	movs	r7, #0
    4eb6:	42bd      	cmp	r5, r7
    4eb8:	d120      	bne.n	4efc <_printf_common+0xc4>
    4eba:	2000      	movs	r0, #0
    4ebc:	e010      	b.n	4ee0 <_printf_common+0xa8>
    4ebe:	3701      	adds	r7, #1
    4ec0:	68e3      	ldr	r3, [r4, #12]
    4ec2:	682a      	ldr	r2, [r5, #0]
    4ec4:	1a9b      	subs	r3, r3, r2
    4ec6:	429f      	cmp	r7, r3
    4ec8:	dad2      	bge.n	4e70 <_printf_common+0x38>
    4eca:	0022      	movs	r2, r4
    4ecc:	2301      	movs	r3, #1
    4ece:	3219      	adds	r2, #25
    4ed0:	9901      	ldr	r1, [sp, #4]
    4ed2:	9800      	ldr	r0, [sp, #0]
    4ed4:	9e08      	ldr	r6, [sp, #32]
    4ed6:	47b0      	blx	r6
    4ed8:	1c43      	adds	r3, r0, #1
    4eda:	d1f0      	bne.n	4ebe <_printf_common+0x86>
    4edc:	2001      	movs	r0, #1
    4ede:	4240      	negs	r0, r0
    4ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ee2:	2030      	movs	r0, #48	; 0x30
    4ee4:	18e1      	adds	r1, r4, r3
    4ee6:	3143      	adds	r1, #67	; 0x43
    4ee8:	7008      	strb	r0, [r1, #0]
    4eea:	0021      	movs	r1, r4
    4eec:	1c5a      	adds	r2, r3, #1
    4eee:	3145      	adds	r1, #69	; 0x45
    4ef0:	7809      	ldrb	r1, [r1, #0]
    4ef2:	18a2      	adds	r2, r4, r2
    4ef4:	3243      	adds	r2, #67	; 0x43
    4ef6:	3302      	adds	r3, #2
    4ef8:	7011      	strb	r1, [r2, #0]
    4efa:	e7c1      	b.n	4e80 <_printf_common+0x48>
    4efc:	0022      	movs	r2, r4
    4efe:	2301      	movs	r3, #1
    4f00:	321a      	adds	r2, #26
    4f02:	9901      	ldr	r1, [sp, #4]
    4f04:	9800      	ldr	r0, [sp, #0]
    4f06:	9e08      	ldr	r6, [sp, #32]
    4f08:	47b0      	blx	r6
    4f0a:	1c43      	adds	r3, r0, #1
    4f0c:	d0e6      	beq.n	4edc <_printf_common+0xa4>
    4f0e:	3701      	adds	r7, #1
    4f10:	e7d1      	b.n	4eb6 <_printf_common+0x7e>
	...

00004f14 <_printf_i>:
    4f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f16:	b08b      	sub	sp, #44	; 0x2c
    4f18:	9206      	str	r2, [sp, #24]
    4f1a:	000a      	movs	r2, r1
    4f1c:	3243      	adds	r2, #67	; 0x43
    4f1e:	9307      	str	r3, [sp, #28]
    4f20:	9005      	str	r0, [sp, #20]
    4f22:	9204      	str	r2, [sp, #16]
    4f24:	7e0a      	ldrb	r2, [r1, #24]
    4f26:	000c      	movs	r4, r1
    4f28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4f2a:	2a6e      	cmp	r2, #110	; 0x6e
    4f2c:	d100      	bne.n	4f30 <_printf_i+0x1c>
    4f2e:	e08f      	b.n	5050 <_printf_i+0x13c>
    4f30:	d817      	bhi.n	4f62 <_printf_i+0x4e>
    4f32:	2a63      	cmp	r2, #99	; 0x63
    4f34:	d02c      	beq.n	4f90 <_printf_i+0x7c>
    4f36:	d808      	bhi.n	4f4a <_printf_i+0x36>
    4f38:	2a00      	cmp	r2, #0
    4f3a:	d100      	bne.n	4f3e <_printf_i+0x2a>
    4f3c:	e099      	b.n	5072 <_printf_i+0x15e>
    4f3e:	2a58      	cmp	r2, #88	; 0x58
    4f40:	d054      	beq.n	4fec <_printf_i+0xd8>
    4f42:	0026      	movs	r6, r4
    4f44:	3642      	adds	r6, #66	; 0x42
    4f46:	7032      	strb	r2, [r6, #0]
    4f48:	e029      	b.n	4f9e <_printf_i+0x8a>
    4f4a:	2a64      	cmp	r2, #100	; 0x64
    4f4c:	d001      	beq.n	4f52 <_printf_i+0x3e>
    4f4e:	2a69      	cmp	r2, #105	; 0x69
    4f50:	d1f7      	bne.n	4f42 <_printf_i+0x2e>
    4f52:	6821      	ldr	r1, [r4, #0]
    4f54:	681a      	ldr	r2, [r3, #0]
    4f56:	0608      	lsls	r0, r1, #24
    4f58:	d523      	bpl.n	4fa2 <_printf_i+0x8e>
    4f5a:	1d11      	adds	r1, r2, #4
    4f5c:	6019      	str	r1, [r3, #0]
    4f5e:	6815      	ldr	r5, [r2, #0]
    4f60:	e025      	b.n	4fae <_printf_i+0x9a>
    4f62:	2a73      	cmp	r2, #115	; 0x73
    4f64:	d100      	bne.n	4f68 <_printf_i+0x54>
    4f66:	e088      	b.n	507a <_printf_i+0x166>
    4f68:	d808      	bhi.n	4f7c <_printf_i+0x68>
    4f6a:	2a6f      	cmp	r2, #111	; 0x6f
    4f6c:	d029      	beq.n	4fc2 <_printf_i+0xae>
    4f6e:	2a70      	cmp	r2, #112	; 0x70
    4f70:	d1e7      	bne.n	4f42 <_printf_i+0x2e>
    4f72:	2220      	movs	r2, #32
    4f74:	6809      	ldr	r1, [r1, #0]
    4f76:	430a      	orrs	r2, r1
    4f78:	6022      	str	r2, [r4, #0]
    4f7a:	e003      	b.n	4f84 <_printf_i+0x70>
    4f7c:	2a75      	cmp	r2, #117	; 0x75
    4f7e:	d020      	beq.n	4fc2 <_printf_i+0xae>
    4f80:	2a78      	cmp	r2, #120	; 0x78
    4f82:	d1de      	bne.n	4f42 <_printf_i+0x2e>
    4f84:	0022      	movs	r2, r4
    4f86:	2178      	movs	r1, #120	; 0x78
    4f88:	3245      	adds	r2, #69	; 0x45
    4f8a:	7011      	strb	r1, [r2, #0]
    4f8c:	4a6c      	ldr	r2, [pc, #432]	; (5140 <_printf_i+0x22c>)
    4f8e:	e030      	b.n	4ff2 <_printf_i+0xde>
    4f90:	000e      	movs	r6, r1
    4f92:	681a      	ldr	r2, [r3, #0]
    4f94:	3642      	adds	r6, #66	; 0x42
    4f96:	1d11      	adds	r1, r2, #4
    4f98:	6019      	str	r1, [r3, #0]
    4f9a:	6813      	ldr	r3, [r2, #0]
    4f9c:	7033      	strb	r3, [r6, #0]
    4f9e:	2301      	movs	r3, #1
    4fa0:	e079      	b.n	5096 <_printf_i+0x182>
    4fa2:	0649      	lsls	r1, r1, #25
    4fa4:	d5d9      	bpl.n	4f5a <_printf_i+0x46>
    4fa6:	1d11      	adds	r1, r2, #4
    4fa8:	6019      	str	r1, [r3, #0]
    4faa:	2300      	movs	r3, #0
    4fac:	5ed5      	ldrsh	r5, [r2, r3]
    4fae:	2d00      	cmp	r5, #0
    4fb0:	da03      	bge.n	4fba <_printf_i+0xa6>
    4fb2:	232d      	movs	r3, #45	; 0x2d
    4fb4:	9a04      	ldr	r2, [sp, #16]
    4fb6:	426d      	negs	r5, r5
    4fb8:	7013      	strb	r3, [r2, #0]
    4fba:	4b62      	ldr	r3, [pc, #392]	; (5144 <_printf_i+0x230>)
    4fbc:	270a      	movs	r7, #10
    4fbe:	9303      	str	r3, [sp, #12]
    4fc0:	e02f      	b.n	5022 <_printf_i+0x10e>
    4fc2:	6820      	ldr	r0, [r4, #0]
    4fc4:	6819      	ldr	r1, [r3, #0]
    4fc6:	0605      	lsls	r5, r0, #24
    4fc8:	d503      	bpl.n	4fd2 <_printf_i+0xbe>
    4fca:	1d08      	adds	r0, r1, #4
    4fcc:	6018      	str	r0, [r3, #0]
    4fce:	680d      	ldr	r5, [r1, #0]
    4fd0:	e005      	b.n	4fde <_printf_i+0xca>
    4fd2:	0640      	lsls	r0, r0, #25
    4fd4:	d5f9      	bpl.n	4fca <_printf_i+0xb6>
    4fd6:	680d      	ldr	r5, [r1, #0]
    4fd8:	1d08      	adds	r0, r1, #4
    4fda:	6018      	str	r0, [r3, #0]
    4fdc:	b2ad      	uxth	r5, r5
    4fde:	4b59      	ldr	r3, [pc, #356]	; (5144 <_printf_i+0x230>)
    4fe0:	2708      	movs	r7, #8
    4fe2:	9303      	str	r3, [sp, #12]
    4fe4:	2a6f      	cmp	r2, #111	; 0x6f
    4fe6:	d018      	beq.n	501a <_printf_i+0x106>
    4fe8:	270a      	movs	r7, #10
    4fea:	e016      	b.n	501a <_printf_i+0x106>
    4fec:	3145      	adds	r1, #69	; 0x45
    4fee:	700a      	strb	r2, [r1, #0]
    4ff0:	4a54      	ldr	r2, [pc, #336]	; (5144 <_printf_i+0x230>)
    4ff2:	9203      	str	r2, [sp, #12]
    4ff4:	681a      	ldr	r2, [r3, #0]
    4ff6:	6821      	ldr	r1, [r4, #0]
    4ff8:	1d10      	adds	r0, r2, #4
    4ffa:	6018      	str	r0, [r3, #0]
    4ffc:	6815      	ldr	r5, [r2, #0]
    4ffe:	0608      	lsls	r0, r1, #24
    5000:	d522      	bpl.n	5048 <_printf_i+0x134>
    5002:	07cb      	lsls	r3, r1, #31
    5004:	d502      	bpl.n	500c <_printf_i+0xf8>
    5006:	2320      	movs	r3, #32
    5008:	4319      	orrs	r1, r3
    500a:	6021      	str	r1, [r4, #0]
    500c:	2710      	movs	r7, #16
    500e:	2d00      	cmp	r5, #0
    5010:	d103      	bne.n	501a <_printf_i+0x106>
    5012:	2320      	movs	r3, #32
    5014:	6822      	ldr	r2, [r4, #0]
    5016:	439a      	bics	r2, r3
    5018:	6022      	str	r2, [r4, #0]
    501a:	0023      	movs	r3, r4
    501c:	2200      	movs	r2, #0
    501e:	3343      	adds	r3, #67	; 0x43
    5020:	701a      	strb	r2, [r3, #0]
    5022:	6863      	ldr	r3, [r4, #4]
    5024:	60a3      	str	r3, [r4, #8]
    5026:	2b00      	cmp	r3, #0
    5028:	db5c      	blt.n	50e4 <_printf_i+0x1d0>
    502a:	2204      	movs	r2, #4
    502c:	6821      	ldr	r1, [r4, #0]
    502e:	4391      	bics	r1, r2
    5030:	6021      	str	r1, [r4, #0]
    5032:	2d00      	cmp	r5, #0
    5034:	d158      	bne.n	50e8 <_printf_i+0x1d4>
    5036:	9e04      	ldr	r6, [sp, #16]
    5038:	2b00      	cmp	r3, #0
    503a:	d064      	beq.n	5106 <_printf_i+0x1f2>
    503c:	0026      	movs	r6, r4
    503e:	9b03      	ldr	r3, [sp, #12]
    5040:	3642      	adds	r6, #66	; 0x42
    5042:	781b      	ldrb	r3, [r3, #0]
    5044:	7033      	strb	r3, [r6, #0]
    5046:	e05e      	b.n	5106 <_printf_i+0x1f2>
    5048:	0648      	lsls	r0, r1, #25
    504a:	d5da      	bpl.n	5002 <_printf_i+0xee>
    504c:	b2ad      	uxth	r5, r5
    504e:	e7d8      	b.n	5002 <_printf_i+0xee>
    5050:	6809      	ldr	r1, [r1, #0]
    5052:	681a      	ldr	r2, [r3, #0]
    5054:	0608      	lsls	r0, r1, #24
    5056:	d505      	bpl.n	5064 <_printf_i+0x150>
    5058:	1d11      	adds	r1, r2, #4
    505a:	6019      	str	r1, [r3, #0]
    505c:	6813      	ldr	r3, [r2, #0]
    505e:	6962      	ldr	r2, [r4, #20]
    5060:	601a      	str	r2, [r3, #0]
    5062:	e006      	b.n	5072 <_printf_i+0x15e>
    5064:	0649      	lsls	r1, r1, #25
    5066:	d5f7      	bpl.n	5058 <_printf_i+0x144>
    5068:	1d11      	adds	r1, r2, #4
    506a:	6019      	str	r1, [r3, #0]
    506c:	6813      	ldr	r3, [r2, #0]
    506e:	8aa2      	ldrh	r2, [r4, #20]
    5070:	801a      	strh	r2, [r3, #0]
    5072:	2300      	movs	r3, #0
    5074:	9e04      	ldr	r6, [sp, #16]
    5076:	6123      	str	r3, [r4, #16]
    5078:	e054      	b.n	5124 <_printf_i+0x210>
    507a:	681a      	ldr	r2, [r3, #0]
    507c:	1d11      	adds	r1, r2, #4
    507e:	6019      	str	r1, [r3, #0]
    5080:	6816      	ldr	r6, [r2, #0]
    5082:	2100      	movs	r1, #0
    5084:	6862      	ldr	r2, [r4, #4]
    5086:	0030      	movs	r0, r6
    5088:	f000 f85e 	bl	5148 <memchr>
    508c:	2800      	cmp	r0, #0
    508e:	d001      	beq.n	5094 <_printf_i+0x180>
    5090:	1b80      	subs	r0, r0, r6
    5092:	6060      	str	r0, [r4, #4]
    5094:	6863      	ldr	r3, [r4, #4]
    5096:	6123      	str	r3, [r4, #16]
    5098:	2300      	movs	r3, #0
    509a:	9a04      	ldr	r2, [sp, #16]
    509c:	7013      	strb	r3, [r2, #0]
    509e:	e041      	b.n	5124 <_printf_i+0x210>
    50a0:	6923      	ldr	r3, [r4, #16]
    50a2:	0032      	movs	r2, r6
    50a4:	9906      	ldr	r1, [sp, #24]
    50a6:	9805      	ldr	r0, [sp, #20]
    50a8:	9d07      	ldr	r5, [sp, #28]
    50aa:	47a8      	blx	r5
    50ac:	1c43      	adds	r3, r0, #1
    50ae:	d043      	beq.n	5138 <_printf_i+0x224>
    50b0:	6823      	ldr	r3, [r4, #0]
    50b2:	2500      	movs	r5, #0
    50b4:	079b      	lsls	r3, r3, #30
    50b6:	d40f      	bmi.n	50d8 <_printf_i+0x1c4>
    50b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    50ba:	68e0      	ldr	r0, [r4, #12]
    50bc:	4298      	cmp	r0, r3
    50be:	da3d      	bge.n	513c <_printf_i+0x228>
    50c0:	0018      	movs	r0, r3
    50c2:	e03b      	b.n	513c <_printf_i+0x228>
    50c4:	0022      	movs	r2, r4
    50c6:	2301      	movs	r3, #1
    50c8:	3219      	adds	r2, #25
    50ca:	9906      	ldr	r1, [sp, #24]
    50cc:	9805      	ldr	r0, [sp, #20]
    50ce:	9e07      	ldr	r6, [sp, #28]
    50d0:	47b0      	blx	r6
    50d2:	1c43      	adds	r3, r0, #1
    50d4:	d030      	beq.n	5138 <_printf_i+0x224>
    50d6:	3501      	adds	r5, #1
    50d8:	68e3      	ldr	r3, [r4, #12]
    50da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    50dc:	1a9b      	subs	r3, r3, r2
    50de:	429d      	cmp	r5, r3
    50e0:	dbf0      	blt.n	50c4 <_printf_i+0x1b0>
    50e2:	e7e9      	b.n	50b8 <_printf_i+0x1a4>
    50e4:	2d00      	cmp	r5, #0
    50e6:	d0a9      	beq.n	503c <_printf_i+0x128>
    50e8:	9e04      	ldr	r6, [sp, #16]
    50ea:	0028      	movs	r0, r5
    50ec:	0039      	movs	r1, r7
    50ee:	f7ff fc19 	bl	4924 <__aeabi_uidivmod>
    50f2:	9b03      	ldr	r3, [sp, #12]
    50f4:	3e01      	subs	r6, #1
    50f6:	5c5b      	ldrb	r3, [r3, r1]
    50f8:	0028      	movs	r0, r5
    50fa:	7033      	strb	r3, [r6, #0]
    50fc:	0039      	movs	r1, r7
    50fe:	f7ff fb8b 	bl	4818 <__udivsi3>
    5102:	1e05      	subs	r5, r0, #0
    5104:	d1f1      	bne.n	50ea <_printf_i+0x1d6>
    5106:	2f08      	cmp	r7, #8
    5108:	d109      	bne.n	511e <_printf_i+0x20a>
    510a:	6823      	ldr	r3, [r4, #0]
    510c:	07db      	lsls	r3, r3, #31
    510e:	d506      	bpl.n	511e <_printf_i+0x20a>
    5110:	6863      	ldr	r3, [r4, #4]
    5112:	6922      	ldr	r2, [r4, #16]
    5114:	4293      	cmp	r3, r2
    5116:	dc02      	bgt.n	511e <_printf_i+0x20a>
    5118:	2330      	movs	r3, #48	; 0x30
    511a:	3e01      	subs	r6, #1
    511c:	7033      	strb	r3, [r6, #0]
    511e:	9b04      	ldr	r3, [sp, #16]
    5120:	1b9b      	subs	r3, r3, r6
    5122:	6123      	str	r3, [r4, #16]
    5124:	9b07      	ldr	r3, [sp, #28]
    5126:	aa09      	add	r2, sp, #36	; 0x24
    5128:	9300      	str	r3, [sp, #0]
    512a:	0021      	movs	r1, r4
    512c:	9b06      	ldr	r3, [sp, #24]
    512e:	9805      	ldr	r0, [sp, #20]
    5130:	f7ff fe82 	bl	4e38 <_printf_common>
    5134:	1c43      	adds	r3, r0, #1
    5136:	d1b3      	bne.n	50a0 <_printf_i+0x18c>
    5138:	2001      	movs	r0, #1
    513a:	4240      	negs	r0, r0
    513c:	b00b      	add	sp, #44	; 0x2c
    513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5140:	0001c4ba 	.word	0x0001c4ba
    5144:	0001c4a9 	.word	0x0001c4a9

00005148 <memchr>:
    5148:	b2c9      	uxtb	r1, r1
    514a:	1882      	adds	r2, r0, r2
    514c:	4290      	cmp	r0, r2
    514e:	d101      	bne.n	5154 <memchr+0xc>
    5150:	2000      	movs	r0, #0
    5152:	4770      	bx	lr
    5154:	7803      	ldrb	r3, [r0, #0]
    5156:	428b      	cmp	r3, r1
    5158:	d0fb      	beq.n	5152 <memchr+0xa>
    515a:	3001      	adds	r0, #1
    515c:	e7f6      	b.n	514c <memchr+0x4>

0000515e <memmove>:
    515e:	b510      	push	{r4, lr}
    5160:	4288      	cmp	r0, r1
    5162:	d902      	bls.n	516a <memmove+0xc>
    5164:	188b      	adds	r3, r1, r2
    5166:	4298      	cmp	r0, r3
    5168:	d308      	bcc.n	517c <memmove+0x1e>
    516a:	2300      	movs	r3, #0
    516c:	429a      	cmp	r2, r3
    516e:	d007      	beq.n	5180 <memmove+0x22>
    5170:	5ccc      	ldrb	r4, [r1, r3]
    5172:	54c4      	strb	r4, [r0, r3]
    5174:	3301      	adds	r3, #1
    5176:	e7f9      	b.n	516c <memmove+0xe>
    5178:	5c8b      	ldrb	r3, [r1, r2]
    517a:	5483      	strb	r3, [r0, r2]
    517c:	3a01      	subs	r2, #1
    517e:	d2fb      	bcs.n	5178 <memmove+0x1a>
    5180:	bd10      	pop	{r4, pc}

00005182 <_realloc_r>:
    5182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5184:	0007      	movs	r7, r0
    5186:	000d      	movs	r5, r1
    5188:	0016      	movs	r6, r2
    518a:	2900      	cmp	r1, #0
    518c:	d105      	bne.n	519a <_realloc_r+0x18>
    518e:	0011      	movs	r1, r2
    5190:	f7ff fc58 	bl	4a44 <_malloc_r>
    5194:	0004      	movs	r4, r0
    5196:	0020      	movs	r0, r4
    5198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    519a:	2a00      	cmp	r2, #0
    519c:	d103      	bne.n	51a6 <_realloc_r+0x24>
    519e:	f7ff fc07 	bl	49b0 <_free_r>
    51a2:	0034      	movs	r4, r6
    51a4:	e7f7      	b.n	5196 <_realloc_r+0x14>
    51a6:	f000 f812 	bl	51ce <_malloc_usable_size_r>
    51aa:	002c      	movs	r4, r5
    51ac:	4286      	cmp	r6, r0
    51ae:	d9f2      	bls.n	5196 <_realloc_r+0x14>
    51b0:	0031      	movs	r1, r6
    51b2:	0038      	movs	r0, r7
    51b4:	f7ff fc46 	bl	4a44 <_malloc_r>
    51b8:	1e04      	subs	r4, r0, #0
    51ba:	d0ec      	beq.n	5196 <_realloc_r+0x14>
    51bc:	0029      	movs	r1, r5
    51be:	0032      	movs	r2, r6
    51c0:	f7ff fbe4 	bl	498c <memcpy>
    51c4:	0029      	movs	r1, r5
    51c6:	0038      	movs	r0, r7
    51c8:	f7ff fbf2 	bl	49b0 <_free_r>
    51cc:	e7e3      	b.n	5196 <_realloc_r+0x14>

000051ce <_malloc_usable_size_r>:
    51ce:	1f0b      	subs	r3, r1, #4
    51d0:	681b      	ldr	r3, [r3, #0]
    51d2:	1f18      	subs	r0, r3, #4
    51d4:	2b00      	cmp	r3, #0
    51d6:	da01      	bge.n	51dc <_malloc_usable_size_r+0xe>
    51d8:	580b      	ldr	r3, [r1, r0]
    51da:	18c0      	adds	r0, r0, r3
    51dc:	4770      	bx	lr
    51de:	0000      	movs	r0, r0
    51e0:	000012aa 	.word	0x000012aa
    51e4:	000012d8 	.word	0x000012d8
    51e8:	00001362 	.word	0x00001362
    51ec:	00001390 	.word	0x00001390
    51f0:	00001306 	.word	0x00001306
    51f4:	00001334 	.word	0x00001334
    51f8:	000013be 	.word	0x000013be
    51fc:	000013ec 	.word	0x000013ec
    5200:	00001428 	.word	0x00001428
    5204:	00001456 	.word	0x00001456
    5208:	000014e0 	.word	0x000014e0
    520c:	0000150e 	.word	0x0000150e
    5210:	00001484 	.word	0x00001484
    5214:	000014b2 	.word	0x000014b2
    5218:	0000153c 	.word	0x0000153c
    521c:	0000156a 	.word	0x0000156a
    5220:	000015fe 	.word	0x000015fe
    5224:	0000162c 	.word	0x0000162c
    5228:	000016b6 	.word	0x000016b6
    522c:	000016e4 	.word	0x000016e4
    5230:	0000165a 	.word	0x0000165a
    5234:	00001688 	.word	0x00001688
    5238:	00001712 	.word	0x00001712
    523c:	00001740 	.word	0x00001740
    5240:	0000177c 	.word	0x0000177c
    5244:	000017aa 	.word	0x000017aa
    5248:	00001834 	.word	0x00001834
    524c:	00001862 	.word	0x00001862
    5250:	000017d8 	.word	0x000017d8
    5254:	00001806 	.word	0x00001806
    5258:	00001890 	.word	0x00001890
    525c:	000018be 	.word	0x000018be
    5260:	00003ba4 	.word	0x00003ba4
    5264:	00003b9c 	.word	0x00003b9c
    5268:	00003bbc 	.word	0x00003bbc
    526c:	00003bc6 	.word	0x00003bc6
    5270:	00003bd0 	.word	0x00003bd0
    5274:	00003bda 	.word	0x00003bda
    5278:	00003be4 	.word	0x00003be4
    527c:	00003bee 	.word	0x00003bee
    5280:	00003c00 	.word	0x00003c00
    5284:	00003bf8 	.word	0x00003bf8
    5288:	00003c22 	.word	0x00003c22
    528c:	00003c2c 	.word	0x00003c2c
    5290:	00003c36 	.word	0x00003c36
    5294:	00003c40 	.word	0x00003c40
    5298:	00003c4a 	.word	0x00003c4a
    529c:	00003c54 	.word	0x00003c54
    52a0:	00003d34 	.word	0x00003d34
    52a4:	00003c7e 	.word	0x00003c7e
    52a8:	00003c98 	.word	0x00003c98
    52ac:	00003cb2 	.word	0x00003cb2
    52b0:	00003ccc 	.word	0x00003ccc
    52b4:	00003ce6 	.word	0x00003ce6
    52b8:	00003d00 	.word	0x00003d00
    52bc:	00003d1a 	.word	0x00003d1a
    52c0:	00003e0c 	.word	0x00003e0c
    52c4:	00003d48 	.word	0x00003d48
    52c8:	00003d5e 	.word	0x00003d5e
    52cc:	00003d74 	.word	0x00003d74
    52d0:	00003d8a 	.word	0x00003d8a
    52d4:	00003da0 	.word	0x00003da0
    52d8:	00003db6 	.word	0x00003db6
    52dc:	00003dcc 	.word	0x00003dcc
    52e0:	00003e14 	.word	0x00003e14
    52e4:	00003d48 	.word	0x00003d48
    52e8:	00003d5e 	.word	0x00003d5e
    52ec:	00003d74 	.word	0x00003d74
    52f0:	00003d8a 	.word	0x00003d8a
    52f4:	00003da0 	.word	0x00003da0
    52f8:	00003db6 	.word	0x00003db6
    52fc:	00003dcc 	.word	0x00003dcc
    5300:	00003e1c 	.word	0x00003e1c
    5304:	00003d48 	.word	0x00003d48
    5308:	00003d5e 	.word	0x00003d5e
    530c:	00003d74 	.word	0x00003d74
    5310:	00003d8a 	.word	0x00003d8a
    5314:	00003da0 	.word	0x00003da0
    5318:	00003db6 	.word	0x00003db6
    531c:	00003dcc 	.word	0x00003dcc
    5320:	00003e24 	.word	0x00003e24
    5324:	00003d48 	.word	0x00003d48
    5328:	00003d5e 	.word	0x00003d5e
    532c:	00003d74 	.word	0x00003d74
    5330:	00003d8a 	.word	0x00003d8a
    5334:	00003da0 	.word	0x00003da0
    5338:	00003db6 	.word	0x00003db6
    533c:	00003dcc 	.word	0x00003dcc
    5340:	00003e2c 	.word	0x00003e2c
    5344:	00003d48 	.word	0x00003d48
    5348:	00003d5e 	.word	0x00003d5e
    534c:	00003d74 	.word	0x00003d74
    5350:	00003d8a 	.word	0x00003d8a
    5354:	00003da0 	.word	0x00003da0
    5358:	00003db6 	.word	0x00003db6
    535c:	00003dcc 	.word	0x00003dcc
    5360:	00003e34 	.word	0x00003e34
    5364:	00003d48 	.word	0x00003d48
    5368:	00003d5e 	.word	0x00003d5e
    536c:	00003d74 	.word	0x00003d74
    5370:	00003d8a 	.word	0x00003d8a
    5374:	00003da0 	.word	0x00003da0
    5378:	00003db6 	.word	0x00003db6
    537c:	00003dcc 	.word	0x00003dcc
    5380:	00003e3c 	.word	0x00003e3c
    5384:	00003d48 	.word	0x00003d48
    5388:	00003d5e 	.word	0x00003d5e
    538c:	00003d74 	.word	0x00003d74
    5390:	00003d8a 	.word	0x00003d8a
    5394:	00003da0 	.word	0x00003da0
    5398:	00003db6 	.word	0x00003db6
    539c:	00003dcc 	.word	0x00003dcc
    53a0:	00003de2 	.word	0x00003de2
    53a4:	00003d48 	.word	0x00003d48
    53a8:	00003d5e 	.word	0x00003d5e
    53ac:	00003d74 	.word	0x00003d74
    53b0:	00003d8a 	.word	0x00003d8a
    53b4:	00003da0 	.word	0x00003da0
    53b8:	00003db6 	.word	0x00003db6
    53bc:	00003dcc 	.word	0x00003dcc
    53c0:	00003dee 	.word	0x00003dee
    53c4:	00003e0c 	.word	0x00003e0c
    53c8:	00003e14 	.word	0x00003e14
    53cc:	00003e1c 	.word	0x00003e1c
    53d0:	00003e24 	.word	0x00003e24
    53d4:	00003e2c 	.word	0x00003e2c
    53d8:	00003e34 	.word	0x00003e34
    53dc:	00003e3c 	.word	0x00003e3c
    53e0:	00003dee 	.word	0x00003dee
    53e4:	00003e0c 	.word	0x00003e0c
    53e8:	00003e14 	.word	0x00003e14
    53ec:	00003e1c 	.word	0x00003e1c
    53f0:	00003e24 	.word	0x00003e24
    53f4:	00003e2c 	.word	0x00003e2c
    53f8:	00003e34 	.word	0x00003e34
    53fc:	00003e3c 	.word	0x00003e3c
    5400:	00003dee 	.word	0x00003dee
    5404:	00003e0c 	.word	0x00003e0c
    5408:	00003e14 	.word	0x00003e14
    540c:	00003e1c 	.word	0x00003e1c
    5410:	00003e24 	.word	0x00003e24
    5414:	00003e2c 	.word	0x00003e2c
    5418:	00003e34 	.word	0x00003e34
    541c:	00003e3c 	.word	0x00003e3c
    5420:	00003dee 	.word	0x00003dee
    5424:	00003e0c 	.word	0x00003e0c
    5428:	00003e14 	.word	0x00003e14
    542c:	00003e1c 	.word	0x00003e1c
    5430:	00003e24 	.word	0x00003e24
    5434:	00003e2c 	.word	0x00003e2c
    5438:	00003e34 	.word	0x00003e34
    543c:	00003e3c 	.word	0x00003e3c
    5440:	00003dee 	.word	0x00003dee
    5444:	00003e0c 	.word	0x00003e0c
    5448:	00003e14 	.word	0x00003e14
    544c:	00003e1c 	.word	0x00003e1c
    5450:	00003e24 	.word	0x00003e24
    5454:	00003e2c 	.word	0x00003e2c
    5458:	00003e34 	.word	0x00003e34
    545c:	00003e3c 	.word	0x00003e3c
    5460:	00003dee 	.word	0x00003dee
    5464:	00003e0c 	.word	0x00003e0c
    5468:	00003e14 	.word	0x00003e14
    546c:	00003e1c 	.word	0x00003e1c
    5470:	00003e24 	.word	0x00003e24
    5474:	00003e2c 	.word	0x00003e2c
    5478:	00003e34 	.word	0x00003e34
    547c:	00003e3c 	.word	0x00003e3c
    5480:	00003dee 	.word	0x00003dee
    5484:	00003e0c 	.word	0x00003e0c
    5488:	00003e14 	.word	0x00003e14
    548c:	00003e1c 	.word	0x00003e1c
    5490:	00003e24 	.word	0x00003e24
    5494:	00003e2c 	.word	0x00003e2c
    5498:	00003e34 	.word	0x00003e34
    549c:	00003e3c 	.word	0x00003e3c
    54a0:	00003dee 	.word	0x00003dee
    54a4:	00003e0c 	.word	0x00003e0c
    54a8:	00003e14 	.word	0x00003e14
    54ac:	00003e1c 	.word	0x00003e1c
    54b0:	00003e24 	.word	0x00003e24
    54b4:	00003e2c 	.word	0x00003e2c
    54b8:	00003e34 	.word	0x00003e34
    54bc:	00003e3c 	.word	0x00003e3c
    54c0:	00003f16 	.word	0x00003f16
    54c4:	00003f0e 	.word	0x00003f0e
    54c8:	00003fce 	.word	0x00003fce
    54cc:	00003fe0 	.word	0x00003fe0
    54d0:	00003ff2 	.word	0x00003ff2
    54d4:	00004004 	.word	0x00004004
    54d8:	00004016 	.word	0x00004016
    54dc:	00004028 	.word	0x00004028
    54e0:	0000409c 	.word	0x0000409c
    54e4:	000040b0 	.word	0x000040b0
    54e8:	000040d8 	.word	0x000040d8
    54ec:	000040c4 	.word	0x000040c4
    54f0:	000040ec 	.word	0x000040ec
    54f4:	00004100 	.word	0x00004100
    54f8:	00004114 	.word	0x00004114
    54fc:	00004128 	.word	0x00004128
    5500:	000042de 	.word	0x000042de
    5504:	000042ea 	.word	0x000042ea
    5508:	00004302 	.word	0x00004302
    550c:	000042f6 	.word	0x000042f6
    5510:	0000430e 	.word	0x0000430e
    5514:	0000431a 	.word	0x0000431a
    5518:	00004326 	.word	0x00004326
    551c:	00004332 	.word	0x00004332

00005520 <ET011TT2_KWVCOM_GU_LUT>:
	...
    552c:	0c000000 00000000 00000000 00000000     ................
    553c:	00000000                                ....

00005540 <ET011TT2_KW_GU_LUT>:
    5540:	80000001 80000001 80000001 80000001     ................
    5550:	80000001 80000001 80000001 80000001     ................
    5560:	80000001 80000001 40000002 40000002     ...........@...@
    5570:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5580:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5590:	40000002 40000002 40000002 40000002     ...@...@...@...@
    55a0:	40000002 40000002 40000002 40000002     ...@...@...@...@
    55b0:	40000002 40000002 40000002 40000002     ...@...@...@...@
    55c0:	40000002 40000002 40000002 40000002     ...@...@...@...@
    55d0:	40000002 40000002 40000002 40000002     ...@...@...@...@
    55e0:	40000002 40000002 40000002 40000002     ...@...@...@...@
    55f0:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5600:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5610:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5620:	40000002 40000002 40000002 40000002     ...@...@...@...@
    5630:	00000000 ffffffff 00000000 00000000     ................
	...

00005740 <ET011TT2_FT_LUT>:
	...

000057c0 <ET011TT2_KWVCOM_A2_LUT>:
	...
    57c8:	000000c0 00000000 00000000 00000000     ................
	...

000057e0 <ET011TT2_KW_A2_LUT>:
    57e0:	a9a9a9a9 a9a9a9a9 a9a9a9a9 a9a9a9a9     ................
    57f0:	a9a9a9a9 a9a9a9a9 a1a9a9a9 a129a9a9     ..............).
    5800:	8121a9a8 8105a9a8 0505a1a8 150580a8     ..!.............
    5810:	54150088 54040480 54145482 54145642     ...T...T.T.TBV.T
    5820:	54565646 54565646 56565656 56565656     FVVTFVVTVVVVVVVV
    5830:	52525656 52525656 52525656 52525256     VVRRVVRRVVRRVRRR
    5840:	52525256 42525252 42525252 4a4a4a5a     VRRRRRRBRRRBZJJJ
    5850:	6a6a6a6a 6a6a6a6a 00000000 ffffffff     jjjjjjjj........
	...

000059e0 <ED037TC1_A2_LUT>:
    59e0:	0000052a 00000000 2a050000 00000000     *..........*....
    59f0:	00000000 0000152a 00000000 0a050000     ....*...........
	...
    5a10:	02000000 02000a03 00050a06 00000000     ................
	...
    5a44:	22222222 00000022                       """""...

00005a4c <ED037TC1_DU_LUT>:
	...
    5a54:	2a010000 00000000 00000000 0000550a     ...*.........U..
	...
    5a80:	05000505 00050503 00000000 00000000     ................
	...
    5ab0:	22222222 00000022                       """""...

00005ab8 <SSD1608_A45_IU_LUT>:
    5ab8:	18181824 10181800 00000008 00000000     $...............
    5ac8:	00000000 11111141 00000001 00000000     ....A...........

00005ad8 <SSD1608_A05_IU_LUT>:
    5ad8:	28181810 18181818 00000008 00000000     ...(............
    5ae8:	00000000 13221233 00000011 00000000     ....3.".........

00005af8 <ED028TC1_WF_LUT>:
    5af8:	0011042e 00000000 00000000 00000000     ................
    5b08:	00000010 00000100 00000100 10040100     ................
    5b18:	00440100 00400000 00000000 00400000     ..D...@.......@.
    5b28:	00000000 10400100 10400500 00000000     ......@...@.....
    5b38:	00511400 00000000 00000000 00000010     ..Q.............
    5b48:	00000010 00400100 00401100 10040100     ......@...@.....
    5b58:	00440100 00400000 00000000 10440100     ..D...@.......D.
    5b68:	00000100 10400100 10400500 00000100     ......@...@.....
    5b78:	00511500 00100000 00000010 00000010     ..Q.............
    5b88:	00000010 00400100 10401100 10040100     ......@...@.....
    5b98:	00441100 00400100 10400000 10444100     ..D...@...@..AD.
    5ba8:	00000100 10441500 10444500 00040100     ......D..ED.....
    5bb8:	00511500 00100000 00000010 00000010     ..Q.............
    5bc8:	00000010 00440100 10401100 10040100     ......D...@.....
    5bd8:	00441100 00404100 10400000 10444500     ..D..A@...@..ED.
    5be8:	10400100 10441500 10444500 10440500     ..@...D..ED...D.
    5bf8:	00512500 00100004 00000010 00400010     .%Q...........@.
    5c08:	00400010 10440100 10401500 10040500     ..@...D...@.....
    5c18:	10441100 00404100 10401100 10444500     ..D..A@...@..ED.
    5c28:	10440100 10441500 10444500 10440500     ..D...D..ED...D.
    5c38:	00512500 00541104 00400010 00400110     .%Q...T...@...@.
    5c48:	00444110 10440100 10405500 10044504     .AD...D..U@..E..
    5c58:	10445500 00444500 10401100 10444500     .UD..ED...@..ED.
    5c68:	10440100 10441500 10444500 10540500     ..D...D..ED...T.
    5c78:	00512500 00541104 00400110 00400110     .%Q...T...@...@.
    5c88:	00444110 10440500 14445500 10544504     .AD...D..UD..ET.
    5c98:	10445500 10444500 10441100 10444500     .UD..ED...D..ED.
    5ca8:	10440500 14545500 14544500 10540500     ..D..UT..ET...T.
    5cb8:	00512500 10545504 00500114 10445110     .%Q..UT...P..QD.
    5cc8:	10444114 10544500 14445504 10544504     .AD..ET..UD..ET.
    5cd8:	10445500 10444500 10445500 14544500     .UD..ED..UD..ET.
    5ce8:	14441500 14545500 14554500 14540500     ..D..UT..EU...T.
    5cf8:	00512900 10545504 10500114 10545110     .)Q..UT...P..QT.
    5d08:	10444114 10545500 14445504 14544504     .AD..UT..UD..ET.
    5d18:	14445500 14544510 10445500 14544500     .UD..ET..UD..ET.
    5d28:	14541500 14545500 14554500 14540500     ..T..UT..EU...T.
    5d38:	00512900 10545514 10500114 14545510     .)Q..UT...P..UT.
    5d48:	10444114 10545510 14545504 14544504     .AD..UT..UT..ET.
    5d58:	14445500 14544510 10545504 14544500     .UD..ET..UT..ET.
    5d68:	14541500 14545500 14555500 14540500     ..T..UT..UU...T.
    5d78:	00a12900 10545514 14500114 14545510     .)...UT...P..UT.
    5d88:	10544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    5d98:	14445510 14544510 14545504 14544500     .UD..ET..UT..ET.
    5da8:	14541500 14555500 14555511 14540511     ..T..UU..UU...T.
    5db8:	00a22a00 14545518 14500114 14545510     .*...UT...P..UT.
    5dc8:	14544114 14545514 14545504 14544514     .AT..UT..UT..ET.
    5dd8:	14545510 14544510 14545504 14544500     .UT..ET..UT..ET.
    5de8:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    5df8:	00a26a10 14555518 14544514 14545510     .j...UU..ET..UT.
    5e08:	14544114 14545514 14555514 14554515     .AT..UT..UU..EU.
    5e18:	14545511 14544511 14545515 14544501     .UT..ET..UT..ET.
    5e28:	14541511 14555501 15555511 14550511     ..T..UU..UU...U.
    5e38:	00a6aa10 14555518 14544515 14545510     .....UU..ET..UT.
    5e48:	14544514 14545514 15555514 15554515     .ET..UT..UU..EU.
    5e58:	14545515 14544515 14545515 14544501     .UT..ET..UT..ET.
    5e68:	14541511 14555511 15555511 14550511     ..T..UU..UU...U.
    5e78:	10a6aa11 15556518 14554515 14545514     .....eU..EU..UT.
    5e88:	14544514 14545514 15555515 15554515     .ET..UT..UU..EU.
    5e98:	14546515 14544515 14545515 14555511     .eT..ET..UT..UU.
    5ea8:	14545511 14555511 15555511 14550511     .UT..UU..UU...U.
    5eb8:	10a6aa11 55a9a518 14554555 14545514     .......UUEU..UT.
    5ec8:	14558515 15995515 15556515 15594515     ..U..U...eU..EY.
    5ed8:	14596515 15558515 14555515 14559511     .eY...U..UU...U.
    5ee8:	14545511 14555511 15555511 55550551     .UT..UU..UU.Q.UU
    5ef8:	10aaaa51 55a9a518 15555559 1555a515     Q......UYUU...U.
    5f08:	14998555 15995615 55556515 55595515     U....V...eUU.UYU
    5f18:	55996515 15959515 14956515 14559511     .e.U.....e....U.
    5f28:	14545611 54556511 55959551 55551551     .VT..eUTQ..UQ.UU
    5f38:	10aaaa51 55a9aa28 15955569 1595a525     Q...(..UiU..%...
    5f48:	14998569 15999615 5595aa15 55599a15     i..........U..YU
    5f58:	5599a655 55999515 1495a515 14999511     U..U...U........
    5f68:	14956611 55996911 55959951 55591551     .f...i.UQ..UQ.YU
    5f78:	54aaaa55 55a9aa28 55a59669 5599a625     U..T(..Ui..U%..U
    5f88:	54998669 5599aa19 5595aa15 65999a55     i..T...U...UU..e
    5f98:	5599aa55 55999a15 1499a555 14999615     U..U...UU.......
    5fa8:	14996651 5599aa11 5595aa55 55991551     Qf.....UU..UQ..U
    5fb8:	64aaaa55 65a9aa28 55a59669 55a9aa25     U..d(..ei..U%..U
    5fc8:	54999669 65a9aa19 6595aa19 65999a59     i..T...e...eY..e
    5fd8:	5599aa55 55999a15 2499aa55 25999a15     U..U...UU..$...%
    5fe8:	14996a55 6599aa11 65a9aa55 55991a51     Uj.....eU..eQ..U
    5ff8:	a5aaaa55 65a9aa28 65a5aa69 65a9aa69     U...(..ei..ei..e
    6008:	64a99669 65a9aa59 65a9aa59 65a99a59     i..dY..eY..eY..e
    6018:	6599aa55 55999a55 6499aa55 65999a55     U..eU..UU..dU..e
    6028:	24996a55 6599aa15 65a9aa55 55a91a51     Uj.$...eU..eQ..U
    6038:	a5aaaa55 a5aaaa68 65a9aa69 65a9aa69     U...h...i..ei..e
    6048:	65a99a69 65a9aa59 65a9aa59 65a99a59     i..eY..eY..eY..e
    6058:	65a9aa55 65a99a55 64a9aa59 65a9aa55     U..eU..eY..dU..e
    6068:	24a9aa55 65a9aa15 65a9aa55 65a91a51     U..$...eU..eQ..e
    6078:	aaaaaa55 aaaaaa68 69aaaa68 69a9aa69     U...h...h..ii..i
    6088:	65a99a69 65a9aa69 69aaaa59 65aaaa59     i..ei..eY..iY..e
    6098:	65a9aa55 65a9aa55 65a9aa59 65a9aa55     U..eU..eY..eU..e
    60a8:	64a9aa55 65a9aa55 65aaaa55 65a92a55     U..dU..eU..eU*.e
    60b8:	aaaaaa55 aaaaaaa8 6aaaaaa8 69a9aa69     U..........ji..i
    60c8:	69aaaa69 69a9aa69 69aaaa59 69aaaa59     i..ii..iY..iY..i
    60d8:	69a9aa59 69a9aa69 65aaaa59 69a9aa55     Y..ii..iY..eU..i
    60e8:	69a9aa55 69aaaa55 69aaaa55 65aa2a55     U..iU..iU..iU*.e
    60f8:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    6108:	a9aaaa68 6aaaaa68 aaaaaa68 6aaaaa68     h...h..jh...h..j
    6118:	69a9aa68 69aaaa68 69aaaa58 69aaaa54     h..ih..iX..iT..i
    6128:	69a9aa54 69aaaa54 6aaaaa54 69aa2a54     T..iT..iT..jT*.i
    6138:	aaaaaa55 aaaaaaa8 aaaaaaaa aaaaaa68     U...........h...
    6148:	a9aaaaa8 aaaaaa68 aaaaaa68 aaaaaa68     ....h...h...h...
    6158:	a9aaaa68 aaaaaa68 69aaaa68 69aaaa58     h...h...h..iX..i
    6168:	69aaaa64 a9aaaa54 aaaaaa64 69aa2a64     d..iT...d...d*.i
    6178:	aaaa9a59 aaaaaaaa aaaaaaaa aaaaaa6a     Y...........j...
    6188:	aaaaaaaa aaaaaa6a aaaaaa6a aaaaaa6a     ....j...j...j...
    6198:	aaaaaa6a aaaaaa6a 69aaaa6a 69aaaa6a     j...j...j..ij..i
    61a8:	69aaaa6a a9aaaa6a aaaaaa6a aaaa2aa6     j..ij...j....*..
    61b8:	aaaaaa68 aaaaaaaa aaaaaaaa aaaaaaaa     h...............
    61c8:	aaaaaaaa aaaaaaaa aaaaaa6a aaaaaa6a     ........j...j...
    61d8:	aaaaaaaa aaaaaa6a a9aaaaaa aaaaaa6a     ....j.......j...
    61e8:	69aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ...ij........*..
    61f8:	aaaa4aa8 aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    6208:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6218:	aaaaaaaa aaaaaa6a aaaaaaaa aaaaaaaa     ....j...........
    6228:	a9aaaaaa aaaaaa6a aaaaaaaa aaaa2aa6     ....j........*..
    6238:	aaaa4aaa aaaaaaaa aaaaaaaa aaaaaaaa     .J..............
    6248:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6258:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6268:	aaaaaaaa aaaaaa6a aaaa9aaa aaaa1aaa     ....j...........
    6278:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    6288:	aaaa6aaa aaaaaaaa aaaaaaaa aaaaaaaa     .j..............
    6298:	aaaa9aaa aaaa6aaa aaaa6aaa aaaa6aaa     .....j...j...j..
    62a8:	aaaa5aaa aaaaaaaa aaaaaaaa aaaa2aaa     .Z...........*..
    62b8:	aaaa4aaa aaaa6aaa aaaa6aaa aaaa6aaa     .J...j...j...j..
    62c8:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa6aaa     .j...j...j...j..
    62d8:	aaaa6aaa aaaa6aaa aaaa6aaa aaaa5aaa     .j...j...j...Z..
    62e8:	aaaa6aaa aaaa6aaa aaaa4aaa aaaa4aaa     .j...j...J...J..
    62f8:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa5aaa     .J...Z...Z...Z..
    6308:	aaaa6aaa aaaa6aa6 aaaa6aaa aaaa5aaa     .j...j...j...Z..
    6318:	aaaa4aaa aaaa5aaa aaaa5aaa aaaa6aaa     .J...Z...Z...j..
    6328:	aaaa49aa aaaa5aaa aa9a4aaa aaaa4aaa     .I...Z...J...J..
    6338:	aaaa52aa aa2a6aa6 aaaa6aa6 aaaa6aa6     .R...j*..j...j..
    6348:	aaaa6aa6 aaa26aaa aa9a52aa aa2a62aa     .j...j...R...b*.
    6358:	aa9a4aaa aaa26aaa aa2a6aaa aaaa4aaa     .J...j...j*..J..
    6368:	aa2a4aaa aaaa62aa aa2a4aaa aa224aaa     .J*..b...J*..J".
    6378:	aaaa12a6 6a224aaa aaaa4aaa aaaa4aaa     .....J"j.J...J..
    6388:	aa225aaa aa225aa2 6aaa62aa aa2242aa     .Z"..Z"..b.j.B".
    6398:	aaa242aa aaa242aa aa2042aa aaaa4aaa     .B...B...B ..J..
    63a8:	aa2a40aa 6aa242a6 6a0a4aaa aa124aaa     .@*..B.j.J.j.J..
    63b8:	aa5215aa aa1242a2 aa9a42a2 6a9a42a2     ..R..B...B...B.j
    63c8:	6a1262a2 aa1262a2 aa8842aa aa2042aa     .b.j.b...B...B .
    63d8:	aa0242aa 6a2242aa aa1042aa 6aaa4aa6     .B...B"j.B...J.j
    63e8:	6a1040a6 aa2242aa aa0a42a6 aa2042aa     .@.j.B"..B...B .
    63f8:	6a6216a2 2a6211a2 696a11a2 aa6211a2     ..bj..b*..ji..b.
    6408:	a96211a2 6a6251a2 2a4851a6 6a5051a6     ..b..Qbj.QH*.QPj
    6418:	6a4251a6 aa5051a6 696051a6 a95059aa     .QBj.QP..Q`i.YP.
    6428:	a96050aa 2a5251a2 2a4a51aa 694051aa     .P`..QR*.QJ*.Q@i
    6438:	aa5215a2 294216a2 aa4816a2 294216a2     ..R...B)..H...B)
    6448:	2a4016a2 a94216a2 294816aa a96016aa     ..@*..B...H)..`.
    6458:	aa4216aa 296016aa aa4016aa 2a6016a2     ..B...`)..@...`*
    6468:	2a401422 296056a2 294a56a2 aa405626     ".@*.V`).VJ)&V@.
    6478:	195555a2 1a5455a2 18545522 1a5455a2     .UU..UT."UT..UT.
    6488:	185455a2 1a5455a2 1a5455a2 1a5455a2     .UT..UT..UT..UT.
    6498:	195455a2 1a5455a2 18545522 18545522     .UT..UT."UT."UT.
    64a8:	18545522 1a5455a2 1a545522 1854552a     "UT..UT."UT.*UT.
    64b8:	2a555522 28555526 28555526 285555a6     "UU*&UU(&UU(.UU(
    64c8:	28555526 28555526 285555a6 285555a6     &UU(&UU(.UU(.UU(
    64d8:	2a555526 285555a6 28555526 28555526     &UU*.UU(&UU(&UU(
    64e8:	28555526 28555526 28555526 28555526     &UU(&UU(&UU(&UU(
    64f8:	54555526 54555506 54555506 54555506     &UUT.UUT.UUT.UUT
    6508:	54555506 54555526 54555526 54555526     .UUT&UUT&UUT&UUT
    6518:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    6528:	54555526 54555526 54555526 54555526     &UUT&UUT&UUT&UUT
    6538:	55555526 55555554 55555554 55555554     &UUUTUUUTUUUTUUU
    6548:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    6558:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    6568:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    6578:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    6588:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    6598:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    65a8:	55555554 55555554 55555554 55555554     TUUUTUUUTUUUTUUU
    65b8:	aaaa5454 aaaa54a8 aaaa54a8 aaaa54a8     TT...T...T...T..
    65c8:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    65d8:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    65e8:	aaaa54a8 aaaa54a8 aaaa54a8 aaaa54a8     .T...T...T...T..
    65f8:	000050a8 00005008 00005008 00005008     .P...P...P...P..
    6608:	00005008 00005008 00005008 00005008     .P...P...P...P..
    6618:	00005008 00005008 00005008 00005008     .P...P...P...P..
    6628:	00005008 00005008 00005008 00005008     .P...P...P...P..
    6638:	00004008 00004008 00004008 00004008     .@...@...@...@..
    6648:	00004008 00004008 00004008 00004008     .@...@...@...@..
    6658:	00004008 00004008 00004008 00004008     .@...@...@...@..
    6668:	00004008 00004008 00004008 00004008     .@...@...@...@..
    6678:	00000008 00000000 00000000 00000000     ................
	...

000066bc <eink_GSephElecLogo_2bGrey>:
	...
    6710:	ff030000 ffffffff 80ffffff 00000000     ................
	...
    672c:	aaaaaa1e aaaaaaaa 0000f0aa 00000000     ................
	...
    6744:	aa3a0000 aaaaaaaa a8aaaaaa 00000000     ..:.............
	...
    6760:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    6778:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    6794:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    67ac:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    67c8:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    67e0:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    67fc:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    6814:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    6830:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    6848:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    6864:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
    6874:	01000000 55555555 aa7a5555 aaaaaaaa     ....UUUUUUz.....
    6884:	adaaaaaa 55555555 00405555 ffff1600     ....UUUUUU@.....
    6894:	ffffffff aaaaaafa aaaaaaaa ffffafaa     ................
    68a4:	ffffffff 6f000094 ffffffff aaaaaaea     .......o........
    68b4:	aaaaaaaa aaaaaaaa aaaaaaaa 00f9afaa     ................
    68c4:	ffffff01 aaaafeff aaaaaaaa aaaaaaaa     ................
    68d4:	aaaaaaaa afaaaaaa ff0740ff faffffff     .........@......
    68e4:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    68f4:	d0ffafaa ffffff0b aaaaeaff aaaaaaaa     ................
    6904:	aaaaaaaa aaaaaaaa afaaaaaa ff0fe0ff     ................
    6914:	aaffffff aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6924:	aaaaaaaa f0ffafaa ffffff1f aaaaaafe     ................
    6934:	aaaaaaaa aaaaaaaa aaaaaaaa afaaaaaa     ................
    6944:	ff1ff4ff aafaffff aaaaaaaa aaaaaaaa     ................
    6954:	aaaaaaaa aaaaaaaa f8ffafaa ffffff2f     ............/...
    6964:	aaaaaaea aaaaaaaa aaaaaaaa aaaaaaaa     ................
    6974:	afaaaaaa ff2ff8ff aaaaffff aaaaaaaa     ....../.........
    6984:	aaaaaaaa aaaaaaaa aaaaaaaa f8ffafaa     ................
    6994:	feffff2f aaaaaaaa aaaaaaaa aaaaaaaa     /...............
    69a4:	aaaaaaaa afaaaaaa ff2ff8ff aaaafaff     ........../.....
    69b4:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    69c4:	f8ffafaa eaffff2f aaaaaaaa aaaaaaaa     ..../...........
    69d4:	aaaaaaaa aaaaaaaa afaaaaaa ff2ff8ff     ............../.
    69e4:	aaaaeaff aaaaaaaa aaaaaaaa aaaaaaaa     ................
    69f4:	aaaaaaaa f8ffafaa aaffff2f aaaaaaaa     ......../.......
    6a04:	55aaaaaa 55555555 56555555 afaaaaaa     ...UUUUUUUUV....
    6a14:	ff2ff8ff aaaaaaff aaaaaaaa 000000aa     ../.............
    6a24:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    6a34:	aaaaaaaa 00aaaaaa 00000000 05000000     ................
    6a44:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    6a54:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    6a64:	aafeff2f aaaaaaaa 00aaaaaa 00000000     /...............
    6a74:	05000000 afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    6a84:	aaaaaaaa 000000aa 00000000 aaaa0500     ................
    6a94:	f8ffafaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    6aa4:	00000000 05000000 afaaaaaa ff2ff8ff     ............../.
    6ab4:	aaaaaafe aaaaaaaa 000000aa 00000000     ................
    6ac4:	aaaa0500 f8ffafaa aafeff2f aaaaaaaa     ......../.......
    6ad4:	00aaaaaa 00000000 05000000 afaaaaaa     ................
    6ae4:	ff2ff8ff aaaaaafe aaaaaaaa 000000aa     ../.............
    6af4:	00005501 aaaa0500 f8ffafaa aafeff2f     .U........../...
    6b04:	aaaaaaaa 00aaaaaa fe5a0100 05000094     ..........Z.....
    6b14:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    6b24:	160000aa 80feffff aaaa0500 f8ffafaa     ................
    6b34:	aafeff2f aaaaaaaa 00aaaaaa ffff6f00     /............o..
    6b44:	0500d4ff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    6b54:	aaaaaaaa bf0100aa fdffffff aaaa0500     ................
    6b64:	f8ffafaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    6b74:	ffffff07 0540ffff afaaaaaa ff2ff8ff     ......@......./.
    6b84:	aaaaaafe aaaaaaaa ff1f00aa ffffffff     ................
    6b94:	aaaa05d0 f8ffafaa aafeff2f aaaaaaaa     ......../.......
    6ba4:	00aaaaaa ffffff6f 05f4ffff afaaaaaa     ....o...........
    6bb4:	ff2ff8ff aaaaaafe aaaaaaaa ffbf01aa     ../.............
    6bc4:	ffffffff aaaa05f8 f8ffafaa aafeff2f     ............/...
    6bd4:	aaaaaaaa 01aaaaaa ffffffff 05fdffff     ................
    6be4:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    6bf4:	ffff06aa ffffffff aaaa05ff f8ffafaa     ................
    6c04:	aafeff2f aaaaaaaa 06aaaaaa ffffffff     /...............
    6c14:	45ffffff afaaaaaa ff2ff8ff aaaaaafe     ...E....../.....
    6c24:	aaaaaaaa ffff07aa ffffffff aaaa85ff     ................
    6c34:	f8ffafaa aafeff2f aaaaaaaa 1baaaaaa     ..../...........
    6c44:	ffffffff c5ffffff afaaaaaa ff2ff8ff     ............../.
    6c54:	aaaaaafe aaaaaaaa ffff1baa ffebffff     ................
    6c64:	aaaac5ff f8ffafaa aafeff2f abaaaaaa     ......../.......
    6c74:	1baaaafa f9ffffff c5ff7f55 afaaaaaa     ........U.......
    6c84:	ff2ff8ff aaaaaafe aafeffbf ffff1baa     ../.............
    6c94:	1f00e4ff aaaac5ff f8ffafaa aafeff2f     ............/...
    6ca4:	ffffffab 1baaaafa 90ffffff c5ff0700     ................
    6cb4:	afaaaaaa ff2ff8ff ffafaafe aaaaaaff     ....../.........
    6cc4:	ffff1baa 010080ff aaaac5ff f8ffafaa     ................
    6cd4:	aafeff2f aabefeaf 17aaaaaa 40ffffff     /..............@
    6ce4:	85ff0000 afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    6cf4:	aaaaaabe ffff06aa 000040ff aaaa45ff     .........@...E..
    6d04:	f8ffafaa aafeff2f aabeaaaa 06aaaaaa     ..../...........
    6d14:	40ffffff 05ff0000 afaaaaaa ff2ff8ff     ...@........../.
    6d24:	aaaaaafe aaaaaafe ffff01aa 020040ff     .............@..
    6d34:	aaaa05fe f8ffafaa aafeff2f aafeaaaa     ......../.......
    6d44:	01aaaaaa d0ffffbf 05fc0300 afaaaaaa     ................
    6d54:	ff2ff8ff aaaaaafe aaaaaafe ff7f00aa     ../.............
    6d64:	0f00e4ff aaaa05f4 f8ffafaa aafeff2f     ............/...
    6d74:	aafeaaaa 00aaaaaa fdffff1f 05e07f00     ................
    6d84:	afaaaaaa ff2ff8ff aaaaaafe aaaaaafe     ....../.........
    6d94:	ff1b00aa ffffffff aaaa05c0 f8ffafaa     ................
    6da4:	aafeff2f aafeaaaa 00aaaaaa ffffff06     /...............
    6db4:	0500ffff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    6dc4:	aaaaaafe 7f0000aa f8ffffff aaaa0500     ................
    6dd4:	f8ffafaa aafeff2f aafaaaaa 00aaaaaa     ..../...........
    6de4:	ffff1b00 0500c0ff afaaaaaa ff2ff8ff     ............../.
    6df4:	aaaaaafe aaaaaafa 010000aa 40f9ffbf     ...............@
    6e04:	aaaa0500 f8ffafaa aafeff2f aafaaaaa     ......../.......
    6e14:	00aaaaaa 55050000 05000050 afaaaaaa     .......UP.......
    6e24:	ff2ff8ff aaaaaafe aaaaaafa 000000aa     ../.............
    6e34:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    6e44:	aafaabaa 00aaaaaa 00000000 05000000     ................
    6e54:	afaaaaaa ff2ff8ff abaaaafe aaaaaafa     ....../.........
    6e64:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    6e74:	aafeff2f aafaabaa 00aaaaaa 00000000     /...............
    6e84:	05000000 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    6e94:	aaaaaafa 000000aa 00000000 aaaa0500     ................
    6ea4:	f8ffafaa aafeff2f aafaabaa 00aaaaaa     ..../...........
    6eb4:	00000000 05000000 afaaaaaa ff2ff8ff     ............../.
    6ec4:	abaaaafe aaaaaafa 000000aa 00000000     ................
    6ed4:	aaaa0500 f8ffafaa aafeff2f aafaabaa     ......../.......
    6ee4:	00aaaaaa 00000000 05000000 afaaaaaa     ................
    6ef4:	ff2ff8ff abaaaafe aaaaaafa 000000aa     ../.............
    6f04:	00000000 aaaa0500 f8ffafaa aafeff2f     ............/...
    6f14:	aafaabaa 00aaaaaa 00000000 05000000     ................
    6f24:	afaaaaaa ff2ff8ff abaaaafe aaaaaafa     ....../.........
    6f34:	000000aa 00000000 aaaa0500 f8ffafaa     ................
    6f44:	aafeff2f aafaabaa 00aaaaaa 00000000     /...............
    6f54:	05000000 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    6f64:	aaaaaafa 000000aa 00000000 aaaa0500     ................
    6f74:	f8ffafaa aafeff2f aafaaaaa 00aaaaaa     ..../...........
    6f84:	54050000 05000000 afaaaaaa ff2ff8ff     ...T........../.
    6f94:	aaaaaafe aaaaaafa 010000aa 40f9ffbf     ...............@
    6fa4:	aaaa0500 f8ffafaa aafeff2f aafaaaaa     ......../.......
    6fb4:	00aaaaaa ffff1b00 0500c0ff afaaaaaa     ................
    6fc4:	ff2ff8ff aaaaaafe aaaaaafa 7f0000aa     ../.............
    6fd4:	f8ffffff aaaa0500 f8ffafaa aafeff2f     ............/...
    6fe4:	aafeaaaa 00aaaaaa ffffff06 0500ffff     ................
    6ff4:	afaaaaaa ff2ff8ff aaaaaafe aaaaaafe     ....../.........
    7004:	ff1b00aa ffffffff aaaa05c0 f8ffafaa     ................
    7014:	aafeff2f aafeaaaa 00aaaaaa ffffff1f     /...............
    7024:	05e0ffff afaaaaaa ff2ff8ff aaaaaafe     ........../.....
    7034:	aaaaaafe ff7f00aa ffffffff aaaa05f4     ................
    7044:	f8ffafaa aafeff2f aafeaaaa 01aaaaaa     ..../...........
    7054:	ffffffbf 05fcffff afaaaaaa ff2ff8ff     ............../.
    7064:	aaaaaafe aaaaaafe ffff01aa ffffffff     ................
    7074:	aaaa05fe f8ffafaa aafeff2f aafeaaaa     ......../.......
    7084:	06aaaaaa ffffffff 05ffffff afaaaaaa     ................
    7094:	ff2ff8ff aaaaaafe aaaaaabe ffff06aa     ../.............
    70a4:	ffffffff aaaa45ff f8ffafaa aafeff2f     .....E....../...
    70b4:	aabeeaab 17aaaaaa ffffffff 85ffffff     ................
    70c4:	afaaaaaa ff2ff8ff ffafaafe aaaaaaff     ....../.........
    70d4:	ffff1baa ffffffff aaaac5ff f8ffafaa     ................
    70e4:	aafeff2f ffffffab 1baaaaea feffffff     /...............
    70f4:	c5ffbf95 afaaaaaa ff2ff8ff abaaaafe     ........../.....
    7104:	aafaffff ffff1baa 1f00f4ff aaaac5ff     ................
    7114:	f8ffafaa aafeff2f bfaaaaaa 1baaaafa     ..../...........
    7124:	d0ffffff c5ff0700 afaaaaaa ff2ff8ff     ............../.
    7134:	aaaaaafe aaaaaaaa ffff1baa 030090ff     ................
    7144:	aaaac5ff f8ffafaa aafeff2f aaaaaaaa     ......../.......
    7154:	1baaaaaa 40ffffff c5ff0100 afaaaaaa     .......@........
    7164:	ff2ff8ff aaaaaafe aaaaaaaa ffff07aa     ../.............
    7174:	000040ff aaaa85ff f8ffafaa aafeff2f     .@........../...
    7184:	aaaaaaaa 06aaaaaa 40ffffff 05ff0000     ...........@....
    7194:	afaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    71a4:	ffff06aa 010040ff aaaa05ff f8ffbfaa     .....@..........
    71b4:	aafeff2f aaaaaaaa 01aaaaaa 90ffffff     /...............
    71c4:	05fd0300 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    71d4:	aaaaaaaa ffbf01aa 0b00d0ff aaaa05f8     ................
    71e4:	f8ffbfaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    71f4:	f8ffff6f 05f42f00 bfaaaaaa ff2ff8ff     o..../......../.
    7204:	aaaaaafe aaaaaaaa ff1f00aa bfaafeff     ................
    7214:	aaaa05d0 f8ffbfaa aafeff2f aaaaaaaa     ......../.......
    7224:	00aaaaaa ffffff07 0540ffff bfaaaaaa     ..........@.....
    7234:	ff2ff8ff aaaaaafe aaaaaaaa bf0100aa     ../.............
    7244:	fdffffff aaaa0500 f8ffbfaa aafeff2f     ............/...
    7254:	aaaaaaaa 00aaaaaa ffff6f00 0500d4ff     .........o......
    7264:	bfaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    7274:	160000aa 80feffff aaaa0500 f8ffbfaa     ................
    7284:	aafeff2f aaaaaaaa 00aaaaaa fe5a0100     /.............Z.
    7294:	05000094 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    72a4:	aaaaaaaa 000000aa 00005501 aaaa0500     .........U......
    72b4:	f8ffbfaa aafeff2f aaaaaaaa 00aaaaaa     ..../...........
    72c4:	00000000 05000000 bfaaaaaa ff2ff8ff     ............../.
    72d4:	aaaaaafe aaaaaaaa 000000aa 00000000     ................
    72e4:	aaaa0500 f8ffbfaa aafeff2f aaaaaaaa     ......../.......
    72f4:	00aaaaaa 00000000 05000000 bfaaaaaa     ................
    7304:	ff2ff8ff aaaaaafe aaaaaaaa 000000aa     ../.............
    7314:	00000000 aaaa0500 f8ffbfaa aafeff2f     ............/...
    7324:	aaaaaaaa 00aaaaaa 00000000 05000000     ................
    7334:	bfaaaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    7344:	000000aa 00000000 aaaa0500 f8ffbfaa     ................
    7354:	aafeff2f aaaaaaaa 00aaaaaa 00000000     /...............
    7364:	05000000 bfaaaaaa ff2ff8ff aaaaaafe     ........../.....
    7374:	aaaaaaaa 000000aa 00000000 aaaa0500     ................
    7384:	f8ffbfaa aafeff2f aaaaaaaa 55aaaaaa     ..../..........U
    7394:	55555555 56555555 ffaaaaaa ff2ff8ff     UUUUUUUV....../.
    73a4:	aaaaaafe aaaaaaaa aaaaaaaa aaaaaaaa     ................
    73b4:	aaaaaaaa f8ffffaa aafeff2f aaaaaaaa     ......../.......
    73c4:	aaaaaaaa aaaaaaaa aaaaaaaa ffabaaaa     ................
    73d4:	ff2ff8ff aaaaaafe aaaaaaaa aaaaaaaa     ../.............
    73e4:	aaaaaaaa aaaaaaaa f8ffffab aafeff2f     ............/...
    73f4:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    7404:	ffafaaaa ff2ff8ff aaaaaafe aaaaaaaa     ....../.........
    7414:	aaaaaaaa aaaaaaaa aaaaaaaa f8ffffbf     ................
    7424:	aafeff2f aaaaaaaa aaaaaaaa aaaaaaaa     /...............
    7434:	aaaaaaaa ffffaaaa ff2ff8ff aaaaaafe     ........../.....
    7444:	aaaaaaaa aaaaaaaa aaaaaaaa abaaaaaa     ................
    7454:	f8ffffff aafeff1f aaaaaaaa aaaaaaaa     ................
    7464:	aaaaaaaa aaaaaaaa ffffafaa ff0ff4ff     ................
    7474:	aaaaaafe aaaaaaaa aaaaaaaa aaaaaaaa     ................
    7484:	bfaaaaaa f0ffffff aafeff0b aaaaaaaa     ................
    7494:	aaaaaaaa aaaaaaaa aaaaaaaa ffffffaa     ................
    74a4:	ff07e0ff aaaaaafe aaaaaaaa aaaaaaaa     ................
    74b4:	aaaaaaaa ffabaaaa d0ffffff aafeff01     ................
    74c4:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
    74d4:	ffffffaf 6f0040ff aaaaaaff aaaaaaaa     .....@.o........
    74e4:	aaaaaaaa aaaaaaaa ffffabaa 00f9ffff     ................
    74f4:	ffff1600 ffffffff aaaaaafa aaaaaaaa     ................
    7504:	ffffafaa ffffffff 010000d4 55555555     ............UUUU
    7514:	aa7a5555 aaaaaaaa adaaaaaa 55555555     UUz.........UUUU
    7524:	00405555 00000000 00000000 aaaaaa7a     UU@.........z...
    7534:	aaaaaaaa 0000acaa 00000000 00000000     ................
    7544:	00000000 aa7a0000 aaaaaaaa acaaaaaa     ......z.........
	...
    7564:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    757c:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    7598:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    75b0:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    75cc:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    75e4:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    7600:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    7618:	aa7a0000 aaaaaaaa acaaaaaa 00000000     ..z.............
	...
    7634:	aaaaaa7a aaaaaaaa 0000acaa 00000000     z...............
	...
    764c:	aa3a0000 aaaaaaaa bcaaaaaa 00000000     ..:.............
	...
    7668:	aaaaaa1e aaaaaaaa 0000f0aa 00000000     ................
	...
    7680:	ff030000 ffffffff c0ffffff 00000000     ................
	...

000076fc <RobotoBold_76pt_CharCount>:
    76fc:	3c201b19 10424b3a 372e2423 261d2719     .. <:KB.#$.7.'.&
    770c:	3a3a3a3a 3a3a3a3a 1a1d3a3a 32343a33     ::::::::::..3:42
    771c:	4240445a 45373942 40381d47 46475837     ZD@BB97EG.8@7XGF
    772c:	3e404641 5842423e 1c3d3e40 2d2c1c2b     AF@>>BBX@>=.+.,-
    773c:	35393621 3a243739 361a1b39 3939571b     !69597$:9..6.W99
    774c:	34253939 4a333922 21333333 0042211a     99%4"93J333!.!B.

0000775c <RobotoBold_76pt_Table>:
	...
    794c:	80000000 000000ff e0000000 0000000f     ................
    795c:	80000000 ffffffff f000001f 0000001f     ................
    796c:	80000000 ffffffff f801ffff 0000003f     ............?...
    797c:	80000000 ffffffff fc01ffff 0000007f     ................
    798c:	80000000 ffffffff fc01ffff 0000007f     ................
    799c:	80000000 ffffffff fe01ffff 000000ff     ................
    79ac:	80000000 ffffffff fe01ffff 000000ff     ................
    79bc:	80000000 ffffffff fe01ffff 000000ff     ................
    79cc:	80000000 ffffffff fe01ffff 000000ff     ................
    79dc:	80000000 ffffffff fe01ffff 000000ff     ................
    79ec:	80000000 ffffffff fe01ffff 000000ff     ................
    79fc:	80000000 ffffffff fc01ffff 0000007f     ................
    7a0c:	80000000 ffffffff fc01ffff 0000007f     ................
    7a1c:	80000000 ffffffff f801ffff 0000003f     ............?...
    7a2c:	80000000 03ffffff f0000000 0000001f     ................
	...
    7a44:	c0000000 00000007 00000000 00000000     ................
	...
    7acc:	f8000000 003fffff 00000000 00000000     ......?.........
    7adc:	f8000000 003fffff 00000000 00000000     ......?.........
    7aec:	f8000000 003fffff 00000000 00000000     ......?.........
    7afc:	f8000000 003fffff 00000000 00000000     ......?.........
    7b0c:	f8000000 003fffff 00000000 00000000     ......?.........
    7b1c:	f8000000 003fffff 00000000 00000000     ......?.........
    7b2c:	f8000000 003fffff 00000000 00000000     ......?.........
    7b3c:	f8000000 003fffff 00000000 00000000     ......?.........
    7b4c:	f8000000 0001ffff 00000000 00000000     ................
    7b5c:	f8000000 0000003f 00000000 00000000     ....?...........
	...
    7bcc:	f8000000 003fffff 00000000 00000000     ......?.........
    7bdc:	f8000000 003fffff 00000000 00000000     ......?.........
    7bec:	f8000000 003fffff 00000000 00000000     ......?.........
    7bfc:	f8000000 003fffff 00000000 00000000     ......?.........
    7c0c:	f8000000 003fffff 00000000 00000000     ......?.........
    7c1c:	f8000000 003fffff 00000000 00000000     ......?.........
    7c2c:	f8000000 003fffff 00000000 00000000     ......?.........
    7c3c:	f8000000 003fffff 00000000 00000000     ......?.........
    7c4c:	f8000000 0001ffff 00000000 00000000     ................
    7c5c:	f8000000 0000007f 00000000 00000000     ................
	...
    7cd4:	0003fc00 00000000 00000000 00000000     ................
    7ce4:	0003fc00 00000000 00000000 00000000     ................
    7cf4:	0003fc00 00000000 00000000 00000000     ................
    7d04:	0003fc00 00000000 00000000 07f80000     ................
    7d14:	0003fc00 00000000 00000000 07f80000     ................
    7d24:	0003fc00 00000000 00000000 07f80000     ................
    7d34:	0003fc00 00000000 00000000 07f80000     ................
    7d44:	0003fc00 00000000 00000000 07f80000     ................
    7d54:	0003fc00 0000007c 00000000 07f80000     ....|...........
    7d64:	e003fc00 0000007f 00000000 07f80000     ................
    7d74:	ff83fc00 0000007f 00000000 07f80000     ................
    7d84:	fffffc00 0000007f 00000000 07f80000     ................
    7d94:	fffffc00 0000007f 00000000 07f80000     ................
    7da4:	ffffffc0 0000007f 00000000 87f80000     ................
    7db4:	ffffffff 0000007f 00000000 fff80000     ................
    7dc4:	ffffffff 0000007f 00000000 fff80000     ................
    7dd4:	ffffffff 0000007f 00000000 ffff8000     ................
    7de4:	ffffffff 00000007 00000000 fffffe00     ................
    7df4:	1fffffff 00000000 00000000 fffffff0     ................
    7e04:	007fffff 00000000 80000000 ffffffff     ................
    7e14:	0003ffff 00000000 80000000 ffffffff     ................
    7e24:	0003ffff 00000000 80000000 ffffffff     ................
    7e34:	0003fc3f 00000000 80000000 7fffffff     ?...............
    7e44:	0003fc00 00000000 80000000 07ffffff     ................
    7e54:	0003fc00 00000000 80000000 07ffffff     ................
    7e64:	0003fc00 00000000 80000000 07f87fff     ................
    7e74:	0003fc00 00000040 80000000 07f801ff     ....@...........
    7e84:	0003fc00 0000007f 80000000 07f8000f     ................
    7e94:	fc03fc00 0000007f 00000000 07f80000     ................
    7ea4:	fff3fc00 0000007f 00000000 07f80000     ................
    7eb4:	fffffc00 0000007f 00000000 07f80000     ................
    7ec4:	fffffe00 0000007f 00000000 07f80000     ................
    7ed4:	fffffff8 0000007f 00000000 e7f80000     ................
    7ee4:	ffffffff 0000007f 00000000 fff80000     ................
    7ef4:	ffffffff 0000007f 00000000 fffc0000     ................
    7f04:	ffffffff 0000003f 00000000 fffff000     ....?...........
    7f14:	ffffffff 00000000 00000000 ffffff80     ................
    7f24:	03ffffff 00000000 00000000 fffffffe     ................
    7f34:	000fffff 00000000 80000000 ffffffff     ................
    7f44:	0003ffff 00000000 80000000 ffffffff     ................
    7f54:	0003fdff 00000000 80000000 ffffffff     ................
    7f64:	0003fc07 00000000 80000000 1fffffff     ................
    7f74:	0003fc00 00000000 80000000 07ffffff     ................
    7f84:	0003fc00 00000000 80000000 07fbffff     ................
    7f94:	0003fc00 00000000 80000000 07f81fff     ................
    7fa4:	0003fc00 00000000 80000000 07f8007f     ................
    7fb4:	0003fc00 00000000 80000000 07f80001     ................
    7fc4:	0003fc00 00000000 00000000 07f80000     ................
    7fd4:	0003fc00 00000000 00000000 07f80000     ................
    7fe4:	0003fc00 00000000 00000000 07f80000     ................
    7ff4:	0003fc00 00000000 00000000 07f80000     ................
	...
    8010:	07f80000 00000000 00000000 00000000     ................
    8020:	07f80000 00000000 00000000 00000000     ................
    8030:	07f80000 00000000 00000000 00000000     ................
	...
    80b4:	00ff0000 00000000 00000000 00000000     ................
    80c4:	07ff0000 00000000 00000000 003f8000     ..............?.
    80d4:	1fff0000 00000000 00000000 03fff800     ................
    80e4:	7fff0000 00000000 00000000 0fffff00     ................
    80f4:	ffff0000 00000000 00000000 1fffff80     ................
    8104:	ffff0000 00000001 00000000 7fffffe0     ................
    8114:	ffff0000 00000003 00000000 fffffff0     ................
    8124:	ffff0000 00000007 00000000 fffffff8     ................
    8134:	ffff0001 0000000f 00000000 fffffff8     ................
    8144:	ffff0003 0000000f 00000000 fffffffc     ................
    8154:	ffff0007 0000001f 00000000 fffffffe     ................
    8164:	ffff0007 0000003f 00000000 fffffffe     ....?...........
    8174:	ffff000f 0000003f 00000000 ffffffff     ....?...........
    8184:	ffff000f 0000003f 00000000 ffffffff     ....?...........
    8194:	ffc0001f 0000007f 80000000 ffffffff     ................
    81a4:	ff00003f 0000007f 80000000 ffffffff     ?...............
    81b4:	fc00003f 0000007f 80000000 ff801fff     ?...............
    81c4:	f800003f 000000ff 80000000 fe000fff     ?...............
    81d4:	f800007f 000000ff c0000000 fc0007ff     ................
    81e4:	f000007f 000000ff c0000000 fc0003ff     ................
    81f4:	f00000ff 000000ff c0000000 f80003ff     ................
    8204:	e00000ff 0003ffff fff80000 f00001ff     ................
    8214:	e00001ff 0003ffff fff80000 f00001ff     ................
    8224:	e00001ff 0003ffff fff80000 e00001ff     ................
    8234:	e00001ff 0003ffff fff80000 e00001ff     ................
    8244:	e00003ff 0003ffff fff80000 c00001ff     ................
    8254:	e00003ff 0003ffff fff80000 c00001ff     ................
    8264:	e00007ff 0003ffff fff80000 800003ff     ................
    8274:	f00007ff 0003ffff fff80000 800003ff     ................
    8284:	f0000fff 000000ff c0000000 800007ff     ................
    8294:	f8001fff 000000ff c0000000 00000fff     ................
    82a4:	f8001fff 000000ff 80000000 00003fff     .............?..
    82b4:	fe007fff 0000007f 80000000 0000ffff     ................
    82c4:	ff81fffe 0000007f 80000000 001fffff     ................
    82d4:	fffffffe 0000007f 00000000 001fffff     ................
    82e4:	fffffffc 0000007f 00000000 001fffff     ................
    82f4:	fffffffc 0000003f 00000000 001ffffe     ....?...........
    8304:	fffffff8 0000003f 00000000 001ffffe     ....?...........
    8314:	fffffff0 0000001f 00000000 001ffffc     ................
    8324:	fffffff0 0000001f 00000000 001ffff8     ................
    8334:	ffffffe0 0000000f 00000000 001ffff0     ................
    8344:	ffffffc0 00000007 00000000 001fffe0     ................
    8354:	ffffff80 00000003 00000000 001fffc0     ................
    8364:	ffffff00 00000001 00000000 001fff80     ................
    8374:	fffffe00 00000000 00000000 001ffe00     ................
    8384:	7ffffc00 00000000 00000000 001ff800     ................
    8394:	1ffff000 00000000 00000000 001fc000     ................
    83a4:	03ff8000 00000000 00000000 00000000     ................
	...
    8450:	001fff00 00000000 00000000 00000000     ................
    8460:	007fffc0 00000000 00000000 00000000     ................
    8470:	01fffff0 00000000 00000000 00000000     ................
    8480:	03fffff8 00000000 00000000 00000000     ................
    8490:	07fffffc 00000000 00000000 00000000     ................
    84a0:	0ffffffe 00000000 00000000 00000000     ................
    84b0:	1fffffff 00000000 00000000 00000000     ................
    84c0:	1fffffff 00000000 00000000 80000000     ................
    84d0:	3fffffff 00000000 00000000 80000000     ...?............
    84e0:	3ffe0fff 00000000 00000000 80000000     ...?............
    84f0:	3ff001ff 00000000 00000000 c0000000     ...?............
    8500:	7fc0007f 40000000 00000000 c0000000     .......@........
    8510:	7fc0007f 60000000 00000000 c0000000     .......`........
    8520:	7f80003f 78000000 00000000 c0000000     ?......x........
    8530:	7f80003f fe000000 00000000 c0000000     ?...............
    8540:	7f80003f ff000000 00000000 c0000000     ?...............
    8550:	7f80003f ffc00000 00000001 c0000000     ?...............
    8560:	7f80003f ffe00000 00000003 c0000000     ?...............
    8570:	7fc0007f fff80000 00000003 c0000000     ................
    8580:	7fc0007f fffe0000 00000000 80000000     ................
    8590:	3fe000ff 7fff0000 00000000 80000000     ...?............
    85a0:	3ffc07ff 1fffc000 00000000 80000000     ...?............
    85b0:	3fffffff 07ffe000 00000000 00000000     ...?............
    85c0:	1fffffff 03fff800 00000000 00000000     ................
    85d0:	1fffffff 00fffe00 00000000 00000000     ................
    85e0:	0ffffffe 007fff00 00000000 00000000     ................
    85f0:	07fffffc 001fffc0 00000000 00000000     ................
    8600:	03fffff8 0007ffe0 00000000 00000000     ................
    8610:	01fffff0 0003fff8 00000000 00000000     ................
    8620:	00ffffc0 0000fffe 00000000 00000000     ................
    8630:	001fff00 00007fff 00000000 00000000     ................
    8640:	c0000000 00001fff 00000000 00000000     ................
    8650:	e0000000 000007ff 00000000 00000000     ................
    8660:	f8000000 000003ff 00000000 00000000     ................
    8670:	fe000000 0ff800ff 00000000 00000000     ................
    8680:	ff000000 ffff807f 00000000 00000000     ................
    8690:	ffc00000 ffffc01f 00000001 00000000     ................
    86a0:	fff00000 fffff007 00000007 00000000     ................
    86b0:	fff80000 fffff803 0000000f 00000000     ................
    86c0:	fffe0000 fffffc00 0000001f 00000000     ................
    86d0:	7fff0000 fffffc00 0000001f 00000000     ................
    86e0:	1fffc000 fffffe00 0000003f 00000000     ........?.......
    86f0:	07fff000 ffffff00 0000007f 00000000     ................
    8700:	03fff800 ffffff00 0000007f 00000000     ................
    8710:	00fffe00 e003ff00 0000007f 00000000     ................
    8720:	007fff00 c001ff80 000000ff 00000000     ................
    8730:	001fffc0 8000ff80 000000ff 00000000     ................
    8740:	0007ff80 80007f80 000000ff 00000000     ................
    8750:	0003ff80 00007f80 000000ff 00000000     ................
    8760:	0000ff00 00007f80 000000ff 00000000     ................
    8770:	00007f00 00007f80 000000ff 00000000     ................
    8780:	00001e00 00007f80 000000ff 00000000     ................
    8790:	00000600 00007f80 000000ff 00000000     ................
    87a0:	00000000 8000ff80 000000ff 00000000     ................
    87b0:	00000000 c001ff80 000000ff 00000000     ................
    87c0:	00000000 e007ff00 0000007f 00000000     ................
    87d0:	00000000 ffffff00 0000007f 00000000     ................
    87e0:	00000000 fffffe00 0000007f 00000000     ................
    87f0:	00000000 fffffe00 0000003f 00000000     ........?.......
    8800:	00000000 fffffc00 0000001f 00000000     ................
    8810:	00000000 fffffc00 0000001f 00000000     ................
    8820:	00000000 fffff800 0000000f 00000000     ................
    8830:	00000000 fffff000 00000007 00000000     ................
    8840:	00000000 ffffc000 00000001 00000000     ................
    8850:	00000000 7fff0000 00000000 00000000     ................
    8860:	00000000 03e00000 00000000 00000000     ................
	...
    88e4:	003e0000 00000000 00000000 00000000     ..>.............
    88f4:	07ffc000 00000000 00000000 00000000     ................
    8904:	1ffff800 00000000 00000000 00000000     ................
    8914:	7ffffc00 00000000 00000000 00000000     ................
    8924:	fffffe00 00000000 00000000 00000000     ................
    8934:	ffffff80 00000001 00000000 00000000     ................
    8944:	ffffffc0 00000003 00000000 007ffc00     ................
    8954:	ffffffc0 00000007 00000000 01ffff00     ................
    8964:	ffffffe0 0000000f 00000000 07ffffc0     ................
    8974:	fffffff0 0000000f 00000000 1fffffe0     ................
    8984:	fffffff8 0000001f 00000000 3ffffff0     ...............?
    8994:	fffffffc 0000001f 00000000 fffffff8     ................
    89a4:	fffffffc 0000003f 00000000 fffffffc     ....?...........
    89b4:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    89c4:	ffffffff 0000007f 00000000 ffffffff     ................
    89d4:	ff807fff 0000007f 00000000 ffffffff     ................
    89e4:	fe001fff 0000007f 00000000 ffffffff     ................
    89f4:	fc000fff 0000007f 80000000 ffffffff     ................
    8a04:	f80003ff 000000ff 80000000 fffc3fff     .............?..
    8a14:	f00003ff 000000ff 80000000 ffe00fff     ................
    8a24:	f00003ff 000000ff c0000000 ff8007ff     ................
    8a34:	e00007ff 000000ff c0000000 ff0003ff     ................
    8a44:	e0000fff 000000ff c0000000 fc0001ff     ................
    8a54:	e0001fff 000000ff c0000000 fc0001ff     ................
    8a64:	e0003fff 000000ff c0000000 fe0001ff     .?..............
    8a74:	e000ffff 000000ff c0000000 ff0001ff     ................
    8a84:	e001ffff 000000ff c0000000 ff8001ff     ................
    8a94:	e003ffff 000000ff c0000000 ff8001ff     ................
    8aa4:	e007ffff 000000ff c0000000 ffc003ff     ................
    8ab4:	f00fffff 000000ff c0000000 ffe007ff     ................
    8ac4:	f03fffff 0000007f 80000000 fff00fff     ..?.............
    8ad4:	f07ffff9 0000007f 80000000 ffff3fff     .............?..
    8ae4:	f8ffffe0 0000007f 80000000 ffffffff     ................
    8af4:	f9ffffc0 0000007f 00000000 7fffffff     ................
    8b04:	ffffff80 0000003f 00000000 3fffffff     ....?..........?
    8b14:	ffffff00 0000003f 00000000 1ffffffe     ....?...........
    8b24:	fffffe00 0000003f 00000000 1ffffffe     ....?...........
    8b34:	fffffc00 0000001f 00000000 0ffffffc     ................
    8b44:	fffff000 0000001f 00000000 07fffff8     ................
    8b54:	ffffe000 0000000f 00000000 01fffff0     ................
    8b64:	ffffc000 0000000f 00000000 00ffffe0     ................
    8b74:	ffff8000 00000007 00000000 003fff80     ..............?.
    8b84:	ffff0000 00000007 00000000 000ffe00     ................
    8b94:	ffffc000 0000000f 00000000 00000000     ................
    8ba4:	fffff000 0000003f 00000000 00000000     ....?...........
    8bb4:	ffffffe0 0000007f 00000000 00000000     ................
    8bc4:	fffffff0 0000007f 00000000 00000000     ................
    8bd4:	fffffff0 0000007f 00000000 00000000     ................
    8be4:	fffffff0 0000007f 00000000 00000000     ................
    8bf4:	fffffff0 0000007f 00000000 00000000     ................
    8c04:	fffffff0 0000007f 00000000 00000000     ................
    8c14:	fbfffff0 0000007f 00000000 00000000     ................
    8c24:	f1fffff0 0000007f 00000000 00000000     ................
    8c34:	e07ffff0 0000007f 00000000 00000000     ................
    8c44:	c01ffff0 0000007f 00000000 00000000     ................
    8c54:	8003fff0 0000007f 00000000 00000000     ................
    8c64:	00007ff0 0000007e 00000000 00000000     ....~...........
    8c74:	000000f0 0000007c 00000000 00000000     ....|...........
    8c84:	00000000 00000078 00000000 00000000     ....x...........
    8c94:	00000000 00000070 00000000 00000000     ....p...........
    8ca4:	00000000 00000060 00000000 00000000     ....`...........
    8cb4:	00000000 00000040 00000000 00000000     ....@...........
	...
    8cfc:	f8000000 003fffff 00000000 00000000     ......?.........
    8d0c:	f8000000 003fffff 00000000 00000000     ......?.........
    8d1c:	f8000000 003fffff 00000000 00000000     ......?.........
    8d2c:	f8000000 003fffff 00000000 00000000     ......?.........
    8d3c:	f8000000 003fffff 00000000 00000000     ......?.........
    8d4c:	f8000000 003fffff 00000000 00000000     ......?.........
    8d5c:	f8000000 003fffff 00000000 00000000     ......?.........
    8d6c:	f8000000 003fffff 00000000 00000000     ......?.........
    8d7c:	f8000000 003fffff 00000000 00000000     ......?.........
    8d8c:	f8000000 00003fff 00000000 00000000     .....?..........
	...
    8e30:	80000000 001fffff 00000000 00000000     ................
    8e40:	fe000000 03ffffff 00000000 00000000     ................
    8e50:	ffe00000 7fffffff 00000000 00000000     ................
    8e60:	fffc0000 ffffffff 00000003 00000000     ................
    8e70:	ffff8000 ffffffff 0000001f 00000000     ................
    8e80:	ffffe000 ffffffff 0000007f 00000000     ................
    8e90:	fffff800 ffffffff 000001ff 00000000     ................
    8ea0:	fffffe00 ffffffff 000007ff 00000000     ................
    8eb0:	ffffff80 ffffffff 00001fff 00000000     ................
    8ec0:	ffffffe0 ffffffff 00007fff 00000000     ................
    8ed0:	fffffff0 ffffffff 0000ffff 00000000     ................
    8ee0:	fffffffc ffffffff 0003ffff 00000000     ................
    8ef0:	7ffffffe ffe00000 0007ffff 00000000     ................
    8f00:	00ffffff f0000000 000fffff 80000000     ................
    8f10:	000fffff 00000000 001fffff e0000000     ................
    8f20:	0001ffff 00000000 003ffff8 e0000000     ..........?.....
    8f30:	00003fff 00000000 007fffc0 f0000000     .?..............
    8f40:	000007ff 00000000 00fffe00 f8000000     ................
    8f50:	000001ff 00000000 01fff800 fc000000     ................
    8f60:	000000ff 00000000 03fff000 fe000000     ................
    8f70:	0000003f 00000000 07ffc000 fe000000     ?...............
    8f80:	0000001f 00000000 07ff0000 ff000000     ................
    8f90:	00000007 00000000 0ffe0000 ff800000     ................
    8fa0:	00000003 00000000 1ffc0000 ff800000     ................
    8fb0:	00000001 00000000 1ff80000 fc000000     ................
	...
    8fc8:	03f00000 60000000 00000000 00000000     .......`........
    8fd8:	00e00000 00000000 00000000 00000000     ................
	...
    901c:	40000000 00000000 00000000 00200000     ...@.......... .
    902c:	f8000000 00000000 00000000 01f00000     ................
    903c:	ff000000 00000001 00000000 0ff80000     ................
    904c:	ff800000 00000003 00000000 1ffc0000     ................
    905c:	ff000000 00000007 00000000 0ffe0000     ................
    906c:	ff000000 0000000f 00000000 0fff0000     ................
    907c:	fe000000 0000001f 00000000 07ff8000     ................
    908c:	fc000000 0000007f 00000000 03ffe000     ................
    909c:	fc000000 000001ff 00000000 03fff800     ................
    90ac:	f8000000 000007ff 00000000 01fffe00     ................
    90bc:	f0000000 00001fff 00000000 00ffff80     ................
    90cc:	e0000000 0000ffff 00000000 007ffff0     ................
    90dc:	c0000000 0007ffff 00000000 003ffffe     ..............?.
    90ec:	80000000 007fffff e0000000 001fffff     ................
    90fc:	00000000 0fffffff ff000000 000fffff     ................
    910c:	00000000 fffffffe ffffffff 0007ffff     ................
    911c:	00000000 fffffff8 ffffffff 0001ffff     ................
    912c:	00000000 fffffff0 ffffffff 0000ffff     ................
    913c:	00000000 ffffffc0 ffffffff 00003fff     .............?..
    914c:	00000000 ffffff80 ffffffff 00001fff     ................
    915c:	00000000 fffffe00 ffffffff 000007ff     ................
    916c:	00000000 fffff800 ffffffff 000001ff     ................
    917c:	00000000 ffffe000 ffffffff 0000007f     ................
    918c:	00000000 ffff0000 ffffffff 0000000f     ................
    919c:	00000000 fffc0000 ffffffff 00000003     ................
    91ac:	00000000 ffc00000 3fffffff 00000000     ...........?....
    91bc:	00000000 fc000000 03ffffff 00000000     ................
    91cc:	00000000 80000000 001fffff 00000000     ................
	...
    9250:	00080000 00000000 00000000 00000000     ................
    9260:	00078000 00000000 00000000 00000000     ................
    9270:	000ff000 00000000 00000000 00000000     ................
    9280:	000ffc00 00000000 00000000 00000000     ................
    9290:	000ff800 00000000 00000000 00000000     ................
    92a0:	001ff800 00000020 00000000 00000000     .... ...........
    92b0:	001ff800 00000030 00000000 00000000     ....0...........
    92c0:	001ff000 0000007c 00000000 00000000     ....|...........
    92d0:	001ff000 000000fe 00000000 00000000     ................
    92e0:	003fe000 000000ff 00000000 00000000     ..?.............
    92f0:	c03fe000 000001ff 00000000 00000000     ..?.............
    9300:	e03fe000 000003ff 00000000 00000000     ..?.............
    9310:	f07fc000 000007ff 00000000 00000000     ................
    9320:	f87fc000 000003ff 00000000 00000000     ................
    9330:	fe7f8000 000000ff 00000000 00000000     ................
    9340:	ff7f8000 0000007f 00000000 00000000     ................
    9350:	ffff8000 0000001f 00000000 00000000     ................
    9360:	ffff0000 0000000f 00000000 80000000     ................
    9370:	ffff7fff 00000003 00000000 80000000     ................
    9380:	ffffffff 00000001 00000000 80000000     ................
    9390:	7fffffff 00000000 00000000 80000000     ................
    93a0:	1fffffff 00000000 00000000 80000000     ................
    93b0:	3fffffff 00000000 00000000 80000000     ...?............
    93c0:	7fffffff 00000000 00000000 80000000     ................
    93d0:	ffffffff 00000001 00000000 80000000     ................
    93e0:	ffffffff 00000007 00000000 80000000     ................
    93f0:	fffe1fff 0000000f 00000000 00000000     ................
    9400:	ffff0000 0000003f 00000000 00000000     ....?...........
    9410:	feff0000 0000007f 00000000 00000000     ................
    9420:	fcff0000 000001ff 00000000 00000000     ................
    9430:	f8ff8000 000007ff 00000000 00000000     ................
    9440:	f0ff8000 000007ff 00000000 00000000     ................
    9450:	c07fc000 000003ff 00000000 00000000     ................
    9460:	807fc000 000001ff 00000000 00000000     ................
    9470:	007fc000 000001ff 00000000 00000000     ................
    9480:	003fe000 000000fc 00000000 00000000     ..?.............
    9490:	003fe000 00000078 00000000 00000000     ..?.x...........
    94a0:	003ff000 00000030 00000000 00000000     ..?.0...........
    94b0:	003ff000 00000020 00000000 00000000     ..?. ...........
    94c0:	001ff800 00000000 00000000 00000000     ................
    94d0:	001ff800 00000000 00000000 00000000     ................
    94e0:	001ff000 00000000 00000000 00000000     ................
    94f0:	000f8000 00000000 00000000 00000000     ................
    9500:	000c0000 00000000 00000000 00000000     ................
	...
    9550:	80000000 00000fff 00000000 00000000     ................
    9560:	80000000 00000fff 00000000 00000000     ................
    9570:	80000000 00000fff 00000000 00000000     ................
    9580:	80000000 00000fff 00000000 00000000     ................
    9590:	80000000 00000fff 00000000 00000000     ................
    95a0:	80000000 00000fff 00000000 00000000     ................
    95b0:	80000000 00000fff 00000000 00000000     ................
    95c0:	80000000 00000fff 00000000 00000000     ................
    95d0:	80000000 00000fff 00000000 00000000     ................
    95e0:	80000000 00000fff 00000000 00000000     ................
    95f0:	80000000 00000fff 00000000 00000000     ................
    9600:	80000000 00000fff 00000000 00000000     ................
    9610:	80000000 00000fff 00000000 00000000     ................
    9620:	80000000 00000fff 00000000 00000000     ................
    9630:	80000000 00000fff 00000000 00000000     ................
    9640:	80000000 00000fff 00000000 00000000     ................
    9650:	80000000 00000fff 00000000 00000000     ................
    9660:	80000000 00000fff 00000000 00000000     ................
    9670:	fffff000 ffffffff 00000000 00000000     ................
    9680:	fffff000 ffffffff 00000000 00000000     ................
    9690:	fffff000 ffffffff 00000000 00000000     ................
    96a0:	fffff000 ffffffff 00000000 00000000     ................
    96b0:	fffff000 ffffffff 00000000 00000000     ................
    96c0:	fffff000 ffffffff 00000000 00000000     ................
    96d0:	fffff000 ffffffff 00000000 00000000     ................
    96e0:	fffff000 ffffffff 00000000 00000000     ................
    96f0:	fffff000 ffffffff 00000000 00000000     ................
    9700:	fffff000 ffffffff 00000000 00000000     ................
    9710:	fffff000 ffffffff 00000000 00000000     ................
    9720:	fffff000 ffffffff 00000000 00000000     ................
    9730:	fffff000 ffffffff 00000000 00000000     ................
    9740:	80000000 00000fff 00000000 00000000     ................
    9750:	80000000 00000fff 00000000 00000000     ................
    9760:	80000000 00000fff 00000000 00000000     ................
    9770:	80000000 00000fff 00000000 00000000     ................
    9780:	80000000 00000fff 00000000 00000000     ................
    9790:	80000000 00000fff 00000000 00000000     ................
    97a0:	80000000 00000fff 00000000 00000000     ................
    97b0:	80000000 00000fff 00000000 00000000     ................
    97c0:	80000000 00000fff 00000000 00000000     ................
    97d0:	80000000 00000fff 00000000 00000000     ................
    97e0:	80000000 00000fff 00000000 00000000     ................
    97f0:	80000000 00000fff 00000000 00000000     ................
    9800:	80000000 00000fff 00000000 00000000     ................
    9810:	80000000 00000fff 00000000 00000000     ................
    9820:	80000000 00000fff 00000000 00000000     ................
    9830:	80000000 00000fff 00000000 00000000     ................
    9840:	80000000 00000fff 00000000 00000000     ................
    9850:	80000000 00000fff 00000000 00000000     ................
	...
    98b8:	00100000 00000000 00000000 00000000     ................
    98c8:	003c0000 00000000 00000000 00000000     ..<.............
    98d8:	003f0000 00000000 00000000 00000000     ..?.............
    98e8:	007fc000 00000000 00000000 00000000     ................
    98f8:	00fff800 00000000 00000000 f8000000     ................
    9908:	00ffffff 00000000 00000000 f8000000     ................
    9918:	01ffffff 00000000 00000000 f8000000     ................
    9928:	01ffffff 00000000 00000000 f8000000     ................
    9938:	00ffffff 00000000 00000000 f8000000     ................
    9948:	007fffff 00000000 00000000 f8000000     ................
    9958:	003fffff 00000000 00000000 f8000000     ..?.............
    9968:	000fffff 00000000 00000000 f8000000     ................
    9978:	0007ffff 00000000 00000000 f8000000     ................
    9988:	0001ffff 00000000 00000000 f8000000     ................
    9998:	00007fff 00000000 00000000 f8000000     ................
    99a8:	00001fff 00000000 00000000 f8000000     ................
    99b8:	000003ff 00000000 00000000 00000000     ................
	...
    9a74:	00001ffc 00000000 00000000 00000000     ................
    9a84:	00001ffc 00000000 00000000 00000000     ................
    9a94:	00001ffc 00000000 00000000 00000000     ................
    9aa4:	00001ffc 00000000 00000000 00000000     ................
    9ab4:	00001ffc 00000000 00000000 00000000     ................
    9ac4:	00001ffc 00000000 00000000 00000000     ................
    9ad4:	00001ffc 00000000 00000000 00000000     ................
    9ae4:	00001ffc 00000000 00000000 00000000     ................
    9af4:	00001ffc 00000000 00000000 00000000     ................
    9b04:	00001ffc 00000000 00000000 00000000     ................
    9b14:	00001ffc 00000000 00000000 00000000     ................
    9b24:	00001ffc 00000000 00000000 00000000     ................
    9b34:	00001ffc 00000000 00000000 00000000     ................
    9b44:	00001ffc 00000000 00000000 00000000     ................
    9b54:	00001ffc 00000000 00000000 00000000     ................
    9b64:	00001ffc 00000000 00000000 00000000     ................
    9b74:	00001ffc 00000000 00000000 00000000     ................
    9b84:	00001ffc 00000000 00000000 00000000     ................
    9b94:	00001ffc 00000000 00000000 00000000     ................
    9ba4:	00001ffc 00000000 00000000 00000000     ................
    9bb4:	00001ffc 00000000 00000000 00000000     ................
    9bc4:	00001ffc 00000000 00000000 00000000     ................
    9bd4:	00001ffc 00000000 00000000 00000000     ................
    9be4:	00001ffc 00000000 00000000 00000000     ................
    9bf4:	00001ffc 00000000 00000000 00000000     ................
    9c04:	00001ffc 00000000 00000000 00000000     ................
    9c14:	00001ffc 00000000 00000000 00000000     ................
    9c24:	00001ffc 00000000 00000000 00000000     ................
	...
    9cf4:	c0000000 00000007 00000000 00000000     ................
    9d04:	f0000000 0000001f 00000000 00000000     ................
    9d14:	f8000000 0000003f 00000000 00000000     ....?...........
    9d24:	fc000000 0000007f 00000000 00000000     ................
    9d34:	fc000000 0000007f 00000000 00000000     ................
    9d44:	fe000000 000000ff 00000000 00000000     ................
    9d54:	fe000000 000000ff 00000000 00000000     ................
    9d64:	fe000000 000000ff 00000000 00000000     ................
    9d74:	fe000000 000000ff 00000000 00000000     ................
    9d84:	fe000000 000000ff 00000000 00000000     ................
    9d94:	fe000000 000000ff 00000000 00000000     ................
    9da4:	fc000000 0000007f 00000000 00000000     ................
    9db4:	fc000000 0000007f 00000000 00000000     ................
    9dc4:	f8000000 0000003f 00000000 00000000     ....?...........
    9dd4:	f0000000 0000001f 00000000 00000000     ................
    9de4:	e0000000 0000000f 00000000 00000000     ................
	...
    9e68:	00001c00 00000000 00000000 00000000     ................
    9e78:	00001f80 00000000 00000000 00000000     ................
    9e88:	00001ff0 00000000 00000000 00000000     ................
    9e98:	00001ffe 00000000 00000000 c0000000     ................
    9ea8:	00001fff 00000000 00000000 f8000000     ................
    9eb8:	00001fff 00000000 00000000 ff000000     ................
    9ec8:	00001fff 00000000 00000000 ffe00000     ................
    9ed8:	00001fff 00000000 00000000 fffc0000     ................
    9ee8:	00001fff 00000000 00000000 ffff8000     ................
    9ef8:	00001fff 00000000 00000000 fffff000     ................
    9f08:	000007ff 00000000 00000000 fffffe00     ................
    9f18:	000000ff 00000000 00000000 ffffffc0     ................
    9f28:	0000003f 00000000 00000000 fffffff8     ?...............
    9f38:	00000007 00000000 00000000 ffffffff     ................
	...
    9f50:	e0000000 1fffffff 00000000 00000000     ................
    9f60:	fc000000 03ffffff 00000000 00000000     ................
    9f70:	ff800000 007fffff 00000000 00000000     ................
    9f80:	ffe00000 000fffff 00000000 00000000     ................
    9f90:	fffc0000 0001ffff 00000000 00000000     ................
    9fa0:	ffff8000 00003fff 00000000 00000000     .....?..........
    9fb0:	fffff000 000007ff 00000000 00000000     ................
    9fc0:	fffffe00 000000ff 00000000 00000000     ................
    9fd0:	ffffffc0 0000001f 00000000 00000000     ................
    9fe0:	fffffff8 00000003 00000000 00000000     ................
    9ff0:	7fffffff 00000000 00000000 80000000     ................
    a000:	0fffffff 00000000 00000000 80000000     ................
    a010:	01ffffff 00000000 00000000 80000000     ................
    a020:	003fffff 00000000 00000000 80000000     ..?.............
    a030:	0007ffff 00000000 00000000 80000000     ................
    a040:	0000ffff 00000000 00000000 80000000     ................
    a050:	00001fff 00000000 00000000 80000000     ................
    a060:	000003ff 00000000 00000000 80000000     ................
    a070:	000000ff 00000000 00000000 80000000     ................
    a080:	0000001f 00000000 00000000 80000000     ................
    a090:	00000003 00000000 00000000 00000000     ................
	...
    a110:	fff80000 0007ffff 00000000 00000000     ................
    a120:	ffff8000 007fffff 00000000 00000000     ................
    a130:	fffff000 03ffffff 00000000 00000000     ................
    a140:	fffffc00 0fffffff 00000000 00000000     ................
    a150:	ffffff00 3fffffff 00000000 00000000     .......?........
    a160:	ffffffc0 7fffffff 00000000 00000000     ................
    a170:	ffffffe0 ffffffff 00000001 00000000     ................
    a180:	fffffff0 ffffffff 00000003 00000000     ................
    a190:	fffffff8 ffffffff 00000007 00000000     ................
    a1a0:	fffffffc ffffffff 0000000f 00000000     ................
    a1b0:	fffffffc ffffffff 0000000f 00000000     ................
    a1c0:	fffffffe ffffffff 0000001f 00000000     ................
    a1d0:	ffffffff ffffffff 0000003f 00000000     ........?.......
    a1e0:	ffffffff ffffffff 0000003f 00000000     ........?.......
    a1f0:	0007ffff fff80000 0000003f 80000000     ........?.......
    a200:	00007fff ff800000 0000007f 80000000     ................
    a210:	00001fff fe000000 0000007f 80000000     ................
    a220:	00000fff fc000000 0000007f c0000000     ................
    a230:	000007ff f8000000 000000ff c0000000     ................
    a240:	000003ff f0000000 000000ff c0000000     ................
    a250:	000003ff f0000000 000000ff c0000000     ................
    a260:	000001ff e0000000 000000ff c0000000     ................
    a270:	000001ff e0000000 000000ff c0000000     ................
    a280:	000001ff e0000000 000000ff c0000000     ................
    a290:	000001ff e0000000 000000ff c0000000     ................
    a2a0:	000001ff e0000000 000000ff c0000000     ................
    a2b0:	000001ff e0000000 000000ff c0000000     ................
    a2c0:	000003ff f0000000 000000ff c0000000     ................
    a2d0:	000003ff f0000000 000000ff c0000000     ................
    a2e0:	000007ff f8000000 000000ff 80000000     ................
    a2f0:	00000fff fc000000 0000007f 80000000     ................
    a300:	00001fff fe000000 0000007f 80000000     ................
    a310:	00007fff ff800000 0000007f 00000000     ................
    a320:	0007ffff fff80000 0000003f 00000000     ........?.......
    a330:	ffffffff ffffffff 0000003f 00000000     ........?.......
    a340:	ffffffff ffffffff 0000003f 00000000     ........?.......
    a350:	fffffffe ffffffff 0000001f 00000000     ................
    a360:	fffffffc ffffffff 0000000f 00000000     ................
    a370:	fffffffc ffffffff 0000000f 00000000     ................
    a380:	fffffff8 ffffffff 00000007 00000000     ................
    a390:	fffffff0 ffffffff 00000003 00000000     ................
    a3a0:	ffffffe0 ffffffff 00000001 00000000     ................
    a3b0:	ffffff80 ffffffff 00000000 00000000     ................
    a3c0:	ffffff00 3fffffff 00000000 00000000     .......?........
    a3d0:	fffffc00 0fffffff 00000000 00000000     ................
    a3e0:	fffff000 03ffffff 00000000 00000000     ................
    a3f0:	ffff8000 007fffff 00000000 00000000     ................
    a400:	fff80000 0007ffff 00000000 00000000     ................
	...
    a4e0:	001ffc00 00000000 00000000 00000000     ................
    a4f0:	001ffc00 00000000 00000000 00000000     ................
    a500:	000ffe00 00000000 00000000 00000000     ................
    a510:	000ffe00 00000000 00000000 00000000     ................
    a520:	000fff00 00000000 00000000 00000000     ................
    a530:	0007ff00 00000000 00000000 00000000     ................
    a540:	0007ff00 00000000 00000000 00000000     ................
    a550:	0007ff80 00000000 00000000 00000000     ................
    a560:	0003ff80 00000000 00000000 00000000     ................
    a570:	0003ff80 00000000 00000000 00000000     ................
    a580:	0003ffc0 00000000 00000000 00000000     ................
    a590:	0003ffc0 00000000 00000000 00000000     ................
    a5a0:	0001ffe0 00000000 00000000 00000000     ................
    a5b0:	0001ffe0 00000000 00000000 00000000     ................
    a5c0:	0001ffe0 00000000 00000000 00000000     ................
    a5d0:	0000fff0 00000000 00000000 00000000     ................
    a5e0:	0000fff0 00000000 00000000 00000000     ................
    a5f0:	fffffff0 ffffffff 0000007f 00000000     ................
    a600:	fffffff8 ffffffff 0000007f 00000000     ................
    a610:	fffffff8 ffffffff 0000007f 00000000     ................
    a620:	fffffff8 ffffffff 0000007f 00000000     ................
    a630:	fffffffc ffffffff 0000007f 00000000     ................
    a640:	fffffffc ffffffff 0000007f 00000000     ................
    a650:	fffffffe ffffffff 0000007f 00000000     ................
    a660:	fffffffe ffffffff 0000007f 00000000     ................
    a670:	fffffffe ffffffff 0000007f 00000000     ................
    a680:	ffffffff ffffffff 0000007f 00000000     ................
    a690:	ffffffff ffffffff 0000007f 00000000     ................
    a6a0:	ffffffff ffffffff 0000007f 80000000     ................
    a6b0:	ffffffff ffffffff 0000007f 80000000     ................
    a6c0:	ffffffff ffffffff 0000007f 80000000     ................
    a6d0:	ffffffff ffffffff 0000007f 00000000     ................
	...
    a830:	00200000 00000000 00000000 00000000     .. .............
    a840:	003f8000 00000000 00000000 00000000     ..?.............
    a850:	003ff000 e0000000 0000007f 00000000     ..?.............
    a860:	003ffc00 f0000000 0000007f 00000000     ..?.............
    a870:	003fff00 f8000000 0000007f 00000000     ..?.............
    a880:	003fff80 fc000000 0000007f 00000000     ..?.............
    a890:	003fffc0 fe000000 0000007f 00000000     ..?.............
    a8a0:	003fffe0 ff000000 0000007f 00000000     ..?.............
    a8b0:	003ffff0 ffc00000 0000007f 00000000     ..?.............
    a8c0:	003ffff8 ffe00000 0000007f 00000000     ..?.............
    a8d0:	003ffffc fff00000 0000007f 00000000     ..?.............
    a8e0:	003ffffc fff80000 0000007f 00000000     ..?.............
    a8f0:	003ffffe fffc0000 0000007f 00000000     ..?.............
    a900:	003ffffe fffe0000 0000007f 00000000     ..?.............
    a910:	003fffff ffff0000 0000007f 00000000     ..?.............
    a920:	0000ffff ffff8000 0000007f 80000000     ................
    a930:	00003fff ffffc000 0000007f 80000000     .?..............
    a940:	00001fff ffffe000 0000007f 80000000     ................
    a950:	000007ff fffff000 0000007f 80000000     ................
    a960:	000007ff fffff800 0000007f c0000000     ................
    a970:	000003ff fffffe00 0000007f c0000000     ................
    a980:	000003ff f7ffff00 0000007f c0000000     ................
    a990:	000001ff f3ffff80 0000007f c0000000     ................
    a9a0:	000001ff f1ffffc0 0000007f c0000000     ................
    a9b0:	000001ff f07fffe0 0000007f c0000000     ................
    a9c0:	000001ff f03ffff0 0000007f c0000000     ......?.........
    a9d0:	000001ff f01ffff8 0000007f c0000000     ................
    a9e0:	000001ff f00ffffc 0000007f c0000000     ................
    a9f0:	000001ff f007ffff 0000007f c0000000     ................
    aa00:	800003ff f003ffff 0000007f c0000000     ................
    aa10:	c00003ff f001ffff 0000007f c0000000     ................
    aa20:	f00007ff f000ffff 0000007f 80000000     ................
    aa30:	f8000fff f0007fff 0000007f 80000000     ................
    aa40:	ff003fff f0003fff 0000007f 80000000     .?...?..........
    aa50:	fff7ffff f0001fff 0000007f 80000000     ................
    aa60:	ffffffff f0000fff 0000007f 00000000     ................
    aa70:	ffffffff f00003ff 0000007f 00000000     ................
    aa80:	ffffffff f00001ff 0000007f 00000000     ................
    aa90:	fffffffe f00000ff 0000007f 00000000     ................
    aaa0:	fffffffe f000007f 0000007f 00000000     ................
    aab0:	fffffffc f000003f 0000007f 00000000     ....?...........
    aac0:	fffffffc f000000f 0000007f 00000000     ................
    aad0:	fffffff8 f0000007 0000007f 00000000     ................
    aae0:	fffffff0 f0000003 0000007f 00000000     ................
    aaf0:	ffffffe0 f0000000 0000007f 00000000     ................
    ab00:	3fffffc0 f0000000 0000007f 00000000     ...?............
    ab10:	0fffff00 f0000000 0000007f 00000000     ................
    ab20:	03fffc00 f0000000 0000007f 00000000     ................
    ab30:	003fc000 f0000000 0000007f 00000000     ..?.............
    ab40:	00000000 f0000000 0000007f 00000000     ................
    ab50:	00000000 f0000000 0000007f 00000000     ................
	...
    abd4:	00780000 00000000 00000000 0003c000     ..x.............
    abe4:	07f80000 00000000 00000000 0003fc00     ................
    abf4:	1ff80000 00000000 00000000 0003ff00     ................
    ac04:	7ff80000 00000000 00000000 0003ff80     ................
    ac14:	fff80000 00000000 00000000 0003ffc0     ................
    ac24:	fff80000 00000001 00000000 0003ffe0     ................
    ac34:	fff80000 00000003 00000000 0003fff0     ................
    ac44:	fff80000 00000007 00000000 0003fff8     ................
    ac54:	fff80000 00000007 00000000 0003fffc     ................
    ac64:	fff80000 0000000f 00000000 0003fffc     ................
    ac74:	fff80000 0000001f 00000000 0003fffe     ................
    ac84:	fff80000 0000001f 00000000 0003fffe     ................
    ac94:	fff80000 0000003f 00000000 0003ffff     ....?...........
    aca4:	fff80000 0000003f 00000000 0003ffff     ....?...........
    acb4:	fff00000 0000003f 80000000 0000ffff     ....?...........
    acc4:	ff000000 0000007f 80000000 e0001fff     ................
    acd4:	fe0000ff 0000007f 80000000 e0000fff     ................
    ace4:	fc0000ff 0000007f 80000000 e00007ff     ................
    acf4:	f80000ff 0000007f c0000000 e00003ff     ................
    ad04:	f00000ff 000000ff c0000000 e00003ff     ................
    ad14:	f00000ff 000000ff c0000000 e00001ff     ................
    ad24:	e00000ff 000000ff c0000000 e00001ff     ................
    ad34:	e00000ff 000000ff c0000000 e00001ff     ................
    ad44:	e00000ff 000000ff c0000000 e00001ff     ................
    ad54:	e00000ff 000000ff c0000000 e00001ff     ................
    ad64:	e00000ff 000000ff c0000000 e00001ff     ................
    ad74:	e00000ff 000000ff c0000000 e00001ff     ................
    ad84:	e00000ff 000000ff c0000000 f00001ff     ................
    ad94:	e00001ff 000000ff c0000000 f00003ff     ................
    ada4:	f00001ff 000000ff c0000000 f80003ff     ................
    adb4:	f00001ff 000000ff 80000000 f80007ff     ................
    adc4:	f80003ff 0000007f 80000000 fc000fff     ................
    add4:	f80003ff 0000007f 80000000 ff001fff     ................
    ade4:	fc0007ff 0000007f 80000000 ffe0ffff     ................
    adf4:	ff001fff 0000007f 00000000 ffffffff     ................
    ae04:	ffc0ffff 0000003f 00000000 ffffffff     ....?...........
    ae14:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    ae24:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    ae34:	ffffffff 0000001f 00000000 fffffffe     ................
    ae44:	fffffffb 0000001f 00000000 fffffffc     ................
    ae54:	fffffff9 0000000f 00000000 fffffff8     ................
    ae64:	fffffff0 00000007 00000000 7ffffff0     ................
    ae74:	fffffff0 00000007 00000000 7ffffff0     ................
    ae84:	ffffffe0 00000003 00000000 3fffffc0     ...............?
    ae94:	ffffffc0 00000001 00000000 0fffff80     ................
    aea4:	ffffff80 00000000 00000000 07ffff00     ................
    aeb4:	7fffff00 00000000 00000000 01fff800     ................
    aec4:	1ffffe00 00000000 00000000 003fc000     ..............?.
    aed4:	07fff800 00000000 00000000 00000000     ................
    aee4:	00ffc000 00000000 00000000 00000000     ................
	...
    af74:	007fe000 00000000 00000000 00000000     ................
    af84:	007ff000 00000000 00000000 00000000     ................
    af94:	007ffc00 00000000 00000000 00000000     ................
    afa4:	007fff00 00000000 00000000 00000000     ................
    afb4:	007fff80 00000000 00000000 00000000     ................
    afc4:	007fffe0 00000000 00000000 00000000     ................
    afd4:	007ffff0 00000000 00000000 00000000     ................
    afe4:	007ffffc 00000000 00000000 00000000     ................
    aff4:	007fffff 00000000 00000000 80000000     ................
    b004:	007fffff 00000000 00000000 e0000000     ................
    b014:	007fffff 00000000 00000000 f0000000     ................
    b024:	007fffff 00000000 00000000 fc000000     ................
    b034:	007fffff 00000000 00000000 fe000000     ................
    b044:	007fffff 00000000 00000000 ff800000     ................
    b054:	007ff7ff 00000000 00000000 ffe00000     ................
    b064:	007ff1ff 00000000 00000000 fff00000     ................
    b074:	007ff0ff 00000000 00000000 fffc0000     ................
    b084:	007ff03f 00000000 00000000 fffe0000     ?...............
    b094:	007ff01f 00000000 00000000 ffff8000     ................
    b0a4:	007ff007 00000000 00000000 ffffe000     ................
    b0b4:	007ff001 00000000 00000000 fffff000     ................
    b0c4:	007ff000 00000000 00000000 3ffffc00     ...............?
    b0d4:	007ff000 00000000 00000000 1ffffe00     ................
    b0e4:	007ff000 00000000 00000000 07ffff80     ................
    b0f4:	007ff000 00000000 00000000 01ffffc0     ................
    b104:	007ff000 00000000 00000000 00fffff0     ................
    b114:	007ff000 00000000 00000000 003ffffc     ..............?.
    b124:	007ff000 00000000 00000000 001ffffe     ................
    b134:	007ff000 00000000 80000000 0007ffff     ................
    b144:	007ff000 00000000 80000000 ffffffff     ................
    b154:	ffffffff 0000007f 80000000 ffffffff     ................
    b164:	ffffffff 0000007f 80000000 ffffffff     ................
    b174:	ffffffff 0000007f 80000000 ffffffff     ................
    b184:	ffffffff 0000007f 80000000 ffffffff     ................
    b194:	ffffffff 0000007f 80000000 ffffffff     ................
    b1a4:	ffffffff 0000007f 80000000 ffffffff     ................
    b1b4:	ffffffff 0000007f 80000000 ffffffff     ................
    b1c4:	ffffffff 0000007f 80000000 ffffffff     ................
    b1d4:	ffffffff 0000007f 80000000 ffffffff     ................
    b1e4:	ffffffff 0000007f 80000000 ffffffff     ................
    b1f4:	ffffffff 0000007f 80000000 ffffffff     ................
    b204:	ffffffff 0000007f 80000000 ffffffff     ................
    b214:	ffffffff 0000007f 80000000 ffffffff     ................
    b224:	ffffffff 0000007f 00000000 00000000     ................
    b234:	007ff000 00000000 00000000 00000000     ................
    b244:	007ff000 00000000 00000000 00000000     ................
    b254:	007ff000 00000000 00000000 00000000     ................
    b264:	007ff000 00000000 00000000 00000000     ................
    b274:	007ff000 00000000 00000000 00000000     ................
    b284:	007ff000 00000000 00000000 00000000     ................
    b294:	007ff000 00000000 00000000 00000000     ................
    b2a4:	007ff000 00000000 00000000 00000000     ................
	...
    b334:	00300000 00000000 00000000 00000000     ..0.............
    b344:	03f00000 00000000 00000000 00000000     ................
    b354:	0ff0000f 00000000 00000000 ff800000     ................
    b364:	3ff0000f 00000000 00000000 ffffc000     ...?............
    b374:	7ff0001f 00000000 00000000 ffffffe0     ................
    b384:	fff0001f 00000000 80000000 ffffffff     ................
    b394:	fff0001f 00000001 80000000 ffffffff     ................
    b3a4:	fff0001f 00000003 80000000 ffffffff     ................
    b3b4:	fff0003f 00000007 80000000 ffffffff     ?...............
    b3c4:	fff0003f 0000000f 80000000 ffffffff     ?...............
    b3d4:	fff0003f 0000000f 80000000 ffffffff     ?...............
    b3e4:	fff0003f 0000001f 80000000 ffffffff     ?...............
    b3f4:	fff0007f 0000001f 80000000 ffffffff     ................
    b404:	fff0007f 0000003f 80000000 ffffffff     ....?...........
    b414:	ffe0003f 0000003f 80000000 ffffffff     ?...?...........
    b424:	ff00001f 0000007f 80000000 f87fffff     ................
    b434:	fe00000f 0000007f 80000000 fc001fff     ................
    b444:	f800000f 0000007f 80000000 fc0003ff     ................
    b454:	f800000f 0000007f 80000000 fe0003ff     ................
    b464:	f0000007 000000ff 80000000 fe0003ff     ................
    b474:	f0000007 000000ff 80000000 fe0003ff     ................
    b484:	e0000007 000000ff 80000000 ff0003ff     ................
    b494:	e0000007 000000ff 80000000 ff0003ff     ................
    b4a4:	e0000007 000000ff 80000000 ff0003ff     ................
    b4b4:	e0000007 000000ff 80000000 ff0003ff     ................
    b4c4:	e0000007 000000ff 80000000 ff0003ff     ................
    b4d4:	e0000007 000000ff 80000000 ff0003ff     ................
    b4e4:	e000000f 000000ff 80000000 ff0003ff     ................
    b4f4:	f000000f 000000ff 80000000 ff0003ff     ................
    b504:	f000001f 000000ff 80000000 ff0003ff     ................
    b514:	f800001f 0000007f 80000000 ff0003ff     ................
    b524:	fc00003f 0000007f 80000000 fe0003ff     ?...............
    b534:	fe0000ff 0000007f 80000000 fe0003ff     ................
    b544:	ff8001ff 0000007f 80000000 fe0003ff     ................
    b554:	fffe3fff 0000003f 80000000 fe0003ff     .?..?...........
    b564:	ffffffff 0000003f 80000000 fc0003ff     ....?...........
    b574:	ffffffff 0000001f 80000000 fc0003ff     ................
    b584:	ffffffff 0000001f 80000000 f80003ff     ................
    b594:	ffffffff 0000000f 80000000 f80003ff     ................
    b5a4:	ffffffff 0000000f 80000000 f00003ff     ................
    b5b4:	ffffffff 00000007 80000000 e00003ff     ................
    b5c4:	ffffffff 00000003 80000000 c00003ff     ................
    b5d4:	ffffffff 00000001 80000000 800003ff     ................
    b5e4:	ffffffff 00000000 80000000 000003ff     ................
    b5f4:	7fffffff 00000000 80000000 000003ff     ................
    b604:	1ffffffc 00000000 00000000 00000000     ................
    b614:	07fffff0 00000000 00000000 00000000     ................
    b624:	01ffffc0 00000000 00000000 00000000     ................
    b634:	000ff800 00000000 00000000 00000000     ................
	...
    b6d0:	c0000000 0003ffff 00000000 00000000     ................
    b6e0:	fe000000 003fffff 00000000 00000000     ......?.........
    b6f0:	ffc00000 01ffffff 00000000 00000000     ................
    b700:	fff80000 07ffffff 00000000 00000000     ................
    b710:	fffe0000 1fffffff 00000000 00000000     ................
    b720:	ffff8000 3fffffff 00000000 00000000     .......?........
    b730:	ffffe000 ffffffff 00000000 00000000     ................
    b740:	fffff000 ffffffff 00000001 00000000     ................
    b750:	fffffc00 ffffffff 00000003 00000000     ................
    b760:	fffffe00 ffffffff 00000007 00000000     ................
    b770:	ffffff00 ffffffff 00000007 00000000     ................
    b780:	ffffff80 ffffffff 0000000f 00000000     ................
    b790:	ffffffc0 ffffffff 0000001f 00000000     ................
    b7a0:	ffffffe0 ffffffff 0000001f 00000000     ................
    b7b0:	ffffffe0 fffe00ff 0000003f 00000000     ........?.......
    b7c0:	f0fffff0 ffc0007f 0000003f 00000000     ........?.......
    b7d0:	f83ffff8 ff00001f 0000007f 00000000     ..?.............
    b7e0:	fc0ffff8 fe00001f 0000007f 00000000     ................
    b7f0:	fc03fffc f800000f 0000007f 00000000     ................
    b800:	fe01fffc f8000007 0000007f 00000000     ................
    b810:	fe00fffe f0000007 000000ff 00000000     ................
    b820:	ff007ffe f0000003 000000ff 00000000     ................
    b830:	ff003fff e0000003 000000ff 00000000     .?..............
    b840:	ff001fff e0000003 000000ff 00000000     ................
    b850:	ff800fff e0000003 000000ff 80000000     ................
    b860:	ff800fff e0000003 000000ff 80000000     ................
    b870:	ff8007ff e0000003 000000ff 80000000     ................
    b880:	ff8007ff e0000003 000000ff 80000000     ................
    b890:	ff8003ff f0000007 000000ff 80000000     ................
    b8a0:	ff8003ff f0000007 000000ff c0000000     ................
    b8b0:	ff8003ff f800000f 000000ff c0000000     ................
    b8c0:	ff8003ff fc00001f 0000007f c0000000     ................
    b8d0:	ff8001ff fe00003f 0000007f c0000000     ....?...........
    b8e0:	ff8001ff ff8000ff 0000007f c0000000     ................
    b8f0:	ff0001ff ffe003ff 0000003f c0000000     ........?.......
    b900:	ff0001ff ffffffff 0000003f c0000000     ........?.......
    b910:	ff0001ff ffffffff 0000003f c0000000     ........?.......
    b920:	fe0001ff ffffffff 0000001f c0000000     ................
    b930:	fe0001ff ffffffff 0000000f 00000000     ................
    b940:	fc000000 ffffffff 0000000f 00000000     ................
    b950:	fc000000 ffffffff 00000007 00000000     ................
    b960:	f8000000 ffffffff 00000003 00000000     ................
    b970:	f0000000 ffffffff 00000001 00000000     ................
    b980:	e0000000 ffffffff 00000000 00000000     ................
    b990:	c0000000 7fffffff 00000000 00000000     ................
    b9a0:	00000000 3fffffff 00000000 00000000     .......?........
    b9b0:	00000000 0ffffffc 00000000 00000000     ................
    b9c0:	00000000 03fffff0 00000000 00000000     ................
    b9d0:	00000000 007fff80 00000000 00000000     ................
	...
    ba4c:	80000000 000003ff 00000000 00000000     ................
    ba5c:	80000000 000003ff 00000000 00000000     ................
    ba6c:	80000000 000003ff 00000000 00000000     ................
    ba7c:	80000000 000003ff 00000000 00000000     ................
    ba8c:	80000000 000003ff 00000000 00000000     ................
    ba9c:	80000000 000003ff 00000000 00000000     ................
    baac:	80000000 000003ff 00000000 00000000     ................
    babc:	80000000 000003ff 00000000 00000000     ................
    bacc:	80000000 000003ff 00000000 00000040     ............@...
    badc:	80000000 000003ff 00000000 00000070     ............p...
    baec:	80000000 000003ff 00000000 0000007e     ............~...
    bafc:	80000000 000003ff 80000000 0000007f     ................
    bb0c:	80000000 000003ff e0000000 0000007f     ................
    bb1c:	80000000 000003ff f8000000 0000007f     ................
    bb2c:	80000000 000003ff fe000000 0000007f     ................
    bb3c:	80000000 000003ff ffc00000 0000007f     ................
    bb4c:	80000000 000003ff fff00000 0000007f     ................
    bb5c:	80000000 000003ff fffc0000 0000007f     ................
    bb6c:	80000000 000003ff ffff0000 0000007f     ................
    bb7c:	80000000 000003ff ffffc000 0000007f     ................
    bb8c:	80000000 000003ff fffff800 0000007f     ................
    bb9c:	80000000 000003ff fffffe00 0000007f     ................
    bbac:	80000000 000003ff ffffff80 0000007f     ................
    bbbc:	80000000 000003ff ffffffe0 0000003f     ............?...
    bbcc:	80000000 000003ff fffffff8 00000007     ................
    bbdc:	80000000 000003ff ffffffff 00000001     ................
    bbec:	80000000 c00003ff 7fffffff 00000000     ................
    bbfc:	80000000 f00003ff 0fffffff 00000000     ................
    bc0c:	80000000 fc0003ff 03ffffff 00000000     ................
    bc1c:	80000000 ff0003ff 00ffffff 00000000     ................
    bc2c:	80000000 ffe003ff 001fffff 00000000     ................
    bc3c:	80000000 fff803ff 0007ffff 00000000     ................
    bc4c:	80000000 fffe03ff 0001ffff 00000000     ................
    bc5c:	80000000 ffff83ff 00007fff 00000000     ................
    bc6c:	80000000 ffffe3ff 00000fff 00000000     ................
    bc7c:	80000000 ffffffff 000003ff 00000000     ................
    bc8c:	80000000 ffffffff 000000ff 00000000     ................
    bc9c:	80000000 ffffffff 0000001f 00000000     ................
    bcac:	80000000 ffffffff 00000007 00000000     ................
    bcbc:	80000000 ffffffff 00000001 00000000     ................
    bccc:	80000000 3fffffff 00000000 00000000     .......?........
    bcdc:	80000000 0fffffff 00000000 00000000     ................
    bcec:	80000000 03ffffff 00000000 00000000     ................
    bcfc:	80000000 007fffff 00000000 00000000     ................
    bd0c:	80000000 001fffff 00000000 00000000     ................
    bd1c:	80000000 0007ffff 00000000 00000000     ................
    bd2c:	80000000 0000ffff 00000000 00000000     ................
    bd3c:	80000000 00003fff 00000000 00000000     .....?..........
    bd4c:	80000000 00000fff 00000000 00000000     ................
    bd5c:	80000000 000001ff 00000000 00000000     ................
    bd6c:	80000000 0000007f 00000000 00000000     ................
	...
    be14:	01ffe000 00000000 00000000 001fc000     ................
    be24:	0ffff800 00000000 00000000 00fffc00     ................
    be34:	3ffffe00 00000000 00000000 03ffff00     ...?............
    be44:	7fffff80 00000000 00000000 0fffff80     ................
    be54:	ffffffc0 00000001 00000000 1fffffe0     ................
    be64:	ffffffe0 00000003 00000000 3ffffff0     ...............?
    be74:	fffffff0 00000007 00000000 7ffffff8     ................
    be84:	fffffff8 00000007 00000000 fffffffc     ................
    be94:	fffffff8 0000000f 00000000 fffffffc     ................
    bea4:	fffffffc 0000001f 00000000 fffffffe     ................
    beb4:	fffffffd 0000001f 00000000 fffffffe     ................
    bec4:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    bed4:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    bee4:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    bef4:	ffc03fff 0000007f 80000000 ffffffff     .?..............
    bf04:	ff000fff 0000007f 80000000 ff801fff     ................
    bf14:	fc0003ff 0000007f 80000000 fe000fff     ................
    bf24:	f80001ff 0000007f c0000000 fc0007ff     ................
    bf34:	f00000ff 000000ff c0000000 f80003ff     ................
    bf44:	f00000ff 000000ff c0000000 f80003ff     ................
    bf54:	f00000ff 000000ff c0000000 f00001ff     ................
    bf64:	e000007f 000000ff c0000000 f00001ff     ................
    bf74:	e000007f 000000ff c0000000 f00001ff     ................
    bf84:	e000007f 000000ff c0000000 f00001ff     ................
    bf94:	e000007f 000000ff c0000000 f00001ff     ................
    bfa4:	e000007f 000000ff c0000000 f00001ff     ................
    bfb4:	e000007f 000000ff c0000000 f80003ff     ................
    bfc4:	e00000ff 000000ff c0000000 f80003ff     ................
    bfd4:	f00000ff 000000ff c0000000 fc0007ff     ................
    bfe4:	f00001ff 000000ff 80000000 fe000fff     ................
    bff4:	f80001ff 0000007f 80000000 ff803fff     .............?..
    c004:	fc0003ff 0000007f 80000000 ffffffff     ................
    c014:	ff000fff 0000007f 80000000 ffffffff     ................
    c024:	ffc03fff 0000007f 00000000 ffffffff     .?..............
    c034:	ffffffff 0000003f 00000000 ffffffff     ....?...........
    c044:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    c054:	ffffffff 0000003f 00000000 fffffffe     ....?...........
    c064:	fffffffd 0000001f 00000000 fffffffc     ................
    c074:	fffffffc 0000001f 00000000 fffffffc     ................
    c084:	fffffff8 0000000f 00000000 7ffffff8     ................
    c094:	fffffff8 00000007 00000000 3ffffff0     ...............?
    c0a4:	fffffff0 00000007 00000000 1fffffe0     ................
    c0b4:	ffffffe0 00000003 00000000 0fffff80     ................
    c0c4:	ffffffc0 00000001 00000000 03ffff00     ................
    c0d4:	7fffff80 00000000 00000000 00fffc00     ................
    c0e4:	3ffffe00 00000000 00000000 001f8000     ...?............
    c0f4:	0ffff800 00000000 00000000 00000000     ................
    c104:	01ffe000 00000000 00000000 00000000     ................
	...
    c1a0:	07f80000 00000000 00000000 00000000     ................
    c1b0:	ffff8000 00000000 00000000 00000000     ................
    c1c0:	fffff000 00000007 00000000 00000000     ................
    c1d0:	fffffc00 0000001f 00000000 00000000     ................
    c1e0:	ffffff00 0000007f 00000000 00000000     ................
    c1f0:	ffffff80 000000ff 00000000 00000000     ................
    c200:	ffffffc0 000001ff 00000000 00000000     ................
    c210:	ffffffe0 000003ff 00000000 00000000     ................
    c220:	fffffff0 000007ff 00000000 00000000     ................
    c230:	fffffff8 00000fff 00000000 00000000     ................
    c240:	fffffffc 00000fff 00000000 00000000     ................
    c250:	fffffffc e0001fff 000000ff 00000000     ................
    c260:	fffffffe e0001fff 000000ff 00000000     ................
    c270:	ffffffff e0003fff 000000ff 00000000     .....?..........
    c280:	ff1fffff e0003fff 000000ff 00000000     .....?..........
    c290:	e000ffff e0003fff 000000ff 80000000     .....?..........
    c2a0:	80003fff e0007fff 000000ff 80000000     .?..............
    c2b0:	00001fff e0007ffe 000000ff 80000000     ................
    c2c0:	000007ff f0007ffc 000000ff c0000000     ................
    c2d0:	000007ff f0007ff8 0000007f c0000000     ................
    c2e0:	000003ff f0007ff8 0000007f c0000000     ................
    c2f0:	000001ff f0007ff0 0000007f c0000000     ................
    c300:	000001ff f8007ff0 0000007f c0000000     ................
    c310:	000001ff f8007ff0 0000007f c0000000     ................
    c320:	000001ff fc007ff0 0000003f c0000000     ........?.......
    c330:	000001ff fc007ff0 0000003f c0000000     ........?.......
    c340:	000001ff fe003ff0 0000003f c0000000     .....?..?.......
    c350:	000003ff ff003ff0 0000001f c0000000     .....?..........
    c360:	000003ff ff003ff8 0000001f 80000000     .....?..........
    c370:	000007ff ffc01ff8 0000001f 80000000     ................
    c380:	00000fff ffe00ffc 0000000f 80000000     ................
    c390:	00001fff fff00ffc 0000000f 80000000     ................
    c3a0:	00003fff fffe07fe 00000007 00000000     .?..............
    c3b0:	0001ffff ffffc3ff 00000003 00000000     ................
    c3c0:	ffffffff ffffffff 00000003 00000000     ................
    c3d0:	fffffffe ffffffff 00000001 00000000     ................
    c3e0:	fffffffe ffffffff 00000000 00000000     ................
    c3f0:	fffffffc 7fffffff 00000000 00000000     ................
    c400:	fffffff8 3fffffff 00000000 00000000     .......?........
    c410:	fffffff8 1fffffff 00000000 00000000     ................
    c420:	fffffff0 0fffffff 00000000 00000000     ................
    c430:	ffffffe0 07ffffff 00000000 00000000     ................
    c440:	ffffff80 01ffffff 00000000 00000000     ................
    c450:	ffffff00 00ffffff 00000000 00000000     ................
    c460:	fffffc00 003fffff 00000000 00000000     ......?.........
    c470:	fffff000 0007ffff 00000000 00000000     ................
    c480:	ffffc000 0001ffff 00000000 00000000     ................
    c490:	fffe0000 00001fff 00000000 00000000     ................
    c4a0:	ff800000 0000003f 00000000 00000000     ....?...........
	...
    c560:	07c00000 c0000000 00000007 00000000     ................
    c570:	1ff00000 f0000000 0000001f 00000000     ................
    c580:	3ff80000 f8000000 0000003f 00000000     ...?....?.......
    c590:	7ffc0000 fc000000 0000007f 00000000     ................
    c5a0:	7ffc0000 fc000000 0000007f 00000000     ................
    c5b0:	fffe0000 fe000000 000000ff 00000000     ................
    c5c0:	fffe0000 fe000000 000000ff 00000000     ................
    c5d0:	fffe0000 fe000000 000000ff 00000000     ................
    c5e0:	fffe0000 fe000000 000000ff 00000000     ................
    c5f0:	fffe0000 fe000000 000000ff 00000000     ................
    c600:	fffe0000 fe000000 000000ff 00000000     ................
    c610:	7ffc0000 fc000000 0000007f 00000000     ................
    c620:	7ffc0000 fc000000 0000007f 00000000     ................
    c630:	3ff80000 f8000000 0000003f 00000000     ...?....?.......
    c640:	1ff00000 f0000000 0000001f 00000000     ................
    c650:	0fe00000 e0000000 0000000f 00000000     ................
	...
    c708:	00100000 00000000 00000000 00000000     ................
    c718:	003c0000 00000000 07c00000 00000000     ..<.............
    c728:	003f0000 00000000 1ff00000 00000000     ..?.............
    c738:	007fc000 00000000 3ff80000 00000000     ...........?....
    c748:	00fff800 00000000 7ffc0000 f8000000     ................
    c758:	00ffffff 00000000 7ffc0000 f8000000     ................
    c768:	01ffffff 00000000 fffe0000 f8000000     ................
    c778:	01ffffff 00000000 fffe0000 f8000000     ................
    c788:	00ffffff 00000000 fffe0000 f8000000     ................
    c798:	007fffff 00000000 fffe0000 f8000000     ................
    c7a8:	003fffff 00000000 fffe0000 f8000000     ..?.............
    c7b8:	000fffff 00000000 fffe0000 f8000000     ................
    c7c8:	0007ffff 00000000 7ffc0000 f8000000     ................
    c7d8:	0001ffff 00000000 7ffc0000 f8000000     ................
    c7e8:	00007fff 00000000 3ff80000 f8000000     ...........?....
    c7f8:	00001fff 00000000 1ff00000 f8000000     ................
    c808:	000003ff 00000000 0fe00000 00000000     ................
	...
    c8a4:	00007ff8 00000000 00000000 00000000     ................
    c8b4:	0000fffc 00000000 00000000 00000000     ................
    c8c4:	0000fffc 00000000 00000000 00000000     ................
    c8d4:	0001fffe 00000000 00000000 00000000     ................
    c8e4:	0001fffe 00000000 00000000 00000000     ................
    c8f4:	0001fffe 00000000 00000000 00000000     ................
    c904:	0003ffff 00000000 00000000 00000000     ................
    c914:	0003ffff 00000000 00000000 80000000     ................
    c924:	0007ffff 00000000 00000000 80000000     ................
    c934:	0007ffff 00000000 00000000 80000000     ................
    c944:	0007ffff 00000000 00000000 c0000000     ................
    c954:	000fffff 00000000 00000000 c0000000     ................
    c964:	000fffff 00000000 00000000 e0000000     ................
    c974:	001fffff 00000000 00000000 e0000000     ................
    c984:	001fffff 00000000 00000000 f0000000     ................
    c994:	003ffdff 00000000 00000000 f0000000     ..?.............
    c9a4:	003ffcff 00000000 00000000 f0000000     ..?.............
    c9b4:	003ffcff 00000000 00000000 f8000000     ..?.............
    c9c4:	007ff87f 00000000 00000000 f8000000     ................
    c9d4:	007ff87f 00000000 00000000 fc000000     ................
    c9e4:	00fff87f 00000000 00000000 fc000000     ................
    c9f4:	00fff03f 00000000 00000000 fe000000     ?...............
    ca04:	01fff03f 00000000 00000000 fe000000     ?...............
    ca14:	01fff03f 00000000 00000000 fe000000     ?...............
    ca24:	01ffe01f 00000000 00000000 ff000000     ................
    ca34:	03ffe01f 00000000 00000000 ff000000     ................
    ca44:	03ffc01f 00000000 00000000 ff800000     ................
    ca54:	07ffc00f 00000000 00000000 ff800000     ................
    ca64:	07ffc00f 00000000 00000000 ffc00000     ................
    ca74:	0fff8007 00000000 00000000 ffc00000     ................
    ca84:	0fff8007 00000000 00000000 ffc00000     ................
    ca94:	0fff8007 00000000 00000000 ffe00000     ................
    caa4:	1fff0003 00000000 00000000 ffe00000     ................
    cab4:	1fff0003 00000000 00000000 fff00000     ................
    cac4:	3fff0003 00000000 00000000 fff00000     ...?............
    cad4:	3ffe0001 00000000 00000000 fff80000     ...?............
    cae4:	7ffe0001 00000000 00000000 fff80000     ................
    caf4:	7ffe0001 00000000 00000000 fff80000     ................
    cb04:	7ffc0000 00000000 00000000 fffc0000     ................
    cb14:	fffc0000 00000000 00000000 7ffc0000     ................
    cb24:	fff80000 00000000 00000000 7ffe0000     ................
    cb34:	fff80000 00000001 00000000 00000000     ................
	...
    cc10:	ff800000 007ff003 00000000 00000000     ................
    cc20:	ff800000 007ff003 00000000 00000000     ................
    cc30:	ff800000 007ff003 00000000 00000000     ................
    cc40:	ff800000 007ff003 00000000 00000000     ................
    cc50:	ff800000 007ff003 00000000 00000000     ................
    cc60:	ff800000 007ff003 00000000 00000000     ................
    cc70:	ff800000 007ff003 00000000 00000000     ................
    cc80:	ff800000 007ff003 00000000 00000000     ................
    cc90:	ff800000 007ff003 00000000 00000000     ................
    cca0:	ff800000 007ff003 00000000 00000000     ................
    ccb0:	ff800000 007ff003 00000000 00000000     ................
    ccc0:	ff800000 007ff003 00000000 00000000     ................
    ccd0:	ff800000 007ff003 00000000 00000000     ................
    cce0:	ff800000 007ff003 00000000 00000000     ................
    ccf0:	ff800000 007ff003 00000000 00000000     ................
    cd00:	ff800000 007ff003 00000000 00000000     ................
    cd10:	ff800000 007ff003 00000000 00000000     ................
    cd20:	ff800000 007ff003 00000000 00000000     ................
    cd30:	ff800000 007ff003 00000000 00000000     ................
    cd40:	ff800000 007ff003 00000000 00000000     ................
    cd50:	ff800000 007ff003 00000000 00000000     ................
    cd60:	ff800000 007ff003 00000000 00000000     ................
    cd70:	ff800000 007ff003 00000000 00000000     ................
    cd80:	ff800000 007ff003 00000000 00000000     ................
    cd90:	ff800000 007ff003 00000000 00000000     ................
    cda0:	ff800000 007ff003 00000000 00000000     ................
    cdb0:	ff800000 007ff003 00000000 00000000     ................
    cdc0:	ff800000 007ff003 00000000 00000000     ................
    cdd0:	ff800000 007ff003 00000000 00000000     ................
    cde0:	ff800000 007ff003 00000000 00000000     ................
    cdf0:	ff800000 007ff003 00000000 00000000     ................
    ce00:	ff800000 007ff003 00000000 00000000     ................
    ce10:	ff800000 007ff003 00000000 00000000     ................
    ce20:	ff800000 007ff003 00000000 00000000     ................
    ce30:	ff800000 007ff003 00000000 00000000     ................
    ce40:	ff800000 007ff003 00000000 00000000     ................
    ce50:	ff800000 007ff003 00000000 00000000     ................
    ce60:	ff800000 007ff003 00000000 00000000     ................
    ce70:	ff800000 007ff003 00000000 00000000     ................
    ce80:	ff800000 007ff003 00000000 00000000     ................
    ce90:	ff800000 007ff003 00000000 00000000     ................
    cea0:	ff800000 007ff003 00000000 00000000     ................
    ceb0:	ff800000 007ff003 00000000 00000000     ................
    cec0:	ff800000 007ff003 00000000 00000000     ................
	...
    cfa0:	7ffe0000 fff80000 00000001 00000000     ................
    cfb0:	7ffc0000 fff80000 00000000 00000000     ................
    cfc0:	fffc0000 fffc0000 00000000 00000000     ................
    cfd0:	fff80000 7ffc0000 00000000 00000000     ................
    cfe0:	fff80000 7ffc0000 00000000 00000000     ................
    cff0:	fff80000 7ffe0001 00000000 00000000     ................
    d000:	fff00000 3ffe0001 00000000 00000000     .......?........
    d010:	fff00000 3fff0001 00000000 00000000     .......?........
    d020:	ffe00000 1fff0003 00000000 00000000     ................
    d030:	ffe00000 1fff0003 00000000 00000000     ................
    d040:	ffe00000 1fff8007 00000000 00000000     ................
    d050:	ffc00000 0fff8007 00000000 00000000     ................
    d060:	ffc00000 0fff8007 00000000 00000000     ................
    d070:	ff800000 07ffc00f 00000000 00000000     ................
    d080:	ff800000 07ffc00f 00000000 00000000     ................
    d090:	ff000000 03ffc00f 00000000 00000000     ................
    d0a0:	ff000000 03ffe01f 00000000 00000000     ................
    d0b0:	ff000000 03ffe01f 00000000 00000000     ................
    d0c0:	fe000000 01ffe01f 00000000 00000000     ................
    d0d0:	fe000000 01fff03f 00000000 00000000     ....?...........
    d0e0:	fc000000 00fff03f 00000000 00000000     ....?...........
    d0f0:	fc000000 00fff83f 00000000 00000000     ....?...........
    d100:	f8000000 007ff87f 00000000 00000000     ................
    d110:	f8000000 007ff87f 00000000 00000000     ................
    d120:	f8000000 007ffc7f 00000000 00000000     ................
    d130:	f0000000 003ffcff 00000000 00000000     ......?.........
    d140:	f0000000 003ffcff 00000000 00000000     ......?.........
    d150:	e0000000 001fffff 00000000 00000000     ................
    d160:	e0000000 001fffff 00000000 00000000     ................
    d170:	e0000000 000fffff 00000000 00000000     ................
    d180:	c0000000 000fffff 00000000 00000000     ................
    d190:	c0000000 000fffff 00000000 00000000     ................
    d1a0:	80000000 0007ffff 00000000 00000000     ................
    d1b0:	80000000 0007ffff 00000000 00000000     ................
    d1c0:	00000000 0003ffff 00000000 00000000     ................
    d1d0:	00000000 0003ffff 00000000 00000000     ................
    d1e0:	00000000 0003ffff 00000000 00000000     ................
    d1f0:	00000000 0001fffe 00000000 00000000     ................
    d200:	00000000 0001fffe 00000000 00000000     ................
    d210:	00000000 0000fffc 00000000 00000000     ................
    d220:	00000000 0000fffc 00000000 00000000     ................
    d230:	00000000 00007ff8 00000000 00000000     ................
    d240:	00000000 00007ff8 00000000 00000000     ................
	...
    d2a0:	0003c000 00000000 00000000 00000000     ................
    d2b0:	0003fc00 00000000 00000000 00000000     ................
    d2c0:	0003ff00 00000000 00000000 00000000     ................
    d2d0:	0003ffc0 00000000 00000000 00000000     ................
    d2e0:	0003ffe0 00000000 00000000 00000000     ................
    d2f0:	0003fff0 00000000 00000000 00000000     ................
    d300:	0003fff8 00000000 00000000 00000000     ................
    d310:	0003fffc 00000000 00000000 00000000     ................
    d320:	0003fffc 00000000 00000000 00000000     ................
    d330:	0003fffe 00000000 00000000 00000000     ................
    d340:	0003ffff 00000000 00000000 00000000     ................
    d350:	0003ffff 00000000 00000000 00000000     ................
    d360:	0003ffff 00000000 00000000 80000000     ................
    d370:	0003ffff 00000000 00000000 80000000     ................
    d380:	0001ffff e0000000 0000000f 80000000     ................
    d390:	00001fff f801fc00 0000003f 80000000     ........?.......
    d3a0:	00000fff f801ffc0 0000007f c0000000     ................
    d3b0:	000007ff fc01fff0 0000007f c0000000     ................
    d3c0:	000003ff fe01fff8 000000ff c0000000     ................
    d3d0:	000003ff fe01fffe 000000ff c0000000     ................
    d3e0:	000001ff fe01ffff 000000ff c0000000     ................
    d3f0:	800001ff fe01ffff 000000ff c0000000     ................
    d400:	c00001ff fe01ffff 000000ff c0000000     ................
    d410:	e00001ff fe01ffff 000000ff c0000000     ................
    d420:	f00001ff fe01ffff 000000ff c0000000     ................
    d430:	f80001ff fc01ffff 0000007f c0000000     ................
    d440:	fc0003ff fc01ffff 0000007f c0000000     ................
    d450:	fe0003ff f801ffff 0000003f c0000000     ........?.......
    d460:	ff0007ff e00007ff 0000000f 80000000     ................
    d470:	ffc01fff 000001ff 00000001 80000000     ................
    d480:	ffffffff 0000007f 00000000 80000000     ................
    d490:	ffffffff 0000003f 00000000 80000000     ....?...........
    d4a0:	ffffffff 0000001f 00000000 00000000     ................
    d4b0:	ffffffff 0000000f 00000000 00000000     ................
    d4c0:	ffffffff 00000007 00000000 00000000     ................
    d4d0:	fffffffe 00000003 00000000 00000000     ................
    d4e0:	fffffffe 00000001 00000000 00000000     ................
    d4f0:	fffffffc 00000000 00000000 00000000     ................
    d500:	7ffffff8 00000000 00000000 00000000     ................
    d510:	3ffffff0 00000000 00000000 00000000     ...?............
    d520:	1fffffe0 00000000 00000000 00000000     ................
    d530:	07ffffc0 00000000 00000000 00000000     ................
    d540:	03ffff00 00000000 00000000 00000000     ................
    d550:	007ffc00 00000000 00000000 00000000     ................
    d560:	00070000 00000000 00000000 00000000     ................
	...
    d5e4:	07fff800 00000000 00000000 00000000     ................
    d5f4:	ffffffe0 00000001 00000000 00000000     ................
    d604:	fffffffe 0000000f 00000000 c0000000     ................
    d614:	ffffffff 0000007f 00000000 f8000000     ................
    d624:	ffffffff 000001ff 00000000 fe000000     ................
    d634:	ffffffff 000007ff 00000000 ff800000     ................
    d644:	ffffffff 00001fff 00000000 ffe00000     ................
    d654:	ffffffff 00003fff 00000000 fff00000     .....?..........
    d664:	ffffffff 0000ffff 00000000 fffc0000     ................
    d674:	ffffffff 0001ffff 00000000 fffe0000     ................
    d684:	e00001ff 0003ffff 00000000 ffff0000     ................
    d694:	0000000f 0007fffe 00000000 ffff8000     ................
    d6a4:	00000001 000ffff0 00000000 3fffe000     ...............?
    d6b4:	00000000 001fffc0 00000000 0ffff000     ................
    d6c4:	00000000 003fff00 00000000 03fff800     ......?.........
    d6d4:	00000000 003ffc00 00000000 00fff800     ......?.........
    d6e4:	00000000 007ff800 00000000 007ffc00     ................
    d6f4:	00000000 00fff000 00000000 001ffe00     ................
    d704:	00000000 00ffe000 00000000 000fff00     ................
    d714:	00000000 01ffc000 00000000 0007ff00     ................
    d724:	00000000 01ff8000 00000000 0003ff80     ................
    d734:	01fc0000 03ff0000 00000000 0001ffc0     ................
    d744:	3ffff000 03fe0000 00000000 0000ffc0     ...?............
    d754:	ffffff00 03fe0000 00000000 00007fe0     ................
    d764:	ffffffc0 07fc0003 00000000 00003fe0     .............?..
    d774:	fffffff0 07fc0007 00000000 00003ff0     .............?..
    d784:	fffffffc 07f8000f 00000000 00001ff0     ................
    d794:	ffffffff 0ff8001f 00000000 80001ff0     ................
    d7a4:	ffffffff 0ff8003f 00000000 e0000ff8     ....?...........
    d7b4:	ffffffff 0ff0007f 00000000 f0000ff8     ................
    d7c4:	ffffffff 0ff0007f 00000000 f80007f8     ................
    d7d4:	ffffffff 0ff0007f 00000000 fc0007fc     ................
    d7e4:	ff03ffff 1ff000ff 00000000 fc0003fc     ................
    d7f4:	f00007ff 1fe000ff 00000000 fe0003fc     ................
    d804:	c00000ff 1fe000ff 00000000 ff0003fc     ................
    d814:	8000001f 1fe000ff 00000000 ff0003fc     ................
    d824:	80000007 1fe000ff 00000000 ff8001fe     ................
    d834:	00000003 1fe000ff 00000000 ff8001fe     ................
    d844:	00000001 1fe000ff 00000000 ff8001fe     ................
    d854:	00000000 1fe000ff 00000000 7fc001fe     ................
    d864:	00000000 1fe0007f 00000000 7fc001fe     ................
    d874:	80000000 1fe0007f 00000000 3fc001fe     ...............?
    d884:	80000000 1fe0007f 00000000 3fc001fe     ...............?
    d894:	c0000000 1fe0003f 00000000 3fc001fe     ....?..........?
    d8a4:	e0000000 1fe0001f 00000000 3fc001fe     ...............?
    d8b4:	f8000000 1fe0001f 00000000 3fc001fe     ...............?
    d8c4:	fe000000 1ff0000f 00000000 3fc001fe     ...............?
    d8d4:	fff00000 0ff00007 00000000 3fc001fe     ...............?
    d8e4:	ffffff00 0ff00003 00000000 ffc001fe     ................
    d8f4:	ffffffff 0ff00007 00000000 ff8003fe     ................
    d904:	ffffffff 0ff0000f 00000000 ff8003fc     ................
    d914:	ffffffff 0ff8001f 00000000 ff8003fc     ................
    d924:	ffffffff 07f8003f 00000000 ff0003fc     ....?...........
    d934:	ffffffff 07f8007f 00000000 ff0007fc     ................
    d944:	ffffffff 07fc007f 00000000 fe0007fc     ................
    d954:	ffffffff 03fc007f 00000000 fe0007f8     ................
    d964:	ffffffff 03fc00ff 00000000 fc000ff8     ................
    d974:	c00fffff 01c000ff 00000000 f8000ff8     ................
    d984:	000001ff 000000ff 00000000 18001ff0     ................
    d994:	00000000 000000ff 00000000 00001ff0     ................
    d9a4:	00000000 000000fe 00000000 00003fe0     .............?..
    d9b4:	00000000 000000fe 00000000 00007fe0     ................
    d9c4:	00000000 000000fe 00000000 0000ffc0     ................
    d9d4:	00000000 000000fe 00000000 0000ffc0     ................
    d9e4:	00000000 000000fe 00000000 0003ff80     ................
    d9f4:	00000000 000000ff 00000000 0007ff80     ................
    da04:	00000000 0000007f 00000000 000fff00     ................
    da14:	80000000 0000007f 00000000 003ffe00     ..............?.
    da24:	c0000000 0000007f 00000000 007ffc00     ................
    da34:	f0000000 0000003f 00000000 03fff800     ....?...........
    da44:	fc000000 0000003f 00000000 0ffff000     ....?...........
    da54:	ff000000 0000001f 00000000 ffffe000     ................
    da64:	fff00001 0000000f 00000000 ffffc000     ................
    da74:	ffffffff 00000007 00000000 ffff8000     ................
    da84:	ffffffff 00000003 00000000 fffe0000     ................
    da94:	ffffffff 00000001 00000000 fffc0000     ................
    daa4:	ffffffff 00000000 00000000 fff00000     ................
    dab4:	3fffffff 00000000 00000000 ffc00000     ...?............
    dac4:	0fffffff 00000000 00000000 fe000000     ................
    dad4:	03ffffff 00000000 00000000 f0000000     ................
    dae4:	007fffff 00000000 00000000 00000000     ................
    daf4:	0003fffe 00000000 00000000 00000000     ................
	...
    db48:	00000040 00000000 00000000 00000000     @...............
    db58:	00000070 00000000 00000000 00000000     p...............
    db68:	0000007e 00000000 00000000 c0000000     ~...............
    db78:	0000007f 00000000 00000000 f0000000     ................
    db88:	0000007f 00000000 00000000 fe000000     ................
    db98:	0000007f 00000000 00000000 ffc00000     ................
    dba8:	0000007f 00000000 00000000 fff00000     ................
    dbb8:	0000007f 00000000 00000000 fffe0000     ................
    dbc8:	0000007f 00000000 00000000 ffffc000     ................
    dbd8:	0000007f 00000000 00000000 fffff000     ................
    dbe8:	0000007f 00000000 00000000 fffffe00     ................
    dbf8:	0000007f 00000000 00000000 ffffffc0     ................
    dc08:	0000007f 00000000 00000000 fffffff0     ................
    dc18:	0000007f 00000000 00000000 fffffffe     ................
    dc28:	0000007f 00000000 c0000000 ffffffff     ................
    dc38:	0000007f 00000000 f8000000 ffffffff     ................
    dc48:	0000003f 00000000 fe000000 ffffffff     ?...............
    dc58:	00000003 00000000 ffc00000 7fffffff     ................
	...
    dc70:	fff80000 0fffffff 00000000 00000000     ................
    dc80:	fffe0000 01ffffff 00000000 00000000     ................
    dc90:	ffffc000 007fffff 00000000 00000000     ................
    dca0:	fffff800 007fffff 00000000 00000000     ................
    dcb0:	fffffe00 007fffff 00000000 00000000     ................
    dcc0:	ffffffc0 007fffff 00000000 00000000     ................
    dcd0:	fffffff8 007ff7ff 00000000 00000000     ................
    dce0:	fffffffe 007ff0ff 00000000 80000000     ................
    dcf0:	ffffffff 007ff01f 00000000 80000000     ................
    dd00:	ffffffff 007ff003 00000000 80000000     ................
    dd10:	7fffffff 007ff000 00000000 80000000     ................
    dd20:	0fffffff 007ff000 00000000 80000000     ................
    dd30:	01ffffff 007ff000 00000000 80000000     ................
    dd40:	003fffff 007ff000 00000000 80000000     ..?.............
    dd50:	0007ffff 007ff000 00000000 80000000     ................
    dd60:	0007ffff 007ff000 00000000 80000000     ................
    dd70:	003fffff 007ff000 00000000 80000000     ..?.............
    dd80:	01ffffff 007ff000 00000000 80000000     ................
    dd90:	0fffffff 007ff000 00000000 80000000     ................
    dda0:	7fffffff 007ff000 00000000 80000000     ................
    ddb0:	ffffffff 007ff003 00000000 80000000     ................
    ddc0:	ffffffff 007ff01f 00000000 00000000     ................
    ddd0:	fffffffe 007ff0ff 00000000 00000000     ................
    dde0:	fffffff0 007ff7ff 00000000 00000000     ................
    ddf0:	ffffffc0 007fffff 00000000 00000000     ................
    de00:	fffffe00 007fffff 00000000 00000000     ................
    de10:	fffff000 007fffff 00000000 00000000     ................
    de20:	ffffc000 007fffff 00000000 00000000     ................
    de30:	fffe0000 01ffffff 00000000 00000000     ................
    de40:	fff00000 0fffffff 00000000 00000000     ................
    de50:	ffc00000 7fffffff 00000000 00000000     ................
    de60:	fe000000 ffffffff 00000003 00000000     ................
    de70:	f0000000 ffffffff 0000003f 00000000     ........?.......
    de80:	c0000000 ffffffff 0000007f 00000000     ................
    de90:	00000000 fffffffe 0000007f 00000000     ................
    dea0:	00000000 fffffff0 0000007f 00000000     ................
    deb0:	00000000 ffffffc0 0000007f 00000000     ................
    dec0:	00000000 fffffe00 0000007f 00000000     ................
    ded0:	00000000 fffff000 0000007f 00000000     ................
    dee0:	00000000 ffffc000 0000007f 00000000     ................
    def0:	00000000 fffe0000 0000007f 00000000     ................
    df00:	00000000 fff00000 0000007f 00000000     ................
    df10:	00000000 ff800000 0000007f 00000000     ................
    df20:	00000000 fe000000 0000007f 00000000     ................
    df30:	00000000 f0000000 0000007f 00000000     ................
    df40:	00000000 80000000 0000007f 00000000     ................
	...
    df58:	0000007e 00000000 00000000 00000000     ~...............
    df68:	00000070 00000000 00000000 00000000     p...............
    df78:	00000040 00000000 00000000 00000000     @...............
	...
    dfdc:	80000000 ffffffff ffffffff 0000007f     ................
    dfec:	80000000 ffffffff ffffffff 0000007f     ................
    dffc:	80000000 ffffffff ffffffff 0000007f     ................
    e00c:	80000000 ffffffff ffffffff 0000007f     ................
    e01c:	80000000 ffffffff ffffffff 0000007f     ................
    e02c:	80000000 ffffffff ffffffff 0000007f     ................
    e03c:	80000000 ffffffff ffffffff 0000007f     ................
    e04c:	80000000 ffffffff ffffffff 0000007f     ................
    e05c:	80000000 ffffffff ffffffff 0000007f     ................
    e06c:	80000000 ffffffff ffffffff 0000007f     ................
    e07c:	80000000 ffffffff ffffffff 0000007f     ................
    e08c:	80000000 ffffffff ffffffff 0000007f     ................
    e09c:	80000000 ffffffff ffffffff 0000007f     ................
    e0ac:	80000000 ffffffff ffffffff 0000007f     ................
    e0bc:	80000000 ffffffff ffffffff 0000007f     ................
    e0cc:	80000000 e00003ff f00000ff 0000007f     ................
    e0dc:	80000000 e00003ff f00000ff 0000007f     ................
    e0ec:	80000000 e00003ff f00000ff 0000007f     ................
    e0fc:	80000000 e00003ff f00000ff 0000007f     ................
    e10c:	80000000 e00003ff f00000ff 0000007f     ................
    e11c:	80000000 e00003ff f00000ff 0000007f     ................
    e12c:	80000000 e00003ff f00000ff 0000007f     ................
    e13c:	80000000 e00003ff f00000ff 0000007f     ................
    e14c:	80000000 e00003ff f00000ff 0000007f     ................
    e15c:	80000000 e00003ff f00000ff 0000007f     ................
    e16c:	80000000 e00003ff f00000ff 0000007f     ................
    e17c:	80000000 e00003ff f00000ff 0000007f     ................
    e18c:	80000000 e00003ff f00000ff 0000007f     ................
    e19c:	80000000 e00003ff f00000ff 0000007f     ................
    e1ac:	80000000 e00003ff f00000ff 0000007f     ................
    e1bc:	80000000 f00007ff f00000ff 0000007f     ................
    e1cc:	80000000 f00007ff f00000ff 0000007f     ................
    e1dc:	80000000 f00007ff f80001ff 0000007f     ................
    e1ec:	00000000 f8000fff f80001ff 0000007f     ................
    e1fc:	00000000 fc000fff fc0001ff 0000007f     ................
    e20c:	00000000 fe003fff fc0003ff 0000003f     .....?......?...
    e21c:	00000000 ff807fff fe0007ff 0000003f     ............?...
    e22c:	00000000 ffffffff ff800fff 0000003f     ............?...
    e23c:	00000000 fffffffe ffe07fff 0000003f     ............?...
    e24c:	00000000 fffffffe ffffffff 0000001f     ................
    e25c:	00000000 fffffffe ffffffff 0000001f     ................
    e26c:	00000000 fffffffc ffffffff 0000001f     ................
    e27c:	00000000 fffffffc ffffffff 0000000f     ................
    e28c:	00000000 fffffff8 fffffff9 0000000f     ................
    e29c:	00000000 fffffff0 fffffff9 00000007     ................
    e2ac:	00000000 fffffff0 fffffff8 00000007     ................
    e2bc:	00000000 7fffffe0 fffffff0 00000003     ................
    e2cc:	00000000 3fffffc0 ffffffe0 00000001     .......?........
    e2dc:	00000000 1fffff80 ffffffc0 00000000     ................
    e2ec:	00000000 0ffffe00 7fffff80 00000000     ................
    e2fc:	00000000 03fff800 3fffff00 00000000     ...........?....
    e30c:	00000000 007fc000 0ffffe00 00000000     ................
	...
    e324:	01fff000 00000000 00000000 00000000     ................
    e334:	00060000 00000000 00000000 00000000     ................
	...
    e3c0:	f8000000 000007ff 00000000 00000000     ................
    e3d0:	ffe00000 0001ffff 00000000 00000000     ................
    e3e0:	fffc0000 001fffff 00000000 00000000     ................
    e3f0:	ffff8000 007fffff 00000000 00000000     ................
    e400:	ffffe000 01ffffff 00000000 00000000     ................
    e410:	fffff800 07ffffff 00000000 00000000     ................
    e420:	fffffc00 1fffffff 00000000 00000000     ................
    e430:	ffffff00 3fffffff 00000000 00000000     .......?........
    e440:	ffffff80 7fffffff 00000000 00000000     ................
    e450:	ffffffc0 ffffffff 00000000 00000000     ................
    e460:	ffffffe0 ffffffff 00000001 00000000     ................
    e470:	fffffff0 ffffffff 00000003 00000000     ................
    e480:	fffffff8 ffffffff 00000007 00000000     ................
    e490:	fffffff8 ffffffff 00000007 00000000     ................
    e4a0:	fffffffc ffffffff 0000000f 00000000     ................
    e4b0:	07fffffc fffff000 0000001f 00000000     ................
    e4c0:	001ffffe fffe0000 0000001f 00000000     ................
    e4d0:	0003fffe fff00000 0000003f 00000000     ........?.......
    e4e0:	0000ffff ffc00000 0000003f 00000000     ........?.......
    e4f0:	00007fff ff000000 0000003f 80000000     ........?.......
    e500:	00003fff fe000000 0000007f 80000000     .?..............
    e510:	00001fff fc000000 0000007f 80000000     ................
    e520:	00000fff fc000000 0000007f 80000000     ................
    e530:	000007ff f8000000 0000007f c0000000     ................
    e540:	000007ff f8000000 000000ff c0000000     ................
    e550:	000007ff f8000000 000000ff c0000000     ................
    e560:	000003ff f0000000 000000ff c0000000     ................
    e570:	000003ff f0000000 000000ff c0000000     ................
    e580:	000003ff f0000000 000000ff c0000000     ................
    e590:	000003ff f0000000 000000ff c0000000     ................
    e5a0:	000003ff f0000000 000000ff c0000000     ................
    e5b0:	000003ff f0000000 000000ff c0000000     ................
    e5c0:	000003ff f0000000 000000ff c0000000     ................
    e5d0:	000003ff f0000000 000000ff c0000000     ................
    e5e0:	000003ff f0000000 000000ff c0000000     ................
    e5f0:	000007ff f8000000 000000ff c0000000     ................
    e600:	000007ff f8000000 0000007f 80000000     ................
    e610:	000007ff f8000000 0000007f 80000000     ................
    e620:	00000fff fc000000 0000007f 80000000     ................
    e630:	00001fff fe000000 0000007f 80000000     ................
    e640:	00001fff ff000000 0000007f 00000000     ................
    e650:	00007fff ff800000 0000003f 00000000     ........?.......
    e660:	0000ffff ffe00000 0000003f 00000000     ........?.......
    e670:	0007fffe fffc0000 0000003f 00000000     ........?.......
    e680:	007ffffe ffff8000 0000001f 00000000     ................
    e690:	007ffffe ffff8000 0000001f 00000000     ................
    e6a0:	007ffffc ffff8000 0000000f 00000000     ................
    e6b0:	007ffff8 ffff8000 00000007 00000000     ................
    e6c0:	007ffff8 ffff8000 00000007 00000000     ................
    e6d0:	007ffff0 ffff8000 00000003 00000000     ................
    e6e0:	007fffe0 ffff8000 00000001 00000000     ................
    e6f0:	007fffc0 ffff8000 00000000 00000000     ................
    e700:	007fff80 7fff8000 00000000 00000000     ................
    e710:	007fff00 3fff8000 00000000 00000000     .......?........
    e720:	007ffc00 1fff8000 00000000 00000000     ................
    e730:	007ff800 07ff8000 00000000 00000000     ................
    e740:	007fc000 01ff8000 00000000 00000000     ................
    e750:	007f0000 003f8000 00000000 00000000     ......?.........
    e760:	00600000 00038000 00000000 00000000     ..`.............
	...
    e7fc:	80000000 ffffffff ffffffff 0000007f     ................
    e80c:	80000000 ffffffff ffffffff 0000007f     ................
    e81c:	80000000 ffffffff ffffffff 0000007f     ................
    e82c:	80000000 ffffffff ffffffff 0000007f     ................
    e83c:	80000000 ffffffff ffffffff 0000007f     ................
    e84c:	80000000 ffffffff ffffffff 0000007f     ................
    e85c:	80000000 ffffffff ffffffff 0000007f     ................
    e86c:	80000000 ffffffff ffffffff 0000007f     ................
    e87c:	80000000 ffffffff ffffffff 0000007f     ................
    e88c:	80000000 ffffffff ffffffff 0000007f     ................
    e89c:	80000000 ffffffff ffffffff 0000007f     ................
    e8ac:	80000000 ffffffff ffffffff 0000007f     ................
    e8bc:	80000000 ffffffff ffffffff 0000007f     ................
    e8cc:	80000000 ffffffff ffffffff 0000007f     ................
    e8dc:	80000000 ffffffff ffffffff 0000007f     ................
    e8ec:	80000000 000003ff f0000000 0000007f     ................
    e8fc:	80000000 000003ff f0000000 0000007f     ................
    e90c:	80000000 000003ff f0000000 0000007f     ................
    e91c:	80000000 000003ff f0000000 0000007f     ................
    e92c:	80000000 000003ff f0000000 0000007f     ................
    e93c:	80000000 000003ff f0000000 0000007f     ................
    e94c:	80000000 000003ff f0000000 0000007f     ................
    e95c:	80000000 000003ff f0000000 0000007f     ................
    e96c:	80000000 000003ff f0000000 0000007f     ................
    e97c:	80000000 000003ff f0000000 0000007f     ................
    e98c:	80000000 000003ff f0000000 0000007f     ................
    e99c:	80000000 000003ff f0000000 0000007f     ................
    e9ac:	80000000 000007ff f8000000 0000007f     ................
    e9bc:	80000000 000007ff f8000000 0000007f     ................
    e9cc:	00000000 000007ff f8000000 0000003f     ............?...
    e9dc:	00000000 00000fff fc000000 0000003f     ............?...
    e9ec:	00000000 00000fff fc000000 0000003f     ............?...
    e9fc:	00000000 00001fff fe000000 0000003f     ............?...
    ea0c:	00000000 00003ffe ff000000 0000001f     .....?..........
    ea1c:	00000000 00003ffe ff800000 0000001f     .....?..........
    ea2c:	00000000 0000fffe ffc00000 0000001f     ................
    ea3c:	00000000 0001fffc ffe00000 0000000f     ................
    ea4c:	00000000 0007fffc fff80000 0000000f     ................
    ea5c:	00000000 001ffff8 fffe0000 00000007     ................
    ea6c:	00000000 01fffff8 ffffe000 00000007     ................
    ea7c:	00000000 fffffff0 ffffffff 00000003     ................
    ea8c:	00000000 ffffffe0 ffffffff 00000001     ................
    ea9c:	00000000 ffffffe0 ffffffff 00000001     ................
    eaac:	00000000 ffffffc0 ffffffff 00000000     ................
    eabc:	00000000 ffffff80 7fffffff 00000000     ................
    eacc:	00000000 ffffff00 3fffffff 00000000     ...........?....
    eadc:	00000000 fffffe00 1fffffff 00000000     ................
    eaec:	00000000 fffffc00 0fffffff 00000000     ................
    eafc:	00000000 fffff800 07ffffff 00000000     ................
    eb0c:	00000000 ffffe000 01ffffff 00000000     ................
    eb1c:	00000000 ffffc000 00ffffff 00000000     ................
    eb2c:	00000000 ffff0000 003fffff 00000000     ..........?.....
    eb3c:	00000000 fffc0000 000fffff 00000000     ................
    eb4c:	00000000 ffe00000 0001ffff 00000000     ................
    eb5c:	00000000 fe000000 00001fff 00000000     ................
	...
    ec1c:	80000000 ffffffff ffffffff 0000007f     ................
    ec2c:	80000000 ffffffff ffffffff 0000007f     ................
    ec3c:	80000000 ffffffff ffffffff 0000007f     ................
    ec4c:	80000000 ffffffff ffffffff 0000007f     ................
    ec5c:	80000000 ffffffff ffffffff 0000007f     ................
    ec6c:	80000000 ffffffff ffffffff 0000007f     ................
    ec7c:	80000000 ffffffff ffffffff 0000007f     ................
    ec8c:	80000000 ffffffff ffffffff 0000007f     ................
    ec9c:	80000000 ffffffff ffffffff 0000007f     ................
    ecac:	80000000 ffffffff ffffffff 0000007f     ................
    ecbc:	80000000 ffffffff ffffffff 0000007f     ................
    eccc:	80000000 ffffffff ffffffff 0000007f     ................
    ecdc:	80000000 ffffffff ffffffff 0000007f     ................
    ecec:	80000000 ffffffff ffffffff 0000007f     ................
    ecfc:	80000000 ffffffff ffffffff 0000007f     ................
    ed0c:	80000000 f00003ff f000007f 0000007f     ................
    ed1c:	80000000 f00003ff f000007f 0000007f     ................
    ed2c:	80000000 f00003ff f000007f 0000007f     ................
    ed3c:	80000000 f00003ff f000007f 0000007f     ................
    ed4c:	80000000 f00003ff f000007f 0000007f     ................
    ed5c:	80000000 f00003ff f000007f 0000007f     ................
    ed6c:	80000000 f00003ff f000007f 0000007f     ................
    ed7c:	80000000 f00003ff f000007f 0000007f     ................
    ed8c:	80000000 f00003ff f000007f 0000007f     ................
    ed9c:	80000000 f00003ff f000007f 0000007f     ................
    edac:	80000000 f00003ff f000007f 0000007f     ................
    edbc:	80000000 f00003ff f000007f 0000007f     ................
    edcc:	80000000 f00003ff f000007f 0000007f     ................
    eddc:	80000000 f00003ff f000007f 0000007f     ................
    edec:	80000000 f00003ff f000007f 0000007f     ................
    edfc:	80000000 f00003ff f000007f 0000007f     ................
    ee0c:	80000000 f00003ff f000007f 0000007f     ................
    ee1c:	80000000 f00003ff f000007f 0000007f     ................
    ee2c:	80000000 f00003ff f000007f 0000007f     ................
    ee3c:	80000000 f00003ff f000007f 0000007f     ................
    ee4c:	80000000 f00003ff f000007f 0000007f     ................
    ee5c:	80000000 f00003ff f000007f 0000007f     ................
    ee6c:	80000000 f00003ff f000007f 0000007f     ................
    ee7c:	80000000 f00003ff f000007f 0000007f     ................
    ee8c:	80000000 f00003ff f000007f 0000007f     ................
    ee9c:	80000000 f00003ff f000007f 0000007f     ................
    eeac:	80000000 f00003ff f000007f 0000007f     ................
    eebc:	80000000 f00003ff f000007f 0000007f     ................
    eecc:	80000000 f00003ff f000007f 0000007f     ................
    eedc:	80000000 000003ff f0000000 0000007f     ................
    eeec:	80000000 000003ff f0000000 0000007f     ................
    eefc:	80000000 000003ff f0000000 0000007f     ................
    ef0c:	80000000 000003ff f0000000 0000007f     ................
	...
    ef24:	f0000000 0000007f 00000000 00000000     ................
	...
    efac:	80000000 ffffffff ffffffff 0000007f     ................
    efbc:	80000000 ffffffff ffffffff 0000007f     ................
    efcc:	80000000 ffffffff ffffffff 0000007f     ................
    efdc:	80000000 ffffffff ffffffff 0000007f     ................
    efec:	80000000 ffffffff ffffffff 0000007f     ................
    effc:	80000000 ffffffff ffffffff 0000007f     ................
    f00c:	80000000 ffffffff ffffffff 0000007f     ................
    f01c:	80000000 ffffffff ffffffff 0000007f     ................
    f02c:	80000000 ffffffff ffffffff 0000007f     ................
    f03c:	80000000 ffffffff ffffffff 0000007f     ................
    f04c:	80000000 ffffffff ffffffff 0000007f     ................
    f05c:	80000000 ffffffff ffffffff 0000007f     ................
    f06c:	80000000 ffffffff ffffffff 0000007f     ................
    f07c:	80000000 ffffffff ffffffff 0000007f     ................
    f08c:	80000000 ffffffff ffffffff 0000007f     ................
    f09c:	80000000 c00003ff 000001ff 00000000     ................
    f0ac:	80000000 c00003ff 000001ff 00000000     ................
    f0bc:	80000000 c00003ff 000001ff 00000000     ................
    f0cc:	80000000 c00003ff 000001ff 00000000     ................
    f0dc:	80000000 c00003ff 000001ff 00000000     ................
    f0ec:	80000000 c00003ff 000001ff 00000000     ................
    f0fc:	80000000 c00003ff 000001ff 00000000     ................
    f10c:	80000000 c00003ff 000001ff 00000000     ................
    f11c:	80000000 c00003ff 000001ff 00000000     ................
    f12c:	80000000 c00003ff 000001ff 00000000     ................
    f13c:	80000000 c00003ff 000001ff 00000000     ................
    f14c:	80000000 c00003ff 000001ff 00000000     ................
    f15c:	80000000 c00003ff 000001ff 00000000     ................
    f16c:	80000000 c00003ff 000001ff 00000000     ................
    f17c:	80000000 c00003ff 000001ff 00000000     ................
    f18c:	80000000 c00003ff 000001ff 00000000     ................
    f19c:	80000000 c00003ff 000001ff 00000000     ................
    f1ac:	80000000 c00003ff 000001ff 00000000     ................
    f1bc:	80000000 c00003ff 000001ff 00000000     ................
    f1cc:	80000000 c00003ff 000001ff 00000000     ................
    f1dc:	80000000 c00003ff 000001ff 00000000     ................
    f1ec:	80000000 c00003ff 000001ff 00000000     ................
    f1fc:	80000000 c00003ff 000001ff 00000000     ................
    f20c:	80000000 c00003ff 000001ff 00000000     ................
    f21c:	80000000 c00003ff 000001ff 00000000     ................
    f22c:	80000000 c00003ff 000001ff 00000000     ................
    f23c:	80000000 c00003ff 000001ff 00000000     ................
    f24c:	80000000 c00003ff 000001ff 00000000     ................
    f25c:	80000000 c00003ff 000001ff 00000000     ................
    f26c:	80000000 000003ff 00000000 00000000     ................
    f27c:	80000000 000003ff 00000000 00000000     ................
    f28c:	80000000 000003ff 00000000 00000000     ................
	...
    f310:	ff000000 00003fff 00000000 00000000     .....?..........
    f320:	fff80000 0003ffff 00000000 00000000     ................
    f330:	ffff0000 001fffff 00000000 00000000     ................
    f340:	ffffc000 00ffffff 00000000 00000000     ................
    f350:	fffff000 03ffffff 00000000 00000000     ................
    f360:	fffffc00 07ffffff 00000000 00000000     ................
    f370:	fffffe00 1fffffff 00000000 00000000     ................
    f380:	ffffff00 3fffffff 00000000 00000000     .......?........
    f390:	ffffff80 7fffffff 00000000 00000000     ................
    f3a0:	ffffffc0 ffffffff 00000000 00000000     ................
    f3b0:	ffffffe0 ffffffff 00000001 00000000     ................
    f3c0:	fffffff0 ffffffff 00000003 00000000     ................
    f3d0:	fffffff8 ffffffff 00000007 00000000     ................
    f3e0:	fffffffc ffffffff 00000007 00000000     ................
    f3f0:	fffffffc ffffffff 0000000f 00000000     ................
    f400:	00fffffe ffffc000 0000000f 00000000     ................
    f410:	000ffffe fffc0000 0000001f 00000000     ................
    f420:	0001ffff fff00000 0000001f 00000000     ................
    f430:	00007fff ffc00000 0000003f 00000000     ........?.......
    f440:	00003fff ff000000 0000003f 80000000     .?......?.......
    f450:	00001fff fe000000 0000007f 80000000     ................
    f460:	00000fff fc000000 0000007f 80000000     ................
    f470:	000007ff fc000000 0000007f 80000000     ................
    f480:	000007ff f8000000 0000007f c0000000     ................
    f490:	000003ff f0000000 0000007f c0000000     ................
    f4a0:	000003ff f0000000 000000ff c0000000     ................
    f4b0:	000001ff f0000000 000000ff c0000000     ................
    f4c0:	000001ff e0000000 000000ff c0000000     ................
    f4d0:	000001ff e0000000 000000ff c0000000     ................
    f4e0:	000001ff e0000000 000000ff c0000000     ................
    f4f0:	000001ff e0000ffe 000000ff c0000000     ................
    f500:	000001ff e0000ffe 000000ff c0000000     ................
    f510:	000001ff e0000ffe 000000ff c0000000     ................
    f520:	000001ff e0000ffe 000000ff c0000000     ................
    f530:	000001ff e0000ffe 000000ff c0000000     ................
    f540:	000003ff e0000ffe 000000ff c0000000     ................
    f550:	000003ff e0000ffe 000000ff 80000000     ................
    f560:	000007ff f0000ffe 000000ff 80000000     ................
    f570:	000007ff f0000ffe 0000007f 80000000     ................
    f580:	00000fff f0000ffe 0000007f 80000000     ................
    f590:	00001fff f8000ffe 0000007f 00000000     ................
    f5a0:	00003fff f8000ffe 0000007f 00000000     .?..............
    f5b0:	0000ffff fc000ffe 0000007f 00000000     ................
    f5c0:	0007ffff fe000ffe 0000003f 00000000     ........?.......
    f5d0:	003ffffe fffffffe 0000003f 00000000     ..?.....?.......
    f5e0:	003ffffe fffffffe 0000003f 00000000     ..?.....?.......
    f5f0:	003ffffc fffffffe 0000003f 00000000     ..?.....?.......
    f600:	003ffffc fffffffe 0000001f 00000000     ..?.............
    f610:	003ffff8 fffffffe 0000001f 00000000     ..?.............
    f620:	003ffff0 fffffffe 0000000f 00000000     ..?.............
    f630:	003fffe0 fffffffe 0000000f 00000000     ..?.............
    f640:	003fffc0 fffffffe 00000007 00000000     ..?.............
    f650:	003fff80 fffffffe 00000007 00000000     ..?.............
    f660:	003fff00 fffffffe 00000003 00000000     ..?.............
    f670:	003ffc00 fffffffe 00000001 00000000     ..?.............
    f680:	003ff800 fffffffe 00000001 00000000     ..?.............
    f690:	003fc000 fffffffe 00000000 00000000     ..?.............
    f6a0:	003e0000 7ffffffe 00000000 00000000     ..>.............
	...
    f76c:	80000000 ffffffff ffffffff 0000007f     ................
    f77c:	80000000 ffffffff ffffffff 0000007f     ................
    f78c:	80000000 ffffffff ffffffff 0000007f     ................
    f79c:	80000000 ffffffff ffffffff 0000007f     ................
    f7ac:	80000000 ffffffff ffffffff 0000007f     ................
    f7bc:	80000000 ffffffff ffffffff 0000007f     ................
    f7cc:	80000000 ffffffff ffffffff 0000007f     ................
    f7dc:	80000000 ffffffff ffffffff 0000007f     ................
    f7ec:	80000000 ffffffff ffffffff 0000007f     ................
    f7fc:	80000000 ffffffff ffffffff 0000007f     ................
    f80c:	80000000 ffffffff ffffffff 0000007f     ................
    f81c:	80000000 ffffffff ffffffff 0000007f     ................
    f82c:	80000000 ffffffff ffffffff 0000007f     ................
    f83c:	80000000 ffffffff ffffffff 0000007f     ................
    f84c:	80000000 ffffffff ffffffff 0000007f     ................
    f85c:	00000000 f0000000 0000007f 00000000     ................
    f86c:	00000000 f0000000 0000007f 00000000     ................
    f87c:	00000000 f0000000 0000007f 00000000     ................
    f88c:	00000000 f0000000 0000007f 00000000     ................
    f89c:	00000000 f0000000 0000007f 00000000     ................
    f8ac:	00000000 f0000000 0000007f 00000000     ................
    f8bc:	00000000 f0000000 0000007f 00000000     ................
    f8cc:	00000000 f0000000 0000007f 00000000     ................
    f8dc:	00000000 f0000000 0000007f 00000000     ................
    f8ec:	00000000 f0000000 0000007f 00000000     ................
    f8fc:	00000000 f0000000 0000007f 00000000     ................
    f90c:	00000000 f0000000 0000007f 00000000     ................
    f91c:	00000000 f0000000 0000007f 00000000     ................
    f92c:	00000000 f0000000 0000007f 00000000     ................
    f93c:	00000000 f0000000 0000007f 00000000     ................
    f94c:	00000000 f0000000 0000007f 00000000     ................
    f95c:	00000000 f0000000 0000007f 00000000     ................
    f96c:	00000000 f0000000 0000007f 00000000     ................
    f97c:	00000000 f0000000 0000007f 00000000     ................
    f98c:	00000000 f0000000 0000007f 00000000     ................
    f99c:	00000000 f0000000 0000007f 00000000     ................
    f9ac:	00000000 f0000000 0000007f 00000000     ................
    f9bc:	00000000 f0000000 0000007f 00000000     ................
    f9cc:	00000000 f0000000 0000007f 00000000     ................
    f9dc:	00000000 f0000000 0000007f 00000000     ................
    f9ec:	00000000 f0000000 0000007f 00000000     ................
    f9fc:	00000000 f0000000 0000007f 00000000     ................
    fa0c:	00000000 f0000000 0000007f 00000000     ................
    fa1c:	00000000 f0000000 0000007f 00000000     ................
    fa2c:	80000000 ffffffff ffffffff 0000007f     ................
    fa3c:	80000000 ffffffff ffffffff 0000007f     ................
    fa4c:	80000000 ffffffff ffffffff 0000007f     ................
    fa5c:	80000000 ffffffff ffffffff 0000007f     ................
    fa6c:	80000000 ffffffff ffffffff 0000007f     ................
    fa7c:	80000000 ffffffff ffffffff 0000007f     ................
    fa8c:	80000000 ffffffff ffffffff 0000007f     ................
    fa9c:	80000000 ffffffff ffffffff 0000007f     ................
    faac:	80000000 ffffffff ffffffff 0000007f     ................
    fabc:	80000000 ffffffff ffffffff 0000007f     ................
    facc:	80000000 ffffffff ffffffff 0000007f     ................
    fadc:	80000000 ffffffff ffffffff 0000007f     ................
    faec:	80000000 ffffffff ffffffff 0000007f     ................
    fafc:	80000000 ffffffff ffffffff 0000007f     ................
    fb0c:	80000000 ffffffff ffffffff 0000007f     ................
	...
    fbec:	80000000 ffffffff ffffffff 0000007f     ................
    fbfc:	80000000 ffffffff ffffffff 0000007f     ................
    fc0c:	80000000 ffffffff ffffffff 0000007f     ................
    fc1c:	80000000 ffffffff ffffffff 0000007f     ................
    fc2c:	80000000 ffffffff ffffffff 0000007f     ................
    fc3c:	80000000 ffffffff ffffffff 0000007f     ................
    fc4c:	80000000 ffffffff ffffffff 0000007f     ................
    fc5c:	80000000 ffffffff ffffffff 0000007f     ................
    fc6c:	80000000 ffffffff ffffffff 0000007f     ................
    fc7c:	80000000 ffffffff ffffffff 0000007f     ................
    fc8c:	80000000 ffffffff ffffffff 0000007f     ................
    fc9c:	80000000 ffffffff ffffffff 0000007f     ................
    fcac:	80000000 ffffffff ffffffff 0000007f     ................
    fcbc:	80000000 ffffffff ffffffff 0000007f     ................
    fccc:	80000000 ffffffff ffffffff 0000007f     ................
	...
    fd74:	01f80000 00000000 00000000 00000000     ................
    fd84:	0ff80000 00000000 00000000 00000000     ................
    fd94:	3ff80000 00000000 00000000 00000000     ...?............
    fda4:	fff80000 00000000 00000000 00000000     ................
    fdb4:	fff80000 00000001 00000000 00000000     ................
    fdc4:	fff80000 00000003 00000000 00000000     ................
    fdd4:	fff80000 00000007 00000000 00000000     ................
    fde4:	fff80000 0000000f 00000000 00000000     ................
    fdf4:	fff80000 0000000f 00000000 00000000     ................
    fe04:	fff80000 0000001f 00000000 00000000     ................
    fe14:	fff80000 0000001f 00000000 00000000     ................
    fe24:	fff80000 0000003f 00000000 00000000     ....?...........
    fe34:	fff80000 0000003f 00000000 00000000     ....?...........
    fe44:	fff80000 0000007f 00000000 00000000     ................
    fe54:	fff80000 0000007f 00000000 00000000     ................
    fe64:	ff000000 0000007f 00000000 00000000     ................
    fe74:	fc000000 0000007f 00000000 00000000     ................
    fe84:	f8000000 000000ff 00000000 00000000     ................
    fe94:	f0000000 000000ff 00000000 00000000     ................
    fea4:	f0000000 000000ff 00000000 00000000     ................
    feb4:	e0000000 000000ff 00000000 00000000     ................
    fec4:	e0000000 000000ff 00000000 00000000     ................
    fed4:	e0000000 000000ff 00000000 00000000     ................
    fee4:	e0000000 000000ff 00000000 00000000     ................
    fef4:	e0000000 000000ff 00000000 00000000     ................
    ff04:	e0000000 000000ff 00000000 00000000     ................
    ff14:	e0000000 000000ff 00000000 00000000     ................
    ff24:	f0000000 000000ff 00000000 00000000     ................
    ff34:	f0000000 000000ff 00000000 00000000     ................
    ff44:	f8000000 0000007f 00000000 00000000     ................
    ff54:	fc000000 0000007f 00000000 00000000     ................
    ff64:	fe000000 0000007f 00000000 00000000     ................
    ff74:	ff800000 0000007f 80000000 ffffffff     ................
    ff84:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    ff94:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    ffa4:	ffffffff 0000003f 80000000 ffffffff     ....?...........
    ffb4:	ffffffff 0000001f 80000000 ffffffff     ................
    ffc4:	ffffffff 0000001f 80000000 ffffffff     ................
    ffd4:	ffffffff 0000000f 80000000 ffffffff     ................
    ffe4:	ffffffff 00000007 80000000 ffffffff     ................
    fff4:	ffffffff 00000003 80000000 ffffffff     ................
   10004:	ffffffff 00000001 80000000 ffffffff     ................
   10014:	ffffffff 00000000 80000000 ffffffff     ................
   10024:	7fffffff 00000000 80000000 ffffffff     ................
   10034:	3fffffff 00000000 80000000 ffffffff     ...?............
   10044:	0fffffff 00000000 80000000 ffffffff     ................
   10054:	03ffffff 00000000 80000000 ffffffff     ................
   10064:	003fffff 00000000 00000000 00000000     ..?.............
	...
   1012c:	80000000 ffffffff ffffffff 0000007f     ................
   1013c:	80000000 ffffffff ffffffff 0000007f     ................
   1014c:	80000000 ffffffff ffffffff 0000007f     ................
   1015c:	80000000 ffffffff ffffffff 0000007f     ................
   1016c:	80000000 ffffffff ffffffff 0000007f     ................
   1017c:	80000000 ffffffff ffffffff 0000007f     ................
   1018c:	80000000 ffffffff ffffffff 0000007f     ................
   1019c:	80000000 ffffffff ffffffff 0000007f     ................
   101ac:	80000000 ffffffff ffffffff 0000007f     ................
   101bc:	80000000 ffffffff ffffffff 0000007f     ................
   101cc:	80000000 ffffffff ffffffff 0000007f     ................
   101dc:	80000000 ffffffff ffffffff 0000007f     ................
   101ec:	80000000 ffffffff ffffffff 0000007f     ................
   101fc:	80000000 ffffffff ffffffff 0000007f     ................
   1020c:	80000000 ffffffff ffffffff 0000007f     ................
   1021c:	00000000 80000000 0003ffff 00000000     ................
   1022c:	00000000 c0000000 0001ffff 00000000     ................
   1023c:	00000000 f0000000 0000ffff 00000000     ................
   1024c:	00000000 f8000000 00007fff 00000000     ................
   1025c:	00000000 fc000000 00003fff 00000000     .........?......
   1026c:	00000000 ff000000 00001fff 00000000     ................
   1027c:	00000000 ff800000 00000fff 00000000     ................
   1028c:	00000000 ffc00000 000003ff 00000000     ................
   1029c:	00000000 fff00000 000007ff 00000000     ................
   102ac:	00000000 fff80000 00001fff 00000000     ................
   102bc:	00000000 fffc0000 00003fff 00000000     .........?......
   102cc:	00000000 ffff0000 0000ffff 00000000     ................
   102dc:	00000000 ffff8000 0001ffff 00000000     ................
   102ec:	00000000 ffffc000 0007ffff 00000000     ................
   102fc:	00000000 ffffe000 001fffff 00000000     ................
   1030c:	00000000 fffff800 003fffff 00000000     ..........?.....
   1031c:	00000000 fffffc00 00ffffff 00000000     ................
   1032c:	00000000 fffffe00 01ffffff 00000000     ................
   1033c:	00000000 3fffff80 07ffffff 00000000     .......?........
   1034c:	00000000 1fffffc0 0ffffffc 00000000     ................
   1035c:	00000000 07ffffe0 3ffffff8 00000000     ...........?....
   1036c:	00000000 03fffff8 ffffffe0 00000000     ................
   1037c:	00000000 01fffffc ffffffc0 00000001     ................
   1038c:	00000000 00fffffe ffffff00 00000007     ................
   1039c:	00000000 003fffff fffffe00 0000000f     ......?.........
   103ac:	80000000 001fffff fffff800 0000003f     ............?...
   103bc:	80000000 000fffff fffff000 0000007f     ................
   103cc:	80000000 0007ffff ffffc000 0000007f     ................
   103dc:	80000000 0001ffff ffff0000 0000007f     ................
   103ec:	80000000 0000ffff fffe0000 0000007f     ................
   103fc:	80000000 00007fff fff80000 0000007f     ................
   1040c:	80000000 00003fff fff00000 0000007f     .....?..........
   1041c:	80000000 00000fff ffc00000 0000007f     ................
   1042c:	80000000 000007ff ff800000 0000007f     ................
   1043c:	80000000 000003ff fe000000 0000007f     ................
   1044c:	80000000 000001ff fc000000 0000007f     ................
   1045c:	80000000 0000007f f0000000 0000007f     ................
   1046c:	80000000 0000003f e0000000 0000007f     ....?...........
   1047c:	80000000 0000001f 80000000 0000007f     ................
   1048c:	80000000 0000000f 00000000 0000007f     ................
   1049c:	80000000 00000003 00000000 0000007c     ............|...
   104ac:	80000000 00000001 00000000 00000078     ............x...
   104bc:	80000000 00000000 00000000 00000060     ............`...
	...
   1052c:	80000000 ffffffff ffffffff 0000007f     ................
   1053c:	80000000 ffffffff ffffffff 0000007f     ................
   1054c:	80000000 ffffffff ffffffff 0000007f     ................
   1055c:	80000000 ffffffff ffffffff 0000007f     ................
   1056c:	80000000 ffffffff ffffffff 0000007f     ................
   1057c:	80000000 ffffffff ffffffff 0000007f     ................
   1058c:	80000000 ffffffff ffffffff 0000007f     ................
   1059c:	80000000 ffffffff ffffffff 0000007f     ................
   105ac:	80000000 ffffffff ffffffff 0000007f     ................
   105bc:	80000000 ffffffff ffffffff 0000007f     ................
   105cc:	80000000 ffffffff ffffffff 0000007f     ................
   105dc:	80000000 ffffffff ffffffff 0000007f     ................
   105ec:	80000000 ffffffff ffffffff 0000007f     ................
   105fc:	80000000 ffffffff ffffffff 0000007f     ................
   1060c:	80000000 ffffffff ffffffff 0000007f     ................
	...
   10624:	f0000000 0000007f 00000000 00000000     ................
   10634:	f0000000 0000007f 00000000 00000000     ................
   10644:	f0000000 0000007f 00000000 00000000     ................
   10654:	f0000000 0000007f 00000000 00000000     ................
   10664:	f0000000 0000007f 00000000 00000000     ................
   10674:	f0000000 0000007f 00000000 00000000     ................
   10684:	f0000000 0000007f 00000000 00000000     ................
   10694:	f0000000 0000007f 00000000 00000000     ................
   106a4:	f0000000 0000007f 00000000 00000000     ................
   106b4:	f0000000 0000007f 00000000 00000000     ................
   106c4:	f0000000 0000007f 00000000 00000000     ................
   106d4:	f0000000 0000007f 00000000 00000000     ................
   106e4:	f0000000 0000007f 00000000 00000000     ................
   106f4:	f0000000 0000007f 00000000 00000000     ................
   10704:	f0000000 0000007f 00000000 00000000     ................
   10714:	f0000000 0000007f 00000000 00000000     ................
   10724:	f0000000 0000007f 00000000 00000000     ................
   10734:	f0000000 0000007f 00000000 00000000     ................
   10744:	f0000000 0000007f 00000000 00000000     ................
   10754:	f0000000 0000007f 00000000 00000000     ................
   10764:	f0000000 0000007f 00000000 00000000     ................
   10774:	f0000000 0000007f 00000000 00000000     ................
   10784:	f0000000 0000007f 00000000 00000000     ................
   10794:	f0000000 0000007f 00000000 00000000     ................
   107a4:	f0000000 0000007f 00000000 00000000     ................
   107b4:	f0000000 0000007f 00000000 00000000     ................
   107c4:	f0000000 0000007f 00000000 00000000     ................
   107d4:	f0000000 0000007f 00000000 00000000     ................
   107e4:	f0000000 0000007f 00000000 00000000     ................
   107f4:	f0000000 0000007f 00000000 00000000     ................
   10804:	f0000000 0000007f 00000000 00000000     ................
   10814:	f0000000 0000007f 00000000 00000000     ................
	...
   1089c:	80000000 ffffffff ffffffff 0000007f     ................
   108ac:	80000000 ffffffff ffffffff 0000007f     ................
   108bc:	80000000 ffffffff ffffffff 0000007f     ................
   108cc:	80000000 ffffffff ffffffff 0000007f     ................
   108dc:	80000000 ffffffff ffffffff 0000007f     ................
   108ec:	80000000 ffffffff ffffffff 0000007f     ................
   108fc:	80000000 ffffffff ffffffff 0000007f     ................
   1090c:	80000000 ffffffff ffffffff 0000007f     ................
   1091c:	80000000 ffffffff ffffffff 0000007f     ................
   1092c:	80000000 ffffffff ffffffff 0000007f     ................
   1093c:	80000000 ffffffff ffffffff 0000007f     ................
   1094c:	80000000 ffffffff ffffffff 0000007f     ................
   1095c:	80000000 ffffffff ffffffff 0000007f     ................
   1096c:	80000000 ffffffff ffffffff 0000007f     ................
   1097c:	80000000 000fffff fffffff8 0000007f     ................
   1098c:	80000000 003fffff 00000000 00000000     ......?.........
   1099c:	80000000 01ffffff 00000000 00000000     ................
   109ac:	80000000 0fffffff 00000000 00000000     ................
   109bc:	80000000 7fffffff 00000000 00000000     ................
   109cc:	80000000 ffffffff 00000001 00000000     ................
   109dc:	00000000 fffffffe 0000000f 00000000     ................
   109ec:	00000000 fffffff0 0000007f 00000000     ................
   109fc:	00000000 ffffff80 000003ff 00000000     ................
   10a0c:	00000000 fffffc00 00000fff 00000000     ................
   10a1c:	00000000 fffff000 00007fff 00000000     ................
   10a2c:	00000000 ffff8000 0003ffff 00000000     ................
   10a3c:	00000000 fffc0000 001fffff 00000000     ................
   10a4c:	00000000 ffe00000 00ffffff 00000000     ................
   10a5c:	00000000 ff000000 03ffffff 00000000     ................
   10a6c:	00000000 f8000000 1fffffff 00000000     ................
   10a7c:	00000000 e0000000 ffffffff 00000000     ................
	...
   10a94:	ffffffff 00000007 00000000 00000000     ................
   10aa4:	fffffff8 0000001f 00000000 00000000     ................
   10ab4:	ffffffc0 0000007f 00000000 00000000     ................
   10ac4:	fffffe00 0000007f 00000000 00000000     ................
   10ad4:	fffff000 0000007f 00000000 00000000     ................
   10ae4:	ffffc000 0000007f 00000000 00000000     ................
   10af4:	fffe0000 0000007f 00000000 00000000     ................
   10b04:	fffc0000 0000007f 00000000 00000000     ................
   10b14:	ffff8000 0000007f 00000000 00000000     ................
   10b24:	ffffe000 0000007f 00000000 00000000     ................
   10b34:	fffffc00 0000007f 00000000 00000000     ................
   10b44:	ffffff80 0000007f 00000000 00000000     ................
   10b54:	fffffff0 0000003f 00000000 00000000     ....?...........
   10b64:	fffffffe 00000007 00000000 c0000000     ................
   10b74:	ffffffff 00000001 00000000 f0000000     ................
   10b84:	3fffffff 00000000 00000000 fe000000     ...?............
   10b94:	07ffffff 00000000 00000000 ffc00000     ................
   10ba4:	00ffffff 00000000 00000000 fff80000     ................
   10bb4:	003fffff 00000000 00000000 ffff0000     ..?.............
   10bc4:	0007ffff 00000000 00000000 ffffe000     ................
   10bd4:	0000ffff 00000000 00000000 fffffc00     ................
   10be4:	00001fff 00000000 00000000 ffffff00     ................
   10bf4:	000007ff 00000000 00000000 ffffffe0     ................
   10c04:	000000ff 00000000 00000000 fffffffc     ................
   10c14:	0000001f 00000000 80000000 ffffffff     ................
   10c24:	00000003 00000000 80000000 7fffffff     ................
	...
   10c3c:	80000000 1fffffff 00000000 00000000     ................
   10c4c:	80000000 03ffffff 00000000 00000000     ................
   10c5c:	80000000 007fffff 00000000 00000000     ................
   10c6c:	80000000 000fffff fffff800 0000007f     ................
   10c7c:	80000000 fff3ffff ffffffff 0000007f     ................
   10c8c:	80000000 ffffffff ffffffff 0000007f     ................
   10c9c:	80000000 ffffffff ffffffff 0000007f     ................
   10cac:	80000000 ffffffff ffffffff 0000007f     ................
   10cbc:	80000000 ffffffff ffffffff 0000007f     ................
   10ccc:	80000000 ffffffff ffffffff 0000007f     ................
   10cdc:	80000000 ffffffff ffffffff 0000007f     ................
   10cec:	80000000 ffffffff ffffffff 0000007f     ................
   10cfc:	80000000 ffffffff ffffffff 0000007f     ................
   10d0c:	80000000 ffffffff ffffffff 0000007f     ................
   10d1c:	80000000 ffffffff ffffffff 0000007f     ................
   10d2c:	80000000 ffffffff ffffffff 0000007f     ................
   10d3c:	80000000 ffffffff ffffffff 0000007f     ................
   10d4c:	80000000 ffffffff ffffffff 0000007f     ................
	...
   10e1c:	80000000 ffffffff ffffffff 0000007f     ................
   10e2c:	80000000 ffffffff ffffffff 0000007f     ................
   10e3c:	80000000 ffffffff ffffffff 0000007f     ................
   10e4c:	80000000 ffffffff ffffffff 0000007f     ................
   10e5c:	80000000 ffffffff ffffffff 0000007f     ................
   10e6c:	80000000 ffffffff ffffffff 0000007f     ................
   10e7c:	80000000 ffffffff ffffffff 0000007f     ................
   10e8c:	80000000 ffffffff ffffffff 0000007f     ................
   10e9c:	80000000 ffffffff ffffffff 0000007f     ................
   10eac:	80000000 ffffffff ffffffff 0000007f     ................
   10ebc:	80000000 ffffffff ffffffff 0000007f     ................
   10ecc:	80000000 ffffffff ffffffff 0000007f     ................
   10edc:	80000000 ffffffff ffffffff 0000007f     ................
   10eec:	80000000 ffffffff ffffffff 0000007f     ................
   10efc:	80000000 ffffffff ffffffff 0000007f     ................
   10f0c:	00000000 00ffffff 00000000 00000000     ................
   10f1c:	00000000 03fffffe 00000000 00000000     ................
   10f2c:	00000000 0ffffff8 00000000 00000000     ................
   10f3c:	00000000 1fffffe0 00000000 00000000     ................
   10f4c:	00000000 7fffffc0 00000000 00000000     ................
   10f5c:	00000000 ffffff00 00000001 00000000     ................
   10f6c:	00000000 fffffc00 00000003 00000000     ................
   10f7c:	00000000 fffff800 0000000f 00000000     ................
   10f8c:	00000000 ffffe000 0000003f 00000000     ........?.......
   10f9c:	00000000 ffff8000 0000007f 00000000     ................
   10fac:	00000000 ffff0000 000001ff 00000000     ................
   10fbc:	00000000 fffc0000 000007ff 00000000     ................
   10fcc:	00000000 fff00000 00000fff 00000000     ................
   10fdc:	00000000 ffe00000 00003fff 00000000     .........?......
   10fec:	00000000 ff800000 0000ffff 00000000     ................
   10ffc:	00000000 fe000000 0001ffff 00000000     ................
   1100c:	00000000 fc000000 0007ffff 00000000     ................
   1101c:	00000000 f0000000 000fffff 00000000     ................
   1102c:	00000000 e0000000 003fffff 00000000     ..........?.....
   1103c:	00000000 80000000 00ffffff 00000000     ................
	...
   11054:	01fffffe 00000000 00000000 00000000     ................
   11064:	07fffffc 00000000 00000000 00000000     ................
   11074:	1ffffff0 00000000 00000000 00000000     ................
   11084:	3fffffc0 00000000 00000000 00000000     ...?............
   11094:	ffffff80 00000000 00000000 00000000     ................
   110a4:	fffffe00 00000003 00000000 00000000     ................
   110b4:	fffff800 00000007 00000000 00000000     ................
   110c4:	fffff000 0000001f 00000000 00000000     ................
   110d4:	ffffc000 0000007f 80000000 ffffffff     ................
   110e4:	ffffffff 0000007f 80000000 ffffffff     ................
   110f4:	ffffffff 0000007f 80000000 ffffffff     ................
   11104:	ffffffff 0000007f 80000000 ffffffff     ................
   11114:	ffffffff 0000007f 80000000 ffffffff     ................
   11124:	ffffffff 0000007f 80000000 ffffffff     ................
   11134:	ffffffff 0000007f 80000000 ffffffff     ................
   11144:	ffffffff 0000007f 80000000 ffffffff     ................
   11154:	ffffffff 0000007f 80000000 ffffffff     ................
   11164:	ffffffff 0000007f 80000000 ffffffff     ................
   11174:	ffffffff 0000007f 80000000 ffffffff     ................
   11184:	ffffffff 0000007f 80000000 ffffffff     ................
   11194:	ffffffff 0000007f 80000000 ffffffff     ................
   111a4:	ffffffff 0000007f 80000000 ffffffff     ................
   111b4:	ffffffff 0000007f 80000000 ffffffff     ................
   111c4:	ffffffff 0000007f 00000000 00000000     ................
	...
   11270:	e0000000 000000ff 00000000 00000000     ................
   11280:	ff800000 00007fff 00000000 00000000     ................
   11290:	fff80000 0007ffff 00000000 00000000     ................
   112a0:	ffff0000 003fffff 00000000 00000000     ......?.........
   112b0:	ffffc000 00ffffff 00000000 00000000     ................
   112c0:	fffff000 03ffffff 00000000 00000000     ................
   112d0:	fffff800 07ffffff 00000000 00000000     ................
   112e0:	fffffe00 1fffffff 00000000 00000000     ................
   112f0:	ffffff00 3fffffff 00000000 00000000     .......?........
   11300:	ffffff80 7fffffff 00000000 00000000     ................
   11310:	ffffffc0 ffffffff 00000000 00000000     ................
   11320:	ffffffe0 ffffffff 00000001 00000000     ................
   11330:	fffffff0 ffffffff 00000003 00000000     ................
   11340:	fffffff8 ffffffff 00000007 00000000     ................
   11350:	fffffff8 ffffffff 00000007 00000000     ................
   11360:	1ffffffc ffffff00 0000000f 00000000     ................
   11370:	007ffffe ffff8000 0000000f 00000000     ................
   11380:	000ffffe fffc0000 0000001f 00000000     ................
   11390:	0001ffff fff00000 0000001f 00000000     ................
   113a0:	0000ffff ffc00000 0000003f 00000000     ........?.......
   113b0:	00007fff ff800000 0000003f 80000000     ........?.......
   113c0:	00001fff ff000000 0000007f 80000000     ................
   113d0:	00001fff fe000000 0000007f 80000000     ................
   113e0:	00000fff fc000000 0000007f 80000000     ................
   113f0:	000007ff f8000000 0000007f c0000000     ................
   11400:	000007ff f8000000 000000ff c0000000     ................
   11410:	000007ff f8000000 000000ff c0000000     ................
   11420:	000003ff f0000000 000000ff c0000000     ................
   11430:	000003ff f0000000 000000ff c0000000     ................
   11440:	000003ff f0000000 000000ff c0000000     ................
   11450:	000003ff f0000000 000000ff c0000000     ................
   11460:	000003ff f0000000 000000ff c0000000     ................
   11470:	000003ff f0000000 000000ff c0000000     ................
   11480:	000003ff f0000000 000000ff c0000000     ................
   11490:	000003ff f0000000 000000ff c0000000     ................
   114a0:	000007ff f8000000 000000ff c0000000     ................
   114b0:	000007ff f8000000 000000ff 80000000     ................
   114c0:	000007ff f8000000 0000007f 80000000     ................
   114d0:	00000fff fc000000 0000007f 80000000     ................
   114e0:	00001fff fe000000 0000007f 80000000     ................
   114f0:	00003fff ff000000 0000007f 00000000     .?..............
   11500:	00007fff ff800000 0000003f 00000000     ........?.......
   11510:	0000ffff ffc00000 0000003f 00000000     ........?.......
   11520:	0003fffe fff00000 0000003f 00000000     ........?.......
   11530:	000ffffe fffc0000 0000001f 00000000     ................
   11540:	007ffffc ffff8000 0000001f 00000000     ................
   11550:	7ffffffc ffffff80 0000000f 00000000     ................
   11560:	fffffff8 ffffffff 00000007 00000000     ................
   11570:	fffffff8 ffffffff 00000007 00000000     ................
   11580:	fffffff0 ffffffff 00000003 00000000     ................
   11590:	ffffffe0 ffffffff 00000001 00000000     ................
   115a0:	ffffffc0 ffffffff 00000000 00000000     ................
   115b0:	ffffff80 7fffffff 00000000 00000000     ................
   115c0:	ffffff00 3fffffff 00000000 00000000     .......?........
   115d0:	fffffe00 1fffffff 00000000 00000000     ................
   115e0:	fffff800 07ffffff 00000000 00000000     ................
   115f0:	fffff000 03ffffff 00000000 00000000     ................
   11600:	ffffc000 00ffffff 00000000 00000000     ................
   11610:	fffe0000 003fffff 00000000 00000000     ......?.........
   11620:	fff80000 0007ffff 00000000 00000000     ................
   11630:	ff800000 00007fff 00000000 00000000     ................
   11640:	00000000 0000007e 00000000 00000000     ....~...........
	...
   116ec:	80000000 ffffffff ffffffff 0000007f     ................
   116fc:	80000000 ffffffff ffffffff 0000007f     ................
   1170c:	80000000 ffffffff ffffffff 0000007f     ................
   1171c:	80000000 ffffffff ffffffff 0000007f     ................
   1172c:	80000000 ffffffff ffffffff 0000007f     ................
   1173c:	80000000 ffffffff ffffffff 0000007f     ................
   1174c:	80000000 ffffffff ffffffff 0000007f     ................
   1175c:	80000000 ffffffff ffffffff 0000007f     ................
   1176c:	80000000 ffffffff ffffffff 0000007f     ................
   1177c:	80000000 ffffffff ffffffff 0000007f     ................
   1178c:	80000000 ffffffff ffffffff 0000007f     ................
   1179c:	80000000 ffffffff ffffffff 0000007f     ................
   117ac:	80000000 ffffffff ffffffff 0000007f     ................
   117bc:	80000000 ffffffff ffffffff 0000007f     ................
   117cc:	80000000 ffffffff ffffffff 0000007f     ................
   117dc:	80000000 000003ff 00001ffc 00000000     ................
   117ec:	80000000 000003ff 00001ffc 00000000     ................
   117fc:	80000000 000003ff 00001ffc 00000000     ................
   1180c:	80000000 000003ff 00001ffc 00000000     ................
   1181c:	80000000 000003ff 00001ffc 00000000     ................
   1182c:	80000000 000003ff 00001ffc 00000000     ................
   1183c:	80000000 000003ff 00001ffc 00000000     ................
   1184c:	80000000 000003ff 00001ffc 00000000     ................
   1185c:	80000000 000003ff 00001ffc 00000000     ................
   1186c:	80000000 000003ff 00001ffc 00000000     ................
   1187c:	80000000 000003ff 00001ffc 00000000     ................
   1188c:	80000000 000003ff 00001ffc 00000000     ................
   1189c:	80000000 000003ff 00001ffc 00000000     ................
   118ac:	80000000 000003ff 00001ffc 00000000     ................
   118bc:	80000000 000003ff 00001ffc 00000000     ................
   118cc:	80000000 000003ff 00001ffc 00000000     ................
   118dc:	80000000 000003ff 00001ffc 00000000     ................
   118ec:	80000000 000007ff 00001ffc 00000000     ................
   118fc:	80000000 000007ff 00001ffe 00000000     ................
   1190c:	80000000 000007ff 00001ffe 00000000     ................
   1191c:	00000000 00000fff 00000fff 00000000     ................
   1192c:	00000000 00001fff 00000fff 00000000     ................
   1193c:	00000000 80003fff 00000fff 00000000     .....?..........
   1194c:	00000000 c0007fff 00000fff 00000000     ................
   1195c:	00000000 f001fffe 000007ff 00000000     ................
   1196c:	00000000 fffffffe 000007ff 00000000     ................
   1197c:	00000000 fffffffe 000007ff 00000000     ................
   1198c:	00000000 fffffffc 000003ff 00000000     ................
   1199c:	00000000 fffffffc 000003ff 00000000     ................
   119ac:	00000000 fffffff8 000001ff 00000000     ................
   119bc:	00000000 fffffff0 000001ff 00000000     ................
   119cc:	00000000 fffffff0 000000ff 00000000     ................
   119dc:	00000000 ffffffe0 0000007f 00000000     ................
   119ec:	00000000 ffffffc0 0000007f 00000000     ................
   119fc:	00000000 ffffff80 0000003f 00000000     ........?.......
   11a0c:	00000000 ffffff00 0000001f 00000000     ................
   11a1c:	00000000 fffffe00 00000007 00000000     ................
   11a2c:	00000000 fffff800 00000003 00000000     ................
   11a3c:	00000000 ffffe000 00000000 00000000     ................
   11a4c:	00000000 1fff0000 00000000 00000000     ................
	...
   11ae0:	e0000000 000003ff 00000000 00000000     ................
   11af0:	ffc00000 0000ffff 00000000 00000000     ................
   11b00:	fff80000 0007ffff 00000000 00000000     ................
   11b10:	ffff0000 003fffff 00000000 00000000     ......?.........
   11b20:	ffffc000 00ffffff 00000000 00000000     ................
   11b30:	fffff000 03ffffff 00000000 00000000     ................
   11b40:	fffffc00 07ffffff 00000000 00000000     ................
   11b50:	fffffe00 1fffffff 00000000 00000000     ................
   11b60:	ffffff00 3fffffff 00000000 00000000     .......?........
   11b70:	ffffff80 7fffffff 00000000 00000000     ................
   11b80:	ffffffc0 ffffffff 00000000 00000000     ................
   11b90:	ffffffe0 ffffffff 00000001 00000000     ................
   11ba0:	fffffff0 ffffffff 00000003 00000000     ................
   11bb0:	fffffff8 ffffffff 00000007 00000000     ................
   11bc0:	fffffff8 ffffffff 00000007 00000000     ................
   11bd0:	0ffffffc fffffe00 0000000f 00000000     ................
   11be0:	003ffffe ffff8000 0000001f 00000000     ..?.............
   11bf0:	0007fffe fffc0000 0000001f 00000000     ................
   11c00:	0001ffff fff00000 0000003f 00000000     ........?.......
   11c10:	0000ffff ffc00000 0000003f 00000000     ........?.......
   11c20:	00003fff ff800000 0000003f 80000000     .?......?.......
   11c30:	00001fff ff000000 0000007f 80000000     ................
   11c40:	00001fff fe000000 0000007f 80000000     ................
   11c50:	00000fff fc000000 0000007f 80000000     ................
   11c60:	000007ff f8000000 0000007f c0000000     ................
   11c70:	000007ff f8000000 000000ff c0000000     ................
   11c80:	000007ff f8000000 000000ff c0000000     ................
   11c90:	000003ff f0000000 000000ff c0000000     ................
   11ca0:	000003ff f0000000 000000ff c0000000     ................
   11cb0:	000003ff f0000000 000000ff c0000000     ................
   11cc0:	000003ff f0000000 000000ff c0000000     ................
   11cd0:	000003ff f0000000 000000ff c0000000     ................
   11ce0:	000003ff f0000000 000000ff c0000000     ................
   11cf0:	000003ff f0000000 000000ff c0000000     ................
   11d00:	000003ff f0000000 000000ff c0000000     ................
   11d10:	000007ff f8000000 000000ff c0000000     ................
   11d20:	000007ff f8000000 000000ff 80000000     ................
   11d30:	000007ff f8000000 000000ff 80000000     ................
   11d40:	00000fff fc000000 000001ff 80000000     ................
   11d50:	00001fff fe000000 000003ff 80000000     ................
   11d60:	00003fff ff000000 000007ff 00000000     .?..............
   11d70:	00007fff ff800000 00000fff 00000000     ................
   11d80:	0000ffff ffc00000 00000fff 00000000     ................
   11d90:	0003fffe fff00000 00001fff 00000000     ................
   11da0:	000ffffe fffc0000 00003fff 00000000     .........?......
   11db0:	00fffffc ffffc000 00007fff 00000000     ................
   11dc0:	fffffffc ffffffff 0000ffff 00000000     ................
   11dd0:	fffffff8 ffffffff 0000ffff 00000000     ................
   11de0:	fffffff8 ffffffff 0001ffff 00000000     ................
   11df0:	fffffff0 ffffffff 0003ffff 00000000     ................
   11e00:	ffffffe0 ffffffff 0007fff9 00000000     ................
   11e10:	ffffffc0 ffffffff 000ffff0 00000000     ................
   11e20:	ffffff80 7fffffff 0007ffe0 00000000     ................
   11e30:	ffffff00 3fffffff 0003ffc0 00000000     .......?........
   11e40:	fffffe00 1fffffff 0001ffc0 00000000     ................
   11e50:	fffff800 07ffffff 0000ff80 00000000     ................
   11e60:	ffffe000 03ffffff 0000ff00 00000000     ................
   11e70:	ffffc000 00ffffff 00007e00 00000000     .........~......
   11e80:	fffe0000 001fffff 00003e00 00000000     .........>......
   11e90:	fff00000 0007ffff 00001c00 00000000     ................
   11ea0:	ff000000 00007fff 00000800 00000000     ................
	...
   11f5c:	80000000 ffffffff ffffffff 0000007f     ................
   11f6c:	80000000 ffffffff ffffffff 0000007f     ................
   11f7c:	80000000 ffffffff ffffffff 0000007f     ................
   11f8c:	80000000 ffffffff ffffffff 0000007f     ................
   11f9c:	80000000 ffffffff ffffffff 0000007f     ................
   11fac:	80000000 ffffffff ffffffff 0000007f     ................
   11fbc:	80000000 ffffffff ffffffff 0000007f     ................
   11fcc:	80000000 ffffffff ffffffff 0000007f     ................
   11fdc:	80000000 ffffffff ffffffff 0000007f     ................
   11fec:	80000000 ffffffff ffffffff 0000007f     ................
   11ffc:	80000000 ffffffff ffffffff 0000007f     ................
   1200c:	80000000 ffffffff ffffffff 0000007f     ................
   1201c:	80000000 ffffffff ffffffff 0000007f     ................
   1202c:	80000000 ffffffff ffffffff 0000007f     ................
   1203c:	80000000 ffffffff ffffffff 0000007f     ................
   1204c:	80000000 000003ff 00000ffe 00000000     ................
   1205c:	80000000 000003ff 00000ffe 00000000     ................
   1206c:	80000000 000003ff 00000ffe 00000000     ................
   1207c:	80000000 000003ff 00000ffe 00000000     ................
   1208c:	80000000 000003ff 00000ffe 00000000     ................
   1209c:	80000000 000003ff 00000ffe 00000000     ................
   120ac:	80000000 000003ff 00000ffe 00000000     ................
   120bc:	80000000 000003ff 00000ffe 00000000     ................
   120cc:	80000000 000003ff 00000ffe 00000000     ................
   120dc:	80000000 000003ff 00000ffe 00000000     ................
   120ec:	80000000 000003ff 00000ffe 00000000     ................
   120fc:	80000000 000003ff 00000ffe 00000000     ................
   1210c:	80000000 000003ff 00001ffe 00000000     ................
   1211c:	80000000 000003ff 00007ffe 00000000     ................
   1212c:	80000000 000003ff 0001fffe 00000000     ................
   1213c:	80000000 000003ff 0007fffe 00000000     ................
   1214c:	80000000 000007ff 003fffff 00000000     ..........?.....
   1215c:	80000000 000007ff 00ffffff 00000000     ................
   1216c:	80000000 000007ff 03ffffff 00000000     ................
   1217c:	00000000 80000fff 0fffffff 00000000     ................
   1218c:	00000000 c0001fff 3fffffff 00000000     ...........?....
   1219c:	00000000 e0003fff ffffffff 00000000     .....?..........
   121ac:	00000000 f800ffff ffffffff 00000003     ................
   121bc:	00000000 ff8ffffe ffffffff 0000000f     ................
   121cc:	00000000 fffffffe ffffffff 0000003f     ............?...
   121dc:	00000000 fffffffe ffffffff 0000007f     ................
   121ec:	00000000 fffffffc fffffcff 0000007f     ................
   121fc:	00000000 fffffffc fffff07f 0000007f     ................
   1220c:	00000000 fffffff8 ffffc07f 0000007f     ................
   1221c:	00000000 fffffff8 ffff003f 0000007f     ........?.......
   1222c:	00000000 fffffff0 fffc001f 0000007f     ................
   1223c:	00000000 ffffffe0 fff0001f 0000007f     ................
   1224c:	00000000 ffffffe0 ffc0000f 0000007f     ................
   1225c:	00000000 ffffff80 ff000007 0000007f     ................
   1226c:	00000000 ffffff00 fc000003 0000007f     ................
   1227c:	00000000 fffffe00 f8000000 0000007f     ................
   1228c:	00000000 3ffff800 e0000000 0000007f     .......?........
   1229c:	00000000 07ffc000 80000000 0000007f     ................
	...
   122b8:	0000007e 00000000 00000000 00000000     ~...............
   122c8:	00000078 00000000 00000000 00000000     x...............
   122d8:	00000060 00000000 00000000 00000000     `...............
	...
   12334:	00070000 00000000 00000000 00000000     ................
   12344:	00ff0000 00000000 00000000 00000000     ................
   12354:	03ff0000 00000000 00000000 00fff000     ................
   12364:	0fff0000 00000000 00000000 03fffc00     ................
   12374:	1fff0000 00000000 00000000 0fffff00     ................
   12384:	7fff0000 00000000 00000000 1fffff80     ................
   12394:	ffff0000 00000000 00000000 7fffffc0     ................
   123a4:	ffff0000 00000001 00000000 ffffffe0     ................
   123b4:	ffff0000 00000003 00000000 fffffff0     ................
   123c4:	ffff0000 00000003 00000000 fffffff8     ................
   123d4:	ffff0001 00000007 00000000 fffffff8     ................
   123e4:	ffff0003 0000000f 00000000 fffffffc     ................
   123f4:	ffff0007 0000000f 00000000 fffffffe     ................
   12404:	ffff0007 0000001f 00000000 fffffffe     ................
   12414:	ffff000f 0000001f 00000000 ffffffff     ................
   12424:	fff0000f 0000001f 00000000 ffffffff     ................
   12434:	ff80001f 0000003f 00000000 fff1ffff     ....?...........
   12444:	ff00001f 0000003f 80000000 ffc03fff     ....?........?..
   12454:	fc00003f 0000003f 80000000 ff000fff     ?...?...........
   12464:	fc00003f 0000007f 80000000 ff0007ff     ?...............
   12474:	f800007f 0000007f 80000000 fe0007ff     ................
   12484:	f000007f 0000007f 80000000 fc0003ff     ................
   12494:	f000007f 0000007f c0000000 fc0003ff     ................
   124a4:	f00000ff 000000ff c0000000 f80001ff     ................
   124b4:	e00000ff 000000ff c0000000 f80001ff     ................
   124c4:	e00000ff 000000ff c0000000 f00001ff     ................
   124d4:	e00001ff 000000ff c0000000 f00001ff     ................
   124e4:	e00001ff 000000ff c0000000 e00001ff     ................
   124f4:	e00003ff 000000ff c0000000 e00001ff     ................
   12504:	e00003ff 000000ff c0000000 e00001ff     ................
   12514:	e00003ff 000000ff c0000000 c00001ff     ................
   12524:	e00007ff 000000ff c0000000 c00001ff     ................
   12534:	e00007ff 000000ff c0000000 c00003ff     ................
   12544:	e00007ff 000000ff c0000000 c00003ff     ................
   12554:	f0000fff 000000ff 80000000 800003ff     ................
   12564:	f0001fff 000000ff 80000000 800007ff     ................
   12574:	f8001fff 0000007f 80000000 00000fff     ................
   12584:	f8003fff 0000007f 80000000 00001fff     .?..............
   12594:	fc007fff 0000007f 00000000 00007fff     ................
   125a4:	fe00ffff 0000007f 00000000 0003ffff     ................
   125b4:	ffc7fffe 0000007f 00000000 000fffff     ................
   125c4:	fffffffe 0000003f 00000000 000ffffe     ....?...........
   125d4:	fffffffc 0000003f 00000000 000ffffe     ....?...........
   125e4:	fffffffc 0000003f 00000000 000ffffc     ....?...........
   125f4:	fffffff8 0000001f 00000000 000ffffc     ................
   12604:	fffffff8 0000001f 00000000 000ffff8     ................
   12614:	fffffff0 0000000f 00000000 000ffff0     ................
   12624:	ffffffe0 00000007 00000000 000fffe0     ................
   12634:	ffffffc0 00000007 00000000 000fffe0     ................
   12644:	ffffff80 00000003 00000000 000fff80     ................
   12654:	ffffff00 00000001 00000000 000fff00     ................
   12664:	fffffe00 00000000 00000000 000ffe00     ................
   12674:	7ffffc00 00000000 00000000 000ff800     ................
   12684:	1ffff000 00000000 00000000 000fc000     ................
   12694:	07ffc000 00000000 00000000 00000000     ................
	...
   126fc:	80000000 000003ff 00000000 00000000     ................
   1270c:	80000000 000003ff 00000000 00000000     ................
   1271c:	80000000 000003ff 00000000 00000000     ................
   1272c:	80000000 000003ff 00000000 00000000     ................
   1273c:	80000000 000003ff 00000000 00000000     ................
   1274c:	80000000 000003ff 00000000 00000000     ................
   1275c:	80000000 000003ff 00000000 00000000     ................
   1276c:	80000000 000003ff 00000000 00000000     ................
   1277c:	80000000 000003ff 00000000 00000000     ................
   1278c:	80000000 000003ff 00000000 00000000     ................
   1279c:	80000000 000003ff 00000000 00000000     ................
   127ac:	80000000 000003ff 00000000 00000000     ................
   127bc:	80000000 000003ff 00000000 00000000     ................
   127cc:	80000000 000003ff 00000000 00000000     ................
   127dc:	80000000 000003ff 00000000 00000000     ................
   127ec:	80000000 000003ff 00000000 00000000     ................
   127fc:	80000000 000003ff 00000000 00000000     ................
   1280c:	80000000 000003ff 00000000 00000000     ................
   1281c:	80000000 000003ff 00000000 00000000     ................
   1282c:	80000000 000003ff 00000000 00000000     ................
   1283c:	80000000 000003ff 00000000 00000000     ................
   1284c:	80000000 000003ff 00000000 00000000     ................
   1285c:	80000000 ffffffff ffffffff 0000007f     ................
   1286c:	80000000 ffffffff ffffffff 0000007f     ................
   1287c:	80000000 ffffffff ffffffff 0000007f     ................
   1288c:	80000000 ffffffff ffffffff 0000007f     ................
   1289c:	80000000 ffffffff ffffffff 0000007f     ................
   128ac:	80000000 ffffffff ffffffff 0000007f     ................
   128bc:	80000000 ffffffff ffffffff 0000007f     ................
   128cc:	80000000 ffffffff ffffffff 0000007f     ................
   128dc:	80000000 ffffffff ffffffff 0000007f     ................
   128ec:	80000000 ffffffff ffffffff 0000007f     ................
   128fc:	80000000 ffffffff ffffffff 0000007f     ................
   1290c:	80000000 ffffffff ffffffff 0000007f     ................
   1291c:	80000000 ffffffff ffffffff 0000007f     ................
   1292c:	80000000 ffffffff ffffffff 0000007f     ................
   1293c:	80000000 000003ff 00000000 00000000     ................
   1294c:	80000000 000003ff 00000000 00000000     ................
   1295c:	80000000 000003ff 00000000 00000000     ................
   1296c:	80000000 000003ff 00000000 00000000     ................
   1297c:	80000000 000003ff 00000000 00000000     ................
   1298c:	80000000 000003ff 00000000 00000000     ................
   1299c:	80000000 000003ff 00000000 00000000     ................
   129ac:	80000000 000003ff 00000000 00000000     ................
   129bc:	80000000 000003ff 00000000 00000000     ................
   129cc:	80000000 000003ff 00000000 00000000     ................
   129dc:	80000000 000003ff 00000000 00000000     ................
   129ec:	80000000 000003ff 00000000 00000000     ................
   129fc:	80000000 000003ff 00000000 00000000     ................
   12a0c:	80000000 000003ff 00000000 00000000     ................
   12a1c:	80000000 000003ff 00000000 00000000     ................
   12a2c:	80000000 000003ff 00000000 00000000     ................
   12a3c:	80000000 000003ff 00000000 00000000     ................
   12a4c:	80000000 000003ff 00000000 00000000     ................
   12a5c:	80000000 000003ff 00000000 00000000     ................
   12a6c:	80000000 000003ff 00000000 00000000     ................
   12a7c:	80000000 000003ff 00000000 00000000     ................
   12a8c:	80000000 000003ff 00000000 00000000     ................
	...
   12b0c:	80000000 ffffffff 0000ffff 00000000     ................
   12b1c:	80000000 ffffffff 007fffff 00000000     ................
   12b2c:	80000000 ffffffff 03ffffff 00000000     ................
   12b3c:	80000000 ffffffff 0fffffff 00000000     ................
   12b4c:	80000000 ffffffff 1fffffff 00000000     ................
   12b5c:	80000000 ffffffff 7fffffff 00000000     ................
   12b6c:	80000000 ffffffff ffffffff 00000000     ................
   12b7c:	80000000 ffffffff ffffffff 00000001     ................
   12b8c:	80000000 ffffffff ffffffff 00000003     ................
   12b9c:	80000000 ffffffff ffffffff 00000007     ................
   12bac:	80000000 ffffffff ffffffff 00000007     ................
   12bbc:	80000000 ffffffff ffffffff 0000000f     ................
   12bcc:	80000000 ffffffff ffffffff 0000000f     ................
   12bdc:	80000000 ffffffff ffffffff 0000001f     ................
   12bec:	80000000 ffffffff ffffffff 0000001f     ................
	...
   12c04:	fff80000 0000003f 00000000 00000000     ....?...........
   12c14:	ffc00000 0000003f 00000000 00000000     ....?...........
   12c24:	ff000000 0000007f 00000000 00000000     ................
   12c34:	fc000000 0000007f 00000000 00000000     ................
   12c44:	fc000000 0000007f 00000000 00000000     ................
   12c54:	f8000000 0000007f 00000000 00000000     ................
   12c64:	f0000000 0000007f 00000000 00000000     ................
   12c74:	f0000000 000000ff 00000000 00000000     ................
   12c84:	f0000000 000000ff 00000000 00000000     ................
   12c94:	e0000000 000000ff 00000000 00000000     ................
   12ca4:	e0000000 000000ff 00000000 00000000     ................
   12cb4:	e0000000 000000ff 00000000 00000000     ................
   12cc4:	e0000000 000000ff 00000000 00000000     ................
   12cd4:	e0000000 000000ff 00000000 00000000     ................
   12ce4:	e0000000 000000ff 00000000 00000000     ................
   12cf4:	e0000000 000000ff 00000000 00000000     ................
   12d04:	e0000000 000000ff 00000000 00000000     ................
   12d14:	f0000000 000000ff 00000000 00000000     ................
   12d24:	f0000000 000000ff 00000000 00000000     ................
   12d34:	f0000000 000000ff 00000000 00000000     ................
   12d44:	f8000000 0000007f 00000000 00000000     ................
   12d54:	f8000000 0000007f 00000000 00000000     ................
   12d64:	fc000000 0000007f 00000000 00000000     ................
   12d74:	ff000000 0000007f 00000000 00000000     ................
   12d84:	ffc00000 0000003f 00000000 00000000     ....?...........
   12d94:	fffc0000 0000003f 80000000 ffffffff     ....?...........
   12da4:	ffffffff 0000001f 80000000 ffffffff     ................
   12db4:	ffffffff 0000001f 80000000 ffffffff     ................
   12dc4:	ffffffff 0000000f 80000000 ffffffff     ................
   12dd4:	ffffffff 0000000f 80000000 ffffffff     ................
   12de4:	ffffffff 00000007 80000000 ffffffff     ................
   12df4:	ffffffff 00000007 80000000 ffffffff     ................
   12e04:	ffffffff 00000003 80000000 ffffffff     ................
   12e14:	ffffffff 00000001 80000000 ffffffff     ................
   12e24:	ffffffff 00000000 80000000 ffffffff     ................
   12e34:	7fffffff 00000000 80000000 ffffffff     ................
   12e44:	1fffffff 00000000 80000000 ffffffff     ................
   12e54:	0fffffff 00000000 80000000 ffffffff     ................
   12e64:	01ffffff 00000000 80000000 ffffffff     ................
   12e74:	007fffff 00000000 80000000 ffffffff     ................
   12e84:	0000ffff 00000000 00000000 00000000     ................
	...
   12edc:	80000000 00000000 00000000 00000000     ................
   12eec:	80000000 00000003 00000000 00000000     ................
   12efc:	80000000 0000001f 00000000 00000000     ................
   12f0c:	80000000 000000ff 00000000 00000000     ................
   12f1c:	80000000 000007ff 00000000 00000000     ................
   12f2c:	80000000 00003fff 00000000 00000000     .....?..........
   12f3c:	80000000 0001ffff 00000000 00000000     ................
   12f4c:	80000000 000fffff 00000000 00000000     ................
   12f5c:	80000000 007fffff 00000000 00000000     ................
   12f6c:	80000000 03ffffff 00000000 00000000     ................
   12f7c:	80000000 0fffffff 00000000 00000000     ................
   12f8c:	80000000 7fffffff 00000000 00000000     ................
   12f9c:	80000000 ffffffff 00000003 00000000     ................
   12fac:	80000000 ffffffff 0000001f 00000000     ................
   12fbc:	80000000 ffffffff 000000ff 00000000     ................
   12fcc:	80000000 ffffffff 000007ff 00000000     ................
   12fdc:	80000000 ffffffff 00003fff 00000000     .........?......
   12fec:	00000000 fffffffc 0001ffff 00000000     ................
   12ffc:	00000000 ffffffe0 000fffff 00000000     ................
   1300c:	00000000 ffffff00 003fffff 00000000     ..........?.....
   1301c:	00000000 fffff000 01ffffff 00000000     ................
   1302c:	00000000 ffff8000 0fffffff 00000000     ................
   1303c:	00000000 fffc0000 7fffffff 00000000     ................
   1304c:	00000000 ffc00000 ffffffff 00000003     ................
   1305c:	00000000 fe000000 ffffffff 0000001f     ................
   1306c:	00000000 f0000000 ffffffff 0000007f     ................
	...
   13084:	ffffffff 0000007f 00000000 00000000     ................
   13094:	fffffff8 0000007f 00000000 00000000     ................
   130a4:	ffffffc0 0000007f 00000000 00000000     ................
   130b4:	fffffc00 0000007f 00000000 00000000     ................
   130c4:	ffffe000 0000007f 00000000 00000000     ................
   130d4:	ffff0000 0000007f 00000000 00000000     ................
   130e4:	fff00000 0000007f 00000000 00000000     ................
   130f4:	fff80000 0000007f 00000000 00000000     ................
   13104:	ffff0000 0000007f 00000000 00000000     ................
   13114:	ffffe000 0000007f 00000000 00000000     ................
   13124:	fffffe00 0000007f 00000000 00000000     ................
   13134:	ffffffc0 0000007f 00000000 00000000     ................
   13144:	fffffff8 0000007f 00000000 80000000     ................
   13154:	ffffffff 0000007f 00000000 f0000000     ................
   13164:	ffffffff 0000007f 00000000 fe000000     ................
   13174:	ffffffff 0000001f 00000000 ffe00000     ................
   13184:	ffffffff 00000003 00000000 fffc0000     ................
   13194:	7fffffff 00000000 00000000 ffff8000     ................
   131a4:	0fffffff 00000000 00000000 fffff800     ................
   131b4:	01ffffff 00000000 00000000 ffffff00     ................
   131c4:	003fffff 00000000 00000000 ffffffe0     ..?.............
   131d4:	0007ffff 00000000 00000000 fffffffe     ................
   131e4:	0000ffff 00000000 80000000 ffffffff     ................
   131f4:	00003fff 00000000 80000000 ffffffff     .?..............
   13204:	000007ff 00000000 80000000 ffffffff     ................
   13214:	000000ff 00000000 80000000 ffffffff     ................
   13224:	0000001f 00000000 80000000 ffffffff     ................
   13234:	00000003 00000000 80000000 7fffffff     ................
	...
   1324c:	80000000 0fffffff 00000000 00000000     ................
   1325c:	80000000 01ffffff 00000000 00000000     ................
   1326c:	80000000 007fffff 00000000 00000000     ................
   1327c:	80000000 000fffff 00000000 00000000     ................
   1328c:	80000000 0001ffff 00000000 00000000     ................
   1329c:	80000000 00003fff 00000000 00000000     .....?..........
   132ac:	80000000 000007ff 00000000 00000000     ................
   132bc:	80000000 000000ff 00000000 00000000     ................
   132cc:	80000000 0000001f 00000000 00000000     ................
   132dc:	80000000 00000003 00000000 00000000     ................
   132ec:	80000000 00000000 00000000 00000000     ................
	...
   1331c:	80000000 00000007 00000000 00000000     ................
   1332c:	80000000 000000ff 00000000 00000000     ................
   1333c:	80000000 00000fff 00000000 00000000     ................
   1334c:	80000000 0001ffff 00000000 00000000     ................
   1335c:	80000000 001fffff 00000000 00000000     ................
   1336c:	80000000 03ffffff 00000000 00000000     ................
   1337c:	80000000 3fffffff 00000000 00000000     .......?........
   1338c:	80000000 ffffffff 00000007 00000000     ................
   1339c:	80000000 ffffffff 0000007f 00000000     ................
   133ac:	80000000 ffffffff 00000fff 00000000     ................
   133bc:	80000000 ffffffff 0000ffff 00000000     ................
   133cc:	80000000 ffffffff 001fffff 00000000     ................
   133dc:	80000000 ffffffff 01ffffff 00000000     ................
   133ec:	80000000 ffffffff 3fffffff 00000000     ...........?....
   133fc:	00000000 ffffffff ffffffff 00000003     ................
   1340c:	00000000 ffffffe0 ffffffff 0000007f     ................
   1341c:	00000000 fffff800 ffffffff 0000007f     ................
   1342c:	00000000 ffff0000 ffffffff 0000007f     ................
   1343c:	00000000 ffe00000 ffffffff 0000007f     ................
   1344c:	00000000 fc000000 ffffffff 0000007f     ................
	...
   13464:	ffffffff 0000007f 00000000 00000000     ................
   13474:	ffffffe0 0000007f 00000000 00000000     ................
   13484:	fffffc00 0000007f 00000000 00000000     ................
   13494:	ffff8000 0000007f 00000000 00000000     ................
   134a4:	ffff0000 0000007f 00000000 00000000     ................
   134b4:	fffff000 0000007f 00000000 00000000     ................
   134c4:	ffffff80 0000007f 00000000 00000000     ................
   134d4:	fffffff8 0000007f 00000000 80000000     ................
   134e4:	ffffffff 0000007f 00000000 fc000000     ................
   134f4:	ffffffff 0000007f 00000000 ffc00000     ................
   13504:	ffffffff 0000007f 00000000 fffc0000     ................
   13514:	ffffffff 00000003 00000000 ffffc000     ................
   13524:	3fffffff 00000000 00000000 fffffe00     ...?............
   13534:	03ffffff 00000000 00000000 ffffffe0     ................
   13544:	003fffff 00000000 00000000 fffffffe     ..?.............
   13554:	0003ffff 00000000 80000000 ffffffff     ................
   13564:	00003fff 00000000 80000000 ffffffff     .?..............
   13574:	000003ff 00000000 80000000 ffffffff     ................
   13584:	0000003f 00000000 80000000 ffffffff     ?...............
   13594:	00000001 00000000 80000000 1fffffff     ................
	...
   135ac:	80000000 01ffffff 00000000 00000000     ................
   135bc:	80000000 01ffffff 00000000 00000000     ................
   135cc:	80000000 1fffffff 00000000 00000000     ................
   135dc:	80000000 ffffffff 00000001 00000000     ................
   135ec:	80000000 ffffffff 0000001f 00000000     ................
   135fc:	80000000 ffffffff 000001ff 00000000     ................
   1360c:	80000000 ffffffff 00001fff 00000000     ................
   1361c:	80000000 ffffffff 0001ffff 00000000     ................
   1362c:	00000000 fffffff0 001fffff 00000000     ................
   1363c:	00000000 ffffff00 03ffffff 00000000     ................
   1364c:	00000000 ffffe000 3fffffff 00000000     ...........?....
   1365c:	00000000 fffe0000 ffffffff 00000003     ................
   1366c:	00000000 ffe00000 ffffffff 0000003f     ............?...
   1367c:	00000000 fc000000 ffffffff 0000007f     ................
   1368c:	00000000 c0000000 ffffffff 0000007f     ................
	...
   136a4:	fffffffc 0000007f 00000000 00000000     ................
   136b4:	ffffff80 0000007f 00000000 00000000     ................
   136c4:	fffff800 0000007f 00000000 00000000     ................
   136d4:	ffff8000 0000007f 00000000 00000000     ................
   136e4:	fffe0000 0000007f 00000000 00000000     ................
   136f4:	fffff800 0000007f 00000000 00000000     ................
   13704:	ffffffc0 0000007f 00000000 00000000     ................
   13714:	fffffffe 0000007f 00000000 f8000000     ................
   13724:	ffffffff 0000007f 00000000 ffc00000     ................
   13734:	ffffffff 0000007f 00000000 fffe0000     ................
   13744:	ffffffff 0000007f 00000000 fffff800     ................
   13754:	ffffffff 0000007f 00000000 ffffffc0     ................
   13764:	ffffffff 0000007f 00000000 fffffffe     ................
   13774:	ffffffff 00000007 80000000 ffffffff     ................
   13784:	7fffffff 00000000 80000000 ffffffff     ................
   13794:	03ffffff 00000000 80000000 ffffffff     ................
   137a4:	003fffff 00000000 80000000 ffffffff     ..?.............
   137b4:	0001ffff 00000000 80000000 ffffffff     ................
   137c4:	00001fff 00000000 80000000 ffffffff     ................
   137d4:	000000ff 00000000 80000000 ffffffff     ................
   137e4:	0000000f 00000000 80000000 7fffffff     ................
	...
   137fc:	80000000 07ffffff 00000000 00000000     ................
   1380c:	80000000 003fffff 00000000 00000000     ......?.........
   1381c:	80000000 0001ffff 00000000 00000000     ................
   1382c:	80000000 00001fff 00000000 00000000     ................
   1383c:	80000000 000000ff 00000000 00000000     ................
   1384c:	80000000 0000000f 00000000 00000000     ................
   1385c:	80000000 00000000 00000000 00000000     ................
	...
   13898:	00000040 80000000 00000000 00000000     @...............
   138a8:	00000060 80000000 00000003 00000000     `...............
   138b8:	00000078 80000000 0000000f 00000000     x...............
   138c8:	0000007e 80000000 0000003f 00000000     ~.......?.......
   138d8:	0000007f 80000000 0000007f c0000000     ................
   138e8:	0000007f 80000000 000001ff f0000000     ................
   138f8:	0000007f 80000000 000007ff fc000000     ................
   13908:	0000007f 80000000 00000fff fe000000     ................
   13918:	0000007f 80000000 00003fff ff800000     .........?......
   13928:	0000007f 80000000 0000ffff ffe00000     ................
   13938:	0000007f 80000000 0003ffff fff00000     ................
   13948:	0000007f 80000000 0007ffff fffc0000     ................
   13958:	0000007f 80000000 001fffff ffff0000     ................
   13968:	0000007f 80000000 007fffff ffff8000     ................
   13978:	0000007f 80000000 00ffffff ffffe000     ................
   13988:	0000007f 80000000 03ffffff fffff800     ................
   13998:	0000007f 80000000 0fffffff fffffc00     ................
   139a8:	0000007f 00000000 3ffffffe ffffff00     ...........?....
   139b8:	0000001f 00000000 7ffffffc ffffffc0     ................
   139c8:	00000007 00000000 fffffff0 fffffff1     ................
   139d8:	00000001 00000000 ffffffc0 7fffffff     ................
	...
   139f0:	ffffff00 3fffffff 00000000 00000000     .......?........
   13a00:	fffffc00 0fffffff 00000000 00000000     ................
   13a10:	fffff000 03ffffff 00000000 00000000     ................
   13a20:	ffffe000 00ffffff 00000000 00000000     ................
   13a30:	ffff8000 003fffff 00000000 00000000     ......?.........
   13a40:	fffe0000 000fffff 00000000 00000000     ................
   13a50:	fff80000 0007ffff 00000000 00000000     ................
   13a60:	ffe00000 0001ffff 00000000 00000000     ................
   13a70:	ff800000 00007fff 00000000 00000000     ................
   13a80:	ff800000 00003fff 00000000 00000000     .....?..........
   13a90:	ffe00000 0000ffff 00000000 00000000     ................
   13aa0:	fff80000 0003ffff 00000000 00000000     ................
   13ab0:	fffc0000 000fffff 00000000 00000000     ................
   13ac0:	ffff0000 003fffff 00000000 00000000     ......?.........
   13ad0:	ffffc000 00ffffff 00000000 00000000     ................
   13ae0:	fffff000 01ffffff 00000000 00000000     ................
   13af0:	fffffc00 07ffffff 00000000 00000000     ................
   13b00:	ffffff00 1fffffff 00000000 00000000     ................
   13b10:	ffffffc0 7fffffff 00000000 00000000     ................
   13b20:	ffffffe0 fffffff1 00000001 00000000     ................
   13b30:	fffffff8 ffffffc0 00000007 00000000     ................
   13b40:	3ffffffe ffffff80 0000000f 80000000     ...?............
   13b50:	0fffffff fffffe00 0000003f 80000000     ........?.......
   13b60:	03ffffff fffff800 0000007f 80000000     ................
   13b70:	01ffffff ffffe000 0000007f 80000000     ................
   13b80:	007fffff ffffc000 0000007f 80000000     ................
   13b90:	001fffff ffff0000 0000007f 80000000     ................
   13ba0:	000fffff fffc0000 0000007f 80000000     ................
   13bb0:	0003ffff fff80000 0000007f 80000000     ................
   13bc0:	0000ffff ffe00000 0000007f 80000000     ................
   13bd0:	00007fff ff800000 0000007f 80000000     ................
   13be0:	00001fff ff000000 0000007f 80000000     ................
   13bf0:	000007ff fc000000 0000007f 80000000     ................
   13c00:	000001ff f0000000 0000007f 80000000     ................
   13c10:	000000ff e0000000 0000007f 80000000     ................
   13c20:	0000003f 80000000 0000007f 80000000     ?...............
   13c30:	0000000f 00000000 0000007e 80000000     ........~.......
   13c40:	00000007 00000000 00000078 80000000     ........x.......
   13c50:	00000001 00000000 00000070 80000000     ........p.......
	...
   13c68:	00000040 00000000 00000000 00000000     @...............
   13c78:	00000000 80000000 00000000 00000000     ................
   13c88:	00000000 80000000 00000003 00000000     ................
   13c98:	00000000 80000000 0000000f 00000000     ................
   13ca8:	00000000 80000000 0000003f 00000000     ........?.......
   13cb8:	00000000 80000000 000000ff 00000000     ................
   13cc8:	00000000 80000000 000003ff 00000000     ................
   13cd8:	00000000 80000000 000007ff 00000000     ................
   13ce8:	00000000 80000000 00001fff 00000000     ................
   13cf8:	00000000 80000000 00007fff 00000000     ................
   13d08:	00000000 80000000 0001ffff 00000000     ................
   13d18:	00000000 80000000 0007ffff 00000000     ................
   13d28:	00000000 80000000 001fffff 00000000     ................
   13d38:	00000000 80000000 007fffff 00000000     ................
   13d48:	00000000 80000000 01ffffff 00000000     ................
   13d58:	00000000 80000000 07ffffff 00000000     ................
   13d68:	00000000 80000000 1fffffff 00000000     ................
   13d78:	00000000 80000000 7fffffff 00000000     ................
	...
   13d90:	fffffffc 00000001 00000000 00000000     ................
   13da0:	fffffff0 00000007 00000000 00000000     ................
   13db0:	ffffffc0 0000001f 00000000 00000000     ................
   13dc0:	ffffff00 0000007f 00000000 00000000     ................
   13dd0:	fffffc00 000001ff 00000000 00000000     ................
   13de0:	fffff000 000007ff 00000000 00000000     ................
   13df0:	ffff8000 00001fff 00000000 00000000     ................
   13e00:	fffe0000 ffffffff 0000007f 00000000     ................
   13e10:	fff80000 ffffffff 0000007f 00000000     ................
   13e20:	ffe00000 ffffffff 0000007f 00000000     ................
   13e30:	ff800000 ffffffff 0000007f 00000000     ................
   13e40:	fc000000 ffffffff 0000007f 00000000     ................
   13e50:	f0000000 ffffffff 0000007f 00000000     ................
   13e60:	c0000000 ffffffff 0000007f 00000000     ................
   13e70:	80000000 ffffffff 0000007f 00000000     ................
   13e80:	e0000000 ffffffff 0000007f 00000000     ................
   13e90:	fc000000 ffffffff 0000007f 00000000     ................
   13ea0:	ff000000 ffffffff 0000007f 00000000     ................
   13eb0:	ffc00000 ffffffff 0000007f 00000000     ................
   13ec0:	fff00000 ffffffff 0000007f 00000000     ................
   13ed0:	fffc0000 ffffffff 0000007f 00000000     ................
   13ee0:	ffff0000 ffffffff 0000007f 00000000     ................
   13ef0:	ffffe000 000007ff 00000000 00000000     ................
   13f00:	fffff800 000001ff 00000000 00000000     ................
   13f10:	fffffe00 0000007f 00000000 00000000     ................
   13f20:	ffffff80 0000003f 00000000 00000000     ....?...........
   13f30:	ffffffe0 0000000f 00000000 00000000     ................
   13f40:	fffffffc 00000003 00000000 00000000     ................
   13f50:	ffffffff 00000000 00000000 80000000     ................
   13f60:	3fffffff 00000000 00000000 80000000     ...?............
   13f70:	0fffffff 00000000 00000000 80000000     ................
   13f80:	03ffffff 00000000 00000000 80000000     ................
   13f90:	00ffffff 00000000 00000000 80000000     ................
   13fa0:	003fffff 00000000 00000000 80000000     ..?.............
   13fb0:	000fffff 00000000 00000000 80000000     ................
   13fc0:	0003ffff 00000000 00000000 80000000     ................
   13fd0:	0000ffff 00000000 00000000 80000000     ................
   13fe0:	00003fff 00000000 00000000 80000000     .?..............
   13ff0:	00000fff 00000000 00000000 80000000     ................
   14000:	000003ff 00000000 00000000 80000000     ................
   14010:	000000ff 00000000 00000000 80000000     ................
   14020:	0000003f 00000000 00000000 80000000     ?...............
   14030:	0000000f 00000000 00000000 80000000     ................
   14040:	00000003 00000000 00000000 80000000     ................
   14050:	00000001 00000000 00000000 00000000     ................
	...
   1409c:	80000000 000003ff c0000000 0000007f     ................
   140ac:	80000000 000003ff f0000000 0000007f     ................
   140bc:	80000000 000003ff f8000000 0000007f     ................
   140cc:	80000000 000003ff fe000000 0000007f     ................
   140dc:	80000000 000003ff ff000000 0000007f     ................
   140ec:	80000000 000003ff ffc00000 0000007f     ................
   140fc:	80000000 000003ff ffe00000 0000007f     ................
   1410c:	80000000 000003ff fff80000 0000007f     ................
   1411c:	80000000 000003ff fffc0000 0000007f     ................
   1412c:	80000000 000003ff ffff0000 0000007f     ................
   1413c:	80000000 000003ff ffff8000 0000007f     ................
   1414c:	80000000 000003ff ffffe000 0000007f     ................
   1415c:	80000000 000003ff fffff000 0000007f     ................
   1416c:	80000000 000003ff fffffc00 0000007f     ................
   1417c:	80000000 000003ff fffffe00 0000007f     ................
   1418c:	80000000 000003ff ffffff80 0000007f     ................
   1419c:	80000000 000003ff ffffffc0 0000007f     ................
   141ac:	80000000 000003ff fffffff0 0000007f     ................
   141bc:	80000000 000003ff f7fffff8 0000007f     ................
   141cc:	80000000 000003ff f3fffffe 0000007f     ................
   141dc:	80000000 000003ff f0ffffff 0000007f     ................
   141ec:	80000000 c00003ff f07fffff 0000007f     ................
   141fc:	80000000 e00003ff f01fffff 0000007f     ................
   1420c:	80000000 f80003ff f00fffff 0000007f     ................
   1421c:	80000000 fc0003ff f003ffff 0000007f     ................
   1422c:	80000000 ff0003ff f001ffff 0000007f     ................
   1423c:	80000000 ff8003ff f0007fff 0000007f     ................
   1424c:	80000000 ffe003ff f0003fff 0000007f     .........?......
   1425c:	80000000 fff003ff f0000fff 0000007f     ................
   1426c:	80000000 fffc03ff f00007ff 0000007f     ................
   1427c:	80000000 fffe03ff f00001ff 0000007f     ................
   1428c:	80000000 ffff83ff f00000ff 0000007f     ................
   1429c:	80000000 ffffc3ff f000003f 0000007f     ........?.......
   142ac:	80000000 fffff3ff f000001f 0000007f     ................
   142bc:	80000000 fffffbff f0000007 0000007f     ................
   142cc:	80000000 ffffffff f0000003 0000007f     ................
   142dc:	80000000 ffffffff f0000000 0000007f     ................
   142ec:	80000000 7fffffff f0000000 0000007f     ................
   142fc:	80000000 1fffffff f0000000 0000007f     ................
   1430c:	80000000 0fffffff f0000000 0000007f     ................
   1431c:	80000000 03ffffff f0000000 0000007f     ................
   1432c:	80000000 01ffffff f0000000 0000007f     ................
   1433c:	80000000 007fffff f0000000 0000007f     ................
   1434c:	80000000 003fffff f0000000 0000007f     ......?.........
   1435c:	80000000 000fffff f0000000 0000007f     ................
   1436c:	80000000 0007ffff f0000000 0000007f     ................
   1437c:	80000000 0001ffff f0000000 0000007f     ................
   1438c:	80000000 0000ffff f0000000 0000007f     ................
   1439c:	80000000 00003fff f0000000 0000007f     .....?..........
   143ac:	80000000 00001fff f0000000 0000007f     ................
   143bc:	80000000 000007ff f0000000 0000007f     ................
   143cc:	80000000 000003ff f0000000 0000007f     ................
   143dc:	80000000 000000ff f0000000 0000007f     ................
   143ec:	80000000 0000007f f0000000 0000007f     ................
	...
   1448c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1449c:	fff80000 ffffffff ffffffff 00ffffff     ................
   144ac:	fff80000 ffffffff ffffffff 00ffffff     ................
   144bc:	fff80000 ffffffff ffffffff 00ffffff     ................
   144cc:	fff80000 ffffffff ffffffff 00ffffff     ................
   144dc:	fff80000 ffffffff ffffffff 00ffffff     ................
   144ec:	fff80000 ffffffff ffffffff 00ffffff     ................
   144fc:	fff80000 ffffffff ffffffff 00ffffff     ................
   1450c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1451c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1452c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1453c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1454c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1455c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1456c:	3ff80000 00000000 00000000 00ffe000     ...?............
   1457c:	3ff80000 00000000 00000000 00ffe000     ...?............
   1458c:	3ff80000 00000000 00000000 00ffe000     ...?............
   1459c:	3ff80000 00000000 00000000 00ffe000     ...?............
   145ac:	3ff80000 00000000 00000000 00ffe000     ...?............
   145bc:	3ff80000 00000000 00000000 00ffe000     ...?............
   145cc:	3ff80000 00000000 00000000 00ffe000     ...?............
	...
   145ec:	80000000 00000000 00000000 00000000     ................
   145fc:	80000000 00000007 00000000 00000000     ................
   1460c:	80000000 0000003f 00000000 00000000     ....?...........
   1461c:	80000000 000000ff 00000000 00000000     ................
   1462c:	80000000 000007ff 00000000 00000000     ................
   1463c:	80000000 00001fff 00000000 00000000     ................
   1464c:	80000000 0000ffff 00000000 00000000     ................
   1465c:	80000000 0007ffff 00000000 00000000     ................
   1466c:	80000000 001fffff 00000000 00000000     ................
   1467c:	80000000 00ffffff 00000000 00000000     ................
   1468c:	80000000 03ffffff 00000000 00000000     ................
   1469c:	80000000 1fffffff 00000000 00000000     ................
   146ac:	80000000 ffffffff 00000000 00000000     ................
   146bc:	80000000 ffffffff 00000003 00000000     ................
   146cc:	80000000 ffffffff 0000001f 00000000     ................
   146dc:	00000000 fffffffe 0000007f 00000000     ................
   146ec:	00000000 fffffff0 000003ff 00000000     ................
   146fc:	00000000 ffffff80 00001fff 00000000     ................
   1470c:	00000000 fffffe00 00007fff 00000000     ................
   1471c:	00000000 fffff000 0003ffff 00000000     ................
   1472c:	00000000 ffffc000 000fffff 00000000     ................
   1473c:	00000000 fffe0000 007fffff 00000000     ................
   1474c:	00000000 fff00000 03ffffff 00000000     ................
   1475c:	00000000 ffc00000 0fffffff 00000000     ................
   1476c:	00000000 fe000000 7fffffff 00000000     ................
   1477c:	00000000 f8000000 ffffffff 00000001     ................
   1478c:	00000000 c0000000 ffffffff 0000000f     ................
	...
   147a4:	fffffffe 0000007f 00000000 00000000     ................
   147b4:	fffffff8 000001ff 00000000 00000000     ................
   147c4:	ffffffc0 00000fff 00000000 00000000     ................
   147d4:	ffffff00 00001fff 00000000 00000000     ................
   147e4:	fffff800 00001fff 00000000 00000000     ................
   147f4:	ffffc000 00001fff 00000000 00000000     ................
   14804:	ffff0000 00001fff 00000000 00000000     ................
   14814:	fff80000 00001fff 00000000 00000000     ................
   14824:	ffc00000 00001fff 00000000 00000000     ................
   14834:	ff000000 00001fff 00000000 00000000     ................
   14844:	f8000000 00001fff 00000000 00000000     ................
   14854:	e0000000 00001fff 00000000 00000000     ................
   14864:	00000000 00001fff 00000000 00000000     ................
   14874:	00000000 00001ff8 00000000 00000000     ................
   14884:	00000000 00001fe0 00000000 00000000     ................
   14894:	00000000 00001f00 00000000 00000000     ................
	...
   148ac:	3ff80000 00000000 00000000 00ffe000     ...?............
   148bc:	3ff80000 00000000 00000000 00ffe000     ...?............
   148cc:	3ff80000 00000000 00000000 00ffe000     ...?............
   148dc:	3ff80000 00000000 00000000 00ffe000     ...?............
   148ec:	3ff80000 00000000 00000000 00ffe000     ...?............
   148fc:	3ff80000 00000000 00000000 00ffe000     ...?............
   1490c:	3ff80000 00000000 00000000 00ffe000     ...?............
   1491c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1492c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1493c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1494c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1495c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1496c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1497c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1498c:	fff80000 ffffffff ffffffff 00ffffff     ................
   1499c:	fff80000 ffffffff ffffffff 00ffffff     ................
   149ac:	fff80000 ffffffff ffffffff 00ffffff     ................
   149bc:	fff80000 ffffffff ffffffff 00ffffff     ................
   149cc:	fff80000 ffffffff ffffffff 00ffffff     ................
   149dc:	fff80000 ffffffff ffffffff 00ffffff     ................
   149ec:	fff80000 ffffffff ffffffff 00ffffff     ................
	...
   14a84:	00000004 00000000 00000000 00000000     ................
   14a94:	00000007 00000000 00000000 e0000000     ................
   14aa4:	00000007 00000000 00000000 f8000000     ................
   14ab4:	00000007 00000000 00000000 ff000000     ................
   14ac4:	00000007 00000000 00000000 ffc00000     ................
   14ad4:	00000007 00000000 00000000 fff80000     ................
   14ae4:	00000007 00000000 00000000 fffe0000     ................
   14af4:	00000007 00000000 00000000 ffff8000     ................
   14b04:	00000007 00000000 00000000 fffff000     ................
   14b14:	00000007 00000000 00000000 fffffc00     ................
   14b24:	00000007 00000000 00000000 ffffff80     ................
   14b34:	00000007 00000000 00000000 ffffffe0     ................
	...
   14b50:	3ffffffc 00000000 00000000 00000000     ...?............
   14b60:	07ffffff 00000000 00000000 80000000     ................
   14b70:	00ffffff 00000000 00000000 80000000     ................
   14b80:	003fffff 00000000 00000000 80000000     ..?.............
   14b90:	0007ffff 00000000 00000000 80000000     ................
   14ba0:	0000ffff 00000000 00000000 80000000     ................
   14bb0:	00003fff 00000000 00000000 80000000     .?..............
   14bc0:	00003fff 00000000 00000000 80000000     .?..............
   14bd0:	0000ffff 00000000 00000000 80000000     ................
   14be0:	0007ffff 00000000 00000000 80000000     ................
   14bf0:	001fffff 00000000 00000000 80000000     ................
   14c00:	00ffffff 00000000 00000000 00000000     ................
   14c10:	07ffffff 00000000 00000000 00000000     ................
   14c20:	1ffffffc 00000000 00000000 00000000     ................
   14c30:	ffffffe0 00000000 00000000 00000000     ................
   14c40:	ffffff80 00000007 00000000 00000000     ................
   14c50:	fffffe00 00000007 00000000 00000000     ................
   14c60:	fffff000 00000007 00000000 00000000     ................
   14c70:	ffffc000 00000007 00000000 00000000     ................
   14c80:	fffe0000 00000007 00000000 00000000     ................
   14c90:	fff80000 00000007 00000000 00000000     ................
   14ca0:	ffc00000 00000007 00000000 00000000     ................
   14cb0:	ff000000 00000007 00000000 00000000     ................
   14cc0:	f8000000 00000007 00000000 00000000     ................
   14cd0:	e0000000 00000007 00000000 00000000     ................
   14ce0:	80000000 00000007 00000000 00000000     ................
   14cf0:	00000000 00000004 00000000 00000000     ................
	...
   14d28:	0003ff80 00000000 00000000 00000000     ................
   14d38:	0003ff80 00000000 00000000 00000000     ................
   14d48:	0003ff80 00000000 00000000 00000000     ................
   14d58:	0003ff80 00000000 00000000 00000000     ................
   14d68:	0003ff80 00000000 00000000 00000000     ................
   14d78:	0003ff80 00000000 00000000 00000000     ................
   14d88:	0003ff80 00000000 00000000 00000000     ................
   14d98:	0003ff80 00000000 00000000 00000000     ................
   14da8:	0003ff80 00000000 00000000 00000000     ................
   14db8:	0003ff80 00000000 00000000 00000000     ................
   14dc8:	0003ff80 00000000 00000000 00000000     ................
   14dd8:	0003ff80 00000000 00000000 00000000     ................
   14de8:	0003ff80 00000000 00000000 00000000     ................
   14df8:	0003ff80 00000000 00000000 00000000     ................
   14e08:	0003ff80 00000000 00000000 00000000     ................
   14e18:	0003ff80 00000000 00000000 00000000     ................
   14e28:	0003ff80 00000000 00000000 00000000     ................
   14e38:	0003ff80 00000000 00000000 00000000     ................
   14e48:	0003ff80 00000000 00000000 00000000     ................
   14e58:	0003ff80 00000000 00000000 00000000     ................
   14e68:	0003ff80 00000000 00000000 00000000     ................
   14e78:	0003ff80 00000000 00000000 00000000     ................
   14e88:	0003ff80 00000000 00000000 00000000     ................
   14e98:	0003ff80 00000000 00000000 00000000     ................
   14ea8:	0003ff80 00000000 00000000 00000000     ................
   14eb8:	0003ff80 00000000 00000000 00000000     ................
   14ec8:	0003ff80 00000000 00000000 00000000     ................
   14ed8:	0003ff80 00000000 00000000 00000000     ................
   14ee8:	0003ff80 00000000 00000000 00000000     ................
   14ef8:	0003ff80 00000000 00000000 00000000     ................
   14f08:	0003ff80 00000000 00000000 00000000     ................
   14f18:	0003ff80 00000000 00000000 00000000     ................
   14f28:	0003ff80 00000000 00000000 00000000     ................
   14f38:	0003ff80 00000000 00000000 00000000     ................
   14f48:	0003ff80 00000000 00000000 00000000     ................
   14f58:	0003ff80 00000000 00000000 00000000     ................
   14f68:	0003ff80 00000000 00000000 00000000     ................
   14f78:	0003ff80 00000000 00000000 00000000     ................
   14f88:	0003ff80 00000000 00000000 00000000     ................
   14f98:	0003ff80 00000000 00000000 00000000     ................
   14fa8:	0003ff80 00000000 00000000 00000000     ................
   14fb8:	0003ff80 00000000 00000000 00000000     ................
   14fc8:	0003ff80 00000000 00000000 00000000     ................
   14fd8:	0003ff80 00000000 00000000 00000000     ................
   14fe8:	0003ff80 00000000 00000000 00000000     ................
	...
   1501c:	10000000 00000000 00000000 00000000     ................
   1502c:	30000000 00000000 00000000 00000000     ...0............
   1503c:	70000000 00000000 00000000 00000000     ...p............
   1504c:	f0000000 00000000 00000000 00000000     ................
   1505c:	f0000000 00000001 00000000 00000000     ................
   1506c:	f0000000 00000007 00000000 00000000     ................
   1507c:	f0000000 0000000f 00000000 00000000     ................
   1508c:	f0000000 0000001f 00000000 00000000     ................
   1509c:	f0000000 0000003f 00000000 00000000     ....?...........
   150ac:	f0000000 0000007f 00000000 00000000     ................
   150bc:	f0000000 000000ff 00000000 00000000     ................
   150cc:	f0000000 000001ff 00000000 00000000     ................
   150dc:	f0000000 000003ff 00000000 00000000     ................
   150ec:	f0000000 000007ff 00000000 00000000     ................
   150fc:	f0000000 000007ff 00000000 00000000     ................
   1510c:	e0000000 000007ff 00000000 00000000     ................
   1511c:	c0000000 000007ff 00000000 00000000     ................
   1512c:	00000000 000007ff 00000000 00000000     ................
   1513c:	00000000 000007fe 00000000 00000000     ................
   1514c:	00000000 000007f8 00000000 00000000     ................
   1515c:	00000000 000007f0 00000000 00000000     ................
   1516c:	00000000 000007c0 00000000 00000000     ................
   1517c:	00000000 00000780 00000000 00000000     ................
   1518c:	00000000 00000600 00000000 00000000     ................
   1519c:	00000000 00000400 00000000 00000000     ................
	...
   15234:	03c00000 00000000 00000000 00000000     ................
   15244:	3ffc0000 00000000 00000000 e0000000     ...?............
   15254:	ffff0003 00000000 00000000 f8000000     ................
   15264:	ffffc003 00000001 00000000 fe000000     ................
   15274:	ffffe003 00000007 00000000 ff000000     ................
   15284:	fffff003 0000000f 00000000 ff800000     ................
   15294:	fffff003 0000000f 00000000 ffc00000     ................
   152a4:	fffff803 0000001f 00000000 ffe00000     ................
   152b4:	fffffc03 0000003f 00000000 ffe00000     ....?...........
   152c4:	fffffc03 0000003f 00000000 fff00000     ....?...........
   152d4:	fffffe03 0000007f 00000000 fff00000     ................
   152e4:	fffffe03 0000007f 00000000 fff80000     ................
   152f4:	fffffe03 0000007f 00000000 fff80000     ................
   15304:	ffffff03 0000007f 00000000 fffc0000     ................
   15314:	ffffff03 000000ff 00000000 fffc0000     ................
   15324:	fc07ff03 000000ff 00000000 7ffc0000     ................
   15334:	f803ff00 000000ff 00000000 3ffc0000     ...............?
   15344:	f001ff00 000000ff 00000000 1ffe0000     ................
   15354:	e000ff80 000000ff 00000000 1ffe0000     ................
   15364:	e000ff80 000000ff 00000000 0ffe0000     ................
   15374:	e000ff80 000000ff 00000000 0ffe0000     ................
   15384:	e0007f80 000000ff 00000000 0ffe0000     ................
   15394:	e0007f80 000000ff 00000000 0ffe0000     ................
   153a4:	e0007f80 0000007f 00000000 0ffe0000     ................
   153b4:	e0007f80 0000007f 00000000 0ffe0000     ................
   153c4:	f0007f80 0000007f 00000000 0ffe0000     ................
   153d4:	f0007f80 0000003f 00000000 1ffe0000     ....?...........
   153e4:	f0007f80 0000003f 00000000 1ffe0000     ....?...........
   153f4:	f8007f80 0000001f 00000000 3ffe0000     ...............?
   15404:	fc007f80 0000001f 00000000 fffc0000     ................
   15414:	fe007f80 0000000f 00000000 fffc0000     ................
   15424:	ffffffff 00000007 00000000 fffc0000     ................
   15434:	ffffffff 0000001f 00000000 fffc0000     ................
   15444:	ffffffff 0000007f 00000000 fff80000     ................
   15454:	ffffffff 0000007f 00000000 fff80000     ................
   15464:	ffffffff 0000007f 00000000 fff00000     ................
   15474:	ffffffff 0000007f 00000000 fff00000     ................
   15484:	ffffffff 0000007f 00000000 ffe00000     ................
   15494:	ffffffff 0000007f 00000000 ffc00000     ................
   154a4:	ffffffff 0000007f 00000000 ffc00000     ................
   154b4:	ffffffff 0000007f 00000000 ff800000     ................
   154c4:	ffffffff 0000007f 00000000 fe000000     ................
   154d4:	ffffffff 0000007f 00000000 fc000000     ................
   154e4:	ffffffff 0000007f 00000000 e0000000     ................
   154f4:	ffffffff 0000007f 00000000 00000000     ................
   15504:	fffffffe 0000007f 00000000 00000000     ................
   15514:	00000000 00000078 00000000 00000000     ....x...........
   15524:	00000000 00000040 00000000 00000000     ....@...........
	...
   155bc:	f8000000 ffffffff ffffffff 0000007f     ................
   155cc:	f8000000 ffffffff ffffffff 0000007f     ................
   155dc:	f8000000 ffffffff ffffffff 0000007f     ................
   155ec:	f8000000 ffffffff ffffffff 0000007f     ................
   155fc:	f8000000 ffffffff ffffffff 0000007f     ................
   1560c:	f8000000 ffffffff ffffffff 0000007f     ................
   1561c:	f8000000 ffffffff ffffffff 0000007f     ................
   1562c:	f8000000 ffffffff ffffffff 0000007f     ................
   1563c:	f8000000 ffffffff ffffffff 0000007f     ................
   1564c:	f8000000 ffffffff ffffffff 0000007f     ................
   1565c:	f8000000 ffffffff ffffffff 0000007f     ................
   1566c:	f8000000 ffffffff ffffffff 0000007f     ................
   1567c:	f8000000 ffffffff ffffffff 0000003f     ............?...
   1568c:	f8000000 ffffffff ffffffff 00000003     ................
   1569c:	00000000 ffc00000 fe000000 00000007     ................
   156ac:	00000000 7fe00000 fc000000 0000000f     ................
   156bc:	00000000 3ff00000 f8000000 0000001f     .......?........
   156cc:	00000000 1ff00000 f0000000 0000001f     ................
   156dc:	00000000 1ff80000 f0000000 0000003f     ............?...
   156ec:	00000000 1ffc0000 f0000000 0000007f     ................
   156fc:	00000000 0ffc0000 e0000000 0000007f     ................
   1570c:	00000000 0ffc0000 e0000000 0000007f     ................
   1571c:	00000000 0ffe0000 e0000000 000000ff     ................
   1572c:	00000000 0ffe0000 e0000000 000000ff     ................
   1573c:	00000000 0ffe0000 e0000000 000000ff     ................
   1574c:	00000000 0ffe0000 e0000000 000000ff     ................
   1575c:	00000000 0ffe0000 e0000000 000000ff     ................
   1576c:	00000000 1ffe0000 f0000000 000000ff     ................
   1577c:	00000000 1ffe0000 f0000000 000000ff     ................
   1578c:	00000000 3ffe0000 f8000000 000000ff     .......?........
   1579c:	00000000 7ffe0000 fc000000 000000ff     ................
   157ac:	00000000 fffe0000 ff000001 000000ff     ................
   157bc:	00000000 fffc0000 ffe0000f 0000007f     ................
   157cc:	00000000 fffc0000 ffffffff 0000007f     ................
   157dc:	00000000 fffc0000 ffffffff 0000007f     ................
   157ec:	00000000 fff80000 ffffffff 0000003f     ............?...
   157fc:	00000000 fff80000 ffffffff 0000003f     ............?...
   1580c:	00000000 fff00000 ffffffff 0000001f     ................
   1581c:	00000000 ffe00000 ffffffff 0000000f     ................
   1582c:	00000000 ffe00000 ffffffff 0000000f     ................
   1583c:	00000000 ffc00000 ffffffff 00000007     ................
   1584c:	00000000 ff800000 ffffffff 00000003     ................
   1585c:	00000000 fe000000 ffffffff 00000000     ................
   1586c:	00000000 fc000000 7fffffff 00000000     ................
   1587c:	00000000 f0000000 1fffffff 00000000     ................
   1588c:	00000000 c0000000 07ffffff 00000000     ................
	...
   158a4:	00fffffc 00000000 00000000 00000000     ................
   158b4:	0001ff00 00000000 00000000 00000000     ................
	...
   15924:	0000fe00 00000000 00000000 00000000     ................
   15934:	003ffff8 00000000 00000000 00000000     ..?.............
   15944:	01ffffff 00000000 00000000 e0000000     ................
   15954:	0fffffff 00000000 00000000 f0000000     ................
   15964:	1fffffff 00000000 00000000 fc000000     ................
   15974:	7fffffff 00000000 00000000 fe000000     ................
   15984:	ffffffff 00000000 00000000 ff000000     ................
   15994:	ffffffff 00000001 00000000 ff800000     ................
   159a4:	ffffffff 00000003 00000000 ffc00000     ................
   159b4:	ffffffff 00000007 00000000 ffe00000     ................
   159c4:	ffffffff 0000000f 00000000 fff00000     ................
   159d4:	ffffffff 0000000f 00000000 fff00000     ................
   159e4:	ffffffff 0000001f 00000000 fff80000     ................
   159f4:	ffffffff 0000003f 00000000 fff80000     ....?...........
   15a04:	ffffffff 0000003f 00000000 fff80000     ....?...........
   15a14:	ffe0000f 0000003f 00000000 fffc0000     ....?...........
   15a24:	ff000001 0000007f 00000000 7ffc0000     ................
   15a34:	fc000000 0000007f 00000000 3ffc0000     ...............?
   15a44:	f8000000 0000007f 00000000 1ffe0000     ................
   15a54:	f0000000 000000ff 00000000 1ffe0000     ................
   15a64:	f0000000 000000ff 00000000 0ffe0000     ................
   15a74:	e0000000 000000ff 00000000 0ffe0000     ................
   15a84:	e0000000 000000ff 00000000 0ffe0000     ................
   15a94:	e0000000 000000ff 00000000 0ffe0000     ................
   15aa4:	e0000000 000000ff 00000000 0ffe0000     ................
   15ab4:	e0000000 000000ff 00000000 0ffe0000     ................
   15ac4:	e0000000 000000ff 00000000 0ffe0000     ................
   15ad4:	e0000000 000000ff 00000000 1ffe0000     ................
   15ae4:	f0000000 000000ff 00000000 1ffe0000     ................
   15af4:	f0000000 000000ff 00000000 3ffe0000     ...............?
   15b04:	f8000000 0000007f 00000000 7ffc0000     ................
   15b14:	fc000000 0000007f 00000000 fffc0000     ................
   15b24:	fe000000 0000007f 00000000 fffc0000     ................
   15b34:	ff800007 0000007f 00000000 fff80000     ................
   15b44:	ffe0003f 0000003f 00000000 fff80000     ?...?...........
   15b54:	ffe0003f 0000003f 00000000 fff80000     ?...?...........
   15b64:	ffe0003f 0000001f 00000000 fff00000     ?...............
   15b74:	ffe0003f 0000001f 00000000 ffe00000     ?...............
   15b84:	ffe0003f 0000000f 00000000 ffe00000     ?...............
   15b94:	ffe0003f 0000000f 00000000 ffc00000     ?...............
   15ba4:	ffe0003f 00000007 00000000 ff800000     ?...............
   15bb4:	ffe0003f 00000003 00000000 ff000000     ?...............
   15bc4:	ffe0003f 00000001 00000000 fe000000     ?...............
   15bd4:	ffe0003f 00000000 00000000 f8000000     ?...............
   15be4:	3fe0003f 00000000 00000000 e0000000     ?..?............
   15bf4:	0fe0003f 00000000 00000000 00000000     ?...............
   15c04:	03e0003f 00000000 00000000 00000000     ?...............
	...
   15c74:	0001ff80 00000000 00000000 00000000     ................
   15c84:	007ffffc 00000000 00000000 80000000     ................
   15c94:	03ffffff 00000000 00000000 f0000000     ................
   15ca4:	1fffffff 00000000 00000000 fc000000     ................
   15cb4:	3fffffff 00000000 00000000 fe000000     ...?............
   15cc4:	ffffffff 00000000 00000000 ff000000     ................
   15cd4:	ffffffff 00000001 00000000 ffc00000     ................
   15ce4:	ffffffff 00000003 00000000 ffc00000     ................
   15cf4:	ffffffff 00000007 00000000 ffe00000     ................
   15d04:	ffffffff 0000000f 00000000 fff00000     ................
   15d14:	ffffffff 0000001f 00000000 fff80000     ................
   15d24:	ffffffff 0000003f 00000000 fff80000     ....?...........
   15d34:	ffffffff 0000003f 00000000 fffc0000     ....?...........
   15d44:	ffffffff 0000007f 00000000 fffc0000     ................
   15d54:	ffffffff 0000007f 00000000 fffc0000     ................
   15d64:	ffe0000f 0000007f 00000000 fffe0000     ................
   15d74:	ff000001 000000ff 00000000 fffe0000     ................
   15d84:	fe000000 000000ff 00000000 7ffe0000     ................
   15d94:	f8000000 000000ff 00000000 3ffe0000     ...............?
   15da4:	f8000000 000000ff 00000000 1ffe0000     ................
   15db4:	f0000000 000000ff 00000000 1ffe0000     ................
   15dc4:	f0000000 000000ff 00000000 0ffe0000     ................
   15dd4:	e0000000 000000ff 00000000 0ffe0000     ................
   15de4:	e0000000 000000ff 00000000 0ffe0000     ................
   15df4:	e0000000 000000ff 00000000 0ffe0000     ................
   15e04:	e0000000 0000007f 00000000 0ffc0000     ................
   15e14:	e0000000 0000007f 00000000 0ffc0000     ................
   15e24:	e0000000 0000007f 00000000 1ff80000     ................
   15e34:	f0000000 0000003f 00000000 1ff80000     ....?...........
   15e44:	f0000000 0000003f 00000000 1ff00000     ....?...........
   15e54:	f0000000 0000001f 00000000 3ff00000     ...............?
   15e64:	f8000000 0000001f 00000000 7fe00000     ................
   15e74:	fc000000 0000000f 00000000 ffc00000     ................
   15e84:	ff000001 00000007 f8000000 ffffffff     ................
   15e94:	ffffffff 00000003 f8000000 ffffffff     ................
   15ea4:	ffffffff 0000007f f8000000 ffffffff     ................
   15eb4:	ffffffff 0000007f f8000000 ffffffff     ................
   15ec4:	ffffffff 0000007f f8000000 ffffffff     ................
   15ed4:	ffffffff 0000007f f8000000 ffffffff     ................
   15ee4:	ffffffff 0000007f f8000000 ffffffff     ................
   15ef4:	ffffffff 0000007f f8000000 ffffffff     ................
   15f04:	ffffffff 0000007f f8000000 ffffffff     ................
   15f14:	ffffffff 0000007f f8000000 ffffffff     ................
   15f24:	ffffffff 0000007f f8000000 ffffffff     ................
   15f34:	ffffffff 0000007f f8000000 ffffffff     ................
   15f44:	ffffffff 0000007f f8000000 ffffffff     ................
   15f54:	ffffffff 0000007f f8000000 ffffffff     ................
   15f64:	ffffffff 0000007f 00000000 00000000     ................
	...
   16014:	001fffe0 00000000 00000000 00000000     ................
   16024:	00fffffe 00000000 00000000 80000000     ................
   16034:	03ffffff 00000000 00000000 e0000000     ................
   16044:	0fffffff 00000000 00000000 f8000000     ................
   16054:	3fffffff 00000000 00000000 fc000000     ...?............
   16064:	7fffffff 00000000 00000000 fe000000     ................
   16074:	ffffffff 00000000 00000000 ff000000     ................
   16084:	ffffffff 00000001 00000000 ff800000     ................
   16094:	ffffffff 00000003 00000000 ffc00000     ................
   160a4:	ffffffff 00000007 00000000 ffe00000     ................
   160b4:	ffffffff 0000000f 00000000 ffe00000     ................
   160c4:	ffffffff 0000000f 00000000 fff00000     ................
   160d4:	ffffffff 0000001f 00000000 fff80000     ................
   160e4:	ffffffff 0000001f 00000000 fff80000     ................
   160f4:	fff9ffbf 0000003f 00000000 fff80000     ....?...........
   16104:	ffc1ff87 0000003f 00000000 fffc0000     ....?...........
   16114:	ff81ff81 0000007f 00000000 7ffc0000     ................
   16124:	fe01ff80 0000007f 00000000 3ffc0000     ...............?
   16134:	fc01ff80 0000007f 00000000 1ffe0000     ................
   16144:	f801ff80 0000007f 00000000 1ffe0000     ................
   16154:	f801ff80 000000ff 00000000 0ffe0000     ................
   16164:	f001ff80 000000ff 00000000 0ffe0000     ................
   16174:	f001ff80 000000ff 00000000 0ffe0000     ................
   16184:	e001ff80 000000ff 00000000 0ffe0000     ................
   16194:	e001ff80 000000ff 00000000 0ffe0000     ................
   161a4:	e001ff80 000000ff 00000000 0ffe0000     ................
   161b4:	e001ff80 000000ff 00000000 0ffe0000     ................
   161c4:	e001ff80 000000ff 00000000 1ffe0000     ................
   161d4:	e001ff80 000000ff 00000000 1ffe0000     ................
   161e4:	e001ff80 000000ff 00000000 3ffc0000     ...............?
   161f4:	e001ff80 000000ff 00000000 3ffc0000     ...............?
   16204:	f001ff80 000000ff 00000000 fffc0000     ................
   16214:	f001ff80 0000007f 00000000 fffc0000     ................
   16224:	f001ff83 0000007f 00000000 fff80000     ................
   16234:	f801ffff 0000007f 00000000 fff80000     ................
   16244:	f801ffff 0000007f 00000000 fff00000     ................
   16254:	fc01ffff 0000003f 00000000 fff00000     ....?...........
   16264:	fe01ffff 0000003f 00000000 ffe00000     ....?...........
   16274:	ff01ffff 0000001f 00000000 ffc00000     ................
   16284:	ff81ffff 0000001f 00000000 ffc00000     ................
   16294:	ff81ffff 0000000f 00000000 ff800000     ................
   162a4:	ff01ffff 0000000f 00000000 ff000000     ................
   162b4:	fe01ffff 00000007 00000000 fc000000     ................
   162c4:	fc01ffff 00000003 00000000 f8000000     ................
   162d4:	f001ffff 00000001 00000000 e0000000     ................
   162e4:	e001ffff 00000000 00000000 00000000     ................
   162f4:	4001ffff 00000000 00000000 00000000     ...@............
   16304:	0001fff0 00000000 00000000 00000000     ................
	...
   16350:	0ffc0000 00000000 00000000 00000000     ................
   16360:	0ffc0000 00000000 00000000 00000000     ................
   16370:	0ffc0000 00000000 00000000 00000000     ................
   16380:	0ffc0000 00000000 00000000 00000000     ................
   16390:	0ffc0000 00000000 00000000 00000000     ................
   163a0:	0ffc0000 00000000 00000000 00000000     ................
   163b0:	0ffc0000 00000000 00000000 00000000     ................
   163c0:	0ffc0000 00000000 00000000 00000000     ................
   163d0:	fffffc00 ffffffff 0000007f 00000000     ................
   163e0:	ffffffe0 ffffffff 0000007f 00000000     ................
   163f0:	fffffff8 ffffffff 0000007f 00000000     ................
   16400:	fffffffe ffffffff 0000007f 00000000     ................
   16410:	ffffffff ffffffff 0000007f 80000000     ................
   16420:	ffffffff ffffffff 0000007f c0000000     ................
   16430:	ffffffff ffffffff 0000007f e0000000     ................
   16440:	ffffffff ffffffff 0000007f e0000000     ................
   16450:	ffffffff ffffffff 0000007f f0000000     ................
   16460:	ffffffff ffffffff 0000007f f0000000     ................
   16470:	ffffffff ffffffff 0000007f f8000000     ................
   16480:	ffffffff ffffffff 0000007f f8000000     ................
   16490:	ffffffff ffffffff 0000007f f8000000     ................
   164a0:	ffffffff ffffffff 0000007f fc000000     ................
   164b0:	ffffffff ffffffff 0000007f fc000000     ................
   164c0:	0ffc01ff 00000000 00000000 fc000000     ................
   164d0:	0ffc007f 00000000 00000000 fc000000     ................
   164e0:	0ffc003f 00000000 00000000 fc000000     ?...............
   164f0:	0ffc003f 00000000 00000000 fc000000     ?...............
   16500:	0ffc001f 00000000 00000000 fc000000     ................
   16510:	0ffc001f 00000000 00000000 fc000000     ................
   16520:	0ffc001f 00000000 00000000 fc000000     ................
   16530:	0ffc001f 00000000 00000000 fc000000     ................
   16540:	0ffc001f 00000000 00000000 fc000000     ................
   16550:	0ffc001f 00000000 00000000 f8000000     ................
   16560:	0000001f 00000000 00000000 f8000000     ................
   16570:	0000001f 00000000 00000000 00000000     ................
	...
   165c4:	003ffff8 00000000 00000000 00000000     ..?.............
   165d4:	01ffffff 00000000 00000000 e0000000     ................
   165e4:	0fffffff 00000000 00000000 f8000000     ................
   165f4:	3fffffff 00080000 00000000 fc000000     ...?............
   16604:	7fffffff 001e0000 00000000 ff000000     ................
   16614:	ffffffff 003f0000 00000000 ff800000     ......?.........
   16624:	ffffffff 007f8003 00000000 ffc00000     ................
   16634:	ffffffff 00ffe007 00000000 ffe00000     ................
   16644:	ffffffff 00fff00f 00000000 fff00000     ................
   16654:	ffffffff 01fff80f 00000000 fff00000     ................
   16664:	ffffffff 01fff01f 00000000 fff80000     ................
   16674:	ffffffff 03ffe03f 00000000 fff80000     ....?...........
   16684:	ffffffff 03ffc03f 00000000 fffc0000     ....?...........
   16694:	ffffffff 03ff807f 00000000 fffc0000     ................
   166a4:	fff0003f 07ff807f 00000000 fffc0000     ?...............
   166b4:	ff800007 07ff007f 00000000 fffe0000     ................
   166c4:	ff000001 07ff00ff 00000000 7ffe0000     ................
   166d4:	fc000000 0fff00ff 00000000 3ffe0000     ...............?
   166e4:	f8000000 0ffe00ff 00000000 3ffe0000     ...............?
   166f4:	f0000000 0ffe00ff 00000000 1ffe0000     ................
   16704:	f0000000 0ffe00ff 00000000 1ffe0000     ................
   16714:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   16724:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   16734:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   16744:	e0000000 0ffe00ff 00000000 0ffe0000     ................
   16754:	e0000000 0ffe00ff 00000000 0ffc0000     ................
   16764:	e0000000 0fff007f 00000000 0ffc0000     ................
   16774:	e0000000 0fff007f 00000000 0ffc0000     ................
   16784:	f0000000 0fff007f 00000000 1ff80000     ................
   16794:	f0000000 07ff803f 00000000 1ff80000     ....?...........
   167a4:	f0000000 07ffc01f 00000000 3ff00000     ...............?
   167b4:	f8000000 07ffe01f 00000000 7fe00000     ................
   167c4:	fc000000 07fff00f 00000000 ffc00000     ................
   167d4:	fe000000 03fffc07 00000000 ff800000     ................
   167e4:	ffffffff 03ffffff 00000000 fffc0000     ................
   167f4:	ffffffff 03ffffff 00000000 fffc0000     ................
   16804:	ffffffff 01ffffff 00000000 fffc0000     ................
   16814:	ffffffff 01ffffff 00000000 fffc0000     ................
   16824:	ffffffff 00ffffff 00000000 fffc0000     ................
   16834:	ffffffff 007fffff 00000000 fffc0000     ................
   16844:	ffffffff 007fffff 00000000 fffc0000     ................
   16854:	ffffffff 003fffff 00000000 fffc0000     ......?.........
   16864:	ffffffff 001fffff 00000000 fffc0000     ................
   16874:	ffffffff 000fffff 00000000 fffc0000     ................
   16884:	ffffffff 0003ffff 00000000 fffc0000     ................
   16894:	ffffffff 0001ffff 00000000 fffc0000     ................
   168a4:	ffffffff 00007fff 00000000 fffc0000     ................
   168b4:	ffffffff 00000fff 00000000 00000000     ................
	...
   1696c:	f8000000 ffffffff ffffffff 0000007f     ................
   1697c:	f8000000 ffffffff ffffffff 0000007f     ................
   1698c:	f8000000 ffffffff ffffffff 0000007f     ................
   1699c:	f8000000 ffffffff ffffffff 0000007f     ................
   169ac:	f8000000 ffffffff ffffffff 0000007f     ................
   169bc:	f8000000 ffffffff ffffffff 0000007f     ................
   169cc:	f8000000 ffffffff ffffffff 0000007f     ................
   169dc:	f8000000 ffffffff ffffffff 0000007f     ................
   169ec:	f8000000 ffffffff ffffffff 0000007f     ................
   169fc:	f8000000 ffffffff ffffffff 0000007f     ................
   16a0c:	f8000000 ffffffff ffffffff 0000007f     ................
   16a1c:	f8000000 ffffffff ffffffff 0000007f     ................
   16a2c:	f8000000 ffffffff ffffffff 0000007f     ................
   16a3c:	f8000000 ffffffff ffffffff 0000007f     ................
   16a4c:	f8000000 ffffffff ffffffff 0000007f     ................
   16a5c:	00000000 ff800000 00000000 00000000     ................
   16a6c:	00000000 3fc00000 00000000 00000000     .......?........
   16a7c:	00000000 3fe00000 00000000 00000000     .......?........
   16a8c:	00000000 1ff00000 00000000 00000000     ................
   16a9c:	00000000 1ff00000 00000000 00000000     ................
   16aac:	00000000 0ff80000 00000000 00000000     ................
   16abc:	00000000 0ffc0000 00000000 00000000     ................
   16acc:	00000000 0ffc0000 00000000 00000000     ................
   16adc:	00000000 0ffc0000 00000000 00000000     ................
   16aec:	00000000 0ffe0000 00000000 00000000     ................
   16afc:	00000000 0ffe0000 00000000 00000000     ................
   16b0c:	00000000 0ffe0000 00000000 00000000     ................
   16b1c:	00000000 1ffe0000 00000000 00000000     ................
   16b2c:	00000000 1ffe0000 00000000 00000000     ................
   16b3c:	00000000 3ffe0000 00000000 00000000     .......?........
   16b4c:	00000000 3ffe0000 00000000 00000000     .......?........
   16b5c:	00000000 fffe0000 00000000 00000000     ................
   16b6c:	00000000 fffe0000 ffffffff 0000007f     ................
   16b7c:	00000000 fffe0000 ffffffff 0000007f     ................
   16b8c:	00000000 fffc0000 ffffffff 0000007f     ................
   16b9c:	00000000 fffc0000 ffffffff 0000007f     ................
   16bac:	00000000 fffc0000 ffffffff 0000007f     ................
   16bbc:	00000000 fff80000 ffffffff 0000007f     ................
   16bcc:	00000000 fff80000 ffffffff 0000007f     ................
   16bdc:	00000000 fff00000 ffffffff 0000007f     ................
   16bec:	00000000 ffe00000 ffffffff 0000007f     ................
   16bfc:	00000000 ffc00000 ffffffff 0000007f     ................
   16c0c:	00000000 ff800000 ffffffff 0000007f     ................
   16c1c:	00000000 ff000000 ffffffff 0000007f     ................
   16c2c:	00000000 fc000000 ffffffff 0000007f     ................
   16c3c:	00000000 e0000000 ffffffff 0000007f     ................
	...
   16d00:	00000010 00000000 00000000 00000000     ................
   16d10:	fffc00fe ffffffff 0000007f 80000000     ................
   16d20:	fffc03ff ffffffff 0000007f c0000000     ................
   16d30:	fffc07ff ffffffff 0000007f c0000000     ................
   16d40:	fffc07ff ffffffff 0000007f e0000000     ................
   16d50:	fffc0fff ffffffff 0000007f e0000000     ................
   16d60:	fffc0fff ffffffff 0000007f e0000000     ................
   16d70:	fffc0fff ffffffff 0000007f e0000000     ................
   16d80:	fffc0fff ffffffff 0000007f e0000000     ................
   16d90:	fffc0fff ffffffff 0000007f e0000000     ................
   16da0:	fffc0fff ffffffff 0000007f e0000000     ................
   16db0:	fffc0fff ffffffff 0000007f c0000000     ................
   16dc0:	fffc07ff ffffffff 0000007f c0000000     ................
   16dd0:	fffc07ff ffffffff 0000007f 80000000     ................
   16de0:	fffc03ff ffffffff 0000007f 00000000     ................
   16df0:	fffc00fe ffffffff 0000007f 00000000     ................
	...
   16e68:	1ffc0000 00000000 00000000 00000000     ................
   16e78:	1ffc0000 00000000 00000000 00000000     ................
   16e88:	1ffc0000 00000000 00000000 00000000     ................
   16e98:	1ffe0000 00000000 00000000 00000000     ................
   16ea8:	1fff0000 00000000 0000007c 00000000     ........|.......
   16eb8:	1fff8000 00000000 fffc01ff ffffffff     ................
   16ec8:	1fffffff 80000000 fffc03ff ffffffff     ................
   16ed8:	0fffffff c0000000 fffc07ff ffffffff     ................
   16ee8:	0fffffff c0000000 fffc07ff ffffffff     ................
   16ef8:	0fffffff e0000000 fffc0fff ffffffff     ................
   16f08:	0fffffff e0000000 fffc0fff ffffffff     ................
   16f18:	07ffffff e0000000 fffc0fff ffffffff     ................
   16f28:	07ffffff e0000000 fffc0fff ffffffff     ................
   16f38:	03ffffff e0000000 fffc0fff ffffffff     ................
   16f48:	01ffffff e0000000 fffc0fff ffffffff     ................
   16f58:	00ffffff c0000000 fffc07ff ffffffff     ................
   16f68:	007fffff c0000000 fffc07ff ffffffff     ................
   16f78:	003fffff 80000000 fffc03ff ffffffff     ..?.............
   16f88:	000fffff 00000000 fffc01ff ffffffff     ................
   16f98:	0003ffff 00000000 0000007c 00000000     ........|.......
	...
   1704c:	f8000000 ffffffff ffffffff 0000007f     ................
   1705c:	f8000000 ffffffff ffffffff 0000007f     ................
   1706c:	f8000000 ffffffff ffffffff 0000007f     ................
   1707c:	f8000000 ffffffff ffffffff 0000007f     ................
   1708c:	f8000000 ffffffff ffffffff 0000007f     ................
   1709c:	f8000000 ffffffff ffffffff 0000007f     ................
   170ac:	f8000000 ffffffff ffffffff 0000007f     ................
   170bc:	f8000000 ffffffff ffffffff 0000007f     ................
   170cc:	f8000000 ffffffff ffffffff 0000007f     ................
   170dc:	f8000000 ffffffff ffffffff 0000007f     ................
   170ec:	f8000000 ffffffff ffffffff 0000007f     ................
   170fc:	f8000000 ffffffff ffffffff 0000007f     ................
   1710c:	f8000000 ffffffff ffffffff 0000007f     ................
   1711c:	f8000000 ffffffff ffffffff 0000007f     ................
   1712c:	f8000000 ffffffff ffffffff 0000007f     ................
	...
   17144:	003ffff0 00000000 00000000 00000000     ..?.............
   17154:	001ffff8 00000000 00000000 00000000     ................
   17164:	000ffffc 00000000 00000000 00000000     ................
   17174:	0007fffe 00000000 00000000 00000000     ................
   17184:	0003ffff 00000000 00000000 c0000000     ................
   17194:	0007ffff 00000000 00000000 e0000000     ................
   171a4:	000fffff 00000000 00000000 f0000000     ................
   171b4:	003fffff 00000000 00000000 f8000000     ..?.............
   171c4:	007fffff 00000000 00000000 fc000000     ................
   171d4:	01ffffff 00000000 00000000 fe000000     ................
   171e4:	03ffffff 00000000 00000000 ff800000     ................
   171f4:	0fffffff 00000000 00000000 ffc00000     ................
   17204:	3fffffff 00000000 00000000 ffe00000     ...?............
   17214:	7fffffff 00000000 00000000 fff00000     ................
   17224:	fffffeff 00000001 00000000 fff80000     ................
   17234:	fffffc3f 00000003 00000000 fffc0000     ?...............
   17244:	fffff01f 0000000f 00000000 fffc0000     ................
   17254:	ffffe00f 0000001f 00000000 fffc0000     ................
   17264:	ffff8007 0000007f 00000000 fffc0000     ................
   17274:	ffff0003 0000007f 00000000 fffc0000     ................
   17284:	fffc0001 0000007f 00000000 7ffc0000     ................
   17294:	fff80000 0000007f 00000000 3ffc0000     ...............?
   172a4:	ffe00000 0000007f 00000000 1ffc0000     ................
   172b4:	ffc00000 0000007f 00000000 0ffc0000     ................
   172c4:	ff000000 0000007f 00000000 07fc0000     ................
   172d4:	fe000000 0000007f 00000000 03fc0000     ................
   172e4:	f8000000 0000007f 00000000 01fc0000     ................
   172f4:	f0000000 0000007f 00000000 007c0000     ..............|.
   17304:	c0000000 0000007f 00000000 003c0000     ..............<.
   17314:	80000000 0000007f 00000000 001c0000     ................
   17324:	00000000 0000007f 00000000 000c0000     ................
   17334:	00000000 0000007c 00000000 00040000     ....|...........
   17344:	00000000 00000078 00000000 00000000     ....x...........
   17354:	00000000 00000060 00000000 00000000     ....`...........
	...
   173bc:	f8000000 ffffffff ffffffff 0000007f     ................
   173cc:	f8000000 ffffffff ffffffff 0000007f     ................
   173dc:	f8000000 ffffffff ffffffff 0000007f     ................
   173ec:	f8000000 ffffffff ffffffff 0000007f     ................
   173fc:	f8000000 ffffffff ffffffff 0000007f     ................
   1740c:	f8000000 ffffffff ffffffff 0000007f     ................
   1741c:	f8000000 ffffffff ffffffff 0000007f     ................
   1742c:	f8000000 ffffffff ffffffff 0000007f     ................
   1743c:	f8000000 ffffffff ffffffff 0000007f     ................
   1744c:	f8000000 ffffffff ffffffff 0000007f     ................
   1745c:	f8000000 ffffffff ffffffff 0000007f     ................
   1746c:	f8000000 ffffffff ffffffff 0000007f     ................
   1747c:	f8000000 ffffffff ffffffff 0000007f     ................
   1748c:	f8000000 ffffffff ffffffff 0000007f     ................
   1749c:	f8000000 ffffffff ffffffff 0000007f     ................
	...
   17560:	fffc0000 ffffffff 0000007f 00000000     ................
   17570:	fffc0000 ffffffff 0000007f 00000000     ................
   17580:	fffc0000 ffffffff 0000007f 00000000     ................
   17590:	fffc0000 ffffffff 0000007f 00000000     ................
   175a0:	fffc0000 ffffffff 0000007f 00000000     ................
   175b0:	fffc0000 ffffffff 0000007f 00000000     ................
   175c0:	fffc0000 ffffffff 0000007f 00000000     ................
   175d0:	fffc0000 ffffffff 0000007f 00000000     ................
   175e0:	fffc0000 ffffffff 0000007f 00000000     ................
   175f0:	fffc0000 ffffffff 0000007f 00000000     ................
   17600:	fffc0000 ffffffff 0000007f 00000000     ................
   17610:	fffc0000 ffffffff 0000007f 00000000     ................
   17620:	fffc0000 ffffffff 0000007f 00000000     ................
   17630:	fffc0000 ffffffff 0000007f 00000000     ................
   17640:	ff800000 ffffffff 0000007f 00000000     ................
   17650:	ffc00000 00000000 00000000 00000000     ................
   17660:	3fe00000 00000000 00000000 00000000     ...?............
   17670:	3fe00000 00000000 00000000 00000000     ...?............
   17680:	1ff00000 00000000 00000000 00000000     ................
   17690:	1ff80000 00000000 00000000 00000000     ................
   176a0:	0ff80000 00000000 00000000 00000000     ................
   176b0:	0ffc0000 00000000 00000000 00000000     ................
   176c0:	0ffc0000 00000000 00000000 00000000     ................
   176d0:	0ffc0000 00000000 00000000 00000000     ................
   176e0:	0ffe0000 00000000 00000000 00000000     ................
   176f0:	0ffe0000 00000000 00000000 00000000     ................
   17700:	0ffe0000 00000000 00000000 00000000     ................
   17710:	1ffe0000 00000000 00000000 00000000     ................
   17720:	1ffe0000 00000000 00000000 00000000     ................
   17730:	3ffe0000 00000000 00000000 00000000     ...?............
   17740:	fffe0000 00000000 00000000 00000000     ................
   17750:	fffe0000 ffffffff 0000007f 00000000     ................
   17760:	fffe0000 ffffffff 0000007f 00000000     ................
   17770:	fffe0000 ffffffff 0000007f 00000000     ................
   17780:	fffc0000 ffffffff 0000007f 00000000     ................
   17790:	fffc0000 ffffffff 0000007f 00000000     ................
   177a0:	fffc0000 ffffffff 0000007f 00000000     ................
   177b0:	fff80000 ffffffff 0000007f 00000000     ................
   177c0:	fff80000 ffffffff 0000007f 00000000     ................
   177d0:	fff00000 ffffffff 0000007f 00000000     ................
   177e0:	ffe00000 ffffffff 0000007f 00000000     ................
   177f0:	ffc00000 ffffffff 0000007f 00000000     ................
   17800:	ff800000 ffffffff 0000007f 00000000     ................
   17810:	fe000000 ffffffff 0000007f 00000000     ................
   17820:	ff000000 ffffffff 0000007f 00000000     ................
   17830:	ff800000 ffffffff 0000007f 00000000     ................
   17840:	ffc00000 00000000 00000000 00000000     ................
   17850:	7fe00000 00000000 00000000 00000000     ................
   17860:	3ff00000 00000000 00000000 00000000     ...?............
   17870:	1ff00000 00000000 00000000 00000000     ................
   17880:	1ff80000 00000000 00000000 00000000     ................
   17890:	0ff80000 00000000 00000000 00000000     ................
   178a0:	0ffc0000 00000000 00000000 00000000     ................
   178b0:	0ffc0000 00000000 00000000 00000000     ................
   178c0:	0ffc0000 00000000 00000000 00000000     ................
   178d0:	0ffe0000 00000000 00000000 00000000     ................
   178e0:	0ffe0000 00000000 00000000 00000000     ................
   178f0:	0ffe0000 00000000 00000000 00000000     ................
   17900:	1ffe0000 00000000 00000000 00000000     ................
   17910:	1ffe0000 00000000 00000000 00000000     ................
   17920:	3ffe0000 00000000 00000000 00000000     ...?............
   17930:	7ffe0000 00000000 00000000 00000000     ................
   17940:	fffe0000 ffffffff 0000007f 00000000     ................
   17950:	fffe0000 ffffffff 0000007f 00000000     ................
   17960:	fffe0000 ffffffff 0000007f 00000000     ................
   17970:	fffc0000 ffffffff 0000007f 00000000     ................
   17980:	fffc0000 ffffffff 0000007f 00000000     ................
   17990:	fffc0000 ffffffff 0000007f 00000000     ................
   179a0:	fff80000 ffffffff 0000007f 00000000     ................
   179b0:	fff80000 ffffffff 0000007f 00000000     ................
   179c0:	fff00000 ffffffff 0000007f 00000000     ................
   179d0:	ffe00000 ffffffff 0000007f 00000000     ................
   179e0:	ffc00000 ffffffff 0000007f 00000000     ................
   179f0:	ff800000 ffffffff 0000007f 00000000     ................
   17a00:	fe000000 ffffffff 0000007f 00000000     ................
   17a10:	f0000000 ffffffff 0000007f 00000000     ................
   17a20:	00000000 fffffffe 0000007f 00000000     ................
	...
   17ad0:	fffc0000 ffffffff 0000007f 00000000     ................
   17ae0:	fffc0000 ffffffff 0000007f 00000000     ................
   17af0:	fffc0000 ffffffff 0000007f 00000000     ................
   17b00:	fffc0000 ffffffff 0000007f 00000000     ................
   17b10:	fffc0000 ffffffff 0000007f 00000000     ................
   17b20:	fffc0000 ffffffff 0000007f 00000000     ................
   17b30:	fffc0000 ffffffff 0000007f 00000000     ................
   17b40:	fffc0000 ffffffff 0000007f 00000000     ................
   17b50:	fffc0000 ffffffff 0000007f 00000000     ................
   17b60:	fffc0000 ffffffff 0000007f 00000000     ................
   17b70:	fffc0000 ffffffff 0000007f 00000000     ................
   17b80:	fffc0000 ffffffff 0000007f 00000000     ................
   17b90:	fffc0000 ffffffff 0000007f 00000000     ................
   17ba0:	fffc0000 ffffffff 0000007f 00000000     ................
   17bb0:	ff000000 ffffffff 0000007f 00000000     ................
   17bc0:	ff800000 00000000 00000000 00000000     ................
   17bd0:	7fc00000 00000000 00000000 00000000     ................
   17be0:	3fe00000 00000000 00000000 00000000     ...?............
   17bf0:	1ff00000 00000000 00000000 00000000     ................
   17c00:	1ff00000 00000000 00000000 00000000     ................
   17c10:	0ff80000 00000000 00000000 00000000     ................
   17c20:	0ff80000 00000000 00000000 00000000     ................
   17c30:	0ffc0000 00000000 00000000 00000000     ................
   17c40:	0ffc0000 00000000 00000000 00000000     ................
   17c50:	0ffc0000 00000000 00000000 00000000     ................
   17c60:	0ffe0000 00000000 00000000 00000000     ................
   17c70:	0ffe0000 00000000 00000000 00000000     ................
   17c80:	0ffe0000 00000000 00000000 00000000     ................
   17c90:	1ffe0000 00000000 00000000 00000000     ................
   17ca0:	1ffe0000 00000000 00000000 00000000     ................
   17cb0:	3ffe0000 00000000 00000000 00000000     ...?............
   17cc0:	fffe0000 00000000 00000000 00000000     ................
   17cd0:	fffe0000 ffffffff 0000007f 00000000     ................
   17ce0:	fffe0000 ffffffff 0000007f 00000000     ................
   17cf0:	fffe0000 ffffffff 0000007f 00000000     ................
   17d00:	fffc0000 ffffffff 0000007f 00000000     ................
   17d10:	fffc0000 ffffffff 0000007f 00000000     ................
   17d20:	fffc0000 ffffffff 0000007f 00000000     ................
   17d30:	fff80000 ffffffff 0000007f 00000000     ................
   17d40:	fff00000 ffffffff 0000007f 00000000     ................
   17d50:	fff00000 ffffffff 0000007f 00000000     ................
   17d60:	ffe00000 ffffffff 0000007f 00000000     ................
   17d70:	ffc00000 ffffffff 0000007f 00000000     ................
   17d80:	ff000000 ffffffff 0000007f 00000000     ................
   17d90:	fc000000 ffffffff 0000007f 00000000     ................
   17da0:	e0000000 ffffffff 0000007f 00000000     ................
	...
   17e44:	0003ff80 00000000 00000000 00000000     ................
   17e54:	007ffffc 00000000 00000000 00000000     ................
   17e64:	03ffffff 00000000 00000000 e0000000     ................
   17e74:	0fffffff 00000000 00000000 f0000000     ................
   17e84:	1fffffff 00000000 00000000 fc000000     ................
   17e94:	7fffffff 00000000 00000000 fe000000     ................
   17ea4:	ffffffff 00000000 00000000 ff000000     ................
   17eb4:	ffffffff 00000001 00000000 ff800000     ................
   17ec4:	ffffffff 00000003 00000000 ffc00000     ................
   17ed4:	ffffffff 00000007 00000000 ffe00000     ................
   17ee4:	ffffffff 0000000f 00000000 ffe00000     ................
   17ef4:	ffffffff 0000000f 00000000 fff00000     ................
   17f04:	ffffffff 0000001f 00000000 fff00000     ................
   17f14:	ffffffff 0000001f 00000000 fff80000     ................
   17f24:	ffff87ff 0000003f 00000000 fff80000     ....?...........
   17f34:	ffe0000f 0000003f 00000000 fffc0000     ....?...........
   17f44:	ff000003 0000007f 00000000 fffc0000     ................
   17f54:	fe000000 0000007f 00000000 7ffc0000     ................
   17f64:	fc000000 0000007f 00000000 3ffc0000     ...............?
   17f74:	f8000000 0000007f 00000000 1ffe0000     ................
   17f84:	f0000000 000000ff 00000000 1ffe0000     ................
   17f94:	f0000000 000000ff 00000000 0ffe0000     ................
   17fa4:	e0000000 000000ff 00000000 0ffe0000     ................
   17fb4:	e0000000 000000ff 00000000 0ffe0000     ................
   17fc4:	e0000000 000000ff 00000000 0ffe0000     ................
   17fd4:	e0000000 000000ff 00000000 0ffe0000     ................
   17fe4:	e0000000 000000ff 00000000 0ffe0000     ................
   17ff4:	e0000000 000000ff 00000000 0ffe0000     ................
   18004:	e0000000 000000ff 00000000 1ffe0000     ................
   18014:	f0000000 000000ff 00000000 1ffe0000     ................
   18024:	f0000000 000000ff 00000000 3ffc0000     ...............?
   18034:	f8000000 0000007f 00000000 7ffc0000     ................
   18044:	fc000000 0000007f 00000000 fffc0000     ................
   18054:	fe000000 0000007f 00000000 fffc0000     ................
   18064:	ff800003 0000007f 00000000 fff80000     ................
   18074:	ffe0000f 0000003f 00000000 fff80000     ....?...........
   18084:	ffffffff 0000003f 00000000 fff00000     ....?...........
   18094:	ffffffff 0000001f 00000000 fff00000     ................
   180a4:	ffffffff 0000001f 00000000 ffe00000     ................
   180b4:	ffffffff 0000000f 00000000 ffe00000     ................
   180c4:	ffffffff 0000000f 00000000 ffc00000     ................
   180d4:	ffffffff 00000007 00000000 ff800000     ................
   180e4:	ffffffff 00000003 00000000 ff000000     ................
   180f4:	ffffffff 00000001 00000000 fe000000     ................
   18104:	ffffffff 00000000 00000000 fc000000     ................
   18114:	7fffffff 00000000 00000000 f0000000     ................
   18124:	1fffffff 00000000 00000000 c0000000     ................
   18134:	0fffffff 00000000 00000000 00000000     ................
   18144:	01ffffff 00000000 00000000 00000000     ................
   18154:	007ffff8 00000000 00000000 00000000     ................
   18164:	0003ff00 00000000 00000000 00000000     ................
	...
   18200:	fffc0000 ffffffff 0fffffff 00000000     ................
   18210:	fffc0000 ffffffff 0fffffff 00000000     ................
   18220:	fffc0000 ffffffff 0fffffff 00000000     ................
   18230:	fffc0000 ffffffff 0fffffff 00000000     ................
   18240:	fffc0000 ffffffff 0fffffff 00000000     ................
   18250:	fffc0000 ffffffff 0fffffff 00000000     ................
   18260:	fffc0000 ffffffff 0fffffff 00000000     ................
   18270:	fffc0000 ffffffff 0fffffff 00000000     ................
   18280:	fffc0000 ffffffff 0fffffff 00000000     ................
   18290:	fffc0000 ffffffff 0fffffff 00000000     ................
   182a0:	fffc0000 ffffffff 0fffffff 00000000     ................
   182b0:	fffc0000 ffffffff 0fffffff 00000000     ................
   182c0:	fffc0000 ffffffff 0fffffff 00000000     ................
   182d0:	ff800000 ffffffff 0fffffff 00000000     ................
   182e0:	ffc00000 fe000000 00000007 00000000     ................
   182f0:	7fe00000 fc000000 0000000f 00000000     ................
   18300:	3ff00000 f8000000 0000001f 00000000     ...?............
   18310:	1ff80000 f0000000 0000003f 00000000     ........?.......
   18320:	1ff80000 f0000000 0000003f 00000000     ........?.......
   18330:	0ffc0000 e0000000 0000007f 00000000     ................
   18340:	0ffc0000 e0000000 0000007f 00000000     ................
   18350:	0ffc0000 e0000000 0000007f 00000000     ................
   18360:	0ffe0000 e0000000 000000ff 00000000     ................
   18370:	0ffe0000 e0000000 000000ff 00000000     ................
   18380:	0ffe0000 e0000000 000000ff 00000000     ................
   18390:	0ffe0000 e0000000 000000ff 00000000     ................
   183a0:	1ffe0000 f0000000 000000ff 00000000     ................
   183b0:	1ffe0000 f0000000 000000ff 00000000     ................
   183c0:	3ffe0000 f8000000 000000ff 00000000     ...?............
   183d0:	7ffe0000 fc000000 000000ff 00000000     ................
   183e0:	fffe0000 fe000000 000000ff 00000000     ................
   183f0:	fffe0000 ff800003 000000ff 00000000     ................
   18400:	fffc0000 fff0000f 0000007f 00000000     ................
   18410:	fffc0000 ffffffff 0000007f 00000000     ................
   18420:	fffc0000 ffffffff 0000007f 00000000     ................
   18430:	fff80000 ffffffff 0000003f 00000000     ........?.......
   18440:	fff80000 ffffffff 0000003f 00000000     ........?.......
   18450:	fff00000 ffffffff 0000001f 00000000     ................
   18460:	ffe00000 ffffffff 0000000f 00000000     ................
   18470:	ffe00000 ffffffff 00000007 00000000     ................
   18480:	ffc00000 ffffffff 00000003 00000000     ................
   18490:	ff800000 ffffffff 00000001 00000000     ................
   184a0:	fe000000 ffffffff 00000000 00000000     ................
   184b0:	fc000000 3fffffff 00000000 00000000     .......?........
   184c0:	f0000000 1fffffff 00000000 00000000     ................
   184d0:	80000000 03ffffff 00000000 00000000     ................
   184e0:	00000000 007ffffc 00000000 00000000     ................
   184f0:	00000000 0000fe00 00000000 00000000     ................
	...
   18564:	0003ffc0 00000000 00000000 00000000     ................
   18574:	007ffffe 00000000 00000000 c0000000     ................
   18584:	07ffffff 00000000 00000000 f0000000     ................
   18594:	1fffffff 00000000 00000000 fc000000     ................
   185a4:	7fffffff 00000000 00000000 fe000000     ................
   185b4:	ffffffff 00000000 00000000 ff800000     ................
   185c4:	ffffffff 00000001 00000000 ffc00000     ................
   185d4:	ffffffff 00000007 00000000 ffe00000     ................
   185e4:	ffffffff 00000007 00000000 ffe00000     ................
   185f4:	ffffffff 0000000f 00000000 fff00000     ................
   18604:	ffffffff 0000001f 00000000 fff80000     ................
   18614:	ffffffff 0000003f 00000000 fff80000     ....?...........
   18624:	ffffffff 0000003f 00000000 fffc0000     ....?...........
   18634:	ffffffff 0000007f 00000000 fffc0000     ................
   18644:	ffff87ff 0000007f 00000000 fffc0000     ................
   18654:	ffe0000f 0000007f 00000000 fffe0000     ................
   18664:	ff000001 000000ff 00000000 fffe0000     ................
   18674:	fe000000 000000ff 00000000 3ffe0000     ...............?
   18684:	f8000000 000000ff 00000000 3ffe0000     ...............?
   18694:	f8000000 000000ff 00000000 1ffe0000     ................
   186a4:	f0000000 000000ff 00000000 1ffe0000     ................
   186b4:	f0000000 000000ff 00000000 0ffe0000     ................
   186c4:	e0000000 000000ff 00000000 0ffe0000     ................
   186d4:	e0000000 000000ff 00000000 0ffe0000     ................
   186e4:	e0000000 000000ff 00000000 0ffe0000     ................
   186f4:	e0000000 000000ff 00000000 0ffc0000     ................
   18704:	e0000000 0000007f 00000000 0ffc0000     ................
   18714:	e0000000 0000007f 00000000 0ffc0000     ................
   18724:	f0000000 0000007f 00000000 1ff80000     ................
   18734:	f0000000 0000003f 00000000 1ff00000     ....?...........
   18744:	f0000000 0000001f 00000000 3ff00000     ...............?
   18754:	f8000000 0000001f 00000000 7fe00000     ................
   18764:	fc000000 0000000f 00000000 ffc00000     ................
   18774:	fe000000 00000007 00000000 ff800000     ................
   18784:	ffffffff 0fffffff 00000000 fff00000     ................
   18794:	ffffffff 0fffffff 00000000 fffc0000     ................
   187a4:	ffffffff 0fffffff 00000000 fffc0000     ................
   187b4:	ffffffff 0fffffff 00000000 fffc0000     ................
   187c4:	ffffffff 0fffffff 00000000 fffc0000     ................
   187d4:	ffffffff 0fffffff 00000000 fffc0000     ................
   187e4:	ffffffff 0fffffff 00000000 fffc0000     ................
   187f4:	ffffffff 0fffffff 00000000 fffc0000     ................
   18804:	ffffffff 0fffffff 00000000 fffc0000     ................
   18814:	ffffffff 0fffffff 00000000 fffc0000     ................
   18824:	ffffffff 0fffffff 00000000 fffc0000     ................
   18834:	ffffffff 0fffffff 00000000 fffc0000     ................
   18844:	ffffffff 0fffffff 00000000 fffc0000     ................
   18854:	ffffffff 0fffffff 00000000 00000000     ................
	...
   18920:	fffc0000 ffffffff 0000007f 00000000     ................
   18930:	fffc0000 ffffffff 0000007f 00000000     ................
   18940:	fffc0000 ffffffff 0000007f 00000000     ................
   18950:	fffc0000 ffffffff 0000007f 00000000     ................
   18960:	fffc0000 ffffffff 0000007f 00000000     ................
   18970:	fffc0000 ffffffff 0000007f 00000000     ................
   18980:	fffc0000 ffffffff 0000007f 00000000     ................
   18990:	fffc0000 ffffffff 0000007f 00000000     ................
   189a0:	fffc0000 ffffffff 0000007f 00000000     ................
   189b0:	fffc0000 ffffffff 0000007f 00000000     ................
   189c0:	fffc0000 ffffffff 0000007f 00000000     ................
   189d0:	fffc0000 ffffffff 0000007f 00000000     ................
   189e0:	fffc0000 ffffffff 0000007f 00000000     ................
   189f0:	ff000000 ffffffff 0000007f 00000000     ................
   18a00:	ff800000 00000007 00000000 00000000     ................
   18a10:	ffe00000 00000003 00000000 00000000     ................
   18a20:	fff00000 00000001 00000000 00000000     ................
   18a30:	fff00000 00000000 00000000 00000000     ................
   18a40:	fff80000 00000000 00000000 00000000     ................
   18a50:	fffc0000 00000000 00000000 00000000     ................
   18a60:	7ffc0000 00000000 00000000 00000000     ................
   18a70:	7ffc0000 00000000 00000000 00000000     ................
   18a80:	7ffe0000 00000000 00000000 00000000     ................
   18a90:	7ffe0000 00000000 00000000 00000000     ................
   18aa0:	7ffe0000 00000000 00000000 00000000     ................
   18ab0:	7ffe0000 00000000 00000000 00000000     ................
   18ac0:	7ffe0000 00000000 00000000 00000000     ................
   18ad0:	7ffe0000 00000000 00000000 00000000     ................
   18ae0:	7ffe0000 00000000 00000000 00000000     ................
   18af0:	7ffc0000 00000000 00000000 00000000     ................
	...
   18b44:	07c00000 00000000 00000000 00000000     ................
   18b54:	1fc00006 00000000 00000000 f0000000     ................
   18b64:	7fc0007f 00000000 00000000 fc000000     ................
   18b74:	ffc001ff 00000000 00000000 fe000000     ................
   18b84:	ffc003ff 00000001 00000000 ff800000     ................
   18b94:	ffc007ff 00000003 00000000 ffc00000     ................
   18ba4:	ffc00fff 00000007 00000000 ffc00000     ................
   18bb4:	ffc01fff 0000000f 00000000 ffe00000     ................
   18bc4:	ffc01fff 0000000f 00000000 fff00000     ................
   18bd4:	ffc03fff 0000001f 00000000 fff00000     .?..............
   18be4:	ffc03fff 0000001f 00000000 fff80000     .?..............
   18bf4:	ffc07fff 0000003f 00000000 fff80000     ....?...........
   18c04:	ffc07fff 0000003f 00000000 fffc0000     ....?...........
   18c14:	ff00ffff 0000007f 00000000 fffc0000     ................
   18c24:	fc00ffff 0000007f 00000000 7ffc0000     ................
   18c34:	f800fffc 0000007f 00000000 1ffc0000     ................
   18c44:	f001fff0 0000007f 00000000 0ffe0000     ................
   18c54:	e001ffe0 000000ff 00000000 0ffe0000     ................
   18c64:	e001ffe0 000000ff 00000000 07fe0000     ................
   18c74:	c001ffc0 000000ff 00000000 07fe0000     ................
   18c84:	c003ffc0 000000ff 00000000 07fe0000     ................
   18c94:	c003ffc0 000000ff 00000000 07fe0000     ................
   18ca4:	c003ff80 000000ff 00000000 07fe0000     ................
   18cb4:	c003ff80 000000ff 00000000 07fe0000     ................
   18cc4:	c007ff80 000000ff 00000000 07fe0000     ................
   18cd4:	c007ff80 000000ff 00000000 0ffe0000     ................
   18ce4:	c007ff80 000000ff 00000000 0ffe0000     ................
   18cf4:	e00fff00 000000ff 00000000 1ffe0000     ................
   18d04:	e00fff00 000000ff 00000000 3ffc0000     ...............?
   18d14:	f01fff00 0000007f 00000000 fffc0000     ................
   18d24:	f83fff00 0000007f 00000000 fffc0000     ..?.............
   18d34:	fffffe03 0000007f 00000000 fffc0000     ................
   18d44:	fffffe03 0000007f 00000000 fff80000     ................
   18d54:	fffffe03 0000003f 00000000 fff80000     ....?...........
   18d64:	fffffc03 0000003f 00000000 fff00000     ....?...........
   18d74:	fffffc03 0000003f 00000000 fff00000     ....?...........
   18d84:	fffff803 0000001f 00000000 ffe00000     ................
   18d94:	fffff803 0000000f 00000000 ffe00000     ................
   18da4:	fffff003 0000000f 00000000 ffc00000     ................
   18db4:	fffff003 00000007 00000000 ff800000     ................
   18dc4:	ffffe003 00000003 00000000 ff000000     ................
   18dd4:	ffffc003 00000001 00000000 fe000000     ................
   18de4:	ffff8003 00000000 00000000 f8000000     ................
   18df4:	7ffe0003 00000000 00000000 c0000000     ................
   18e04:	0ff80003 00000000 00000000 00000000     ................
	...
   18e50:	0ffc0000 00000000 00000000 00000000     ................
   18e60:	0ffc0000 00000000 00000000 00000000     ................
   18e70:	0ffc0000 00000000 00000000 00000000     ................
   18e80:	0ffc0000 00000000 00000000 00000000     ................
   18e90:	0ffc0000 00000000 00000000 00000000     ................
   18ea0:	0ffc0000 00000000 00000000 00000000     ................
   18eb0:	0ffc0000 00000000 00000000 00000000     ................
   18ec0:	0ffc0000 00000000 00000000 00000000     ................
   18ed0:	ffffffe0 0fffffff 00000000 00000000     ................
   18ee0:	ffffffe0 ffffffff 00000000 00000000     ................
   18ef0:	ffffffe0 ffffffff 00000003 00000000     ................
   18f00:	ffffffe0 ffffffff 00000007 00000000     ................
   18f10:	ffffffe0 ffffffff 0000001f 00000000     ................
   18f20:	ffffffe0 ffffffff 0000001f 00000000     ................
   18f30:	ffffffe0 ffffffff 0000003f 00000000     ........?.......
   18f40:	ffffffe0 ffffffff 0000003f 00000000     ........?.......
   18f50:	ffffffe0 ffffffff 0000007f 00000000     ................
   18f60:	ffffffe0 ffffffff 0000007f 00000000     ................
   18f70:	ffffffe0 ffffffff 0000007f 00000000     ................
   18f80:	ffffffe0 ffffffff 000000ff 00000000     ................
   18f90:	ffffffe0 ffffffff 000000ff 00000000     ................
   18fa0:	ffffffe0 ffffffff 000000ff 00000000     ................
   18fb0:	0ffc0000 ff000000 000000ff 00000000     ................
   18fc0:	0ffc0000 f0000000 000000ff 00000000     ................
   18fd0:	0ffc0000 f0000000 000000ff 00000000     ................
   18fe0:	0ffc0000 e0000000 000000ff 00000000     ................
   18ff0:	0ffc0000 e0000000 000000ff 00000000     ................
   19000:	0ffc0000 e0000000 000000ff 00000000     ................
   19010:	0ffc0000 e0000000 000000ff 00000000     ................
   19020:	0ffc0000 e0000000 0000007f 00000000     ................
   19030:	0ffc0000 e0000000 0000007f 00000000     ................
   19040:	0ffc0000 e0000000 0000007f 00000000     ................
	...
   190c0:	fffc0000 00ffffff 00000000 00000000     ................
   190d0:	fffc0000 1fffffff 00000000 00000000     ................
   190e0:	fffc0000 7fffffff 00000000 00000000     ................
   190f0:	fffc0000 ffffffff 00000001 00000000     ................
   19100:	fffc0000 ffffffff 00000007 00000000     ................
   19110:	fffc0000 ffffffff 0000000f 00000000     ................
   19120:	fffc0000 ffffffff 0000001f 00000000     ................
   19130:	fffc0000 ffffffff 0000001f 00000000     ................
   19140:	fffc0000 ffffffff 0000003f 00000000     ........?.......
   19150:	fffc0000 ffffffff 0000003f 00000000     ........?.......
   19160:	fffc0000 ffffffff 0000007f 00000000     ................
   19170:	fffc0000 ffffffff 0000007f 00000000     ................
   19180:	fffc0000 ffffffff 0000007f 00000000     ................
   19190:	fffc0000 ffffffff 000000ff 00000000     ................
   191a0:	fffc0000 ffffffff 000000ff 00000000     ................
   191b0:	00000000 fe000000 000000ff 00000000     ................
   191c0:	00000000 f8000000 000000ff 00000000     ................
   191d0:	00000000 f0000000 000000ff 00000000     ................
   191e0:	00000000 f0000000 000000ff 00000000     ................
   191f0:	00000000 e0000000 000000ff 00000000     ................
   19200:	00000000 e0000000 000000ff 00000000     ................
   19210:	00000000 e0000000 000000ff 00000000     ................
   19220:	00000000 e0000000 000000ff 00000000     ................
   19230:	00000000 e0000000 0000007f 00000000     ................
   19240:	00000000 e0000000 0000007f 00000000     ................
   19250:	00000000 e0000000 0000007f 00000000     ................
   19260:	00000000 f0000000 0000003f 00000000     ........?.......
   19270:	00000000 f0000000 0000003f 00000000     ........?.......
   19280:	00000000 f0000000 0000001f 00000000     ................
   19290:	00000000 f8000000 0000001f 00000000     ................
   192a0:	00000000 fc000000 0000000f 00000000     ................
   192b0:	00000000 fe000000 00000007 00000000     ................
   192c0:	fffc0000 ffffffff 00000003 00000000     ................
   192d0:	fffc0000 ffffffff 0000007f 00000000     ................
   192e0:	fffc0000 ffffffff 0000007f 00000000     ................
   192f0:	fffc0000 ffffffff 0000007f 00000000     ................
   19300:	fffc0000 ffffffff 0000007f 00000000     ................
   19310:	fffc0000 ffffffff 0000007f 00000000     ................
   19320:	fffc0000 ffffffff 0000007f 00000000     ................
   19330:	fffc0000 ffffffff 0000007f 00000000     ................
   19340:	fffc0000 ffffffff 0000007f 00000000     ................
   19350:	fffc0000 ffffffff 0000007f 00000000     ................
   19360:	fffc0000 ffffffff 0000007f 00000000     ................
   19370:	fffc0000 ffffffff 0000007f 00000000     ................
   19380:	fffc0000 ffffffff 0000007f 00000000     ................
   19390:	fffc0000 ffffffff 0000007f 00000000     ................
	...
   19410:	001c0000 00000000 00000000 00000000     ................
   19420:	00fc0000 00000000 00000000 00000000     ................
   19430:	07fc0000 00000000 00000000 00000000     ................
   19440:	1ffc0000 00000000 00000000 00000000     ................
   19450:	fffc0000 00000000 00000000 00000000     ................
   19460:	fffc0000 00000007 00000000 00000000     ................
   19470:	fffc0000 0000003f 00000000 00000000     ....?...........
   19480:	fffc0000 000001ff 00000000 00000000     ................
   19490:	fffc0000 00000fff 00000000 00000000     ................
   194a0:	fffc0000 00007fff 00000000 00000000     ................
   194b0:	fffc0000 0003ffff 00000000 00000000     ................
   194c0:	fffc0000 001fffff 00000000 00000000     ................
   194d0:	fffc0000 00ffffff 00000000 00000000     ................
   194e0:	fffc0000 07ffffff 00000000 00000000     ................
   194f0:	fffc0000 3fffffff 00000000 00000000     .......?........
   19500:	ffc00000 ffffffff 00000001 00000000     ................
   19510:	fe000000 ffffffff 0000000f 00000000     ................
   19520:	e0000000 ffffffff 0000007f 00000000     ................
   19530:	00000000 ffffffff 0000007f 00000000     ................
   19540:	00000000 fffffff0 0000007f 00000000     ................
   19550:	00000000 ffffff00 0000007f 00000000     ................
   19560:	00000000 fffff800 0000007f 00000000     ................
   19570:	00000000 ffff8000 0000007f 00000000     ................
   19580:	00000000 fffc0000 0000007f 00000000     ................
   19590:	00000000 ffe00000 0000007f 00000000     ................
   195a0:	00000000 fffc0000 0000007f 00000000     ................
   195b0:	00000000 ffffc000 0000007f 00000000     ................
   195c0:	00000000 fffff800 0000007f 00000000     ................
   195d0:	00000000 ffffff80 0000007f 00000000     ................
   195e0:	00000000 fffffff8 0000007f 00000000     ................
   195f0:	00000000 ffffffff 0000007f 00000000     ................
   19600:	f0000000 ffffffff 0000003f 00000000     ........?.......
   19610:	fe000000 ffffffff 00000007 00000000     ................
   19620:	ffe00000 ffffffff 00000000 00000000     ................
   19630:	fffc0000 1fffffff 00000000 00000000     ................
   19640:	fffc0000 03ffffff 00000000 00000000     ................
   19650:	fffc0000 007fffff 00000000 00000000     ................
   19660:	fffc0000 001fffff 00000000 00000000     ................
   19670:	fffc0000 0003ffff 00000000 00000000     ................
   19680:	fffc0000 00007fff 00000000 00000000     ................
   19690:	fffc0000 00000fff 00000000 00000000     ................
   196a0:	fffc0000 000001ff 00000000 00000000     ................
   196b0:	fffc0000 0000003f 00000000 00000000     ....?...........
   196c0:	fffc0000 00000007 00000000 00000000     ................
   196d0:	fffc0000 00000000 00000000 00000000     ................
   196e0:	1ffc0000 00000000 00000000 00000000     ................
   196f0:	03fc0000 00000000 00000000 00000000     ................
   19700:	007c0000 00000000 00000000 00000000     ..|.............
   19710:	000c0000 00000000 00000000 00000000     ................
	...
   19740:	00040000 00000000 00000000 00000000     ................
   19750:	007c0000 00000000 00000000 00000000     ..|.............
   19760:	07fc0000 00000000 00000000 00000000     ................
   19770:	7ffc0000 00000000 00000000 00000000     ................
   19780:	fffc0000 00000003 00000000 00000000     ................
   19790:	fffc0000 0000003f 00000000 00000000     ....?...........
   197a0:	fffc0000 000003ff 00000000 00000000     ................
   197b0:	fffc0000 00003fff 00000000 00000000     .....?..........
   197c0:	fffc0000 0003ffff 00000000 00000000     ................
   197d0:	fffc0000 003fffff 00000000 00000000     ......?.........
   197e0:	fffc0000 03ffffff 00000000 00000000     ................
   197f0:	fffc0000 3fffffff 00000000 00000000     .......?........
   19800:	fffc0000 ffffffff 00000003 00000000     ................
   19810:	fffc0000 ffffffff 0000001f 00000000     ................
   19820:	fff00000 ffffffff 0000007f 00000000     ................
   19830:	fe000000 ffffffff 0000007f 00000000     ................
   19840:	c0000000 ffffffff 0000007f 00000000     ................
   19850:	00000000 fffffff8 0000007f 00000000     ................
   19860:	00000000 ffffff00 0000007f 00000000     ................
   19870:	00000000 ffffe000 0000007f 00000000     ................
   19880:	00000000 fffe0000 0000007f 00000000     ................
   19890:	00000000 fffc0000 0000007f 00000000     ................
   198a0:	00000000 ffffc000 0000007f 00000000     ................
   198b0:	00000000 fffff800 0000007f 00000000     ................
   198c0:	00000000 ffffff00 0000007f 00000000     ................
   198d0:	00000000 fffffff0 0000007f 00000000     ................
   198e0:	00000000 fffffffe 0000001f 00000000     ................
   198f0:	e0000000 ffffffff 00000001 00000000     ................
   19900:	fc000000 3fffffff 00000000 00000000     .......?........
   19910:	ffc00000 07ffffff 00000000 00000000     ................
   19920:	fff80000 007fffff 00000000 00000000     ................
   19930:	fffc0000 000fffff 00000000 00000000     ................
   19940:	fffc0000 0001ffff 00000000 00000000     ................
   19950:	fffc0000 00001fff 00000000 00000000     ................
   19960:	fffc0000 000003ff 00000000 00000000     ................
   19970:	fffc0000 0000007f 00000000 00000000     ................
   19980:	fffc0000 000000ff 00000000 00000000     ................
   19990:	fffc0000 000007ff 00000000 00000000     ................
   199a0:	fffc0000 00003fff 00000000 00000000     .....?..........
   199b0:	fffc0000 0003ffff 00000000 00000000     ................
   199c0:	fffc0000 001fffff 00000000 00000000     ................
   199d0:	fff00000 00ffffff 00000000 00000000     ................
   199e0:	ff800000 0fffffff 00000000 00000000     ................
   199f0:	fc000000 7fffffff 00000000 00000000     ................
   19a00:	c0000000 ffffffff 00000003 00000000     ................
   19a10:	00000000 fffffffe 0000001f 00000000     ................
   19a20:	00000000 ffffffe0 0000007f 00000000     ................
   19a30:	00000000 ffffff00 0000007f 00000000     ................
   19a40:	00000000 fffff000 0000007f 00000000     ................
   19a50:	00000000 ffff8000 0000007f 00000000     ................
   19a60:	00000000 fff80000 0000007f 00000000     ................
   19a70:	00000000 ffff0000 0000007f 00000000     ................
   19a80:	00000000 fffff800 0000007f 00000000     ................
   19a90:	00000000 ffffff80 0000007f 00000000     ................
   19aa0:	00000000 fffffffc 0000007f 00000000     ................
   19ab0:	e0000000 ffffffff 0000007f 00000000     ................
   19ac0:	ff000000 ffffffff 0000007f 00000000     ................
   19ad0:	fff80000 ffffffff 0000007f 00000000     ................
   19ae0:	fffc0000 ffffffff 0000001f 00000000     ................
   19af0:	fffc0000 ffffffff 00000001 00000000     ................
   19b00:	fffc0000 1fffffff 00000000 00000000     ................
   19b10:	fffc0000 01ffffff 00000000 00000000     ................
   19b20:	fffc0000 001fffff 00000000 00000000     ................
   19b30:	fffc0000 0001ffff 00000000 00000000     ................
   19b40:	fffc0000 00001fff 00000000 00000000     ................
   19b50:	fffc0000 000001ff 00000000 00000000     ................
   19b60:	fffc0000 0000003f 00000000 00000000     ....?...........
   19b70:	fffc0000 00000003 00000000 00000000     ................
   19b80:	3ffc0000 00000000 00000000 00000000     ...?............
   19b90:	03fc0000 00000000 00000000 00000000     ................
   19ba0:	003c0000 00000000 00000000 00000000     ..<.............
   19bb0:	00040000 00000000 00000000 00000000     ................
	...
   19be8:	00000040 00000000 00040000 00000000     @...............
   19bf8:	00000070 00000000 001c0000 00000000     p...............
   19c08:	00000078 00000000 007c0000 00000000     x.........|.....
   19c18:	0000007e 00000000 00fc0000 80000000     ~...............
   19c28:	0000007f 00000000 03fc0000 c0000000     ................
   19c38:	0000007f 00000000 0ffc0000 f0000000     ................
   19c48:	0000007f 00000000 3ffc0000 fc000000     ...........?....
   19c58:	0000007f 00000000 7ffc0000 fe000000     ................
   19c68:	0000007f 00000000 fffc0000 ff800001     ................
   19c78:	0000007f 00000000 fffc0000 ffe00007     ................
   19c88:	0000007f 00000000 fffc0000 fff8000f     ................
   19c98:	0000007f 00000000 fffc0000 fffc003f     ............?...
   19ca8:	0000007f 00000000 fffc0000 ffff00ff     ................
   19cb8:	0000007f 00000000 fffc0000 ffffc3ff     ................
   19cc8:	0000007f 00000000 fffc0000 ffffe7ff     ................
   19cd8:	0000007f 00000000 fff80000 ffffffff     ................
   19ce8:	0000001f 00000000 ffe00000 ffffffff     ................
   19cf8:	00000007 00000000 ffc00000 ffffffff     ................
   19d08:	00000003 00000000 ff000000 ffffffff     ................
	...
   19d20:	fc000000 3fffffff 00000000 00000000     .......?........
   19d30:	f0000000 0fffffff 00000000 00000000     ................
   19d40:	c0000000 03ffffff 00000000 00000000     ................
   19d50:	80000000 01ffffff 00000000 00000000     ................
   19d60:	00000000 007ffffe 00000000 00000000     ................
   19d70:	00000000 007ffffe 00000000 00000000     ................
   19d80:	80000000 01ffffff 00000000 00000000     ................
   19d90:	e0000000 07ffffff 00000000 00000000     ................
   19da0:	f8000000 1fffffff 00000000 00000000     ................
   19db0:	fc000000 3fffffff 00000000 00000000     .......?........
   19dc0:	ff000000 ffffffff 00000000 00000000     ................
   19dd0:	ffc00000 ffffffff 00000003 00000000     ................
   19de0:	fff00000 ffffffff 0000000f 00000000     ................
   19df0:	fffc0000 ffffffff 0000001f 00000000     ................
   19e00:	fffc0000 ffffe7ff 0000007f 00000000     ................
   19e10:	fffc0000 ffff81ff 0000007f 00000000     ................
   19e20:	fffc0000 fffe007f 0000007f 00000000     ................
   19e30:	fffc0000 fffc003f 0000007f 00000000     ....?...........
   19e40:	fffc0000 fff0000f 0000007f 00000000     ................
   19e50:	fffc0000 ffc00003 0000007f 00000000     ................
   19e60:	fffc0000 ff800001 0000007f 00000000     ................
   19e70:	7ffc0000 fe000000 0000007f 00000000     ................
   19e80:	1ffc0000 f8000000 0000007f 00000000     ................
   19e90:	07fc0000 e0000000 0000007f 00000000     ................
   19ea0:	03fc0000 c0000000 0000007f 00000000     ................
   19eb0:	00fc0000 00000000 0000007f 00000000     ................
   19ec0:	003c0000 00000000 0000007c 00000000     ..<.....|.......
   19ed0:	001c0000 00000000 00000078 00000000     ........x.......
   19ee0:	00040000 00000000 00000060 00000000     ........`.......
	...
   19ef8:	00000040 00000000 00040000 00000000     @...............
	...
   19f10:	001c0000 00000000 00000000 00000000     ................
   19f20:	00fc0000 00000000 00000000 00000000     ................
   19f30:	07fc0000 00000000 00000000 00000000     ................
   19f40:	3ffc0000 00000000 00000000 00000000     ...?............
   19f50:	fffc0000 00000001 00000000 00000000     ................
   19f60:	fffc0000 0000000f 0ffc0000 00000000     ................
   19f70:	fffc0000 0000007f 0ffc0000 00000000     ................
   19f80:	fffc0000 000003ff 1ffc0000 00000000     ................
   19f90:	fffc0000 00001fff 1ffc0000 00000000     ................
   19fa0:	fffc0000 0000ffff 1ffc0000 00000000     ................
   19fb0:	fffc0000 0003ffff 1ffc0000 00000000     ................
   19fc0:	fffc0000 001fffff 1ffe0000 00000000     ................
   19fd0:	fffc0000 00ffffff 1ffe0000 00000000     ................
   19fe0:	fffc0000 07ffffff 1ffe0000 00000000     ................
   19ff0:	fffc0000 3fffffff 1fff0000 00000000     .......?........
   1a000:	ffe00000 ffffffff 1fffc001 00000000     ................
   1a010:	ff000000 ffffffff 0ffff00f 00000000     ................
   1a020:	f0000000 ffffffff 0ffffe7f 00000000     ................
   1a030:	80000000 ffffffff 0fffffff 00000000     ................
   1a040:	00000000 fffffffc 07ffffff 00000000     ................
   1a050:	00000000 ffffffc0 07ffffff 00000000     ................
   1a060:	00000000 fffffe00 03ffffff 00000000     ................
   1a070:	00000000 fffff000 01ffffff 00000000     ................
   1a080:	00000000 ffff0000 00ffffff 00000000     ................
   1a090:	00000000 fff80000 007fffff 00000000     ................
   1a0a0:	00000000 ffff0000 001fffff 00000000     ................
   1a0b0:	00000000 ffffe000 000fffff 00000000     ................
   1a0c0:	00000000 fffffe00 0001ffff 00000000     ................
   1a0d0:	00000000 ffffffc0 00007fff 00000000     ................
   1a0e0:	00000000 fffffff8 00000fff 00000000     ................
   1a0f0:	80000000 ffffffff 000001ff 00000000     ................
   1a100:	f0000000 ffffffff 0000003f 00000000     ........?.......
   1a110:	ff000000 ffffffff 00000007 00000000     ................
   1a120:	ffe00000 ffffffff 00000001 00000000     ................
   1a130:	fffc0000 3fffffff 00000000 00000000     .......?........
   1a140:	fffc0000 07ffffff 00000000 00000000     ................
   1a150:	fffc0000 00ffffff 00000000 00000000     ................
   1a160:	fffc0000 001fffff 00000000 00000000     ................
   1a170:	fffc0000 0003ffff 00000000 00000000     ................
   1a180:	fffc0000 00007fff 00000000 00000000     ................
   1a190:	fffc0000 00000fff 00000000 00000000     ................
   1a1a0:	fffc0000 000003ff 00000000 00000000     ................
   1a1b0:	fffc0000 0000007f 00000000 00000000     ................
   1a1c0:	fffc0000 0000000f 00000000 00000000     ................
   1a1d0:	fffc0000 00000001 00000000 00000000     ................
   1a1e0:	3ffc0000 00000000 00000000 00000000     ...?............
   1a1f0:	07fc0000 00000000 00000000 00000000     ................
   1a200:	00fc0000 00000000 00000000 00000000     ................
   1a210:	001c0000 00000000 00000000 00000000     ................
   1a220:	00040000 00000000 00000000 00000000     ................
	...
   1a270:	1ffc0000 c0000000 0000007f 00000000     ................
   1a280:	1ffc0000 f0000000 0000007f 00000000     ................
   1a290:	1ffc0000 f8000000 0000007f 00000000     ................
   1a2a0:	1ffc0000 fc000000 0000007f 00000000     ................
   1a2b0:	1ffc0000 ff000000 0000007f 00000000     ................
   1a2c0:	1ffc0000 ff800000 0000007f 00000000     ................
   1a2d0:	1ffc0000 ffe00000 0000007f 00000000     ................
   1a2e0:	1ffc0000 fff00000 0000007f 00000000     ................
   1a2f0:	1ffc0000 fff80000 0000007f 00000000     ................
   1a300:	1ffc0000 fffe0000 0000007f 00000000     ................
   1a310:	1ffc0000 ffff0000 0000007f 00000000     ................
   1a320:	1ffc0000 ffff8000 0000007f 00000000     ................
   1a330:	1ffc0000 ffffe000 0000007f 00000000     ................
   1a340:	1ffc0000 fffff000 0000007f 00000000     ................
   1a350:	1ffc0000 fffff800 0000007f 00000000     ................
   1a360:	1ffc0000 fffffe00 0000007f 00000000     ................
   1a370:	1ffc0000 ffffff00 0000007f 00000000     ................
   1a380:	1ffc0000 ffffff80 0000007f 00000000     ................
   1a390:	1ffc0000 f7ffffe0 0000007f 00000000     ................
   1a3a0:	1ffc0000 f3fffff0 0000007f 00000000     ................
   1a3b0:	1ffc0000 f0fffff8 0000007f 00000000     ................
   1a3c0:	1ffc0000 f07ffffe 0000007f 00000000     ................
   1a3d0:	1ffc0000 f03fffff 0000007f 00000000     ......?.........
   1a3e0:	9ffc0000 f00fffff 0000007f 00000000     ................
   1a3f0:	fffc0000 f007ffff 0000007f 00000000     ................
   1a400:	fffc0000 f003ffff 0000007f 00000000     ................
   1a410:	fffc0000 f000ffff 0000007f 00000000     ................
   1a420:	fffc0000 f0007fff 0000007f 00000000     ................
   1a430:	fffc0000 f0003fff 0000007f 00000000     .....?..........
   1a440:	fffc0000 f0000fff 0000007f 00000000     ................
   1a450:	fffc0000 f00007ff 0000007f 00000000     ................
   1a460:	fffc0000 f00003ff 0000007f 00000000     ................
   1a470:	fffc0000 f00000ff 0000007f 00000000     ................
   1a480:	fffc0000 f000007f 0000007f 00000000     ................
   1a490:	fffc0000 f000003f 0000007f 00000000     ....?...........
   1a4a0:	fffc0000 f000000f 0000007f 00000000     ................
   1a4b0:	fffc0000 f0000007 0000007f 00000000     ................
   1a4c0:	fffc0000 f0000003 0000007f 00000000     ................
   1a4d0:	fffc0000 f0000000 0000007f 00000000     ................
   1a4e0:	7ffc0000 f0000000 0000007f 00000000     ................
   1a4f0:	3ffc0000 f0000000 0000007f 00000000     ...?............
   1a500:	0ffc0000 f0000000 0000007f 00000000     ................
   1a510:	07fc0000 f0000000 0000007f 00000000     ................
   1a520:	00000000 f0000000 0000007f 00000000     ................
	...
   1a584:	00001ff8 00000000 00000000 00000000     ................
   1a594:	00001ff8 00000000 00000000 00000000     ................
   1a5a4:	00001ff8 00000000 00000000 00000000     ................
   1a5b4:	00001ff8 00000000 00000000 00000000     ................
   1a5c4:	00003ffc 00000000 00000000 00000000     .?..............
   1a5d4:	00003ffc 00000000 00000000 00000000     .?..............
   1a5e4:	00007ffe 00000000 00000000 80000000     ................
   1a5f4:	0001ffff 00000000 00000000 e0000000     ................
   1a604:	0007ffff 00000000 00000000 fffffe00     ................
   1a614:	ffffffff 0000007f 00000000 ffffffe0     ................
   1a624:	ffffffff 000007ff 00000000 fffffff8     ................
   1a634:	ffffffff 00003fff 00000000 fffffffe     .....?..........
   1a644:	ffffffff 00007fff 00000000 ffffffff     ................
   1a654:	ffffffff 0001ffff 80000000 ffffffff     ................
   1a664:	fffffe7f 0003ffff c0000000 ffffffff     ................
   1a674:	fffffc3f 0007ffff e0000000 ffffffff     ?...............
   1a684:	fffffc3f 000fffff f0000000 ffffffff     ?...............
   1a694:	fffff81f 001fffff f0000000 ffffffff     ................
   1a6a4:	ffffe00f 001fffff f8000000 ffffffff     ................
   1a6b4:	ffffc003 003fffff fc000000 ffffffff     ......?.........
   1a6c4:	ffff0000 007fffff fc000000 0fffffff     ................
   1a6d4:	fff00000 007fffff fe000000 000000ff     ................
   1a6e4:	00000000 007fff00 fe000000 0000001f     ................
   1a6f4:	00000000 00fff800 fe000000 0000000f     ................
   1a704:	00000000 00ffe000 ff000000 00000003     ................
   1a714:	00000000 01ffc000 ff000000 00000003     ................
   1a724:	00000000 01ff8000 fc000000 00000001     ................
   1a734:	00000000 007f0000 e0000000 00000000     ................
   1a744:	00000000 000f0000 00000000 00000001     ................
   1a754:	00000000 00020000 00000000 00000000     ................
	...
   1a7fc:	80000000 ffffffff ffffffff 000fffff     ................
   1a80c:	80000000 ffffffff ffffffff 000fffff     ................
   1a81c:	80000000 ffffffff ffffffff 000fffff     ................
   1a82c:	80000000 ffffffff ffffffff 000fffff     ................
   1a83c:	80000000 ffffffff ffffffff 000fffff     ................
   1a84c:	80000000 ffffffff ffffffff 000fffff     ................
   1a85c:	80000000 ffffffff ffffffff 000fffff     ................
   1a86c:	80000000 ffffffff ffffffff 000fffff     ................
	...
   1a920:	00000001 00000000 00020000 e0000000     ................
	...
   1a938:	000f0000 fc000000 00000001 00000000     ................
   1a948:	007f0000 ff000000 00000003 00000000     ................
   1a958:	01ff8000 ff000000 00000007 00000000     ................
   1a968:	01ffc000 fe000000 0000000f 00000000     ................
   1a978:	00ffe000 fe000000 0000003f 00000000     ........?.......
   1a988:	00fff800 fe000000 000000ff 00000000     ................
   1a998:	007fff00 fc000000 0fffffff fff00000     ................
   1a9a8:	007fffff fc000000 ffffffff ffff0000     ................
   1a9b8:	007fffff f8000000 ffffffff ffffc003     ................
   1a9c8:	003fffff f0000000 ffffffff ffffe00f     ..?.............
   1a9d8:	001fffff f0000000 ffffffff fffff81f     ................
   1a9e8:	001fffff e0000000 ffffffff fffffc3f     ............?...
   1a9f8:	000fffff c0000000 ffffffff fffffc3f     ............?...
   1aa08:	0007ffff 80000000 ffffffff fffffe7f     ................
   1aa18:	0003ffff 00000000 ffffffff ffffffff     ................
   1aa28:	0001ffff 00000000 fffffffe ffffffff     ................
   1aa38:	00007fff 00000000 fffffff8 ffffffff     ................
   1aa48:	00003fff 00000000 ffffffe0 ffffffff     .?..............
   1aa58:	000007ff 00000000 fffffe00 ffffffff     ................
   1aa68:	0000007f 00000000 e0000000 0007ffff     ................
	...
   1aa80:	80000000 0001ffff 00000000 00000000     ................
   1aa90:	00000000 00007ffe 00000000 00000000     ................
   1aaa0:	00000000 00003ffc 00000000 00000000     .....?..........
   1aab0:	00000000 00003ffc 00000000 00000000     .....?..........
   1aac0:	00000000 00001ff8 00000000 00000000     ................
   1aad0:	00000000 00001ff8 00000000 00000000     ................
   1aae0:	00000000 00001ff8 00000000 00000000     ................
   1aaf0:	00000000 00001ff8 00000000 00000000     ................
	...
   1ab74:	0003c000 00000000 00000000 00000000     ................
   1ab84:	0003fe00 00000000 00000000 00000000     ................
   1ab94:	0003ff80 00000000 00000000 00000000     ................
   1aba4:	0003ffe0 00000000 00000000 00000000     ................
   1abb4:	0003fff0 00000000 00000000 00000000     ................
   1abc4:	0003fff8 00000000 00000000 00000000     ................
   1abd4:	0003fffc 00000000 00000000 00000000     ................
   1abe4:	0003fffe 00000000 00000000 00000000     ................
   1abf4:	0003ffff 00000000 00000000 00000000     ................
   1ac04:	0003ffff 00000000 00000000 80000000     ................
   1ac14:	0003ffff 00000000 00000000 80000000     ................
   1ac24:	00003fff 00000000 00000000 c0000000     .?..............
   1ac34:	00000fff 00000000 00000000 c0000000     ................
   1ac44:	000003ff 00000000 00000000 c0000000     ................
   1ac54:	000003ff 00000000 00000000 c0000000     ................
   1ac64:	000001ff 00000000 00000000 c0000000     ................
   1ac74:	000001ff 00000000 00000000 c0000000     ................
   1ac84:	000001ff 00000000 00000000 c0000000     ................
   1ac94:	000001ff 00000000 00000000 c0000000     ................
   1aca4:	000001ff 00000000 00000000 c0000000     ................
   1acb4:	000003ff 00000000 00000000 80000000     ................
   1acc4:	000003ff 00000000 00000000 80000000     ................
   1acd4:	000007ff 00000000 00000000 00000000     ................
   1ace4:	00000fff 00000000 00000000 00000000     ................
   1acf4:	00001fff 00000000 00000000 00000000     ................
   1ad04:	00003ffe 00000000 00000000 00000000     .?..............
   1ad14:	00007ffe 00000000 00000000 00000000     ................
   1ad24:	0000fffc 00000000 00000000 00000000     ................
   1ad34:	0000fff8 00000000 00000000 00000000     ................
   1ad44:	0001fff0 00000000 00000000 00000000     ................
   1ad54:	0003ffe0 00000000 00000000 00000000     ................
   1ad64:	0003ffc0 00000000 00000000 00000000     ................
   1ad74:	0007ff80 00000000 00000000 00000000     ................
   1ad84:	0007ff80 00000000 00000000 00000000     ................
   1ad94:	0007ff00 00000000 00000000 00000000     ................
   1ada4:	000fff00 00000000 00000000 00000000     ................
   1adb4:	000ffe00 00000000 00000000 00000000     ................
   1adc4:	000ffe00 00000000 00000000 00000000     ................
   1add4:	000ffe00 00000000 00000000 00000000     ................
   1ade4:	000ffe00 00000000 00000000 00000000     ................
   1adf4:	000fff00 00000000 00000000 00000000     ................
   1ae04:	000fff00 00000000 00000000 00000000     ................
   1ae14:	000fff80 00000000 00000000 00000000     ................
   1ae24:	0007ffe0 00000000 00000000 00000000     ................
   1ae34:	0007fffc 00000000 00000000 00000000     ................
   1ae44:	0007ffff 00000000 00000000 00000000     ................
   1ae54:	0003ffff 00000000 00000000 00000000     ................
   1ae64:	0001ffff 00000000 00000000 00000000     ................
   1ae74:	0001ffff 00000000 00000000 00000000     ................
   1ae84:	0000ffff 00000000 00000000 00000000     ................
   1ae94:	00007fff 00000000 00000000 00000000     ................
   1aea4:	00001fff 00000000 00000000 00000000     ................
   1aeb4:	00000fff 00000000 00000000 00000000     ................
   1aec4:	000001ff 00000000 00000000 00000000     ................
   1aed4:	0000003f 00000000 00000000 00000000     ?...............
	...

0001af3c <ArvoBold_18pt_CharCount>:
   1af3c:	12080805 0410150f 0e0c0808 09050906     ................
   1af4c:	0d0e0a0f 0e0e0e0e 05060d0e 0e0a0c0a     ................
   1af5c:	1210111b 130f1011 13080816 13141b10     ................
   1af6c:	0f121310 1c121211 080f1212 0c0e0709     ................
   1af7c:	0e0f0f09 0f090e10 11070910 0f111909     ................
   1af8c:	0d0d1010 160f1108 0b0d0f0e 000b0b07     ................

0001af9c <ArvoBold_18pt_Table>:
	...
   1afb8:	03cfff00 03cfff00 03cfff00 00000000     ................
	...
   1afd4:	00003f00 00003f00 00001f00 00000000     .?...?..........
   1afe4:	00003f00 00003f00 00001f00 00700000     .?...?........p.
   1aff4:	03706000 03f07000 03fff000 00fffc00     .`p..p..........
   1b004:	007fff00 00707f00 00707300 03707000     ......p..sp..pp.
   1b014:	03f07000 03fe7000 01fff000 007ffc00     .p...p..........
   1b024:	0071ff00 00707f00 00307300 00007000     ..q...p..s0..p..
	...
   1b03c:	00f00000 00f3c000 00f7e000 01f7f000     ................
   1b04c:	01e77000 0fce7f00 0fce7f00 0fceff00     .p..............
   1b05c:	01ddf000 00fde000 00fde000 0079e000     ..............y.
	...
   1b07c:	00007c00 0000fe00 0201ff00 0301c700     .|..............
   1b08c:	03c1c700 01e1c700 00f9ff00 003cfe00     ..............<.
   1b09c:	001f7c00 00ff8000 01ffe000 03fef000     .|..............
   1b0ac:	038e7c00 038e1e00 038e0f00 03fe0300     .|..............
   1b0bc:	01fc0100 00f80000 00000000 00000000     ................
   1b0cc:	00780000 00fe7800 01fffe00 03c7fe00     ..x..x..........
   1b0dc:	0383cf00 03878700 039f8700 03ffcf00     ................
   1b0ec:	01fffe00 01fcfe00 00f8f800 01fe0000     ................
   1b0fc:	03fe0000 03ce0000 01800000 00003f00     .............?..
   1b10c:	00003f00 00000f00 00000000 00000000     .?..............
   1b11c:	01ff8000 0ffff000 3ffffc00 ff00fe00     ...........?....
   1b12c:	f8001f00 70000e00 00000000 00000000     .......p........
   1b13c:	70000e00 f8001f00 7f00fe00 3ffffc00     ...p...........?
   1b14c:	0ffff000 01ff8000 00000000 00000000     ................
   1b15c:	00000e00 0000ce00 0000fc00 0000ff80     ................
   1b16c:	00007f80 00007f80 0000fc00 0000fc00     ................
   1b17c:	0000ce00 00000e00 00000000 00000000     ................
   1b18c:	000e0000 000e0000 000e0000 000e0000     ................
   1b19c:	00ffe000 00ffe000 00ffe000 000e0000     ................
   1b1ac:	000e0000 000e0000 000e0000 00000000     ................
   1b1bc:	00000000 30000000 3f000000 1f800000     .......0...?....
   1b1cc:	07800000 00000000 00000000 00000000     ................
   1b1dc:	001c0000 001c0000 001c0000 001c0000     ................
   1b1ec:	001c0000 001c0000 001c0000 00000000     ................
   1b1fc:	00000000 03c00000 03c00000 03c00000     ................
	...
   1b214:	03000000 03e00000 03fc0000 01ff8000     ................
   1b224:	003ff000 0007fe00 0000ff00 00001f00     ..?.............
   1b234:	00000000 001fe000 007ff800 01fffe00     ................
   1b244:	01e01e00 03c00f00 03800700 03800700     ................
   1b254:	03800700 03c00f00 01e01e00 01fffe00     ................
   1b264:	007ff800 001fe000 00000000 00007800     .............x..
   1b274:	03807c00 03803e00 03fffe00 03ffff00     .|...>..........
   1b284:	03ffff00 03800000 03800000 00000000     ................
	...
   1b29c:	03c03800 03e03c00 03f03e00 03f80f00     .8...<...>......
   1b2ac:	03bc0700 039e0700 038f0700 03878700     ................
   1b2bc:	0383cf00 0381fe00 0380fc00 03807800     .............x..
   1b2cc:	00000000 00601800 00e01c00 01e01e00     ......`.........
   1b2dc:	03c00f00 03800700 03838700 03838700     ................
   1b2ec:	03838700 01c7cf00 01fffe00 00fefc00     ................
   1b2fc:	007c7800 00000000 000f0000 000f8000     .x|.............
   1b30c:	000fe000 000ef000 000e7c00 000e1e00     .........|......
   1b31c:	038e0f00 038e0300 03ffc100 03ffc000     ................
   1b32c:	03ffc000 038e0000 038e0000 00000000     ................
	...
   1b344:	00e1ff00 01e1ff00 01e1ff00 03c1c700     ................
   1b354:	0381c700 0381c700 0381c700 03c3c700     ................
   1b364:	01ff8700 00ff0700 007e0000 00000000     ..........~.....
   1b374:	00000000 003c0000 00ff0000 01ffc000     ......<.........
   1b384:	01c3f000 0381f800 0381fe00 0381cf00     ................
   1b394:	0381c700 01c38100 01ff8000 00ff0000     ................
   1b3a4:	003c0000 00000000 00003f00 00003f00     ..<......?...?..
   1b3b4:	03803f00 03800700 03e00700 03f80700     .?..............
   1b3c4:	03ff0700 039fc700 0387f700 0000ff00     ................
   1b3d4:	00003f00 00000f00 00000300 00000000     .?..............
   1b3e4:	00000000 007c7800 00fefc00 01fffe00     .....x|.........
   1b3f4:	01c7cf00 03838700 03838700 03838700     ................
   1b404:	03838700 01c7cf00 01fffe00 00fefc00     ................
   1b414:	007c7800 00000000 00000000 0001f000     .x|.............
   1b424:	0003fc00 0007fe00 030f0e00 03ce0700     ................
   1b434:	03ee0700 03fe0700 00fe0700 003f0e00     ..............?.
   1b444:	000ffe00 0003fc00 0000f800 00000000     ................
   1b454:	03c3c000 03c3c000 03c3c000 00000000     ................
   1b464:	00000000 3f000000 1f81e000 0781e000     .......?........
   1b474:	0301e000 00000000 001e0000 001e0000     ................
   1b484:	001f0000 003f0000 003f0000 00738000     ......?...?...s.
   1b494:	00738000 00738000 00e1c000 00000000     ..s...s.........
   1b4a4:	00000000 0039c000 0039c000 0039c000     ......9...9...9.
   1b4b4:	0039c000 0039c000 0039c000 0039c000     ..9...9...9...9.
   1b4c4:	0039c000 0039c000 0039c000 00000000     ..9...9...9.....
   1b4d4:	00e1c000 00738000 00738000 00738000     ......s...s...s.
   1b4e4:	003f0000 003f0000 003f0000 001e0000     ..?...?...?.....
   1b4f4:	001e0000 001e0000 00000000 00001c00     ................
   1b504:	00001e00 00001e00 03dc0f00 03df0700     ................
   1b514:	03df0700 00038700 0001c700 0001fe00     ................
   1b524:	0000fe00 00007800 00000000 00000000     .....x..........
	...
   1b53c:	00ff0000 03ffc000 07ffe000 1f81f800     ................
   1b54c:	3e007c00 3c3c3c00 78ff1e00 71ff8e00     .|.>.<<<...x...q
   1b55c:	f1c38f00 e381c700 e381c700 e381c700     ................
   1b56c:	e381c700 e1c3c700 f1ffcf00 73ffce00     ...............s
   1b57c:	73ffde00 03801c00 03803c00 03c0f800     ...s.....<......
	...
   1b5a0:	03800000 03c00000 03f80000 03ff0000     ................
   1b5b0:	03bfe000 038ff800 000eff00 000e1f00     ................
   1b5c0:	000e0700 000e7f00 038fff00 039ff800     ................
   1b5d0:	03ff8000 03fc0000 03e00000 03800000     ................
	...
   1b5e8:	03800700 03800700 03ffff00 03ffff00     ................
   1b5f8:	03ffff00 03838700 03838700 03838700     ................
   1b608:	03838700 03838700 03c7cf00 01fffe00     ................
   1b618:	00fffc00 007cf800 00000000 00000000     ......|.........
   1b628:	000fc000 003ff000 007ffc00 00f03e00     ......?......>..
   1b638:	01e01e00 01c00f00 03800700 03800700     ................
   1b648:	03800700 03800700 03c00f00 01e01e00     ................
   1b658:	01f03c00 00f03800 00703800 00303800     .<...8...8p..80.
   1b668:	00000000 03800700 03800700 03ffff00     ................
   1b678:	03ffff00 03ffff00 03800700 03800700     ................
   1b688:	03800700 03800700 03c00f00 01c00e00     ................
   1b698:	01e01e00 00f87c00 007ff800 003ff000     .....|........?.
   1b6a8:	000fc000 00000000 00000000 03800700     ................
   1b6b8:	03800700 03ffff00 03ffff00 03ffff00     ................
   1b6c8:	03838700 03838700 03838700 03838700     ................
   1b6d8:	03838700 03800700 03f03f00 03f03f00     .........?...?..
   1b6e8:	03f03f00 00000000 00000000 03800700     .?..............
   1b6f8:	03800700 03ffff00 03ffff00 03ffff00     ................
   1b708:	03838700 03838700 00038700 00038700     ................
   1b718:	00038700 00000700 00001f00 00001f00     ................
   1b728:	00001f00 00000000 000fc000 003ff000     ..............?.
   1b738:	00fff800 00f07c00 01e01e00 01c00e00     .....|..........
   1b748:	03800700 03800700 03800700 03870700     ................
   1b758:	03870700 03c70e00 01e71e00 01f73c00     .............<..
   1b768:	00ff3800 03ff3800 03ff3800 00000000     .8...8...8......
   1b778:	00000000 03800700 03800700 03ffff00     ................
   1b788:	03ffff00 03ffff00 03838700 03838700     ................
   1b798:	00038000 00038000 00038000 00038000     ................
   1b7a8:	00038000 00038000 03838700 03838700     ................
   1b7b8:	03ffff00 03ffff00 03ffff00 03800700     ................
   1b7c8:	03800700 00000000 00000000 03800700     ................
   1b7d8:	03800700 03ffff00 03ffff00 03ffff00     ................
   1b7e8:	03800700 03800700 00000000 0c000700     ................
   1b7f8:	0f000700 0fffff00 07ffff00 01ffff00     ................
   1b808:	00000700 00000700 00000000 03800700     ................
   1b818:	03800700 03ffff00 03ffff00 03ffff00     ................
   1b828:	03820700 03830700 00078000 000fc000     ................
   1b838:	001ce000 00387000 00383800 03f03f00     .....p8..88..?..
   1b848:	03e01f00 03c00f00 03800700 03800700     ................
   1b858:	00000700 00000000 03800700 03800700     ................
   1b868:	03ffff00 03ffff00 03ffff00 03800700     ................
   1b878:	03800700 03800000 03800000 03800000     ................
   1b888:	03800000 03f80000 03f80000 03f80000     ................
	...
   1b8a0:	03800700 03800700 03ffff00 03ffff00     ................
   1b8b0:	03ffff00 03803f00 0000fc00 0003f800     .....?..........
   1b8c0:	0007e000 001f8000 007e0000 01f80000     ..........~.....
   1b8d0:	03e00000 03f80000 01fe0000 003f8000     ..............?.
   1b8e0:	000fe000 0003f800 0000fe00 03803f00     .............?..
   1b8f0:	03ffff00 03ffff00 03ffff00 03800700     ................
   1b900:	03800700 00000000 00000000 03800700     ................
   1b910:	03800700 03ffff00 03ffff00 03fffe00     ................
   1b920:	0380fc00 0381f000 0007e000 000f8000     ................
   1b930:	003f0000 007c0000 01f00700 03e00700     ..?...|.........
   1b940:	03ffff00 03ffff00 03ffff00 00000700     ................
   1b950:	00000700 00000000 00000000 000fc000     ................
   1b960:	003ff000 007ff800 00f03c00 01e01e00     ..?......<......
   1b970:	01c00e00 03800700 03800700 03800700     ................
   1b980:	03800700 03800700 01c00e00 01e01e00     ................
   1b990:	00f03c00 007ff800 003ff000 000fc000     .<........?.....
	...
   1b9a8:	03800700 03800700 03ffff00 03ffff00     ................
   1b9b8:	03ffff00 03870700 03870700 00070700     ................
   1b9c8:	00070700 00070700 00078f00 0003fe00     ................
   1b9d8:	0001fc00 0000f800 00000000 00000000     ................
   1b9e8:	000fc000 003ff000 00fff800 00f03c00     ......?......<..
   1b9f8:	01e01e00 03c00e00 03800700 3f800700     ...............?
   1ba08:	3f800700 3f800700 7b800700 f3c00e00     ...?...?...{....
   1ba18:	e1e01e00 e0f03c00 f0fff800 703ff000     .....<........?p
   1ba28:	700fc000 00000000 00000000 03800700     ...p............
   1ba38:	03800700 03ffff00 03ffff00 03ffff00     ................
   1ba48:	03870700 03870700 00070700 00070700     ................
   1ba58:	00070700 000f0700 00ff0700 03ff8f00     ................
   1ba68:	03f9fe00 03e1fc00 03807800 00000000     .........x......
   1ba78:	00000000 00787800 00f9fc00 01f9fe00     .....xx.........
   1ba88:	01c3cf00 0383c700 03878700 03878700     ................
   1ba98:	03878700 03870700 01cf0e00 01ff3e00     .............>..
   1baa8:	00fe3c00 007c3800 00000000 00003f00     .<...8|......?..
   1bab8:	00003f00 00003f00 00000700 03800700     .?...?..........
   1bac8:	03800700 03ffff00 03ffff00 03ffff00     ................
   1bad8:	03800700 03800700 00000700 00000700     ................
   1bae8:	00003f00 00003f00 00003f00 00000000     .?...?...?......
   1baf8:	00000700 00000700 001fff00 007fff00     ................
   1bb08:	00ffff00 01e00700 03c00700 03800000     ................
   1bb18:	03800000 03800000 03800000 03c00700     ................
   1bb28:	01e00700 00ffff00 007fff00 001fff00     ................
   1bb38:	00000700 00000700 00000700 00000700     ................
   1bb48:	00000f00 00007f00 0003ff00 000ff700     ................
   1bb58:	007f8700 01fe0000 03f00000 03f00000     ................
   1bb68:	03fe0000 007f8700 000ff700 0003ff00     ................
   1bb78:	00007f00 00000f00 00000700 00000700     ................
   1bb88:	00000700 00000700 00000f00 00007f00     ................
   1bb98:	0003ff00 000ff700 007fc700 01fe0000     ................
   1bba8:	03f80000 03e00000 03fe0000 01ffe000     ................
   1bbb8:	001ffe00 0000ff00 0000ff00 0007fc00     ................
   1bbc8:	003fe000 01ff0000 03f80000 03f00000     ..?.............
   1bbd8:	01fe0000 007f8700 001ff700 0003ff00     ................
   1bbe8:	00007f00 00000f00 00000700 00000700     ................
   1bbf8:	03800700 03c00f00 03e01f00 03f03f00     .............?..
   1bc08:	03f87f00 03bcf700 001fe000 000fc000     ................
   1bc18:	000fc000 001fe000 03bcf700 03f87f00     ................
   1bc28:	03f03f00 03e01f00 03c00f00 03800700     .?..............
	...
   1bc40:	00000700 00000700 00000f00 00001f00     ................
   1bc50:	00003f00 03807f00 0380f700 03ffc000     .?..............
   1bc60:	03ff8000 03ffc000 0380e000 03807700     .............w..
   1bc70:	00003f00 00001f00 00000f00 00000700     .?..............
   1bc80:	00000700 00000000 00000000 03e07f00     ................
   1bc90:	03f07f00 03f87f00 03de0700 038f0700     ................
   1bca0:	0387c700 0381e700 0380f700 03803f00     .............?..
   1bcb0:	03801f00 03f00f00 03f00f00 03f00700     ................
	...
   1bcc8:	ffffffe0 ffffffe0 ffffffe0 e00000e0     ................
   1bcd8:	e00000e0 00000000 00000000 00000100     ................
   1bce8:	00000f00 00007f00 0001fe00 000ff800     ................
   1bcf8:	007fc000 01fe0000 03f00000 03c00000     ................
   1bd08:	00000000 e00000e0 e00000e0 ffffffe0     ................
   1bd18:	ffffffe0 ffffffe0 00000000 00000000     ................
   1bd28:	00010000 0001c000 0001f000 0001fc00     ................
   1bd38:	00003f00 00000f00 00000f00 00003f00     .?...........?..
   1bd48:	0000fe00 0001f800 0001c000 00010000     ................
   1bd58:	00000000 38000000 38000000 38000000     .......8...8...8
   1bd68:	38000000 38000000 38000000 38000000     ...8...8...8...8
   1bd78:	38000000 38000000 38000000 38000000     ...8...8...8...8
   1bd88:	38000000 00000000 00000000 00000100     ...8............
   1bd98:	00000300 00000700 00000f00 00000e00     ................
   1bda8:	00000800 00000000 00000000 00e00000     ................
   1bdb8:	01f18000 03f98000 0399c000 0399c000     ................
   1bdc8:	0399c000 0399c000 039bc000 03ffc000     ................
   1bdd8:	03ff8000 03ff0000 03800000 03800000     ................
   1bde8:	00000000 00000700 00000700 03ffff00     ................
   1bdf8:	03ffff00 03ffff00 03c3c000 0381c000     ................
   1be08:	0381c000 0381c000 0381c000 01c38000     ................
   1be18:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
   1be28:	00000000 003e0000 00ff0000 01ff8000     ......>.........
   1be38:	01c38000 0381c000 0381c000 0381c000     ................
   1be48:	0381c000 03c3c000 01e38000 00e38000     ................
   1be58:	00638000 00000000 00000000 003c0000     ..c...........<.
   1be68:	00ff0000 01ff8000 03c38000 0381c000     ................
   1be78:	0381c000 0381c000 0381c700 03c3c700     ................
   1be88:	03ffff00 03ffff00 03ffff00 03800000     ................
   1be98:	03800000 00000000 00000000 003c0000     ..............<.
   1bea8:	00ff0000 01ff8000 01d98000 0399c000     ................
   1beb8:	0399c000 0399c000 0399c000 0399c000     ................
   1bec8:	039f8000 019f0000 001e0000 00000000     ................
   1bed8:	00000000 0381c000 0381c000 03fffc00     ................
   1bee8:	03fffe00 03ffff00 0381c700 0381c700     ................
   1bef8:	00000700 00000000 003c0000 60ff0000     ..........<....`
   1bf08:	71ff8000 f1c38000 e381c000 e381c000     ...q............
   1bf18:	e381c000 e381c000 f3c3c000 7fffc000     ................
   1bf28:	3fffc000 1fffc000 00000000 00000000     ...?............
   1bf38:	00000000 03800700 03800700 03ffff00     ................
   1bf48:	03ffff00 03ffff00 03838000 0381c000     ................
   1bf58:	0001c000 0001c000 0003c000 03ffc000     ................
   1bf68:	03ff8000 03ff0000 03800000 03800000     ................
   1bf78:	00000000 0381c000 0381c600 03ffcf00     ................
   1bf88:	03ffcf00 03ffcf00 03800600 03800000     ................
   1bf98:	00000000 e001c000 e001c000 ffffc600     ................
   1bfa8:	7fffcf00 3fffcf00 00000f00 00000600     .......?........
   1bfb8:	00000000 03800700 03800700 03ffff00     ................
   1bfc8:	03ffff00 03ffff00 039c0000 039c0000     ................
   1bfd8:	003c0000 007f0000 00ff8000 01e7c000     ..<.............
   1bfe8:	03c3c000 03c1c000 03c1c000 00000000     ................
	...
   1c000:	03800700 03800700 03ffff00 03ffff00     ................
   1c010:	03ffff00 03800000 03800000 00000000     ................
   1c020:	00000000 0381c000 0381c000 03ffc000     ................
   1c030:	03ffc000 03ffc000 03838000 0381c000     ................
   1c040:	0001c000 0001c000 0003c000 03ffc000     ................
   1c050:	03ff8000 03ff0000 03838000 0381c000     ................
   1c060:	0001c000 0001c000 0003c000 03ffc000     ................
   1c070:	03ff8000 03ff0000 03800000 03800000     ................
   1c080:	00000000 0381c000 0381c000 03ffc000     ................
   1c090:	03ffc000 03ffc000 03838000 0381c000     ................
   1c0a0:	0001c000 0001c000 0001c000 0003c000     ................
   1c0b0:	03ffc000 03ff8000 03ff0000 03800000     ................
   1c0c0:	03800000 00000000 003c0000 00ff0000     ..........<.....
   1c0d0:	01ff8000 01c38000 03c1c000 0381c000     ................
   1c0e0:	0381c000 0381c000 0381c000 01c38000     ................
   1c0f0:	01ff8000 00ff0000 003c0000 00000000     ..........<.....
	...
   1c108:	e001c000 e001c000 ffffc000 ffffc000     ................
   1c118:	ffffc000 e3c3c000 e381c000 0381c000     ................
   1c128:	0381c000 0381c000 01c38000 01ff8000     ................
   1c138:	00ff0000 003c0000 00000000 00000000     ......<.........
   1c148:	003c0000 00ff0000 01ff8000 01c38000     ..<.............
   1c158:	03c3c000 0381c000 0381c000 0381c000     ................
   1c168:	e381c000 e3c3c000 ffffc000 ffffc000     ................
   1c178:	ffffc000 e0000000 e0000000 00000000     ................
   1c188:	0381c000 0381c000 03ffc000 03ffc000     ................
   1c198:	03ffc000 03838000 0381c000 0001c000     ................
   1c1a8:	0003c000 0003c000 0003c000 00000000     ................
   1c1b8:	00000000 01c70000 01cf8000 01cfc000     ................
   1c1c8:	03ddc000 0399c000 0399c000 0399c000     ................
   1c1d8:	03bbc000 01fb8000 01f38000 00e38000     ................
   1c1e8:	00000000 0001c000 0001c000 01fff800     ................
   1c1f8:	03fffc00 03fffc00 0381c000 0381c000     ................
   1c208:	01800000 0001c000 0001c000 007fc000     ................
   1c218:	01ffc000 01ffc000 03c00000 03800000     ................
   1c228:	03800000 03800000 0381c000 01c1c000     ................
   1c238:	03ffc000 03ffc000 03ffc000 03800000     ................
   1c248:	03800000 00000000 0001c000 0001c000     ................
   1c258:	0003c000 000fc000 003fc000 00fdc000     ..........?.....
   1c268:	03f1c000 03c00000 03f00000 01fdc000     ................
   1c278:	007fc000 000fc000 0003c000 0001c000     ................
   1c288:	0001c000 0001c000 0001c000 0007c000     ................
   1c298:	001fc000 00ffc000 03fdc000 03e1c000     ................
   1c2a8:	03f80000 01ff8000 003fc000 0007c000     ..........?.....
   1c2b8:	000fc000 007fc000 03fe0000 03f00000     ................
   1c2c8:	03e1c000 03fdc000 00ffc000 001fc000     ................
   1c2d8:	0003c000 0001c000 0001c000 0381c000     ................
   1c2e8:	0381c000 03c1c000 03e3c000 03f7c000     ................
   1c2f8:	03ffc000 003c0000 003c0000 03ffc000     ......<...<.....
   1c308:	03ffc000 03e7c000 03c3c000 0381c000     ................
   1c318:	0381c000 0001c000 0001c000 0003c000     ................
   1c328:	e00fc000 e03fc000 f0fdc000 fff00000     ......?.........
   1c338:	ffc00000 eff00000 e3fdc000 007fc000     ................
   1c348:	001fc000 0003c000 0001c000 0001c000     ................
   1c358:	00000000 0387c000 03c7c000 03f7c000     ................
   1c368:	03f9c000 03fdc000 039fc000 038fc000     ................
   1c378:	03e3c000 03e1c000 03e04000 00000000     .........@......
	...
   1c390:	00070000 00070000 00070000 1fffffc0     ................
   1c3a0:	3fffffe0 3ffdffe0 380000e0 380000e0     ...?...?...8...8
	...
   1c3bc:	ffffffe0 ffffffe0 ffffffe0 00000000     ................
	...
   1c3d4:	380000e0 380000e0 3ffdffe0 3fffffe0     ...8...8...?...?
   1c3e4:	1fffffc0 00070000 00070000 00070000     ................
	...
   1c400:	00070000 00078000 0001c000 0001c000     ................
   1c410:	0003c000 00038000 00078000 00070000     ................
   1c420:	00070000 0003c000 0001c000 6e756f43     ............Coun
   1c430:	00726574 00006425                       ter.%d..

0001c438 <__sf_fake_stderr>:
	...

0001c458 <__sf_fake_stdin>:
	...

0001c478 <__sf_fake_stdout>:
	...
   1c498:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   1c4a8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   1c4b8:	31300046 35343332 39383736 64636261     F.0123456789abcd
   1c4c8:	00006665                                ef..

0001c4cc <_init>:
   1c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4ce:	46c0      	nop			; (mov r8, r8)
   1c4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c4d2:	bc08      	pop	{r3}
   1c4d4:	469e      	mov	lr, r3
   1c4d6:	4770      	bx	lr

0001c4d8 <__init_array_start>:
   1c4d8:	000000dd 	.word	0x000000dd

0001c4dc <_fini>:
   1c4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4de:	46c0      	nop			; (mov r8, r8)
   1c4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c4e2:	bc08      	pop	{r3}
   1c4e4:	469e      	mov	lr, r3
   1c4e6:	4770      	bx	lr

0001c4e8 <__fini_array_start>:
   1c4e8:	000000b5 	.word	0x000000b5
